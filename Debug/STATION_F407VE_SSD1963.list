
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033540  0801f840  0801f840  0002f840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052d80  08052d80  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08052d80  08052d80  00062d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052d88  08052d88  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052d88  08052d88  00062d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08052d8c  08052d8c  00062d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08052d90  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          000007d4  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20000a0c  20000a0c  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cb99  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034bf  00000000  00000000  0008ce01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000902c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00090308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a48d  00000000  00000000  00090380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd41  00000000  00000000  000aa80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a54e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e08  00000000  00000000  0017a5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00025038  00000000  00000000  001813a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f824 	.word	0x0801f824

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f824 	.word	0x0801f824

080001d0 <AT24XX_IsConnected>:
#include "at24.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d ffa3 	bl	800e128 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fff8 	bl	800d21c <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 feba 	bl	8006fac <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00d f8cd 	bl	800d410 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f019 fa0c 	bl	801974c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 ff23 	bl	801918c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01e facb 	bl	801e8f0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f019 f8c9 	bl	80194f8 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 fbbb 	bl	8019ae8 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f019 f856 	bl	8019448 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f019 f83d 	bl	8019424 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01e fb1b 	bl	801e9f0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b fb8f 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b fc82 	bl	800bd20 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00b fb17 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b fc0a 	bl	800bd20 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00b fa7a 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00b fb6e 	bl	800bd20 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00b f996 	bl	800bb26 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00b f98a 	bl	800bb26 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00b f97e 	bl	800bb26 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00b f974 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00b fa69 	bl	800bd20 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00b f946 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00b fa3b 	bl	800bd20 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00b f8e2 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00b f9d7 	bl	800bd20 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00b f8cf 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00b f9c3 	bl	800bd20 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 fd2c 	bl	80194f8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f018 fb6b 	bl	801918c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 fe45 	bl	801974c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d ff8b 	bl	801e9f0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 fd08 	bl	80194f8 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 fd00 	bl	80194f8 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 fe21 	bl	801974c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f018 fb34 	bl	8019188 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 fce3 	bl	80194f8 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f018 fb27 	bl	801918c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 fca8 	bl	80194f8 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f018 fae7 	bl	801918c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fdc1 	bl	801974c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 fc8f 	bl	80194f8 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 fc86 	bl	80194f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fef6 	bl	801e9f0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 fc73 	bl	80194f8 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f018 fab2 	bl	801918c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fd8c 	bl	801974c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a ff0a 	bl	800bb26 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fffe 	bl	800bd20 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f018 fa2a 	bl	8019404 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f018 fa99 	bl	80194f8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f018 fa27 	bl	8019424 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f018 f8d5 	bl	801918c <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a fd77 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a fd57 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a fd37 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a fd17 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a fcf7 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a fcd7 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a fcb7 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a fc97 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a fc77 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a fc57 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a fc37 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a fc17 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a fbf7 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a fbd7 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a fbb7 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a fb97 	bl	800bb26 <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	0805263c 	.word	0x0805263c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01d f9dd 	bl	801e8f0 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 fe23 	bl	8019188 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f018 fa41 	bl	80199dc <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fe0f 	bl	801918c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 ff2f 	bl	8019424 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 ff20 	bl	8019424 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fdcc 	bl	8019188 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f018 fade 	bl	8019bb8 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 ff1b 	bl	801948c <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 ff4c 	bl	80194f8 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01d f93e 	bl	801e8f0 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f018 fa9c 	bl	8019bb8 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fefe 	bl	801948c <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 ff2f 	bl	80194f8 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 fd70 	bl	801918c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01d f918 	bl	801e8f0 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f018 fa76 	bl	8019bb8 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f018 fa88 	bl	8019bf4 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fec8 	bl	801948c <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fef9 	bl	80194f8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01d f8eb 	bl	801e8f0 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 fd30 	bl	8019188 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f018 fa42 	bl	8019bb8 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 fe71 	bl	801948c <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 fcea 	bl	8019188 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 ffc3 	bl	801974c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fe86 	bl	80194f8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f018 f978 	bl	8019ae8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fdcb 	bl	8019424 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 fc77 	bl	8016228 <HAL_UART_Receive_IT>
		//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0b3      	sub	sp, #204	; 0xcc
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f005 fa3f 	bl	8006de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f001 ff2b 	bl	80037bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 f8e9 	bl	8003b3c <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 f9c1 	bl	8003cf0 <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f001 ffc3 	bl	80038f8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 f891 	bl	8003a98 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 f859 	bl	8003a2c <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f821 	bl	80039c0 <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 f8b5 	bl	8003aec <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f001 ff85 	bl	8003890 <MX_DAC_Init>
  MX_SPI1_Init();
 8001986:	f001 ffe5 	bl	8003954 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fccd 	bl	8005328 <LCD_Init>
	XPT2046_Init();
 800198e:	f005 f931 	bl	8006bf4 <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25Q_Init();
 8001996:	f005 f86d 	bl	8006a74 <W25Q_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 fae9 	bl	8003f80 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 fadf 	bl	8003f80 <LCD_Rect_Fill>
/*	W25Q_Erase_Sector(2);

	uint8_t flashIN[] = "FLASH OK \r\n";
	W25Q_Write_Data(8192, flashIN, 10);
*/
	uint8_t flashOUT[8] = {0};
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	W25Q_Read_Data(8192, flashOUT, 9);
 80019ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019d2:	2209      	movs	r2, #9
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019da:	f004 ff5b 	bl	8006894 <W25Q_Read_Data>
	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);
 80019de:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	2208      	movs	r2, #8
 80019e6:	489a      	ldr	r0, [pc, #616]	; (8001c50 <main+0x2f8>)
 80019e8:	f014 faa5 	bl	8015f36 <HAL_UART_Transmit>


	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80019f2:	e027      	b.n	8001a44 <main+0xec>
 80019f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80019f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fc44 	bl	8000290 <AT24XX_Read>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fc38 	bl	8000290 <AT24XX_Read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff59 	bl	80018dc <byteS>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a32:	b211      	sxth	r1, r2
 8001a34:	4a87      	ldr	r2, [pc, #540]	; (8001c54 <main+0x2fc>)
 8001a36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8001a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a48:	2b9a      	cmp	r3, #154	; 0x9a
 8001a4a:	d9d3      	bls.n	80019f4 <main+0x9c>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001a52:	e027      	b.n	8001aa4 <main+0x14c>
 8001a54:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a58:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fc14 	bl	8000290 <AT24XX_Read>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fc08 	bl	8000290 <AT24XX_Read>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff ff29 	bl	80018dc <byteS>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a92:	b211      	sxth	r1, r2
 8001a94:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <main+0x300>)
 8001a96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a9a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001aa4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001aa8:	2b9a      	cmp	r3, #154	; 0x9a
 8001aaa:	d9d3      	bls.n	8001a54 <main+0xfc>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8001ab2:	e027      	b.n	8001b04 <main+0x1ac>
 8001ab4:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ab8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fbe4 	bl	8000290 <AT24XX_Read>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461c      	mov	r4, r3
 8001acc:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fbd8 	bl	8000290 <AT24XX_Read>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff fef9 	bl	80018dc <byteS>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001af2:	b211      	sxth	r1, r2
 8001af4:	4a59      	ldr	r2, [pc, #356]	; (8001c5c <main+0x304>)
 8001af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001afa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001afe:	3301      	adds	r3, #1
 8001b00:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8001b04:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001b08:	2b9a      	cmp	r3, #154	; 0x9a
 8001b0a:	d9d3      	bls.n	8001ab4 <main+0x15c>


	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <main+0x308>)
 8001b0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b14:	c303      	stmia	r3!, {r0, r1}
 8001b16:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001b18:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b1c:	2364      	movs	r3, #100	; 0x64
 8001b1e:	220a      	movs	r2, #10
 8001b20:	484b      	ldr	r0, [pc, #300]	; (8001c50 <main+0x2f8>)
 8001b22:	f014 fa08 	bl	8015f36 <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001b26:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <main+0x30c>)
 8001b28:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001b36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b3a:	2214      	movs	r2, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4844      	ldr	r0, [pc, #272]	; (8001c50 <main+0x2f8>)
 8001b40:	f014 fb2d 	bl	801619e <HAL_UART_Transmit_IT>

	//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
	//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001b44:	2210      	movs	r2, #16
 8001b46:	4948      	ldr	r1, [pc, #288]	; (8001c68 <main+0x310>)
 8001b48:	4841      	ldr	r0, [pc, #260]	; (8001c50 <main+0x2f8>)
 8001b4a:	f014 fb6d 	bl	8016228 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001b4e:	2120      	movs	r1, #32
 8001b50:	4846      	ldr	r0, [pc, #280]	; (8001c6c <main+0x314>)
 8001b52:	f009 fddf 	bl	800b714 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d12c      	bne.n	8001bb6 <main+0x25e>

			uint16_t touchX = getX();
 8001b5c:	f005 f90c 	bl	8006d78 <getX>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			uint16_t touchY = getY();
 8001b66:	f005 f921 	bl	8006dac <getY>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			if (touchX && touchY && touchX != 0x0DB)
 8001b70:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d012      	beq.n	8001b9e <main+0x246>
 8001b78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <main+0x246>
 8001b80:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001b84:	2bdb      	cmp	r3, #219	; 0xdb
 8001b86:	d00a      	beq.n	8001b9e <main+0x246>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001b88:	f8b7 108e 	ldrh.w	r1, [r7, #142]	; 0x8e
 8001b8c:	f8b7 0090 	ldrh.w	r0, [r7, #144]	; 0x90
 8001b90:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f002 f9f1 	bl	8003f80 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	4833      	ldr	r0, [pc, #204]	; (8001c70 <main+0x318>)
 8001ba4:	f009 fdce 	bl	800b744 <HAL_GPIO_WritePin>
			touchX = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			touchY = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001bb4:	e004      	b.n	8001bc0 <main+0x268>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	482d      	ldr	r0, [pc, #180]	; (8001c70 <main+0x318>)
 8001bbc:	f009 fdc2 	bl	800b744 <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001bc0:	f7ff f8fa 	bl	8000db8 <DS3231_getSec>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <main+0x31c>)
 8001bca:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <main+0x320>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <main+0x31c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d0ba      	beq.n	8001b4e <main+0x1f6>

			rtcMin = DS3231_getMin();
 8001bd8:	f7ff f8fc 	bl	8000dd4 <DS3231_getMin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <main+0x324>)
 8001be2:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <main+0x328>)
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2301      	movs	r3, #1
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2300      	movs	r3, #0
 8001bee:	2208      	movs	r2, #8
 8001bf0:	2123      	movs	r1, #35	; 0x23
 8001bf2:	20aa      	movs	r0, #170	; 0xaa
 8001bf4:	f002 fe08 	bl	8004808 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <main+0x328>)
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	2208      	movs	r2, #8
 8001c04:	214b      	movs	r1, #75	; 0x4b
 8001c06:	20aa      	movs	r0, #170	; 0xaa
 8001c08:	f002 fdfe 	bl	8004808 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <main+0x31c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d034      	beq.n	8001c84 <main+0x32c>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <main+0x328>)
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2301      	movs	r3, #1
 8001c24:	2207      	movs	r2, #7
 8001c26:	2123      	movs	r1, #35	; 0x23
 8001c28:	20aa      	movs	r0, #170	; 0xaa
 8001c2a:	f002 fded 	bl	8004808 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <main+0x328>)
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2301      	movs	r3, #1
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	2207      	movs	r2, #7
 8001c3a:	214b      	movs	r1, #75	; 0x4b
 8001c3c:	20aa      	movs	r0, #170	; 0xaa
 8001c3e:	f002 fde3 	bl	8004808 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <main+0x314>)
 8001c4a:	f009 fd7b 	bl	800b744 <HAL_GPIO_WritePin>
 8001c4e:	e033      	b.n	8001cb8 <main+0x360>
 8001c50:	200004d8 	.word	0x200004d8
 8001c54:	200005bc 	.word	0x200005bc
 8001c58:	200006f4 	.word	0x200006f4
 8001c5c:	2000082c 	.word	0x2000082c
 8001c60:	080526a8 	.word	0x080526a8
 8001c64:	080526b4 	.word	0x080526b4
 8001c68:	20000975 	.word	0x20000975
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	2000056d 	.word	0x2000056d
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	2000056e 	.word	0x2000056e
 8001c80:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001c84:	2300      	movs	r3, #0
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2207      	movs	r2, #7
 8001c90:	2123      	movs	r1, #35	; 0x23
 8001c92:	20aa      	movs	r0, #170	; 0xaa
 8001c94:	f002 fdb8 	bl	8004808 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	214b      	movs	r1, #75	; 0x4b
 8001ca6:	20aa      	movs	r0, #170	; 0xaa
 8001ca8:	f002 fdae 	bl	8004808 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	48bb      	ldr	r0, [pc, #748]	; (8001fa0 <main+0x648>)
 8001cb4:	f009 fd46 	bl	800b744 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001cb8:	4bba      	ldr	r3, [pc, #744]	; (8001fa4 <main+0x64c>)
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	4bba      	ldr	r3, [pc, #744]	; (8001fa8 <main+0x650>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f001 808c 	beq.w	8002dde <main+0x1486>

				rtcHrs = DS3231_getHrs();
 8001cc6:	f7ff f893 	bl	8000df0 <DS3231_getHrs>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4bb7      	ldr	r3, [pc, #732]	; (8001fac <main+0x654>)
 8001cd0:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8001cd2:	4bb4      	ldr	r3, [pc, #720]	; (8001fa4 <main+0x64c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cdc:	49b4      	ldr	r1, [pc, #720]	; (8001fb0 <main+0x658>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f018 ffea 	bl	801acb8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001ce4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	2301      	movs	r3, #1
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4bb0      	ldr	r3, [pc, #704]	; (8001fb4 <main+0x65c>)
 8001cf2:	2164      	movs	r1, #100	; 0x64
 8001cf4:	20b2      	movs	r0, #178	; 0xb2
 8001cf6:	f003 fa9d 	bl	8005234 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8001cfa:	4bab      	ldr	r3, [pc, #684]	; (8001fa8 <main+0x650>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d04:	49aa      	ldr	r1, [pc, #680]	; (8001fb0 <main+0x658>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f018 ffd6 	bl	801acb8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d0c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d10:	4ba9      	ldr	r3, [pc, #676]	; (8001fb8 <main+0x660>)
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2301      	movs	r3, #1
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4ba6      	ldr	r3, [pc, #664]	; (8001fb4 <main+0x65c>)
 8001d1a:	2164      	movs	r1, #100	; 0x64
 8001d1c:	20b2      	movs	r0, #178	; 0xb2
 8001d1e:	f003 fa89 	bl	8005234 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8001d22:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <main+0x664>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4ba1      	ldr	r3, [pc, #644]	; (8001fac <main+0x654>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	f000 80fb 	beq.w	8001f26 <main+0x5ce>

					rtcDay = DS3231_getDay();
 8001d30:	f7ff f86c 	bl	8000e0c <DS3231_getDay>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4ba1      	ldr	r3, [pc, #644]	; (8001fc0 <main+0x668>)
 8001d3a:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8001d3c:	f7ff f874 	bl	8000e28 <DS3231_getDate>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b9f      	ldr	r3, [pc, #636]	; (8001fc4 <main+0x66c>)
 8001d46:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8001d48:	f7ff f87c 	bl	8000e44 <DS3231_getMonth>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b9d      	ldr	r3, [pc, #628]	; (8001fc8 <main+0x670>)
 8001d52:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8001d54:	f7ff f884 	bl	8000e60 <DS3231_getYear>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b9b      	ldr	r3, [pc, #620]	; (8001fcc <main+0x674>)
 8001d5e:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8001d60:	4b96      	ldr	r3, [pc, #600]	; (8001fbc <main+0x664>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d6a:	4991      	ldr	r1, [pc, #580]	; (8001fb0 <main+0x658>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f018 ffa3 	bl	801acb8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d72:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d76:	2300      	movs	r3, #0
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b8d      	ldr	r3, [pc, #564]	; (8001fb4 <main+0x65c>)
 8001d80:	2164      	movs	r1, #100	; 0x64
 8001d82:	2000      	movs	r0, #0
 8001d84:	f003 fa56 	bl	8005234 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8001d88:	4b88      	ldr	r3, [pc, #544]	; (8001fac <main+0x654>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d92:	4987      	ldr	r1, [pc, #540]	; (8001fb0 <main+0x658>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f018 ff8f 	bl	801acb8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d9a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <main+0x660>)
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2301      	movs	r3, #1
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <main+0x65c>)
 8001da8:	2164      	movs	r1, #100	; 0x64
 8001daa:	2000      	movs	r0, #0
 8001dac:	f003 fa42 	bl	8005234 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8001db0:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <main+0x678>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <main+0x668>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f000 80a8 	beq.w	8001f0e <main+0x5b6>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8001dbe:	4b80      	ldr	r3, [pc, #512]	; (8001fc0 <main+0x668>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	1d5a      	adds	r2, r3, #5
 8001dc4:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <main+0x67c>)
 8001dc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001dca:	4413      	add	r3, r2
 8001dcc:	1099      	asrs	r1, r3, #2
 8001dce:	17d3      	asrs	r3, r2, #31
 8001dd0:	1ac9      	subs	r1, r1, r3
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a5b      	subs	r3, r3, r1
 8001dd8:	1ad1      	subs	r1, r2, r3
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <main+0x680>)
 8001ddc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001de0:	2300      	movs	r3, #0
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2301      	movs	r3, #1
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <main+0x684>)
 8001dea:	218c      	movs	r1, #140	; 0x8c
 8001dec:	2005      	movs	r0, #5
 8001dee:	f003 fa21 	bl	8005234 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <main+0x668>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	1d9a      	adds	r2, r3, #6
 8001df8:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <main+0x67c>)
 8001dfa:	fb83 1302 	smull	r1, r3, r3, r2
 8001dfe:	4413      	add	r3, r2
 8001e00:	1099      	asrs	r1, r3, #2
 8001e02:	17d3      	asrs	r3, r2, #31
 8001e04:	1ac9      	subs	r1, r1, r3
 8001e06:	460b      	mov	r3, r1
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	1a5b      	subs	r3, r3, r1
 8001e0c:	1ad1      	subs	r1, r2, r3
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <main+0x680>)
 8001e10:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e14:	23ff      	movs	r3, #255	; 0xff
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <main+0x684>)
 8001e1e:	218c      	movs	r1, #140	; 0x8c
 8001e20:	2005      	movs	r0, #5
 8001e22:	f003 fa07 	bl	8005234 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8001e26:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <main+0x670>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f103 010a 	add.w	r1, r3, #10
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <main+0x688>)
 8001e30:	fb83 2301 	smull	r2, r3, r3, r1
 8001e34:	105a      	asrs	r2, r3, #1
 8001e36:	17cb      	asrs	r3, r1, #31
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	1aca      	subs	r2, r1, r3
 8001e44:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <main+0x68c>)
 8001e46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <main+0x684>)
 8001e54:	218c      	movs	r1, #140	; 0x8c
 8001e56:	2096      	movs	r0, #150	; 0x96
 8001e58:	f003 f9ec 	bl	8005234 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <main+0x670>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f103 010b 	add.w	r1, r3, #11
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <main+0x688>)
 8001e66:	fb83 2301 	smull	r2, r3, r3, r1
 8001e6a:	105a      	asrs	r2, r3, #1
 8001e6c:	17cb      	asrs	r3, r1, #31
 8001e6e:	1ad2      	subs	r2, r2, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	1aca      	subs	r2, r1, r3
 8001e7a:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <main+0x68c>)
 8001e7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2301      	movs	r3, #1
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <main+0x684>)
 8001e8c:	218c      	movs	r1, #140	; 0x8c
 8001e8e:	2096      	movs	r0, #150	; 0x96
 8001e90:	f003 f9d0 	bl	8005234 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8001e94:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <main+0x690>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b54      	ldr	r3, [pc, #336]	; (8001fec <main+0x694>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <main+0x698>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4951      	ldr	r1, [pc, #324]	; (8001ff4 <main+0x69c>)
 8001eae:	f018 ff03 	bl	801acb8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8001eb2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <main+0x684>)
 8001ec0:	218c      	movs	r1, #140	; 0x8c
 8001ec2:	20fa      	movs	r0, #250	; 0xfa
 8001ec4:	f003 f9b6 	bl	8005234 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <main+0x66c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <main+0x670>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <main+0x674>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4944      	ldr	r1, [pc, #272]	; (8001ff4 <main+0x69c>)
 8001ee2:	f018 fee9 	bl	801acb8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8001ee6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <main+0x684>)
 8001ef6:	218c      	movs	r1, #140	; 0x8c
 8001ef8:	20fa      	movs	r0, #250	; 0xfa
 8001efa:	f003 f99b 	bl	8005234 <LCD_Font>

						rtcDayLast = rtcDay;
 8001efe:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <main+0x668>)
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <main+0x678>)
 8001f04:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <main+0x66c>)
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <main+0x690>)
 8001f0c:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <main+0x670>)
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <main+0x694>)
 8001f14:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <main+0x674>)
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <main+0x698>)
 8001f1c:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <main+0x654>)
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <main+0x664>)
 8001f24:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <main+0x650>)
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <main+0x64c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8001f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f32:	f7fe fa59 	bl	80003e8 <BME280_getTemperature>
 8001f36:	ee10 3a10 	vmov	r3, s0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f017 fa84 	bl	8019448 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	492c      	ldr	r1, [pc, #176]	; (8001ff8 <main+0x6a0>)
 8001f46:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8001f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4e:	f7fe fac3 	bl	80004d8 <BME280_getHumidity>
 8001f52:	ee10 3a10 	vmov	r3, s0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f017 fa76 	bl	8019448 <__aeabi_f2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4926      	ldr	r1, [pc, #152]	; (8001ffc <main+0x6a4>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8001f66:	f7fe fb57 	bl	8000618 <BME280_getPressure>
 8001f6a:	eef0 7a40 	vmov.f32	s15, s0
 8001f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f72:	ee17 3a90 	vmov	r3, s15
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <main+0x6a8>)
 8001f7a:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <main+0x6a8>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f84:	f240 872b 	bls.w	8002dde <main+0x1486>
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <main+0x6a8>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	f240 424b 	movw	r2, #1099	; 0x44b
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f200 8724 	bhi.w	8002dde <main+0x1486>
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <main+0x6a0>)
 8001f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f9c:	e032      	b.n	8002004 <main+0x6ac>
 8001f9e:	bf00      	nop
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	20000001 	.word	0x20000001
 8001fa8:	2000056e 	.word	0x2000056e
 8001fac:	2000056f 	.word	0x2000056f
 8001fb0:	0805264c 	.word	0x0805264c
 8001fb4:	08052608 	.word	0x08052608
 8001fb8:	00ffa500 	.word	0x00ffa500
 8001fbc:	20000002 	.word	0x20000002
 8001fc0:	20000570 	.word	0x20000570
 8001fc4:	20000571 	.word	0x20000571
 8001fc8:	20000572 	.word	0x20000572
 8001fcc:	20000573 	.word	0x20000573
 8001fd0:	20000574 	.word	0x20000574
 8001fd4:	92492493 	.word	0x92492493
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	08029f70 	.word	0x08029f70
 8001fe0:	2aaaaaab 	.word	0x2aaaaaab
 8001fe4:	20000024 	.word	0x20000024
 8001fe8:	20000575 	.word	0x20000575
 8001fec:	20000576 	.word	0x20000576
 8001ff0:	20000577 	.word	0x20000577
 8001ff4:	08052654 	.word	0x08052654
 8001ff8:	20000578 	.word	0x20000578
 8001ffc:	20000588 	.word	0x20000588
 8002000:	200005b8 	.word	0x200005b8
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <main+0x8dc>)
 800200a:	f017 fce7 	bl	80199dc <__aeabi_dcmplt>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 86e4 	beq.w	8002dde <main+0x1486>
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <main+0x8e0>)
 8002018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b86      	ldr	r3, [pc, #536]	; (800223c <main+0x8e4>)
 8002022:	f017 fcf9 	bl	8019a18 <__aeabi_dcmpgt>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 86d8 	beq.w	8002dde <main+0x1486>
 800202e:	4b84      	ldr	r3, [pc, #528]	; (8002240 <main+0x8e8>)
 8002030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f017 fcec 	bl	8019a18 <__aeabi_dcmpgt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 86cb 	beq.w	8002dde <main+0x1486>
 8002048:	4b7d      	ldr	r3, [pc, #500]	; (8002240 <main+0x8e8>)
 800204a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <main+0x8ec>)
 8002054:	f017 fcc2 	bl	80199dc <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 86bf 	beq.w	8002dde <main+0x1486>

					if (temperature != temperatureLast) {
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <main+0x8e0>)
 8002062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002066:	4b78      	ldr	r3, [pc, #480]	; (8002248 <main+0x8f0>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f017 fcac 	bl	80199c8 <__aeabi_dcmpeq>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8120 	bne.w	80022b8 <main+0x960>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002078:	4b73      	ldr	r3, [pc, #460]	; (8002248 <main+0x8f0>)
 800207a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b72      	ldr	r3, [pc, #456]	; (800224c <main+0x8f4>)
 8002084:	f017 fcbe 	bl	8019a04 <__aeabi_dcmpge>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <main+0x764>
 800208e:	4b6e      	ldr	r3, [pc, #440]	; (8002248 <main+0x8f0>)
 8002090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f017 fc9e 	bl	80199dc <__aeabi_dcmplt>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01c      	beq.n	80020e0 <main+0x788>
 80020a6:	4b68      	ldr	r3, [pc, #416]	; (8002248 <main+0x8f0>)
 80020a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b67      	ldr	r3, [pc, #412]	; (8002250 <main+0x8f8>)
 80020b2:	f017 fcb1 	bl	8019a18 <__aeabi_dcmpgt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d011      	beq.n	80020e0 <main+0x788>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <main+0x8f0>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	4638      	mov	r0, r7
 80020c4:	4963      	ldr	r1, [pc, #396]	; (8002254 <main+0x8fc>)
 80020c6:	f018 fdf7 	bl	801acb8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80020ca:	463a      	mov	r2, r7
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2301      	movs	r3, #1
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4b60      	ldr	r3, [pc, #384]	; (8002258 <main+0x900>)
 80020d6:	21bb      	movs	r1, #187	; 0xbb
 80020d8:	2001      	movs	r0, #1
 80020da:	f003 f8ab 	bl	8005234 <LCD_Font>
 80020de:	e04c      	b.n	800217a <main+0x822>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <main+0x8f0>)
 80020e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <main+0x8f4>)
 80020ec:	f017 fc76 	bl	80199dc <__aeabi_dcmplt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01d      	beq.n	8002132 <main+0x7da>
 80020f6:	4b54      	ldr	r3, [pc, #336]	; (8002248 <main+0x8f0>)
 80020f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f017 fc88 	bl	8019a18 <__aeabi_dcmpgt>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <main+0x7da>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 800210e:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <main+0x8f0>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	4638      	mov	r0, r7
 8002116:	494f      	ldr	r1, [pc, #316]	; (8002254 <main+0x8fc>)
 8002118:	f018 fdce 	bl	801acb8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800211c:	463a      	mov	r2, r7
 800211e:	2300      	movs	r3, #0
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	2301      	movs	r3, #1
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <main+0x900>)
 8002128:	21bb      	movs	r1, #187	; 0xbb
 800212a:	201b      	movs	r0, #27
 800212c:	f003 f882 	bl	8005234 <LCD_Font>
 8002130:	e023      	b.n	800217a <main+0x822>
						}
						else if (temperatureLast <= -10) {
 8002132:	4b45      	ldr	r3, [pc, #276]	; (8002248 <main+0x8f0>)
 8002134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b44      	ldr	r3, [pc, #272]	; (8002250 <main+0x8f8>)
 800213e:	f017 fc57 	bl	80199f0 <__aeabi_dcmple>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d018      	beq.n	800217a <main+0x822>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002148:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <main+0x8f0>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f017 fc81 	bl	8019a58 <__aeabi_d2iz>
 8002156:	4603      	mov	r3, r0
 8002158:	b25b      	sxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	463b      	mov	r3, r7
 800215e:	493f      	ldr	r1, [pc, #252]	; (800225c <main+0x904>)
 8002160:	4618      	mov	r0, r3
 8002162:	f018 fda9 	bl	801acb8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002166:	463a      	mov	r2, r7
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2301      	movs	r3, #1
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <main+0x900>)
 8002172:	21bb      	movs	r1, #187	; 0xbb
 8002174:	2001      	movs	r0, #1
 8002176:	f003 f85d 	bl	8005234 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <main+0x8e0>)
 800217c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <main+0x8f4>)
 8002186:	f017 fc3d 	bl	8019a04 <__aeabi_dcmpge>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d116      	bne.n	80021be <main+0x866>
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <main+0x8e0>)
 8002192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f017 fc1d 	bl	80199dc <__aeabi_dcmplt>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01c      	beq.n	80021e2 <main+0x88a>
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <main+0x8e0>)
 80021aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <main+0x8f8>)
 80021b4:	f017 fc30 	bl	8019a18 <__aeabi_dcmpgt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d011      	beq.n	80021e2 <main+0x88a>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <main+0x8e0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	4638      	mov	r0, r7
 80021c6:	4923      	ldr	r1, [pc, #140]	; (8002254 <main+0x8fc>)
 80021c8:	f018 fd76 	bl	801acb8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80021cc:	463a      	mov	r2, r7
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <main+0x908>)
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2301      	movs	r3, #1
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <main+0x900>)
 80021d8:	21bb      	movs	r1, #187	; 0xbb
 80021da:	2001      	movs	r0, #1
 80021dc:	f003 f82a 	bl	8005234 <LCD_Font>
 80021e0:	e064      	b.n	80022ac <main+0x954>
						}
						else if (temperature < 10 && temperature > 0) {
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <main+0x8e0>)
 80021e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <main+0x8f4>)
 80021ee:	f017 fbf5 	bl	80199dc <__aeabi_dcmplt>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d035      	beq.n	8002264 <main+0x90c>
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <main+0x8e0>)
 80021fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	f017 fc07 	bl	8019a18 <__aeabi_dcmpgt>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d029      	beq.n	8002264 <main+0x90c>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <main+0x8e0>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	4638      	mov	r0, r7
 8002218:	490e      	ldr	r1, [pc, #56]	; (8002254 <main+0x8fc>)
 800221a:	f018 fd4d 	bl	801acb8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800221e:	463a      	mov	r2, r7
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <main+0x908>)
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2301      	movs	r3, #1
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <main+0x900>)
 800222a:	21bb      	movs	r1, #187	; 0xbb
 800222c:	201b      	movs	r0, #27
 800222e:	f003 f801 	bl	8005234 <LCD_Font>
 8002232:	e03b      	b.n	80022ac <main+0x954>
 8002234:	40554000 	.word	0x40554000
 8002238:	20000578 	.word	0x20000578
 800223c:	c0440000 	.word	0xc0440000
 8002240:	20000588 	.word	0x20000588
 8002244:	40590000 	.word	0x40590000
 8002248:	20000580 	.word	0x20000580
 800224c:	40240000 	.word	0x40240000
 8002250:	c0240000 	.word	0xc0240000
 8002254:	08052664 	.word	0x08052664
 8002258:	08029f70 	.word	0x08029f70
 800225c:	0805266c 	.word	0x0805266c
 8002260:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 8002264:	4bb5      	ldr	r3, [pc, #724]	; (800253c <main+0xbe4>)
 8002266:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4bb4      	ldr	r3, [pc, #720]	; (8002540 <main+0xbe8>)
 8002270:	f017 fbbe 	bl	80199f0 <__aeabi_dcmple>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d018      	beq.n	80022ac <main+0x954>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 800227a:	4bb0      	ldr	r3, [pc, #704]	; (800253c <main+0xbe4>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f017 fbe8 	bl	8019a58 <__aeabi_d2iz>
 8002288:	4603      	mov	r3, r0
 800228a:	b25b      	sxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	463b      	mov	r3, r7
 8002290:	49ac      	ldr	r1, [pc, #688]	; (8002544 <main+0xbec>)
 8002292:	4618      	mov	r0, r3
 8002294:	f018 fd10 	bl	801acb8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002298:	463a      	mov	r2, r7
 800229a:	4bab      	ldr	r3, [pc, #684]	; (8002548 <main+0xbf0>)
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2301      	movs	r3, #1
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4baa      	ldr	r3, [pc, #680]	; (800254c <main+0xbf4>)
 80022a4:	21bb      	movs	r1, #187	; 0xbb
 80022a6:	2001      	movs	r0, #1
 80022a8:	f002 ffc4 	bl	8005234 <LCD_Font>
						}

						temperatureLast = temperature;
 80022ac:	4ba3      	ldr	r3, [pc, #652]	; (800253c <main+0xbe4>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	49a7      	ldr	r1, [pc, #668]	; (8002550 <main+0xbf8>)
 80022b4:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80022b8:	4ba6      	ldr	r3, [pc, #664]	; (8002554 <main+0xbfc>)
 80022ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022be:	4ba6      	ldr	r3, [pc, #664]	; (8002558 <main+0xc00>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f017 fb80 	bl	80199c8 <__aeabi_dcmpeq>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d15b      	bne.n	8002386 <main+0xa2e>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80022ce:	4ba2      	ldr	r3, [pc, #648]	; (8002558 <main+0xc00>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f107 0008 	add.w	r0, r7, #8
 80022d8:	49a0      	ldr	r1, [pc, #640]	; (800255c <main+0xc04>)
 80022da:	f018 fced 	bl	801acb8 <siprintf>
						if (humidityLast >= 10)
 80022de:	4b9e      	ldr	r3, [pc, #632]	; (8002558 <main+0xc00>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4b9d      	ldr	r3, [pc, #628]	; (8002560 <main+0xc08>)
 80022ea:	f017 fb8b 	bl	8019a04 <__aeabi_dcmpge>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <main+0x9b4>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80022f4:	f107 0208 	add.w	r2, r7, #8
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2301      	movs	r3, #1
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4b92      	ldr	r3, [pc, #584]	; (800254c <main+0xbf4>)
 8002302:	21bb      	movs	r1, #187	; 0xbb
 8002304:	20a0      	movs	r0, #160	; 0xa0
 8002306:	f002 ff95 	bl	8005234 <LCD_Font>
 800230a:	e00a      	b.n	8002322 <main+0x9ca>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800230c:	f107 0208 	add.w	r2, r7, #8
 8002310:	2300      	movs	r3, #0
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2301      	movs	r3, #1
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4b8c      	ldr	r3, [pc, #560]	; (800254c <main+0xbf4>)
 800231a:	21bb      	movs	r1, #187	; 0xbb
 800231c:	20ba      	movs	r0, #186	; 0xba
 800231e:	f002 ff89 	bl	8005234 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 8002322:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <main+0xbfc>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f107 0008 	add.w	r0, r7, #8
 800232c:	498b      	ldr	r1, [pc, #556]	; (800255c <main+0xc04>)
 800232e:	f018 fcc3 	bl	801acb8 <siprintf>
						if (humidity >= 10)
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <main+0xbfc>)
 8002334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	4b88      	ldr	r3, [pc, #544]	; (8002560 <main+0xc08>)
 800233e:	f017 fb61 	bl	8019a04 <__aeabi_dcmpge>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <main+0xa0a>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002348:	f107 0208 	add.w	r2, r7, #8
 800234c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2301      	movs	r3, #1
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4b7d      	ldr	r3, [pc, #500]	; (800254c <main+0xbf4>)
 8002358:	21bb      	movs	r1, #187	; 0xbb
 800235a:	20a0      	movs	r0, #160	; 0xa0
 800235c:	f002 ff6a 	bl	8005234 <LCD_Font>
 8002360:	e00b      	b.n	800237a <main+0xa22>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002362:	f107 0208 	add.w	r2, r7, #8
 8002366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2301      	movs	r3, #1
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <main+0xbf4>)
 8002372:	21bb      	movs	r1, #187	; 0xbb
 8002374:	20ba      	movs	r0, #186	; 0xba
 8002376:	f002 ff5d 	bl	8005234 <LCD_Font>

						humidityLast = humidity;
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <main+0xbfc>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	4975      	ldr	r1, [pc, #468]	; (8002558 <main+0xc00>)
 8002382:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 8002386:	4b77      	ldr	r3, [pc, #476]	; (8002564 <main+0xc0c>)
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	4b77      	ldr	r3, [pc, #476]	; (8002568 <main+0xc10>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d065      	beq.n	800245e <main+0xb06>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 8002392:	4b74      	ldr	r3, [pc, #464]	; (8002564 <main+0xc0c>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239a:	d315      	bcc.n	80023c8 <main+0xa70>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 800239c:	4b71      	ldr	r3, [pc, #452]	; (8002564 <main+0xc0c>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4971      	ldr	r1, [pc, #452]	; (800256c <main+0xc14>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f018 fc85 	bl	801acb8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023ae:	f107 0210 	add.w	r2, r7, #16
 80023b2:	2300      	movs	r3, #0
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <main+0xbf4>)
 80023bc:	21bb      	movs	r1, #187	; 0xbb
 80023be:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023c2:	f002 ff37 	bl	8005234 <LCD_Font>
 80023c6:	e014      	b.n	80023f2 <main+0xa9a>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 80023c8:	4b66      	ldr	r3, [pc, #408]	; (8002564 <main+0xc0c>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4967      	ldr	r1, [pc, #412]	; (8002570 <main+0xc18>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f018 fc6f 	bl	801acb8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023da:	f107 0210 	add.w	r2, r7, #16
 80023de:	2300      	movs	r3, #0
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2301      	movs	r3, #1
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4b59      	ldr	r3, [pc, #356]	; (800254c <main+0xbf4>)
 80023e8:	21bb      	movs	r1, #187	; 0xbb
 80023ea:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023ee:	f002 ff21 	bl	8005234 <LCD_Font>
						}

						pressureLast = pressure;
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <main+0xc10>)
 80023f4:	881a      	ldrh	r2, [r3, #0]
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <main+0xc0c>)
 80023f8:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 80023fa:	4b5a      	ldr	r3, [pc, #360]	; (8002564 <main+0xc0c>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002402:	d316      	bcc.n	8002432 <main+0xada>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <main+0xc0c>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	4957      	ldr	r1, [pc, #348]	; (800256c <main+0xc14>)
 8002410:	4618      	mov	r0, r3
 8002412:	f018 fc51 	bl	801acb8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002416:	f107 0210 	add.w	r2, r7, #16
 800241a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2301      	movs	r3, #1
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4b49      	ldr	r3, [pc, #292]	; (800254c <main+0xbf4>)
 8002426:	21bb      	movs	r1, #187	; 0xbb
 8002428:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800242c:	f002 ff02 	bl	8005234 <LCD_Font>
 8002430:	e015      	b.n	800245e <main+0xb06>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 8002432:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <main+0xc0c>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	494c      	ldr	r1, [pc, #304]	; (8002570 <main+0xc18>)
 800243e:	4618      	mov	r0, r3
 8002440:	f018 fc3a 	bl	801acb8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002444:	f107 0210 	add.w	r2, r7, #16
 8002448:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2301      	movs	r3, #1
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <main+0xbf4>)
 8002454:	21bb      	movs	r1, #187	; 0xbb
 8002456:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800245a:	f002 feeb 	bl	8005234 <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 800245e:	2000      	movs	r0, #0
 8002460:	f7fd ff16 	bl	8000290 <AT24XX_Read>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b42      	ldr	r3, [pc, #264]	; (8002574 <main+0xc1c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	f000 81dd 	beq.w	800282c <main+0xed4>

						AT24XX_Update(0, rtcHrs);
 8002472:	4b40      	ldr	r3, [pc, #256]	; (8002574 <main+0xc1c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	2000      	movs	r0, #0
 800247a:	f7fd ff33 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800247e:	2300      	movs	r3, #0
 8002480:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8002484:	e027      	b.n	80024d6 <main+0xb7e>
 8002486:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800248a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800248e:	b29b      	uxth	r3, r3
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd fefb 	bl	8000290 <AT24XX_Read>
 800249a:	4603      	mov	r3, r0
 800249c:	461c      	mov	r4, r3
 800249e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd feef 	bl	8000290 <AT24XX_Read>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4619      	mov	r1, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff fa10 	bl	80018dc <byteS>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024c4:	b211      	sxth	r1, r2
 80024c6:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <main+0xc20>)
 80024c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024cc:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024d0:	3301      	adds	r3, #1
 80024d2:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80024d6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024da:	2b9a      	cmp	r3, #154	; 0x9a
 80024dc:	d9d3      	bls.n	8002486 <main+0xb2e>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 80024de:	239a      	movs	r3, #154	; 0x9a
 80024e0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80024e4:	e00f      	b.n	8002506 <main+0xbae>
 80024e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80024f0:	4921      	ldr	r1, [pc, #132]	; (8002578 <main+0xc20>)
 80024f2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80024f6:	4a20      	ldr	r2, [pc, #128]	; (8002578 <main+0xc20>)
 80024f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002500:	3b01      	subs	r3, #1
 8002502:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8002506:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1eb      	bne.n	80024e6 <main+0xb8e>
						hT[0] = (uint16_t) (temperature * 10);
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <main+0xbe4>)
 8002510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <main+0xc08>)
 800251a:	f016 ffed 	bl	80194f8 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f017 fabf 	bl	8019aa8 <__aeabi_d2uiz>
 800252a:	4603      	mov	r3, r0
 800252c:	b29b      	uxth	r3, r3
 800252e:	b21a      	sxth	r2, r3
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <main+0xc20>)
 8002532:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002534:	2300      	movs	r3, #0
 8002536:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800253a:	e04e      	b.n	80025da <main+0xc82>
 800253c:	20000578 	.word	0x20000578
 8002540:	c0240000 	.word	0xc0240000
 8002544:	0805266c 	.word	0x0805266c
 8002548:	00ffa500 	.word	0x00ffa500
 800254c:	08029f70 	.word	0x08029f70
 8002550:	20000580 	.word	0x20000580
 8002554:	20000588 	.word	0x20000588
 8002558:	20000590 	.word	0x20000590
 800255c:	08052674 	.word	0x08052674
 8002560:	40240000 	.word	0x40240000
 8002564:	200005ba 	.word	0x200005ba
 8002568:	200005b8 	.word	0x200005b8
 800256c:	0805267c 	.word	0x0805267c
 8002570:	08052684 	.word	0x08052684
 8002574:	2000056f 	.word	0x2000056f
 8002578:	200005bc 	.word	0x200005bc
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 800257c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002580:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002584:	b29b      	uxth	r3, r3
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	b29c      	uxth	r4, r3
 800258a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800258e:	4a86      	ldr	r2, [pc, #536]	; (80027a8 <main+0xe50>)
 8002590:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f984 	bl	80018a4 <byteL>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	4620      	mov	r0, r4
 80025a2:	f7fd fe9f 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80025a6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80025b2:	b29c      	uxth	r4, r3
 80025b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025b8:	4a7b      	ldr	r2, [pc, #492]	; (80027a8 <main+0xe50>)
 80025ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f97c 	bl	80018be <byteH>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	4620      	mov	r0, r4
 80025cc:	f7fd fe8a 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80025d0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80025da:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025de:	2b9a      	cmp	r3, #154	; 0x9a
 80025e0:	d9cc      	bls.n	800257c <main+0xc24>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80025e8:	e027      	b.n	800263a <main+0xce2>
 80025ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80025ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fe49 	bl	8000290 <AT24XX_Read>
 80025fe:	4603      	mov	r3, r0
 8002600:	461c      	mov	r4, r3
 8002602:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd fe3d 	bl	8000290 <AT24XX_Read>
 8002616:	4603      	mov	r3, r0
 8002618:	4619      	mov	r1, r3
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff f95e 	bl	80018dc <byteS>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002628:	b211      	sxth	r1, r2
 800262a:	4a60      	ldr	r2, [pc, #384]	; (80027ac <main+0xe54>)
 800262c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002630:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002634:	3301      	adds	r3, #1
 8002636:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800263a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800263e:	2b9a      	cmp	r3, #154	; 0x9a
 8002640:	d9d3      	bls.n	80025ea <main+0xc92>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8002642:	239a      	movs	r3, #154	; 0x9a
 8002644:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8002648:	e00f      	b.n	800266a <main+0xd12>
 800264a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002654:	4955      	ldr	r1, [pc, #340]	; (80027ac <main+0xe54>)
 8002656:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800265a:	4a54      	ldr	r2, [pc, #336]	; (80027ac <main+0xe54>)
 800265c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002660:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002664:	3b01      	subs	r3, #1
 8002666:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800266a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1eb      	bne.n	800264a <main+0xcf2>
						hH[0] = (uint16_t) (humidity * 10);
 8002672:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <main+0xe58>)
 8002674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <main+0xe5c>)
 800267e:	f016 ff3b 	bl	80194f8 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f017 fa0d 	bl	8019aa8 <__aeabi_d2uiz>
 800268e:	4603      	mov	r3, r0
 8002690:	b29b      	uxth	r3, r3
 8002692:	b21a      	sxth	r2, r3
 8002694:	4b45      	ldr	r3, [pc, #276]	; (80027ac <main+0xe54>)
 8002696:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002698:	2300      	movs	r3, #0
 800269a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800269e:	e02e      	b.n	80026fe <main+0xda6>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80026a0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026a4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b29c      	uxth	r4, r3
 80026ae:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026b2:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <main+0xe54>)
 80026b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f8f2 	bl	80018a4 <byteL>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7fd fe0d 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80026ca:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 80026d6:	b29c      	uxth	r4, r3
 80026d8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026dc:	4a33      	ldr	r2, [pc, #204]	; (80027ac <main+0xe54>)
 80026de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f8ea 	bl	80018be <byteH>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7fd fdf8 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80026f4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026f8:	3301      	adds	r3, #1
 80026fa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80026fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002702:	2b9a      	cmp	r3, #154	; 0x9a
 8002704:	d9cc      	bls.n	80026a0 <main+0xd48>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002706:	2300      	movs	r3, #0
 8002708:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800270c:	e027      	b.n	800275e <main+0xe06>
 800270e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002712:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002716:	b29b      	uxth	r3, r3
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fdb7 	bl	8000290 <AT24XX_Read>
 8002722:	4603      	mov	r3, r0
 8002724:	461c      	mov	r4, r3
 8002726:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	b29b      	uxth	r3, r3
 800272e:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fdab 	bl	8000290 <AT24XX_Read>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff f8cc 	bl	80018dc <byteS>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800274c:	b211      	sxth	r1, r2
 800274e:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <main+0xe60>)
 8002750:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002754:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002758:	3301      	adds	r3, #1
 800275a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800275e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002762:	2b9a      	cmp	r3, #154	; 0x9a
 8002764:	d9d3      	bls.n	800270e <main+0xdb6>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002766:	239a      	movs	r3, #154	; 0x9a
 8002768:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800276c:	e00f      	b.n	800278e <main+0xe36>
 800276e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002778:	490f      	ldr	r1, [pc, #60]	; (80027b8 <main+0xe60>)
 800277a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <main+0xe60>)
 8002780:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002784:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002788:	3b01      	subs	r3, #1
 800278a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800278e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1eb      	bne.n	800276e <main+0xe16>
						hP[0] = (uint16_t)pressure;
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <main+0xe64>)
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <main+0xe60>)
 800279e:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80027a6:	e03a      	b.n	800281e <main+0xec6>
 80027a8:	200005bc 	.word	0x200005bc
 80027ac:	200006f4 	.word	0x200006f4
 80027b0:	20000588 	.word	0x20000588
 80027b4:	40240000 	.word	0x40240000
 80027b8:	2000082c 	.word	0x2000082c
 80027bc:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80027c0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027c4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	b29c      	uxth	r4, r3
 80027ce:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027d2:	4abc      	ldr	r2, [pc, #752]	; (8002ac4 <main+0x116c>)
 80027d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f862 	bl	80018a4 <byteL>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4619      	mov	r1, r3
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7fd fd7d 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80027ea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 80027f6:	b29c      	uxth	r4, r3
 80027f8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027fc:	4ab1      	ldr	r2, [pc, #708]	; (8002ac4 <main+0x116c>)
 80027fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f85a 	bl	80018be <byteH>
 800280a:	4603      	mov	r3, r0
 800280c:	4619      	mov	r1, r3
 800280e:	4620      	mov	r0, r4
 8002810:	f7fd fd68 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002814:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002818:	3301      	adds	r3, #1
 800281a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800281e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002822:	2b9a      	cmp	r3, #154	; 0x9a
 8002824:	d9cc      	bls.n	80027c0 <main+0xe68>
						}

						viewGraphs = 0;
 8002826:	4ba8      	ldr	r3, [pc, #672]	; (8002ac8 <main+0x1170>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 800282c:	23ff      	movs	r3, #255	; 0xff
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2301      	movs	r3, #1
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2381      	movs	r3, #129	; 0x81
 8002836:	229d      	movs	r2, #157	; 0x9d
 8002838:	21bd      	movs	r1, #189	; 0xbd
 800283a:	2002      	movs	r0, #2
 800283c:	f001 fd46 	bl	80042cc <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002840:	4ba2      	ldr	r3, [pc, #648]	; (8002acc <main+0x1174>)
 8002842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4ba1      	ldr	r3, [pc, #644]	; (8002ad0 <main+0x1178>)
 800284c:	f016 fe54 	bl	80194f8 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f017 f8fe 	bl	8019a58 <__aeabi_d2iz>
 800285c:	4603      	mov	r3, r0
 800285e:	b21b      	sxth	r3, r3
 8002860:	b298      	uxth	r0, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	f44f 7291 	mov.w	r2, #290	; 0x122
 800286c:	21e2      	movs	r1, #226	; 0xe2
 800286e:	f7fe ffed 	bl	800184c <map>
 8002872:	ec53 2b10 	vmov	r2, r3, d0
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f017 f8ed 	bl	8019a58 <__aeabi_d2iz>
 800287e:	4603      	mov	r3, r0
 8002880:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap < 0) valMap = 0;
 8002884:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002888:	2b00      	cmp	r3, #0
 800288a:	da02      	bge.n	8002892 <main+0xf3a>
 800288c:	2300      	movs	r3, #0
 800288e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap > 127) valMap = 127;
 8002892:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002896:	2b7f      	cmp	r3, #127	; 0x7f
 8002898:	dd02      	ble.n	80028a0 <main+0xf48>
 800289a:	237f      	movs	r3, #127	; 0x7f
 800289c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80028a0:	2300      	movs	r3, #0
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	2301      	movs	r3, #1
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f240 133d 	movw	r3, #317	; 0x13d
 80028ac:	229e      	movs	r2, #158	; 0x9e
 80028ae:	21bf      	movs	r1, #191	; 0xbf
 80028b0:	209e      	movs	r0, #158	; 0x9e
 80028b2:	f001 fba3 	bl	8003ffc <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028b6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <main+0xfae>
 80028be:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80028c2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028c6:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028c8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80028cc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028da:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80028de:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	2100      	movs	r1, #0
 80028ec:	f001 fa65 	bl	8003dba <RGB>
 80028f0:	4603      	mov	r3, r0
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2301      	movs	r3, #1
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f240 133d 	movw	r3, #317	; 0x13d
 80028fc:	229e      	movs	r2, #158	; 0x9e
 80028fe:	4621      	mov	r1, r4
 8002900:	209e      	movs	r0, #158	; 0x9e
 8002902:	f001 fb7b 	bl	8003ffc <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002906:	23ff      	movs	r3, #255	; 0xff
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2301      	movs	r3, #1
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2381      	movs	r3, #129	; 0x81
 8002910:	229d      	movs	r2, #157	; 0x9d
 8002912:	21bd      	movs	r1, #189	; 0xbd
 8002914:	20a1      	movs	r0, #161	; 0xa1
 8002916:	f001 fcd9 	bl	80042cc <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 800291a:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <main+0x117c>)
 800291c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <main+0x1178>)
 8002926:	f016 fde7 	bl	80194f8 <__aeabi_dmul>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f017 f891 	bl	8019a58 <__aeabi_d2iz>
 8002936:	4603      	mov	r3, r0
 8002938:	b21b      	sxth	r3, r3
 800293a:	b298      	uxth	r0, r3
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002946:	2150      	movs	r1, #80	; 0x50
 8002948:	f7fe ff80 	bl	800184c <map>
 800294c:	ec53 2b10 	vmov	r2, r3, d0
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f017 f880 	bl	8019a58 <__aeabi_d2iz>
 8002958:	4603      	mov	r3, r0
 800295a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap < 0) valMap = 0;
 800295e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002962:	2b00      	cmp	r3, #0
 8002964:	da02      	bge.n	800296c <main+0x1014>
 8002966:	2300      	movs	r3, #0
 8002968:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap > 127) valMap = 127;
 800296c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002970:	2b7f      	cmp	r3, #127	; 0x7f
 8002972:	dd02      	ble.n	800297a <main+0x1022>
 8002974:	237f      	movs	r3, #127	; 0x7f
 8002976:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800297a:	2300      	movs	r3, #0
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2301      	movs	r3, #1
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	f240 133d 	movw	r3, #317	; 0x13d
 8002986:	f240 123d 	movw	r2, #317	; 0x13d
 800298a:	21bf      	movs	r1, #191	; 0xbf
 800298c:	f240 103d 	movw	r0, #317	; 0x13d
 8002990:	f001 fb34 	bl	8003ffc <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002994:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002998:	2b00      	cmp	r3, #0
 800299a:	d025      	beq.n	80029e8 <main+0x1090>
 800299c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80029a0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80029a4:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029a6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80029aa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029b8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80029bc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	2100      	movs	r1, #0
 80029ca:	f001 f9f6 	bl	8003dba <RGB>
 80029ce:	4603      	mov	r3, r0
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	2301      	movs	r3, #1
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f240 133d 	movw	r3, #317	; 0x13d
 80029da:	f240 123d 	movw	r2, #317	; 0x13d
 80029de:	4621      	mov	r1, r4
 80029e0:	f240 103d 	movw	r0, #317	; 0x13d
 80029e4:	f001 fb0a 	bl	8003ffc <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80029e8:	23ff      	movs	r3, #255	; 0xff
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2381      	movs	r3, #129	; 0x81
 80029f2:	229d      	movs	r2, #157	; 0x9d
 80029f4:	21bd      	movs	r1, #189	; 0xbd
 80029f6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80029fa:	f001 fc67 	bl	80042cc <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 80029fe:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <main+0x1180>)
 8002a00:	8818      	ldrh	r0, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	f240 4229 	movw	r2, #1065	; 0x429
 8002a0c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002a10:	f7fe ff1c 	bl	800184c <map>
 8002a14:	ec53 2b10 	vmov	r2, r3, d0
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f017 f81c 	bl	8019a58 <__aeabi_d2iz>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap < 0) valMap = 0;
 8002a26:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da02      	bge.n	8002a34 <main+0x10dc>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap > 127) valMap = 127;
 8002a34:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a38:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3a:	dd02      	ble.n	8002a42 <main+0x10ea>
 8002a3c:	237f      	movs	r3, #127	; 0x7f
 8002a3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002a42:	2300      	movs	r3, #0
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	2301      	movs	r3, #1
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	f240 133d 	movw	r3, #317	; 0x13d
 8002a4e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002a52:	21bf      	movs	r1, #191	; 0xbf
 8002a54:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002a58:	f001 fad0 	bl	8003ffc <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a5c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d025      	beq.n	8002ab0 <main+0x1158>
 8002a64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002a68:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002a6c:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a6e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a72:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a80:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a84:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2100      	movs	r1, #0
 8002a92:	f001 f992 	bl	8003dba <RGB>
 8002a96:	4603      	mov	r3, r0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f240 133d 	movw	r3, #317	; 0x13d
 8002aa2:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002aac:	f001 faa6 	bl	8003ffc <LCD_Line>

					if (!viewGraphs) {
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <main+0x1170>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8192 	bne.w	8002dde <main+0x1486>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002ac0:	e07b      	b.n	8002bba <main+0x1262>
 8002ac2:	bf00      	nop
 8002ac4:	2000082c 	.word	0x2000082c
 8002ac8:	2000056c 	.word	0x2000056c
 8002acc:	20000578 	.word	0x20000578
 8002ad0:	40240000 	.word	0x40240000
 8002ad4:	20000588 	.word	0x20000588
 8002ad8:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002adc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002ae0:	4ab3      	ldr	r2, [pc, #716]	; (8002db0 <main+0x1458>)
 8002ae2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ae6:	b298      	uxth	r0, r3
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002af2:	21e2      	movs	r1, #226	; 0xe2
 8002af4:	f7fe feaa 	bl	800184c <map>
 8002af8:	ec53 2b10 	vmov	r2, r3, d0
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f016 ffaa 	bl	8019a58 <__aeabi_d2iz>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap < 0) valMap = 0;
 8002b0a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da02      	bge.n	8002b18 <main+0x11c0>
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap > 127) valMap = 127;
 8002b18:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b1e:	dd02      	ble.n	8002b26 <main+0x11ce>
 8002b20:	237f      	movs	r3, #127	; 0x7f
 8002b22:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002b26:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b2a:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b2e:	b298      	uxth	r0, r3
 8002b30:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b34:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f240 133d 	movw	r3, #317	; 0x13d
 8002b46:	21bf      	movs	r1, #191	; 0xbf
 8002b48:	f001 fa58 	bl	8003ffc <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b4c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02d      	beq.n	8002bb0 <main+0x1258>
 8002b54:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b58:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b5c:	b29c      	uxth	r4, r3
 8002b5e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002b62:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b66:	b29d      	uxth	r5, r3
 8002b68:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b6c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b70:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b72:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b76:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b84:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b88:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	2100      	movs	r1, #0
 8002b96:	f001 f910 	bl	8003dba <RGB>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	f240 133d 	movw	r3, #317	; 0x13d
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	4629      	mov	r1, r5
 8002baa:	4620      	mov	r0, r4
 8002bac:	f001 fa26 	bl	8003ffc <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002bb0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002bba:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bbe:	2b9a      	cmp	r3, #154	; 0x9a
 8002bc0:	d98c      	bls.n	8002adc <main+0x1184>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002bc8:	e06e      	b.n	8002ca8 <main+0x1350>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002bca:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002bce:	4a79      	ldr	r2, [pc, #484]	; (8002db4 <main+0x145c>)
 8002bd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002be0:	2150      	movs	r1, #80	; 0x50
 8002be2:	f7fe fe33 	bl	800184c <map>
 8002be6:	ec53 2b10 	vmov	r2, r3, d0
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f016 ff33 	bl	8019a58 <__aeabi_d2iz>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap < 0) valMap = 0;
 8002bf8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	da02      	bge.n	8002c06 <main+0x12ae>
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap > 127) valMap = 127;
 8002c06:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c0c:	dd02      	ble.n	8002c14 <main+0x12bc>
 8002c0e:	237f      	movs	r3, #127	; 0x7f
 8002c10:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002c14:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c18:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c1c:	b298      	uxth	r0, r3
 8002c1e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c22:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f240 133d 	movw	r3, #317	; 0x13d
 8002c34:	21bf      	movs	r1, #191	; 0xbf
 8002c36:	f001 f9e1 	bl	8003ffc <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c3a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02d      	beq.n	8002c9e <main+0x1346>
 8002c42:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c46:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c4a:	b29c      	uxth	r4, r3
 8002c4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002c50:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c54:	b29d      	uxth	r5, r3
 8002c56:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c5a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c5e:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c60:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c64:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c72:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c76:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	2100      	movs	r1, #0
 8002c84:	f001 f899 	bl	8003dba <RGB>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f240 133d 	movw	r3, #317	; 0x13d
 8002c94:	4632      	mov	r2, r6
 8002c96:	4629      	mov	r1, r5
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f001 f9af 	bl	8003ffc <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002c9e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002ca8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002cac:	2b9a      	cmp	r3, #154	; 0x9a
 8002cae:	d98c      	bls.n	8002bca <main+0x1272>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002cb6:	e073      	b.n	8002da0 <main+0x1448>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002cb8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002cbc:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <main+0x1460>)
 8002cbe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f240 4229 	movw	r2, #1065	; 0x429
 8002cce:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002cd2:	f7fe fdbb 	bl	800184c <map>
 8002cd6:	ec53 2b10 	vmov	r2, r3, d0
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f016 febb 	bl	8019a58 <__aeabi_d2iz>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap < 0) valMap = 0;
 8002ce8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da02      	bge.n	8002cf6 <main+0x139e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap > 127) valMap = 127;
 8002cf6:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8002cfc:	dd02      	ble.n	8002d04 <main+0x13ac>
 8002cfe:	237f      	movs	r3, #127	; 0x7f
 8002d00:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8002d04:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d08:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b298      	uxth	r0, r3
 8002d10:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d14:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	2301      	movs	r3, #1
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	f240 133d 	movw	r3, #317	; 0x13d
 8002d28:	21bf      	movs	r1, #191	; 0xbf
 8002d2a:	f001 f967 	bl	8003ffc <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d2e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02f      	beq.n	8002d96 <main+0x143e>
 8002d36:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d3a:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b29c      	uxth	r4, r3
 8002d42:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002d46:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d4a:	b29d      	uxth	r5, r3
 8002d4c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d50:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d54:	3301      	adds	r3, #1
 8002d56:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d58:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002d5c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d6a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002d6e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f001 f81d 	bl	8003dba <RGB>
 8002d80:	4603      	mov	r3, r0
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	2301      	movs	r3, #1
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	f240 133d 	movw	r3, #317	; 0x13d
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4620      	mov	r0, r4
 8002d92:	f001 f933 	bl	8003ffc <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002d96:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002da0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002da4:	2b9a      	cmp	r3, #154	; 0x9a
 8002da6:	d987      	bls.n	8002cb8 <main+0x1360>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dae:	e00e      	b.n	8002dce <main+0x1476>
 8002db0:	200005bc 	.word	0x200005bc
 8002db4:	200006f4 	.word	0x200006f4
 8002db8:	2000082c 	.word	0x2000082c
 8002dbc:	4a87      	ldr	r2, [pc, #540]	; (8002fdc <main+0x1684>)
 8002dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc2:	6353      	str	r3, [r2, #52]	; 0x34
 8002dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d9f1      	bls.n	8002dbc <main+0x1464>
						viewGraphs = 1;
 8002dd8:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <main+0x1688>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8002dde:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <main+0x168c>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8385 	beq.w	80034f2 <main+0x1b9a>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8002de8:	2202      	movs	r2, #2
 8002dea:	497f      	ldr	r1, [pc, #508]	; (8002fe8 <main+0x1690>)
 8002dec:	487f      	ldr	r0, [pc, #508]	; (8002fec <main+0x1694>)
 8002dee:	f01b fd5f 	bl	801e8b0 <memcmp>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d17c      	bne.n	8002ef2 <main+0x159a>

					char val[2];

					val[0] = rx_buffer[2];
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <main+0x1694>)
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[3];
 8002dfe:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <main+0x1694>)
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	777b      	strb	r3, [r7, #29]
					DS3231_setHrs(atoi(val));
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f017 f89e 	bl	8019f4a <atoi>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f938 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8002e18:	4b74      	ldr	r3, [pc, #464]	; (8002fec <main+0x1694>)
 8002e1a:	791b      	ldrb	r3, [r3, #4]
 8002e1c:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[5];
 8002e1e:	4b73      	ldr	r3, [pc, #460]	; (8002fec <main+0x1694>)
 8002e20:	795b      	ldrb	r3, [r3, #5]
 8002e22:	777b      	strb	r3, [r7, #29]
					DS3231_setMin(atoi(val));
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f017 f88e 	bl	8019f4a <atoi>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f908 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	773b      	strb	r3, [r7, #28]
					val[1] = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	777b      	strb	r3, [r7, #29]
					DS3231_setSec(atoi(val));
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4618      	mov	r0, r3
 8002e46:	f017 f880 	bl	8019f4a <atoi>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f8da 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 8002e54:	4b65      	ldr	r3, [pc, #404]	; (8002fec <main+0x1694>)
 8002e56:	799b      	ldrb	r3, [r3, #6]
 8002e58:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[7];
 8002e5a:	4b64      	ldr	r3, [pc, #400]	; (8002fec <main+0x1694>)
 8002e5c:	79db      	ldrb	r3, [r3, #7]
 8002e5e:	777b      	strb	r3, [r7, #29]
					DS3231_setDate(atoi(val));
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	4618      	mov	r0, r3
 8002e66:	f017 f870 	bl	8019f4a <atoi>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f94a 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8002e74:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <main+0x1694>)
 8002e76:	7a1b      	ldrb	r3, [r3, #8]
 8002e78:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[9];
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <main+0x1694>)
 8002e7c:	7a5b      	ldrb	r3, [r3, #9]
 8002e7e:	777b      	strb	r3, [r7, #29]
					DS3231_setMonth(atoi(val));
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4618      	mov	r0, r3
 8002e86:	f017 f860 	bl	8019f4a <atoi>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe f95a 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <main+0x1694>)
 8002e96:	7a9b      	ldrb	r3, [r3, #10]
 8002e98:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[11];
 8002e9a:	4b54      	ldr	r3, [pc, #336]	; (8002fec <main+0x1694>)
 8002e9c:	7adb      	ldrb	r3, [r3, #11]
 8002e9e:	777b      	strb	r3, [r7, #29]
					DS3231_setYear(atoi(val));
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f017 f850 	bl	8019f4a <atoi>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f96a 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <main+0x1694>)
 8002eb6:	7b1b      	ldrb	r3, [r3, #12]
 8002eb8:	777b      	strb	r3, [r7, #29]
					DS3231_setDay(atoi(val));
 8002eba:	f107 031c 	add.w	r3, r7, #28
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f017 f843 	bl	8019f4a <atoi>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe f8fd 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed4:	e008      	b.n	8002ee8 <main+0x1590>
 8002ed6:	4a41      	ldr	r2, [pc, #260]	; (8002fdc <main+0x1684>)
 8002ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002edc:	6353      	str	r3, [r2, #52]	; 0x34
 8002ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d9f1      	bls.n	8002ed6 <main+0x157e>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	493e      	ldr	r1, [pc, #248]	; (8002ff0 <main+0x1698>)
 8002ef6:	483d      	ldr	r0, [pc, #244]	; (8002fec <main+0x1694>)
 8002ef8:	f01b fcda 	bl	801e8b0 <memcmp>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d122      	bne.n	8002f48 <main+0x15f0>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002f08:	e00a      	b.n	8002f20 <main+0x15c8>
 8002f0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd f9e7 	bl	80002e4 <AT24XX_Update>
 8002f16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002f20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d3ef      	bcc.n	8002f0a <main+0x15b2>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002f2a:	4b32      	ldr	r3, [pc, #200]	; (8002ff4 <main+0x169c>)
 8002f2c:	f107 0420 	add.w	r4, r7, #32
 8002f30:	461d      	mov	r5, r3
 8002f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002f3a:	f107 0120 	add.w	r1, r7, #32
 8002f3e:	2364      	movs	r3, #100	; 0x64
 8002f40:	2214      	movs	r2, #20
 8002f42:	482d      	ldr	r0, [pc, #180]	; (8002ff8 <main+0x16a0>)
 8002f44:	f012 fff7 	bl	8015f36 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8002f48:	2202      	movs	r2, #2
 8002f4a:	492c      	ldr	r1, [pc, #176]	; (8002ffc <main+0x16a4>)
 8002f4c:	4827      	ldr	r0, [pc, #156]	; (8002fec <main+0x1694>)
 8002f4e:	f01b fcaf 	bl	801e8b0 <memcmp>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 82b7 	bne.w	80034c8 <main+0x1b70>

					char valT[4] = { 0 };
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	647b      	str	r3, [r7, #68]	; 0x44

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002f64:	e00f      	b.n	8002f86 <main+0x162e>
 8002f66:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f6a:	1c9a      	adds	r2, r3, #2
 8002f6c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f70:	491e      	ldr	r1, [pc, #120]	; (8002fec <main+0x1694>)
 8002f72:	5c8a      	ldrb	r2, [r1, r2]
 8002f74:	33c0      	adds	r3, #192	; 0xc0
 8002f76:	443b      	add	r3, r7
 8002f78:	f803 2c7c 	strb.w	r2, [r3, #-124]
 8002f7c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f80:	3301      	adds	r3, #1
 8002f82:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002f86:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d9eb      	bls.n	8002f66 <main+0x160e>

					temperatureRemote = atoi(valT);
 8002f8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f92:	4618      	mov	r0, r3
 8002f94:	f016 ffd9 	bl	8019f4a <atoi>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f016 fa42 	bl	8019424 <__aeabi_i2d>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4916      	ldr	r1, [pc, #88]	; (8003000 <main+0x16a8>)
 8002fa6:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <main+0x16a8>)
 8002fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <main+0x16ac>)
 8002fb6:	f016 fbc9 	bl	801974c <__aeabi_ddiv>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4910      	ldr	r1, [pc, #64]	; (8003000 <main+0x16a8>)
 8002fc0:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <main+0x16b0>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8002fd8:	e028      	b.n	800302c <main+0x16d4>
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	2000056c 	.word	0x2000056c
 8002fe4:	20000974 	.word	0x20000974
 8002fe8:	0805268c 	.word	0x0805268c
 8002fec:	20000964 	.word	0x20000964
 8002ff0:	08052690 	.word	0x08052690
 8002ff4:	080526c8 	.word	0x080526c8
 8002ff8:	200004d8 	.word	0x200004d8
 8002ffc:	08052694 	.word	0x08052694
 8003000:	20000598 	.word	0x20000598
 8003004:	40240000 	.word	0x40240000
 8003008:	08052614 	.word	0x08052614
 800300c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003010:	1d9a      	adds	r2, r3, #6
 8003012:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003016:	499d      	ldr	r1, [pc, #628]	; (800328c <main+0x1934>)
 8003018:	5c8a      	ldrb	r2, [r1, r2]
 800301a:	33c0      	adds	r3, #192	; 0xc0
 800301c:	443b      	add	r3, r7
 800301e:	f803 2c80 	strb.w	r2, [r3, #-128]
 8003022:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003026:	3301      	adds	r3, #1
 8003028:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800302c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003030:	2b02      	cmp	r3, #2
 8003032:	d9eb      	bls.n	800300c <main+0x16b4>

					humidityRemote = atoi(valH);
 8003034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003038:	4618      	mov	r0, r3
 800303a:	f016 ff86 	bl	8019f4a <atoi>
 800303e:	4603      	mov	r3, r0
 8003040:	4618      	mov	r0, r3
 8003042:	f016 f9ef 	bl	8019424 <__aeabi_i2d>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4991      	ldr	r1, [pc, #580]	; (8003290 <main+0x1938>)
 800304c:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 8003050:	4b8f      	ldr	r3, [pc, #572]	; (8003290 <main+0x1938>)
 8003052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	4b8e      	ldr	r3, [pc, #568]	; (8003294 <main+0x193c>)
 800305c:	f016 fb76 	bl	801974c <__aeabi_ddiv>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	498a      	ldr	r1, [pc, #552]	; (8003290 <main+0x1938>)
 8003066:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <main+0x1940>)
 800306c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003070:	4b8a      	ldr	r3, [pc, #552]	; (800329c <main+0x1944>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f016 fca7 	bl	80199c8 <__aeabi_dcmpeq>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d115      	bne.n	80030ac <main+0x1754>
 8003080:	4b85      	ldr	r3, [pc, #532]	; (8003298 <main+0x1940>)
 8003082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <main+0x1948>)
 800308c:	f016 fca6 	bl	80199dc <__aeabi_dcmplt>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <main+0x1754>
 8003096:	4b80      	ldr	r3, [pc, #512]	; (8003298 <main+0x1940>)
 8003098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <main+0x194c>)
 80030a2:	f016 fcb9 	bl	8019a18 <__aeabi_dcmpgt>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d118      	bne.n	80030de <main+0x1786>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030ac:	4b78      	ldr	r3, [pc, #480]	; (8003290 <main+0x1938>)
 80030ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b2:	4b7d      	ldr	r3, [pc, #500]	; (80032a8 <main+0x1950>)
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80030b8:	f016 fc86 	bl	80199c8 <__aeabi_dcmpeq>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 8202 	bne.w	80034c8 <main+0x1b70>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030c4:	4b72      	ldr	r3, [pc, #456]	; (8003290 <main+0x1938>)
 80030c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f016 fca1 	bl	8019a18 <__aeabi_dcmpgt>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 81f5 	beq.w	80034c8 <main+0x1b70>

						remoteSensorLastUpdate = 0;
 80030de:	4b73      	ldr	r3, [pc, #460]	; (80032ac <main+0x1954>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 80030e4:	4b72      	ldr	r3, [pc, #456]	; (80032b0 <main+0x1958>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030ee:	4971      	ldr	r1, [pc, #452]	; (80032b4 <main+0x195c>)
 80030f0:	4618      	mov	r0, r3
 80030f2:	f017 fde1 	bl	801acb8 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80030f6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80030fa:	2300      	movs	r3, #0
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2301      	movs	r3, #1
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <main+0x1960>)
 8003104:	2128      	movs	r1, #40	; 0x28
 8003106:	f240 1077 	movw	r0, #375	; 0x177
 800310a:	f002 f893 	bl	8005234 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <main+0x1944>)
 8003110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <main+0x1964>)
 800311a:	f016 fc69 	bl	80199f0 <__aeabi_dcmple>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d014      	beq.n	800314e <main+0x17f6>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003124:	4b5d      	ldr	r3, [pc, #372]	; (800329c <main+0x1944>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800312e:	4964      	ldr	r1, [pc, #400]	; (80032c0 <main+0x1968>)
 8003130:	f017 fdc2 	bl	801acb8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003134:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003138:	2300      	movs	r3, #0
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	2301      	movs	r3, #1
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <main+0x1960>)
 8003142:	215a      	movs	r1, #90	; 0x5a
 8003144:	f240 1061 	movw	r0, #353	; 0x161
 8003148:	f002 f874 	bl	8005234 <LCD_Font>
 800314c:	e076      	b.n	800323c <main+0x18e4>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800314e:	4b53      	ldr	r3, [pc, #332]	; (800329c <main+0x1944>)
 8003150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	f016 fc3e 	bl	80199dc <__aeabi_dcmplt>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01f      	beq.n	80031a6 <main+0x184e>
 8003166:	4b4d      	ldr	r3, [pc, #308]	; (800329c <main+0x1944>)
 8003168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	4b52      	ldr	r3, [pc, #328]	; (80032bc <main+0x1964>)
 8003172:	f016 fc51 	bl	8019a18 <__aeabi_dcmpgt>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d014      	beq.n	80031a6 <main+0x184e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800317c:	4b47      	ldr	r3, [pc, #284]	; (800329c <main+0x1944>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003186:	494e      	ldr	r1, [pc, #312]	; (80032c0 <main+0x1968>)
 8003188:	f017 fd96 	bl	801acb8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800318c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003190:	2300      	movs	r3, #0
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	2301      	movs	r3, #1
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <main+0x1960>)
 800319a:	215a      	movs	r1, #90	; 0x5a
 800319c:	f240 1081 	movw	r0, #385	; 0x181
 80031a0:	f002 f848 	bl	8005234 <LCD_Font>
 80031a4:	e04a      	b.n	800323c <main+0x18e4>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <main+0x1944>)
 80031a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f016 fc30 	bl	8019a18 <__aeabi_dcmpgt>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01f      	beq.n	80031fe <main+0x18a6>
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <main+0x1944>)
 80031c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <main+0x193c>)
 80031ca:	f016 fc07 	bl	80199dc <__aeabi_dcmplt>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d014      	beq.n	80031fe <main+0x18a6>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <main+0x1944>)
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80031de:	4939      	ldr	r1, [pc, #228]	; (80032c4 <main+0x196c>)
 80031e0:	f017 fd6a 	bl	801acb8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80031e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031e8:	2300      	movs	r3, #0
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	2301      	movs	r3, #1
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <main+0x1960>)
 80031f2:	215a      	movs	r1, #90	; 0x5a
 80031f4:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80031f8:	f002 f81c 	bl	8005234 <LCD_Font>
 80031fc:	e01e      	b.n	800323c <main+0x18e4>
						}
						else if (temperatureRemoteLast >= 10) {
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <main+0x1944>)
 8003200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <main+0x193c>)
 800320a:	f016 fbfb 	bl	8019a04 <__aeabi_dcmpge>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <main+0x18e4>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <main+0x1944>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800321e:	4929      	ldr	r1, [pc, #164]	; (80032c4 <main+0x196c>)
 8003220:	f017 fd4a 	bl	801acb8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003224:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003228:	2300      	movs	r3, #0
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	2301      	movs	r3, #1
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <main+0x1960>)
 8003232:	215a      	movs	r1, #90	; 0x5a
 8003234:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003238:	f001 fffc 	bl	8005234 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <main+0x1940>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	4916      	ldr	r1, [pc, #88]	; (800329c <main+0x1944>)
 8003244:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <main+0x1944>)
 800324a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <main+0x1964>)
 8003254:	f016 fbcc 	bl	80199f0 <__aeabi_dcmple>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d034      	beq.n	80032c8 <main+0x1970>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <main+0x1944>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003268:	4915      	ldr	r1, [pc, #84]	; (80032c0 <main+0x1968>)
 800326a:	f017 fd25 	bl	801acb8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800326e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	2301      	movs	r3, #1
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <main+0x1960>)
 800327e:	215a      	movs	r1, #90	; 0x5a
 8003280:	f240 1061 	movw	r0, #353	; 0x161
 8003284:	f001 ffd6 	bl	8005234 <LCD_Font>
 8003288:	e098      	b.n	80033bc <main+0x1a64>
 800328a:	bf00      	nop
 800328c:	20000964 	.word	0x20000964
 8003290:	200005a8 	.word	0x200005a8
 8003294:	40240000 	.word	0x40240000
 8003298:	20000598 	.word	0x20000598
 800329c:	200005a0 	.word	0x200005a0
 80032a0:	40554000 	.word	0x40554000
 80032a4:	c0440000 	.word	0xc0440000
 80032a8:	200005b0 	.word	0x200005b0
 80032ac:	20000004 	.word	0x20000004
 80032b0:	20000000 	.word	0x20000000
 80032b4:	0805264c 	.word	0x0805264c
 80032b8:	08029f70 	.word	0x08029f70
 80032bc:	c0240000 	.word	0xc0240000
 80032c0:	08052698 	.word	0x08052698
 80032c4:	080526a0 	.word	0x080526a0
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80032c8:	4bac      	ldr	r3, [pc, #688]	; (800357c <main+0x1c24>)
 80032ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f016 fb81 	bl	80199dc <__aeabi_dcmplt>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <main+0x19ca>
 80032e0:	4ba6      	ldr	r3, [pc, #664]	; (800357c <main+0x1c24>)
 80032e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	4ba5      	ldr	r3, [pc, #660]	; (8003580 <main+0x1c28>)
 80032ec:	f016 fb94 	bl	8019a18 <__aeabi_dcmpgt>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d015      	beq.n	8003322 <main+0x19ca>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80032f6:	4ba1      	ldr	r3, [pc, #644]	; (800357c <main+0x1c24>)
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003300:	49a0      	ldr	r1, [pc, #640]	; (8003584 <main+0x1c2c>)
 8003302:	f017 fcd9 	bl	801acb8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003306:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800330a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2301      	movs	r3, #1
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	4b9c      	ldr	r3, [pc, #624]	; (8003588 <main+0x1c30>)
 8003316:	215a      	movs	r1, #90	; 0x5a
 8003318:	f240 1081 	movw	r0, #385	; 0x181
 800331c:	f001 ff8a 	bl	8005234 <LCD_Font>
 8003320:	e04c      	b.n	80033bc <main+0x1a64>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003322:	4b96      	ldr	r3, [pc, #600]	; (800357c <main+0x1c24>)
 8003324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	f016 fb72 	bl	8019a18 <__aeabi_dcmpgt>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <main+0x1a24>
 800333a:	4b90      	ldr	r3, [pc, #576]	; (800357c <main+0x1c24>)
 800333c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b91      	ldr	r3, [pc, #580]	; (800358c <main+0x1c34>)
 8003346:	f016 fb49 	bl	80199dc <__aeabi_dcmplt>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d015      	beq.n	800337c <main+0x1a24>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003350:	4b8a      	ldr	r3, [pc, #552]	; (800357c <main+0x1c24>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800335a:	498d      	ldr	r1, [pc, #564]	; (8003590 <main+0x1c38>)
 800335c:	f017 fcac 	bl	801acb8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003360:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2301      	movs	r3, #1
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4b86      	ldr	r3, [pc, #536]	; (8003588 <main+0x1c30>)
 8003370:	215a      	movs	r1, #90	; 0x5a
 8003372:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003376:	f001 ff5d 	bl	8005234 <LCD_Font>
 800337a:	e01f      	b.n	80033bc <main+0x1a64>
						}
						else if (temperatureRemoteLast >= 10) {
 800337c:	4b7f      	ldr	r3, [pc, #508]	; (800357c <main+0x1c24>)
 800337e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	4b81      	ldr	r3, [pc, #516]	; (800358c <main+0x1c34>)
 8003388:	f016 fb3c 	bl	8019a04 <__aeabi_dcmpge>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d014      	beq.n	80033bc <main+0x1a64>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003392:	4b7a      	ldr	r3, [pc, #488]	; (800357c <main+0x1c24>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800339c:	497c      	ldr	r1, [pc, #496]	; (8003590 <main+0x1c38>)
 800339e:	f017 fc8b 	bl	801acb8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80033a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	2301      	movs	r3, #1
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4b75      	ldr	r3, [pc, #468]	; (8003588 <main+0x1c30>)
 80033b2:	215a      	movs	r1, #90	; 0x5a
 80033b4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80033b8:	f001 ff3c 	bl	8005234 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <main+0x1c3c>)
 80033be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	4b71      	ldr	r3, [pc, #452]	; (800358c <main+0x1c34>)
 80033c8:	f016 fb1c 	bl	8019a04 <__aeabi_dcmpge>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <main+0x1aa4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80033d2:	4b70      	ldr	r3, [pc, #448]	; (8003594 <main+0x1c3c>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80033dc:	4969      	ldr	r1, [pc, #420]	; (8003584 <main+0x1c2c>)
 80033de:	f017 fc6b 	bl	801acb8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80033e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80033e6:	2300      	movs	r3, #0
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2301      	movs	r3, #1
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	4b66      	ldr	r3, [pc, #408]	; (8003588 <main+0x1c30>)
 80033f0:	2128      	movs	r1, #40	; 0x28
 80033f2:	f240 1073 	movw	r0, #371	; 0x173
 80033f6:	f001 ff1d 	bl	8005234 <LCD_Font>
 80033fa:	e01e      	b.n	800343a <main+0x1ae2>
						}
						else if (humidityRemoteLast < 10) {
 80033fc:	4b65      	ldr	r3, [pc, #404]	; (8003594 <main+0x1c3c>)
 80033fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	4b61      	ldr	r3, [pc, #388]	; (800358c <main+0x1c34>)
 8003408:	f016 fae8 	bl	80199dc <__aeabi_dcmplt>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d013      	beq.n	800343a <main+0x1ae2>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003412:	4b60      	ldr	r3, [pc, #384]	; (8003594 <main+0x1c3c>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800341c:	4959      	ldr	r1, [pc, #356]	; (8003584 <main+0x1c2c>)
 800341e:	f017 fc4b 	bl	801acb8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003422:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003426:	2300      	movs	r3, #0
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	2301      	movs	r3, #1
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4b56      	ldr	r3, [pc, #344]	; (8003588 <main+0x1c30>)
 8003430:	2128      	movs	r1, #40	; 0x28
 8003432:	f240 1093 	movw	r0, #403	; 0x193
 8003436:	f001 fefd 	bl	8005234 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <main+0x1c40>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	4954      	ldr	r1, [pc, #336]	; (8003594 <main+0x1c3c>)
 8003442:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <main+0x1c3c>)
 8003448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	4b4e      	ldr	r3, [pc, #312]	; (800358c <main+0x1c34>)
 8003452:	f016 fad7 	bl	8019a04 <__aeabi_dcmpge>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <main+0x1b30>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <main+0x1c3c>)
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003466:	4947      	ldr	r1, [pc, #284]	; (8003584 <main+0x1c2c>)
 8003468:	f017 fc26 	bl	801acb8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800346c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2301      	movs	r3, #1
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <main+0x1c30>)
 800347c:	2128      	movs	r1, #40	; 0x28
 800347e:	f240 1073 	movw	r0, #371	; 0x173
 8003482:	f001 fed7 	bl	8005234 <LCD_Font>
 8003486:	e01f      	b.n	80034c8 <main+0x1b70>
						}
						else if (humidityRemoteLast < 10) {
 8003488:	4b42      	ldr	r3, [pc, #264]	; (8003594 <main+0x1c3c>)
 800348a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	4b3e      	ldr	r3, [pc, #248]	; (800358c <main+0x1c34>)
 8003494:	f016 faa2 	bl	80199dc <__aeabi_dcmplt>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d014      	beq.n	80034c8 <main+0x1b70>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <main+0x1c3c>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80034a8:	4936      	ldr	r1, [pc, #216]	; (8003584 <main+0x1c2c>)
 80034aa:	f017 fc05 	bl	801acb8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80034ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80034b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <main+0x1c30>)
 80034be:	2128      	movs	r1, #40	; 0x28
 80034c0:	f240 1093 	movw	r0, #403	; 0x193
 80034c4:	f001 feb6 	bl	8005234 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <main+0x1c44>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80034d4:	e009      	b.n	80034ea <main+0x1b92>
 80034d6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034da:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <main+0x1c48>)
 80034dc:	2100      	movs	r1, #0
 80034de:	54d1      	strb	r1, [r2, r3]
 80034e0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034e4:	3301      	adds	r3, #1
 80034e6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80034ea:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	d9f1      	bls.n	80034d6 <main+0x1b7e>
			}

			remoteSensorLastUpdate++;
 80034f2:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <main+0x1c4c>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	3301      	adds	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <main+0x1c4c>)
 80034fc:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <main+0x1c4c>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	f240 813e 	bls.w	8003784 <main+0x1e2c>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003508:	4b1c      	ldr	r3, [pc, #112]	; (800357c <main+0x1c24>)
 800350a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f016 fa57 	bl	80199c8 <__aeabi_dcmpeq>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 8107 	bne.w	8003730 <main+0x1dd8>
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <main+0x1c3c>)
 8003524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f016 fa4a 	bl	80199c8 <__aeabi_dcmpeq>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 80fa 	bne.w	8003730 <main+0x1dd8>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <main+0x1c24>)
 800353e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <main+0x1c28>)
 8003548:	f016 fa52 	bl	80199f0 <__aeabi_dcmple>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02a      	beq.n	80035a8 <main+0x1c50>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <main+0x1c24>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800355c:	4909      	ldr	r1, [pc, #36]	; (8003584 <main+0x1c2c>)
 800355e:	f017 fbab 	bl	801acb8 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003562:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003566:	2300      	movs	r3, #0
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	2301      	movs	r3, #1
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <main+0x1c30>)
 8003570:	215a      	movs	r1, #90	; 0x5a
 8003572:	f240 1061 	movw	r0, #353	; 0x161
 8003576:	f001 fe5d 	bl	8005234 <LCD_Font>
 800357a:	e08c      	b.n	8003696 <main+0x1d3e>
 800357c:	200005a0 	.word	0x200005a0
 8003580:	c0240000 	.word	0xc0240000
 8003584:	08052698 	.word	0x08052698
 8003588:	08029f70 	.word	0x08029f70
 800358c:	40240000 	.word	0x40240000
 8003590:	080526a0 	.word	0x080526a0
 8003594:	200005b0 	.word	0x200005b0
 8003598:	200005a8 	.word	0x200005a8
 800359c:	20000974 	.word	0x20000974
 80035a0:	20000964 	.word	0x20000964
 80035a4:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80035a8:	4b79      	ldr	r3, [pc, #484]	; (8003790 <main+0x1e38>)
 80035aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	f016 fa11 	bl	80199dc <__aeabi_dcmplt>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01f      	beq.n	8003600 <main+0x1ca8>
 80035c0:	4b73      	ldr	r3, [pc, #460]	; (8003790 <main+0x1e38>)
 80035c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <main+0x1e3c>)
 80035cc:	f016 fa24 	bl	8019a18 <__aeabi_dcmpgt>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d014      	beq.n	8003600 <main+0x1ca8>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035d6:	4b6e      	ldr	r3, [pc, #440]	; (8003790 <main+0x1e38>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80035e0:	496d      	ldr	r1, [pc, #436]	; (8003798 <main+0x1e40>)
 80035e2:	f017 fb69 	bl	801acb8 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80035ea:	2300      	movs	r3, #0
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2301      	movs	r3, #1
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <main+0x1e44>)
 80035f4:	215a      	movs	r1, #90	; 0x5a
 80035f6:	f240 1081 	movw	r0, #385	; 0x181
 80035fa:	f001 fe1b 	bl	8005234 <LCD_Font>
 80035fe:	e04a      	b.n	8003696 <main+0x1d3e>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <main+0x1e38>)
 8003602:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	f016 fa03 	bl	8019a18 <__aeabi_dcmpgt>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01f      	beq.n	8003658 <main+0x1d00>
 8003618:	4b5d      	ldr	r3, [pc, #372]	; (8003790 <main+0x1e38>)
 800361a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <main+0x1e48>)
 8003624:	f016 f9da 	bl	80199dc <__aeabi_dcmplt>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d014      	beq.n	8003658 <main+0x1d00>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800362e:	4b58      	ldr	r3, [pc, #352]	; (8003790 <main+0x1e38>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003638:	495a      	ldr	r1, [pc, #360]	; (80037a4 <main+0x1e4c>)
 800363a:	f017 fb3d 	bl	801acb8 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800363e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003642:	2300      	movs	r3, #0
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2301      	movs	r3, #1
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4b54      	ldr	r3, [pc, #336]	; (800379c <main+0x1e44>)
 800364c:	215a      	movs	r1, #90	; 0x5a
 800364e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003652:	f001 fdef 	bl	8005234 <LCD_Font>
 8003656:	e01e      	b.n	8003696 <main+0x1d3e>
					}
					else if (temperatureRemoteLast >= 10) {
 8003658:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <main+0x1e38>)
 800365a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <main+0x1e48>)
 8003664:	f016 f9ce 	bl	8019a04 <__aeabi_dcmpge>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d013      	beq.n	8003696 <main+0x1d3e>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <main+0x1e38>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003678:	494a      	ldr	r1, [pc, #296]	; (80037a4 <main+0x1e4c>)
 800367a:	f017 fb1d 	bl	801acb8 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800367e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003682:	2300      	movs	r3, #0
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	2301      	movs	r3, #1
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <main+0x1e44>)
 800368c:	215a      	movs	r1, #90	; 0x5a
 800368e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003692:	f001 fdcf 	bl	8005234 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <main+0x1e50>)
 8003698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <main+0x1e48>)
 80036a2:	f016 f9af 	bl	8019a04 <__aeabi_dcmpge>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d014      	beq.n	80036d6 <main+0x1d7e>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <main+0x1e50>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80036b6:	4938      	ldr	r1, [pc, #224]	; (8003798 <main+0x1e40>)
 80036b8:	f017 fafe 	bl	801acb8 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036c0:	2300      	movs	r3, #0
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	2301      	movs	r3, #1
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4b34      	ldr	r3, [pc, #208]	; (800379c <main+0x1e44>)
 80036ca:	2128      	movs	r1, #40	; 0x28
 80036cc:	f240 1073 	movw	r0, #371	; 0x173
 80036d0:	f001 fdb0 	bl	8005234 <LCD_Font>
 80036d4:	e01e      	b.n	8003714 <main+0x1dbc>
					}
					else if (humidityRemoteLast < 10) {
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <main+0x1e50>)
 80036d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <main+0x1e48>)
 80036e2:	f016 f97b 	bl	80199dc <__aeabi_dcmplt>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <main+0x1dbc>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <main+0x1e50>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80036f6:	4928      	ldr	r1, [pc, #160]	; (8003798 <main+0x1e40>)
 80036f8:	f017 fade 	bl	801acb8 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2301      	movs	r3, #1
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <main+0x1e44>)
 800370a:	2128      	movs	r1, #40	; 0x28
 800370c:	f240 1093 	movw	r0, #403	; 0x193
 8003710:	f001 fd90 	bl	8005234 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003714:	491e      	ldr	r1, [pc, #120]	; (8003790 <main+0x1e38>)
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003722:	4921      	ldr	r1, [pc, #132]	; (80037a8 <main+0x1e50>)
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <main+0x1e54>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800373a:	491d      	ldr	r1, [pc, #116]	; (80037b0 <main+0x1e58>)
 800373c:	4618      	mov	r0, r3
 800373e:	f017 fabb 	bl	801acb8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003742:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003746:	2300      	movs	r3, #0
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2301      	movs	r3, #1
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <main+0x1e44>)
 8003750:	2128      	movs	r1, #40	; 0x28
 8003752:	f240 1077 	movw	r0, #375	; 0x177
 8003756:	f001 fd6d 	bl	8005234 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <main+0x1e5c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003764:	4912      	ldr	r1, [pc, #72]	; (80037b0 <main+0x1e58>)
 8003766:	4618      	mov	r0, r3
 8003768:	f017 faa6 	bl	801acb8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 800376c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <main+0x1e60>)
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	2301      	movs	r3, #1
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <main+0x1e44>)
 800377a:	2128      	movs	r1, #40	; 0x28
 800377c:	f240 1077 	movw	r0, #375	; 0x177
 8003780:	f001 fd58 	bl	8005234 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <main+0x1e5c>)
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <main+0x1e54>)
 800378a:	701a      	strb	r2, [r3, #0]
	{
 800378c:	f7fe b9df 	b.w	8001b4e <main+0x1f6>
 8003790:	200005a0 	.word	0x200005a0
 8003794:	c0240000 	.word	0xc0240000
 8003798:	08052698 	.word	0x08052698
 800379c:	08029f70 	.word	0x08029f70
 80037a0:	40240000 	.word	0x40240000
 80037a4:	080526a0 	.word	0x080526a0
 80037a8:	200005b0 	.word	0x200005b0
 80037ac:	20000000 	.word	0x20000000
 80037b0:	0805264c 	.word	0x0805264c
 80037b4:	2000056d 	.word	0x2000056d
 80037b8:	00ffa500 	.word	0x00ffa500

080037bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b094      	sub	sp, #80	; 0x50
 80037c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037c2:	f107 0320 	add.w	r3, r7, #32
 80037c6:	2230      	movs	r2, #48	; 0x30
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f016 fbec 	bl	8019fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <SystemClock_Config+0xcc>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	4a27      	ldr	r2, [pc, #156]	; (8003888 <SystemClock_Config+0xcc>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6413      	str	r3, [r2, #64]	; 0x40
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <SystemClock_Config+0xcc>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <SystemClock_Config+0xd0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a21      	ldr	r2, [pc, #132]	; (800388c <SystemClock_Config+0xd0>)
 8003806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <SystemClock_Config+0xd0>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003818:	2301      	movs	r3, #1
 800381a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800381c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003822:	2302      	movs	r3, #2
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800382c:	2304      	movs	r3, #4
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003830:	23a8      	movs	r3, #168	; 0xa8
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003834:	2302      	movs	r3, #2
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003838:	2307      	movs	r3, #7
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800383c:	f107 0320 	add.w	r3, r7, #32
 8003840:	4618      	mov	r0, r3
 8003842:	f00e fbd3 	bl	8011fec <HAL_RCC_OscConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800384c:	f000 fab0 	bl	8003db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003850:	230f      	movs	r3, #15
 8003852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003854:	2302      	movs	r3, #2
 8003856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800385c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	2105      	movs	r1, #5
 800386e:	4618      	mov	r0, r3
 8003870:	f00e fe34 	bl	80124dc <HAL_RCC_ClockConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800387a:	f000 fa99 	bl	8003db0 <Error_Handler>
  }
}
 800387e:	bf00      	nop
 8003880:	3750      	adds	r7, #80	; 0x50
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000

08003890 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003896:	463b      	mov	r3, r7
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <MX_DAC_Init+0x60>)
 80038a0:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <MX_DAC_Init+0x64>)
 80038a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038a4:	4812      	ldr	r0, [pc, #72]	; (80038f0 <MX_DAC_Init+0x60>)
 80038a6:	f003 ffbc 	bl	8007822 <HAL_DAC_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038b0:	f000 fa7e 	bl	8003db0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038bc:	463b      	mov	r3, r7
 80038be:	2200      	movs	r2, #0
 80038c0:	4619      	mov	r1, r3
 80038c2:	480b      	ldr	r0, [pc, #44]	; (80038f0 <MX_DAC_Init+0x60>)
 80038c4:	f004 fa31 	bl	8007d2a <HAL_DAC_ConfigChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038ce:	f000 fa6f 	bl	8003db0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80038d2:	463b      	mov	r3, r7
 80038d4:	2210      	movs	r2, #16
 80038d6:	4619      	mov	r1, r3
 80038d8:	4805      	ldr	r0, [pc, #20]	; (80038f0 <MX_DAC_Init+0x60>)
 80038da:	f004 fa26 	bl	8007d2a <HAL_DAC_ConfigChannel>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80038e4:	f000 fa64 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200002a8 	.word	0x200002a8
 80038f4:	40007400 	.word	0x40007400

080038f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <MX_I2C1_Init+0x50>)
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <MX_I2C1_Init+0x54>)
 8003900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003902:	4b11      	ldr	r3, [pc, #68]	; (8003948 <MX_I2C1_Init+0x50>)
 8003904:	4a12      	ldr	r2, [pc, #72]	; (8003950 <MX_I2C1_Init+0x58>)
 8003906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <MX_I2C1_Init+0x50>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <MX_I2C1_Init+0x50>)
 8003910:	2200      	movs	r2, #0
 8003912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <MX_I2C1_Init+0x50>)
 8003916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800391a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <MX_I2C1_Init+0x50>)
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <MX_I2C1_Init+0x50>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <MX_I2C1_Init+0x50>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <MX_I2C1_Init+0x50>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003934:	4804      	ldr	r0, [pc, #16]	; (8003948 <MX_I2C1_Init+0x50>)
 8003936:	f007 ff84 	bl	800b842 <HAL_I2C_Init>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003940:	f000 fa36 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200002bc 	.word	0x200002bc
 800394c:	40005400 	.word	0x40005400
 8003950:	000186a0 	.word	0x000186a0

08003954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <MX_SPI1_Init+0x64>)
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <MX_SPI1_Init+0x68>)
 800395c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <MX_SPI1_Init+0x64>)
 8003960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <MX_SPI1_Init+0x64>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <MX_SPI1_Init+0x64>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <MX_SPI1_Init+0x64>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <MX_SPI1_Init+0x64>)
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <MX_SPI1_Init+0x64>)
 8003980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <MX_SPI1_Init+0x64>)
 8003988:	2200      	movs	r2, #0
 800398a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <MX_SPI1_Init+0x64>)
 800398e:	2200      	movs	r2, #0
 8003990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <MX_SPI1_Init+0x64>)
 8003994:	2200      	movs	r2, #0
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <MX_SPI1_Init+0x64>)
 800399a:	2200      	movs	r2, #0
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <MX_SPI1_Init+0x64>)
 80039a0:	220a      	movs	r2, #10
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a4:	4804      	ldr	r0, [pc, #16]	; (80039b8 <MX_SPI1_Init+0x64>)
 80039a6:	f00f fbb9 	bl	801311c <HAL_SPI_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039b0:	f000 f9fe 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000310 	.word	0x20000310
 80039bc:	40013000 	.word	0x40013000

080039c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039c6:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <MX_SPI2_Init+0x68>)
 80039c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039f4:	2238      	movs	r2, #56	; 0x38
 80039f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <MX_SPI2_Init+0x64>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <MX_SPI2_Init+0x64>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <MX_SPI2_Init+0x64>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <MX_SPI2_Init+0x64>)
 8003a0c:	220a      	movs	r2, #10
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a10:	4804      	ldr	r0, [pc, #16]	; (8003a24 <MX_SPI2_Init+0x64>)
 8003a12:	f00f fb83 	bl	801311c <HAL_SPI_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a1c:	f000 f9c8 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000368 	.word	0x20000368
 8003a28:	40003800 	.word	0x40003800

08003a2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <MX_SPI3_Init+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a60:	2238      	movs	r2, #56	; 0x38
 8003a62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a78:	220a      	movs	r2, #10
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <MX_SPI3_Init+0x64>)
 8003a7e:	f00f fb4d 	bl	801311c <HAL_SPI_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a88:	f000 f992 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	200003c0 	.word	0x200003c0
 8003a94:	40003c00 	.word	0x40003c00

08003a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <MX_USART1_UART_Init+0x50>)
 8003aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003aa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003abe:	220c      	movs	r2, #12
 8003ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_USART1_UART_Init+0x4c>)
 8003ad0:	f012 f88a 	bl	8015be8 <HAL_UART_Init>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ada:	f000 f969 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200004d8 	.word	0x200004d8
 8003ae8:	40011000 	.word	0x40011000

08003aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <MX_DMA_Init+0x4c>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <MX_DMA_Init+0x4c>)
 8003afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <MX_DMA_Init+0x4c>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2100      	movs	r1, #0
 8003b12:	200e      	movs	r0, #14
 8003b14:	f003 fd41 	bl	800759a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003b18:	200e      	movs	r0, #14
 8003b1a:	f003 fd5a 	bl	80075d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2100      	movs	r1, #0
 8003b22:	200f      	movs	r0, #15
 8003b24:	f003 fd39 	bl	800759a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b28:	200f      	movs	r0, #15
 8003b2a:	f003 fd52 	bl	80075d2 <HAL_NVIC_EnableIRQ>

}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800

08003b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b42:	f107 031c 	add.w	r3, r7, #28
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	4b60      	ldr	r3, [pc, #384]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a5f      	ldr	r2, [pc, #380]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b56      	ldr	r3, [pc, #344]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a4a      	ldr	r2, [pc, #296]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <MX_GPIO_Init+0x19c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	4837      	ldr	r0, [pc, #220]	; (8003cdc <MX_GPIO_Init+0x1a0>)
 8003c00:	f007 fda0 	bl	800b744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003c04:	2200      	movs	r2, #0
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	4834      	ldr	r0, [pc, #208]	; (8003cdc <MX_GPIO_Init+0x1a0>)
 8003c0a:	f007 fd9b 	bl	800b744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2101      	movs	r1, #1
 8003c12:	4833      	ldr	r0, [pc, #204]	; (8003ce0 <MX_GPIO_Init+0x1a4>)
 8003c14:	f007 fd96 	bl	800b744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c1e:	4831      	ldr	r0, [pc, #196]	; (8003ce4 <MX_GPIO_Init+0x1a8>)
 8003c20:	f007 fd90 	bl	800b744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003c24:	2200      	movs	r2, #0
 8003c26:	2104      	movs	r1, #4
 8003c28:	482f      	ldr	r0, [pc, #188]	; (8003ce8 <MX_GPIO_Init+0x1ac>)
 8003c2a:	f007 fd8b 	bl	800b744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003c2e:	2318      	movs	r3, #24
 8003c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	482a      	ldr	r0, [pc, #168]	; (8003cec <MX_GPIO_Init+0x1b0>)
 8003c42:	f007 facf 	bl	800b1e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003c46:	23c0      	movs	r3, #192	; 0xc0
 8003c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	481f      	ldr	r0, [pc, #124]	; (8003cdc <MX_GPIO_Init+0x1a0>)
 8003c5e:	f007 fac1 	bl	800b1e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003c62:	2320      	movs	r3, #32
 8003c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003c6e:	f107 031c 	add.w	r3, r7, #28
 8003c72:	4619      	mov	r1, r3
 8003c74:	481b      	ldr	r0, [pc, #108]	; (8003ce4 <MX_GPIO_Init+0x1a8>)
 8003c76:	f007 fab5 	bl	800b1e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c82:	2301      	movs	r3, #1
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003c8a:	f107 031c 	add.w	r3, r7, #28
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4813      	ldr	r0, [pc, #76]	; (8003ce0 <MX_GPIO_Init+0x1a4>)
 8003c92:	f007 faa7 	bl	800b1e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003c96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	4619      	mov	r1, r3
 8003cae:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <MX_GPIO_Init+0x1a8>)
 8003cb0:	f007 fa98 	bl	800b1e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4807      	ldr	r0, [pc, #28]	; (8003ce8 <MX_GPIO_Init+0x1ac>)
 8003ccc:	f007 fa8a 	bl	800b1e4 <HAL_GPIO_Init>

}
 8003cd0:	bf00      	nop
 8003cd2:	3730      	adds	r7, #48	; 0x30
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40021000 	.word	0x40021000

08003cf0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
 8003d04:	615a      	str	r2, [r3, #20]
 8003d06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d0a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003d0e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d12:	4a26      	ldr	r2, [pc, #152]	; (8003dac <MX_FSMC_Init+0xbc>)
 8003d14:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003d70:	230f      	movs	r3, #15
 8003d72:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8003d74:	2305      	movs	r3, #5
 8003d76:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003d80:	2311      	movs	r3, #17
 8003d82:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4806      	ldr	r0, [pc, #24]	; (8003da8 <MX_FSMC_Init+0xb8>)
 8003d90:	f011 fc80 	bl	8015694 <HAL_SRAM_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003d9a:	f000 f809 	bl	8003db0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003d9e:	bf00      	nop
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000051c 	.word	0x2000051c
 8003dac:	a0000104 	.word	0xa0000104

08003db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003db4:	b672      	cpsid	i
}
 8003db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003db8:	e7fe      	b.n	8003db8 <Error_Handler+0x8>

08003dba <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	71bb      	strb	r3, [r7, #6]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	041a      	lsls	r2, r3, #16
 8003dd0:	79bb      	ldrb	r3, [r7, #6]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	441a      	add	r2, r3
 8003dd6:	797b      	ldrb	r3, [r7, #5]
 8003dd8:	4413      	add	r3, r2
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	6039      	str	r1, [r7, #0]
 8003df0:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <H24_RGB565+0x4a>
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	08db      	lsrs	r3, r3, #3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	02db      	lsls	r3, r3, #11
 8003e10:	b21a      	sxth	r2, r3
 8003e12:	7bbb      	ldrb	r3, [r7, #14]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	7b7b      	ldrb	r3, [r7, #13]
 8003e22:	08db      	lsrs	r3, r3, #3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	b21b      	sxth	r3, r3
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	e012      	b.n	8003e56 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8003e30:	7b7b      	ldrb	r3, [r7, #13]
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	02db      	lsls	r3, r3, #11
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	7bbb      	ldrb	r3, [r7, #14]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	015b      	lsls	r3, r3, #5
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b21a      	sxth	r2, r3
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	b29b      	uxth	r3, r3
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4603      	mov	r3, r0
 8003e6a:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8003e6c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	8013      	strh	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e005      	b.n	8003e9c <LCD_Send_Dat+0x1c>
	DAT = dat;
 8003e90:	4a07      	ldr	r2, [pc, #28]	; (8003eb0 <LCD_Send_Dat+0x30>)
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f6      	beq.n	8003e90 <LCD_Send_Dat+0x10>
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	60080000 	.word	0x60080000

08003eb4 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	80fb      	strh	r3, [r7, #6]
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80bb      	strh	r3, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8003ed2:	202a      	movs	r0, #42	; 0x2a
 8003ed4:	f7ff ffc5 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8003ed8:	88bb      	ldrh	r3, [r7, #4]
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff ffce 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8003ee4:	88bb      	ldrh	r3, [r7, #4]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ffc8 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8003ef0:	883b      	ldrh	r3, [r7, #0]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ffc2 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8003efc:	883b      	ldrh	r3, [r7, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ffbc 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8003f08:	202b      	movs	r0, #43	; 0x2b
 8003f0a:	f7ff ffaa 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ffb3 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ffad 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8003f26:	887b      	ldrh	r3, [r7, #2]
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ffa7 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ffa1 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8003f3e:	202c      	movs	r0, #44	; 0x2c
 8003f40:	f7ff ff8f 	bl	8003e62 <LCD_Send_Cmd>
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd90      	pop	{r4, r7, pc}

08003f4c <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	603a      	str	r2, [r7, #0]
 8003f56:	80fb      	strh	r3, [r7, #6]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 8003f5c:	88bb      	ldrh	r3, [r7, #4]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	88b9      	ldrh	r1, [r7, #4]
 8003f62:	88f8      	ldrh	r0, [r7, #6]
 8003f64:	f7ff ffa6 	bl	8003eb4 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	f7ff ff3b 	bl	8003de6 <H24_RGB565>
 8003f70:	4603      	mov	r3, r0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff84 	bl	8003e80 <LCD_Send_Dat>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4623      	mov	r3, r4
 8003f90:	80fb      	strh	r3, [r7, #6]
 8003f92:	4603      	mov	r3, r0
 8003f94:	80bb      	strh	r3, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	807b      	strh	r3, [r7, #2]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	883a      	ldrh	r2, [r7, #0]
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8003fac:	88ba      	ldrh	r2, [r7, #4]
 8003fae:	883b      	ldrh	r3, [r7, #0]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29c      	uxth	r4, r3
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	88f9      	ldrh	r1, [r7, #6]
 8003fc6:	88b8      	ldrh	r0, [r7, #4]
 8003fc8:	4622      	mov	r2, r4
 8003fca:	f7ff ff73 	bl	8003eb4 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e00a      	b.n	8003fea <LCD_Rect_Fill+0x6a>
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7ff ff05 	bl	8003de6 <H24_RGB565>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff4e 	bl	8003e80 <LCD_Send_Dat>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d3f0      	bcc.n	8003fd4 <LCD_Rect_Fill+0x54>
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}

08003ffc <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b08b      	sub	sp, #44	; 0x2c
 8004000:	af02      	add	r7, sp, #8
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4623      	mov	r3, r4
 800400c:	80fb      	strh	r3, [r7, #6]
 800400e:	4603      	mov	r3, r0
 8004010:	80bb      	strh	r3, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
 8004016:	4613      	mov	r3, r2
 8004018:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	bfb8      	it	lt
 8004024:	425b      	neglt	r3, r3
 8004026:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8004028:	883a      	ldrh	r2, [r7, #0]
 800402a:	88bb      	ldrh	r3, [r7, #4]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfb8      	it	lt
 8004032:	425b      	neglt	r3, r3
 8004034:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	429a      	cmp	r2, r3
 800403c:	d201      	bcs.n	8004042 <LCD_Line+0x46>
 800403e:	2301      	movs	r3, #1
 8004040:	e001      	b.n	8004046 <LCD_Line+0x4a>
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8004048:	88ba      	ldrh	r2, [r7, #4]
 800404a:	883b      	ldrh	r3, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d201      	bcs.n	8004054 <LCD_Line+0x58>
 8004050:	2301      	movs	r3, #1
 8004052:	e001      	b.n	8004058 <LCD_Line+0x5c>
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004066:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800406a:	b29a      	uxth	r2, r3
 800406c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004070:	b29c      	uxth	r4, r3
 8004072:	88b9      	ldrh	r1, [r7, #4]
 8004074:	88f8      	ldrh	r0, [r7, #6]
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4623      	mov	r3, r4
 800407c:	f7ff ff80 	bl	8003f80 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	887b      	ldrh	r3, [r7, #2]
 8004084:	429a      	cmp	r2, r3
 8004086:	d103      	bne.n	8004090 <LCD_Line+0x94>
 8004088:	88ba      	ldrh	r2, [r7, #4]
 800408a:	883b      	ldrh	r3, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d01e      	beq.n	80040ce <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	425b      	negs	r3, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	dd08      	ble.n	80040b2 <LCD_Line+0xb6>
		{
			error -= deltaY;
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	4413      	add	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dad5      	bge.n	8004066 <LCD_Line+0x6a>
		{
			error += deltaX;
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4413      	add	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	88bb      	ldrh	r3, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80040cc:	e7cb      	b.n	8004066 <LCD_Line+0x6a>
		break;
 80040ce:	bf00      	nop
		}
	}
}
 80040d0:	bf00      	nop
 80040d2:	3724      	adds	r7, #36	; 0x24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd90      	pop	{r4, r7, pc}

080040d8 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b085      	sub	sp, #20
 80040dc:	af02      	add	r7, sp, #8
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	80fb      	strh	r3, [r7, #6]
 80040ea:	4603      	mov	r3, r0
 80040ec:	80bb      	strh	r3, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	807b      	strh	r3, [r7, #2]
 80040f2:	4613      	mov	r3, r2
 80040f4:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 80040f6:	883c      	ldrh	r4, [r7, #0]
 80040f8:	887a      	ldrh	r2, [r7, #2]
 80040fa:	88b9      	ldrh	r1, [r7, #4]
 80040fc:	88f8      	ldrh	r0, [r7, #6]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4623      	mov	r3, r4
 800410a:	f7ff ff77 	bl	8003ffc <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 800410e:	8bbc      	ldrh	r4, [r7, #28]
 8004110:	8b3a      	ldrh	r2, [r7, #24]
 8004112:	8839      	ldrh	r1, [r7, #0]
 8004114:	8878      	ldrh	r0, [r7, #2]
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4623      	mov	r3, r4
 8004122:	f7ff ff6b 	bl	8003ffc <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 8004126:	88bc      	ldrh	r4, [r7, #4]
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	8bb9      	ldrh	r1, [r7, #28]
 800412c:	8b38      	ldrh	r0, [r7, #24]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4623      	mov	r3, r4
 800413a:	f7ff ff5f 	bl	8003ffc <LCD_Line>
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bd90      	pop	{r4, r7, pc}

08004146 <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 8004146:	b590      	push	{r4, r7, lr}
 8004148:	b08d      	sub	sp, #52	; 0x34
 800414a:	af02      	add	r7, sp, #8
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	461a      	mov	r2, r3
 8004154:	4623      	mov	r3, r4
 8004156:	80fb      	strh	r3, [r7, #6]
 8004158:	4603      	mov	r3, r0
 800415a:	80bb      	strh	r3, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
 8004160:	4613      	mov	r3, r2
 8004162:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004164:	2300      	movs	r3, #0
 8004166:	823b      	strh	r3, [r7, #16]
 8004168:	2300      	movs	r3, #0
 800416a:	81fb      	strh	r3, [r7, #14]
 800416c:	2300      	movs	r3, #0
 800416e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004170:	2300      	movs	r3, #0
 8004172:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004174:	2300      	movs	r3, #0
 8004176:	847b      	strh	r3, [r7, #34]	; 0x22
 8004178:	2300      	movs	r3, #0
 800417a:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800417c:	2300      	movs	r3, #0
 800417e:	83fb      	strh	r3, [r7, #30]
 8004180:	2300      	movs	r3, #0
 8004182:	83bb      	strh	r3, [r7, #28]
 8004184:	2300      	movs	r3, #0
 8004186:	837b      	strh	r3, [r7, #26]
 8004188:	2300      	movs	r3, #0
 800418a:	833b      	strh	r3, [r7, #24]
 800418c:	2300      	movs	r3, #0
 800418e:	82fb      	strh	r3, [r7, #22]
 8004190:	2300      	movs	r3, #0
 8004192:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfb8      	it	lt
 80041a2:	425b      	neglt	r3, r3
 80041a4:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80041a6:	883a      	ldrh	r2, [r7, #0]
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bfb8      	it	lt
 80041b0:	425b      	neglt	r3, r3
 80041b2:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80041b8:	88bb      	ldrh	r3, [r7, #4]
 80041ba:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 80041bc:	887a      	ldrh	r2, [r7, #2]
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d304      	bcc.n	80041ce <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80041c8:	2301      	movs	r3, #1
 80041ca:	843b      	strh	r3, [r7, #32]
 80041cc:	e005      	b.n	80041da <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 80041ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d2:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80041d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d8:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 80041da:	883a      	ldrh	r2, [r7, #0]
 80041dc:	88bb      	ldrh	r3, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d304      	bcc.n	80041ec <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	83bb      	strh	r3, [r7, #28]
 80041ea:	e005      	b.n	80041f8 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 80041ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041f0:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80041f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041f6:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 80041f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004200:	429a      	cmp	r2, r3
 8004202:	db10      	blt.n	8004226 <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 800420c:	8a3b      	ldrh	r3, [r7, #16]
 800420e:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004210:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004214:	0fda      	lsrs	r2, r3, #31
 8004216:	4413      	add	r3, r2
 8004218:	105b      	asrs	r3, r3, #1
 800421a:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 800421c:	89fb      	ldrh	r3, [r7, #14]
 800421e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8004220:	8a3b      	ldrh	r3, [r7, #16]
 8004222:	82bb      	strh	r3, [r7, #20]
 8004224:	e00f      	b.n	8004246 <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8004232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004236:	0fda      	lsrs	r2, r3, #31
 8004238:	4413      	add	r3, r2
 800423a:	105b      	asrs	r3, r3, #1
 800423c:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 800423e:	8a3b      	ldrh	r3, [r7, #16]
 8004240:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8004242:	89fb      	ldrh	r3, [r7, #14]
 8004244:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004246:	2300      	movs	r3, #0
 8004248:	827b      	strh	r3, [r7, #18]
 800424a:	e034      	b.n	80042b6 <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 800424c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800424e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004250:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8004252:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2301      	movs	r3, #1
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	4623      	mov	r3, r4
 800425e:	f7ff fecd 	bl	8003ffc <LCD_Line>

		num += numadd;
 8004262:	8b3a      	ldrh	r2, [r7, #24]
 8004264:	8afb      	ldrh	r3, [r7, #22]
 8004266:	4413      	add	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 800426c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004270:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004274:	429a      	cmp	r2, r3
 8004276:	db0e      	blt.n	8004296 <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 8004278:	8b3a      	ldrh	r2, [r7, #24]
 800427a:	8b7b      	ldrh	r3, [r7, #26]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8004282:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004286:	4413      	add	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 800428c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800428e:	8bfb      	ldrh	r3, [r7, #30]
 8004290:	4413      	add	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8004296:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004298:	8c3b      	ldrh	r3, [r7, #32]
 800429a:	4413      	add	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80042a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042a2:	8bbb      	ldrh	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80042aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	827b      	strh	r3, [r7, #18]
 80042b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80042ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042be:	429a      	cmp	r2, r3
 80042c0:	ddc4      	ble.n	800424c <LCD_Triangle_Fill+0x106>
	}
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	372c      	adds	r7, #44	; 0x2c
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}

080042cc <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	4623      	mov	r3, r4
 80042dc:	80fb      	strh	r3, [r7, #6]
 80042de:	4603      	mov	r3, r0
 80042e0:	80bb      	strh	r3, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	807b      	strh	r3, [r7, #2]
 80042e6:	4613      	mov	r3, r2
 80042e8:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	887b      	ldrh	r3, [r7, #2]
 80042ee:	4413      	add	r3, r2
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	88bc      	ldrh	r4, [r7, #4]
 80042f4:	88b9      	ldrh	r1, [r7, #4]
 80042f6:	88f8      	ldrh	r0, [r7, #6]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	7e3b      	ldrb	r3, [r7, #24]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	4623      	mov	r3, r4
 8004302:	f7ff fe7b 	bl	8003ffc <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004306:	88ba      	ldrh	r2, [r7, #4]
 8004308:	883b      	ldrh	r3, [r7, #0]
 800430a:	4413      	add	r3, r2
 800430c:	b299      	uxth	r1, r3
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	4413      	add	r3, r2
 8004314:	b29c      	uxth	r4, r3
 8004316:	88ba      	ldrh	r2, [r7, #4]
 8004318:	883b      	ldrh	r3, [r7, #0]
 800431a:	4413      	add	r3, r2
 800431c:	b29a      	uxth	r2, r3
 800431e:	88f8      	ldrh	r0, [r7, #6]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	7e3b      	ldrb	r3, [r7, #24]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	4622      	mov	r2, r4
 800432c:	f7ff fe66 	bl	8003ffc <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004330:	88ba      	ldrh	r2, [r7, #4]
 8004332:	883b      	ldrh	r3, [r7, #0]
 8004334:	4413      	add	r3, r2
 8004336:	b29c      	uxth	r4, r3
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	88b9      	ldrh	r1, [r7, #4]
 800433c:	88f8      	ldrh	r0, [r7, #6]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	7e3b      	ldrb	r3, [r7, #24]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4623      	mov	r3, r4
 8004348:	f7ff fe58 	bl	8003ffc <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	4413      	add	r3, r2
 8004352:	b298      	uxth	r0, r3
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	4413      	add	r3, r2
 800435a:	b29c      	uxth	r4, r3
 800435c:	88ba      	ldrh	r2, [r7, #4]
 800435e:	883b      	ldrh	r3, [r7, #0]
 8004360:	4413      	add	r3, r2
 8004362:	b29a      	uxth	r2, r3
 8004364:	88b9      	ldrh	r1, [r7, #4]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	7e3b      	ldrb	r3, [r7, #24]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4613      	mov	r3, r2
 8004370:	4622      	mov	r2, r4
 8004372:	f7ff fe43 	bl	8003ffc <LCD_Line>
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bd90      	pop	{r4, r7, pc}

0800437e <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 800437e:	b590      	push	{r4, r7, lr}
 8004380:	b08b      	sub	sp, #44	; 0x2c
 8004382:	af02      	add	r7, sp, #8
 8004384:	4604      	mov	r4, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	461a      	mov	r2, r3
 800438c:	4623      	mov	r3, r4
 800438e:	80fb      	strh	r3, [r7, #6]
 8004390:	4603      	mov	r3, r0
 8004392:	80bb      	strh	r3, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
 8004398:	4613      	mov	r3, r2
 800439a:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 800439c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 80043aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 80043c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8101 	beq.w	80045d0 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	83fb      	strh	r3, [r7, #30]
 80043d2:	883b      	ldrh	r3, [r7, #0]
 80043d4:	83bb      	strh	r3, [r7, #28]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	005a      	lsls	r2, r3, #1
 80043da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f1c3 0301 	rsb	r3, r3, #1
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e062      	b.n	80044b6 <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	8bfb      	ldrh	r3, [r7, #30]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	b298      	uxth	r0, r3
 80043f8:	88ba      	ldrh	r2, [r7, #4]
 80043fa:	8bbb      	ldrh	r3, [r7, #28]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	b299      	uxth	r1, r3
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	8bfb      	ldrh	r3, [r7, #30]
 8004404:	4413      	add	r3, r2
 8004406:	b29a      	uxth	r2, r3
 8004408:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800440c:	b29b      	uxth	r3, r3
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	3301      	adds	r3, #1
 8004414:	b29c      	uxth	r4, r3
 8004416:	88ba      	ldrh	r2, [r7, #4]
 8004418:	8bbb      	ldrh	r3, [r7, #28]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	b29a      	uxth	r2, r3
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	4622      	mov	r2, r4
 800442c:	f7ff fde6 	bl	8003ffc <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	8bfb      	ldrh	r3, [r7, #30]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	b298      	uxth	r0, r3
 8004438:	88ba      	ldrh	r2, [r7, #4]
 800443a:	8bbb      	ldrh	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	b299      	uxth	r1, r3
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	8bfb      	ldrh	r3, [r7, #30]
 8004444:	4413      	add	r3, r2
 8004446:	b29a      	uxth	r2, r3
 8004448:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800444c:	b29b      	uxth	r3, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	3301      	adds	r3, #1
 8004454:	b29c      	uxth	r4, r3
 8004456:	88ba      	ldrh	r2, [r7, #4]
 8004458:	8bbb      	ldrh	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	b29a      	uxth	r2, r3
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	4622      	mov	r2, r4
 800446c:	f7ff fdc6 	bl	8003ffc <LCD_Line>
			if (s >= 0)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	db0f      	blt.n	8004496 <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 8004476:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800447a:	f1c3 0301 	rsb	r3, r3, #1
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
				y--;
 800448a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29b      	uxth	r3, r3
 8004494:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8004496:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	3306      	adds	r3, #6
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4413      	add	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80044aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	83fb      	strh	r3, [r7, #30]
 80044b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	fb03 f202 	mul.w	r2, r3, r2
 80044c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	429a      	cmp	r2, r3
 80044cc:	dd90      	ble.n	80043f0 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	83fb      	strh	r3, [r7, #30]
 80044d2:	2300      	movs	r3, #0
 80044d4:	83bb      	strh	r3, [r7, #28]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	005a      	lsls	r2, r3, #1
 80044da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	f1c3 0301 	rsb	r3, r3, #1
 80044e4:	6939      	ldr	r1, [r7, #16]
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e062      	b.n	80045b6 <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	8bfb      	ldrh	r3, [r7, #30]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	b298      	uxth	r0, r3
 80044f8:	88ba      	ldrh	r2, [r7, #4]
 80044fa:	8bbb      	ldrh	r3, [r7, #28]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	b299      	uxth	r1, r3
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	8bfb      	ldrh	r3, [r7, #30]
 8004504:	4413      	add	r3, r2
 8004506:	b29a      	uxth	r2, r3
 8004508:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800450c:	b29b      	uxth	r3, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	3301      	adds	r3, #1
 8004514:	b29c      	uxth	r4, r3
 8004516:	88ba      	ldrh	r2, [r7, #4]
 8004518:	8bbb      	ldrh	r3, [r7, #28]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	b29a      	uxth	r2, r3
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	4622      	mov	r2, r4
 800452c:	f7ff fd66 	bl	8003ffc <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	8bfb      	ldrh	r3, [r7, #30]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	b298      	uxth	r0, r3
 8004538:	88ba      	ldrh	r2, [r7, #4]
 800453a:	8bbb      	ldrh	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	b299      	uxth	r1, r3
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	8bfb      	ldrh	r3, [r7, #30]
 8004544:	4413      	add	r3, r2
 8004546:	b29a      	uxth	r2, r3
 8004548:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800454c:	b29b      	uxth	r3, r3
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	3301      	adds	r3, #1
 8004554:	b29c      	uxth	r4, r3
 8004556:	88ba      	ldrh	r2, [r7, #4]
 8004558:	8bbb      	ldrh	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	b29a      	uxth	r2, r3
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	4622      	mov	r2, r4
 800456c:	f7ff fd46 	bl	8003ffc <LCD_Line>
			if (s >= 0)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	db0f      	blt.n	8004596 <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 8004576:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800457a:	f1c3 0301 	rsb	r3, r3, #1
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	fb02 f303 	mul.w	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4413      	add	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
				x--;
 800458a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8004596:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	3306      	adds	r3, #6
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	fb02 f303 	mul.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4413      	add	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80045aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3301      	adds	r3, #1
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	83bb      	strh	r3, [r7, #28]
 80045b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	fb03 f202 	mul.w	r2, r3, r2
 80045c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045c4:	6939      	ldr	r1, [r7, #16]
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	429a      	cmp	r2, r3
 80045cc:	dd90      	ble.n	80044f0 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 80045ce:	e117      	b.n	8004800 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	83fb      	strh	r3, [r7, #30]
 80045d4:	883b      	ldrh	r3, [r7, #0]
 80045d6:	83bb      	strh	r3, [r7, #28]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	005a      	lsls	r2, r3, #1
 80045dc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	f1c3 0301 	rsb	r3, r3, #1
 80045e6:	6979      	ldr	r1, [r7, #20]
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e06e      	b.n	80046d0 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	8bfb      	ldrh	r3, [r7, #30]
 80045f6:	4413      	add	r3, r2
 80045f8:	b298      	uxth	r0, r3
 80045fa:	88ba      	ldrh	r2, [r7, #4]
 80045fc:	8bbb      	ldrh	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	b299      	uxth	r1, r3
 8004602:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004606:	b29a      	uxth	r2, r3
 8004608:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800460c:	b29c      	uxth	r4, r3
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4623      	mov	r3, r4
 8004614:	f7ff fcb4 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	8bfb      	ldrh	r3, [r7, #30]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	b298      	uxth	r0, r3
 8004620:	88ba      	ldrh	r2, [r7, #4]
 8004622:	8bbb      	ldrh	r3, [r7, #28]
 8004624:	4413      	add	r3, r2
 8004626:	b299      	uxth	r1, r3
 8004628:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800462c:	b29a      	uxth	r2, r3
 800462e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004632:	b29c      	uxth	r4, r3
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	4623      	mov	r3, r4
 800463a:	f7ff fca1 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	8bfb      	ldrh	r3, [r7, #30]
 8004642:	4413      	add	r3, r2
 8004644:	b298      	uxth	r0, r3
 8004646:	88ba      	ldrh	r2, [r7, #4]
 8004648:	8bbb      	ldrh	r3, [r7, #28]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	b299      	uxth	r1, r3
 800464e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004652:	b29a      	uxth	r2, r3
 8004654:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004658:	b29c      	uxth	r4, r3
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4623      	mov	r3, r4
 8004660:	f7ff fc8e 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	8bfb      	ldrh	r3, [r7, #30]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	b298      	uxth	r0, r3
 800466c:	88ba      	ldrh	r2, [r7, #4]
 800466e:	8bbb      	ldrh	r3, [r7, #28]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	b299      	uxth	r1, r3
 8004674:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004678:	b29a      	uxth	r2, r3
 800467a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800467e:	b29c      	uxth	r4, r3
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	4623      	mov	r3, r4
 8004686:	f7ff fc7b 	bl	8003f80 <LCD_Rect_Fill>
			if (s >= 0)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0f      	blt.n	80046b0 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 8004690:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004694:	f1c3 0301 	rsb	r3, r3, #1
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
				y--;
 80046a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 80046b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	3306      	adds	r3, #6
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4413      	add	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80046c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	83fb      	strh	r3, [r7, #30]
 80046d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	fb03 f202 	mul.w	r2, r3, r2
 80046da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	429a      	cmp	r2, r3
 80046e6:	dd84      	ble.n	80045f2 <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	83fb      	strh	r3, [r7, #30]
 80046ec:	2300      	movs	r3, #0
 80046ee:	83bb      	strh	r3, [r7, #28]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	005a      	lsls	r2, r3, #1
 80046f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	f1c3 0301 	rsb	r3, r3, #1
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e06e      	b.n	80047e8 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	8bfb      	ldrh	r3, [r7, #30]
 800470e:	4413      	add	r3, r2
 8004710:	b298      	uxth	r0, r3
 8004712:	88ba      	ldrh	r2, [r7, #4]
 8004714:	8bbb      	ldrh	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	b299      	uxth	r1, r3
 800471a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800471e:	b29a      	uxth	r2, r3
 8004720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004724:	b29c      	uxth	r4, r3
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	4623      	mov	r3, r4
 800472c:	f7ff fc28 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	8bfb      	ldrh	r3, [r7, #30]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b298      	uxth	r0, r3
 8004738:	88ba      	ldrh	r2, [r7, #4]
 800473a:	8bbb      	ldrh	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	b299      	uxth	r1, r3
 8004740:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004744:	b29a      	uxth	r2, r3
 8004746:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800474a:	b29c      	uxth	r4, r3
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4623      	mov	r3, r4
 8004752:	f7ff fc15 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	8bfb      	ldrh	r3, [r7, #30]
 800475a:	4413      	add	r3, r2
 800475c:	b298      	uxth	r0, r3
 800475e:	88ba      	ldrh	r2, [r7, #4]
 8004760:	8bbb      	ldrh	r3, [r7, #28]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	b299      	uxth	r1, r3
 8004766:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800476a:	b29a      	uxth	r2, r3
 800476c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004770:	b29c      	uxth	r4, r3
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	4623      	mov	r3, r4
 8004778:	f7ff fc02 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	8bfb      	ldrh	r3, [r7, #30]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	b298      	uxth	r0, r3
 8004784:	88ba      	ldrh	r2, [r7, #4]
 8004786:	8bbb      	ldrh	r3, [r7, #28]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b299      	uxth	r1, r3
 800478c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004790:	b29a      	uxth	r2, r3
 8004792:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004796:	b29c      	uxth	r4, r3
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4623      	mov	r3, r4
 800479e:	f7ff fbef 	bl	8003f80 <LCD_Rect_Fill>
			if (s >= 0)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	db0f      	blt.n	80047c8 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 80047a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047ac:	f1c3 0301 	rsb	r3, r3, #1
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4413      	add	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
				x--;
 80047bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 80047c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	3306      	adds	r3, #6
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4413      	add	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 80047dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	83bb      	strh	r3, [r7, #28]
 80047e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	fb03 f202 	mul.w	r2, r3, r2
 80047f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047f6:	6939      	ldr	r1, [r7, #16]
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	429a      	cmp	r2, r3
 80047fe:	dd84      	ble.n	800470a <LCD_Ellipse+0x38c>
}
 8004800:	bf00      	nop
 8004802:	3724      	adds	r7, #36	; 0x24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd90      	pop	{r4, r7, pc}

08004808 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af02      	add	r7, sp, #8
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4623      	mov	r3, r4
 8004818:	80fb      	strh	r3, [r7, #6]
 800481a:	4603      	mov	r3, r0
 800481c:	80bb      	strh	r3, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
 8004822:	4613      	mov	r3, r2
 8004824:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
	b_ = radius;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	f1c3 0301 	rsb	r3, r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004836:	e0fc      	b.n	8004a32 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004838:	78bb      	ldrb	r3, [r7, #2]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d136      	bne.n	80048ac <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	b29b      	uxth	r3, r3
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	b298      	uxth	r0, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	b29b      	uxth	r3, r3
 800484c:	88ba      	ldrh	r2, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b299      	uxth	r1, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	b29b      	uxth	r3, r3
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	b29b      	uxth	r3, r3
 800485a:	3301      	adds	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	b29b      	uxth	r3, r3
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	3301      	adds	r3, #1
 8004868:	b29c      	uxth	r4, r3
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4623      	mov	r3, r4
 8004870:	f7ff fb86 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	b29b      	uxth	r3, r3
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	b298      	uxth	r0, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	b29b      	uxth	r3, r3
 8004882:	88ba      	ldrh	r2, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	b299      	uxth	r1, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	b29b      	uxth	r3, r3
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	3301      	adds	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	b29b      	uxth	r3, r3
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	3301      	adds	r3, #1
 800489e:	b29c      	uxth	r4, r3
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4623      	mov	r3, r4
 80048a6:	f7ff fb6b 	bl	8003f80 <LCD_Rect_Fill>
 80048aa:	e0a7      	b.n	80049fc <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	4413      	add	r3, r2
 80048b4:	b298      	uxth	r0, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	88bb      	ldrh	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	b299      	uxth	r1, r3
 80048c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ca:	b29c      	uxth	r4, r3
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	4623      	mov	r3, r4
 80048d2:	f7ff fb55 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	b29a      	uxth	r2, r3
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	4413      	add	r3, r2
 80048de:	b298      	uxth	r0, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	88bb      	ldrh	r3, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	b299      	uxth	r1, r3
 80048ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4623      	mov	r3, r4
 80048fc:	f7ff fb40 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	b29b      	uxth	r3, r3
 8004904:	88fa      	ldrh	r2, [r7, #6]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	b298      	uxth	r0, r3
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	b29a      	uxth	r2, r3
 800490e:	88bb      	ldrh	r3, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	b299      	uxth	r1, r3
 8004914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004918:	b29a      	uxth	r2, r3
 800491a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800491e:	b29c      	uxth	r4, r3
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4623      	mov	r3, r4
 8004926:	f7ff fb2b 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	b29b      	uxth	r3, r3
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b298      	uxth	r0, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	b29a      	uxth	r2, r3
 8004938:	88bb      	ldrh	r3, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	b299      	uxth	r1, r3
 800493e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004942:	b29a      	uxth	r2, r3
 8004944:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004948:	b29c      	uxth	r4, r3
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4623      	mov	r3, r4
 8004950:	f7ff fb16 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	b29a      	uxth	r2, r3
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	4413      	add	r3, r2
 800495c:	b298      	uxth	r0, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	b29b      	uxth	r3, r3
 8004962:	88ba      	ldrh	r2, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b299      	uxth	r1, r3
 8004968:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800496c:	b29a      	uxth	r2, r3
 800496e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004972:	b29c      	uxth	r4, r3
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4623      	mov	r3, r4
 800497a:	f7ff fb01 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	b29a      	uxth	r2, r3
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	4413      	add	r3, r2
 8004986:	b298      	uxth	r0, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b29b      	uxth	r3, r3
 800498c:	88ba      	ldrh	r2, [r7, #4]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	b299      	uxth	r1, r3
 8004992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004996:	b29a      	uxth	r2, r3
 8004998:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499c:	b29c      	uxth	r4, r3
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4623      	mov	r3, r4
 80049a4:	f7ff faec 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	b298      	uxth	r0, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	88ba      	ldrh	r2, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	b299      	uxth	r1, r3
 80049bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c6:	b29c      	uxth	r4, r3
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4623      	mov	r3, r4
 80049ce:	f7ff fad7 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	b298      	uxth	r0, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	88ba      	ldrh	r2, [r7, #4]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	b299      	uxth	r1, r3
 80049e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f0:	b29c      	uxth	r4, r3
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4623      	mov	r3, r4
 80049f8:	f7ff fac2 	bl	8003f80 <LCD_Rect_Fill>
		}
		if (P < 0)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da09      	bge.n	8004a16 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1cda      	adds	r2, r3, #3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
			a_++;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3301      	adds	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e00d      	b.n	8004a32 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1d5a      	adds	r2, r3, #5
 8004a1a:	6979      	ldr	r1, [r7, #20]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1acb      	subs	r3, r1, r3
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
			a_++;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
			b_--;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f77f aefe 	ble.w	8004838 <LCD_Circle+0x30>
		}
	}
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd90      	pop	{r4, r7, pc}

08004a46 <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004a46:	b590      	push	{r4, r7, lr}
 8004a48:	b089      	sub	sp, #36	; 0x24
 8004a4a:	af02      	add	r7, sp, #8
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	4608      	mov	r0, r1
 8004a50:	4611      	mov	r1, r2
 8004a52:	461a      	mov	r2, r3
 8004a54:	4623      	mov	r3, r4
 8004a56:	80fb      	strh	r3, [r7, #6]
 8004a58:	4603      	mov	r3, r0
 8004a5a:	80bb      	strh	r3, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
 8004a60:	4613      	mov	r3, r2
 8004a62:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004a64:	887b      	ldrh	r3, [r7, #2]
 8004a66:	f1c3 0301 	rsb	r3, r3, #1
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	461a      	mov	r2, r3
 8004a76:	03d2      	lsls	r2, r2, #15
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004a88:	e0cd      	b.n	8004c26 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004a8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0e      	blt.n	8004ab0 <LCD_Circle_Helper+0x6a>
			y--;
 8004a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004a9e:	8a7b      	ldrh	r3, [r7, #18]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004aa6:	8afa      	ldrh	r2, [r7, #22]
 8004aa8:	8a7b      	ldrh	r3, [r7, #18]
 8004aaa:	4413      	add	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004ab0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004abc:	8abb      	ldrh	r3, [r7, #20]
 8004abe:	3302      	adds	r3, #2
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004ac4:	8afa      	ldrh	r2, [r7, #22]
 8004ac6:	8abb      	ldrh	r3, [r7, #20]
 8004ac8:	4413      	add	r3, r2
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004ace:	787b      	ldrb	r3, [r7, #1]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d025      	beq.n	8004b24 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004ad8:	88fa      	ldrh	r2, [r7, #6]
 8004ada:	8a3b      	ldrh	r3, [r7, #16]
 8004adc:	4413      	add	r3, r2
 8004ade:	b298      	uxth	r0, r3
 8004ae0:	88ba      	ldrh	r2, [r7, #4]
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b299      	uxth	r1, r3
 8004ae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004af2:	b29c      	uxth	r4, r3
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4623      	mov	r3, r4
 8004afa:	f7ff fa41 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	89fb      	ldrh	r3, [r7, #14]
 8004b02:	4413      	add	r3, r2
 8004b04:	b298      	uxth	r0, r3
 8004b06:	88ba      	ldrh	r2, [r7, #4]
 8004b08:	8a3b      	ldrh	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	b299      	uxth	r1, r3
 8004b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b18:	b29c      	uxth	r4, r3
 8004b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4623      	mov	r3, r4
 8004b20:	f7ff fa2e 	bl	8003f80 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004b24:	787b      	ldrb	r3, [r7, #1]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d025      	beq.n	8004b7a <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	8a3b      	ldrh	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	b298      	uxth	r0, r3
 8004b36:	88ba      	ldrh	r2, [r7, #4]
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	b299      	uxth	r1, r3
 8004b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b48:	b29c      	uxth	r4, r3
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4623      	mov	r3, r4
 8004b50:	f7ff fa16 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	89fb      	ldrh	r3, [r7, #14]
 8004b58:	4413      	add	r3, r2
 8004b5a:	b298      	uxth	r0, r3
 8004b5c:	88ba      	ldrh	r2, [r7, #4]
 8004b5e:	8a3b      	ldrh	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	b299      	uxth	r1, r3
 8004b64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b6e:	b29c      	uxth	r4, r3
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4623      	mov	r3, r4
 8004b76:	f7ff fa03 	bl	8003f80 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004b7a:	787b      	ldrb	r3, [r7, #1]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d025      	beq.n	8004bd0 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	89fb      	ldrh	r3, [r7, #14]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b298      	uxth	r0, r3
 8004b8c:	88ba      	ldrh	r2, [r7, #4]
 8004b8e:	8a3b      	ldrh	r3, [r7, #16]
 8004b90:	4413      	add	r3, r2
 8004b92:	b299      	uxth	r1, r3
 8004b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b9e:	b29c      	uxth	r4, r3
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	f7ff f9eb 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	8a3b      	ldrh	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b298      	uxth	r0, r3
 8004bb2:	88ba      	ldrh	r2, [r7, #4]
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	b299      	uxth	r1, r3
 8004bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc4:	b29c      	uxth	r4, r3
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4623      	mov	r3, r4
 8004bcc:	f7ff f9d8 	bl	8003f80 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004bd0:	787b      	ldrb	r3, [r7, #1]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d025      	beq.n	8004c26 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	b298      	uxth	r0, r3
 8004be2:	88ba      	ldrh	r2, [r7, #4]
 8004be4:	8a3b      	ldrh	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	b299      	uxth	r1, r3
 8004bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bf4:	b29c      	uxth	r4, r3
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	f7ff f9c0 	bl	8003f80 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	8a3b      	ldrh	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	b298      	uxth	r0, r3
 8004c08:	88ba      	ldrh	r2, [r7, #4]
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	b299      	uxth	r1, r3
 8004c10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1a:	b29c      	uxth	r4, r3
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4623      	mov	r3, r4
 8004c22:	f7ff f9ad 	bl	8003f80 <LCD_Rect_Fill>
	while (x < y) {
 8004c26:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f6ff af2b 	blt.w	8004a8a <LCD_Circle_Helper+0x44>
		}
	}
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd90      	pop	{r4, r7, pc}

08004c3e <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004c3e:	b590      	push	{r4, r7, lr}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af02      	add	r7, sp, #8
 8004c44:	4604      	mov	r4, r0
 8004c46:	4608      	mov	r0, r1
 8004c48:	4611      	mov	r1, r2
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	80fb      	strh	r3, [r7, #6]
 8004c50:	4603      	mov	r3, r0
 8004c52:	80bb      	strh	r3, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004c5c:	8b3a      	ldrh	r2, [r7, #24]
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	4413      	add	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3302      	adds	r3, #2
 8004c66:	b298      	uxth	r0, r3
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	7f3b      	ldrb	r3, [r7, #28]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	8b3b      	ldrh	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b02      	subs	r3, #2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	88bc      	ldrh	r4, [r7, #4]
 8004c84:	88b9      	ldrh	r1, [r7, #4]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	7f3b      	ldrb	r3, [r7, #28]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	4623      	mov	r3, r4
 8004c90:	f7ff f9b4 	bl	8003ffc <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004c94:	8b3a      	ldrh	r2, [r7, #24]
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	4413      	add	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	b298      	uxth	r0, r3
 8004ca0:	88ba      	ldrh	r2, [r7, #4]
 8004ca2:	883b      	ldrh	r3, [r7, #0]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b299      	uxth	r1, r3
 8004cac:	88fa      	ldrh	r2, [r7, #6]
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	7f3b      	ldrb	r3, [r7, #28]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	8b3b      	ldrh	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b02      	subs	r3, #2
 8004cc4:	b29c      	uxth	r4, r3
 8004cc6:	88ba      	ldrh	r2, [r7, #4]
 8004cc8:	883b      	ldrh	r3, [r7, #0]
 8004cca:	4413      	add	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	7f3b      	ldrb	r3, [r7, #28]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	4622      	mov	r2, r4
 8004cde:	f7ff f98d 	bl	8003ffc <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8004ce2:	8b3a      	ldrh	r2, [r7, #24]
 8004ce4:	88bb      	ldrh	r3, [r7, #4]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3302      	adds	r3, #2
 8004cec:	b299      	uxth	r1, r3
 8004cee:	88ba      	ldrh	r2, [r7, #4]
 8004cf0:	883b      	ldrh	r3, [r7, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	7f3b      	ldrb	r3, [r7, #28]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	8b3b      	ldrh	r3, [r7, #24]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b02      	subs	r3, #2
 8004d06:	b29c      	uxth	r4, r3
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	88f8      	ldrh	r0, [r7, #6]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	7f3b      	ldrb	r3, [r7, #28]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4623      	mov	r3, r4
 8004d16:	f7ff f971 	bl	8003ffc <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	4413      	add	r3, r2
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b298      	uxth	r0, r3
 8004d26:	8b3a      	ldrh	r2, [r7, #24]
 8004d28:	88bb      	ldrh	r3, [r7, #4]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3302      	adds	r3, #2
 8004d30:	b299      	uxth	r1, r3
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	887b      	ldrh	r3, [r7, #2]
 8004d36:	4413      	add	r3, r2
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29c      	uxth	r4, r3
 8004d3e:	88ba      	ldrh	r2, [r7, #4]
 8004d40:	883b      	ldrh	r3, [r7, #0]
 8004d42:	4413      	add	r3, r2
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	7f3b      	ldrb	r3, [r7, #28]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	8b3b      	ldrh	r3, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b02      	subs	r3, #2
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	7f3b      	ldrb	r3, [r7, #28]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	4622      	mov	r2, r4
 8004d64:	f7ff f94a 	bl	8003ffc <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8004d68:	8b3a      	ldrh	r2, [r7, #24]
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3302      	adds	r3, #2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	b218      	sxth	r0, r3
 8004d76:	8b3a      	ldrh	r2, [r7, #24]
 8004d78:	88bb      	ldrh	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3302      	adds	r3, #2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	b219      	sxth	r1, r3
 8004d84:	8b3b      	ldrh	r3, [r7, #24]
 8004d86:	3302      	adds	r3, #2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b21a      	sxth	r2, r3
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	7f3b      	ldrb	r3, [r7, #28]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	2301      	movs	r3, #1
 8004d96:	f7ff fe56 	bl	8004a46 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	4413      	add	r3, r2
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	8b3b      	ldrh	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b03      	subs	r3, #3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b218      	sxth	r0, r3
 8004dae:	8b3a      	ldrh	r2, [r7, #24]
 8004db0:	88bb      	ldrh	r3, [r7, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3302      	adds	r3, #2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b219      	sxth	r1, r3
 8004dbc:	8b3b      	ldrh	r3, [r7, #24]
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	b21a      	sxth	r2, r3
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	7f3b      	ldrb	r3, [r7, #28]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2302      	movs	r3, #2
 8004dce:	f7ff fe3a 	bl	8004a46 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	887b      	ldrh	r3, [r7, #2]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	8b3b      	ldrh	r3, [r7, #24]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b03      	subs	r3, #3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	b218      	sxth	r0, r3
 8004de6:	88ba      	ldrh	r2, [r7, #4]
 8004de8:	883b      	ldrh	r3, [r7, #0]
 8004dea:	4413      	add	r3, r2
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	8b3b      	ldrh	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b03      	subs	r3, #3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	b219      	sxth	r1, r3
 8004dfa:	8b3b      	ldrh	r3, [r7, #24]
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	b21a      	sxth	r2, r3
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	7f3b      	ldrb	r3, [r7, #28]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	f7ff fe1b 	bl	8004a46 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8004e10:	8b3a      	ldrh	r2, [r7, #24]
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	4413      	add	r3, r2
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3302      	adds	r3, #2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	b218      	sxth	r0, r3
 8004e1e:	88ba      	ldrh	r2, [r7, #4]
 8004e20:	883b      	ldrh	r3, [r7, #0]
 8004e22:	4413      	add	r3, r2
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	8b3b      	ldrh	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b03      	subs	r3, #3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	b219      	sxth	r1, r3
 8004e32:	8b3b      	ldrh	r3, [r7, #24]
 8004e34:	3302      	adds	r3, #2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	b21a      	sxth	r2, r3
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	7f3b      	ldrb	r3, [r7, #28]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2308      	movs	r3, #8
 8004e44:	f7ff fdff 	bl	8004a46 <LCD_Circle_Helper>
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}

08004e50 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	80fb      	strh	r3, [r7, #6]
 8004e62:	4603      	mov	r3, r0
 8004e64:	80bb      	strh	r3, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	807b      	strh	r3, [r7, #2]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	f1c3 0301 	rsb	r3, r3, #1
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004e7c:	887b      	ldrh	r3, [r7, #2]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	03d2      	lsls	r2, r2, #15
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004e8e:	887b      	ldrh	r3, [r7, #2]
 8004e90:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004e92:	e0ab      	b.n	8004fec <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8004e94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db0e      	blt.n	8004eba <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8004e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	3302      	adds	r3, #2
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004eb0:	8afa      	ldrh	r2, [r7, #22]
 8004eb2:	8a7b      	ldrh	r3, [r7, #18]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004eba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004ec6:	8abb      	ldrh	r3, [r7, #20]
 8004ec8:	3302      	adds	r3, #2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004ece:	8afa      	ldrh	r2, [r7, #22]
 8004ed0:	8abb      	ldrh	r3, [r7, #20]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8004ed8:	787b      	ldrb	r3, [r7, #1]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03f      	beq.n	8004f62 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	8a3b      	ldrh	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	b298      	uxth	r0, r3
 8004eea:	88ba      	ldrh	r2, [r7, #4]
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	b299      	uxth	r1, r3
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	8a3b      	ldrh	r3, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	b29c      	uxth	r4, r3
 8004efa:	88ba      	ldrh	r2, [r7, #4]
 8004efc:	89fb      	ldrh	r3, [r7, #14]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f0e:	4413      	add	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	2301      	movs	r3, #1
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	f7ff f86d 	bl	8003ffc <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	89fb      	ldrh	r3, [r7, #14]
 8004f26:	4413      	add	r3, r2
 8004f28:	b298      	uxth	r0, r3
 8004f2a:	88ba      	ldrh	r2, [r7, #4]
 8004f2c:	8a3b      	ldrh	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	b299      	uxth	r1, r3
 8004f32:	88fa      	ldrh	r2, [r7, #6]
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	4413      	add	r3, r2
 8004f38:	b29c      	uxth	r4, r3
 8004f3a:	88ba      	ldrh	r2, [r7, #4]
 8004f3c:	8a3b      	ldrh	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	8a3b      	ldrh	r3, [r7, #16]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f4e:	4413      	add	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	2301      	movs	r3, #1
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	f7ff f84d 	bl	8003ffc <LCD_Line>
		}
		if (cornername & 0x2) {
 8004f62:	787b      	ldrb	r3, [r7, #1]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03f      	beq.n	8004fec <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	8a3b      	ldrh	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	b298      	uxth	r0, r3
 8004f74:	88ba      	ldrh	r2, [r7, #4]
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	b299      	uxth	r1, r3
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	8a3b      	ldrh	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	b29c      	uxth	r4, r3
 8004f84:	88ba      	ldrh	r2, [r7, #4]
 8004f86:	89fb      	ldrh	r3, [r7, #14]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f98:	4413      	add	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	f7ff f828 	bl	8003ffc <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8004fac:	88fa      	ldrh	r2, [r7, #6]
 8004fae:	89fb      	ldrh	r3, [r7, #14]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b298      	uxth	r0, r3
 8004fb4:	88ba      	ldrh	r2, [r7, #4]
 8004fb6:	8a3b      	ldrh	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	b299      	uxth	r1, r3
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	b29c      	uxth	r4, r3
 8004fc4:	88ba      	ldrh	r2, [r7, #4]
 8004fc6:	8a3b      	ldrh	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	8a3b      	ldrh	r3, [r7, #16]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fd8:	4413      	add	r3, r2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	f7ff f808 	bl	8003ffc <LCD_Line>
	while (x < y) {
 8004fec:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ff0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	f6ff af4d 	blt.w	8004e94 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	371c      	adds	r7, #28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}

08005004 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b085      	sub	sp, #20
 8005008:	af02      	add	r7, sp, #8
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	461a      	mov	r2, r3
 8005012:	4623      	mov	r3, r4
 8005014:	80fb      	strh	r3, [r7, #6]
 8005016:	4603      	mov	r3, r0
 8005018:	80bb      	strh	r3, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	807b      	strh	r3, [r7, #2]
 800501e:	4613      	mov	r3, r2
 8005020:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	8b3b      	ldrh	r3, [r7, #24]
 8005026:	4413      	add	r3, r2
 8005028:	b298      	uxth	r0, r3
 800502a:	8b3b      	ldrh	r3, [r7, #24]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	b29b      	uxth	r3, r3
 8005030:	887a      	ldrh	r2, [r7, #2]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	b29a      	uxth	r2, r3
 8005036:	883c      	ldrh	r4, [r7, #0]
 8005038:	88b9      	ldrh	r1, [r7, #4]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4623      	mov	r3, r4
 8005040:	f7fe ff9e 	bl	8003f80 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	4413      	add	r3, r2
 800504a:	b29a      	uxth	r2, r3
 800504c:	8b3b      	ldrh	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	b218      	sxth	r0, r3
 8005058:	88ba      	ldrh	r2, [r7, #4]
 800505a:	8b3b      	ldrh	r3, [r7, #24]
 800505c:	4413      	add	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	b219      	sxth	r1, r3
 8005062:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8005066:	8b3b      	ldrh	r3, [r7, #24]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	b29b      	uxth	r3, r3
 800506c:	883a      	ldrh	r2, [r7, #0]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29b      	uxth	r3, r3
 8005076:	b21b      	sxth	r3, r3
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	9201      	str	r2, [sp, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2301      	movs	r3, #1
 8005080:	4622      	mov	r2, r4
 8005082:	f7ff fee5 	bl	8004e50 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	8b3b      	ldrh	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	b218      	sxth	r0, r3
 8005090:	88ba      	ldrh	r2, [r7, #4]
 8005092:	8b3b      	ldrh	r3, [r7, #24]
 8005094:	4413      	add	r3, r2
 8005096:	b29b      	uxth	r3, r3
 8005098:	b219      	sxth	r1, r3
 800509a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800509e:	8b3b      	ldrh	r3, [r7, #24]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	883a      	ldrh	r2, [r7, #0]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	9201      	str	r2, [sp, #4]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2302      	movs	r3, #2
 80050b8:	4622      	mov	r2, r4
 80050ba:	f7ff fec9 	bl	8004e50 <LCD_Circle_Fill_Helper>
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}

080050c6 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80050c6:	b590      	push	{r4, r7, lr}
 80050c8:	b08b      	sub	sp, #44	; 0x2c
 80050ca:	af02      	add	r7, sp, #8
 80050cc:	60ba      	str	r2, [r7, #8]
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	4603      	mov	r3, r0
 80050d2:	81fb      	strh	r3, [r7, #14]
 80050d4:	460b      	mov	r3, r1
 80050d6:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	777b      	strb	r3, [r7, #29]
 80050e8:	2300      	movs	r3, #0
 80050ea:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80050f0:	2300      	movs	r3, #0
 80050f2:	763b      	strb	r3, [r7, #24]
 80050f4:	e093      	b.n	800521e <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	767b      	strb	r3, [r7, #25]
 80050fa:	e052      	b.n	80051a2 <LCD_Char+0xdc>
		{
			if(bit == 0)
 80050fc:	7f3b      	ldrb	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005102:	8bfb      	ldrh	r3, [r7, #30]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	83fa      	strh	r2, [r7, #30]
 8005108:	461a      	mov	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4413      	add	r3, r2
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8005116:	7f7a      	ldrb	r2, [r7, #29]
 8005118:	7f3b      	ldrb	r3, [r7, #28]
 800511a:	4013      	ands	r3, r2
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <LCD_Char+0x64>
			{
				set_pixels++;
 8005122:	8b7b      	ldrh	r3, [r7, #26]
 8005124:	3301      	adds	r3, #1
 8005126:	837b      	strh	r3, [r7, #26]
 8005128:	e035      	b.n	8005196 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 800512a:	8b7b      	ldrh	r3, [r7, #26]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d032      	beq.n	8005196 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005136:	461a      	mov	r2, r3
 8005138:	7e7b      	ldrb	r3, [r7, #25]
 800513a:	441a      	add	r2, r3
 800513c:	8b7b      	ldrh	r3, [r7, #26]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29a      	uxth	r2, r3
 8005142:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005146:	b29b      	uxth	r3, r3
 8005148:	fb12 f303 	smulbb	r3, r2, r3
 800514c:	b29a      	uxth	r2, r3
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	4413      	add	r3, r2
 8005152:	b298      	uxth	r0, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800515a:	461a      	mov	r2, r3
 800515c:	7e3b      	ldrb	r3, [r7, #24]
 800515e:	4413      	add	r3, r2
 8005160:	b29a      	uxth	r2, r3
 8005162:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005166:	b29b      	uxth	r3, r3
 8005168:	fb12 f303 	smulbb	r3, r2, r3
 800516c:	b29a      	uxth	r2, r3
 800516e:	89bb      	ldrh	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	b299      	uxth	r1, r3
 8005174:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005178:	b29b      	uxth	r3, r3
 800517a:	8b7a      	ldrh	r2, [r7, #26]
 800517c:	fb12 f303 	smulbb	r3, r2, r3
 8005180:	b29a      	uxth	r2, r3
 8005182:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005186:	b29c      	uxth	r4, r3
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4623      	mov	r3, r4
 800518e:	f7fe fef7 	bl	8003f80 <LCD_Rect_Fill>
				set_pixels = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8005196:	7f3b      	ldrb	r3, [r7, #28]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800519c:	7e7b      	ldrb	r3, [r7, #25]
 800519e:	3301      	adds	r3, #1
 80051a0:	767b      	strb	r3, [r7, #25]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	789b      	ldrb	r3, [r3, #2]
 80051a6:	7e7a      	ldrb	r2, [r7, #25]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d3a7      	bcc.n	80050fc <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80051ac:	8b7b      	ldrh	r3, [r7, #26]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d032      	beq.n	8005218 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80051b8:	461a      	mov	r2, r3
 80051ba:	7e7b      	ldrb	r3, [r7, #25]
 80051bc:	441a      	add	r2, r3
 80051be:	8b7b      	ldrh	r3, [r7, #26]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	fb12 f303 	smulbb	r3, r2, r3
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	4413      	add	r3, r2
 80051d4:	b298      	uxth	r0, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80051dc:	461a      	mov	r2, r3
 80051de:	7e3b      	ldrb	r3, [r7, #24]
 80051e0:	4413      	add	r3, r2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	fb12 f303 	smulbb	r3, r2, r3
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	89bb      	ldrh	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	b299      	uxth	r1, r3
 80051f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	8b7a      	ldrh	r2, [r7, #26]
 80051fe:	fb12 f303 	smulbb	r3, r2, r3
 8005202:	b29a      	uxth	r2, r3
 8005204:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005208:	b29c      	uxth	r4, r3
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	4623      	mov	r3, r4
 8005210:	f7fe feb6 	bl	8003f80 <LCD_Rect_Fill>
			set_pixels = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005218:	7e3b      	ldrb	r3, [r7, #24]
 800521a:	3301      	adds	r3, #1
 800521c:	763b      	strb	r3, [r7, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	78db      	ldrb	r3, [r3, #3]
 8005222:	7e3a      	ldrb	r2, [r7, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	f4ff af66 	bcc.w	80050f6 <LCD_Char+0x30>
		}
	}
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	3724      	adds	r7, #36	; 0x24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}

08005234 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b08f      	sub	sp, #60	; 0x3c
 8005238:	af02      	add	r7, sp, #8
 800523a:	60ba      	str	r2, [r7, #8]
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	4603      	mov	r3, r0
 8005240:	81fb      	strh	r3, [r7, #14]
 8005242:	460b      	mov	r3, r1
 8005244:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 800524a:	89bb      	ldrh	r3, [r7, #12]
 800524c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 800524e:	f107 031c 	add.w	r3, r7, #28
 8005252:	220c      	movs	r2, #12
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	f017 fe0e 	bl	801ce78 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800525c:	2300      	movs	r3, #0
 800525e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005260:	e056      	b.n	8005310 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8005262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4413      	add	r3, r2
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 800526e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005272:	2b0a      	cmp	r3, #10
 8005274:	d10f      	bne.n	8005296 <LCD_Font+0x62>
		{
			cursor_x = x;
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800527a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800527e:	b29a      	uxth	r2, r3
 8005280:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005284:	b29b      	uxth	r3, r3
 8005286:	fb12 f303 	smulbb	r3, r2, r3
 800528a:	b29a      	uxth	r2, r3
 800528c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800528e:	4413      	add	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005294:	e039      	b.n	800530a <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800529a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800529e:	429a      	cmp	r2, r3
 80052a0:	d333      	bcc.n	800530a <LCD_Font+0xd6>
 80052a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052a6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d82d      	bhi.n	800530a <LCD_Font+0xd6>
 80052ae:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052b2:	2b0d      	cmp	r3, #13
 80052b4:	d029      	beq.n	800530a <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052bc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80052c0:	1a5b      	subs	r3, r3, r1
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	18d1      	adds	r1, r2, r3
 80052c6:	f107 0314 	add.w	r3, r7, #20
 80052ca:	2208      	movs	r2, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f017 fdd3 	bl	801ce78 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052d2:	f107 041c 	add.w	r4, r7, #28
 80052d6:	f107 0214 	add.w	r2, r7, #20
 80052da:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80052de:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80052e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	4623      	mov	r3, r4
 80052ee:	f7ff feea 	bl	80050c6 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80052f2:	7e3b      	ldrb	r3, [r7, #24]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	fb12 f303 	smulbb	r3, r2, r3
 8005300:	b29a      	uxth	r2, r3
 8005302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005304:	4413      	add	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800530a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800530c:	3301      	adds	r3, #1
 800530e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005310:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005312:	68b8      	ldr	r0, [r7, #8]
 8005314:	f013 fed6 	bl	80190c4 <strlen>
 8005318:	4603      	mov	r3, r0
 800531a:	429c      	cmp	r4, r3
 800531c:	d3a1      	bcc.n	8005262 <LCD_Font+0x2e>
		}
	}
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	3734      	adds	r7, #52	; 0x34
 8005324:	46bd      	mov	sp, r7
 8005326:	bd90      	pop	{r4, r7, pc}

08005328 <LCD_Init>:

void LCD_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 800532c:	2096      	movs	r0, #150	; 0x96
 800532e:	f001 fe3d 	bl	8006fac <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 8005332:	2001      	movs	r0, #1
 8005334:	f7fe fd95 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 8005338:	2029      	movs	r0, #41	; 0x29
 800533a:	f7fe fd92 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 800533e:	20e2      	movs	r0, #226	; 0xe2
 8005340:	f7fe fd8f 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 8005344:	201d      	movs	r0, #29
 8005346:	f7fe fd9b 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 800534a:	2002      	movs	r0, #2
 800534c:	f7fe fd98 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 8005350:	20ff      	movs	r0, #255	; 0xff
 8005352:	f7fe fd95 	bl	8003e80 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 8005356:	20e0      	movs	r0, #224	; 0xe0
 8005358:	f7fe fd83 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 800535c:	2001      	movs	r0, #1
 800535e:	f7fe fd8f 	bl	8003e80 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 8005362:	2078      	movs	r0, #120	; 0x78
 8005364:	f001 fe22 	bl	8006fac <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 8005368:	20e0      	movs	r0, #224	; 0xe0
 800536a:	f7fe fd7a 	bl	8003e62 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 800536e:	2003      	movs	r0, #3
 8005370:	f7fe fd86 	bl	8003e80 <LCD_Send_Dat>
	HAL_Delay(120);
 8005374:	2078      	movs	r0, #120	; 0x78
 8005376:	f001 fe19 	bl	8006fac <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 800537a:	2001      	movs	r0, #1
 800537c:	f7fe fd71 	bl	8003e62 <LCD_Send_Cmd>
	HAL_Delay(120);
 8005380:	2078      	movs	r0, #120	; 0x78
 8005382:	f001 fe13 	bl	8006fac <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8005386:	20e6      	movs	r0, #230	; 0xe6
 8005388:	f7fe fd6b 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 800538c:	2003      	movs	r0, #3
 800538e:	f7fe fd77 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 8005392:	2085      	movs	r0, #133	; 0x85
 8005394:	f7fe fd74 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005398:	201d      	movs	r0, #29
 800539a:	f7fe fd71 	bl	8003e80 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800539e:	20b0      	movs	r0, #176	; 0xb0
 80053a0:	f7fe fd5f 	bl	8003e62 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80053a4:	20ae      	movs	r0, #174	; 0xae
 80053a6:	f7fe fd6b 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80053aa:	2020      	movs	r0, #32
 80053ac:	f7fe fd68 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 80053b0:	2003      	movs	r0, #3
 80053b2:	f7fe fd65 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 80053b6:	201f      	movs	r0, #31
 80053b8:	f7fe fd62 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 80053bc:	2001      	movs	r0, #1
 80053be:	f7fe fd5f 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 80053c2:	20df      	movs	r0, #223	; 0xdf
 80053c4:	f7fe fd5c 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 80053c8:	202d      	movs	r0, #45	; 0x2d
 80053ca:	f7fe fd59 	bl	8003e80 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 80053ce:	20b4      	movs	r0, #180	; 0xb4
 80053d0:	f7fe fd47 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 80053d4:	2003      	movs	r0, #3
 80053d6:	f7fe fd53 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 80053da:	20a0      	movs	r0, #160	; 0xa0
 80053dc:	f7fe fd50 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7fe fd4d 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 80053e6:	202e      	movs	r0, #46	; 0x2e
 80053e8:	f7fe fd4a 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 80053ec:	2030      	movs	r0, #48	; 0x30
 80053ee:	f7fe fd47 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 80053f2:	2000      	movs	r0, #0
 80053f4:	f7fe fd44 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 80053f8:	200f      	movs	r0, #15
 80053fa:	f7fe fd41 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fe fd3e 	bl	8003e80 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005404:	20b6      	movs	r0, #182	; 0xb6
 8005406:	f7fe fd2c 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 800540a:	2002      	movs	r0, #2
 800540c:	f7fe fd38 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8005410:	200d      	movs	r0, #13
 8005412:	f7fe fd35 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8005416:	2000      	movs	r0, #0
 8005418:	f7fe fd32 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 800541c:	2010      	movs	r0, #16
 800541e:	f7fe fd2f 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 8005422:	2010      	movs	r0, #16
 8005424:	f7fe fd2c 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8005428:	2008      	movs	r0, #8
 800542a:	f7fe fd29 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 800542e:	2000      	movs	r0, #0
 8005430:	f7fe fd26 	bl	8003e80 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 8005434:	20be      	movs	r0, #190	; 0xbe
 8005436:	f7fe fd14 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 800543a:	2008      	movs	r0, #8
 800543c:	f7fe fd20 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8005440:	20ff      	movs	r0, #255	; 0xff
 8005442:	f7fe fd1d 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 8005446:	2001      	movs	r0, #1
 8005448:	f7fe fd1a 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 800544c:	2036      	movs	r0, #54	; 0x36
 800544e:	f7fe fd08 	bl	8003e62 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 8005452:	2003      	movs	r0, #3
 8005454:	f7fe fd14 	bl	8003e80 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 8005458:	20f0      	movs	r0, #240	; 0xf0
 800545a:	f7fe fd02 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 800545e:	2003      	movs	r0, #3
 8005460:	f7fe fd0e 	bl	8003e80 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 8005464:	2029      	movs	r0, #41	; 0x29
 8005466:	f7fe fcfc 	bl	8003e62 <LCD_Send_Cmd>
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}

0800546e <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	4603      	mov	r3, r0
 8005476:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 8005478:	20be      	movs	r0, #190	; 0xbe
 800547a:	f7fe fcf2 	bl	8003e62 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 800547e:	2008      	movs	r0, #8
 8005480:	f7fe fcfe 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	b29b      	uxth	r3, r3
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fcf9 	bl	8003e80 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 800548e:	2001      	movs	r0, #1
 8005490:	f7fe fcf6 	bl	8003e80 <LCD_Send_Dat>
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <HAL_MspInit+0x4c>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	4a0f      	ldr	r2, [pc, #60]	; (80054e8 <HAL_MspInit+0x4c>)
 80054ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b0:	6453      	str	r3, [r2, #68]	; 0x44
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <HAL_MspInit+0x4c>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_MspInit+0x4c>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <HAL_MspInit+0x4c>)
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6413      	str	r3, [r2, #64]	; 0x40
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_MspInit+0x4c>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800

080054ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a17      	ldr	r2, [pc, #92]	; (8005568 <HAL_DAC_MspInit+0x7c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d127      	bne.n	800555e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	4b16      	ldr	r3, [pc, #88]	; (800556c <HAL_DAC_MspInit+0x80>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <HAL_DAC_MspInit+0x80>)
 8005518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800551c:	6413      	str	r3, [r2, #64]	; 0x40
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_DAC_MspInit+0x80>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <HAL_DAC_MspInit+0x80>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4a0e      	ldr	r2, [pc, #56]	; (800556c <HAL_DAC_MspInit+0x80>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6313      	str	r3, [r2, #48]	; 0x30
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <HAL_DAC_MspInit+0x80>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005546:	2330      	movs	r3, #48	; 0x30
 8005548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800554a:	2303      	movs	r3, #3
 800554c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	4619      	mov	r1, r3
 8005558:	4805      	ldr	r0, [pc, #20]	; (8005570 <HAL_DAC_MspInit+0x84>)
 800555a:	f005 fe43 	bl	800b1e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800555e:	bf00      	nop
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40007400 	.word	0x40007400
 800556c:	40023800 	.word	0x40023800
 8005570:	40020000 	.word	0x40020000

08005574 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <HAL_DAC_MspDeInit+0x30>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d109      	bne.n	800559a <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_DAC_MspDeInit+0x34>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_DAC_MspDeInit+0x34>)
 800558c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005590:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8005592:	2130      	movs	r1, #48	; 0x30
 8005594:	4805      	ldr	r0, [pc, #20]	; (80055ac <HAL_DAC_MspDeInit+0x38>)
 8005596:	f005 ffc1 	bl	800b51c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40007400 	.word	0x40007400
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40020000 	.word	0x40020000

080055b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <HAL_I2C_MspInit+0xa4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d13b      	bne.n	800564a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_I2C_MspInit+0xa8>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <HAL_I2C_MspInit+0xa8>)
 80055dc:	f043 0302 	orr.w	r3, r3, #2
 80055e0:	6313      	str	r3, [r2, #48]	; 0x30
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <HAL_I2C_MspInit+0xa8>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055ee:	23c0      	movs	r3, #192	; 0xc0
 80055f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055f2:	2312      	movs	r3, #18
 80055f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fa:	2303      	movs	r3, #3
 80055fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80055fe:	2304      	movs	r3, #4
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005602:	f107 0314 	add.w	r3, r7, #20
 8005606:	4619      	mov	r1, r3
 8005608:	4814      	ldr	r0, [pc, #80]	; (800565c <HAL_I2C_MspInit+0xac>)
 800560a:	f005 fdeb 	bl	800b1e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <HAL_I2C_MspInit+0xa8>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	4a10      	ldr	r2, [pc, #64]	; (8005658 <HAL_I2C_MspInit+0xa8>)
 8005618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800561c:	6413      	str	r3, [r2, #64]	; 0x40
 800561e:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <HAL_I2C_MspInit+0xa8>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800562a:	2200      	movs	r2, #0
 800562c:	2100      	movs	r1, #0
 800562e:	201f      	movs	r0, #31
 8005630:	f001 ffb3 	bl	800759a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005634:	201f      	movs	r0, #31
 8005636:	f001 ffcc 	bl	80075d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	2020      	movs	r0, #32
 8005640:	f001 ffab 	bl	800759a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005644:	2020      	movs	r0, #32
 8005646:	f001 ffc4 	bl	80075d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800564a:	bf00      	nop
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40005400 	.word	0x40005400
 8005658:	40023800 	.word	0x40023800
 800565c:	40020400 	.word	0x40020400

08005660 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <HAL_I2C_MspDeInit+0x44>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d113      	bne.n	800569a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <HAL_I2C_MspDeInit+0x48>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a0c      	ldr	r2, [pc, #48]	; (80056a8 <HAL_I2C_MspDeInit+0x48>)
 8005678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800567e:	2140      	movs	r1, #64	; 0x40
 8005680:	480a      	ldr	r0, [pc, #40]	; (80056ac <HAL_I2C_MspDeInit+0x4c>)
 8005682:	f005 ff4b 	bl	800b51c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005686:	2180      	movs	r1, #128	; 0x80
 8005688:	4808      	ldr	r0, [pc, #32]	; (80056ac <HAL_I2C_MspDeInit+0x4c>)
 800568a:	f005 ff47 	bl	800b51c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800568e:	201f      	movs	r0, #31
 8005690:	f001 ffad 	bl	80075ee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005694:	2020      	movs	r0, #32
 8005696:	f001 ffaa 	bl	80075ee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40005400 	.word	0x40005400
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40020400 	.word	0x40020400

080056b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a89      	ldr	r2, [pc, #548]	; (80058f4 <HAL_SPI_MspInit+0x244>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d12c      	bne.n	800572c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	4a87      	ldr	r2, [pc, #540]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 80056dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056e0:	6453      	str	r3, [r2, #68]	; 0x44
 80056e2:	4b85      	ldr	r3, [pc, #532]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b81      	ldr	r3, [pc, #516]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	4a80      	ldr	r2, [pc, #512]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	6313      	str	r3, [r2, #48]	; 0x30
 80056fe:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800570a:	2338      	movs	r3, #56	; 0x38
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570e:	2302      	movs	r3, #2
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005712:	2300      	movs	r3, #0
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005716:	2303      	movs	r3, #3
 8005718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800571a:	2305      	movs	r3, #5
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005722:	4619      	mov	r1, r3
 8005724:	4875      	ldr	r0, [pc, #468]	; (80058fc <HAL_SPI_MspInit+0x24c>)
 8005726:	f005 fd5d 	bl	800b1e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800572a:	e0de      	b.n	80058ea <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a73      	ldr	r2, [pc, #460]	; (8005900 <HAL_SPI_MspInit+0x250>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f040 8088 	bne.w	8005848 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	4b6e      	ldr	r3, [pc, #440]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	4a6d      	ldr	r2, [pc, #436]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005746:	6413      	str	r3, [r2, #64]	; 0x40
 8005748:	4b6b      	ldr	r3, [pc, #428]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	4b67      	ldr	r3, [pc, #412]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	4a66      	ldr	r2, [pc, #408]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	6313      	str	r3, [r2, #48]	; 0x30
 8005764:	4b64      	ldr	r3, [pc, #400]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005770:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005776:	2302      	movs	r3, #2
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	2300      	movs	r3, #0
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2303      	movs	r3, #3
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005782:	2305      	movs	r3, #5
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578a:	4619      	mov	r1, r3
 800578c:	485b      	ldr	r0, [pc, #364]	; (80058fc <HAL_SPI_MspInit+0x24c>)
 800578e:	f005 fd29 	bl	800b1e4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005792:	4b5c      	ldr	r3, [pc, #368]	; (8005904 <HAL_SPI_MspInit+0x254>)
 8005794:	4a5c      	ldr	r2, [pc, #368]	; (8005908 <HAL_SPI_MspInit+0x258>)
 8005796:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005798:	4b5a      	ldr	r3, [pc, #360]	; (8005904 <HAL_SPI_MspInit+0x254>)
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800579e:	4b59      	ldr	r3, [pc, #356]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057a0:	2240      	movs	r2, #64	; 0x40
 80057a2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057a4:	4b57      	ldr	r3, [pc, #348]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057aa:	4b56      	ldr	r3, [pc, #344]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057b2:	4b54      	ldr	r3, [pc, #336]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057b8:	4b52      	ldr	r3, [pc, #328]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80057be:	4b51      	ldr	r3, [pc, #324]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057c4:	4b4f      	ldr	r3, [pc, #316]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057ca:	4b4e      	ldr	r3, [pc, #312]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80057d0:	484c      	ldr	r0, [pc, #304]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057d2:	f002 fcc1 	bl	8008158 <HAL_DMA_Init>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 80057dc:	f7fe fae8 	bl	8003db0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a48      	ldr	r2, [pc, #288]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057e4:	649a      	str	r2, [r3, #72]	; 0x48
 80057e6:	4a47      	ldr	r2, [pc, #284]	; (8005904 <HAL_SPI_MspInit+0x254>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80057ec:	4b47      	ldr	r3, [pc, #284]	; (800590c <HAL_SPI_MspInit+0x25c>)
 80057ee:	4a48      	ldr	r2, [pc, #288]	; (8005910 <HAL_SPI_MspInit+0x260>)
 80057f0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80057f2:	4b46      	ldr	r3, [pc, #280]	; (800590c <HAL_SPI_MspInit+0x25c>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057f8:	4b44      	ldr	r3, [pc, #272]	; (800590c <HAL_SPI_MspInit+0x25c>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057fe:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_SPI_MspInit+0x25c>)
 8005800:	2200      	movs	r2, #0
 8005802:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005804:	4b41      	ldr	r3, [pc, #260]	; (800590c <HAL_SPI_MspInit+0x25c>)
 8005806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800580a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800580c:	4b3f      	ldr	r3, [pc, #252]	; (800590c <HAL_SPI_MspInit+0x25c>)
 800580e:	2200      	movs	r2, #0
 8005810:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005812:	4b3e      	ldr	r3, [pc, #248]	; (800590c <HAL_SPI_MspInit+0x25c>)
 8005814:	2200      	movs	r2, #0
 8005816:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005818:	4b3c      	ldr	r3, [pc, #240]	; (800590c <HAL_SPI_MspInit+0x25c>)
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800581e:	4b3b      	ldr	r3, [pc, #236]	; (800590c <HAL_SPI_MspInit+0x25c>)
 8005820:	2200      	movs	r2, #0
 8005822:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005824:	4b39      	ldr	r3, [pc, #228]	; (800590c <HAL_SPI_MspInit+0x25c>)
 8005826:	2200      	movs	r2, #0
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800582a:	4838      	ldr	r0, [pc, #224]	; (800590c <HAL_SPI_MspInit+0x25c>)
 800582c:	f002 fc94 	bl	8008158 <HAL_DMA_Init>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8005836:	f7fe fabb 	bl	8003db0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a33      	ldr	r2, [pc, #204]	; (800590c <HAL_SPI_MspInit+0x25c>)
 800583e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005840:	4a32      	ldr	r2, [pc, #200]	; (800590c <HAL_SPI_MspInit+0x25c>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005846:	e050      	b.n	80058ea <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a31      	ldr	r2, [pc, #196]	; (8005914 <HAL_SPI_MspInit+0x264>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d14b      	bne.n	80058ea <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 800585c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005860:	6413      	str	r3, [r2, #64]	; 0x40
 8005862:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a20      	ldr	r2, [pc, #128]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	623b      	str	r3, [r7, #32]
 800588e:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 8005894:	f043 0304 	orr.w	r3, r3, #4
 8005898:	6313      	str	r3, [r2, #48]	; 0x30
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_SPI_MspInit+0x248>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	623b      	str	r3, [r7, #32]
 80058a4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ac:	2302      	movs	r3, #2
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b4:	2303      	movs	r3, #3
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058b8:	2306      	movs	r3, #6
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c0:	4619      	mov	r1, r3
 80058c2:	4815      	ldr	r0, [pc, #84]	; (8005918 <HAL_SPI_MspInit+0x268>)
 80058c4:	f005 fc8e 	bl	800b1e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80058c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ce:	2302      	movs	r3, #2
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d6:	2303      	movs	r3, #3
 80058d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058da:	2306      	movs	r3, #6
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e2:	4619      	mov	r1, r3
 80058e4:	480d      	ldr	r0, [pc, #52]	; (800591c <HAL_SPI_MspInit+0x26c>)
 80058e6:	f005 fc7d 	bl	800b1e4 <HAL_GPIO_Init>
}
 80058ea:	bf00      	nop
 80058ec:	3738      	adds	r7, #56	; 0x38
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40013000 	.word	0x40013000
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40020400 	.word	0x40020400
 8005900:	40003800 	.word	0x40003800
 8005904:	20000418 	.word	0x20000418
 8005908:	40026070 	.word	0x40026070
 800590c:	20000478 	.word	0x20000478
 8005910:	40026058 	.word	0x40026058
 8005914:	40003c00 	.word	0x40003c00
 8005918:	40020000 	.word	0x40020000
 800591c:	40020800 	.word	0x40020800

08005920 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <HAL_SPI_MspDeInit+0x90>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10a      	bne.n	8005948 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <HAL_SPI_MspDeInit+0x94>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_SPI_MspDeInit+0x94>)
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 800593e:	2138      	movs	r1, #56	; 0x38
 8005940:	481d      	ldr	r0, [pc, #116]	; (80059b8 <HAL_SPI_MspDeInit+0x98>)
 8005942:	f005 fdeb 	bl	800b51c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005946:	e02f      	b.n	80059a8 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <HAL_SPI_MspDeInit+0x9c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d115      	bne.n	800597e <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <HAL_SPI_MspDeInit+0x94>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_SPI_MspDeInit+0x94>)
 8005958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800595e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005962:	4815      	ldr	r0, [pc, #84]	; (80059b8 <HAL_SPI_MspDeInit+0x98>)
 8005964:	f005 fdda 	bl	800b51c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596c:	4618      	mov	r0, r3
 800596e:	f002 fca1 	bl	80082b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005976:	4618      	mov	r0, r3
 8005978:	f002 fc9c 	bl	80082b4 <HAL_DMA_DeInit>
}
 800597c:	e014      	b.n	80059a8 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <HAL_SPI_MspDeInit+0xa0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d10f      	bne.n	80059a8 <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <HAL_SPI_MspDeInit+0x94>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <HAL_SPI_MspDeInit+0x94>)
 800598e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005992:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005998:	480a      	ldr	r0, [pc, #40]	; (80059c4 <HAL_SPI_MspDeInit+0xa4>)
 800599a:	f005 fdbf 	bl	800b51c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800599e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80059a2:	4809      	ldr	r0, [pc, #36]	; (80059c8 <HAL_SPI_MspDeInit+0xa8>)
 80059a4:	f005 fdba 	bl	800b51c <HAL_GPIO_DeInit>
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40013000 	.word	0x40013000
 80059b4:	40023800 	.word	0x40023800
 80059b8:	40020400 	.word	0x40020400
 80059bc:	40003800 	.word	0x40003800
 80059c0:	40003c00 	.word	0x40003c00
 80059c4:	40020000 	.word	0x40020000
 80059c8:	40020800 	.word	0x40020800

080059cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_UART_MspInit+0x94>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d134      	bne.n	8005a58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <HAL_UART_MspInit+0x98>)
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_UART_MspInit+0x98>)
 80059f8:	f043 0310 	orr.w	r3, r3, #16
 80059fc:	6453      	str	r3, [r2, #68]	; 0x44
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_UART_MspInit+0x98>)
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <HAL_UART_MspInit+0x98>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <HAL_UART_MspInit+0x98>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1a:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <HAL_UART_MspInit+0x98>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a34:	2303      	movs	r3, #3
 8005a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a38:	2307      	movs	r3, #7
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3c:	f107 0314 	add.w	r3, r7, #20
 8005a40:	4619      	mov	r1, r3
 8005a42:	4809      	ldr	r0, [pc, #36]	; (8005a68 <HAL_UART_MspInit+0x9c>)
 8005a44:	f005 fbce 	bl	800b1e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	2025      	movs	r0, #37	; 0x25
 8005a4e:	f001 fda4 	bl	800759a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a52:	2025      	movs	r0, #37	; 0x25
 8005a54:	f001 fdbd 	bl	80075d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005a58:	bf00      	nop
 8005a5a:	3728      	adds	r7, #40	; 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40011000 	.word	0x40011000
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40020000 	.word	0x40020000

08005a6c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_UART_MspDeInit+0x38>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10d      	bne.n	8005a9a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_UART_MspDeInit+0x3c>)
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <HAL_UART_MspDeInit+0x3c>)
 8005a84:	f023 0310 	bic.w	r3, r3, #16
 8005a88:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005a8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a8e:	4807      	ldr	r0, [pc, #28]	; (8005aac <HAL_UART_MspDeInit+0x40>)
 8005a90:	f005 fd44 	bl	800b51c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005a94:	2025      	movs	r0, #37	; 0x25
 8005a96:	f001 fdaa 	bl	80075ee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40011000 	.word	0x40011000
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40020000 	.word	0x40020000

08005ab0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	60da      	str	r2, [r3, #12]
 8005ac2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <HAL_FSMC_MspInit+0x88>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d131      	bne.n	8005b30 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_FSMC_MspInit+0x88>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_FSMC_MspInit+0x8c>)
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_FSMC_MspInit+0x8c>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	6393      	str	r3, [r2, #56]	; 0x38
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_FSMC_MspInit+0x8c>)
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005aee:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005af2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af4:	2302      	movs	r3, #2
 8005af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005afc:	2303      	movs	r3, #3
 8005afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005b00:	230c      	movs	r3, #12
 8005b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	480d      	ldr	r0, [pc, #52]	; (8005b40 <HAL_FSMC_MspInit+0x90>)
 8005b0a:	f005 fb6b 	bl	800b1e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005b0e:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005b12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b14:	2302      	movs	r3, #2
 8005b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005b20:	230c      	movs	r3, #12
 8005b22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4806      	ldr	r0, [pc, #24]	; (8005b44 <HAL_FSMC_MspInit+0x94>)
 8005b2a:	f005 fb5b 	bl	800b1e4 <HAL_GPIO_Init>
 8005b2e:	e000      	b.n	8005b32 <HAL_FSMC_MspInit+0x82>
    return;
 8005b30:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000978 	.word	0x20000978
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40020c00 	.word	0x40020c00

08005b48 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005b50:	f7ff ffae 	bl	8005ab0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <HAL_FSMC_MspDeInit+0x38>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d113      	bne.n	8005b90 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_FSMC_MspDeInit+0x38>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <HAL_FSMC_MspDeInit+0x3c>)
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_FSMC_MspDeInit+0x3c>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005b7a:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005b7e:	4807      	ldr	r0, [pc, #28]	; (8005b9c <HAL_FSMC_MspDeInit+0x40>)
 8005b80:	f005 fccc 	bl	800b51c <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005b84:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005b88:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <HAL_FSMC_MspDeInit+0x44>)
 8005b8a:	f005 fcc7 	bl	800b51c <HAL_GPIO_DeInit>
 8005b8e:	e000      	b.n	8005b92 <HAL_FSMC_MspDeInit+0x36>
    return;
 8005b90:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	2000097c 	.word	0x2000097c
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	40020c00 	.word	0x40020c00

08005ba4 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005bac:	f7ff ffd6 	bl	8005b5c <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005bb0:	bf00      	nop
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005bbc:	e7fe      	b.n	8005bbc <NMI_Handler+0x4>

08005bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bc2:	e7fe      	b.n	8005bc2 <HardFault_Handler+0x4>

08005bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bc8:	e7fe      	b.n	8005bc8 <MemManage_Handler+0x4>

08005bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bce:	e7fe      	b.n	8005bce <BusFault_Handler+0x4>

08005bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bd4:	e7fe      	b.n	8005bd4 <UsageFault_Handler+0x4>

08005bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c04:	f001 f972 	bl	8006eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c08:	bf00      	nop
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <DMA1_Stream3_IRQHandler+0x10>)
 8005c12:	f002 fdb1 	bl	8008778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000478 	.word	0x20000478

08005c20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005c24:	4802      	ldr	r0, [pc, #8]	; (8005c30 <DMA1_Stream4_IRQHandler+0x10>)
 8005c26:	f002 fda7 	bl	8008778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000418 	.word	0x20000418

08005c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005c38:	4802      	ldr	r0, [pc, #8]	; (8005c44 <I2C1_EV_IRQHandler+0x10>)
 8005c3a:	f009 fc9b 	bl	800f574 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200002bc 	.word	0x200002bc

08005c48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005c4c:	4802      	ldr	r0, [pc, #8]	; (8005c58 <I2C1_ER_IRQHandler+0x10>)
 8005c4e:	f009 fe02 	bl	800f856 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200002bc 	.word	0x200002bc

08005c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c60:	4802      	ldr	r0, [pc, #8]	; (8005c6c <USART1_IRQHandler+0x10>)
 8005c62:	f011 fb5b 	bl	801731c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200004d8 	.word	0x200004d8

08005c70 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <_getpid>:

int _getpid(void)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	af00      	add	r7, sp, #0
	return 1;
 8005c82:	2301      	movs	r3, #1
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <_kill>:

int _kill(int pid, int sig)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005c98:	f014 f95c 	bl	8019f54 <__errno>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2216      	movs	r2, #22
 8005ca0:	601a      	str	r2, [r3, #0]
	return -1;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <_exit>:

void _exit (int status)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff ffe7 	bl	8005c8e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005cc0:	e7fe      	b.n	8005cc0 <_exit+0x12>

08005cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e00a      	b.n	8005cea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	4601      	mov	r1, r0
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	60ba      	str	r2, [r7, #8]
 8005ce0:	b2ca      	uxtb	r2, r1
 8005ce2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	dbf0      	blt.n	8005cd4 <_read+0x12>
	}

return len;
 8005cf2:	687b      	ldr	r3, [r7, #4]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e009      	b.n	8005d22 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	60ba      	str	r2, [r7, #8]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	dbf1      	blt.n	8005d0e <_write+0x12>
	}
	return len;
 8005d2a:	687b      	ldr	r3, [r7, #4]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <_close>:

int _close(int file)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	return -1;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d5c:	605a      	str	r2, [r3, #4]
	return 0;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <_isatty>:

int _isatty(int file)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	return 1;
 8005d74:	2301      	movs	r3, #1
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
	return 0;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <_open>:

int _open(char *path, int flags, ...)
{
 8005d9c:	b40e      	push	{r1, r2, r3}
 8005d9e:	b480      	push	{r7}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	b003      	add	sp, #12
 8005db6:	4770      	bx	lr

08005db8 <_wait>:

int _wait(int *status)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8005dc0:	f014 f8c8 	bl	8019f54 <__errno>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	601a      	str	r2, [r3, #0]
	return -1;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <_unlink>:

int _unlink(char *name)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8005dde:	f014 f8b9 	bl	8019f54 <__errno>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2202      	movs	r2, #2
 8005de6:	601a      	str	r2, [r3, #0]
	return -1;
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <_times>:

int _times(struct tms *buf)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	return -1;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <_stat>:

int _stat(char *file, struct stat *st)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e1c:	605a      	str	r2, [r3, #4]
	return 0;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <_link>:

int _link(char *old, char *new)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8005e36:	f014 f88d 	bl	8019f54 <__errno>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	221f      	movs	r2, #31
 8005e3e:	601a      	str	r2, [r3, #0]
	return -1;
 8005e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <_fork>:

int _fork(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8005e50:	f014 f880 	bl	8019f54 <__errno>
 8005e54:	4603      	mov	r3, r0
 8005e56:	220b      	movs	r2, #11
 8005e58:	601a      	str	r2, [r3, #0]
	return -1;
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8005e6e:	f014 f871 	bl	8019f54 <__errno>
 8005e72:	4603      	mov	r3, r0
 8005e74:	220c      	movs	r2, #12
 8005e76:	601a      	str	r2, [r3, #0]
	return -1;
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e8c:	4a14      	ldr	r2, [pc, #80]	; (8005ee0 <_sbrk+0x5c>)
 8005e8e:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <_sbrk+0x60>)
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e98:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <_sbrk+0x64>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <_sbrk+0x64>)
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <_sbrk+0x68>)
 8005ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ea6:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <_sbrk+0x64>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d207      	bcs.n	8005ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005eb4:	f014 f84e 	bl	8019f54 <__errno>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	220c      	movs	r2, #12
 8005ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec2:	e009      	b.n	8005ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <_sbrk+0x64>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <_sbrk+0x64>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <_sbrk+0x64>)
 8005ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20020000 	.word	0x20020000
 8005ee4:	00000800 	.word	0x00000800
 8005ee8:	20000984 	.word	0x20000984
 8005eec:	20000a10 	.word	0x20000a10

08005ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <SystemInit+0x20>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efa:	4a05      	ldr	r2, [pc, #20]	; (8005f10 <SystemInit+0x20>)
 8005efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	2302      	movs	r3, #2
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f2e:	4b34      	ldr	r3, [pc, #208]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
 8005f36:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d011      	beq.n	8005f62 <SystemCoreClockUpdate+0x4e>
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d844      	bhi.n	8005fce <SystemCoreClockUpdate+0xba>
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <SystemCoreClockUpdate+0x3e>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d004      	beq.n	8005f5a <SystemCoreClockUpdate+0x46>
 8005f50:	e03d      	b.n	8005fce <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005f52:	4b2c      	ldr	r3, [pc, #176]	; (8006004 <SystemCoreClockUpdate+0xf0>)
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <SystemCoreClockUpdate+0xf4>)
 8005f56:	601a      	str	r2, [r3, #0]
      break;
 8005f58:	e03d      	b.n	8005fd6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <SystemCoreClockUpdate+0xf0>)
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	; (800600c <SystemCoreClockUpdate+0xf8>)
 8005f5e:	601a      	str	r2, [r3, #0]
      break;
 8005f60:	e039      	b.n	8005fd6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005f62:	4b27      	ldr	r3, [pc, #156]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	0d9b      	lsrs	r3, r3, #22
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f6e:	4b24      	ldr	r3, [pc, #144]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f76:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00c      	beq.n	8005f98 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005f7e:	4a23      	ldr	r2, [pc, #140]	; (800600c <SystemCoreClockUpdate+0xf8>)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005f88:	6852      	ldr	r2, [r2, #4]
 8005f8a:	0992      	lsrs	r2, r2, #6
 8005f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	e00b      	b.n	8005fb0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <SystemCoreClockUpdate+0xf4>)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	0992      	lsrs	r2, r2, #6
 8005fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005fb0:	4b13      	ldr	r3, [pc, #76]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	0c1b      	lsrs	r3, r3, #16
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	4a0e      	ldr	r2, [pc, #56]	; (8006004 <SystemCoreClockUpdate+0xf0>)
 8005fca:	6013      	str	r3, [r2, #0]
      break;
 8005fcc:	e003      	b.n	8005fd6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <SystemCoreClockUpdate+0xf0>)
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <SystemCoreClockUpdate+0xf4>)
 8005fd2:	601a      	str	r2, [r3, #0]
      break;
 8005fd4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <SystemCoreClockUpdate+0xec>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <SystemCoreClockUpdate+0xfc>)
 8005fe2:	5cd3      	ldrb	r3, [r2, r3]
 8005fe4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <SystemCoreClockUpdate+0xf0>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <SystemCoreClockUpdate+0xf0>)
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40023800 	.word	0x40023800
 8006004:	20000058 	.word	0x20000058
 8006008:	00f42400 	.word	0x00f42400
 800600c:	007a1200 	.word	0x007a1200
 8006010:	08052618 	.word	0x08052618

08006014 <W25Q_Reset>:

w25_info_t  w25_info;
char str1[30];
uint8_t buf[10];

void W25Q_Reset (void) {
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006018:	2200      	movs	r2, #0
 800601a:	2101      	movs	r1, #1
 800601c:	480b      	ldr	r0, [pc, #44]	; (800604c <W25Q_Reset+0x38>)
 800601e:	f005 fb91 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <W25Q_Reset+0x3c>)
 8006024:	2266      	movs	r2, #102	; 0x66
 8006026:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <W25Q_Reset+0x3c>)
 800602a:	2299      	movs	r2, #153	; 0x99
 800602c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 800602e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006032:	2202      	movs	r2, #2
 8006034:	4906      	ldr	r1, [pc, #24]	; (8006050 <W25Q_Reset+0x3c>)
 8006036:	4807      	ldr	r0, [pc, #28]	; (8006054 <W25Q_Reset+0x40>)
 8006038:	f00d f921 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800603c:	2201      	movs	r2, #1
 800603e:	2101      	movs	r1, #1
 8006040:	4802      	ldr	r0, [pc, #8]	; (800604c <W25Q_Reset+0x38>)
 8006042:	f005 fb7f 	bl	800b744 <HAL_GPIO_WritePin>
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40020400 	.word	0x40020400
 8006050:	200009cc 	.word	0x200009cc
 8006054:	20000310 	.word	0x20000310

08006058 <W25Q_Read_Info>:

void W25Q_Read_Info(char* str_info) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	unsigned int id = W25Q_Read_ID();
 8006060:	f000 fcd8 	bl	8006a14 <W25Q_Read_ID>
 8006064:	60f8      	str	r0, [r7, #12]
	sprintf(str_info,"ID:0x%X\n",id);
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	49a4      	ldr	r1, [pc, #656]	; (80062fc <W25Q_Read_Info+0x2a4>)
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f014 fe24 	bl	801acb8 <siprintf>
	id &= 0x0000FFFF;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	b29b      	uxth	r3, r3
 8006074:	60fb      	str	r3, [r7, #12]
	w25_info.high_cap = 0;
 8006076:	4ba2      	ldr	r3, [pc, #648]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006078:	2200      	movs	r2, #0
 800607a:	77da      	strb	r2, [r3, #31]
	switch(id) {
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006082:	3b11      	subs	r3, #17
 8006084:	2b09      	cmp	r3, #9
 8006086:	f200 80b6 	bhi.w	80061f6 <W25Q_Read_Info+0x19e>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <W25Q_Read_Info+0x38>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080061d9 	.word	0x080061d9
 8006094:	080061bb 	.word	0x080061bb
 8006098:	0800619d 	.word	0x0800619d
 800609c:	0800617f 	.word	0x0800617f
 80060a0:	08006161 	.word	0x08006161
 80060a4:	08006143 	.word	0x08006143
 80060a8:	08006125 	.word	0x08006125
 80060ac:	08006105 	.word	0x08006105
 80060b0:	080060df 	.word	0x080060df
 80060b4:	080060b9 	.word	0x080060b9
	case 0x401A:
		w25_info.high_cap=1;
 80060b8:	4b91      	ldr	r3, [pc, #580]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 80060be:	4b90      	ldr	r3, [pc, #576]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80060c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060c4:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q512\n");
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f012 fffc 	bl	80190c4 <strlen>
 80060cc:	4602      	mov	r2, r0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	2214      	movs	r2, #20
 80060d4:	498b      	ldr	r1, [pc, #556]	; (8006304 <W25Q_Read_Info+0x2ac>)
 80060d6:	4618      	mov	r0, r3
 80060d8:	f016 fece 	bl	801ce78 <memcpy>
		break;
 80060dc:	e097      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4019:
		w25_info.high_cap=1;
 80060de:	4b88      	ldr	r3, [pc, #544]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 80060e4:	4b86      	ldr	r3, [pc, #536]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80060e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ea:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q256\n");
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f012 ffe9 	bl	80190c4 <strlen>
 80060f2:	4602      	mov	r2, r0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	2214      	movs	r2, #20
 80060fa:	4983      	ldr	r1, [pc, #524]	; (8006308 <W25Q_Read_Info+0x2b0>)
 80060fc:	4618      	mov	r0, r3
 80060fe:	f016 febb 	bl	801ce78 <memcpy>
		break;
 8006102:	e084      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4018:
		w25_info.BlockCount=256;
 8006104:	4b7e      	ldr	r3, [pc, #504]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800610a:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q128\n");
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f012 ffd9 	bl	80190c4 <strlen>
 8006112:	4602      	mov	r2, r0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	2214      	movs	r2, #20
 800611a:	497c      	ldr	r1, [pc, #496]	; (800630c <W25Q_Read_Info+0x2b4>)
 800611c:	4618      	mov	r0, r3
 800611e:	f016 feab 	bl	801ce78 <memcpy>
		break;
 8006122:	e074      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4017:
		w25_info.BlockCount=128;
 8006124:	4b76      	ldr	r3, [pc, #472]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006126:	2280      	movs	r2, #128	; 0x80
 8006128:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q64\n");
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f012 ffca 	bl	80190c4 <strlen>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	2213      	movs	r2, #19
 8006138:	4975      	ldr	r1, [pc, #468]	; (8006310 <W25Q_Read_Info+0x2b8>)
 800613a:	4618      	mov	r0, r3
 800613c:	f016 fe9c 	bl	801ce78 <memcpy>
		break;
 8006140:	e065      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4016:
		w25_info.BlockCount=64;
 8006142:	4b6f      	ldr	r3, [pc, #444]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006144:	2240      	movs	r2, #64	; 0x40
 8006146:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q32\n");
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f012 ffbb 	bl	80190c4 <strlen>
 800614e:	4602      	mov	r2, r0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	2213      	movs	r2, #19
 8006156:	496f      	ldr	r1, [pc, #444]	; (8006314 <W25Q_Read_Info+0x2bc>)
 8006158:	4618      	mov	r0, r3
 800615a:	f016 fe8d 	bl	801ce78 <memcpy>
		break;
 800615e:	e056      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4015:
		w25_info.BlockCount=32;
 8006160:	4b67      	ldr	r3, [pc, #412]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006162:	2220      	movs	r2, #32
 8006164:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q16\n");
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f012 ffac 	bl	80190c4 <strlen>
 800616c:	4602      	mov	r2, r0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	2213      	movs	r2, #19
 8006174:	4968      	ldr	r1, [pc, #416]	; (8006318 <W25Q_Read_Info+0x2c0>)
 8006176:	4618      	mov	r0, r3
 8006178:	f016 fe7e 	bl	801ce78 <memcpy>
		break;
 800617c:	e047      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4014:
		w25_info.BlockCount=16;
 800617e:	4b60      	ldr	r3, [pc, #384]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006180:	2210      	movs	r2, #16
 8006182:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q80\n");
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f012 ff9d 	bl	80190c4 <strlen>
 800618a:	4602      	mov	r2, r0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	2213      	movs	r2, #19
 8006192:	4962      	ldr	r1, [pc, #392]	; (800631c <W25Q_Read_Info+0x2c4>)
 8006194:	4618      	mov	r0, r3
 8006196:	f016 fe6f 	bl	801ce78 <memcpy>
		break;
 800619a:	e038      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4013:
		w25_info.BlockCount=8;
 800619c:	4b58      	ldr	r3, [pc, #352]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800619e:	2208      	movs	r2, #8
 80061a0:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q40\n");
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f012 ff8e 	bl	80190c4 <strlen>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	2213      	movs	r2, #19
 80061b0:	495b      	ldr	r1, [pc, #364]	; (8006320 <W25Q_Read_Info+0x2c8>)
 80061b2:	4618      	mov	r0, r3
 80061b4:	f016 fe60 	bl	801ce78 <memcpy>
		break;
 80061b8:	e029      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4012:
		w25_info.BlockCount=4;
 80061ba:	4b51      	ldr	r3, [pc, #324]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80061bc:	2204      	movs	r2, #4
 80061be:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q20\n");
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f012 ff7f 	bl	80190c4 <strlen>
 80061c6:	4602      	mov	r2, r0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	2213      	movs	r2, #19
 80061ce:	4955      	ldr	r1, [pc, #340]	; (8006324 <W25Q_Read_Info+0x2cc>)
 80061d0:	4618      	mov	r0, r3
 80061d2:	f016 fe51 	bl	801ce78 <memcpy>
		break;
 80061d6:	e01a      	b.n	800620e <W25Q_Read_Info+0x1b6>
	case 0x4011:
		w25_info.BlockCount=2;
 80061d8:	4b49      	ldr	r3, [pc, #292]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80061da:	2202      	movs	r2, #2
 80061dc:	615a      	str	r2, [r3, #20]
		strcat(str_info,"W25Q Chip: w25q10\n");
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f012 ff70 	bl	80190c4 <strlen>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4413      	add	r3, r2
 80061ea:	2213      	movs	r2, #19
 80061ec:	494e      	ldr	r1, [pc, #312]	; (8006328 <W25Q_Read_Info+0x2d0>)
 80061ee:	4618      	mov	r0, r3
 80061f0:	f016 fe42 	bl	801ce78 <memcpy>
		break;
 80061f4:	e00b      	b.n	800620e <W25Q_Read_Info+0x1b6>
	default:
		strcat(str_info,"W25Q Unknown ID\n");
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f012 ff64 	bl	80190c4 <strlen>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	2211      	movs	r2, #17
 8006204:	4949      	ldr	r1, [pc, #292]	; (800632c <W25Q_Read_Info+0x2d4>)
 8006206:	4618      	mov	r0, r3
 8006208:	f016 fe36 	bl	801ce78 <memcpy>
		return;
 800620c:	e073      	b.n	80062f6 <W25Q_Read_Info+0x29e>
	}
	w25_info.PageSize=256;
 800620e:	4b3c      	ldr	r3, [pc, #240]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006214:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8006216:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800621c:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 800621e:	4b38      	ldr	r3, [pc, #224]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	4a36      	ldr	r2, [pc, #216]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006226:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8006228:	4b35      	ldr	r3, [pc, #212]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a34      	ldr	r2, [pc, #208]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800622e:	6892      	ldr	r2, [r2, #8]
 8006230:	fb02 f303 	mul.w	r3, r2, r3
 8006234:	4a32      	ldr	r2, [pc, #200]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006236:	8812      	ldrh	r2, [r2, #0]
 8006238:	fbb3 f3f2 	udiv	r3, r3, r2
 800623c:	4a30      	ldr	r2, [pc, #192]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800623e:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8006240:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	4a2e      	ldr	r2, [pc, #184]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006248:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 800624a:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006250:	6892      	ldr	r2, [r2, #8]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	0a9b      	lsrs	r3, r3, #10
 8006258:	4a29      	ldr	r2, [pc, #164]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800625a:	6193      	str	r3, [r2, #24]
	sprintf(str1,"Page Size: %d Bytes\n",(unsigned int)w25_info.PageSize);
 800625c:	4b28      	ldr	r3, [pc, #160]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	4933      	ldr	r1, [pc, #204]	; (8006330 <W25Q_Read_Info+0x2d8>)
 8006264:	4833      	ldr	r0, [pc, #204]	; (8006334 <W25Q_Read_Info+0x2dc>)
 8006266:	f014 fd27 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 800626a:	4932      	ldr	r1, [pc, #200]	; (8006334 <W25Q_Read_Info+0x2dc>)
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f018 fb2f 	bl	801e8d0 <strcat>
	sprintf(str1,"Page Count: %u\n",(unsigned int)w25_info.PageCount);
 8006272:	4b23      	ldr	r3, [pc, #140]	; (8006300 <W25Q_Read_Info+0x2a8>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	461a      	mov	r2, r3
 8006278:	492f      	ldr	r1, [pc, #188]	; (8006338 <W25Q_Read_Info+0x2e0>)
 800627a:	482e      	ldr	r0, [pc, #184]	; (8006334 <W25Q_Read_Info+0x2dc>)
 800627c:	f014 fd1c 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 8006280:	492c      	ldr	r1, [pc, #176]	; (8006334 <W25Q_Read_Info+0x2dc>)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f018 fb24 	bl	801e8d0 <strcat>
	sprintf(str1,"Sector Size: %u Bytes\n",(unsigned int)w25_info.SectorSize);
 8006288:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <W25Q_Read_Info+0x2a8>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	461a      	mov	r2, r3
 800628e:	492b      	ldr	r1, [pc, #172]	; (800633c <W25Q_Read_Info+0x2e4>)
 8006290:	4828      	ldr	r0, [pc, #160]	; (8006334 <W25Q_Read_Info+0x2dc>)
 8006292:	f014 fd11 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 8006296:	4927      	ldr	r1, [pc, #156]	; (8006334 <W25Q_Read_Info+0x2dc>)
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f018 fb19 	bl	801e8d0 <strcat>
	sprintf(str1,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 800629e:	4b18      	ldr	r3, [pc, #96]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	461a      	mov	r2, r3
 80062a4:	4926      	ldr	r1, [pc, #152]	; (8006340 <W25Q_Read_Info+0x2e8>)
 80062a6:	4823      	ldr	r0, [pc, #140]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062a8:	f014 fd06 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 80062ac:	4921      	ldr	r1, [pc, #132]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f018 fb0e 	bl	801e8d0 <strcat>
	sprintf(str1,"Block Size: %u Bytes\n",(unsigned int)w25_info.BlockSize);
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	461a      	mov	r2, r3
 80062ba:	4922      	ldr	r1, [pc, #136]	; (8006344 <W25Q_Read_Info+0x2ec>)
 80062bc:	481d      	ldr	r0, [pc, #116]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062be:	f014 fcfb 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 80062c2:	491c      	ldr	r1, [pc, #112]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f018 fb03 	bl	801e8d0 <strcat>
	sprintf(str1,"Block Count: %u\n",(unsigned int)w25_info.BlockCount);
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	461a      	mov	r2, r3
 80062d0:	491d      	ldr	r1, [pc, #116]	; (8006348 <W25Q_Read_Info+0x2f0>)
 80062d2:	4818      	ldr	r0, [pc, #96]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062d4:	f014 fcf0 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 80062d8:	4916      	ldr	r1, [pc, #88]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f018 faf8 	bl	801e8d0 <strcat>
	sprintf(str1,"Capacity: %u KB\n",(unsigned int)w25_info.NumKB);
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <W25Q_Read_Info+0x2a8>)
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	461a      	mov	r2, r3
 80062e6:	4919      	ldr	r1, [pc, #100]	; (800634c <W25Q_Read_Info+0x2f4>)
 80062e8:	4812      	ldr	r0, [pc, #72]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062ea:	f014 fce5 	bl	801acb8 <siprintf>
	strcat(str_info,str1);
 80062ee:	4911      	ldr	r1, [pc, #68]	; (8006334 <W25Q_Read_Info+0x2dc>)
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f018 faed 	bl	801e8d0 <strcat>
}
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	08052728 	.word	0x08052728
 8006300:	20000988 	.word	0x20000988
 8006304:	08052734 	.word	0x08052734
 8006308:	08052748 	.word	0x08052748
 800630c:	0805275c 	.word	0x0805275c
 8006310:	08052770 	.word	0x08052770
 8006314:	08052784 	.word	0x08052784
 8006318:	08052798 	.word	0x08052798
 800631c:	080527ac 	.word	0x080527ac
 8006320:	080527c0 	.word	0x080527c0
 8006324:	080527d4 	.word	0x080527d4
 8006328:	080527e8 	.word	0x080527e8
 800632c:	080527fc 	.word	0x080527fc
 8006330:	08052810 	.word	0x08052810
 8006334:	200009ac 	.word	0x200009ac
 8006338:	08052828 	.word	0x08052828
 800633c:	08052838 	.word	0x08052838
 8006340:	08052850 	.word	0x08052850
 8006344:	08052864 	.word	0x08052864
 8006348:	0805287c 	.word	0x0805287c
 800634c:	08052890 	.word	0x08052890

08006350 <W25Q_Write_Enable>:

void W25Q_Write_Enable(void) {
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006354:	2200      	movs	r2, #0
 8006356:	2101      	movs	r1, #1
 8006358:	4809      	ldr	r0, [pc, #36]	; (8006380 <W25Q_Write_Enable+0x30>)
 800635a:	f005 f9f3 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_ENABLE;
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <W25Q_Write_Enable+0x34>)
 8006360:	2206      	movs	r2, #6
 8006362:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006368:	2201      	movs	r2, #1
 800636a:	4906      	ldr	r1, [pc, #24]	; (8006384 <W25Q_Write_Enable+0x34>)
 800636c:	4806      	ldr	r0, [pc, #24]	; (8006388 <W25Q_Write_Enable+0x38>)
 800636e:	f00c ff86 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006372:	2201      	movs	r2, #1
 8006374:	2101      	movs	r1, #1
 8006376:	4802      	ldr	r0, [pc, #8]	; (8006380 <W25Q_Write_Enable+0x30>)
 8006378:	f005 f9e4 	bl	800b744 <HAL_GPIO_WritePin>
}
 800637c:	bf00      	nop
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40020400 	.word	0x40020400
 8006384:	200009cc 	.word	0x200009cc
 8006388:	20000310 	.word	0x20000310

0800638c <W25Q_Write_Disable>:

void W25Q_Write_Disable(void) {
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006390:	2200      	movs	r2, #0
 8006392:	2101      	movs	r1, #1
 8006394:	4809      	ldr	r0, [pc, #36]	; (80063bc <W25Q_Write_Disable+0x30>)
 8006396:	f005 f9d5 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_DISABLE;
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <W25Q_Write_Disable+0x34>)
 800639c:	2204      	movs	r2, #4
 800639e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 80063a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063a4:	2201      	movs	r2, #1
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <W25Q_Write_Disable+0x34>)
 80063a8:	4806      	ldr	r0, [pc, #24]	; (80063c4 <W25Q_Write_Disable+0x38>)
 80063aa:	f00c ff68 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80063ae:	2201      	movs	r2, #1
 80063b0:	2101      	movs	r1, #1
 80063b2:	4802      	ldr	r0, [pc, #8]	; (80063bc <W25Q_Write_Disable+0x30>)
 80063b4:	f005 f9c6 	bl	800b744 <HAL_GPIO_WritePin>
}
 80063b8:	bf00      	nop
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40020400 	.word	0x40020400
 80063c0:	200009cc 	.word	0x200009cc
 80063c4:	20000310 	.word	0x20000310

080063c8 <W25Q_Set_Block_Protect>:

void W25Q_Set_Block_Protect(uint8_t val) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0x50;
 80063d2:	4b1a      	ldr	r3, [pc, #104]	; (800643c <W25Q_Set_Block_Protect+0x74>)
 80063d4:	2250      	movs	r2, #80	; 0x50
 80063d6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80063d8:	2200      	movs	r2, #0
 80063da:	2101      	movs	r1, #1
 80063dc:	4818      	ldr	r0, [pc, #96]	; (8006440 <W25Q_Set_Block_Protect+0x78>)
 80063de:	f005 f9b1 	bl	800b744 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 80063e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063e6:	2201      	movs	r2, #1
 80063e8:	4914      	ldr	r1, [pc, #80]	; (800643c <W25Q_Set_Block_Protect+0x74>)
 80063ea:	4816      	ldr	r0, [pc, #88]	; (8006444 <W25Q_Set_Block_Protect+0x7c>)
 80063ec:	f00c ff47 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80063f0:	2201      	movs	r2, #1
 80063f2:	2101      	movs	r1, #1
 80063f4:	4812      	ldr	r0, [pc, #72]	; (8006440 <W25Q_Set_Block_Protect+0x78>)
 80063f6:	f005 f9a5 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_STATUS_1;
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <W25Q_Set_Block_Protect+0x74>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
	buf[1] = ((val & 0x0F) << 2);
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800640a:	b2da      	uxtb	r2, r3
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <W25Q_Set_Block_Protect+0x74>)
 800640e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006410:	2200      	movs	r2, #0
 8006412:	2101      	movs	r1, #1
 8006414:	480a      	ldr	r0, [pc, #40]	; (8006440 <W25Q_Set_Block_Protect+0x78>)
 8006416:	f005 f995 	bl	800b744 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 800641a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800641e:	2202      	movs	r2, #2
 8006420:	4906      	ldr	r1, [pc, #24]	; (800643c <W25Q_Set_Block_Protect+0x74>)
 8006422:	4808      	ldr	r0, [pc, #32]	; (8006444 <W25Q_Set_Block_Protect+0x7c>)
 8006424:	f00c ff2b 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006428:	2201      	movs	r2, #1
 800642a:	2101      	movs	r1, #1
 800642c:	4804      	ldr	r0, [pc, #16]	; (8006440 <W25Q_Set_Block_Protect+0x78>)
 800642e:	f005 f989 	bl	800b744 <HAL_GPIO_WritePin>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200009cc 	.word	0x200009cc
 8006440:	40020400 	.word	0x40020400
 8006444:	20000310 	.word	0x20000310

08006448 <W25Q_Wait_Write_End>:

void W25Q_Wait_Write_End(void) {
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 800644c:	2001      	movs	r0, #1
 800644e:	f000 fdad 	bl	8006fac <HAL_Delay>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006452:	2200      	movs	r2, #0
 8006454:	2101      	movs	r1, #1
 8006456:	4815      	ldr	r0, [pc, #84]	; (80064ac <W25Q_Wait_Write_End+0x64>)
 8006458:	f005 f974 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_READ_STATUS_1;
 800645c:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <W25Q_Wait_Write_End+0x68>)
 800645e:	2205      	movs	r2, #5
 8006460:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006466:	2201      	movs	r2, #1
 8006468:	4911      	ldr	r1, [pc, #68]	; (80064b0 <W25Q_Wait_Write_End+0x68>)
 800646a:	4812      	ldr	r0, [pc, #72]	; (80064b4 <W25Q_Wait_Write_End+0x6c>)
 800646c:	f00c ff07 	bl	801327e <HAL_SPI_Transmit>
	do {
		HAL_SPI_Receive (&W25Q_SPI, buf, 1, 1000);
 8006470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006474:	2201      	movs	r2, #1
 8006476:	490e      	ldr	r1, [pc, #56]	; (80064b0 <W25Q_Wait_Write_End+0x68>)
 8006478:	480e      	ldr	r0, [pc, #56]	; (80064b4 <W25Q_Wait_Write_End+0x6c>)
 800647a:	f00d f83c 	bl	80134f6 <HAL_SPI_Receive>
		w25_info.StatusRegister1 = buf[0];
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <W25Q_Wait_Write_End+0x68>)
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <W25Q_Wait_Write_End+0x70>)
 8006484:	f883 2020 	strb.w	r2, [r3, #32]
		HAL_Delay(1);
 8006488:	2001      	movs	r0, #1
 800648a:	f000 fd8f 	bl	8006fac <HAL_Delay>
	}
	while((w25_info.StatusRegister1 & 0x01) == 0x01);
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <W25Q_Wait_Write_End+0x70>)
 8006490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e9      	bne.n	8006470 <W25Q_Wait_Write_End+0x28>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800649c:	2201      	movs	r2, #1
 800649e:	2101      	movs	r1, #1
 80064a0:	4802      	ldr	r0, [pc, #8]	; (80064ac <W25Q_Wait_Write_End+0x64>)
 80064a2:	f005 f94f 	bl	800b744 <HAL_GPIO_WritePin>
}
 80064a6:	bf00      	nop
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40020400 	.word	0x40020400
 80064b0:	200009cc 	.word	0x200009cc
 80064b4:	20000310 	.word	0x20000310
 80064b8:	20000988 	.word	0x20000988

080064bc <W25Q_Erase_Sector>:

void W25Q_Erase_Sector(uint32_t addr) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	W25Q_Wait_Write_End();
 80064c4:	f7ff ffc0 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80064c8:	2000      	movs	r0, #0
 80064ca:	f7ff ff7d 	bl	80063c8 <W25Q_Set_Block_Protect>
	addr = addr * w25_info.SectorSize;
 80064ce:	4b2a      	ldr	r3, [pc, #168]	; (8006578 <W25Q_Erase_Sector+0xbc>)
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	607b      	str	r3, [r7, #4]
	W25Q_Write_Enable();
 80064da:	f7ff ff39 	bl	8006350 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80064de:	2200      	movs	r2, #0
 80064e0:	2101      	movs	r1, #1
 80064e2:	4826      	ldr	r0, [pc, #152]	; (800657c <W25Q_Erase_Sector+0xc0>)
 80064e4:	f005 f92e 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_SECTOR_ERASE;
 80064e8:	4b25      	ldr	r3, [pc, #148]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 80064ea:	2220      	movs	r2, #32
 80064ec:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80064ee:	4b22      	ldr	r3, [pc, #136]	; (8006578 <W25Q_Erase_Sector+0xbc>)
 80064f0:	7fdb      	ldrb	r3, [r3, #31]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01a      	beq.n	800652c <W25Q_Erase_Sector+0x70>
	{
		buf[1] = (addr >> 24) & 0xFF;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	0e1b      	lsrs	r3, r3, #24
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	4b20      	ldr	r3, [pc, #128]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 80064fe:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	0c1b      	lsrs	r3, r3, #16
 8006504:	b2da      	uxtb	r2, r3
 8006506:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 8006508:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	b2da      	uxtb	r2, r3
 8006510:	4b1b      	ldr	r3, [pc, #108]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 8006512:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b19      	ldr	r3, [pc, #100]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 800651a:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 800651c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006520:	2205      	movs	r2, #5
 8006522:	4917      	ldr	r1, [pc, #92]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 8006524:	4817      	ldr	r0, [pc, #92]	; (8006584 <W25Q_Erase_Sector+0xc8>)
 8006526:	f00c feaa 	bl	801327e <HAL_SPI_Transmit>
 800652a:	e014      	b.n	8006556 <W25Q_Erase_Sector+0x9a>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	0c1b      	lsrs	r3, r3, #16
 8006530:	b2da      	uxtb	r2, r3
 8006532:	4b13      	ldr	r3, [pc, #76]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 8006534:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0a1b      	lsrs	r3, r3, #8
 800653a:	b2da      	uxtb	r2, r3
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 800653e:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 8006546:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800654c:	2204      	movs	r2, #4
 800654e:	490c      	ldr	r1, [pc, #48]	; (8006580 <W25Q_Erase_Sector+0xc4>)
 8006550:	480c      	ldr	r0, [pc, #48]	; (8006584 <W25Q_Erase_Sector+0xc8>)
 8006552:	f00c fe94 	bl	801327e <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006556:	2201      	movs	r2, #1
 8006558:	2101      	movs	r1, #1
 800655a:	4808      	ldr	r0, [pc, #32]	; (800657c <W25Q_Erase_Sector+0xc0>)
 800655c:	f005 f8f2 	bl	800b744 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006560:	f7ff ff72 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006564:	f7ff ff12 	bl	800638c <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006568:	200f      	movs	r0, #15
 800656a:	f7ff ff2d 	bl	80063c8 <W25Q_Set_Block_Protect>
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000988 	.word	0x20000988
 800657c:	40020400 	.word	0x40020400
 8006580:	200009cc 	.word	0x200009cc
 8006584:	20000310 	.word	0x20000310

08006588 <W25Q_Erase_Block>:

void W25Q_Erase_Block(uint32_t addr) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	W25Q_Wait_Write_End();
 8006590:	f7ff ff5a 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 8006594:	2000      	movs	r0, #0
 8006596:	f7ff ff17 	bl	80063c8 <W25Q_Set_Block_Protect>
	addr = addr * w25_info.BlockSize;
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <W25Q_Erase_Block+0xbc>)
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	fb02 f303 	mul.w	r3, r2, r3
 80065a4:	607b      	str	r3, [r7, #4]
	W25Q_Write_Enable();
 80065a6:	f7ff fed3 	bl	8006350 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80065aa:	2200      	movs	r2, #0
 80065ac:	2101      	movs	r1, #1
 80065ae:	4826      	ldr	r0, [pc, #152]	; (8006648 <W25Q_Erase_Block+0xc0>)
 80065b0:	f005 f8c8 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_BLOCK_ERASE;
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <W25Q_Erase_Block+0xc4>)
 80065b6:	22d8      	movs	r2, #216	; 0xd8
 80065b8:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80065ba:	4b22      	ldr	r3, [pc, #136]	; (8006644 <W25Q_Erase_Block+0xbc>)
 80065bc:	7fdb      	ldrb	r3, [r3, #31]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01a      	beq.n	80065f8 <W25Q_Erase_Block+0x70>
	{
		buf[1] = (addr >> 24) & 0xFF;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4b20      	ldr	r3, [pc, #128]	; (800664c <W25Q_Erase_Block+0xc4>)
 80065ca:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <W25Q_Erase_Block+0xc4>)
 80065d4:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <W25Q_Erase_Block+0xc4>)
 80065de:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b19      	ldr	r3, [pc, #100]	; (800664c <W25Q_Erase_Block+0xc4>)
 80065e6:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 80065e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ec:	2205      	movs	r2, #5
 80065ee:	4917      	ldr	r1, [pc, #92]	; (800664c <W25Q_Erase_Block+0xc4>)
 80065f0:	4817      	ldr	r0, [pc, #92]	; (8006650 <W25Q_Erase_Block+0xc8>)
 80065f2:	f00c fe44 	bl	801327e <HAL_SPI_Transmit>
 80065f6:	e014      	b.n	8006622 <W25Q_Erase_Block+0x9a>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	0c1b      	lsrs	r3, r3, #16
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <W25Q_Erase_Block+0xc4>)
 8006600:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	b2da      	uxtb	r2, r3
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <W25Q_Erase_Block+0xc4>)
 800660a:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <W25Q_Erase_Block+0xc4>)
 8006612:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006618:	2204      	movs	r2, #4
 800661a:	490c      	ldr	r1, [pc, #48]	; (800664c <W25Q_Erase_Block+0xc4>)
 800661c:	480c      	ldr	r0, [pc, #48]	; (8006650 <W25Q_Erase_Block+0xc8>)
 800661e:	f00c fe2e 	bl	801327e <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006622:	2201      	movs	r2, #1
 8006624:	2101      	movs	r1, #1
 8006626:	4808      	ldr	r0, [pc, #32]	; (8006648 <W25Q_Erase_Block+0xc0>)
 8006628:	f005 f88c 	bl	800b744 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800662c:	f7ff ff0c 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006630:	f7ff feac 	bl	800638c <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006634:	200f      	movs	r0, #15
 8006636:	f7ff fec7 	bl	80063c8 <W25Q_Set_Block_Protect>
}
 800663a:	bf00      	nop
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000988 	.word	0x20000988
 8006648:	40020400 	.word	0x40020400
 800664c:	200009cc 	.word	0x200009cc
 8006650:	20000310 	.word	0x20000310

08006654 <W25Q_Erase_Chip>:

void W25Q_Erase_Chip(void) {
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
	W25Q_Wait_Write_End();
 8006658:	f7ff fef6 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 800665c:	2000      	movs	r0, #0
 800665e:	f7ff feb3 	bl	80063c8 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 8006662:	f7ff fe75 	bl	8006350 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006666:	2200      	movs	r2, #0
 8006668:	2101      	movs	r1, #1
 800666a:	480d      	ldr	r0, [pc, #52]	; (80066a0 <W25Q_Erase_Chip+0x4c>)
 800666c:	f005 f86a 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_CHIP_ERASE;
 8006670:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <W25Q_Erase_Chip+0x50>)
 8006672:	22c7      	movs	r2, #199	; 0xc7
 8006674:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800667a:	2201      	movs	r2, #1
 800667c:	4909      	ldr	r1, [pc, #36]	; (80066a4 <W25Q_Erase_Chip+0x50>)
 800667e:	480a      	ldr	r0, [pc, #40]	; (80066a8 <W25Q_Erase_Chip+0x54>)
 8006680:	f00c fdfd 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006684:	2201      	movs	r2, #1
 8006686:	2101      	movs	r1, #1
 8006688:	4805      	ldr	r0, [pc, #20]	; (80066a0 <W25Q_Erase_Chip+0x4c>)
 800668a:	f005 f85b 	bl	800b744 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800668e:	f7ff fedb 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006692:	f7ff fe7b 	bl	800638c <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006696:	200f      	movs	r0, #15
 8006698:	f7ff fe96 	bl	80063c8 <W25Q_Set_Block_Protect>
}
 800669c:	bf00      	nop
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40020400 	.word	0x40020400
 80066a4:	200009cc 	.word	0x200009cc
 80066a8:	20000310 	.word	0x20000310

080066ac <W25Q_Write_Data>:

void W25Q_Write_Data(uint32_t addr, uint8_t* data, uint32_t sz) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
	W25Q_Wait_Write_End();
 80066b8:	f7ff fec6 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80066bc:	2000      	movs	r0, #0
 80066be:	f7ff fe83 	bl	80063c8 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 80066c2:	f7ff fe45 	bl	8006350 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80066c6:	2200      	movs	r2, #0
 80066c8:	2101      	movs	r1, #1
 80066ca:	4829      	ldr	r0, [pc, #164]	; (8006770 <W25Q_Write_Data+0xc4>)
 80066cc:	f005 f83a 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_PAGE_PROGRAMM;
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <W25Q_Write_Data+0xc8>)
 80066d2:	2202      	movs	r2, #2
 80066d4:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80066d6:	4b28      	ldr	r3, [pc, #160]	; (8006778 <W25Q_Write_Data+0xcc>)
 80066d8:	7fdb      	ldrb	r3, [r3, #31]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01a      	beq.n	8006714 <W25Q_Write_Data+0x68>
	{
		buf[1] = (addr >> 24) & 0xFF;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	0e1b      	lsrs	r3, r3, #24
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	4b23      	ldr	r3, [pc, #140]	; (8006774 <W25Q_Write_Data+0xc8>)
 80066e6:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4b21      	ldr	r3, [pc, #132]	; (8006774 <W25Q_Write_Data+0xc8>)
 80066f0:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <W25Q_Write_Data+0xc8>)
 80066fa:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <W25Q_Write_Data+0xc8>)
 8006702:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006708:	2205      	movs	r2, #5
 800670a:	491a      	ldr	r1, [pc, #104]	; (8006774 <W25Q_Write_Data+0xc8>)
 800670c:	481b      	ldr	r0, [pc, #108]	; (800677c <W25Q_Write_Data+0xd0>)
 800670e:	f00c fdb6 	bl	801327e <HAL_SPI_Transmit>
 8006712:	e014      	b.n	800673e <W25Q_Write_Data+0x92>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	0c1b      	lsrs	r3, r3, #16
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <W25Q_Write_Data+0xc8>)
 800671c:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	b2da      	uxtb	r2, r3
 8006724:	4b13      	ldr	r3, [pc, #76]	; (8006774 <W25Q_Write_Data+0xc8>)
 8006726:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b11      	ldr	r3, [pc, #68]	; (8006774 <W25Q_Write_Data+0xc8>)
 800672e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006734:	2204      	movs	r2, #4
 8006736:	490f      	ldr	r1, [pc, #60]	; (8006774 <W25Q_Write_Data+0xc8>)
 8006738:	4810      	ldr	r0, [pc, #64]	; (800677c <W25Q_Write_Data+0xd0>)
 800673a:	f00c fda0 	bl	801327e <HAL_SPI_Transmit>
	}
	HAL_SPI_Transmit (&W25Q_SPI, data, sz, 1000);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	b29a      	uxth	r2, r3
 8006742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	480c      	ldr	r0, [pc, #48]	; (800677c <W25Q_Write_Data+0xd0>)
 800674a:	f00c fd98 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800674e:	2201      	movs	r2, #1
 8006750:	2101      	movs	r1, #1
 8006752:	4807      	ldr	r0, [pc, #28]	; (8006770 <W25Q_Write_Data+0xc4>)
 8006754:	f004 fff6 	bl	800b744 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006758:	f7ff fe76 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 800675c:	f7ff fe16 	bl	800638c <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006760:	200f      	movs	r0, #15
 8006762:	f7ff fe31 	bl	80063c8 <W25Q_Set_Block_Protect>
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40020400 	.word	0x40020400
 8006774:	200009cc 	.word	0x200009cc
 8006778:	20000988 	.word	0x20000988
 800677c:	20000310 	.word	0x20000310

08006780 <W25Q_Write_Page>:

void W25Q_Write_Page(uint8_t* data, uint32_t page_addr, uint32_t offset, uint32_t sz) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
	if(sz > w25_info.PageSize)
 800678e:	4b3d      	ldr	r3, [pc, #244]	; (8006884 <W25Q_Write_Page+0x104>)
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	4293      	cmp	r3, r2
 8006798:	d902      	bls.n	80067a0 <W25Q_Write_Page+0x20>
		sz=w25_info.PageSize;
 800679a:	4b3a      	ldr	r3, [pc, #232]	; (8006884 <W25Q_Write_Page+0x104>)
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	603b      	str	r3, [r7, #0]
	if((offset+sz) > w25_info.PageSize)
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	4413      	add	r3, r2
 80067a6:	4a37      	ldr	r2, [pc, #220]	; (8006884 <W25Q_Write_Page+0x104>)
 80067a8:	8812      	ldrh	r2, [r2, #0]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d905      	bls.n	80067ba <W25Q_Write_Page+0x3a>
		sz = w25_info.PageSize - offset;
 80067ae:	4b35      	ldr	r3, [pc, #212]	; (8006884 <W25Q_Write_Page+0x104>)
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	603b      	str	r3, [r7, #0]
	page_addr = page_addr * w25_info.PageSize + offset;
 80067ba:	4b32      	ldr	r3, [pc, #200]	; (8006884 <W25Q_Write_Page+0x104>)
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	60bb      	str	r3, [r7, #8]

	W25Q_Wait_Write_End();
 80067cc:	f7ff fe3c 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80067d0:	2000      	movs	r0, #0
 80067d2:	f7ff fdf9 	bl	80063c8 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 80067d6:	f7ff fdbb 	bl	8006350 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80067da:	2200      	movs	r2, #0
 80067dc:	2101      	movs	r1, #1
 80067de:	482a      	ldr	r0, [pc, #168]	; (8006888 <W25Q_Write_Page+0x108>)
 80067e0:	f004 ffb0 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_PAGE_PROGRAMM;
 80067e4:	4b29      	ldr	r3, [pc, #164]	; (800688c <W25Q_Write_Page+0x10c>)
 80067e6:	2202      	movs	r2, #2
 80067e8:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80067ea:	4b26      	ldr	r3, [pc, #152]	; (8006884 <W25Q_Write_Page+0x104>)
 80067ec:	7fdb      	ldrb	r3, [r3, #31]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01a      	beq.n	8006828 <W25Q_Write_Page+0xa8>
	{
		buf[1] = (page_addr >> 24) & 0xFF;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	0e1b      	lsrs	r3, r3, #24
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	4b24      	ldr	r3, [pc, #144]	; (800688c <W25Q_Write_Page+0x10c>)
 80067fa:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 16) & 0xFF;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b22      	ldr	r3, [pc, #136]	; (800688c <W25Q_Write_Page+0x10c>)
 8006804:	709a      	strb	r2, [r3, #2]
		buf[3] = (page_addr >> 8) & 0xFF;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	b2da      	uxtb	r2, r3
 800680c:	4b1f      	ldr	r3, [pc, #124]	; (800688c <W25Q_Write_Page+0x10c>)
 800680e:	70da      	strb	r2, [r3, #3]
		buf[4] = page_addr & 0xFF;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <W25Q_Write_Page+0x10c>)
 8006816:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800681c:	2205      	movs	r2, #5
 800681e:	491b      	ldr	r1, [pc, #108]	; (800688c <W25Q_Write_Page+0x10c>)
 8006820:	481b      	ldr	r0, [pc, #108]	; (8006890 <W25Q_Write_Page+0x110>)
 8006822:	f00c fd2c 	bl	801327e <HAL_SPI_Transmit>
 8006826:	e014      	b.n	8006852 <W25Q_Write_Page+0xd2>
	}
	else
	{
		buf[1] = (page_addr >> 16) & 0xFF;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4b17      	ldr	r3, [pc, #92]	; (800688c <W25Q_Write_Page+0x10c>)
 8006830:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 8) & 0xFF;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	b2da      	uxtb	r2, r3
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <W25Q_Write_Page+0x10c>)
 800683a:	709a      	strb	r2, [r3, #2]
		buf[3] = page_addr & 0xFF;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <W25Q_Write_Page+0x10c>)
 8006842:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006848:	2204      	movs	r2, #4
 800684a:	4910      	ldr	r1, [pc, #64]	; (800688c <W25Q_Write_Page+0x10c>)
 800684c:	4810      	ldr	r0, [pc, #64]	; (8006890 <W25Q_Write_Page+0x110>)
 800684e:	f00c fd16 	bl	801327e <HAL_SPI_Transmit>
	}
	HAL_SPI_Transmit (&W25Q_SPI, data, sz, 1000);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	b29a      	uxth	r2, r3
 8006856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	480c      	ldr	r0, [pc, #48]	; (8006890 <W25Q_Write_Page+0x110>)
 800685e:	f00c fd0e 	bl	801327e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006862:	2201      	movs	r2, #1
 8006864:	2101      	movs	r1, #1
 8006866:	4808      	ldr	r0, [pc, #32]	; (8006888 <W25Q_Write_Page+0x108>)
 8006868:	f004 ff6c 	bl	800b744 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800686c:	f7ff fdec 	bl	8006448 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006870:	f7ff fd8c 	bl	800638c <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006874:	200f      	movs	r0, #15
 8006876:	f7ff fda7 	bl	80063c8 <W25Q_Set_Block_Protect>
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000988 	.word	0x20000988
 8006888:	40020400 	.word	0x40020400
 800688c:	200009cc 	.word	0x200009cc
 8006890:	20000310 	.word	0x20000310

08006894 <W25Q_Read_Data>:

void W25Q_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80068a0:	2200      	movs	r2, #0
 80068a2:	2101      	movs	r1, #1
 80068a4:	4815      	ldr	r0, [pc, #84]	; (80068fc <W25Q_Read_Data+0x68>)
 80068a6:	f004 ff4d 	bl	800b744 <HAL_GPIO_WritePin>
	buf[0] = W25Q_READ;
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <W25Q_Read_Data+0x6c>)
 80068ac:	2203      	movs	r2, #3
 80068ae:	701a      	strb	r2, [r3, #0]
	buf[1] = (addr >> 16) & 0xFF;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	0c1b      	lsrs	r3, r3, #16
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	4b12      	ldr	r3, [pc, #72]	; (8006900 <W25Q_Read_Data+0x6c>)
 80068b8:	705a      	strb	r2, [r3, #1]
	buf[2] = (addr >> 8) & 0xFF;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0a1b      	lsrs	r3, r3, #8
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <W25Q_Read_Data+0x6c>)
 80068c2:	709a      	strb	r2, [r3, #2]
	buf[3] = addr & 0xFF;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <W25Q_Read_Data+0x6c>)
 80068ca:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 80068cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068d0:	2204      	movs	r2, #4
 80068d2:	490b      	ldr	r1, [pc, #44]	; (8006900 <W25Q_Read_Data+0x6c>)
 80068d4:	480b      	ldr	r0, [pc, #44]	; (8006904 <W25Q_Read_Data+0x70>)
 80068d6:	f00c fcd2 	bl	801327e <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4807      	ldr	r0, [pc, #28]	; (8006904 <W25Q_Read_Data+0x70>)
 80068e6:	f00c fe06 	bl	80134f6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80068ea:	2201      	movs	r2, #1
 80068ec:	2101      	movs	r1, #1
 80068ee:	4803      	ldr	r0, [pc, #12]	; (80068fc <W25Q_Read_Data+0x68>)
 80068f0:	f004 ff28 	bl	800b744 <HAL_GPIO_WritePin>
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40020400 	.word	0x40020400
 8006900:	200009cc 	.word	0x200009cc
 8006904:	20000310 	.word	0x20000310

08006908 <W25Q_Read_Page>:

void W25Q_Read_Page(uint8_t* data, uint32_t page_addr, uint32_t offset, uint32_t sz) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
	if(sz > w25_info.PageSize)
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <W25Q_Read_Page+0xfc>)
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4293      	cmp	r3, r2
 8006920:	d902      	bls.n	8006928 <W25Q_Read_Page+0x20>
		sz=w25_info.PageSize;
 8006922:	4b38      	ldr	r3, [pc, #224]	; (8006a04 <W25Q_Read_Page+0xfc>)
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	603b      	str	r3, [r7, #0]
	if((offset+sz) > w25_info.PageSize)
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	4413      	add	r3, r2
 800692e:	4a35      	ldr	r2, [pc, #212]	; (8006a04 <W25Q_Read_Page+0xfc>)
 8006930:	8812      	ldrh	r2, [r2, #0]
 8006932:	4293      	cmp	r3, r2
 8006934:	d905      	bls.n	8006942 <W25Q_Read_Page+0x3a>
		sz = w25_info.PageSize - offset;
 8006936:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <W25Q_Read_Page+0xfc>)
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	603b      	str	r3, [r7, #0]
	page_addr = page_addr * w25_info.PageSize + offset;
 8006942:	4b30      	ldr	r3, [pc, #192]	; (8006a04 <W25Q_Read_Page+0xfc>)
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	60bb      	str	r3, [r7, #8]
	buf[0] = W25Q_FAST_READ;
 8006954:	4b2c      	ldr	r3, [pc, #176]	; (8006a08 <W25Q_Read_Page+0x100>)
 8006956:	220b      	movs	r2, #11
 8006958:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 800695a:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <W25Q_Read_Page+0xfc>)
 800695c:	7fdb      	ldrb	r3, [r3, #31]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d022      	beq.n	80069a8 <W25Q_Read_Page+0xa0>
	{
		buf[1] = (page_addr >> 24) & 0xFF;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	0e1b      	lsrs	r3, r3, #24
 8006966:	b2da      	uxtb	r2, r3
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <W25Q_Read_Page+0x100>)
 800696a:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 16) & 0xFF;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	0c1b      	lsrs	r3, r3, #16
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <W25Q_Read_Page+0x100>)
 8006974:	709a      	strb	r2, [r3, #2]
		buf[3] = (page_addr >> 8) & 0xFF;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	0a1b      	lsrs	r3, r3, #8
 800697a:	b2da      	uxtb	r2, r3
 800697c:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <W25Q_Read_Page+0x100>)
 800697e:	70da      	strb	r2, [r3, #3]
		buf[4] = page_addr & 0xFF;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	b2da      	uxtb	r2, r3
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <W25Q_Read_Page+0x100>)
 8006986:	711a      	strb	r2, [r3, #4]
		buf[5] = 0;
 8006988:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <W25Q_Read_Page+0x100>)
 800698a:	2200      	movs	r2, #0
 800698c:	715a      	strb	r2, [r3, #5]
		HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800698e:	2200      	movs	r2, #0
 8006990:	2101      	movs	r1, #1
 8006992:	481e      	ldr	r0, [pc, #120]	; (8006a0c <W25Q_Read_Page+0x104>)
 8006994:	f004 fed6 	bl	800b744 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&W25Q_SPI, buf, 6, 1000);
 8006998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800699c:	2206      	movs	r2, #6
 800699e:	491a      	ldr	r1, [pc, #104]	; (8006a08 <W25Q_Read_Page+0x100>)
 80069a0:	481b      	ldr	r0, [pc, #108]	; (8006a10 <W25Q_Read_Page+0x108>)
 80069a2:	f00c fc6c 	bl	801327e <HAL_SPI_Transmit>
 80069a6:	e01c      	b.n	80069e2 <W25Q_Read_Page+0xda>
	}
	else
	{
		buf[1] = (page_addr >> 16) & 0xFF;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	0c1b      	lsrs	r3, r3, #16
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <W25Q_Read_Page+0x100>)
 80069b0:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 8) & 0xFF;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	0a1b      	lsrs	r3, r3, #8
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <W25Q_Read_Page+0x100>)
 80069ba:	709a      	strb	r2, [r3, #2]
		buf[3] = page_addr & 0xFF;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <W25Q_Read_Page+0x100>)
 80069c2:	70da      	strb	r2, [r3, #3]
		buf[4] = 0;
 80069c4:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <W25Q_Read_Page+0x100>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80069ca:	2200      	movs	r2, #0
 80069cc:	2101      	movs	r1, #1
 80069ce:	480f      	ldr	r0, [pc, #60]	; (8006a0c <W25Q_Read_Page+0x104>)
 80069d0:	f004 feb8 	bl	800b744 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 80069d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069d8:	2205      	movs	r2, #5
 80069da:	490b      	ldr	r1, [pc, #44]	; (8006a08 <W25Q_Read_Page+0x100>)
 80069dc:	480c      	ldr	r0, [pc, #48]	; (8006a10 <W25Q_Read_Page+0x108>)
 80069de:	f00c fc4e 	bl	801327e <HAL_SPI_Transmit>
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ea:	68f9      	ldr	r1, [r7, #12]
 80069ec:	4808      	ldr	r0, [pc, #32]	; (8006a10 <W25Q_Read_Page+0x108>)
 80069ee:	f00c fd82 	bl	80134f6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80069f2:	2201      	movs	r2, #1
 80069f4:	2101      	movs	r1, #1
 80069f6:	4805      	ldr	r0, [pc, #20]	; (8006a0c <W25Q_Read_Page+0x104>)
 80069f8:	f004 fea4 	bl	800b744 <HAL_GPIO_WritePin>
}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000988 	.word	0x20000988
 8006a08:	200009cc 	.word	0x200009cc
 8006a0c:	40020400 	.word	0x40020400
 8006a10:	20000310 	.word	0x20000310

08006a14 <W25Q_Read_ID>:

uint32_t W25Q_Read_ID(void) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 8006a1a:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <W25Q_Read_ID+0x54>)
 8006a1c:	229f      	movs	r2, #159	; 0x9f
 8006a1e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006a20:	2200      	movs	r2, #0
 8006a22:	2101      	movs	r1, #1
 8006a24:	4811      	ldr	r0, [pc, #68]	; (8006a6c <W25Q_Read_ID+0x58>)
 8006a26:	f004 fe8d 	bl	800b744 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a2e:	2201      	movs	r2, #1
 8006a30:	490d      	ldr	r1, [pc, #52]	; (8006a68 <W25Q_Read_ID+0x54>)
 8006a32:	480f      	ldr	r0, [pc, #60]	; (8006a70 <W25Q_Read_ID+0x5c>)
 8006a34:	f00c fc23 	bl	801327e <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 8006a38:	1d39      	adds	r1, r7, #4
 8006a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a3e:	2203      	movs	r2, #3
 8006a40:	480b      	ldr	r0, [pc, #44]	; (8006a70 <W25Q_Read_ID+0x5c>)
 8006a42:	f00c fd58 	bl	80134f6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006a46:	2201      	movs	r2, #1
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4808      	ldr	r0, [pc, #32]	; (8006a6c <W25Q_Read_ID+0x58>)
 8006a4c:	f004 fe7a 	bl	800b744 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8006a50:	793b      	ldrb	r3, [r7, #4]
 8006a52:	041a      	lsls	r2, r3, #16
 8006a54:	797b      	ldrb	r3, [r7, #5]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	79ba      	ldrb	r2, [r7, #6]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	bf00      	nop
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	200009cc 	.word	0x200009cc
 8006a6c:	40020400 	.word	0x40020400
 8006a70:	20000310 	.word	0x20000310

08006a74 <W25Q_Init>:

void W25Q_Init(void) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
	unsigned int id = W25Q_Read_ID();
 8006a7a:	f7ff ffcb 	bl	8006a14 <W25Q_Read_ID>
 8006a7e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8006a80:	2064      	movs	r0, #100	; 0x64
 8006a82:	f000 fa93 	bl	8006fac <HAL_Delay>
	W25Q_Reset();
 8006a86:	f7ff fac5 	bl	8006014 <W25Q_Reset>
	HAL_Delay(100);
 8006a8a:	2064      	movs	r0, #100	; 0x64
 8006a8c:	f000 fa8e 	bl	8006fac <HAL_Delay>
	id &= 0x0000ffff;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	607b      	str	r3, [r7, #4]
	w25_info.high_cap = 0;
 8006a96:	4b3f      	ldr	r3, [pc, #252]	; (8006b94 <W25Q_Init+0x120>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	77da      	strb	r2, [r3, #31]
	switch(id)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006aa2:	3b11      	subs	r3, #17
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	d870      	bhi.n	8006b8a <W25Q_Init+0x116>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <W25Q_Init+0x3c>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006b33 	.word	0x08006b33
 8006ab4:	08006b2b 	.word	0x08006b2b
 8006ab8:	08006b23 	.word	0x08006b23
 8006abc:	08006b1b 	.word	0x08006b1b
 8006ac0:	08006b13 	.word	0x08006b13
 8006ac4:	08006b0b 	.word	0x08006b0b
 8006ac8:	08006b03 	.word	0x08006b03
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006ae9 	.word	0x08006ae9
 8006ad4:	08006ad9 	.word	0x08006ad9
	{
	case 0x401A:
		w25_info.high_cap=1;
 8006ad8:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <W25Q_Init+0x120>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 8006ade:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <W25Q_Init+0x120>)
 8006ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ae4:	615a      	str	r2, [r3, #20]
		break;
 8006ae6:	e028      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <W25Q_Init+0x120>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 8006aee:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <W25Q_Init+0x120>)
 8006af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af4:	615a      	str	r2, [r3, #20]
		break;
 8006af6:	e020      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 8006af8:	4b26      	ldr	r3, [pc, #152]	; (8006b94 <W25Q_Init+0x120>)
 8006afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006afe:	615a      	str	r2, [r3, #20]
		break;
 8006b00:	e01b      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 8006b02:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <W25Q_Init+0x120>)
 8006b04:	2280      	movs	r2, #128	; 0x80
 8006b06:	615a      	str	r2, [r3, #20]
		break;
 8006b08:	e017      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 8006b0a:	4b22      	ldr	r3, [pc, #136]	; (8006b94 <W25Q_Init+0x120>)
 8006b0c:	2240      	movs	r2, #64	; 0x40
 8006b0e:	615a      	str	r2, [r3, #20]
		break;
 8006b10:	e013      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 8006b12:	4b20      	ldr	r3, [pc, #128]	; (8006b94 <W25Q_Init+0x120>)
 8006b14:	2220      	movs	r2, #32
 8006b16:	615a      	str	r2, [r3, #20]
		break;
 8006b18:	e00f      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <W25Q_Init+0x120>)
 8006b1c:	2210      	movs	r2, #16
 8006b1e:	615a      	str	r2, [r3, #20]
		break;
 8006b20:	e00b      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 8006b22:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <W25Q_Init+0x120>)
 8006b24:	2208      	movs	r2, #8
 8006b26:	615a      	str	r2, [r3, #20]
		break;
 8006b28:	e007      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <W25Q_Init+0x120>)
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	615a      	str	r2, [r3, #20]
		break;
 8006b30:	e003      	b.n	8006b3a <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 8006b32:	4b18      	ldr	r3, [pc, #96]	; (8006b94 <W25Q_Init+0x120>)
 8006b34:	2202      	movs	r2, #2
 8006b36:	615a      	str	r2, [r3, #20]
		break;
 8006b38:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 8006b3a:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <W25Q_Init+0x120>)
 8006b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b40:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <W25Q_Init+0x120>)
 8006b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b48:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8006b4a:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <W25Q_Init+0x120>)
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	4a10      	ldr	r2, [pc, #64]	; (8006b94 <W25Q_Init+0x120>)
 8006b52:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8006b54:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <W25Q_Init+0x120>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4a0e      	ldr	r2, [pc, #56]	; (8006b94 <W25Q_Init+0x120>)
 8006b5a:	6892      	ldr	r2, [r2, #8]
 8006b5c:	fb02 f303 	mul.w	r3, r2, r3
 8006b60:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <W25Q_Init+0x120>)
 8006b62:	8812      	ldrh	r2, [r2, #0]
 8006b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b68:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <W25Q_Init+0x120>)
 8006b6a:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <W25Q_Init+0x120>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <W25Q_Init+0x120>)
 8006b74:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8006b76:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <W25Q_Init+0x120>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	4a06      	ldr	r2, [pc, #24]	; (8006b94 <W25Q_Init+0x120>)
 8006b7c:	6892      	ldr	r2, [r2, #8]
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	0a9b      	lsrs	r3, r3, #10
 8006b84:	4a03      	ldr	r2, [pc, #12]	; (8006b94 <W25Q_Init+0x120>)
 8006b86:	6193      	str	r3, [r2, #24]
 8006b88:	e000      	b.n	8006b8c <W25Q_Init+0x118>
		return;
 8006b8a:	bf00      	nop
}
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000988 	.word	0x20000988

08006b98 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	ed87 0a05 	vstr	s0, [r7, #20]
 8006ba2:	edc7 0a04 	vstr	s1, [r7, #16]
 8006ba6:	ed87 1a03 	vstr	s2, [r7, #12]
 8006baa:	edc7 1a02 	vstr	s3, [r7, #8]
 8006bae:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bbe:	edd7 6a01 	vldr	s13, [r7, #4]
 8006bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006bca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006bce:	ed97 7a03 	vldr	s14, [r7, #12]
 8006bd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8006be2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006be6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	2180      	movs	r1, #128	; 0x80
 8006c00:	4809      	ldr	r0, [pc, #36]	; (8006c28 <XPT2046_Init+0x34>)
 8006c02:	f00c fb3c 	bl	801327e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4806      	ldr	r0, [pc, #24]	; (8006c28 <XPT2046_Init+0x34>)
 8006c10:	f00c fb35 	bl	801327e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4802      	ldr	r0, [pc, #8]	; (8006c28 <XPT2046_Init+0x34>)
 8006c1e:	f00c fb2e 	bl	801327e <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8006c22:	bf00      	nop
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000368 	.word	0x20000368

08006c2c <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8006c36:	2001      	movs	r0, #1
 8006c38:	f000 f9b8 	bl	8006fac <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8006c3c:	1df9      	adds	r1, r7, #7
 8006c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c42:	2201      	movs	r2, #1
 8006c44:	4814      	ldr	r0, [pc, #80]	; (8006c98 <getRaw+0x6c>)
 8006c46:	f00c fb1a 	bl	801327e <HAL_SPI_Transmit>
	address = 0x00;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006c4e:	f107 020b 	add.w	r2, r7, #11
 8006c52:	1df9      	adds	r1, r7, #7
 8006c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	480e      	ldr	r0, [pc, #56]	; (8006c98 <getRaw+0x6c>)
 8006c5e:	f00c fd5b 	bl	8013718 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8006c66:	2300      	movs	r3, #0
 8006c68:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006c6a:	f107 020b 	add.w	r2, r7, #11
 8006c6e:	1df9      	adds	r1, r7, #7
 8006c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	2301      	movs	r3, #1
 8006c78:	4807      	ldr	r0, [pc, #28]	; (8006c98 <getRaw+0x6c>)
 8006c7a:	f00c fd4d 	bl	8013718 <HAL_SPI_TransmitReceive>
	LSB = data;
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8006c82:	89fb      	ldrh	r3, [r7, #14]
 8006c84:	021a      	lsls	r2, r3, #8
 8006c86:	89bb      	ldrh	r3, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	10db      	asrs	r3, r3, #3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	bf00      	nop
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000368 	.word	0x20000368

08006c9c <X>:

inline static uint16_t X(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8006ca2:	20d0      	movs	r0, #208	; 0xd0
 8006ca4:	f7ff ffc2 	bl	8006c2c <getRaw>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006d00 <X+0x64>
 8006cb6:	eddf 1a13 	vldr	s3, [pc, #76]	; 8006d04 <X+0x68>
 8006cba:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006d08 <X+0x6c>
 8006cbe:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006d0c <X+0x70>
 8006cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc6:	f7ff ff67 	bl	8006b98 <remap>
 8006cca:	eef0 7a40 	vmov.f32	s15, s0
 8006cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd2:	ee17 3a90 	vmov	r3, s15
 8006cd6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8006cde:	3303      	adds	r3, #3
 8006ce0:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d006      	beq.n	8006cf6 <X+0x5a>
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	f240 321e 	movw	r2, #798	; 0x31e
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d801      	bhi.n	8006cf6 <X+0x5a>
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	e000      	b.n	8006cf8 <X+0x5c>
	else return 0;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	4447c000 	.word	0x4447c000
 8006d04:	00000000 	.word	0x00000000
 8006d08:	457a0000 	.word	0x457a0000
 8006d0c:	43480000 	.word	0x43480000

08006d10 <Y>:

inline static uint16_t Y(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8006d16:	2090      	movs	r0, #144	; 0x90
 8006d18:	f7ff ff88 	bl	8006c2c <getRaw>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006d68 <Y+0x58>
 8006d2a:	eddf 1a10 	vldr	s3, [pc, #64]	; 8006d6c <Y+0x5c>
 8006d2e:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006d70 <Y+0x60>
 8006d32:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006d74 <Y+0x64>
 8006d36:	eeb0 0a67 	vmov.f32	s0, s15
 8006d3a:	f7ff ff2d 	bl	8006b98 <remap>
 8006d3e:	eef0 7a40 	vmov.f32	s15, s0
 8006d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d46:	ee17 3a90 	vmov	r3, s15
 8006d4a:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <Y+0x4e>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006d58:	d801      	bhi.n	8006d5e <Y+0x4e>
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	e000      	b.n	8006d60 <Y+0x50>
	else return 0;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	43ef8000 	.word	0x43ef8000
 8006d6c:	00000000 	.word	0x00000000
 8006d70:	456d8000 	.word	0x456d8000
 8006d74:	43480000 	.word	0x43480000

08006d78 <getX>:

uint16_t getX(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <getX+0x30>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8006d84:	e007      	b.n	8006d96 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8006d86:	f7ff ff89 	bl	8006c9c <X>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	80bb      	strh	r3, [r7, #4]
 8006d8e:	f7ff ff85 	bl	8006c9c <X>
 8006d92:	4603      	mov	r3, r0
 8006d94:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8006d96:	88ba      	ldrh	r2, [r7, #4]
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d1f3      	bne.n	8006d86 <getX+0xe>
		}
		return x[0];
 8006d9e:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	08052630 	.word	0x08052630

08006dac <getY>:

uint16_t getY(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <getY+0x30>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006db8:	e007      	b.n	8006dca <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8006dba:	f7ff ffa9 	bl	8006d10 <Y>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	80bb      	strh	r3, [r7, #4]
 8006dc2:	f7ff ffa5 	bl	8006d10 <Y>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8006dca:	88ba      	ldrh	r2, [r7, #4]
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d1f3      	bne.n	8006dba <getY+0xe>
		}
		return y[0];
 8006dd2:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	08052630 	.word	0x08052630

08006de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <HAL_Init+0x40>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <HAL_Init+0x40>)
 8006dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_Init+0x40>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <HAL_Init+0x40>)
 8006df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006dfc:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <HAL_Init+0x40>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <HAL_Init+0x40>)
 8006e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e08:	2003      	movs	r0, #3
 8006e0a:	f000 fbbb 	bl	8007584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f000 f83b 	bl	8006e8a <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e14:	f7fe fb42 	bl	800549c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40023c00 	.word	0x40023c00

08006e24 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006e28:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <HAL_DeInit+0x54>)
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <HAL_DeInit+0x54>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <HAL_DeInit+0x54>)
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006e3e:	4b0e      	ldr	r3, [pc, #56]	; (8006e78 <HAL_DeInit+0x54>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006e44:	4b0c      	ldr	r3, [pc, #48]	; (8006e78 <HAL_DeInit+0x54>)
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <HAL_DeInit+0x54>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_DeInit+0x54>)
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <HAL_DeInit+0x54>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006e60:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <HAL_DeInit+0x54>)
 8006e62:	f04f 32ff 	mov.w	r2, #4294967295
 8006e66:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006e68:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <HAL_DeInit+0x54>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006e6e:	f000 f805 	bl	8006e7c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40023800 	.word	0x40023800

08006e7c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <HAL_InitTick+0x56>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <HAL_InitTick+0x5a>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ea0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fbb2 	bl	8007612 <HAL_SYSTICK_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e00e      	b.n	8006ed6 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d80a      	bhi.n	8006ed4 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	f000 fb68 	bl	800759a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006eca:	4a07      	ldr	r2, [pc, #28]	; (8006ee8 <HAL_InitTick+0x5e>)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e000      	b.n	8006ed6 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000058 	.word	0x20000058
 8006ee4:	20000060 	.word	0x20000060
 8006ee8:	2000005c 	.word	0x2000005c

08006eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_IncTick+0x20>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_IncTick+0x24>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4413      	add	r3, r2
 8006efc:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <HAL_IncTick+0x24>)
 8006efe:	6013      	str	r3, [r2, #0]
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000060 	.word	0x20000060
 8006f10:	200009d8 	.word	0x200009d8

08006f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return uwTick;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <HAL_GetTick+0x14>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	200009d8 	.word	0x200009d8

08006f2c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006f30:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <HAL_GetTickPrio+0x14>)
 8006f32:	681b      	ldr	r3, [r3, #0]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	2000005c 	.word	0x2000005c

08006f44 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_SetTickFreq+0x48>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	79fa      	ldrb	r2, [r7, #7]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d012      	beq.n	8006f82 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_SetTickFreq+0x48>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006f62:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_SetTickFreq+0x48>)
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_SetTickFreq+0x4c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff ff8c 	bl	8006e8a <HAL_InitTick>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8006f7c:	4a03      	ldr	r2, [pc, #12]	; (8006f8c <HAL_SetTickFreq+0x48>)
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000060 	.word	0x20000060
 8006f90:	2000005c 	.word	0x2000005c

08006f94 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006f98:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <HAL_GetTickFreq+0x14>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000060 	.word	0x20000060

08006fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fb4:	f7ff ffae 	bl	8006f14 <HAL_GetTick>
 8006fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d005      	beq.n	8006fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <HAL_Delay+0x44>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006fd2:	bf00      	nop
 8006fd4:	f7ff ff9e 	bl	8006f14 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d8f7      	bhi.n	8006fd4 <HAL_Delay+0x28>
  {
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000060 	.word	0x20000060

08006ff4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <HAL_SuspendTick+0x1c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a04      	ldr	r2, [pc, #16]	; (8007010 <HAL_SuspendTick+0x1c>)
 8006ffe:	f023 0302 	bic.w	r3, r3, #2
 8007002:	6013      	str	r3, [r2, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e010 	.word	0xe000e010

08007014 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HAL_ResumeTick+0x1c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a04      	ldr	r2, [pc, #16]	; (8007030 <HAL_ResumeTick+0x1c>)
 800701e:	f043 0302 	orr.w	r3, r3, #2
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	e000e010 	.word	0xe000e010

08007034 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <HAL_GetHalVersion+0x10>)
}
 800703a:	4618      	mov	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	01070d00 	.word	0x01070d00

08007048 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <HAL_GetREVID+0x14>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	0c1b      	lsrs	r3, r3, #16
}
 8007052:	4618      	mov	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	e0042000 	.word	0xe0042000

08007060 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <HAL_GetDEVID+0x18>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800706c:	4618      	mov	r0, r3
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	e0042000 	.word	0xe0042000

0800707c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a04      	ldr	r2, [pc, #16]	; (8007098 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	6053      	str	r3, [r2, #4]
}
 800708c:	bf00      	nop
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	e0042000 	.word	0xe0042000

0800709c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	6053      	str	r3, [r2, #4]
}
 80070ac:	bf00      	nop
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	e0042000 	.word	0xe0042000

080070bc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80070c6:	f043 0302 	orr.w	r3, r3, #2
 80070ca:	6053      	str	r3, [r2, #4]
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e0042000 	.word	0xe0042000

080070dc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80070e6:	f023 0302 	bic.w	r3, r3, #2
 80070ea:	6053      	str	r3, [r2, #4]
}
 80070ec:	bf00      	nop
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	e0042000 	.word	0xe0042000

080070fc <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4a04      	ldr	r2, [pc, #16]	; (8007118 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8007106:	f043 0304 	orr.w	r3, r3, #4
 800710a:	6053      	str	r3, [r2, #4]
}
 800710c:	bf00      	nop
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	e0042000 	.word	0xe0042000

0800711c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4a04      	ldr	r2, [pc, #16]	; (8007138 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8007126:	f023 0304 	bic.w	r3, r3, #4
 800712a:	6053      	str	r3, [r2, #4]
}
 800712c:	bf00      	nop
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	e0042000 	.word	0xe0042000

0800713c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <HAL_EnableCompensationCell+0x14>)
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
}
 8007146:	bf00      	nop
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	42270400 	.word	0x42270400

08007154 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8007154:	b480      	push	{r7}
 8007156:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8007158:	4b03      	ldr	r3, [pc, #12]	; (8007168 <HAL_DisableCompensationCell+0x14>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	42270400 	.word	0x42270400

0800716c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8007170:	4b03      	ldr	r3, [pc, #12]	; (8007180 <HAL_GetUIDw0+0x14>)
 8007172:	681b      	ldr	r3, [r3, #0]
}
 8007174:	4618      	mov	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	1fff7a10 	.word	0x1fff7a10

08007184 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8007188:	4b03      	ldr	r3, [pc, #12]	; (8007198 <HAL_GetUIDw1+0x14>)
 800718a:	681b      	ldr	r3, [r3, #0]
}
 800718c:	4618      	mov	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	1fff7a14 	.word	0x1fff7a14

0800719c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80071a0:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <HAL_GetUIDw2+0x14>)
 80071a2:	681b      	ldr	r3, [r3, #0]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	1fff7a18 	.word	0x1fff7a18

080071b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071c4:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <__NVIC_SetPriorityGrouping+0x44>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071d0:	4013      	ands	r3, r2
 80071d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80071e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071e6:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <__NVIC_SetPriorityGrouping+0x44>)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	60d3      	str	r3, [r2, #12]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	e000ed00 	.word	0xe000ed00

080071fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007200:	4b04      	ldr	r3, [pc, #16]	; (8007214 <__NVIC_GetPriorityGrouping+0x18>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	f003 0307 	and.w	r3, r3, #7
}
 800720a:	4618      	mov	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	db0b      	blt.n	8007242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	f003 021f 	and.w	r2, r3, #31
 8007230:	4907      	ldr	r1, [pc, #28]	; (8007250 <__NVIC_EnableIRQ+0x38>)
 8007232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	2001      	movs	r0, #1
 800723a:	fa00 f202 	lsl.w	r2, r0, r2
 800723e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	e000e100 	.word	0xe000e100

08007254 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800725e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007262:	2b00      	cmp	r3, #0
 8007264:	db12      	blt.n	800728c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	f003 021f 	and.w	r2, r3, #31
 800726c:	490a      	ldr	r1, [pc, #40]	; (8007298 <__NVIC_DisableIRQ+0x44>)
 800726e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	2001      	movs	r0, #1
 8007276:	fa00 f202 	lsl.w	r2, r0, r2
 800727a:	3320      	adds	r3, #32
 800727c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007280:	f3bf 8f4f 	dsb	sy
}
 8007284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007286:	f3bf 8f6f 	isb	sy
}
 800728a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	e000e100 	.word	0xe000e100

0800729c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	db0e      	blt.n	80072cc <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80072ae:	4a0b      	ldr	r2, [pc, #44]	; (80072dc <__NVIC_GetPendingIRQ+0x40>)
 80072b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	3340      	adds	r3, #64	; 0x40
 80072b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	e000      	b.n	80072ce <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80072cc:	2300      	movs	r3, #0
  }
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000e100 	.word	0xe000e100

080072e0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	db0c      	blt.n	800730c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f003 021f 	and.w	r2, r3, #31
 80072f8:	4907      	ldr	r1, [pc, #28]	; (8007318 <__NVIC_SetPendingIRQ+0x38>)
 80072fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	2001      	movs	r0, #1
 8007302:	fa00 f202 	lsl.w	r2, r0, r2
 8007306:	3340      	adds	r3, #64	; 0x40
 8007308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	e000e100 	.word	0xe000e100

0800731c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732a:	2b00      	cmp	r3, #0
 800732c:	db0c      	blt.n	8007348 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	f003 021f 	and.w	r2, r3, #31
 8007334:	4907      	ldr	r1, [pc, #28]	; (8007354 <__NVIC_ClearPendingIRQ+0x38>)
 8007336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	2001      	movs	r0, #1
 800733e:	fa00 f202 	lsl.w	r2, r0, r2
 8007342:	3360      	adds	r3, #96	; 0x60
 8007344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	e000e100 	.word	0xe000e100

08007358 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007366:	2b00      	cmp	r3, #0
 8007368:	db0e      	blt.n	8007388 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800736a:	4a0b      	ldr	r2, [pc, #44]	; (8007398 <__NVIC_GetActive+0x40>)
 800736c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	3380      	adds	r3, #128	; 0x80
 8007374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	e000      	b.n	800738a <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8007388:	2300      	movs	r3, #0
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	e000e100 	.word	0xe000e100

0800739c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	6039      	str	r1, [r7, #0]
 80073a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	db0a      	blt.n	80073c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	490c      	ldr	r1, [pc, #48]	; (80073e8 <__NVIC_SetPriority+0x4c>)
 80073b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ba:	0112      	lsls	r2, r2, #4
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	440b      	add	r3, r1
 80073c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073c4:	e00a      	b.n	80073dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	4908      	ldr	r1, [pc, #32]	; (80073ec <__NVIC_SetPriority+0x50>)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	3b04      	subs	r3, #4
 80073d4:	0112      	lsls	r2, r2, #4
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	440b      	add	r3, r1
 80073da:	761a      	strb	r2, [r3, #24]
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	e000e100 	.word	0xe000e100
 80073ec:	e000ed00 	.word	0xe000ed00

080073f0 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 80073fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db09      	blt.n	8007416 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8007402:	4a0d      	ldr	r2, [pc, #52]	; (8007438 <__NVIC_GetPriority+0x48>)
 8007404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007408:	4413      	add	r3, r2
 800740a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800740e:	b2db      	uxtb	r3, r3
 8007410:	091b      	lsrs	r3, r3, #4
 8007412:	b2db      	uxtb	r3, r3
 8007414:	e009      	b.n	800742a <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8007416:	4a09      	ldr	r2, [pc, #36]	; (800743c <__NVIC_GetPriority+0x4c>)
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	3b04      	subs	r3, #4
 8007420:	4413      	add	r3, r2
 8007422:	7e1b      	ldrb	r3, [r3, #24]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	091b      	lsrs	r3, r3, #4
 8007428:	b2db      	uxtb	r3, r3
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	e000e100 	.word	0xe000e100
 800743c:	e000ed00 	.word	0xe000ed00

08007440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007440:	b480      	push	{r7}
 8007442:	b089      	sub	sp, #36	; 0x24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f1c3 0307 	rsb	r3, r3, #7
 800745a:	2b04      	cmp	r3, #4
 800745c:	bf28      	it	cs
 800745e:	2304      	movcs	r3, #4
 8007460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3304      	adds	r3, #4
 8007466:	2b06      	cmp	r3, #6
 8007468:	d902      	bls.n	8007470 <NVIC_EncodePriority+0x30>
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3b03      	subs	r3, #3
 800746e:	e000      	b.n	8007472 <NVIC_EncodePriority+0x32>
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007474:	f04f 32ff 	mov.w	r2, #4294967295
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	43da      	mvns	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	401a      	ands	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007488:	f04f 31ff 	mov.w	r1, #4294967295
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	fa01 f303 	lsl.w	r3, r1, r3
 8007492:	43d9      	mvns	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007498:	4313      	orrs	r3, r2
         );
}
 800749a:	4618      	mov	r0, r3
 800749c:	3724      	adds	r7, #36	; 0x24
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b089      	sub	sp, #36	; 0x24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f1c3 0307 	rsb	r3, r3, #7
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	bf28      	it	cs
 80074c6:	2304      	movcs	r3, #4
 80074c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	3304      	adds	r3, #4
 80074ce:	2b06      	cmp	r3, #6
 80074d0:	d902      	bls.n	80074d8 <NVIC_DecodePriority+0x32>
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3b03      	subs	r3, #3
 80074d6:	e000      	b.n	80074da <NVIC_DecodePriority+0x34>
 80074d8:	2300      	movs	r3, #0
 80074da:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	40da      	lsrs	r2, r3
 80074e2:	f04f 31ff 	mov.w	r1, #4294967295
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	43db      	mvns	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	43da      	mvns	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	401a      	ands	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	601a      	str	r2, [r3, #0]
}
 8007508:	bf00      	nop
 800750a:	3724      	adds	r7, #36	; 0x24
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007518:	f3bf 8f4f 	dsb	sy
}
 800751c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <__NVIC_SystemReset+0x24>)
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007526:	4904      	ldr	r1, [pc, #16]	; (8007538 <__NVIC_SystemReset+0x24>)
 8007528:	4b04      	ldr	r3, [pc, #16]	; (800753c <__NVIC_SystemReset+0x28>)
 800752a:	4313      	orrs	r3, r2
 800752c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800752e:	f3bf 8f4f 	dsb	sy
}
 8007532:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <__NVIC_SystemReset+0x20>
 8007538:	e000ed00 	.word	0xe000ed00
 800753c:	05fa0004 	.word	0x05fa0004

08007540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3b01      	subs	r3, #1
 800754c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007550:	d301      	bcc.n	8007556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007552:	2301      	movs	r3, #1
 8007554:	e00f      	b.n	8007576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007556:	4a0a      	ldr	r2, [pc, #40]	; (8007580 <SysTick_Config+0x40>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3b01      	subs	r3, #1
 800755c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800755e:	210f      	movs	r1, #15
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	f7ff ff1a 	bl	800739c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <SysTick_Config+0x40>)
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800756e:	4b04      	ldr	r3, [pc, #16]	; (8007580 <SysTick_Config+0x40>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	e000e010 	.word	0xe000e010

08007584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff fe11 	bl	80071b4 <__NVIC_SetPriorityGrouping>
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	4603      	mov	r3, r0
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075ac:	f7ff fe26 	bl	80071fc <__NVIC_GetPriorityGrouping>
 80075b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7ff ff42 	bl	8007440 <NVIC_EncodePriority>
 80075bc:	4602      	mov	r2, r0
 80075be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fee9 	bl	800739c <__NVIC_SetPriority>
}
 80075ca:	bf00      	nop
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	4603      	mov	r3, r0
 80075da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fe19 	bl	8007218 <__NVIC_EnableIRQ>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	4603      	mov	r3, r0
 80075f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80075f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fe29 	bl	8007254 <__NVIC_DisableIRQ>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800760e:	f7ff ff81 	bl	8007514 <__NVIC_SystemReset>

08007612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff ff90 	bl	8007540 <SysTick_Config>
 8007620:	4603      	mov	r3, r0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800762a:	b480      	push	{r7}
 800762c:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800762e:	f3bf 8f5f 	dmb	sy
}
 8007632:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <HAL_MPU_Disable+0x26>)
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	4a05      	ldr	r2, [pc, #20]	; (8007650 <HAL_MPU_Disable+0x26>)
 800763a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763e:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8007640:	4b04      	ldr	r3, [pc, #16]	; (8007654 <HAL_MPU_Disable+0x2a>)
 8007642:	2200      	movs	r2, #0
 8007644:	605a      	str	r2, [r3, #4]
}
 8007646:	bf00      	nop
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	e000ed00 	.word	0xe000ed00
 8007654:	e000ed90 	.word	0xe000ed90

08007658 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007660:	4a0b      	ldr	r2, [pc, #44]	; (8007690 <HAL_MPU_Enable+0x38>)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f043 0301 	orr.w	r3, r3, #1
 8007668:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800766a:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <HAL_MPU_Enable+0x3c>)
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	4a09      	ldr	r2, [pc, #36]	; (8007694 <HAL_MPU_Enable+0x3c>)
 8007670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007674:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007676:	f3bf 8f4f 	dsb	sy
}
 800767a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800767c:	f3bf 8f6f 	isb	sy
}
 8007680:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	e000ed90 	.word	0xe000ed90
 8007694:	e000ed00 	.word	0xe000ed00

08007698 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	785a      	ldrb	r2, [r3, #1]
 80076a4:	4b1d      	ldr	r3, [pc, #116]	; (800771c <HAL_MPU_ConfigRegion+0x84>)
 80076a6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d029      	beq.n	8007704 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80076b0:	4a1a      	ldr	r2, [pc, #104]	; (800771c <HAL_MPU_ConfigRegion+0x84>)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7b1b      	ldrb	r3, [r3, #12]
 80076bc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7adb      	ldrb	r3, [r3, #11]
 80076c2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80076c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7a9b      	ldrb	r3, [r3, #10]
 80076ca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80076cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7b5b      	ldrb	r3, [r3, #13]
 80076d2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80076d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7b9b      	ldrb	r3, [r3, #14]
 80076da:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80076dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7bdb      	ldrb	r3, [r3, #15]
 80076e2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80076e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7a5b      	ldrb	r3, [r3, #9]
 80076ea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80076ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7a1b      	ldrb	r3, [r3, #8]
 80076f2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80076f4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80076fc:	4a07      	ldr	r2, [pc, #28]	; (800771c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076fe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007700:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8007702:	e005      	b.n	8007710 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_MPU_ConfigRegion+0x84>)
 8007706:	2200      	movs	r2, #0
 8007708:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 800770a:	4b04      	ldr	r3, [pc, #16]	; (800771c <HAL_MPU_ConfigRegion+0x84>)
 800770c:	2200      	movs	r2, #0
 800770e:	611a      	str	r2, [r3, #16]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	e000ed90 	.word	0xe000ed90

08007720 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8007724:	f7ff fd6a 	bl	80071fc <__NVIC_GetPriorityGrouping>
 8007728:	4603      	mov	r3, r0
}
 800772a:	4618      	mov	r0, r3
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 800773e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fe54 	bl	80073f0 <__NVIC_GetPriority>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	f7ff feaa 	bl	80074a6 <NVIC_DecodePriority>
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	4603      	mov	r3, r0
 8007762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fdb9 	bl	80072e0 <__NVIC_SetPendingIRQ>
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	4603      	mov	r3, r0
 800777e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff fd89 	bl	800729c <__NVIC_GetPendingIRQ>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800779e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fdba 	bl	800731c <__NVIC_ClearPendingIRQ>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80077ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fdca 	bl	8007358 <__NVIC_GetActive>
 80077c4:	4603      	mov	r3, r0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d106      	bne.n	80077ea <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80077dc:	4b09      	ldr	r3, [pc, #36]	; (8007804 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a08      	ldr	r2, [pc, #32]	; (8007804 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80077e2:	f043 0304 	orr.w	r3, r3, #4
 80077e6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80077e8:	e005      	b.n	80077f6 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80077ea:	4b06      	ldr	r3, [pc, #24]	; (8007804 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a05      	ldr	r2, [pc, #20]	; (8007804 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80077f0:	f023 0304 	bic.w	r3, r3, #4
 80077f4:	6013      	str	r3, [r2, #0]
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	e000e010 	.word	0xe000e010

08007808 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800780c:	f000 f802 	bl	8007814 <HAL_SYSTICK_Callback>
}
 8007810:	bf00      	nop
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e014      	b.n	800785e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	791b      	ldrb	r3, [r3, #4]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fd fe51 	bl	80054ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e00f      	b.n	8007898 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fd fe78 	bl	8005574 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	795b      	ldrb	r3, [r3, #5]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_DAC_Start+0x16>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e040      	b.n	8007938 <HAL_DAC_Start+0x98>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6819      	ldr	r1, [r3, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2201      	movs	r2, #1
 80078d0:	409a      	lsls	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10f      	bne.n	8007900 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80078ea:	2b3c      	cmp	r3, #60	; 0x3c
 80078ec:	d11d      	bne.n	800792a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	605a      	str	r2, [r3, #4]
 80078fe:	e014      	b.n	800792a <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	213c      	movs	r1, #60	; 0x3c
 8007912:	fa01 f303 	lsl.w	r3, r1, r3
 8007916:	429a      	cmp	r2, r3
 8007918:	d107      	bne.n	800792a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0202 	orr.w	r2, r2, #2
 8007928:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6819      	ldr	r1, [r3, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2201      	movs	r2, #1
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	43da      	mvns	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	400a      	ands	r2, r1
 8007968:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	795b      	ldrb	r3, [r3, #5]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d101      	bne.n	80079a0 <HAL_DAC_Start_DMA+0x22>
 800799c:	2302      	movs	r3, #2
 800799e:	e0ab      	b.n	8007af8 <HAL_DAC_Start_DMA+0x17a>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d12f      	bne.n	8007a12 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	4a52      	ldr	r2, [pc, #328]	; (8007b00 <HAL_DAC_Start_DMA+0x182>)
 80079b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	4a51      	ldr	r2, [pc, #324]	; (8007b04 <HAL_DAC_Start_DMA+0x186>)
 80079c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	4a50      	ldr	r2, [pc, #320]	; (8007b08 <HAL_DAC_Start_DMA+0x18a>)
 80079c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d013      	beq.n	8007a08 <HAL_DAC_Start_DMA+0x8a>
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d845      	bhi.n	8007a72 <HAL_DAC_Start_DMA+0xf4>
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_DAC_Start_DMA+0x76>
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d005      	beq.n	80079fe <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80079f2:	e03e      	b.n	8007a72 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	613b      	str	r3, [r7, #16]
        break;
 80079fc:	e03c      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	613b      	str	r3, [r7, #16]
        break;
 8007a06:	e037      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3310      	adds	r3, #16
 8007a0e:	613b      	str	r3, [r7, #16]
        break;
 8007a10:	e032      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	4a3d      	ldr	r2, [pc, #244]	; (8007b0c <HAL_DAC_Start_DMA+0x18e>)
 8007a18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	4a3c      	ldr	r2, [pc, #240]	; (8007b10 <HAL_DAC_Start_DMA+0x192>)
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	4a3b      	ldr	r2, [pc, #236]	; (8007b14 <HAL_DAC_Start_DMA+0x196>)
 8007a28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a38:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d013      	beq.n	8007a68 <HAL_DAC_Start_DMA+0xea>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d817      	bhi.n	8007a76 <HAL_DAC_Start_DMA+0xf8>
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_DAC_Start_DMA+0xd6>
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d005      	beq.n	8007a5e <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007a52:	e010      	b.n	8007a76 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	613b      	str	r3, [r7, #16]
        break;
 8007a5c:	e00c      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3318      	adds	r3, #24
 8007a64:	613b      	str	r3, [r7, #16]
        break;
 8007a66:	e007      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	331c      	adds	r3, #28
 8007a6e:	613b      	str	r3, [r7, #16]
        break;
 8007a70:	e002      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007a72:	bf00      	nop
 8007a74:	e000      	b.n	8007a78 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007a76:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d111      	bne.n	8007aa2 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a8c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6898      	ldr	r0, [r3, #8]
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	f000 fca5 	bl	80083e6 <HAL_DMA_Start_IT>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	e010      	b.n	8007ac4 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007ab0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	68d8      	ldr	r0, [r3, #12]
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	f000 fc93 	bl	80083e6 <HAL_DMA_Start_IT>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10c      	bne.n	8007aea <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6819      	ldr	r1, [r3, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2201      	movs	r2, #1
 8007ade:	409a      	lsls	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e005      	b.n	8007af6 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	08007dfb 	.word	0x08007dfb
 8007b04:	08007e1d 	.word	0x08007e1d
 8007b08:	08007e39 	.word	0x08007e39
 8007b0c:	080080ed 	.word	0x080080ed
 8007b10:	0800810f 	.word	0x0800810f
 8007b14:	0800812b 	.word	0x0800812b

08007b18 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6819      	ldr	r1, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f003 0310 	and.w	r3, r3, #16
 8007b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	43da      	mvns	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	400a      	ands	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6819      	ldr	r1, [r3, #0]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43da      	mvns	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	400a      	ands	r2, r1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10d      	bne.n	8007b7e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fc95 	bl	8008496 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e00c      	b.n	8007b98 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fc87 	bl	8008496 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007b96:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bbe:	d120      	bne.n	8007c02 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bce:	d118      	bne.n	8007c02 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f043 0201 	orr.w	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bfa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f870 	bl	8007ce2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c10:	d120      	bne.n	8007c54 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c20:	d118      	bne.n	8007c54 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2204      	movs	r2, #4
 8007c26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f043 0202 	orr.w	r2, r3, #2
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007c3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007c4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa28 	bl	80080a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4413      	add	r3, r2
 8007c80:	3308      	adds	r3, #8
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e004      	b.n	8007c90 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3314      	adds	r3, #20
 8007c8e:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	461a      	mov	r2, r3
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e003      	b.n	8007d1c <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	795b      	ldrb	r3, [r3, #5]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <HAL_DAC_ConfigChannel+0x18>
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e03c      	b.n	8007dbc <HAL_DAC_ConfigChannel+0x92>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f003 0310 	and.w	r3, r3, #16
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6819      	ldr	r1, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	22c0      	movs	r2, #192	; 0xc0
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	43da      	mvns	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	400a      	ands	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	791b      	ldrb	r3, [r3, #4]
 8007dd4:	b2db      	uxtb	r3, r3
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff ff4c 	bl	8007ca6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	711a      	strb	r2, [r3, #4]
}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff ff45 	bl	8007cba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f043 0204 	orr.w	r2, r3, #4
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ff3b 	bl	8007cce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	711a      	strb	r2, [r3, #4]
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	795b      	ldrb	r3, [r3, #5]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_DACEx_DualStart+0x18>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e03b      	b.n	8007ef6 <HAL_DACEx_DualStart+0x90>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007ea8:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007eb4:	2b3c      	cmp	r3, #60	; 0x3c
 8007eb6:	d103      	bne.n	8007ec0 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007eca:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007ece:	d103      	bne.n	8007ed8 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f043 0302 	orr.w	r3, r3, #2
 8007ed6:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6859      	ldr	r1, [r3, #4]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0201 	bic.w	r2, r2, #1
 8007f18:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e024      	b.n	8007fa0 <HAL_DACEx_TriangleWaveGenerate+0x62>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007f72:	fa01 f303 	lsl.w	r3, r1, r3
 8007f76:	43db      	mvns	r3, r3
 8007f78:	ea02 0103 	and.w	r1, r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	795b      	ldrb	r3, [r3, #5]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_DACEx_NoiseWaveGenerate+0x18>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e024      	b.n	800800e <HAL_DACEx_NoiseWaveGenerate+0x62>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	ea02 0103 	and.w	r1, r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	409a      	lsls	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 800801a:	b480      	push	{r7}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b08      	cmp	r3, #8
 800802c:	d105      	bne.n	800803a <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e004      	b.n	8008044 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	3320      	adds	r3, #32
 8008052:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80080de:	68fb      	ldr	r3, [r7, #12]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff ffb4 	bl	8008068 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	711a      	strb	r2, [r3, #4]
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff ffad 	bl	800807c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f043 0204 	orr.w	r2, r3, #4
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff ffa3 	bl	8008090 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	711a      	strb	r2, [r3, #4]
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008164:	f7fe fed6 	bl	8006f14 <HAL_GetTick>
 8008168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e099      	b.n	80082a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0201 	bic.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008194:	e00f      	b.n	80081b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008196:	f7fe febd 	bl	8006f14 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d908      	bls.n	80081b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2220      	movs	r2, #32
 80081a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2203      	movs	r2, #3
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e078      	b.n	80082a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e8      	bne.n	8008196 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	4b38      	ldr	r3, [pc, #224]	; (80082b0 <HAL_DMA_Init+0x158>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b04      	cmp	r3, #4
 800820e:	d107      	bne.n	8008220 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	4313      	orrs	r3, r2
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b04      	cmp	r3, #4
 8008248:	d117      	bne.n	800827a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fd4d 	bl	8008cfc <DMA_CheckFifoParam>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008276:	2301      	movs	r3, #1
 8008278:	e016      	b.n	80082a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fd05 	bl	8008c92 <DMA_CalcBaseAndBitshift>
 8008288:	4603      	mov	r3, r0
 800828a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008290:	223f      	movs	r2, #63	; 0x3f
 8008292:	409a      	lsls	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	f010803f 	.word	0xf010803f

080082b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e050      	b.n	8008368 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d101      	bne.n	80082d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80082d2:	2302      	movs	r3, #2
 80082d4:	e048      	b.n	8008368 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0201 	bic.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2221      	movs	r2, #33	; 0x21
 8008314:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fcbb 	bl	8008c92 <DMA_CalcBaseAndBitshift>
 800831c:	4603      	mov	r3, r0
 800831e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008348:	223f      	movs	r2, #63	; 0x3f
 800834a:	409a      	lsls	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008388:	2b01      	cmp	r3, #1
 800838a:	d101      	bne.n	8008390 <HAL_DMA_Start+0x20>
 800838c:	2302      	movs	r3, #2
 800838e:	e026      	b.n	80083de <HAL_DMA_Start+0x6e>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d115      	bne.n	80083d0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fc3c 	bl	8008c36 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	e005      	b.n	80083dc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
 80083da:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b086      	sub	sp, #24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_DMA_Start_IT+0x26>
 8008408:	2302      	movs	r3, #2
 800840a:	e040      	b.n	800848e <HAL_DMA_Start_IT+0xa8>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d12f      	bne.n	8008480 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 fbfe 	bl	8008c36 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843e:	223f      	movs	r2, #63	; 0x3f
 8008440:	409a      	lsls	r2, r3
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0216 	orr.w	r2, r2, #22
 8008454:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0208 	orr.w	r2, r2, #8
 800846c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f042 0201 	orr.w	r2, r2, #1
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e005      	b.n	800848c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008488:	2302      	movs	r3, #2
 800848a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80084a4:	f7fe fd36 	bl	8006f14 <HAL_GetTick>
 80084a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d008      	beq.n	80084c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2280      	movs	r2, #128	; 0x80
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e052      	b.n	800856e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0216 	bic.w	r2, r2, #22
 80084d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <HAL_DMA_Abort+0x62>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0208 	bic.w	r2, r2, #8
 8008506:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0201 	bic.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008518:	e013      	b.n	8008542 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800851a:	f7fe fcfb 	bl	8006f14 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b05      	cmp	r3, #5
 8008526:	d90c      	bls.n	8008542 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2203      	movs	r2, #3
 8008532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e015      	b.n	800856e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e4      	bne.n	800851a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008554:	223f      	movs	r2, #63	; 0x3f
 8008556:	409a      	lsls	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d004      	beq.n	8008594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2280      	movs	r2, #128	; 0x80
 800858e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e00c      	b.n	80085ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2205      	movs	r2, #5
 8008598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0201 	bic.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b08a      	sub	sp, #40	; 0x28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	460b      	mov	r3, r1
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80085c8:	2300      	movs	r3, #0
 80085ca:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80085cc:	f7fe fca2 	bl	8006f14 <HAL_GetTick>
 80085d0:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d008      	beq.n	80085f0 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2280      	movs	r2, #128	; 0x80
 80085e2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0bf      	b.n	8008770 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008604:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e0b2      	b.n	8008770 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800860a:	7afb      	ldrb	r3, [r7, #11]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008614:	2220      	movs	r2, #32
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
 800861c:	e005      	b.n	800862a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008622:	2210      	movs	r2, #16
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8008636:	e05a      	b.n	80086ee <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d017      	beq.n	8008670 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <HAL_DMA_PollForTransfer+0x9c>
 8008646:	f7fe fc65 	bl	8006f14 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	429a      	cmp	r2, r3
 8008654:	d20c      	bcs.n	8008670 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e07f      	b.n	8008770 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800867a:	2208      	movs	r2, #8
 800867c:	409a      	lsls	r2, r3
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00b      	beq.n	800869e <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	f043 0201 	orr.w	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008696:	2208      	movs	r2, #8
 8008698:	409a      	lsls	r2, r3
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a2:	2201      	movs	r2, #1
 80086a4:	409a      	lsls	r2, r3
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b2:	f043 0202 	orr.w	r2, r3, #2
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086be:	2201      	movs	r2, #1
 80086c0:	409a      	lsls	r2, r3
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ca:	2204      	movs	r2, #4
 80086cc:	409a      	lsls	r2, r3
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	4013      	ands	r3, r2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086da:	f043 0204 	orr.w	r2, r3, #4
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e6:	2204      	movs	r2, #4
 80086e8:	409a      	lsls	r2, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <HAL_DMA_PollForTransfer+0x14a>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d099      	beq.n	8008638 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008708:	2b00      	cmp	r3, #0
 800870a:	d018      	beq.n	800873e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d012      	beq.n	800873e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff febc 	bl	8008496 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008722:	2230      	movs	r2, #48	; 0x30
 8008724:	409a      	lsls	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e018      	b.n	8008770 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10e      	bne.n	8008762 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008748:	2230      	movs	r2, #48	; 0x30
 800874a:	409a      	lsls	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008760:	e005      	b.n	800876e <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008766:	2210      	movs	r2, #16
 8008768:	409a      	lsls	r2, r3
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800876e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008784:	4b8e      	ldr	r3, [pc, #568]	; (80089c0 <HAL_DMA_IRQHandler+0x248>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a8e      	ldr	r2, [pc, #568]	; (80089c4 <HAL_DMA_IRQHandler+0x24c>)
 800878a:	fba2 2303 	umull	r2, r3, r2, r3
 800878e:	0a9b      	lsrs	r3, r3, #10
 8008790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a2:	2208      	movs	r2, #8
 80087a4:	409a      	lsls	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4013      	ands	r3, r2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d01a      	beq.n	80087e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d013      	beq.n	80087e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0204 	bic.w	r2, r2, #4
 80087ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d0:	2208      	movs	r2, #8
 80087d2:	409a      	lsls	r2, r3
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087dc:	f043 0201 	orr.w	r2, r3, #1
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e8:	2201      	movs	r2, #1
 80087ea:	409a      	lsls	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d012      	beq.n	800881a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008806:	2201      	movs	r2, #1
 8008808:	409a      	lsls	r2, r3
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008812:	f043 0202 	orr.w	r2, r3, #2
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	2204      	movs	r2, #4
 8008820:	409a      	lsls	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4013      	ands	r3, r2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d012      	beq.n	8008850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0302 	and.w	r3, r3, #2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00b      	beq.n	8008850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	2204      	movs	r2, #4
 800883e:	409a      	lsls	r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008848:	f043 0204 	orr.w	r2, r3, #4
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008854:	2210      	movs	r2, #16
 8008856:	409a      	lsls	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d043      	beq.n	80088e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d03c      	beq.n	80088e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008872:	2210      	movs	r2, #16
 8008874:	409a      	lsls	r2, r3
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d018      	beq.n	80088ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d108      	bne.n	80088a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d024      	beq.n	80088e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	e01f      	b.n	80088e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01b      	beq.n	80088e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
 80088b8:	e016      	b.n	80088e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d107      	bne.n	80088d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0208 	bic.w	r2, r2, #8
 80088d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ec:	2220      	movs	r2, #32
 80088ee:	409a      	lsls	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4013      	ands	r3, r2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 808f 	beq.w	8008a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0310 	and.w	r3, r3, #16
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8087 	beq.w	8008a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800890e:	2220      	movs	r2, #32
 8008910:	409a      	lsls	r2, r3
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b05      	cmp	r3, #5
 8008920:	d136      	bne.n	8008990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0216 	bic.w	r2, r2, #22
 8008930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695a      	ldr	r2, [r3, #20]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d103      	bne.n	8008952 <HAL_DMA_IRQHandler+0x1da>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0208 	bic.w	r2, r2, #8
 8008960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008966:	223f      	movs	r2, #63	; 0x3f
 8008968:	409a      	lsls	r2, r3
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008982:	2b00      	cmp	r3, #0
 8008984:	d07e      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
        }
        return;
 800898e:	e079      	b.n	8008a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01d      	beq.n	80089da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10d      	bne.n	80089c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d031      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
 80089bc:	e02c      	b.n	8008a18 <HAL_DMA_IRQHandler+0x2a0>
 80089be:	bf00      	nop
 80089c0:	20000058 	.word	0x20000058
 80089c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d023      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
 80089d8:	e01e      	b.n	8008a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10f      	bne.n	8008a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0210 	bic.w	r2, r2, #16
 80089f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d032      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d022      	beq.n	8008a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2205      	movs	r2, #5
 8008a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0201 	bic.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60bb      	str	r3, [r7, #8]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d307      	bcc.n	8008a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f2      	bne.n	8008a44 <HAL_DMA_IRQHandler+0x2cc>
 8008a5e:	e000      	b.n	8008a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	4798      	blx	r3
 8008a82:	e000      	b.n	8008a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008a84:	bf00      	nop
    }
  }
}
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_DMA_RegisterCallback+0x20>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e03c      	b.n	8008b26 <HAL_DMA_RegisterCallback+0x9a>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d129      	bne.n	8008b14 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d829      	bhi.n	8008b1a <HAL_DMA_RegisterCallback+0x8e>
 8008ac6:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <HAL_DMA_RegisterCallback+0x40>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008ae5 	.word	0x08008ae5
 8008ad0:	08008aed 	.word	0x08008aed
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b0d 	.word	0x08008b0d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008aea:	e017      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008af2:	e013      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008afa:	e00f      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008b02:	e00b      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008b0a:	e007      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b12:	e003      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
 8008b18:	e000      	b.n	8008b1c <HAL_DMA_RegisterCallback+0x90>
      break;
 8008b1a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_DMA_UnRegisterCallback+0x1e>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e052      	b.n	8008bf6 <HAL_DMA_UnRegisterCallback+0xc4>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d141      	bne.n	8008be8 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d83b      	bhi.n	8008be2 <HAL_DMA_UnRegisterCallback+0xb0>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <HAL_DMA_UnRegisterCallback+0x3e>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b8d 	.word	0x08008b8d
 8008b74:	08008b95 	.word	0x08008b95
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008ba5 	.word	0x08008ba5
 8008b80:	08008bad 	.word	0x08008bad
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bbd 	.word	0x08008bbd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008b92:	e02b      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008b9a:	e027      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008ba2:	e023      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008baa:	e01f      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008bb2:	e01b      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008bba:	e017      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008be0:	e004      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
      break;
 8008be6:	e001      	b.n	8008bec <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c10:	b2db      	uxtb	r3, r3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c52:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b40      	cmp	r3, #64	; 0x40
 8008c62:	d108      	bne.n	8008c76 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008c74:	e007      	b.n	8008c86 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	60da      	str	r2, [r3, #12]
}
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	3b10      	subs	r3, #16
 8008ca2:	4a14      	ldr	r2, [pc, #80]	; (8008cf4 <DMA_CalcBaseAndBitshift+0x62>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008cac:	4a12      	ldr	r2, [pc, #72]	; (8008cf8 <DMA_CalcBaseAndBitshift+0x66>)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d909      	bls.n	8008cd4 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008cc8:	f023 0303 	bic.w	r3, r3, #3
 8008ccc:	1d1a      	adds	r2, r3, #4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8008cd2:	e007      	b.n	8008ce4 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008cdc:	f023 0303 	bic.w	r3, r3, #3
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	aaaaaaab 	.word	0xaaaaaaab
 8008cf8:	08052634 	.word	0x08052634

08008cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d11f      	bne.n	8008d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d856      	bhi.n	8008dca <DMA_CheckFifoParam+0xce>
 8008d1c:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <DMA_CheckFifoParam+0x28>)
 8008d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d22:	bf00      	nop
 8008d24:	08008d35 	.word	0x08008d35
 8008d28:	08008d47 	.word	0x08008d47
 8008d2c:	08008d35 	.word	0x08008d35
 8008d30:	08008dcb 	.word	0x08008dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d046      	beq.n	8008dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d44:	e043      	b.n	8008dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d4e:	d140      	bne.n	8008dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d54:	e03d      	b.n	8008dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5e:	d121      	bne.n	8008da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d837      	bhi.n	8008dd6 <DMA_CheckFifoParam+0xda>
 8008d66:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <DMA_CheckFifoParam+0x70>)
 8008d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008d83 	.word	0x08008d83
 8008d74:	08008d7d 	.word	0x08008d7d
 8008d78:	08008d95 	.word	0x08008d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d80:	e030      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d025      	beq.n	8008dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d92:	e022      	b.n	8008dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d9c:	d11f      	bne.n	8008dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008da2:	e01c      	b.n	8008dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d903      	bls.n	8008db2 <DMA_CheckFifoParam+0xb6>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d003      	beq.n	8008db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008db0:	e018      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	73fb      	strb	r3, [r7, #15]
      break;
 8008db6:	e015      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00e      	beq.n	8008de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc8:	e00b      	b.n	8008de2 <DMA_CheckFifoParam+0xe6>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e00a      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e008      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e006      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      break;
 8008dd6:	bf00      	nop
 8008dd8:	e004      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      break;
 8008dda:	bf00      	nop
 8008ddc:	e002      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8008dde:	bf00      	nop
 8008de0:	e000      	b.n	8008de4 <DMA_CheckFifoParam+0xe8>
      break;
 8008de2:	bf00      	nop
    }
  } 
  
  return status; 
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b80      	cmp	r3, #128	; 0x80
 8008e0a:	d106      	bne.n	8008e1a <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e12:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	75fb      	strb	r3, [r7, #23]
 8008e18:	e031      	b.n	8008e7e <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_DMAEx_MultiBufferStart+0x36>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e02b      	b.n	8008e80 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d11e      	bne.n	8008e7a <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008e52:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f001 f972 	bl	800a14c <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e001      	b.n	8008e7e <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2b80      	cmp	r3, #128	; 0x80
 8008ea0:	d106      	bne.n	8008eb0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ea8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f001 b911 	b.w	800a0d2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d007      	beq.n	8008ec8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d105      	bne.n	8008ed4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2240      	movs	r2, #64	; 0x40
 8008ecc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f001 b8ff 	b.w	800a0d2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d102      	bne.n	8008ee4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	f001 b8f7 	b.w	800a0d2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	f041 80e5 	bne.w	800a0c4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2202      	movs	r2, #2
 8008efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008f16:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f001 f910 	bl	800a14c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	4b8d      	ldr	r3, [pc, #564]	; (8009168 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d960      	bls.n	8008ffa <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a8b      	ldr	r2, [pc, #556]	; (800916c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d057      	beq.n	8008ff2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a8a      	ldr	r2, [pc, #552]	; (8009170 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d050      	beq.n	8008fee <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a88      	ldr	r2, [pc, #544]	; (8009174 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d049      	beq.n	8008fea <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a87      	ldr	r2, [pc, #540]	; (8009178 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d042      	beq.n	8008fe6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a85      	ldr	r2, [pc, #532]	; (800917c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d03a      	beq.n	8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a84      	ldr	r2, [pc, #528]	; (8009180 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d032      	beq.n	8008fda <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a82      	ldr	r2, [pc, #520]	; (8009184 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d02a      	beq.n	8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a81      	ldr	r2, [pc, #516]	; (8009188 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d022      	beq.n	8008fce <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a7f      	ldr	r2, [pc, #508]	; (800918c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d01a      	beq.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a7e      	ldr	r2, [pc, #504]	; (8009190 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d012      	beq.n	8008fc2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a7c      	ldr	r2, [pc, #496]	; (8009194 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00a      	beq.n	8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a7b      	ldr	r2, [pc, #492]	; (8009198 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d102      	bne.n	8008fb6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8008fb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fb4:	e01e      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fba:	e01b      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fc0:	e018      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fc6:	e015      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fcc:	e012      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fd2:	e00f      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fd8:	e00c      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fde:	e009      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fe4:	e006      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fe6:	2320      	movs	r3, #32
 8008fe8:	e004      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fea:	2320      	movs	r3, #32
 8008fec:	e002      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008fee:	2320      	movs	r3, #32
 8008ff0:	e000      	b.n	8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008ff2:	2320      	movs	r3, #32
 8008ff4:	4a69      	ldr	r2, [pc, #420]	; (800919c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8008ff6:	60d3      	str	r3, [r2, #12]
 8008ff8:	e14f      	b.n	800929a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	4b67      	ldr	r3, [pc, #412]	; (80091a0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8009002:	429a      	cmp	r2, r3
 8009004:	d960      	bls.n	80090c8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a58      	ldr	r2, [pc, #352]	; (800916c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d057      	beq.n	80090c0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a56      	ldr	r2, [pc, #344]	; (8009170 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d050      	beq.n	80090bc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a55      	ldr	r2, [pc, #340]	; (8009174 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d049      	beq.n	80090b8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a53      	ldr	r2, [pc, #332]	; (8009178 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d042      	beq.n	80090b4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a52      	ldr	r2, [pc, #328]	; (800917c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d03a      	beq.n	80090ae <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a50      	ldr	r2, [pc, #320]	; (8009180 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d032      	beq.n	80090a8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a4f      	ldr	r2, [pc, #316]	; (8009184 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d02a      	beq.n	80090a2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a4d      	ldr	r2, [pc, #308]	; (8009188 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d022      	beq.n	800909c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a4c      	ldr	r2, [pc, #304]	; (800918c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d01a      	beq.n	8009096 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a4a      	ldr	r2, [pc, #296]	; (8009190 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d012      	beq.n	8009090 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a49      	ldr	r2, [pc, #292]	; (8009194 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00a      	beq.n	800908a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a47      	ldr	r2, [pc, #284]	; (8009198 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d102      	bne.n	8009084 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800907e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009082:	e01e      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009088:	e01b      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800908a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800908e:	e018      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009094:	e015      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009096:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800909a:	e012      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800909c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090a0:	e00f      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090a6:	e00c      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090ac:	e009      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090b2:	e006      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090b4:	2320      	movs	r3, #32
 80090b6:	e004      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090b8:	2320      	movs	r3, #32
 80090ba:	e002      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090bc:	2320      	movs	r3, #32
 80090be:	e000      	b.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80090c0:	2320      	movs	r3, #32
 80090c2:	4a36      	ldr	r2, [pc, #216]	; (800919c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80090c4:	6093      	str	r3, [r2, #8]
 80090c6:	e0e8      	b.n	800929a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	4b35      	ldr	r3, [pc, #212]	; (80091a4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80090d0:	429a      	cmp	r2, r3
 80090d2:	f240 8082 	bls.w	80091da <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a24      	ldr	r2, [pc, #144]	; (800916c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d078      	beq.n	80091d2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a22      	ldr	r2, [pc, #136]	; (8009170 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d071      	beq.n	80091ce <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a21      	ldr	r2, [pc, #132]	; (8009174 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d06a      	beq.n	80091ca <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1f      	ldr	r2, [pc, #124]	; (8009178 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d063      	beq.n	80091c6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1e      	ldr	r2, [pc, #120]	; (800917c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d05b      	beq.n	80091c0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d053      	beq.n	80091ba <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d04b      	beq.n	80091b4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a19      	ldr	r2, [pc, #100]	; (8009188 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d043      	beq.n	80091ae <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a18      	ldr	r2, [pc, #96]	; (800918c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d03b      	beq.n	80091a8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a16      	ldr	r2, [pc, #88]	; (8009190 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d012      	beq.n	8009160 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a15      	ldr	r2, [pc, #84]	; (8009194 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00a      	beq.n	800915a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a13      	ldr	r2, [pc, #76]	; (8009198 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d102      	bne.n	8009154 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800914e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009152:	e03f      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009158:	e03c      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800915a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800915e:	e039      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009160:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009164:	e036      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009166:	bf00      	nop
 8009168:	40026458 	.word	0x40026458
 800916c:	40026010 	.word	0x40026010
 8009170:	40026410 	.word	0x40026410
 8009174:	40026070 	.word	0x40026070
 8009178:	40026470 	.word	0x40026470
 800917c:	40026028 	.word	0x40026028
 8009180:	40026428 	.word	0x40026428
 8009184:	40026088 	.word	0x40026088
 8009188:	40026488 	.word	0x40026488
 800918c:	40026040 	.word	0x40026040
 8009190:	40026440 	.word	0x40026440
 8009194:	400260a0 	.word	0x400260a0
 8009198:	400264a0 	.word	0x400264a0
 800919c:	40026400 	.word	0x40026400
 80091a0:	400260b8 	.word	0x400260b8
 80091a4:	40026058 	.word	0x40026058
 80091a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091ac:	e012      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b2:	e00f      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b8:	e00c      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091be:	e009      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091c4:	e006      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091c6:	2320      	movs	r3, #32
 80091c8:	e004      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091ca:	2320      	movs	r3, #32
 80091cc:	e002      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091ce:	2320      	movs	r3, #32
 80091d0:	e000      	b.n	80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091d2:	2320      	movs	r3, #32
 80091d4:	4a8c      	ldr	r2, [pc, #560]	; (8009408 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80091d6:	60d3      	str	r3, [r2, #12]
 80091d8:	e05f      	b.n	800929a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a8b      	ldr	r2, [pc, #556]	; (800940c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d057      	beq.n	8009294 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a89      	ldr	r2, [pc, #548]	; (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d050      	beq.n	8009290 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a88      	ldr	r2, [pc, #544]	; (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d049      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a86      	ldr	r2, [pc, #536]	; (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d042      	beq.n	8009288 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a85      	ldr	r2, [pc, #532]	; (800941c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d03a      	beq.n	8009282 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a83      	ldr	r2, [pc, #524]	; (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d032      	beq.n	800927c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a82      	ldr	r2, [pc, #520]	; (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d02a      	beq.n	8009276 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a80      	ldr	r2, [pc, #512]	; (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d022      	beq.n	8009270 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a7f      	ldr	r2, [pc, #508]	; (800942c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d01a      	beq.n	800926a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a7d      	ldr	r2, [pc, #500]	; (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d012      	beq.n	8009264 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a7c      	ldr	r2, [pc, #496]	; (8009434 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d00a      	beq.n	800925e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a7a      	ldr	r2, [pc, #488]	; (8009438 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d102      	bne.n	8009258 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8009252:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009256:	e01e      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800925c:	e01b      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800925e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009262:	e018      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009268:	e015      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800926a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800926e:	e012      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009274:	e00f      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800927a:	e00c      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800927c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009280:	e009      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009286:	e006      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009288:	2320      	movs	r3, #32
 800928a:	e004      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800928c:	2320      	movs	r3, #32
 800928e:	e002      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009290:	2320      	movs	r3, #32
 8009292:	e000      	b.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009294:	2320      	movs	r3, #32
 8009296:	4a5c      	ldr	r2, [pc, #368]	; (8009408 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8009298:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	4b66      	ldr	r3, [pc, #408]	; (800943c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d960      	bls.n	8009368 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a58      	ldr	r2, [pc, #352]	; (800940c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d057      	beq.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a56      	ldr	r2, [pc, #344]	; (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d050      	beq.n	800935c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a55      	ldr	r2, [pc, #340]	; (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d049      	beq.n	8009358 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a53      	ldr	r2, [pc, #332]	; (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d042      	beq.n	8009354 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a52      	ldr	r2, [pc, #328]	; (800941c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d03a      	beq.n	800934e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a50      	ldr	r2, [pc, #320]	; (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d032      	beq.n	8009348 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a4f      	ldr	r2, [pc, #316]	; (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d02a      	beq.n	8009342 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a4d      	ldr	r2, [pc, #308]	; (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d022      	beq.n	800933c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a4c      	ldr	r2, [pc, #304]	; (800942c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d01a      	beq.n	8009336 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a4a      	ldr	r2, [pc, #296]	; (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d012      	beq.n	8009330 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a49      	ldr	r2, [pc, #292]	; (8009434 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00a      	beq.n	800932a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a47      	ldr	r2, [pc, #284]	; (8009438 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d102      	bne.n	8009324 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800931e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009322:	e01e      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009324:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009328:	e01b      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800932a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800932e:	e018      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009334:	e015      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009336:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800933a:	e012      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800933c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009340:	e00f      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009346:	e00c      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934c:	e009      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800934e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009352:	e006      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009354:	2310      	movs	r3, #16
 8009356:	e004      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009358:	2310      	movs	r3, #16
 800935a:	e002      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800935c:	2310      	movs	r3, #16
 800935e:	e000      	b.n	8009362 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009360:	2310      	movs	r3, #16
 8009362:	4a37      	ldr	r2, [pc, #220]	; (8009440 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8009364:	60d3      	str	r3, [r2, #12]
 8009366:	e14f      	b.n	8009608 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	4b35      	ldr	r3, [pc, #212]	; (8009444 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8009370:	429a      	cmp	r2, r3
 8009372:	f240 8082 	bls.w	800947a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a24      	ldr	r2, [pc, #144]	; (800940c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d078      	beq.n	8009472 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a22      	ldr	r2, [pc, #136]	; (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d071      	beq.n	800946e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a21      	ldr	r2, [pc, #132]	; (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d06a      	beq.n	800946a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1f      	ldr	r2, [pc, #124]	; (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d063      	beq.n	8009466 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1e      	ldr	r2, [pc, #120]	; (800941c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d05b      	beq.n	8009460 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1c      	ldr	r2, [pc, #112]	; (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d053      	beq.n	800945a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a1b      	ldr	r2, [pc, #108]	; (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d04b      	beq.n	8009454 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a19      	ldr	r2, [pc, #100]	; (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d043      	beq.n	800944e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a18      	ldr	r2, [pc, #96]	; (800942c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d03b      	beq.n	8009448 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a16      	ldr	r2, [pc, #88]	; (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d012      	beq.n	8009400 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a15      	ldr	r2, [pc, #84]	; (8009434 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00a      	beq.n	80093fa <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a13      	ldr	r2, [pc, #76]	; (8009438 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d102      	bne.n	80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80093ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093f2:	e03f      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80093f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093f8:	e03c      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80093fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093fe:	e039      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009404:	e036      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009406:	bf00      	nop
 8009408:	40026000 	.word	0x40026000
 800940c:	40026010 	.word	0x40026010
 8009410:	40026410 	.word	0x40026410
 8009414:	40026070 	.word	0x40026070
 8009418:	40026470 	.word	0x40026470
 800941c:	40026028 	.word	0x40026028
 8009420:	40026428 	.word	0x40026428
 8009424:	40026088 	.word	0x40026088
 8009428:	40026488 	.word	0x40026488
 800942c:	40026040 	.word	0x40026040
 8009430:	40026440 	.word	0x40026440
 8009434:	400260a0 	.word	0x400260a0
 8009438:	400264a0 	.word	0x400264a0
 800943c:	40026458 	.word	0x40026458
 8009440:	40026400 	.word	0x40026400
 8009444:	400260b8 	.word	0x400260b8
 8009448:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800944c:	e012      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800944e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009452:	e00f      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009458:	e00c      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800945a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945e:	e009      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009464:	e006      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009466:	2310      	movs	r3, #16
 8009468:	e004      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800946a:	2310      	movs	r3, #16
 800946c:	e002      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800946e:	2310      	movs	r3, #16
 8009470:	e000      	b.n	8009474 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009472:	2310      	movs	r3, #16
 8009474:	4a8c      	ldr	r2, [pc, #560]	; (80096a8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8009476:	6093      	str	r3, [r2, #8]
 8009478:	e0c6      	b.n	8009608 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	4b8a      	ldr	r3, [pc, #552]	; (80096ac <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8009482:	429a      	cmp	r2, r3
 8009484:	d960      	bls.n	8009548 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a89      	ldr	r2, [pc, #548]	; (80096b0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d057      	beq.n	8009540 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a87      	ldr	r2, [pc, #540]	; (80096b4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d050      	beq.n	800953c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a86      	ldr	r2, [pc, #536]	; (80096b8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d049      	beq.n	8009538 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a84      	ldr	r2, [pc, #528]	; (80096bc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d042      	beq.n	8009534 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a83      	ldr	r2, [pc, #524]	; (80096c0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d03a      	beq.n	800952e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a81      	ldr	r2, [pc, #516]	; (80096c4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d032      	beq.n	8009528 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a80      	ldr	r2, [pc, #512]	; (80096c8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d02a      	beq.n	8009522 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a7e      	ldr	r2, [pc, #504]	; (80096cc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d022      	beq.n	800951c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a7d      	ldr	r2, [pc, #500]	; (80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d01a      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a7b      	ldr	r2, [pc, #492]	; (80096d4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d012      	beq.n	8009510 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a7a      	ldr	r2, [pc, #488]	; (80096d8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00a      	beq.n	800950a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a78      	ldr	r2, [pc, #480]	; (80096dc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d102      	bne.n	8009504 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80094fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009502:	e01e      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009504:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009508:	e01b      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800950a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800950e:	e018      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009514:	e015      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009516:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800951a:	e012      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800951c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009520:	e00f      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009526:	e00c      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952c:	e009      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800952e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009532:	e006      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009534:	2310      	movs	r3, #16
 8009536:	e004      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009538:	2310      	movs	r3, #16
 800953a:	e002      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800953c:	2310      	movs	r3, #16
 800953e:	e000      	b.n	8009542 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009540:	2310      	movs	r3, #16
 8009542:	4a67      	ldr	r2, [pc, #412]	; (80096e0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8009544:	60d3      	str	r3, [r2, #12]
 8009546:	e05f      	b.n	8009608 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a58      	ldr	r2, [pc, #352]	; (80096b0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d057      	beq.n	8009602 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a57      	ldr	r2, [pc, #348]	; (80096b4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d050      	beq.n	80095fe <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a55      	ldr	r2, [pc, #340]	; (80096b8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d049      	beq.n	80095fa <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a54      	ldr	r2, [pc, #336]	; (80096bc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d042      	beq.n	80095f6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a52      	ldr	r2, [pc, #328]	; (80096c0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d03a      	beq.n	80095f0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a51      	ldr	r2, [pc, #324]	; (80096c4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d032      	beq.n	80095ea <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a4f      	ldr	r2, [pc, #316]	; (80096c8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d02a      	beq.n	80095e4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a4e      	ldr	r2, [pc, #312]	; (80096cc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d022      	beq.n	80095de <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a4c      	ldr	r2, [pc, #304]	; (80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d01a      	beq.n	80095d8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a4b      	ldr	r2, [pc, #300]	; (80096d4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d012      	beq.n	80095d2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a49      	ldr	r2, [pc, #292]	; (80096d8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00a      	beq.n	80095cc <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a48      	ldr	r2, [pc, #288]	; (80096dc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d102      	bne.n	80095c6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80095c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095c4:	e01e      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80095ca:	e01b      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095d0:	e018      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095d6:	e015      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095dc:	e012      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e2:	e00f      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e8:	e00c      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ee:	e009      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095f4:	e006      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095f6:	2310      	movs	r3, #16
 80095f8:	e004      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095fa:	2310      	movs	r3, #16
 80095fc:	e002      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80095fe:	2310      	movs	r3, #16
 8009600:	e000      	b.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009602:	2310      	movs	r3, #16
 8009604:	4a36      	ldr	r2, [pc, #216]	; (80096e0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8009606:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	4b35      	ldr	r3, [pc, #212]	; (80096e4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8009610:	429a      	cmp	r2, r3
 8009612:	f240 8082 	bls.w	800971a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a25      	ldr	r2, [pc, #148]	; (80096b0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d078      	beq.n	8009712 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a23      	ldr	r2, [pc, #140]	; (80096b4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d071      	beq.n	800970e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a22      	ldr	r2, [pc, #136]	; (80096b8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d06a      	beq.n	800970a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a20      	ldr	r2, [pc, #128]	; (80096bc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d063      	beq.n	8009706 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1f      	ldr	r2, [pc, #124]	; (80096c0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d05b      	beq.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a1d      	ldr	r2, [pc, #116]	; (80096c4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d053      	beq.n	80096fa <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a1c      	ldr	r2, [pc, #112]	; (80096c8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d04b      	beq.n	80096f4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a1a      	ldr	r2, [pc, #104]	; (80096cc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d043      	beq.n	80096ee <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a19      	ldr	r2, [pc, #100]	; (80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d03b      	beq.n	80096e8 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d012      	beq.n	80096a0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a16      	ldr	r2, [pc, #88]	; (80096d8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00a      	beq.n	800969a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a14      	ldr	r2, [pc, #80]	; (80096dc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d102      	bne.n	8009694 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800968e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009692:	e03f      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009698:	e03c      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800969a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800969e:	e039      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80096a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096a4:	e036      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80096a6:	bf00      	nop
 80096a8:	40026400 	.word	0x40026400
 80096ac:	40026058 	.word	0x40026058
 80096b0:	40026010 	.word	0x40026010
 80096b4:	40026410 	.word	0x40026410
 80096b8:	40026070 	.word	0x40026070
 80096bc:	40026470 	.word	0x40026470
 80096c0:	40026028 	.word	0x40026028
 80096c4:	40026428 	.word	0x40026428
 80096c8:	40026088 	.word	0x40026088
 80096cc:	40026488 	.word	0x40026488
 80096d0:	40026040 	.word	0x40026040
 80096d4:	40026440 	.word	0x40026440
 80096d8:	400260a0 	.word	0x400260a0
 80096dc:	400264a0 	.word	0x400264a0
 80096e0:	40026000 	.word	0x40026000
 80096e4:	40026458 	.word	0x40026458
 80096e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096ec:	e012      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80096ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096f2:	e00f      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80096f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096f8:	e00c      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80096fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096fe:	e009      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009704:	e006      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009706:	2308      	movs	r3, #8
 8009708:	e004      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800970a:	2308      	movs	r3, #8
 800970c:	e002      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800970e:	2308      	movs	r3, #8
 8009710:	e000      	b.n	8009714 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009712:	2308      	movs	r3, #8
 8009714:	4a8c      	ldr	r2, [pc, #560]	; (8009948 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8009716:	60d3      	str	r3, [r2, #12]
 8009718:	e14e      	b.n	80099b8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	4b8a      	ldr	r3, [pc, #552]	; (800994c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8009722:	429a      	cmp	r2, r3
 8009724:	d960      	bls.n	80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a89      	ldr	r2, [pc, #548]	; (8009950 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d057      	beq.n	80097e0 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a87      	ldr	r2, [pc, #540]	; (8009954 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d050      	beq.n	80097dc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a86      	ldr	r2, [pc, #536]	; (8009958 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d049      	beq.n	80097d8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a84      	ldr	r2, [pc, #528]	; (800995c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d042      	beq.n	80097d4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a83      	ldr	r2, [pc, #524]	; (8009960 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d03a      	beq.n	80097ce <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a81      	ldr	r2, [pc, #516]	; (8009964 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d032      	beq.n	80097c8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a80      	ldr	r2, [pc, #512]	; (8009968 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d02a      	beq.n	80097c2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a7e      	ldr	r2, [pc, #504]	; (800996c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d022      	beq.n	80097bc <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a7d      	ldr	r2, [pc, #500]	; (8009970 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d01a      	beq.n	80097b6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a7b      	ldr	r2, [pc, #492]	; (8009974 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d012      	beq.n	80097b0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a7a      	ldr	r2, [pc, #488]	; (8009978 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00a      	beq.n	80097aa <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a78      	ldr	r2, [pc, #480]	; (800997c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d102      	bne.n	80097a4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800979e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097a2:	e01e      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097a8:	e01b      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097ae:	e018      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097b4:	e015      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80097ba:	e012      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097c0:	e00f      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097c6:	e00c      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097cc:	e009      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097d2:	e006      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097d4:	2308      	movs	r3, #8
 80097d6:	e004      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097d8:	2308      	movs	r3, #8
 80097da:	e002      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097dc:	2308      	movs	r3, #8
 80097de:	e000      	b.n	80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80097e0:	2308      	movs	r3, #8
 80097e2:	4a59      	ldr	r2, [pc, #356]	; (8009948 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80097e4:	6093      	str	r3, [r2, #8]
 80097e6:	e0e7      	b.n	80099b8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	4b64      	ldr	r3, [pc, #400]	; (8009980 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d960      	bls.n	80098b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a55      	ldr	r2, [pc, #340]	; (8009950 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d057      	beq.n	80098ae <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a54      	ldr	r2, [pc, #336]	; (8009954 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d050      	beq.n	80098aa <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a52      	ldr	r2, [pc, #328]	; (8009958 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d049      	beq.n	80098a6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a51      	ldr	r2, [pc, #324]	; (800995c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d042      	beq.n	80098a2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a4f      	ldr	r2, [pc, #316]	; (8009960 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d03a      	beq.n	800989c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a4e      	ldr	r2, [pc, #312]	; (8009964 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d032      	beq.n	8009896 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a4c      	ldr	r2, [pc, #304]	; (8009968 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d02a      	beq.n	8009890 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a4b      	ldr	r2, [pc, #300]	; (800996c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d022      	beq.n	800988a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a49      	ldr	r2, [pc, #292]	; (8009970 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d01a      	beq.n	8009884 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a48      	ldr	r2, [pc, #288]	; (8009974 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d012      	beq.n	800987e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a46      	ldr	r2, [pc, #280]	; (8009978 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00a      	beq.n	8009878 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a45      	ldr	r2, [pc, #276]	; (800997c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d102      	bne.n	8009872 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800986c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009870:	e01e      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009876:	e01b      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800987c:	e018      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800987e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009882:	e015      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009884:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009888:	e012      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800988a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800988e:	e00f      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009894:	e00c      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800989a:	e009      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800989c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098a0:	e006      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80098a2:	2308      	movs	r3, #8
 80098a4:	e004      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80098a6:	2308      	movs	r3, #8
 80098a8:	e002      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80098aa:	2308      	movs	r3, #8
 80098ac:	e000      	b.n	80098b0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80098ae:	2308      	movs	r3, #8
 80098b0:	4a34      	ldr	r2, [pc, #208]	; (8009984 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80098b2:	60d3      	str	r3, [r2, #12]
 80098b4:	e080      	b.n	80099b8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a25      	ldr	r2, [pc, #148]	; (8009950 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d078      	beq.n	80099b2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a23      	ldr	r2, [pc, #140]	; (8009954 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d071      	beq.n	80099ae <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a22      	ldr	r2, [pc, #136]	; (8009958 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d06a      	beq.n	80099aa <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a20      	ldr	r2, [pc, #128]	; (800995c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d063      	beq.n	80099a6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1f      	ldr	r2, [pc, #124]	; (8009960 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d05b      	beq.n	80099a0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d053      	beq.n	800999a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a1c      	ldr	r2, [pc, #112]	; (8009968 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d04b      	beq.n	8009994 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a1a      	ldr	r2, [pc, #104]	; (800996c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d043      	beq.n	800998e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a19      	ldr	r2, [pc, #100]	; (8009970 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d03b      	beq.n	8009988 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a17      	ldr	r2, [pc, #92]	; (8009974 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d012      	beq.n	8009940 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a16      	ldr	r2, [pc, #88]	; (8009978 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00a      	beq.n	800993a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a14      	ldr	r2, [pc, #80]	; (800997c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d102      	bne.n	8009934 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800992e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009932:	e03f      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009938:	e03c      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800993a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800993e:	e039      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009940:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009944:	e036      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009946:	bf00      	nop
 8009948:	40026400 	.word	0x40026400
 800994c:	400260b8 	.word	0x400260b8
 8009950:	40026010 	.word	0x40026010
 8009954:	40026410 	.word	0x40026410
 8009958:	40026070 	.word	0x40026070
 800995c:	40026470 	.word	0x40026470
 8009960:	40026028 	.word	0x40026028
 8009964:	40026428 	.word	0x40026428
 8009968:	40026088 	.word	0x40026088
 800996c:	40026488 	.word	0x40026488
 8009970:	40026040 	.word	0x40026040
 8009974:	40026440 	.word	0x40026440
 8009978:	400260a0 	.word	0x400260a0
 800997c:	400264a0 	.word	0x400264a0
 8009980:	40026058 	.word	0x40026058
 8009984:	40026000 	.word	0x40026000
 8009988:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800998c:	e012      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800998e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009992:	e00f      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009998:	e00c      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800999a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800999e:	e009      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a4:	e006      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099a6:	2308      	movs	r3, #8
 80099a8:	e004      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099aa:	2308      	movs	r3, #8
 80099ac:	e002      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099ae:	2308      	movs	r3, #8
 80099b0:	e000      	b.n	80099b4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099b2:	2308      	movs	r3, #8
 80099b4:	4a8a      	ldr	r2, [pc, #552]	; (8009be0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80099b6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	4b89      	ldr	r3, [pc, #548]	; (8009be4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d960      	bls.n	8009a86 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a87      	ldr	r2, [pc, #540]	; (8009be8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d057      	beq.n	8009a7e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a86      	ldr	r2, [pc, #536]	; (8009bec <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d050      	beq.n	8009a7a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a84      	ldr	r2, [pc, #528]	; (8009bf0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d049      	beq.n	8009a76 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a83      	ldr	r2, [pc, #524]	; (8009bf4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d042      	beq.n	8009a72 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a81      	ldr	r2, [pc, #516]	; (8009bf8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d03a      	beq.n	8009a6c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a80      	ldr	r2, [pc, #512]	; (8009bfc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d032      	beq.n	8009a66 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a7e      	ldr	r2, [pc, #504]	; (8009c00 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d02a      	beq.n	8009a60 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a7d      	ldr	r2, [pc, #500]	; (8009c04 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d022      	beq.n	8009a5a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a7b      	ldr	r2, [pc, #492]	; (8009c08 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d01a      	beq.n	8009a54 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a7a      	ldr	r2, [pc, #488]	; (8009c0c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d012      	beq.n	8009a4e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a78      	ldr	r2, [pc, #480]	; (8009c10 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00a      	beq.n	8009a48 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a77      	ldr	r2, [pc, #476]	; (8009c14 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d102      	bne.n	8009a42 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009a3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a40:	e01e      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a46:	e01b      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a4c:	e018      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a52:	e015      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a58:	e012      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a5e:	e00f      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a64:	e00c      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a6a:	e009      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a70:	e006      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a72:	2304      	movs	r3, #4
 8009a74:	e004      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a76:	2304      	movs	r3, #4
 8009a78:	e002      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a7a:	2304      	movs	r3, #4
 8009a7c:	e000      	b.n	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009a7e:	2304      	movs	r3, #4
 8009a80:	4a65      	ldr	r2, [pc, #404]	; (8009c18 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009a82:	60d3      	str	r3, [r2, #12]
 8009a84:	e150      	b.n	8009d28 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4b63      	ldr	r3, [pc, #396]	; (8009c1c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d960      	bls.n	8009b54 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a54      	ldr	r2, [pc, #336]	; (8009be8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d057      	beq.n	8009b4c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a52      	ldr	r2, [pc, #328]	; (8009bec <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d050      	beq.n	8009b48 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a51      	ldr	r2, [pc, #324]	; (8009bf0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d049      	beq.n	8009b44 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a4f      	ldr	r2, [pc, #316]	; (8009bf4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d042      	beq.n	8009b40 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a4e      	ldr	r2, [pc, #312]	; (8009bf8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d03a      	beq.n	8009b3a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a4c      	ldr	r2, [pc, #304]	; (8009bfc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d032      	beq.n	8009b34 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a4b      	ldr	r2, [pc, #300]	; (8009c00 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d02a      	beq.n	8009b2e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a49      	ldr	r2, [pc, #292]	; (8009c04 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d022      	beq.n	8009b28 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a48      	ldr	r2, [pc, #288]	; (8009c08 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d01a      	beq.n	8009b22 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a46      	ldr	r2, [pc, #280]	; (8009c0c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d012      	beq.n	8009b1c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a45      	ldr	r2, [pc, #276]	; (8009c10 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00a      	beq.n	8009b16 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a43      	ldr	r2, [pc, #268]	; (8009c14 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d102      	bne.n	8009b10 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009b0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b0e:	e01e      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b14:	e01b      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b1a:	e018      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b20:	e015      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b26:	e012      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b2c:	e00f      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b32:	e00c      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b38:	e009      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b3e:	e006      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b40:	2304      	movs	r3, #4
 8009b42:	e004      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b44:	2304      	movs	r3, #4
 8009b46:	e002      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	e000      	b.n	8009b4e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	4a32      	ldr	r2, [pc, #200]	; (8009c18 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009b50:	6093      	str	r3, [r2, #8]
 8009b52:	e0e9      	b.n	8009d28 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	4b31      	ldr	r3, [pc, #196]	; (8009c20 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	f240 8083 	bls.w	8009c68 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a20      	ldr	r2, [pc, #128]	; (8009be8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d079      	beq.n	8009c60 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1e      	ldr	r2, [pc, #120]	; (8009bec <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d072      	beq.n	8009c5c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a1d      	ldr	r2, [pc, #116]	; (8009bf0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d06b      	beq.n	8009c58 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d064      	beq.n	8009c54 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a1a      	ldr	r2, [pc, #104]	; (8009bf8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d05c      	beq.n	8009c4e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d054      	beq.n	8009c48 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a17      	ldr	r2, [pc, #92]	; (8009c00 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d04c      	beq.n	8009c42 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a15      	ldr	r2, [pc, #84]	; (8009c04 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d044      	beq.n	8009c3c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a14      	ldr	r2, [pc, #80]	; (8009c08 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d03c      	beq.n	8009c36 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a12      	ldr	r2, [pc, #72]	; (8009c0c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d034      	beq.n	8009c30 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a11      	ldr	r2, [pc, #68]	; (8009c10 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d02c      	beq.n	8009c2a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a0f      	ldr	r2, [pc, #60]	; (8009c14 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d124      	bne.n	8009c24 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8009bda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009bde:	e040      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009be0:	40026000 	.word	0x40026000
 8009be4:	40026458 	.word	0x40026458
 8009be8:	40026010 	.word	0x40026010
 8009bec:	40026410 	.word	0x40026410
 8009bf0:	40026070 	.word	0x40026070
 8009bf4:	40026470 	.word	0x40026470
 8009bf8:	40026028 	.word	0x40026028
 8009bfc:	40026428 	.word	0x40026428
 8009c00:	40026088 	.word	0x40026088
 8009c04:	40026488 	.word	0x40026488
 8009c08:	40026040 	.word	0x40026040
 8009c0c:	40026440 	.word	0x40026440
 8009c10:	400260a0 	.word	0x400260a0
 8009c14:	400264a0 	.word	0x400264a0
 8009c18:	40026400 	.word	0x40026400
 8009c1c:	400260b8 	.word	0x400260b8
 8009c20:	40026058 	.word	0x40026058
 8009c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c28:	e01b      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c2e:	e018      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c34:	e015      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c3a:	e012      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c40:	e00f      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c46:	e00c      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c4c:	e009      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c52:	e006      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c54:	2304      	movs	r3, #4
 8009c56:	e004      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c58:	2304      	movs	r3, #4
 8009c5a:	e002      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	e000      	b.n	8009c62 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c60:	2304      	movs	r3, #4
 8009c62:	4a8b      	ldr	r2, [pc, #556]	; (8009e90 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009c64:	60d3      	str	r3, [r2, #12]
 8009c66:	e05f      	b.n	8009d28 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a89      	ldr	r2, [pc, #548]	; (8009e94 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d057      	beq.n	8009d22 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a88      	ldr	r2, [pc, #544]	; (8009e98 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d050      	beq.n	8009d1e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a86      	ldr	r2, [pc, #536]	; (8009e9c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d049      	beq.n	8009d1a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a85      	ldr	r2, [pc, #532]	; (8009ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d042      	beq.n	8009d16 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a83      	ldr	r2, [pc, #524]	; (8009ea4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d03a      	beq.n	8009d10 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a82      	ldr	r2, [pc, #520]	; (8009ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d032      	beq.n	8009d0a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a80      	ldr	r2, [pc, #512]	; (8009eac <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d02a      	beq.n	8009d04 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a7f      	ldr	r2, [pc, #508]	; (8009eb0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d022      	beq.n	8009cfe <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a7d      	ldr	r2, [pc, #500]	; (8009eb4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d01a      	beq.n	8009cf8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a7c      	ldr	r2, [pc, #496]	; (8009eb8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d012      	beq.n	8009cf2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a7a      	ldr	r2, [pc, #488]	; (8009ebc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00a      	beq.n	8009cec <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a79      	ldr	r2, [pc, #484]	; (8009ec0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d102      	bne.n	8009ce6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8009ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ce4:	e01e      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cea:	e01b      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009cec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cf0:	e018      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009cf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cf6:	e015      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009cf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cfc:	e012      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d02:	e00f      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d08:	e00c      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d0e:	e009      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d14:	e006      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d16:	2304      	movs	r3, #4
 8009d18:	e004      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	e002      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d1e:	2304      	movs	r3, #4
 8009d20:	e000      	b.n	8009d24 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d22:	2304      	movs	r3, #4
 8009d24:	4a5a      	ldr	r2, [pc, #360]	; (8009e90 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009d26:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	4b65      	ldr	r3, [pc, #404]	; (8009ec4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d95c      	bls.n	8009dee <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a56      	ldr	r2, [pc, #344]	; (8009e94 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d053      	beq.n	8009de6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a55      	ldr	r2, [pc, #340]	; (8009e98 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d04c      	beq.n	8009de2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a53      	ldr	r2, [pc, #332]	; (8009e9c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d045      	beq.n	8009dde <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a52      	ldr	r2, [pc, #328]	; (8009ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d03e      	beq.n	8009dda <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a50      	ldr	r2, [pc, #320]	; (8009ea4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d037      	beq.n	8009dd6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a4f      	ldr	r2, [pc, #316]	; (8009ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d030      	beq.n	8009dd2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a4d      	ldr	r2, [pc, #308]	; (8009eac <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d029      	beq.n	8009dce <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a4c      	ldr	r2, [pc, #304]	; (8009eb0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d022      	beq.n	8009dca <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a4a      	ldr	r2, [pc, #296]	; (8009eb4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d01a      	beq.n	8009dc4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a49      	ldr	r2, [pc, #292]	; (8009eb8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d012      	beq.n	8009dbe <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a47      	ldr	r2, [pc, #284]	; (8009ebc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00a      	beq.n	8009db8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a46      	ldr	r2, [pc, #280]	; (8009ec0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d102      	bne.n	8009db2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8009dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009db0:	e01a      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009db6:	e017      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dbc:	e014      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dc2:	e011      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dc8:	e00e      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dca:	2340      	movs	r3, #64	; 0x40
 8009dcc:	e00c      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	e00a      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dd2:	2340      	movs	r3, #64	; 0x40
 8009dd4:	e008      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dd6:	2340      	movs	r3, #64	; 0x40
 8009dd8:	e006      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e004      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e002      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4a37      	ldr	r2, [pc, #220]	; (8009ec8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009dea:	60d3      	str	r3, [r2, #12]
 8009dec:	e141      	b.n	800a072 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d97c      	bls.n	8009ef4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a25      	ldr	r2, [pc, #148]	; (8009e94 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d073      	beq.n	8009eec <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a23      	ldr	r2, [pc, #140]	; (8009e98 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d06c      	beq.n	8009ee8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a22      	ldr	r2, [pc, #136]	; (8009e9c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d065      	beq.n	8009ee4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d05e      	beq.n	8009ee0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a1f      	ldr	r2, [pc, #124]	; (8009ea4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d057      	beq.n	8009edc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a1d      	ldr	r2, [pc, #116]	; (8009ea8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d050      	beq.n	8009ed8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	; (8009eac <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d049      	beq.n	8009ed4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1a      	ldr	r2, [pc, #104]	; (8009eb0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d042      	beq.n	8009ed0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a19      	ldr	r2, [pc, #100]	; (8009eb4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d01a      	beq.n	8009e8a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d012      	beq.n	8009e84 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a16      	ldr	r2, [pc, #88]	; (8009ebc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00a      	beq.n	8009e7e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a14      	ldr	r2, [pc, #80]	; (8009ec0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d102      	bne.n	8009e78 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8009e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e76:	e03a      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e7c:	e037      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e82:	e034      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e88:	e031      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e8e:	e02e      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009e90:	40026000 	.word	0x40026000
 8009e94:	40026010 	.word	0x40026010
 8009e98:	40026410 	.word	0x40026410
 8009e9c:	40026070 	.word	0x40026070
 8009ea0:	40026470 	.word	0x40026470
 8009ea4:	40026028 	.word	0x40026028
 8009ea8:	40026428 	.word	0x40026428
 8009eac:	40026088 	.word	0x40026088
 8009eb0:	40026488 	.word	0x40026488
 8009eb4:	40026040 	.word	0x40026040
 8009eb8:	40026440 	.word	0x40026440
 8009ebc:	400260a0 	.word	0x400260a0
 8009ec0:	400264a0 	.word	0x400264a0
 8009ec4:	40026458 	.word	0x40026458
 8009ec8:	40026400 	.word	0x40026400
 8009ecc:	400260b8 	.word	0x400260b8
 8009ed0:	2340      	movs	r3, #64	; 0x40
 8009ed2:	e00c      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	e00a      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	e008      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	e006      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e004      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e002      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4a7b      	ldr	r2, [pc, #492]	; (800a0dc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009ef0:	6093      	str	r3, [r2, #8]
 8009ef2:	e0be      	b.n	800a072 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4b79      	ldr	r3, [pc, #484]	; (800a0e0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d95c      	bls.n	8009fba <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a77      	ldr	r2, [pc, #476]	; (800a0e4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d053      	beq.n	8009fb2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a76      	ldr	r2, [pc, #472]	; (800a0e8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d04c      	beq.n	8009fae <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a74      	ldr	r2, [pc, #464]	; (800a0ec <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d045      	beq.n	8009faa <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a73      	ldr	r2, [pc, #460]	; (800a0f0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d03e      	beq.n	8009fa6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a71      	ldr	r2, [pc, #452]	; (800a0f4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d037      	beq.n	8009fa2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a70      	ldr	r2, [pc, #448]	; (800a0f8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d030      	beq.n	8009f9e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a6e      	ldr	r2, [pc, #440]	; (800a0fc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d029      	beq.n	8009f9a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a6d      	ldr	r2, [pc, #436]	; (800a100 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d022      	beq.n	8009f96 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a6b      	ldr	r2, [pc, #428]	; (800a104 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d01a      	beq.n	8009f90 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a6a      	ldr	r2, [pc, #424]	; (800a108 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d012      	beq.n	8009f8a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a68      	ldr	r2, [pc, #416]	; (800a10c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d00a      	beq.n	8009f84 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a67      	ldr	r2, [pc, #412]	; (800a110 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d102      	bne.n	8009f7e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f7c:	e01a      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f82:	e017      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f88:	e014      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f8e:	e011      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f94:	e00e      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f96:	2340      	movs	r3, #64	; 0x40
 8009f98:	e00c      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f9a:	2340      	movs	r3, #64	; 0x40
 8009f9c:	e00a      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009f9e:	2340      	movs	r3, #64	; 0x40
 8009fa0:	e008      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009fa2:	2340      	movs	r3, #64	; 0x40
 8009fa4:	e006      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e004      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e002      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e000      	b.n	8009fb4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4a57      	ldr	r2, [pc, #348]	; (800a114 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009fb6:	60d3      	str	r3, [r2, #12]
 8009fb8:	e05b      	b.n	800a072 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a49      	ldr	r2, [pc, #292]	; (800a0e4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d053      	beq.n	800a06c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a47      	ldr	r2, [pc, #284]	; (800a0e8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d04c      	beq.n	800a068 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a46      	ldr	r2, [pc, #280]	; (800a0ec <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d045      	beq.n	800a064 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a44      	ldr	r2, [pc, #272]	; (800a0f0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d03e      	beq.n	800a060 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a43      	ldr	r2, [pc, #268]	; (800a0f4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d037      	beq.n	800a05c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a41      	ldr	r2, [pc, #260]	; (800a0f8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d030      	beq.n	800a058 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a40      	ldr	r2, [pc, #256]	; (800a0fc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d029      	beq.n	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a3e      	ldr	r2, [pc, #248]	; (800a100 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d022      	beq.n	800a050 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a3d      	ldr	r2, [pc, #244]	; (800a104 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d01a      	beq.n	800a04a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a3b      	ldr	r2, [pc, #236]	; (800a108 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d012      	beq.n	800a044 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a3a      	ldr	r2, [pc, #232]	; (800a10c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d00a      	beq.n	800a03e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a38      	ldr	r2, [pc, #224]	; (800a110 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d102      	bne.n	800a038 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800a032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a036:	e01a      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a03c:	e017      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a03e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a042:	e014      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a048:	e011      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a04a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a04e:	e00e      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	e00c      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a054:	2340      	movs	r3, #64	; 0x40
 800a056:	e00a      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	e008      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	e006      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a060:	2301      	movs	r3, #1
 800a062:	e004      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a064:	2301      	movs	r3, #1
 800a066:	e002      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a068:	2301      	movs	r3, #1
 800a06a:	e000      	b.n	800a06e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4a29      	ldr	r2, [pc, #164]	; (800a114 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800a070:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0216 	orr.w	r2, r2, #22
 800a080:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695a      	ldr	r2, [r3, #20]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a090:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	2b00      	cmp	r3, #0
 800a098:	d103      	bne.n	800a0a2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0208 	orr.w	r2, r2, #8
 800a0b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f042 0201 	orr.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]
 800a0c2:	e005      	b.n	800a0d0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	40026400 	.word	0x40026400
 800a0e0:	40026058 	.word	0x40026058
 800a0e4:	40026010 	.word	0x40026010
 800a0e8:	40026410 	.word	0x40026410
 800a0ec:	40026070 	.word	0x40026070
 800a0f0:	40026470 	.word	0x40026470
 800a0f4:	40026028 	.word	0x40026028
 800a0f8:	40026428 	.word	0x40026428
 800a0fc:	40026088 	.word	0x40026088
 800a100:	40026488 	.word	0x40026488
 800a104:	40026040 	.word	0x40026040
 800a108:	40026440 	.word	0x40026440
 800a10c:	400260a0 	.word	0x400260a0
 800a110:	400264a0 	.word	0x400264a0
 800a114:	40026000 	.word	0x40026000

0800a118 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800a126:	79fb      	ldrb	r3, [r7, #7]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	60da      	str	r2, [r3, #12]
 800a134:	e003      	b.n	800a13e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2b40      	cmp	r3, #64	; 0x40
 800a168:	d108      	bne.n	800a17c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a17a:	e007      	b.n	800a18c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	60da      	str	r2, [r3, #12]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <HAL_EXTI_SetConfigLine+0x16>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e08f      	b.n	800a2d2 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 031f 	and.w	r3, r3, #31
 800a1c2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1cc:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d052      	beq.n	800a280 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 800a1e6:	4b3e      	ldr	r3, [pc, #248]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	493d      	ldr	r1, [pc, #244]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	608b      	str	r3, [r1, #8]
 800a1f2:	e006      	b.n	800a202 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 800a1f4:	4b3a      	ldr	r3, [pc, #232]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	43db      	mvns	r3, r3
 800a1fc:	4938      	ldr	r1, [pc, #224]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a1fe:	4013      	ands	r3, r2
 800a200:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d006      	beq.n	800a21c <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 800a20e:	4b34      	ldr	r3, [pc, #208]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	4933      	ldr	r1, [pc, #204]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	4313      	orrs	r3, r2
 800a218:	60cb      	str	r3, [r1, #12]
 800a21a:	e006      	b.n	800a22a <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 800a21c:	4b30      	ldr	r3, [pc, #192]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	43db      	mvns	r3, r3
 800a224:	492e      	ldr	r1, [pc, #184]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a226:	4013      	ands	r3, r2
 800a228:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a232:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a236:	d123      	bne.n	800a280 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a238:	4a2a      	ldr	r2, [pc, #168]	; (800a2e4 <HAL_EXTI_SetConfigLine+0x14c>)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	089b      	lsrs	r3, r3, #2
 800a23e:	3302      	adds	r3, #2
 800a240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a244:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	220f      	movs	r2, #15
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	43db      	mvns	r3, r3
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4013      	ands	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	68da      	ldr	r2, [r3, #12]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	fa02 f303 	lsl.w	r3, r2, r3
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800a272:	491c      	ldr	r1, [pc, #112]	; (800a2e4 <HAL_EXTI_SetConfigLine+0x14c>)
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	089b      	lsrs	r3, r3, #2
 800a278:	3302      	adds	r3, #2
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d006      	beq.n	800a29a <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 800a28c:	4b14      	ldr	r3, [pc, #80]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4913      	ldr	r1, [pc, #76]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	4313      	orrs	r3, r2
 800a296:	600b      	str	r3, [r1, #0]
 800a298:	e006      	b.n	800a2a8 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 800a29a:	4b11      	ldr	r3, [pc, #68]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	490f      	ldr	r1, [pc, #60]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	4909      	ldr	r1, [pc, #36]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	604b      	str	r3, [r1, #4]
 800a2c0:	e006      	b.n	800a2d0 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 800a2c2:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	43db      	mvns	r3, r3
 800a2ca:	4905      	ldr	r1, [pc, #20]	; (800a2e0 <HAL_EXTI_SetConfigLine+0x148>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40013c00 	.word	0x40013c00
 800a2e4:	40013800 	.word	0x40013800

0800a2e8 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <HAL_EXTI_GetConfigLine+0x16>
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e061      	b.n	800a3c6 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 031f 	and.w	r3, r3, #31
 800a312:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a314:	2201      	movs	r2, #1
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 800a31e:	4b2d      	ldr	r3, [pc, #180]	; (800a3d4 <HAL_EXTI_GetConfigLine+0xec>)
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	4013      	ands	r3, r2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2201      	movs	r2, #1
 800a32e:	605a      	str	r2, [r3, #4]
 800a330:	e002      	b.n	800a338 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2200      	movs	r2, #0
 800a336:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 800a338:	4b26      	ldr	r3, [pc, #152]	; (800a3d4 <HAL_EXTI_GetConfigLine+0xec>)
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	4013      	ands	r3, r2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f043 0202 	orr.w	r2, r3, #2
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d02d      	beq.n	800a3c4 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <HAL_EXTI_GetConfigLine+0xec>)
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	4013      	ands	r3, r2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2201      	movs	r2, #1
 800a378:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 800a37a:	4b16      	ldr	r3, [pc, #88]	; (800a3d4 <HAL_EXTI_GetConfigLine+0xec>)
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	4013      	ands	r3, r2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d005      	beq.n	800a392 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f043 0202 	orr.w	r2, r3, #2
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a39a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a39e:	d111      	bne.n	800a3c4 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a3a0:	4a0d      	ldr	r2, [pc, #52]	; (800a3d8 <HAL_EXTI_GetConfigLine+0xf0>)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	089b      	lsrs	r3, r3, #2
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ac:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	43db      	mvns	r3, r3
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a3be:	0e1a      	lsrs	r2, r3, #24
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	40013c00 	.word	0x40013c00
 800a3d8:	40013800 	.word	0x40013800

0800a3dc <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e04c      	b.n	800a488 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 031f 	and.w	r3, r3, #31
 800a3f6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a400:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 800a402:	4b24      	ldr	r3, [pc, #144]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	43db      	mvns	r3, r3
 800a40a:	4922      	ldr	r1, [pc, #136]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 800a410:	4b20      	ldr	r3, [pc, #128]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	43db      	mvns	r3, r3
 800a418:	491e      	ldr	r1, [pc, #120]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a41a:	4013      	ands	r3, r2
 800a41c:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d02d      	beq.n	800a486 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 800a42a:	4b1a      	ldr	r3, [pc, #104]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a42c:	689a      	ldr	r2, [r3, #8]
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	43db      	mvns	r3, r3
 800a432:	4918      	ldr	r1, [pc, #96]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a434:	4013      	ands	r3, r2
 800a436:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 800a438:	4b16      	ldr	r3, [pc, #88]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	43db      	mvns	r3, r3
 800a440:	4914      	ldr	r1, [pc, #80]	; (800a494 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a442:	4013      	ands	r3, r2
 800a444:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a44e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a452:	d118      	bne.n	800a486 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a454:	4a10      	ldr	r2, [pc, #64]	; (800a498 <HAL_EXTI_ClearConfigLine+0xbc>)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	089b      	lsrs	r3, r3, #2
 800a45a:	3302      	adds	r3, #2
 800a45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a460:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	220f      	movs	r2, #15
 800a46c:	fa02 f303 	lsl.w	r3, r2, r3
 800a470:	43db      	mvns	r3, r3
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	4013      	ands	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800a478:	4907      	ldr	r1, [pc, #28]	; (800a498 <HAL_EXTI_ClearConfigLine+0xbc>)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	089b      	lsrs	r3, r3, #2
 800a47e:	3302      	adds	r3, #2
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	40013c00 	.word	0x40013c00
 800a498:	40013800 	.word	0x40013800

0800a49c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d103      	bne.n	800a4bc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	605a      	str	r2, [r3, #4]
      break;
 800a4ba:	e002      	b.n	800a4c2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c0:	bf00      	nop
  }

  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e003      	b.n	800a4ec <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
  }
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 031f 	and.w	r3, r3, #31
 800a508:	2201      	movs	r2, #1
 800a50a:	fa02 f303 	lsl.w	r3, r2, r3
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <HAL_EXTI_IRQHandler+0x44>)
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4013      	ands	r3, r2
 800a518:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d009      	beq.n	800a534 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a520:	4a06      	ldr	r2, [pc, #24]	; (800a53c <HAL_EXTI_IRQHandler+0x44>)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	4798      	blx	r3
    }
  }
}
 800a534:	bf00      	nop
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	40013c00 	.word	0x40013c00

0800a540 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 031f 	and.w	r3, r3, #31
 800a552:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a554:	2201      	movs	r2, #1
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	fa02 f303 	lsl.w	r3, r2, r3
 800a55c:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800a55e:	4b07      	ldr	r3, [pc, #28]	; (800a57c <HAL_EXTI_GetPending+0x3c>)
 800a560:	695a      	ldr	r2, [r3, #20]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	401a      	ands	r2, r3
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	fa22 f303 	lsr.w	r3, r2, r3
 800a56c:	60fb      	str	r3, [r7, #12]
  return regval;
 800a56e:	68fb      	ldr	r3, [r7, #12]
}
 800a570:	4618      	mov	r0, r3
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	40013c00 	.word	0x40013c00

0800a580 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 031f 	and.w	r3, r3, #31
 800a592:	2201      	movs	r2, #1
 800a594:	fa02 f303 	lsl.w	r3, r2, r3
 800a598:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800a59a:	4a04      	ldr	r2, [pc, #16]	; (800a5ac <HAL_EXTI_ClearPending+0x2c>)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6153      	str	r3, [r2, #20]
}
 800a5a0:	bf00      	nop
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	40013c00 	.word	0x40013c00

0800a5b0 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 031f 	and.w	r3, r3, #31
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 800a5c8:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <HAL_EXTI_GenerateSWI+0x2c>)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6113      	str	r3, [r2, #16]
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	40013c00 	.word	0x40013c00

0800a5e0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a5f2:	4b23      	ldr	r3, [pc, #140]	; (800a680 <HAL_FLASH_Program+0xa0>)
 800a5f4:	7e1b      	ldrb	r3, [r3, #24]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <HAL_FLASH_Program+0x1e>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e03b      	b.n	800a676 <HAL_FLASH_Program+0x96>
 800a5fe:	4b20      	ldr	r3, [pc, #128]	; (800a680 <HAL_FLASH_Program+0xa0>)
 800a600:	2201      	movs	r2, #1
 800a602:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a604:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a608:	f000 f9be 	bl	800a988 <FLASH_WaitForLastOperation>
 800a60c:	4603      	mov	r3, r0
 800a60e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d12b      	bne.n	800a66e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d105      	bne.n	800a628 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a61c:	783b      	ldrb	r3, [r7, #0]
 800a61e:	4619      	mov	r1, r3
 800a620:	68b8      	ldr	r0, [r7, #8]
 800a622:	f000 fa69 	bl	800aaf8 <FLASH_Program_Byte>
 800a626:	e016      	b.n	800a656 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d105      	bne.n	800a63a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a62e:	883b      	ldrh	r3, [r7, #0]
 800a630:	4619      	mov	r1, r3
 800a632:	68b8      	ldr	r0, [r7, #8]
 800a634:	f000 fa3c 	bl	800aab0 <FLASH_Program_HalfWord>
 800a638:	e00d      	b.n	800a656 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d105      	bne.n	800a64c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	4619      	mov	r1, r3
 800a644:	68b8      	ldr	r0, [r7, #8]
 800a646:	f000 fa11 	bl	800aa6c <FLASH_Program_Word>
 800a64a:	e004      	b.n	800a656 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a64c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a650:	68b8      	ldr	r0, [r7, #8]
 800a652:	f000 f9d9 	bl	800aa08 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a656:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a65a:	f000 f995 	bl	800a988 <FLASH_WaitForLastOperation>
 800a65e:	4603      	mov	r3, r0
 800a660:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <HAL_FLASH_Program+0xa4>)
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	4a07      	ldr	r2, [pc, #28]	; (800a684 <HAL_FLASH_Program+0xa4>)
 800a668:	f023 0301 	bic.w	r3, r3, #1
 800a66c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a66e:	4b04      	ldr	r3, [pc, #16]	; (800a680 <HAL_FLASH_Program+0xa0>)
 800a670:	2200      	movs	r2, #0
 800a672:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	200009dc 	.word	0x200009dc
 800a684:	40023c00 	.word	0x40023c00

0800a688 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a69a:	4b20      	ldr	r3, [pc, #128]	; (800a71c <HAL_FLASH_Program_IT+0x94>)
 800a69c:	7e1b      	ldrb	r3, [r3, #24]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_FLASH_Program_IT+0x1e>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e035      	b.n	800a712 <HAL_FLASH_Program_IT+0x8a>
 800a6a6:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <HAL_FLASH_Program_IT+0x94>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a6ac:	4b1c      	ldr	r3, [pc, #112]	; (800a720 <HAL_FLASH_Program_IT+0x98>)
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	4a1b      	ldr	r2, [pc, #108]	; (800a720 <HAL_FLASH_Program_IT+0x98>)
 800a6b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6b6:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a6b8:	4b19      	ldr	r3, [pc, #100]	; (800a720 <HAL_FLASH_Program_IT+0x98>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	4a18      	ldr	r2, [pc, #96]	; (800a720 <HAL_FLASH_Program_IT+0x98>)
 800a6be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a6c2:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800a6c4:	4b15      	ldr	r3, [pc, #84]	; (800a71c <HAL_FLASH_Program_IT+0x94>)
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 800a6ca:	4a14      	ldr	r2, [pc, #80]	; (800a71c <HAL_FLASH_Program_IT+0x94>)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d105      	bne.n	800a6e2 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a6d6:	783b      	ldrb	r3, [r7, #0]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68b8      	ldr	r0, [r7, #8]
 800a6dc:	f000 fa0c 	bl	800aaf8 <FLASH_Program_Byte>
 800a6e0:	e016      	b.n	800a710 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d105      	bne.n	800a6f4 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a6e8:	883b      	ldrh	r3, [r7, #0]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68b8      	ldr	r0, [r7, #8]
 800a6ee:	f000 f9df 	bl	800aab0 <FLASH_Program_HalfWord>
 800a6f2:	e00d      	b.n	800a710 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d105      	bne.n	800a706 <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	68b8      	ldr	r0, [r7, #8]
 800a700:	f000 f9b4 	bl	800aa6c <FLASH_Program_Word>
 800a704:	e004      	b.n	800a710 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f000 f97c 	bl	800aa08 <FLASH_Program_DoubleWord>
  }

  return status;
 800a710:	7dfb      	ldrb	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200009dc 	.word	0x200009dc
 800a720:	40023c00 	.word	0x40023c00

0800a724 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a72e:	4b4b      	ldr	r3, [pc, #300]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d020      	beq.n	800a77c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a73a:	4b49      	ldr	r3, [pc, #292]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b01      	cmp	r3, #1
 800a742:	d107      	bne.n	800a754 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a744:	4b46      	ldr	r3, [pc, #280]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a74a:	4b45      	ldr	r3, [pc, #276]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a74c:	f04f 32ff 	mov.w	r2, #4294967295
 800a750:	60da      	str	r2, [r3, #12]
 800a752:	e00b      	b.n	800a76c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a754:	4b42      	ldr	r3, [pc, #264]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d103      	bne.n	800a766 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a75e:	4b40      	ldr	r3, [pc, #256]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	607b      	str	r3, [r7, #4]
 800a764:	e002      	b.n	800a76c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a766:	4b3e      	ldr	r3, [pc, #248]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a76c:	f000 f9e6 	bl	800ab3c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f881 	bl	800a878 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a776:	4b3a      	ldr	r3, [pc, #232]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a77c:	4b37      	ldr	r3, [pc, #220]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d04a      	beq.n	800a81e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a788:	4b34      	ldr	r3, [pc, #208]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a78a:	2201      	movs	r2, #1
 800a78c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a78e:	4b34      	ldr	r3, [pc, #208]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d12d      	bne.n	800a7f4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a798:	4b31      	ldr	r3, [pc, #196]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	4a30      	ldr	r2, [pc, #192]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7a0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a7a2:	4b2f      	ldr	r3, [pc, #188]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d015      	beq.n	800a7d6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a7aa:	4b2d      	ldr	r3, [pc, #180]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f857 	bl	800a864 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a7b6:	4b2a      	ldr	r3, [pc, #168]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	4a28      	ldr	r2, [pc, #160]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7be:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a7c0:	4b27      	ldr	r3, [pc, #156]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a7c6:	4b26      	ldr	r3, [pc, #152]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7c8:	7a1b      	ldrb	r3, [r3, #8]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fb84 	bl	800aedc <FLASH_Erase_Sector>
 800a7d4:	e023      	b.n	800a81e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7da:	607b      	str	r3, [r7, #4]
 800a7dc:	4a20      	ldr	r2, [pc, #128]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a7e2:	4b1f      	ldr	r3, [pc, #124]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a7e8:	f000 fcb6 	bl	800b158 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f839 	bl	800a864 <HAL_FLASH_EndOfOperationCallback>
 800a7f2:	e014      	b.n	800a81e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a7f4:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d107      	bne.n	800a80e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a7fe:	f000 fcab 	bl	800b158 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a802:	4b17      	ldr	r3, [pc, #92]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	4618      	mov	r0, r3
 800a808:	f000 f82c 	bl	800a864 <HAL_FLASH_EndOfOperationCallback>
 800a80c:	e004      	b.n	800a818 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a80e:	4b14      	ldr	r3, [pc, #80]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f826 	bl	800a864 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a818:	4b11      	ldr	r3, [pc, #68]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a81e:	4b10      	ldr	r3, [pc, #64]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	d114      	bne.n	800a852 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a828:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	4a0b      	ldr	r2, [pc, #44]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a82e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a832:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a834:	4b09      	ldr	r3, [pc, #36]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	4a08      	ldr	r2, [pc, #32]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a83e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	4a05      	ldr	r2, [pc, #20]	; (800a85c <HAL_FLASH_IRQHandler+0x138>)
 800a846:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a84a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a84c:	4b04      	ldr	r3, [pc, #16]	; (800a860 <HAL_FLASH_IRQHandler+0x13c>)
 800a84e:	2200      	movs	r2, #0
 800a850:	761a      	strb	r2, [r3, #24]
  }
}
 800a852:	bf00      	nop
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	40023c00 	.word	0x40023c00
 800a860:	200009dc 	.word	0x200009dc

0800a864 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a896:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <HAL_FLASH_Unlock+0x38>)
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da0b      	bge.n	800a8b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <HAL_FLASH_Unlock+0x38>)
 800a8a0:	4a09      	ldr	r2, [pc, #36]	; (800a8c8 <HAL_FLASH_Unlock+0x3c>)
 800a8a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <HAL_FLASH_Unlock+0x38>)
 800a8a6:	4a09      	ldr	r2, [pc, #36]	; (800a8cc <HAL_FLASH_Unlock+0x40>)
 800a8a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a8aa:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <HAL_FLASH_Unlock+0x38>)
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da01      	bge.n	800a8b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	40023c00 	.word	0x40023c00
 800a8c8:	45670123 	.word	0x45670123
 800a8cc:	cdef89ab 	.word	0xcdef89ab

0800a8d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a8d4:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <HAL_FLASH_Lock+0x1c>)
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <HAL_FLASH_Lock+0x1c>)
 800a8da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	40023c00 	.word	0x40023c00

0800a8f0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a8f4:	4b09      	ldr	r3, [pc, #36]	; (800a91c <HAL_FLASH_OB_Unlock+0x2c>)
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d007      	beq.n	800a910 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a900:	4b06      	ldr	r3, [pc, #24]	; (800a91c <HAL_FLASH_OB_Unlock+0x2c>)
 800a902:	4a07      	ldr	r2, [pc, #28]	; (800a920 <HAL_FLASH_OB_Unlock+0x30>)
 800a904:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a906:	4b05      	ldr	r3, [pc, #20]	; (800a91c <HAL_FLASH_OB_Unlock+0x2c>)
 800a908:	4a06      	ldr	r2, [pc, #24]	; (800a924 <HAL_FLASH_OB_Unlock+0x34>)
 800a90a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a90c:	2300      	movs	r3, #0
 800a90e:	e000      	b.n	800a912 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
}
 800a912:	4618      	mov	r0, r3
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	40023c00 	.word	0x40023c00
 800a920:	08192a3b 	.word	0x08192a3b
 800a924:	4c5d6e7f 	.word	0x4c5d6e7f

0800a928 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <HAL_FLASH_OB_Lock+0x1c>)
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	4a04      	ldr	r2, [pc, #16]	; (800a944 <HAL_FLASH_OB_Lock+0x1c>)
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	40023c00 	.word	0x40023c00

0800a948 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a94c:	4b07      	ldr	r3, [pc, #28]	; (800a96c <HAL_FLASH_OB_Launch+0x24>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	4a06      	ldr	r2, [pc, #24]	; (800a96c <HAL_FLASH_OB_Launch+0x24>)
 800a954:	f043 0302 	orr.w	r3, r3, #2
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a95c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a960:	f000 f812 	bl	800a988 <FLASH_WaitForLastOperation>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	40023c14 	.word	0x40023c14

0800a970 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a970:	b480      	push	{r7}
 800a972:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a974:	4b03      	ldr	r3, [pc, #12]	; (800a984 <HAL_FLASH_GetError+0x14>)
 800a976:	69db      	ldr	r3, [r3, #28]
}  
 800a978:	4618      	mov	r0, r3
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	200009dc 	.word	0x200009dc

0800a988 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a994:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <FLASH_WaitForLastOperation+0x78>)
 800a996:	2200      	movs	r2, #0
 800a998:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a99a:	f7fc fabb 	bl	8006f14 <HAL_GetTick>
 800a99e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a9a0:	e010      	b.n	800a9c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a8:	d00c      	beq.n	800a9c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d007      	beq.n	800a9c0 <FLASH_WaitForLastOperation+0x38>
 800a9b0:	f7fc fab0 	bl	8006f14 <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d201      	bcs.n	800a9c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e019      	b.n	800a9f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <FLASH_WaitForLastOperation+0x7c>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1e8      	bne.n	800a9a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a9d0:	4b0c      	ldr	r3, [pc, #48]	; (800aa04 <FLASH_WaitForLastOperation+0x7c>)
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a9dc:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <FLASH_WaitForLastOperation+0x7c>)
 800a9de:	2201      	movs	r2, #1
 800a9e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a9e2:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <FLASH_WaitForLastOperation+0x7c>)
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a9ee:	f000 f8a5 	bl	800ab3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
  
}  
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	200009dc 	.word	0x200009dc
 800aa04:	40023c00 	.word	0x40023c00

0800aa08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa14:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <FLASH_Program_DoubleWord+0x60>)
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	4a13      	ldr	r2, [pc, #76]	; (800aa68 <FLASH_Program_DoubleWord+0x60>)
 800aa1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800aa20:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <FLASH_Program_DoubleWord+0x60>)
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	4a10      	ldr	r2, [pc, #64]	; (800aa68 <FLASH_Program_DoubleWord+0x60>)
 800aa26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aa2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa2c:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <FLASH_Program_DoubleWord+0x60>)
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	4a0d      	ldr	r2, [pc, #52]	; (800aa68 <FLASH_Program_DoubleWord+0x60>)
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800aa3e:	f3bf 8f6f 	isb	sy
}
 800aa42:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800aa44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa48:	f04f 0200 	mov.w	r2, #0
 800aa4c:	f04f 0300 	mov.w	r3, #0
 800aa50:	000a      	movs	r2, r1
 800aa52:	2300      	movs	r3, #0
 800aa54:	68f9      	ldr	r1, [r7, #12]
 800aa56:	3104      	adds	r1, #4
 800aa58:	4613      	mov	r3, r2
 800aa5a:	600b      	str	r3, [r1, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	40023c00 	.word	0x40023c00

0800aa6c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa76:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <FLASH_Program_Word+0x40>)
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	4a0c      	ldr	r2, [pc, #48]	; (800aaac <FLASH_Program_Word+0x40>)
 800aa7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <FLASH_Program_Word+0x40>)
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	4a09      	ldr	r2, [pc, #36]	; (800aaac <FLASH_Program_Word+0x40>)
 800aa88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa8e:	4b07      	ldr	r3, [pc, #28]	; (800aaac <FLASH_Program_Word+0x40>)
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	4a06      	ldr	r2, [pc, #24]	; (800aaac <FLASH_Program_Word+0x40>)
 800aa94:	f043 0301 	orr.w	r3, r3, #1
 800aa98:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	601a      	str	r2, [r3, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40023c00 	.word	0x40023c00

0800aab0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aabc:	4b0d      	ldr	r3, [pc, #52]	; (800aaf4 <FLASH_Program_HalfWord+0x44>)
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	4a0c      	ldr	r2, [pc, #48]	; (800aaf4 <FLASH_Program_HalfWord+0x44>)
 800aac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800aac8:	4b0a      	ldr	r3, [pc, #40]	; (800aaf4 <FLASH_Program_HalfWord+0x44>)
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	4a09      	ldr	r2, [pc, #36]	; (800aaf4 <FLASH_Program_HalfWord+0x44>)
 800aace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <FLASH_Program_HalfWord+0x44>)
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	4a06      	ldr	r2, [pc, #24]	; (800aaf4 <FLASH_Program_HalfWord+0x44>)
 800aada:	f043 0301 	orr.w	r3, r3, #1
 800aade:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	887a      	ldrh	r2, [r7, #2]
 800aae4:	801a      	strh	r2, [r3, #0]
}
 800aae6:	bf00      	nop
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	40023c00 	.word	0x40023c00

0800aaf8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <FLASH_Program_Byte+0x40>)
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	4a0b      	ldr	r2, [pc, #44]	; (800ab38 <FLASH_Program_Byte+0x40>)
 800ab0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ab10:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <FLASH_Program_Byte+0x40>)
 800ab12:	4a09      	ldr	r2, [pc, #36]	; (800ab38 <FLASH_Program_Byte+0x40>)
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab18:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <FLASH_Program_Byte+0x40>)
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	4a06      	ldr	r2, [pc, #24]	; (800ab38 <FLASH_Program_Byte+0x40>)
 800ab1e:	f043 0301 	orr.w	r3, r3, #1
 800ab22:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	78fa      	ldrb	r2, [r7, #3]
 800ab28:	701a      	strb	r2, [r3, #0]
}
 800ab2a:	bf00      	nop
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	40023c00 	.word	0x40023c00

0800ab3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ab40:	4b27      	ldr	r3, [pc, #156]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f003 0310 	and.w	r3, r3, #16
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d008      	beq.n	800ab5e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ab4c:	4b25      	ldr	r3, [pc, #148]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	f043 0310 	orr.w	r3, r3, #16
 800ab54:	4a23      	ldr	r2, [pc, #140]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800ab56:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ab58:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab5a:	2210      	movs	r2, #16
 800ab5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ab5e:	4b20      	ldr	r3, [pc, #128]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d008      	beq.n	800ab7c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ab6a:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	f043 0308 	orr.w	r3, r3, #8
 800ab72:	4a1c      	ldr	r2, [pc, #112]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800ab74:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ab76:	4b1a      	ldr	r3, [pc, #104]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab78:	2220      	movs	r2, #32
 800ab7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ab7c:	4b18      	ldr	r3, [pc, #96]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d008      	beq.n	800ab9a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ab88:	4b16      	ldr	r3, [pc, #88]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f043 0304 	orr.w	r3, r3, #4
 800ab90:	4a14      	ldr	r2, [pc, #80]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800ab92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ab94:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab96:	2240      	movs	r2, #64	; 0x40
 800ab98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ab9a:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d008      	beq.n	800abb8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f043 0302 	orr.w	r3, r3, #2
 800abae:	4a0d      	ldr	r2, [pc, #52]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800abb0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800abb2:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800abb4:	2280      	movs	r2, #128	; 0x80
 800abb6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800abb8:	4b09      	ldr	r3, [pc, #36]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d008      	beq.n	800abd6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800abc4:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	f043 0320 	orr.w	r3, r3, #32
 800abcc:	4a05      	ldr	r2, [pc, #20]	; (800abe4 <FLASH_SetErrorCode+0xa8>)
 800abce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800abd0:	4b03      	ldr	r3, [pc, #12]	; (800abe0 <FLASH_SetErrorCode+0xa4>)
 800abd2:	2202      	movs	r2, #2
 800abd4:	60da      	str	r2, [r3, #12]
  }
}
 800abd6:	bf00      	nop
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	40023c00 	.word	0x40023c00
 800abe4:	200009dc 	.word	0x200009dc

0800abe8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800abfa:	4b31      	ldr	r3, [pc, #196]	; (800acc0 <HAL_FLASHEx_Erase+0xd8>)
 800abfc:	7e1b      	ldrb	r3, [r3, #24]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d101      	bne.n	800ac06 <HAL_FLASHEx_Erase+0x1e>
 800ac02:	2302      	movs	r3, #2
 800ac04:	e058      	b.n	800acb8 <HAL_FLASHEx_Erase+0xd0>
 800ac06:	4b2e      	ldr	r3, [pc, #184]	; (800acc0 <HAL_FLASHEx_Erase+0xd8>)
 800ac08:	2201      	movs	r2, #1
 800ac0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac10:	f7ff feba 	bl	800a988 <FLASH_WaitForLastOperation>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d148      	bne.n	800acb0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	f04f 32ff 	mov.w	r2, #4294967295
 800ac24:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d115      	bne.n	800ac5a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f000 f92b 	bl	800ae96 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac40:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac44:	f7ff fea0 	bl	800a988 <FLASH_WaitForLastOperation>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ac4c:	4b1d      	ldr	r3, [pc, #116]	; (800acc4 <HAL_FLASHEx_Erase+0xdc>)
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	4a1c      	ldr	r2, [pc, #112]	; (800acc4 <HAL_FLASHEx_Erase+0xdc>)
 800ac52:	f023 0304 	bic.w	r3, r3, #4
 800ac56:	6113      	str	r3, [r2, #16]
 800ac58:	e028      	b.n	800acac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	60bb      	str	r3, [r7, #8]
 800ac60:	e01c      	b.n	800ac9c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	4619      	mov	r1, r3
 800ac6a:	68b8      	ldr	r0, [r7, #8]
 800ac6c:	f000 f936 	bl	800aedc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac70:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac74:	f7ff fe88 	bl	800a988 <FLASH_WaitForLastOperation>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ac7c:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <HAL_FLASHEx_Erase+0xdc>)
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	4a10      	ldr	r2, [pc, #64]	; (800acc4 <HAL_FLASHEx_Erase+0xdc>)
 800ac82:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ac86:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	601a      	str	r2, [r3, #0]
          break;
 800ac94:	e00a      	b.n	800acac <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	60bb      	str	r3, [r7, #8]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	4413      	add	r3, r2
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d3da      	bcc.n	800ac62 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800acac:	f000 fa54 	bl	800b158 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800acb0:	4b03      	ldr	r3, [pc, #12]	; (800acc0 <HAL_FLASHEx_Erase+0xd8>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	761a      	strb	r2, [r3, #24]

  return status;
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	200009dc 	.word	0x200009dc
 800acc4:	40023c00 	.word	0x40023c00

0800acc8 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800acd4:	4b25      	ldr	r3, [pc, #148]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800acd6:	7e1b      	ldrb	r3, [r3, #24]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d101      	bne.n	800ace0 <HAL_FLASHEx_Erase_IT+0x18>
 800acdc:	2302      	movs	r3, #2
 800acde:	e040      	b.n	800ad62 <HAL_FLASHEx_Erase_IT+0x9a>
 800ace0:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800ace6:	4b22      	ldr	r3, [pc, #136]	; (800ad70 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	4a21      	ldr	r2, [pc, #132]	; (800ad70 <HAL_FLASHEx_Erase_IT+0xa8>)
 800acec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acf0:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800acf2:	4b1f      	ldr	r3, [pc, #124]	; (800ad70 <HAL_FLASHEx_Erase_IT+0xa8>)
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	4a1e      	ldr	r2, [pc, #120]	; (800ad70 <HAL_FLASHEx_Erase_IT+0xa8>)
 800acf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800acfc:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800acfe:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ad00:	22f3      	movs	r2, #243	; 0xf3
 800ad02:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d110      	bne.n	800ad2e <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800ad0c:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad0e:	2202      	movs	r2, #2
 800ad10:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4a15      	ldr	r2, [pc, #84]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad18:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f000 f8b5 	bl	800ae96 <FLASH_MassErase>
 800ad2c:	e018      	b.n	800ad60 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800ad2e:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad30:	2201      	movs	r2, #1
 800ad32:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4a0c      	ldr	r2, [pc, #48]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad3a:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad42:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad4c:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f000 f8be 	bl	800aedc <FLASH_Erase_Sector>
  }

  return status;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200009dc 	.word	0x200009dc
 800ad70:	40023c00 	.word	0x40023c00

0800ad74 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ad80:	4b32      	ldr	r3, [pc, #200]	; (800ae4c <HAL_FLASHEx_OBProgram+0xd8>)
 800ad82:	7e1b      	ldrb	r3, [r3, #24]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d101      	bne.n	800ad8c <HAL_FLASHEx_OBProgram+0x18>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e05b      	b.n	800ae44 <HAL_FLASHEx_OBProgram+0xd0>
 800ad8c:	4b2f      	ldr	r3, [pc, #188]	; (800ae4c <HAL_FLASHEx_OBProgram+0xd8>)
 800ad8e:	2201      	movs	r2, #1
 800ad90:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d018      	beq.n	800add0 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d10a      	bne.n	800adbc <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689a      	ldr	r2, [r3, #8]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f000 f8db 	bl	800af6c <FLASH_OB_EnableWRP>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73fb      	strb	r3, [r7, #15]
 800adba:	e009      	b.n	800add0 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	4619      	mov	r1, r3
 800adc6:	4610      	mov	r0, r2
 800adc8:	f000 f8f2 	bl	800afb0 <FLASH_OB_DisableWRP>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d007      	beq.n	800adec <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 f904 	bl	800aff0 <FLASH_OB_RDP_LevelConfig>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d013      	beq.n	800ae20 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	7e1b      	ldrb	r3, [r3, #24]
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ae06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0a:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ae10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	461a      	mov	r2, r3
 800ae18:	f000 f904 	bl	800b024 <FLASH_OB_UserConfig>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d007      	beq.n	800ae3c <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 f926 	bl	800b084 <FLASH_OB_BOR_LevelConfig>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae3c:	4b03      	ldr	r3, [pc, #12]	; (800ae4c <HAL_FLASHEx_OBProgram+0xd8>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	761a      	strb	r2, [r3, #24]

  return status;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200009dc 	.word	0x200009dc

0800ae50 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	220f      	movs	r2, #15
 800ae5c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800ae5e:	f000 f93f 	bl	800b0e0 <FLASH_OB_GetWRP>
 800ae62:	4603      	mov	r3, r0
 800ae64:	461a      	mov	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800ae6a:	f000 f945 	bl	800b0f8 <FLASH_OB_GetRDP>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	461a      	mov	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800ae76:	f000 f923 	bl	800b0c0 <FLASH_OB_GetUser>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800ae82:	f000 f959 	bl	800b138 <FLASH_OB_GetBOR>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	615a      	str	r2, [r3, #20]
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b083      	sub	sp, #12
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	6039      	str	r1, [r7, #0]
 800aea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aea2:	4b0d      	ldr	r3, [pc, #52]	; (800aed8 <FLASH_MassErase+0x42>)
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	4a0c      	ldr	r2, [pc, #48]	; (800aed8 <FLASH_MassErase+0x42>)
 800aea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800aeae:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <FLASH_MassErase+0x42>)
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	4a09      	ldr	r2, [pc, #36]	; (800aed8 <FLASH_MassErase+0x42>)
 800aeb4:	f043 0304 	orr.w	r3, r3, #4
 800aeb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <FLASH_MassErase+0x42>)
 800aebc:	691a      	ldr	r2, [r3, #16]
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	021b      	lsls	r3, r3, #8
 800aec2:	4313      	orrs	r3, r2
 800aec4:	4a04      	ldr	r2, [pc, #16]	; (800aed8 <FLASH_MassErase+0x42>)
 800aec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeca:	6113      	str	r3, [r2, #16]
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	40023c00 	.word	0x40023c00

0800aedc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d102      	bne.n	800aef8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	e010      	b.n	800af1a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d103      	bne.n	800af06 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800aefe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e009      	b.n	800af1a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800af06:	78fb      	ldrb	r3, [r7, #3]
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d103      	bne.n	800af14 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800af0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	e002      	b.n	800af1a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800af14:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af18:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af1a:	4b13      	ldr	r3, [pc, #76]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	4a12      	ldr	r2, [pc, #72]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af28:	691a      	ldr	r2, [r3, #16]
 800af2a:	490f      	ldr	r1, [pc, #60]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800af32:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	4a0c      	ldr	r2, [pc, #48]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800af3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800af3e:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af40:	691a      	ldr	r2, [r3, #16]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	4313      	orrs	r3, r2
 800af48:	4a07      	ldr	r2, [pc, #28]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af4a:	f043 0302 	orr.w	r3, r3, #2
 800af4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800af50:	4b05      	ldr	r3, [pc, #20]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	4a04      	ldr	r2, [pc, #16]	; (800af68 <FLASH_Erase_Sector+0x8c>)
 800af56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af5a:	6113      	str	r3, [r2, #16]
}
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	40023c00 	.word	0x40023c00

0800af6c <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af7e:	f7ff fd03 	bl	800a988 <FLASH_WaitForLastOperation>
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800af8c:	4b07      	ldr	r3, [pc, #28]	; (800afac <FLASH_OB_EnableWRP+0x40>)
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	b29b      	uxth	r3, r3
 800af96:	43db      	mvns	r3, r3
 800af98:	b29b      	uxth	r3, r3
 800af9a:	4904      	ldr	r1, [pc, #16]	; (800afac <FLASH_OB_EnableWRP+0x40>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	40023c16 	.word	0x40023c16

0800afb0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800afc2:	f7ff fce1 	bl	800a988 <FLASH_WaitForLastOperation>
 800afc6:	4603      	mov	r3, r0
 800afc8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d108      	bne.n	800afe2 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800afd0:	4b06      	ldr	r3, [pc, #24]	; (800afec <FLASH_OB_DisableWRP+0x3c>)
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	4904      	ldr	r1, [pc, #16]	; (800afec <FLASH_OB_DisableWRP+0x3c>)
 800afdc:	4313      	orrs	r3, r2
 800afde:	b29b      	uxth	r3, r3
 800afe0:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	40023c16 	.word	0x40023c16

0800aff0 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800affe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b002:	f7ff fcc1 	bl	800a988 <FLASH_WaitForLastOperation>
 800b006:	4603      	mov	r3, r0
 800b008:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800b010:	4a03      	ldr	r2, [pc, #12]	; (800b020 <FLASH_OB_RDP_LevelConfig+0x30>)
 800b012:	79fb      	ldrb	r3, [r7, #7]
 800b014:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800b016:	7bfb      	ldrb	r3, [r7, #15]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	40023c15 	.word	0x40023c15

0800b024 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	71fb      	strb	r3, [r7, #7]
 800b02e:	460b      	mov	r3, r1
 800b030:	71bb      	strb	r3, [r7, #6]
 800b032:	4613      	mov	r3, r2
 800b034:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800b036:	23ff      	movs	r3, #255	; 0xff
 800b038:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b03e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b042:	f7ff fca1 	bl	800a988 <FLASH_WaitForLastOperation>
 800b046:	4603      	mov	r3, r0
 800b048:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800b04a:	7bbb      	ldrb	r3, [r7, #14]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d111      	bne.n	800b074 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800b050:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <FLASH_OB_UserConfig+0x5c>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 031f 	and.w	r3, r3, #31
 800b05a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800b05c:	79ba      	ldrb	r2, [r7, #6]
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	4313      	orrs	r3, r2
 800b062:	b2da      	uxtb	r2, r3
 800b064:	797b      	ldrb	r3, [r7, #5]
 800b066:	4313      	orrs	r3, r2
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	4905      	ldr	r1, [pc, #20]	; (800b080 <FLASH_OB_UserConfig+0x5c>)
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	4313      	orrs	r3, r2
 800b070:	b2db      	uxtb	r3, r3
 800b072:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800b074:	7bbb      	ldrb	r3, [r7, #14]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	40023c14 	.word	0x40023c14

0800b084 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800b08e:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800b096:	f023 030c 	bic.w	r3, r3, #12
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800b09e:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	4905      	ldr	r1, [pc, #20]	; (800b0bc <FLASH_OB_BOR_LevelConfig+0x38>)
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0

}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	40023c14 	.word	0x40023c14

0800b0c0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <FLASH_OB_GetUser+0x1c>)
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	f023 031f 	bic.w	r3, r3, #31
 800b0ce:	b2db      	uxtb	r3, r3
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	40023c00 	.word	0x40023c00

0800b0e0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800b0e4:	4b03      	ldr	r3, [pc, #12]	; (800b0f4 <FLASH_OB_GetWRP+0x14>)
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	40023c16 	.word	0x40023c16

0800b0f8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800b0fe:	23aa      	movs	r3, #170	; 0xaa
 800b100:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800b102:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <FLASH_OB_GetRDP+0x3c>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	2bcc      	cmp	r3, #204	; 0xcc
 800b10a:	d102      	bne.n	800b112 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800b10c:	23cc      	movs	r3, #204	; 0xcc
 800b10e:	71fb      	strb	r3, [r7, #7]
 800b110:	e009      	b.n	800b126 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800b112:	4b08      	ldr	r3, [pc, #32]	; (800b134 <FLASH_OB_GetRDP+0x3c>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2baa      	cmp	r3, #170	; 0xaa
 800b11a:	d102      	bne.n	800b122 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800b11c:	23aa      	movs	r3, #170	; 0xaa
 800b11e:	71fb      	strb	r3, [r7, #7]
 800b120:	e001      	b.n	800b126 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800b122:	2355      	movs	r3, #85	; 0x55
 800b124:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800b126:	79fb      	ldrb	r3, [r7, #7]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	40023c15 	.word	0x40023c15

0800b138 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800b138:	b480      	push	{r7}
 800b13a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800b13c:	4b05      	ldr	r3, [pc, #20]	; (800b154 <FLASH_OB_GetBOR+0x1c>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 030c 	and.w	r3, r3, #12
 800b146:	b2db      	uxtb	r3, r3
}
 800b148:	4618      	mov	r0, r3
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	40023c14 	.word	0x40023c14

0800b158 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b158:	b480      	push	{r7}
 800b15a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800b15c:	4b20      	ldr	r3, [pc, #128]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b164:	2b00      	cmp	r3, #0
 800b166:	d017      	beq.n	800b198 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b168:	4b1d      	ldr	r3, [pc, #116]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a1c      	ldr	r2, [pc, #112]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b16e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b172:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b174:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a19      	ldr	r2, [pc, #100]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b17a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	4b17      	ldr	r3, [pc, #92]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a16      	ldr	r2, [pc, #88]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b18a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b18c:	4b14      	ldr	r3, [pc, #80]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a13      	ldr	r2, [pc, #76]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b196:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b198:	4b11      	ldr	r3, [pc, #68]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d017      	beq.n	800b1d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b1a4:	4b0e      	ldr	r3, [pc, #56]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a0d      	ldr	r2, [pc, #52]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a0a      	ldr	r2, [pc, #40]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	4b08      	ldr	r3, [pc, #32]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a07      	ldr	r2, [pc, #28]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a04      	ldr	r2, [pc, #16]	; (800b1e0 <FLASH_FlushCaches+0x88>)
 800b1ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1d2:	6013      	str	r3, [r2, #0]
  }
}
 800b1d4:	bf00      	nop
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40023c00 	.word	0x40023c00

0800b1e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b089      	sub	sp, #36	; 0x24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	61fb      	str	r3, [r7, #28]
 800b1fe:	e16b      	b.n	800b4d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b200:	2201      	movs	r2, #1
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	fa02 f303 	lsl.w	r3, r2, r3
 800b208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	4013      	ands	r3, r2
 800b212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	429a      	cmp	r2, r3
 800b21a:	f040 815a 	bne.w	800b4d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f003 0303 	and.w	r3, r3, #3
 800b226:	2b01      	cmp	r3, #1
 800b228:	d005      	beq.n	800b236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b232:	2b02      	cmp	r3, #2
 800b234:	d130      	bne.n	800b298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	2203      	movs	r2, #3
 800b242:	fa02 f303 	lsl.w	r3, r2, r3
 800b246:	43db      	mvns	r3, r3
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	4013      	ands	r3, r2
 800b24c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b26c:	2201      	movs	r2, #1
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	fa02 f303 	lsl.w	r3, r2, r3
 800b274:	43db      	mvns	r3, r3
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	4013      	ands	r3, r2
 800b27a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	091b      	lsrs	r3, r3, #4
 800b282:	f003 0201 	and.w	r2, r3, #1
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	fa02 f303 	lsl.w	r3, r2, r3
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	4313      	orrs	r3, r2
 800b290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f003 0303 	and.w	r3, r3, #3
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d017      	beq.n	800b2d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	2203      	movs	r2, #3
 800b2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b4:	43db      	mvns	r3, r3
 800b2b6:	69ba      	ldr	r2, [r7, #24]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	f003 0303 	and.w	r3, r3, #3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d123      	bne.n	800b328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	08da      	lsrs	r2, r3, #3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3208      	adds	r2, #8
 800b2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	220f      	movs	r2, #15
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	43db      	mvns	r3, r3
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	4013      	ands	r3, r2
 800b302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	691a      	ldr	r2, [r3, #16]
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	f003 0307 	and.w	r3, r3, #7
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	4313      	orrs	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	08da      	lsrs	r2, r3, #3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3208      	adds	r2, #8
 800b322:	69b9      	ldr	r1, [r7, #24]
 800b324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	005b      	lsls	r3, r3, #1
 800b332:	2203      	movs	r2, #3
 800b334:	fa02 f303 	lsl.w	r3, r2, r3
 800b338:	43db      	mvns	r3, r3
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	4013      	ands	r3, r2
 800b33e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f003 0203 	and.w	r2, r3, #3
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	fa02 f303 	lsl.w	r3, r2, r3
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	4313      	orrs	r3, r2
 800b354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80b4 	beq.w	800b4d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
 800b36e:	4b60      	ldr	r3, [pc, #384]	; (800b4f0 <HAL_GPIO_Init+0x30c>)
 800b370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b372:	4a5f      	ldr	r2, [pc, #380]	; (800b4f0 <HAL_GPIO_Init+0x30c>)
 800b374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b378:	6453      	str	r3, [r2, #68]	; 0x44
 800b37a:	4b5d      	ldr	r3, [pc, #372]	; (800b4f0 <HAL_GPIO_Init+0x30c>)
 800b37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b382:	60fb      	str	r3, [r7, #12]
 800b384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b386:	4a5b      	ldr	r2, [pc, #364]	; (800b4f4 <HAL_GPIO_Init+0x310>)
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	089b      	lsrs	r3, r3, #2
 800b38c:	3302      	adds	r3, #2
 800b38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	f003 0303 	and.w	r3, r3, #3
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	220f      	movs	r2, #15
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43db      	mvns	r3, r3
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a52      	ldr	r2, [pc, #328]	; (800b4f8 <HAL_GPIO_Init+0x314>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d02b      	beq.n	800b40a <HAL_GPIO_Init+0x226>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a51      	ldr	r2, [pc, #324]	; (800b4fc <HAL_GPIO_Init+0x318>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d025      	beq.n	800b406 <HAL_GPIO_Init+0x222>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a50      	ldr	r2, [pc, #320]	; (800b500 <HAL_GPIO_Init+0x31c>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d01f      	beq.n	800b402 <HAL_GPIO_Init+0x21e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a4f      	ldr	r2, [pc, #316]	; (800b504 <HAL_GPIO_Init+0x320>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d019      	beq.n	800b3fe <HAL_GPIO_Init+0x21a>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a4e      	ldr	r2, [pc, #312]	; (800b508 <HAL_GPIO_Init+0x324>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d013      	beq.n	800b3fa <HAL_GPIO_Init+0x216>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a4d      	ldr	r2, [pc, #308]	; (800b50c <HAL_GPIO_Init+0x328>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00d      	beq.n	800b3f6 <HAL_GPIO_Init+0x212>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a4c      	ldr	r2, [pc, #304]	; (800b510 <HAL_GPIO_Init+0x32c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d007      	beq.n	800b3f2 <HAL_GPIO_Init+0x20e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a4b      	ldr	r2, [pc, #300]	; (800b514 <HAL_GPIO_Init+0x330>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d101      	bne.n	800b3ee <HAL_GPIO_Init+0x20a>
 800b3ea:	2307      	movs	r3, #7
 800b3ec:	e00e      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b3ee:	2308      	movs	r3, #8
 800b3f0:	e00c      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b3f2:	2306      	movs	r3, #6
 800b3f4:	e00a      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b3f6:	2305      	movs	r3, #5
 800b3f8:	e008      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b3fa:	2304      	movs	r3, #4
 800b3fc:	e006      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b3fe:	2303      	movs	r3, #3
 800b400:	e004      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b402:	2302      	movs	r3, #2
 800b404:	e002      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b406:	2301      	movs	r3, #1
 800b408:	e000      	b.n	800b40c <HAL_GPIO_Init+0x228>
 800b40a:	2300      	movs	r3, #0
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	f002 0203 	and.w	r2, r2, #3
 800b412:	0092      	lsls	r2, r2, #2
 800b414:	4093      	lsls	r3, r2
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	4313      	orrs	r3, r2
 800b41a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b41c:	4935      	ldr	r1, [pc, #212]	; (800b4f4 <HAL_GPIO_Init+0x310>)
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	089b      	lsrs	r3, r3, #2
 800b422:	3302      	adds	r3, #2
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b42a:	4b3b      	ldr	r3, [pc, #236]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	43db      	mvns	r3, r3
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	4013      	ands	r3, r2
 800b438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d003      	beq.n	800b44e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b44e:	4a32      	ldr	r2, [pc, #200]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b454:	4b30      	ldr	r3, [pc, #192]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	43db      	mvns	r3, r3
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	4013      	ands	r3, r2
 800b462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b478:	4a27      	ldr	r2, [pc, #156]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b47e:	4b26      	ldr	r3, [pc, #152]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	43db      	mvns	r3, r3
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	4013      	ands	r3, r2
 800b48c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b4a2:	4a1d      	ldr	r2, [pc, #116]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b4a8:	4b1b      	ldr	r3, [pc, #108]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b4cc:	4a12      	ldr	r2, [pc, #72]	; (800b518 <HAL_GPIO_Init+0x334>)
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	2b0f      	cmp	r3, #15
 800b4dc:	f67f ae90 	bls.w	800b200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	bf00      	nop
 800b4e4:	3724      	adds	r7, #36	; 0x24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	40013800 	.word	0x40013800
 800b4f8:	40020000 	.word	0x40020000
 800b4fc:	40020400 	.word	0x40020400
 800b500:	40020800 	.word	0x40020800
 800b504:	40020c00 	.word	0x40020c00
 800b508:	40021000 	.word	0x40021000
 800b50c:	40021400 	.word	0x40021400
 800b510:	40021800 	.word	0x40021800
 800b514:	40021c00 	.word	0x40021c00
 800b518:	40013c00 	.word	0x40013c00

0800b51c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b526:	2300      	movs	r3, #0
 800b528:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b52e:	2300      	movs	r3, #0
 800b530:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b532:	2300      	movs	r3, #0
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	e0cd      	b.n	800b6d4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b538:	2201      	movs	r2, #1
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	4013      	ands	r3, r2
 800b548:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	429a      	cmp	r2, r3
 800b550:	f040 80bd 	bne.w	800b6ce <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b554:	4a65      	ldr	r2, [pc, #404]	; (800b6ec <HAL_GPIO_DeInit+0x1d0>)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	089b      	lsrs	r3, r3, #2
 800b55a:	3302      	adds	r3, #2
 800b55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b560:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	f003 0303 	and.w	r3, r3, #3
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	220f      	movs	r2, #15
 800b56c:	fa02 f303 	lsl.w	r3, r2, r3
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	4013      	ands	r3, r2
 800b574:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a5d      	ldr	r2, [pc, #372]	; (800b6f0 <HAL_GPIO_DeInit+0x1d4>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d02b      	beq.n	800b5d6 <HAL_GPIO_DeInit+0xba>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a5c      	ldr	r2, [pc, #368]	; (800b6f4 <HAL_GPIO_DeInit+0x1d8>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d025      	beq.n	800b5d2 <HAL_GPIO_DeInit+0xb6>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a5b      	ldr	r2, [pc, #364]	; (800b6f8 <HAL_GPIO_DeInit+0x1dc>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d01f      	beq.n	800b5ce <HAL_GPIO_DeInit+0xb2>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a5a      	ldr	r2, [pc, #360]	; (800b6fc <HAL_GPIO_DeInit+0x1e0>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d019      	beq.n	800b5ca <HAL_GPIO_DeInit+0xae>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a59      	ldr	r2, [pc, #356]	; (800b700 <HAL_GPIO_DeInit+0x1e4>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d013      	beq.n	800b5c6 <HAL_GPIO_DeInit+0xaa>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a58      	ldr	r2, [pc, #352]	; (800b704 <HAL_GPIO_DeInit+0x1e8>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d00d      	beq.n	800b5c2 <HAL_GPIO_DeInit+0xa6>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a57      	ldr	r2, [pc, #348]	; (800b708 <HAL_GPIO_DeInit+0x1ec>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d007      	beq.n	800b5be <HAL_GPIO_DeInit+0xa2>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a56      	ldr	r2, [pc, #344]	; (800b70c <HAL_GPIO_DeInit+0x1f0>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d101      	bne.n	800b5ba <HAL_GPIO_DeInit+0x9e>
 800b5b6:	2307      	movs	r3, #7
 800b5b8:	e00e      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5ba:	2308      	movs	r3, #8
 800b5bc:	e00c      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5be:	2306      	movs	r3, #6
 800b5c0:	e00a      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5c2:	2305      	movs	r3, #5
 800b5c4:	e008      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	e006      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e004      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5ce:	2302      	movs	r3, #2
 800b5d0:	e002      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <HAL_GPIO_DeInit+0xbc>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	f002 0203 	and.w	r2, r2, #3
 800b5de:	0092      	lsls	r2, r2, #2
 800b5e0:	4093      	lsls	r3, r2
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d132      	bne.n	800b64e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b5e8:	4b49      	ldr	r3, [pc, #292]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	43db      	mvns	r3, r3
 800b5f0:	4947      	ldr	r1, [pc, #284]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b5f6:	4b46      	ldr	r3, [pc, #280]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	43db      	mvns	r3, r3
 800b5fe:	4944      	ldr	r1, [pc, #272]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b600:	4013      	ands	r3, r2
 800b602:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b604:	4b42      	ldr	r3, [pc, #264]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	43db      	mvns	r3, r3
 800b60c:	4940      	ldr	r1, [pc, #256]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b60e:	4013      	ands	r3, r2
 800b610:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b612:	4b3f      	ldr	r3, [pc, #252]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	43db      	mvns	r3, r3
 800b61a:	493d      	ldr	r1, [pc, #244]	; (800b710 <HAL_GPIO_DeInit+0x1f4>)
 800b61c:	4013      	ands	r3, r2
 800b61e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	220f      	movs	r2, #15
 800b62a:	fa02 f303 	lsl.w	r3, r2, r3
 800b62e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b630:	4a2e      	ldr	r2, [pc, #184]	; (800b6ec <HAL_GPIO_DeInit+0x1d0>)
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	089b      	lsrs	r3, r3, #2
 800b636:	3302      	adds	r3, #2
 800b638:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	43da      	mvns	r2, r3
 800b640:	482a      	ldr	r0, [pc, #168]	; (800b6ec <HAL_GPIO_DeInit+0x1d0>)
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	089b      	lsrs	r3, r3, #2
 800b646:	400a      	ands	r2, r1
 800b648:	3302      	adds	r3, #2
 800b64a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	2103      	movs	r1, #3
 800b658:	fa01 f303 	lsl.w	r3, r1, r3
 800b65c:	43db      	mvns	r3, r3
 800b65e:	401a      	ands	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	08da      	lsrs	r2, r3, #3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3208      	adds	r2, #8
 800b66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	220f      	movs	r2, #15
 800b67a:	fa02 f303 	lsl.w	r3, r2, r3
 800b67e:	43db      	mvns	r3, r3
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	08d2      	lsrs	r2, r2, #3
 800b684:	4019      	ands	r1, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3208      	adds	r2, #8
 800b68a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	2103      	movs	r1, #3
 800b698:	fa01 f303 	lsl.w	r3, r1, r3
 800b69c:	43db      	mvns	r3, r3
 800b69e:	401a      	ands	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	401a      	ands	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	2103      	movs	r1, #3
 800b6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c6:	43db      	mvns	r3, r3
 800b6c8:	401a      	ands	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	617b      	str	r3, [r7, #20]
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	2b0f      	cmp	r3, #15
 800b6d8:	f67f af2e 	bls.w	800b538 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b6dc:	bf00      	nop
 800b6de:	bf00      	nop
 800b6e0:	371c      	adds	r7, #28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	40013800 	.word	0x40013800
 800b6f0:	40020000 	.word	0x40020000
 800b6f4:	40020400 	.word	0x40020400
 800b6f8:	40020800 	.word	0x40020800
 800b6fc:	40020c00 	.word	0x40020c00
 800b700:	40021000 	.word	0x40021000
 800b704:	40021400 	.word	0x40021400
 800b708:	40021800 	.word	0x40021800
 800b70c:	40021c00 	.word	0x40021c00
 800b710:	40013c00 	.word	0x40013c00

0800b714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	887b      	ldrh	r3, [r7, #2]
 800b726:	4013      	ands	r3, r2
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b72c:	2301      	movs	r3, #1
 800b72e:	73fb      	strb	r3, [r7, #15]
 800b730:	e001      	b.n	800b736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b736:	7bfb      	ldrb	r3, [r7, #15]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	460b      	mov	r3, r1
 800b74e:	807b      	strh	r3, [r7, #2]
 800b750:	4613      	mov	r3, r2
 800b752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b754:	787b      	ldrb	r3, [r7, #1]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b75a:	887a      	ldrh	r2, [r7, #2]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b760:	e003      	b.n	800b76a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b762:	887b      	ldrh	r3, [r7, #2]
 800b764:	041a      	lsls	r2, r3, #16
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	619a      	str	r2, [r3, #24]
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b788:	887a      	ldrh	r2, [r7, #2]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4013      	ands	r3, r2
 800b78e:	041a      	lsls	r2, r3, #16
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	43d9      	mvns	r1, r3
 800b794:	887b      	ldrh	r3, [r7, #2]
 800b796:	400b      	ands	r3, r1
 800b798:	431a      	orrs	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	619a      	str	r2, [r3, #24]
}
 800b79e:	bf00      	nop
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b085      	sub	sp, #20
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b7b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b7bc:	887a      	ldrh	r2, [r7, #2]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b7ca:	887a      	ldrh	r2, [r7, #2]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	e000      	b.n	800b7ee <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
  }
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	4603      	mov	r3, r0
 800b802:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b804:	4b08      	ldr	r3, [pc, #32]	; (800b828 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b806:	695a      	ldr	r2, [r3, #20]
 800b808:	88fb      	ldrh	r3, [r7, #6]
 800b80a:	4013      	ands	r3, r2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d006      	beq.n	800b81e <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b810:	4a05      	ldr	r2, [pc, #20]	; (800b828 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b812:	88fb      	ldrh	r3, [r7, #6]
 800b814:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 f807 	bl	800b82c <HAL_GPIO_EXTI_Callback>
  }
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	40013c00 	.word	0x40013c00

0800b82c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b836:	bf00      	nop
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b850:	2301      	movs	r3, #1
 800b852:	e12b      	b.n	800baac <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d106      	bne.n	800b86e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7f9 fea1 	bl	80055b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2224      	movs	r2, #36	; 0x24
 800b872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f022 0201 	bic.w	r2, r2, #1
 800b884:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b894:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8a4:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b8a6:	f007 f891 	bl	80129cc <HAL_RCC_GetPCLK1Freq>
 800b8aa:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4a80      	ldr	r2, [pc, #512]	; (800bab4 <HAL_I2C_Init+0x272>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d807      	bhi.n	800b8c6 <HAL_I2C_Init+0x84>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4a7f      	ldr	r2, [pc, #508]	; (800bab8 <HAL_I2C_Init+0x276>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	bf94      	ite	ls
 800b8be:	2301      	movls	r3, #1
 800b8c0:	2300      	movhi	r3, #0
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	e006      	b.n	800b8d4 <HAL_I2C_Init+0x92>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4a7c      	ldr	r2, [pc, #496]	; (800babc <HAL_I2C_Init+0x27a>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	bf94      	ite	ls
 800b8ce:	2301      	movls	r3, #1
 800b8d0:	2300      	movhi	r3, #0
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0e7      	b.n	800baac <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4a78      	ldr	r2, [pc, #480]	; (800bac0 <HAL_I2C_Init+0x27e>)
 800b8e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e4:	0c9b      	lsrs	r3, r3, #18
 800b8e6:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	4a6a      	ldr	r2, [pc, #424]	; (800bab4 <HAL_I2C_Init+0x272>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d802      	bhi.n	800b916 <HAL_I2C_Init+0xd4>
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	3301      	adds	r3, #1
 800b914:	e009      	b.n	800b92a <HAL_I2C_Init+0xe8>
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b91c:	fb02 f303 	mul.w	r3, r2, r3
 800b920:	4a68      	ldr	r2, [pc, #416]	; (800bac4 <HAL_I2C_Init+0x282>)
 800b922:	fba2 2303 	umull	r2, r3, r2, r3
 800b926:	099b      	lsrs	r3, r3, #6
 800b928:	3301      	adds	r3, #1
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6812      	ldr	r2, [r2, #0]
 800b92e:	430b      	orrs	r3, r1
 800b930:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b93c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	495b      	ldr	r1, [pc, #364]	; (800bab4 <HAL_I2C_Init+0x272>)
 800b946:	428b      	cmp	r3, r1
 800b948:	d819      	bhi.n	800b97e <HAL_I2C_Init+0x13c>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	1e59      	subs	r1, r3, #1
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	fbb1 f3f3 	udiv	r3, r1, r3
 800b958:	1c59      	adds	r1, r3, #1
 800b95a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b95e:	400b      	ands	r3, r1
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00a      	beq.n	800b97a <HAL_I2C_Init+0x138>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	1e59      	subs	r1, r3, #1
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b972:	3301      	adds	r3, #1
 800b974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b978:	e051      	b.n	800ba1e <HAL_I2C_Init+0x1dc>
 800b97a:	2304      	movs	r3, #4
 800b97c:	e04f      	b.n	800ba1e <HAL_I2C_Init+0x1dc>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d111      	bne.n	800b9aa <HAL_I2C_Init+0x168>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	1e58      	subs	r0, r3, #1
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6859      	ldr	r1, [r3, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	440b      	add	r3, r1
 800b994:	fbb0 f3f3 	udiv	r3, r0, r3
 800b998:	3301      	adds	r3, #1
 800b99a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bf0c      	ite	eq
 800b9a2:	2301      	moveq	r3, #1
 800b9a4:	2300      	movne	r3, #0
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	e012      	b.n	800b9d0 <HAL_I2C_Init+0x18e>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	1e58      	subs	r0, r3, #1
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6859      	ldr	r1, [r3, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	440b      	add	r3, r1
 800b9b8:	0099      	lsls	r1, r3, #2
 800b9ba:	440b      	add	r3, r1
 800b9bc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bf0c      	ite	eq
 800b9ca:	2301      	moveq	r3, #1
 800b9cc:	2300      	movne	r3, #0
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <HAL_I2C_Init+0x196>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e022      	b.n	800ba1e <HAL_I2C_Init+0x1dc>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10e      	bne.n	800b9fe <HAL_I2C_Init+0x1bc>
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	1e58      	subs	r0, r3, #1
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6859      	ldr	r1, [r3, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	440b      	add	r3, r1
 800b9ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9fc:	e00f      	b.n	800ba1e <HAL_I2C_Init+0x1dc>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	1e58      	subs	r0, r3, #1
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6859      	ldr	r1, [r3, #4]
 800ba06:	460b      	mov	r3, r1
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	0099      	lsls	r1, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba14:	3301      	adds	r3, #1
 800ba16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	6809      	ldr	r1, [r1, #0]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a1b      	ldr	r3, [r3, #32]
 800ba38:	431a      	orrs	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ba4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	6911      	ldr	r1, [r2, #16]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	68d2      	ldr	r2, [r2, #12]
 800ba58:	4311      	orrs	r1, r2
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6812      	ldr	r2, [r2, #0]
 800ba5e:	430b      	orrs	r3, r1
 800ba60:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	695a      	ldr	r2, [r3, #20]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	431a      	orrs	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0201 	orr.w	r2, r2, #1
 800ba8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	000186a0 	.word	0x000186a0
 800bab8:	001e847f 	.word	0x001e847f
 800babc:	003d08ff 	.word	0x003d08ff
 800bac0:	431bde83 	.word	0x431bde83
 800bac4:	10624dd3 	.word	0x10624dd3

0800bac8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e021      	b.n	800bb1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2224      	movs	r2, #36	; 0x24
 800bade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f022 0201 	bic.w	r2, r2, #1
 800baf0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7f9 fdb4 	bl	8005660 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b088      	sub	sp, #32
 800bb2a:	af02      	add	r7, sp, #8
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	461a      	mov	r2, r3
 800bb32:	460b      	mov	r3, r1
 800bb34:	817b      	strh	r3, [r7, #10]
 800bb36:	4613      	mov	r3, r2
 800bb38:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bb3a:	f7fb f9eb 	bl	8006f14 <HAL_GetTick>
 800bb3e:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	f040 80e0 	bne.w	800bd0e <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	2319      	movs	r3, #25
 800bb54:	2201      	movs	r2, #1
 800bb56:	4970      	ldr	r1, [pc, #448]	; (800bd18 <HAL_I2C_Master_Transmit+0x1f2>)
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f005 fd97 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800bb64:	2302      	movs	r3, #2
 800bb66:	e0d3      	b.n	800bd10 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d101      	bne.n	800bb76 <HAL_I2C_Master_Transmit+0x50>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e0cc      	b.n	800bd10 <HAL_I2C_Master_Transmit+0x1ea>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d007      	beq.n	800bb9c <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f042 0201 	orr.w	r2, r2, #1
 800bb9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbaa:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2221      	movs	r2, #33	; 0x21
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2210      	movs	r2, #16
 800bbb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	893a      	ldrh	r2, [r7, #8]
 800bbcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4a50      	ldr	r2, [pc, #320]	; (800bd1c <HAL_I2C_Master_Transmit+0x1f6>)
 800bbdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bbde:	8979      	ldrh	r1, [r7, #10]
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	6a3a      	ldr	r2, [r7, #32]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f005 f8c9 	bl	8010d7c <I2C_MasterRequestWrite>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e08d      	b.n	800bd10 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	613b      	str	r3, [r7, #16]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	613b      	str	r3, [r7, #16]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bc0a:	e066      	b.n	800bcda <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	6a39      	ldr	r1, [r7, #32]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f005 fe11 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00d      	beq.n	800bc38 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc20:	2b04      	cmp	r3, #4
 800bc22:	d107      	bne.n	800bc34 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e06b      	b.n	800bd10 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	781a      	ldrb	r2, [r3, #0]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	3b01      	subs	r3, #1
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc60:	3b01      	subs	r3, #1
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	695b      	ldr	r3, [r3, #20]
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d11b      	bne.n	800bcae <HAL_I2C_Master_Transmit+0x188>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d017      	beq.n	800bcae <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bca6:	3b01      	subs	r3, #1
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	6a39      	ldr	r1, [r7, #32]
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f005 fe01 	bl	80118ba <I2C_WaitOnBTFFlagUntilTimeout>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00d      	beq.n	800bcda <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	d107      	bne.n	800bcd6 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e01a      	b.n	800bd10 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d194      	bne.n	800bc0c <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e000      	b.n	800bd10 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bd0e:	2302      	movs	r3, #2
  }
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	00100002 	.word	0x00100002
 800bd1c:	ffff0000 	.word	0xffff0000

0800bd20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08c      	sub	sp, #48	; 0x30
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	817b      	strh	r3, [r7, #10]
 800bd30:	4613      	mov	r3, r2
 800bd32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd34:	f7fb f8ee 	bl	8006f14 <HAL_GetTick>
 800bd38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b20      	cmp	r3, #32
 800bd44:	f040 820b 	bne.w	800c15e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	2319      	movs	r3, #25
 800bd4e:	2201      	movs	r2, #1
 800bd50:	497c      	ldr	r1, [pc, #496]	; (800bf44 <HAL_I2C_Master_Receive+0x224>)
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f005 fc9a 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e1fe      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d101      	bne.n	800bd70 <HAL_I2C_Master_Receive+0x50>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e1f7      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d007      	beq.n	800bd96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f042 0201 	orr.w	r2, r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bda4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2222      	movs	r2, #34	; 0x22
 800bdaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2210      	movs	r2, #16
 800bdb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	893a      	ldrh	r2, [r7, #8]
 800bdc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	4a5c      	ldr	r2, [pc, #368]	; (800bf48 <HAL_I2C_Master_Receive+0x228>)
 800bdd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bdd8:	8979      	ldrh	r1, [r7, #10]
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f005 f84e 	bl	8010e80 <I2C_MasterRequestRead>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e1b8      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d113      	bne.n	800be1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	e18c      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be22:	2b01      	cmp	r3, #1
 800be24:	d11b      	bne.n	800be5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be36:	2300      	movs	r3, #0
 800be38:	61bb      	str	r3, [r7, #24]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	61bb      	str	r3, [r7, #24]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	61bb      	str	r3, [r7, #24]
 800be4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	e16c      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be62:	2b02      	cmp	r3, #2
 800be64:	d11b      	bne.n	800be9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be86:	2300      	movs	r3, #0
 800be88:	61fb      	str	r3, [r7, #28]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	61fb      	str	r3, [r7, #28]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	61fb      	str	r3, [r7, #28]
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	e14c      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800beac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800beae:	2300      	movs	r3, #0
 800beb0:	623b      	str	r3, [r7, #32]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	623b      	str	r3, [r7, #32]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	623b      	str	r3, [r7, #32]
 800bec2:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800bec4:	e138      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beca:	2b03      	cmp	r3, #3
 800becc:	f200 80f1 	bhi.w	800c0b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d123      	bne.n	800bf20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f005 fd9d 	bl	8011a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e139      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	691a      	ldr	r2, [r3, #16]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	b2d2      	uxtb	r2, r2
 800bef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	3b01      	subs	r3, #1
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf1e:	e10b      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d14e      	bne.n	800bfc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	2200      	movs	r2, #0
 800bf30:	4906      	ldr	r1, [pc, #24]	; (800bf4c <HAL_I2C_Master_Receive+0x22c>)
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f005 fbaa 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d008      	beq.n	800bf50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e10e      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
 800bf42:	bf00      	nop
 800bf44:	00100002 	.word	0x00100002
 800bf48:	ffff0000 	.word	0xffff0000
 800bf4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	691a      	ldr	r2, [r3, #16]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	b2d2      	uxtb	r2, r2
 800bf9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfc4:	e0b8      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4966      	ldr	r1, [pc, #408]	; (800c168 <HAL_I2C_Master_Receive+0x448>)
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f005 fb5b 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e0bf      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c002:	1c5a      	adds	r2, r3, #1
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c018:	b29b      	uxth	r3, r3
 800c01a:	3b01      	subs	r3, #1
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	2200      	movs	r2, #0
 800c02a:	494f      	ldr	r1, [pc, #316]	; (800c168 <HAL_I2C_Master_Receive+0x448>)
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f005 fb2d 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e091      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c04a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	691a      	ldr	r2, [r3, #16]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c068:	3b01      	subs	r3, #1
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c074:	b29b      	uxth	r3, r3
 800c076:	3b01      	subs	r3, #1
 800c078:	b29a      	uxth	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	691a      	ldr	r2, [r3, #16]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	b2d2      	uxtb	r2, r2
 800c08a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c0b0:	e042      	b.n	800c138 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f005 fcb0 	bl	8011a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e04c      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	691a      	ldr	r2, [r3, #16]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b04      	cmp	r3, #4
 800c104:	d118      	bne.n	800c138 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691a      	ldr	r2, [r3, #16]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c122:	3b01      	subs	r3, #1
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c12e:	b29b      	uxth	r3, r3
 800c130:	3b01      	subs	r3, #1
 800c132:	b29a      	uxth	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f47f aec2 	bne.w	800bec6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2220      	movs	r2, #32
 800c146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	e000      	b.n	800c160 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c15e:	2302      	movs	r3, #2
  }
}
 800c160:	4618      	mov	r0, r3
 800c162:	3728      	adds	r7, #40	; 0x28
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	00010004 	.word	0x00010004

0800c16c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08a      	sub	sp, #40	; 0x28
 800c170:	af02      	add	r7, sp, #8
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	4613      	mov	r3, r2
 800c17a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c17c:	f7fa feca 	bl	8006f14 <HAL_GetTick>
 800c180:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b20      	cmp	r3, #32
 800c18c:	f040 80fb 	bne.w	800c386 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <HAL_I2C_Slave_Transmit+0x30>
 800c196:	88fb      	ldrh	r3, [r7, #6]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e0f3      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d101      	bne.n	800c1ae <HAL_I2C_Slave_Transmit+0x42>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e0ec      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d007      	beq.n	800c1d4 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f042 0201 	orr.w	r2, r2, #1
 800c1d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1e2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2221      	movs	r2, #33	; 0x21
 800c1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	88fa      	ldrh	r2, [r7, #6]
 800c204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	4a5f      	ldr	r2, [pc, #380]	; (800c390 <HAL_I2C_Slave_Transmit+0x224>)
 800c214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c224:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2200      	movs	r2, #0
 800c22e:	4959      	ldr	r1, [pc, #356]	; (800c394 <HAL_I2C_Slave_Transmit+0x228>)
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f005 fa2b 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e0a3      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c240:	2300      	movs	r3, #0
 800c242:	617b      	str	r3, [r7, #20]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c25e:	d165      	bne.n	800c32c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2200      	movs	r2, #0
 800c268:	494a      	ldr	r1, [pc, #296]	; (800c394 <HAL_I2C_Slave_Transmit+0x228>)
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f005 fa0e 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e086      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c27a:	2300      	movs	r3, #0
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	61bb      	str	r3, [r7, #24]
 800c28e:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800c290:	e04c      	b.n	800c32c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f005 face 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2b0:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e068      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	781a      	ldrb	r2, [r3, #0]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	695b      	ldr	r3, [r3, #20]
 800c2ec:	f003 0304 	and.w	r3, r3, #4
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d11b      	bne.n	800c32c <HAL_I2C_Slave_Transmit+0x1c0>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d017      	beq.n	800c32c <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c300:	781a      	ldrb	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30c:	1c5a      	adds	r2, r3, #1
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c316:	b29b      	uxth	r3, r3
 800c318:	3b01      	subs	r3, #1
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c324:	3b01      	subs	r3, #1
 800c326:	b29a      	uxth	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1ae      	bne.n	800c292 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f005 f9a3 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e01b      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c358:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c368:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2220      	movs	r2, #32
 800c36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c386:	2302      	movs	r3, #2
  }
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	ffff0000 	.word	0xffff0000
 800c394:	00010002 	.word	0x00010002

0800c398 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b08a      	sub	sp, #40	; 0x28
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c3a8:	f7fa fdb4 	bl	8006f14 <HAL_GetTick>
 800c3ac:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	f040 80ee 	bne.w	800c598 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <HAL_I2C_Slave_Receive+0x30>
 800c3c2:	88fb      	ldrh	r3, [r7, #6]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e0e6      	b.n	800c59a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d101      	bne.n	800c3da <HAL_I2C_Slave_Receive+0x42>
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	e0df      	b.n	800c59a <HAL_I2C_Slave_Receive+0x202>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d007      	beq.n	800c400 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c40e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2222      	movs	r2, #34	; 0x22
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2220      	movs	r2, #32
 800c41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	88fa      	ldrh	r2, [r7, #6]
 800c430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c436:	b29a      	uxth	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4a59      	ldr	r2, [pc, #356]	; (800c5a4 <HAL_I2C_Slave_Receive+0x20c>)
 800c440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c450:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2200      	movs	r2, #0
 800c45a:	4953      	ldr	r1, [pc, #332]	; (800c5a8 <HAL_I2C_Slave_Receive+0x210>)
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f005 f915 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e096      	b.n	800c59a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c46c:	2300      	movs	r3, #0
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	699b      	ldr	r3, [r3, #24]
 800c47e:	617b      	str	r3, [r7, #20]
 800c480:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800c482:	e04e      	b.n	800c522 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	6839      	ldr	r1, [r7, #0]
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f005 fac7 	bl	8011a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c4a2:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e078      	b.n	800c59a <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	691a      	ldr	r2, [r3, #16]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b2:	b2d2      	uxtb	r2, r2
 800c4b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ba:	1c5a      	adds	r2, r3, #1
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	d11c      	bne.n	800c522 <HAL_I2C_Slave_Receive+0x18a>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d018      	beq.n	800c522 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	691a      	ldr	r2, [r3, #16]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fa:	b2d2      	uxtb	r2, r2
 800c4fc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c50c:	3b01      	subs	r3, #1
 800c50e:	b29a      	uxth	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c518:	b29b      	uxth	r3, r3
 800c51a:	3b01      	subs	r3, #1
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1ac      	bne.n	800c484 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f005 fa04 	bl	801193c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d009      	beq.n	800c54e <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c548:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e025      	b.n	800c59a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c54e:	2300      	movs	r3, #0
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	61bb      	str	r3, [r7, #24]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 0201 	orr.w	r2, r2, #1
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c57a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2220      	movs	r2, #32
 800c580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	e000      	b.n	800c59a <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800c598:	2302      	movs	r3, #2
  }
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	ffff0000 	.word	0xffff0000
 800c5a8:	00010002 	.word	0x00010002

0800c5ac <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	607a      	str	r2, [r7, #4]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	817b      	strh	r3, [r7, #10]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	f040 8085 	bne.w	800c6dc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c5d2:	4b46      	ldr	r3, [pc, #280]	; (800c6ec <HAL_I2C_Master_Transmit_IT+0x140>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	08db      	lsrs	r3, r3, #3
 800c5d8:	4a45      	ldr	r2, [pc, #276]	; (800c6f0 <HAL_I2C_Master_Transmit_IT+0x144>)
 800c5da:	fba2 2303 	umull	r2, r3, r2, r3
 800c5de:	0a1a      	lsrs	r2, r3, #8
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	009a      	lsls	r2, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d116      	bne.n	800c626 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2220      	movs	r2, #32
 800c602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c612:	f043 0220 	orr.w	r2, r3, #32
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e05b      	b.n	800c6de <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b02      	cmp	r3, #2
 800c632:	d0db      	beq.n	800c5ec <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d101      	bne.n	800c642 <HAL_I2C_Master_Transmit_IT+0x96>
 800c63e:	2302      	movs	r3, #2
 800c640:	e04d      	b.n	800c6de <HAL_I2C_Master_Transmit_IT+0x132>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 0301 	and.w	r3, r3, #1
 800c654:	2b01      	cmp	r3, #1
 800c656:	d007      	beq.n	800c668 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f042 0201 	orr.w	r2, r2, #1
 800c666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2221      	movs	r2, #33	; 0x21
 800c67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2210      	movs	r2, #16
 800c684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	893a      	ldrh	r2, [r7, #8]
 800c698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4a13      	ldr	r2, [pc, #76]	; (800c6f4 <HAL_I2C_Master_Transmit_IT+0x148>)
 800c6a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c6aa:	897a      	ldrh	r2, [r7, #10]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685a      	ldr	r2, [r3, #4]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c6c6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c6d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	e000      	b.n	800c6de <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800c6dc:	2302      	movs	r3, #2
  }
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	371c      	adds	r7, #28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	20000058 	.word	0x20000058
 800c6f0:	14f8b589 	.word	0x14f8b589
 800c6f4:	ffff0000 	.word	0xffff0000

0800c6f8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	607a      	str	r2, [r7, #4]
 800c702:	461a      	mov	r2, r3
 800c704:	460b      	mov	r3, r1
 800c706:	817b      	strh	r3, [r7, #10]
 800c708:	4613      	mov	r3, r2
 800c70a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c70c:	2300      	movs	r3, #0
 800c70e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c716:	b2db      	uxtb	r3, r3
 800c718:	2b20      	cmp	r3, #32
 800c71a:	f040 808d 	bne.w	800c838 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c71e:	4b4a      	ldr	r3, [pc, #296]	; (800c848 <HAL_I2C_Master_Receive_IT+0x150>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	08db      	lsrs	r3, r3, #3
 800c724:	4a49      	ldr	r2, [pc, #292]	; (800c84c <HAL_I2C_Master_Receive_IT+0x154>)
 800c726:	fba2 2303 	umull	r2, r3, r2, r3
 800c72a:	0a1a      	lsrs	r2, r3, #8
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	009a      	lsls	r2, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d116      	bne.n	800c772 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	f043 0220 	orr.w	r2, r3, #32
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e063      	b.n	800c83a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	f003 0302 	and.w	r3, r3, #2
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d0db      	beq.n	800c738 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c786:	2b01      	cmp	r3, #1
 800c788:	d101      	bne.n	800c78e <HAL_I2C_Master_Receive_IT+0x96>
 800c78a:	2302      	movs	r3, #2
 800c78c:	e055      	b.n	800c83a <HAL_I2C_Master_Receive_IT+0x142>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d007      	beq.n	800c7b4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f042 0201 	orr.w	r2, r2, #1
 800c7b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2222      	movs	r2, #34	; 0x22
 800c7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2210      	movs	r2, #16
 800c7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	893a      	ldrh	r2, [r7, #8]
 800c7e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4a17      	ldr	r2, [pc, #92]	; (800c850 <HAL_I2C_Master_Receive_IT+0x158>)
 800c7f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c7f6:	897a      	ldrh	r2, [r7, #10]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c812:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c822:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c832:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	e000      	b.n	800c83a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c838:	2302      	movs	r3, #2
  }
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	20000058 	.word	0x20000058
 800c84c:	14f8b589 	.word	0x14f8b589
 800c850:	ffff0000 	.word	0xffff0000

0800c854 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	4613      	mov	r3, r2
 800c860:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b20      	cmp	r3, #32
 800c86c:	d158      	bne.n	800c920 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <HAL_I2C_Slave_Transmit_IT+0x26>
 800c874:	88fb      	ldrh	r3, [r7, #6]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e051      	b.n	800c922 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c884:	2b01      	cmp	r3, #1
 800c886:	d101      	bne.n	800c88c <HAL_I2C_Slave_Transmit_IT+0x38>
 800c888:	2302      	movs	r3, #2
 800c88a:	e04a      	b.n	800c922 <HAL_I2C_Slave_Transmit_IT+0xce>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2201      	movs	r2, #1
 800c890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d007      	beq.n	800c8b2 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f042 0201 	orr.w	r2, r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8c0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2221      	movs	r2, #33	; 0x21
 800c8c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	88fa      	ldrh	r2, [r7, #6]
 800c8e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	4a0f      	ldr	r2, [pc, #60]	; (800c930 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c8f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c902:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685a      	ldr	r2, [r3, #4]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c91a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	e000      	b.n	800c922 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c920:	2302      	movs	r3, #2
  }
}
 800c922:	4618      	mov	r0, r3
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	ffff0000 	.word	0xffff0000

0800c934 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4613      	mov	r3, r2
 800c940:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b20      	cmp	r3, #32
 800c94c:	d158      	bne.n	800ca00 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <HAL_I2C_Slave_Receive_IT+0x26>
 800c954:	88fb      	ldrh	r3, [r7, #6]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e051      	b.n	800ca02 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c964:	2b01      	cmp	r3, #1
 800c966:	d101      	bne.n	800c96c <HAL_I2C_Slave_Receive_IT+0x38>
 800c968:	2302      	movs	r3, #2
 800c96a:	e04a      	b.n	800ca02 <HAL_I2C_Slave_Receive_IT+0xce>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d007      	beq.n	800c992 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f042 0201 	orr.w	r2, r2, #1
 800c990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2222      	movs	r2, #34	; 0x22
 800c9a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	88fa      	ldrh	r2, [r7, #6]
 800c9c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	4a0f      	ldr	r2, [pc, #60]	; (800ca10 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c9d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c9e2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c9fa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e000      	b.n	800ca02 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800ca00:	2302      	movs	r3, #2
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	ffff0000 	.word	0xffff0000

0800ca14 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	607a      	str	r2, [r7, #4]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	460b      	mov	r3, r1
 800ca22:	817b      	strh	r3, [r7, #10]
 800ca24:	4613      	mov	r3, r2
 800ca26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b20      	cmp	r3, #32
 800ca36:	f040 810d 	bne.w	800cc54 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ca3a:	4b89      	ldr	r3, [pc, #548]	; (800cc60 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	08db      	lsrs	r3, r3, #3
 800ca40:	4a88      	ldr	r2, [pc, #544]	; (800cc64 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800ca42:	fba2 2303 	umull	r2, r3, r2, r3
 800ca46:	0a1a      	lsrs	r2, r3, #8
 800ca48:	4613      	mov	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	009a      	lsls	r2, r3, #2
 800ca50:	4413      	add	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d116      	bne.n	800ca8e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2220      	movs	r2, #32
 800ca6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	f043 0220 	orr.w	r2, r3, #32
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e0e3      	b.n	800cc56 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	699b      	ldr	r3, [r3, #24]
 800ca94:	f003 0302 	and.w	r3, r3, #2
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d0db      	beq.n	800ca54 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <HAL_I2C_Master_Transmit_DMA+0x96>
 800caa6:	2302      	movs	r3, #2
 800caa8:	e0d5      	b.n	800cc56 <HAL_I2C_Master_Transmit_DMA+0x242>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d007      	beq.n	800cad0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0201 	orr.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2221      	movs	r2, #33	; 0x21
 800cae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2210      	movs	r2, #16
 800caec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	893a      	ldrh	r2, [r7, #8]
 800cb00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4a56      	ldr	r2, [pc, #344]	; (800cc68 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800cb10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cb12:	897a      	ldrh	r2, [r7, #10]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d07b      	beq.n	800cc18 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d02a      	beq.n	800cb7e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	4a4f      	ldr	r2, [pc, #316]	; (800cc6c <HAL_I2C_Master_Transmit_DMA+0x258>)
 800cb2e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb34:	4a4e      	ldr	r2, [pc, #312]	; (800cc70 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800cb36:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb44:	2200      	movs	r2, #0
 800cb46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb54:	2200      	movs	r2, #0
 800cb56:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	4619      	mov	r1, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3310      	adds	r3, #16
 800cb68:	461a      	mov	r2, r3
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb6e:	f7fb fc3a 	bl	80083e6 <HAL_DMA_Start_IT>
 800cb72:	4603      	mov	r3, r0
 800cb74:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d139      	bne.n	800cbf0 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800cb7c:	e013      	b.n	800cba6 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2220      	movs	r2, #32
 800cb82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e057      	b.n	800cc56 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cbbc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbcc:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbdc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbec:	601a      	str	r2, [r3, #0]
 800cbee:	e02f      	b.n	800cc50 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	f043 0210 	orr.w	r2, r3, #16
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e01e      	b.n	800cc56 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc26:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc36:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cc4e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	e000      	b.n	800cc56 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800cc54:	2302      	movs	r3, #2
  }
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20000058 	.word	0x20000058
 800cc64:	14f8b589 	.word	0x14f8b589
 800cc68:	ffff0000 	.word	0xffff0000
 800cc6c:	08011319 	.word	0x08011319
 800cc70:	080114c3 	.word	0x080114c3

0800cc74 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	607a      	str	r2, [r7, #4]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	460b      	mov	r3, r1
 800cc82:	817b      	strh	r3, [r7, #10]
 800cc84:	4613      	mov	r3, r2
 800cc86:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b20      	cmp	r3, #32
 800cc96:	f040 810d 	bne.w	800ceb4 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cc9a:	4b89      	ldr	r3, [pc, #548]	; (800cec0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	08db      	lsrs	r3, r3, #3
 800cca0:	4a88      	ldr	r2, [pc, #544]	; (800cec4 <HAL_I2C_Master_Receive_DMA+0x250>)
 800cca2:	fba2 2303 	umull	r2, r3, r2, r3
 800cca6:	0a1a      	lsrs	r2, r3, #8
 800cca8:	4613      	mov	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	009a      	lsls	r2, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d116      	bne.n	800ccee <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2220      	movs	r2, #32
 800ccca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccda:	f043 0220 	orr.w	r2, r3, #32
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e0e3      	b.n	800ceb6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	699b      	ldr	r3, [r3, #24]
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d0db      	beq.n	800ccb4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d101      	bne.n	800cd0a <HAL_I2C_Master_Receive_DMA+0x96>
 800cd06:	2302      	movs	r3, #2
 800cd08:	e0d5      	b.n	800ceb6 <HAL_I2C_Master_Receive_DMA+0x242>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d007      	beq.n	800cd30 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f042 0201 	orr.w	r2, r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2222      	movs	r2, #34	; 0x22
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2210      	movs	r2, #16
 800cd4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	893a      	ldrh	r2, [r7, #8]
 800cd60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4a56      	ldr	r2, [pc, #344]	; (800cec8 <HAL_I2C_Master_Receive_DMA+0x254>)
 800cd70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cd72:	897a      	ldrh	r2, [r7, #10]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d07b      	beq.n	800ce78 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d02a      	beq.n	800cdde <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8c:	4a4f      	ldr	r2, [pc, #316]	; (800cecc <HAL_I2C_Master_Receive_DMA+0x258>)
 800cd8e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd94:	4a4e      	ldr	r2, [pc, #312]	; (800ced0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800cd96:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda4:	2200      	movs	r2, #0
 800cda6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdac:	2200      	movs	r2, #0
 800cdae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	461a      	mov	r2, r3
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdce:	f7fb fb0a 	bl	80083e6 <HAL_DMA_Start_IT>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d139      	bne.n	800ce50 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800cddc:	e013      	b.n	800ce06 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2220      	movs	r2, #32
 800cde2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e057      	b.n	800ceb6 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce14:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce24:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ce3c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce4c:	605a      	str	r2, [r3, #4]
 800ce4e:	e02f      	b.n	800ceb0 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2220      	movs	r2, #32
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce64:	f043 0210 	orr.w	r2, r3, #16
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e01e      	b.n	800ceb6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ce8e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce9e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ceae:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e000      	b.n	800ceb6 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800ceb4:	2302      	movs	r3, #2
  }
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	20000058 	.word	0x20000058
 800cec4:	14f8b589 	.word	0x14f8b589
 800cec8:	ffff0000 	.word	0xffff0000
 800cecc:	08011319 	.word	0x08011319
 800ced0:	080114c3 	.word	0x080114c3

0800ced4 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	f040 80b8 	bne.w	800d060 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <HAL_I2C_Slave_Transmit_DMA+0x28>
 800cef6:	88fb      	ldrh	r3, [r7, #6]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e0b0      	b.n	800d062 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d101      	bne.n	800cf0e <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	e0a9      	b.n	800d062 <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d007      	beq.n	800cf34 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f042 0201 	orr.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2221      	movs	r2, #33	; 0x21
 800cf48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2220      	movs	r2, #32
 800cf50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	88fa      	ldrh	r2, [r7, #6]
 800cf64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4a3e      	ldr	r2, [pc, #248]	; (800d06c <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800cf74:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d02a      	beq.n	800cfd4 <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf82:	4a3b      	ldr	r2, [pc, #236]	; (800d070 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800cf84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8a:	4a3a      	ldr	r2, [pc, #232]	; (800d074 <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800cf8c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf92:	2200      	movs	r2, #0
 800cf94:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfaa:	2200      	movs	r2, #0
 800cfac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3310      	adds	r3, #16
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc4:	f7fb fa0f 	bl	80083e6 <HAL_DMA_Start_IT>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800cfcc:	7dfb      	ldrb	r3, [r7, #23]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d132      	bne.n	800d038 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800cfd2:	e013      	b.n	800cffc <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2228      	movs	r2, #40	; 0x28
 800cfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e032      	b.n	800d062 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d00a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	685a      	ldr	r2, [r3, #4]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d022:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d032:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	e014      	b.n	800d062 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2220      	movs	r2, #32
 800d03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2200      	movs	r2, #0
 800d044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04c:	f043 0210 	orr.w	r2, r3, #16
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e000      	b.n	800d062 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800d060:	2302      	movs	r3, #2
  }
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	ffff0000 	.word	0xffff0000
 800d070:	08011319 	.word	0x08011319
 800d074:	080114c3 	.word	0x080114c3

0800d078 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	4613      	mov	r3, r2
 800d084:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b20      	cmp	r3, #32
 800d090:	f040 80b8 	bne.w	800d204 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d002      	beq.n	800d0a0 <HAL_I2C_Slave_Receive_DMA+0x28>
 800d09a:	88fb      	ldrh	r3, [r7, #6]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d101      	bne.n	800d0a4 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e0b0      	b.n	800d206 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d101      	bne.n	800d0b2 <HAL_I2C_Slave_Receive_DMA+0x3a>
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	e0a9      	b.n	800d206 <HAL_I2C_Slave_Receive_DMA+0x18e>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d007      	beq.n	800d0d8 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f042 0201 	orr.w	r2, r2, #1
 800d0d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2222      	movs	r2, #34	; 0x22
 800d0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	88fa      	ldrh	r2, [r7, #6]
 800d108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d10e:	b29a      	uxth	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4a3e      	ldr	r2, [pc, #248]	; (800d210 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800d118:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d02a      	beq.n	800d178 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	4a3b      	ldr	r2, [pc, #236]	; (800d214 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800d128:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12e:	4a3a      	ldr	r2, [pc, #232]	; (800d218 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800d130:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	2200      	movs	r2, #0
 800d138:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13e:	2200      	movs	r2, #0
 800d140:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	2200      	movs	r2, #0
 800d148:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	2200      	movs	r2, #0
 800d150:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	3310      	adds	r3, #16
 800d15c:	4619      	mov	r1, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	461a      	mov	r2, r3
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d168:	f7fb f93d 	bl	80083e6 <HAL_DMA_Start_IT>
 800d16c:	4603      	mov	r3, r0
 800d16e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800d170:	7dfb      	ldrb	r3, [r7, #23]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d132      	bne.n	800d1dc <HAL_I2C_Slave_Receive_DMA+0x164>
 800d176:	e013      	b.n	800d1a0 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2228      	movs	r2, #40	; 0x28
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e032      	b.n	800d206 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d1ae:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d1c6:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1d6:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	e014      	b.n	800d206 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2220      	movs	r2, #32
 800d1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f0:	f043 0210 	orr.w	r2, r3, #16
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e000      	b.n	800d206 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800d204:	2302      	movs	r3, #2
  }
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	ffff0000 	.word	0xffff0000
 800d214:	08011319 	.word	0x08011319
 800d218:	080114c3 	.word	0x080114c3

0800d21c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b088      	sub	sp, #32
 800d220:	af02      	add	r7, sp, #8
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	4608      	mov	r0, r1
 800d226:	4611      	mov	r1, r2
 800d228:	461a      	mov	r2, r3
 800d22a:	4603      	mov	r3, r0
 800d22c:	817b      	strh	r3, [r7, #10]
 800d22e:	460b      	mov	r3, r1
 800d230:	813b      	strh	r3, [r7, #8]
 800d232:	4613      	mov	r3, r2
 800d234:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d236:	f7f9 fe6d 	bl	8006f14 <HAL_GetTick>
 800d23a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b20      	cmp	r3, #32
 800d246:	f040 80d9 	bne.w	800d3fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	2319      	movs	r3, #25
 800d250:	2201      	movs	r2, #1
 800d252:	496d      	ldr	r1, [pc, #436]	; (800d408 <HAL_I2C_Mem_Write+0x1ec>)
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f004 fa19 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d260:	2302      	movs	r3, #2
 800d262:	e0cc      	b.n	800d3fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d101      	bne.n	800d272 <HAL_I2C_Mem_Write+0x56>
 800d26e:	2302      	movs	r3, #2
 800d270:	e0c5      	b.n	800d3fe <HAL_I2C_Mem_Write+0x1e2>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b01      	cmp	r3, #1
 800d286:	d007      	beq.n	800d298 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f042 0201 	orr.w	r2, r2, #1
 800d296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2221      	movs	r2, #33	; 0x21
 800d2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2240      	movs	r2, #64	; 0x40
 800d2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a3a      	ldr	r2, [r7, #32]
 800d2c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4a4d      	ldr	r2, [pc, #308]	; (800d40c <HAL_I2C_Mem_Write+0x1f0>)
 800d2d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d2da:	88f8      	ldrh	r0, [r7, #6]
 800d2dc:	893a      	ldrh	r2, [r7, #8]
 800d2de:	8979      	ldrh	r1, [r7, #10]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f003 fe96 	bl	801101c <I2C_RequestMemoryWrite>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d052      	beq.n	800d39c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e081      	b.n	800d3fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f004 fa9a 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00d      	beq.n	800d326 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30e:	2b04      	cmp	r3, #4
 800d310:	d107      	bne.n	800d322 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	e06b      	b.n	800d3fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32a:	781a      	ldrb	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d340:	3b01      	subs	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	3b01      	subs	r3, #1
 800d350:	b29a      	uxth	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	695b      	ldr	r3, [r3, #20]
 800d35c:	f003 0304 	and.w	r3, r3, #4
 800d360:	2b04      	cmp	r3, #4
 800d362:	d11b      	bne.n	800d39c <HAL_I2C_Mem_Write+0x180>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d017      	beq.n	800d39c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d386:	3b01      	subs	r3, #1
 800d388:	b29a      	uxth	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d392:	b29b      	uxth	r3, r3
 800d394:	3b01      	subs	r3, #1
 800d396:	b29a      	uxth	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1aa      	bne.n	800d2fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3a4:	697a      	ldr	r2, [r7, #20]
 800d3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f004 fa86 	bl	80118ba <I2C_WaitOnBTFFlagUntilTimeout>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00d      	beq.n	800d3d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d107      	bne.n	800d3cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e016      	b.n	800d3fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2220      	movs	r2, #32
 800d3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	e000      	b.n	800d3fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d3fc:	2302      	movs	r3, #2
  }
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	00100002 	.word	0x00100002
 800d40c:	ffff0000 	.word	0xffff0000

0800d410 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08c      	sub	sp, #48	; 0x30
 800d414:	af02      	add	r7, sp, #8
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	4608      	mov	r0, r1
 800d41a:	4611      	mov	r1, r2
 800d41c:	461a      	mov	r2, r3
 800d41e:	4603      	mov	r3, r0
 800d420:	817b      	strh	r3, [r7, #10]
 800d422:	460b      	mov	r3, r1
 800d424:	813b      	strh	r3, [r7, #8]
 800d426:	4613      	mov	r3, r2
 800d428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d42a:	f7f9 fd73 	bl	8006f14 <HAL_GetTick>
 800d42e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b20      	cmp	r3, #32
 800d43a:	f040 8208 	bne.w	800d84e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	2319      	movs	r3, #25
 800d444:	2201      	movs	r2, #1
 800d446:	497b      	ldr	r1, [pc, #492]	; (800d634 <HAL_I2C_Mem_Read+0x224>)
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f004 f91f 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d001      	beq.n	800d458 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d454:	2302      	movs	r3, #2
 800d456:	e1fb      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d101      	bne.n	800d466 <HAL_I2C_Mem_Read+0x56>
 800d462:	2302      	movs	r3, #2
 800d464:	e1f4      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d007      	beq.n	800d48c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f042 0201 	orr.w	r2, r2, #1
 800d48a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d49a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2222      	movs	r2, #34	; 0x22
 800d4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2240      	movs	r2, #64	; 0x40
 800d4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d4bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4a5b      	ldr	r2, [pc, #364]	; (800d638 <HAL_I2C_Mem_Read+0x228>)
 800d4cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d4ce:	88f8      	ldrh	r0, [r7, #6]
 800d4d0:	893a      	ldrh	r2, [r7, #8]
 800d4d2:	8979      	ldrh	r1, [r7, #10]
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	4603      	mov	r3, r0
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f003 fe32 	bl	8011148 <I2C_RequestMemoryRead>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e1b0      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d113      	bne.n	800d51e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	617b      	str	r3, [r7, #20]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	617b      	str	r3, [r7, #20]
 800d50a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	e184      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d522:	2b01      	cmp	r3, #1
 800d524:	d11b      	bne.n	800d55e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d536:	2300      	movs	r3, #0
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	e164      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d562:	2b02      	cmp	r3, #2
 800d564:	d11b      	bne.n	800d59e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d574:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d586:	2300      	movs	r3, #0
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	61fb      	str	r3, [r7, #28]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	61fb      	str	r3, [r7, #28]
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	e144      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d59e:	2300      	movs	r3, #0
 800d5a0:	623b      	str	r3, [r7, #32]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	695b      	ldr	r3, [r3, #20]
 800d5a8:	623b      	str	r3, [r7, #32]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	623b      	str	r3, [r7, #32]
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800d5b4:	e138      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	f200 80f1 	bhi.w	800d7a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d123      	bne.n	800d610 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f004 fa25 	bl	8011a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e139      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	691a      	ldr	r2, [r3, #16]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d604:	b29b      	uxth	r3, r3
 800d606:	3b01      	subs	r3, #1
 800d608:	b29a      	uxth	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d60e:	e10b      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d614:	2b02      	cmp	r3, #2
 800d616:	d14e      	bne.n	800d6b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61e:	2200      	movs	r2, #0
 800d620:	4906      	ldr	r1, [pc, #24]	; (800d63c <HAL_I2C_Mem_Read+0x22c>)
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f004 f832 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d008      	beq.n	800d640 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	e10e      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
 800d632:	bf00      	nop
 800d634:	00100002 	.word	0x00100002
 800d638:	ffff0000 	.word	0xffff0000
 800d63c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d64e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	691a      	ldr	r2, [r3, #16]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65a:	b2d2      	uxtb	r2, r2
 800d65c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d66c:	3b01      	subs	r3, #1
 800d66e:	b29a      	uxth	r2, r3
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d678:	b29b      	uxth	r3, r3
 800d67a:	3b01      	subs	r3, #1
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	691a      	ldr	r2, [r3, #16]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68c:	b2d2      	uxtb	r2, r2
 800d68e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d6b4:	e0b8      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	2200      	movs	r2, #0
 800d6be:	4966      	ldr	r1, [pc, #408]	; (800d858 <HAL_I2C_Mem_Read+0x448>)
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f003 ffe3 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e0bf      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	691a      	ldr	r2, [r3, #16]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	b2d2      	uxtb	r2, r2
 800d6ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d708:	b29b      	uxth	r3, r3
 800d70a:	3b01      	subs	r3, #1
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	2200      	movs	r2, #0
 800d71a:	494f      	ldr	r1, [pc, #316]	; (800d858 <HAL_I2C_Mem_Read+0x448>)
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f003 ffb5 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d728:	2301      	movs	r3, #1
 800d72a:	e091      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d73a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	691a      	ldr	r2, [r3, #16]
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	b2d2      	uxtb	r2, r2
 800d748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d758:	3b01      	subs	r3, #1
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d764:	b29b      	uxth	r3, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	b29a      	uxth	r2, r3
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	691a      	ldr	r2, [r3, #16]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d778:	b2d2      	uxtb	r2, r2
 800d77a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	1c5a      	adds	r2, r3, #1
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d78a:	3b01      	subs	r3, #1
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d796:	b29b      	uxth	r3, r3
 800d798:	3b01      	subs	r3, #1
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7a0:	e042      	b.n	800d828 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f004 f938 	bl	8011a1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e04c      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	b2d2      	uxtb	r2, r2
 800d7c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	f003 0304 	and.w	r3, r3, #4
 800d7f2:	2b04      	cmp	r3, #4
 800d7f4:	d118      	bne.n	800d828 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	691a      	ldr	r2, [r3, #16]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	b2d2      	uxtb	r2, r2
 800d802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d812:	3b01      	subs	r3, #1
 800d814:	b29a      	uxth	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d81e:	b29b      	uxth	r3, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	b29a      	uxth	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f47f aec2 	bne.w	800d5b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2220      	movs	r2, #32
 800d836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e000      	b.n	800d850 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d84e:	2302      	movs	r3, #2
  }
}
 800d850:	4618      	mov	r0, r3
 800d852:	3728      	adds	r7, #40	; 0x28
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	00010004 	.word	0x00010004

0800d85c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b087      	sub	sp, #28
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	4608      	mov	r0, r1
 800d866:	4611      	mov	r1, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	4603      	mov	r3, r0
 800d86c:	817b      	strh	r3, [r7, #10]
 800d86e:	460b      	mov	r3, r1
 800d870:	813b      	strh	r3, [r7, #8]
 800d872:	4613      	mov	r3, r2
 800d874:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d876:	2300      	movs	r3, #0
 800d878:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b20      	cmp	r3, #32
 800d884:	f040 808e 	bne.w	800d9a4 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d888:	4b4a      	ldr	r3, [pc, #296]	; (800d9b4 <HAL_I2C_Mem_Write_IT+0x158>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	08db      	lsrs	r3, r3, #3
 800d88e:	4a4a      	ldr	r2, [pc, #296]	; (800d9b8 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d890:	fba2 2303 	umull	r2, r3, r2, r3
 800d894:	0a1a      	lsrs	r2, r3, #8
 800d896:	4613      	mov	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4413      	add	r3, r2
 800d89c:	009a      	lsls	r2, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d116      	bne.n	800d8dc <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2220      	movs	r2, #32
 800d8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c8:	f043 0220 	orr.w	r2, r3, #32
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e064      	b.n	800d9a6 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	f003 0302 	and.w	r3, r3, #2
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d0db      	beq.n	800d8a2 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d101      	bne.n	800d8f8 <HAL_I2C_Mem_Write_IT+0x9c>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e056      	b.n	800d9a6 <HAL_I2C_Mem_Write_IT+0x14a>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d007      	beq.n	800d91e <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f042 0201 	orr.w	r2, r2, #1
 800d91c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d92c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2221      	movs	r2, #33	; 0x21
 800d932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2240      	movs	r2, #64	; 0x40
 800d93a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6a3a      	ldr	r2, [r7, #32]
 800d948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d94e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d954:	b29a      	uxth	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	4a17      	ldr	r2, [pc, #92]	; (800d9bc <HAL_I2C_Mem_Write_IT+0x160>)
 800d95e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d960:	897a      	ldrh	r2, [r7, #10]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d966:	893a      	ldrh	r2, [r7, #8]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d96c:	88fa      	ldrh	r2, [r7, #6]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d986:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685a      	ldr	r2, [r3, #4]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d99e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e000      	b.n	800d9a6 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d9a4:	2302      	movs	r3, #2
  }
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	20000058 	.word	0x20000058
 800d9b8:	14f8b589 	.word	0x14f8b589
 800d9bc:	ffff0000 	.word	0xffff0000

0800d9c0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	817b      	strh	r3, [r7, #10]
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	813b      	strh	r3, [r7, #8]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b20      	cmp	r3, #32
 800d9e8:	f040 809a 	bne.w	800db20 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d9ec:	4b50      	ldr	r3, [pc, #320]	; (800db30 <HAL_I2C_Mem_Read_IT+0x170>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	08db      	lsrs	r3, r3, #3
 800d9f2:	4a50      	ldr	r2, [pc, #320]	; (800db34 <HAL_I2C_Mem_Read_IT+0x174>)
 800d9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9f8:	0a1a      	lsrs	r2, r3, #8
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	009a      	lsls	r2, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	3b01      	subs	r3, #1
 800da0a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d116      	bne.n	800da40 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2220      	movs	r2, #32
 800da1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2c:	f043 0220 	orr.w	r2, r3, #32
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da3c:	2301      	movs	r3, #1
 800da3e:	e070      	b.n	800db22 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	f003 0302 	and.w	r3, r3, #2
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d0db      	beq.n	800da06 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da54:	2b01      	cmp	r3, #1
 800da56:	d101      	bne.n	800da5c <HAL_I2C_Mem_Read_IT+0x9c>
 800da58:	2302      	movs	r3, #2
 800da5a:	e062      	b.n	800db22 <HAL_I2C_Mem_Read_IT+0x162>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f003 0301 	and.w	r3, r3, #1
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d007      	beq.n	800da82 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f042 0201 	orr.w	r2, r2, #1
 800da80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da90:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2222      	movs	r2, #34	; 0x22
 800da96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2240      	movs	r2, #64	; 0x40
 800da9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6a3a      	ldr	r2, [r7, #32]
 800daac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dab8:	b29a      	uxth	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	4a1d      	ldr	r2, [pc, #116]	; (800db38 <HAL_I2C_Mem_Read_IT+0x178>)
 800dac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dac4:	897a      	ldrh	r2, [r7, #10]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800daca:	893a      	ldrh	r2, [r7, #8]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800dad0:	88fa      	ldrh	r2, [r7, #6]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2200      	movs	r2, #0
 800dada:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800daea:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dafa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d007      	beq.n	800db1c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800db1a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800db1c:	2300      	movs	r3, #0
 800db1e:	e000      	b.n	800db22 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800db20:	2302      	movs	r3, #2
  }
}
 800db22:	4618      	mov	r0, r3
 800db24:	371c      	adds	r7, #28
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	20000058 	.word	0x20000058
 800db34:	14f8b589 	.word	0x14f8b589
 800db38:	ffff0000 	.word	0xffff0000

0800db3c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08a      	sub	sp, #40	; 0x28
 800db40:	af02      	add	r7, sp, #8
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	461a      	mov	r2, r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	817b      	strh	r3, [r7, #10]
 800db4e:	460b      	mov	r3, r1
 800db50:	813b      	strh	r3, [r7, #8]
 800db52:	4613      	mov	r3, r2
 800db54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800db56:	2300      	movs	r3, #0
 800db58:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800db5a:	f7f9 f9db 	bl	8006f14 <HAL_GetTick>
 800db5e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b20      	cmp	r3, #32
 800db6a:	f040 8145 	bne.w	800ddf8 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800db6e:	4b9d      	ldr	r3, [pc, #628]	; (800dde4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	08db      	lsrs	r3, r3, #3
 800db74:	4a9c      	ldr	r2, [pc, #624]	; (800dde8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800db76:	fba2 2303 	umull	r2, r3, r2, r3
 800db7a:	0a1a      	lsrs	r2, r3, #8
 800db7c:	4613      	mov	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	009a      	lsls	r2, r3, #2
 800db84:	4413      	add	r3, r2
 800db86:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d116      	bne.n	800dbc2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2200      	movs	r2, #0
 800db98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2220      	movs	r2, #32
 800db9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbae:	f043 0220 	orr.w	r2, r3, #32
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e11b      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	f003 0302 	and.w	r3, r3, #2
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d0db      	beq.n	800db88 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d101      	bne.n	800dbde <HAL_I2C_Mem_Write_DMA+0xa2>
 800dbda:	2302      	movs	r3, #2
 800dbdc:	e10d      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f003 0301 	and.w	r3, r3, #1
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d007      	beq.n	800dc04 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f042 0201 	orr.w	r2, r2, #1
 800dc02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2221      	movs	r2, #33	; 0x21
 800dc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2240      	movs	r2, #64	; 0x40
 800dc20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2200      	movs	r2, #0
 800dc28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800dc34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4a6a      	ldr	r2, [pc, #424]	; (800ddec <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800dc44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dc46:	897a      	ldrh	r2, [r7, #10]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800dc4c:	893a      	ldrh	r2, [r7, #8]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800dc52:	88fa      	ldrh	r2, [r7, #6]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 80a9 	beq.w	800ddba <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d02a      	beq.n	800dcc6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc74:	4a5e      	ldr	r2, [pc, #376]	; (800ddf0 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800dc76:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7c:	4a5d      	ldr	r2, [pc, #372]	; (800ddf4 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800dc7e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc84:	2200      	movs	r2, #0
 800dc86:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc94:	2200      	movs	r2, #0
 800dc96:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca8:	4619      	mov	r1, r3
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3310      	adds	r3, #16
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcb6:	f7fa fb96 	bl	80083e6 <HAL_DMA_Start_IT>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dcbe:	7efb      	ldrb	r3, [r7, #27]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d166      	bne.n	800dd92 <HAL_I2C_Mem_Write_DMA+0x256>
 800dcc4:	e013      	b.n	800dcee <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dcea:	2301      	movs	r3, #1
 800dcec:	e085      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800dcee:	88f8      	ldrh	r0, [r7, #6]
 800dcf0:	893a      	ldrh	r2, [r7, #8]
 800dcf2:	8979      	ldrh	r1, [r7, #10]
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	2323      	movs	r3, #35	; 0x23
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f003 f98c 	bl	801101c <I2C_RequestMemoryWrite>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d022      	beq.n	800dd50 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fa fc31 	bl	8008576 <HAL_DMA_Abort_IT>
 800dd14:	4603      	mov	r3, r0
 800dd16:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd2e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f022 0201 	bic.w	r2, r2, #1
 800dd4a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e054      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd50:	2300      	movs	r3, #0
 800dd52:	613b      	str	r3, [r7, #16]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	613b      	str	r3, [r7, #16]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	613b      	str	r3, [r7, #16]
 800dd64:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd7c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	685a      	ldr	r2, [r3, #4]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd8c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e033      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2220      	movs	r2, #32
 800dd96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda6:	f043 0210 	orr.w	r2, r3, #16
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e01f      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2220      	movs	r2, #32
 800ddbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	e00b      	b.n	800ddfa <HAL_I2C_Mem_Write_DMA+0x2be>
 800dde2:	bf00      	nop
 800dde4:	20000058 	.word	0x20000058
 800dde8:	14f8b589 	.word	0x14f8b589
 800ddec:	ffff0000 	.word	0xffff0000
 800ddf0:	08011319 	.word	0x08011319
 800ddf4:	080114c3 	.word	0x080114c3
    }
  }
  else
  {
    return HAL_BUSY;
 800ddf8:	2302      	movs	r3, #2
  }
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3720      	adds	r7, #32
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b08c      	sub	sp, #48	; 0x30
 800de06:	af02      	add	r7, sp, #8
 800de08:	60f8      	str	r0, [r7, #12]
 800de0a:	4608      	mov	r0, r1
 800de0c:	4611      	mov	r1, r2
 800de0e:	461a      	mov	r2, r3
 800de10:	4603      	mov	r3, r0
 800de12:	817b      	strh	r3, [r7, #10]
 800de14:	460b      	mov	r3, r1
 800de16:	813b      	strh	r3, [r7, #8]
 800de18:	4613      	mov	r3, r2
 800de1a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800de1c:	f7f9 f87a 	bl	8006f14 <HAL_GetTick>
 800de20:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800de22:	2300      	movs	r3, #0
 800de24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b20      	cmp	r3, #32
 800de30:	f040 8175 	bne.w	800e11e <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800de34:	4b94      	ldr	r3, [pc, #592]	; (800e088 <HAL_I2C_Mem_Read_DMA+0x286>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	08db      	lsrs	r3, r3, #3
 800de3a:	4a94      	ldr	r2, [pc, #592]	; (800e08c <HAL_I2C_Mem_Read_DMA+0x28a>)
 800de3c:	fba2 2303 	umull	r2, r3, r2, r3
 800de40:	0a1a      	lsrs	r2, r3, #8
 800de42:	4613      	mov	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	009a      	lsls	r2, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	3b01      	subs	r3, #1
 800de52:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d116      	bne.n	800de88 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2220      	movs	r2, #32
 800de64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de74:	f043 0220 	orr.w	r2, r3, #32
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2200      	movs	r2, #0
 800de80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e14b      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	2b02      	cmp	r3, #2
 800de94:	d0db      	beq.n	800de4e <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d101      	bne.n	800dea4 <HAL_I2C_Mem_Read_DMA+0xa2>
 800dea0:	2302      	movs	r3, #2
 800dea2:	e13d      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2201      	movs	r2, #1
 800dea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d007      	beq.n	800deca <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f042 0201 	orr.w	r2, r2, #1
 800dec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ded8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2222      	movs	r2, #34	; 0x22
 800dede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2240      	movs	r2, #64	; 0x40
 800dee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800defa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df00:	b29a      	uxth	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	4a61      	ldr	r2, [pc, #388]	; (800e090 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800df0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df0c:	897a      	ldrh	r2, [r7, #10]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800df12:	893a      	ldrh	r2, [r7, #8]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800df18:	88fa      	ldrh	r2, [r7, #6]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 80cb 	beq.w	800e0c4 <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df32:	2b00      	cmp	r3, #0
 800df34:	d02d      	beq.n	800df92 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3a:	4a56      	ldr	r2, [pc, #344]	; (800e094 <HAL_I2C_Mem_Read_DMA+0x292>)
 800df3c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df42:	4a55      	ldr	r2, [pc, #340]	; (800e098 <HAL_I2C_Mem_Read_DMA+0x296>)
 800df44:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4a:	2200      	movs	r2, #0
 800df4c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df52:	2200      	movs	r2, #0
 800df54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5a:	2200      	movs	r2, #0
 800df5c:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df62:	2200      	movs	r2, #0
 800df64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	3310      	adds	r3, #16
 800df70:	4619      	mov	r1, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df76:	461a      	mov	r2, r3
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df7c:	f7fa fa33 	bl	80083e6 <HAL_DMA_Start_IT>
 800df80:	4603      	mov	r3, r0
 800df82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800df86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f040 8086 	bne.w	800e09c <HAL_I2C_Mem_Read_DMA+0x29a>
 800df90:	e013      	b.n	800dfba <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2220      	movs	r2, #32
 800df96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e0b2      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800dfba:	88f8      	ldrh	r0, [r7, #6]
 800dfbc:	893a      	ldrh	r2, [r7, #8]
 800dfbe:	8979      	ldrh	r1, [r7, #10]
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	9301      	str	r3, [sp, #4]
 800dfc4:	2323      	movs	r3, #35	; 0x23
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	4603      	mov	r3, r0
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f003 f8bc 	bl	8011148 <I2C_RequestMemoryRead>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d023      	beq.n	800e01e <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fa facb 	bl	8008576 <HAL_DMA_Abort_IT>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfea:	2200      	movs	r2, #0
 800dfec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dffc:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2200      	movs	r2, #0
 800e002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2200      	movs	r2, #0
 800e008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f022 0201 	bic.w	r2, r2, #1
 800e018:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	e080      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e022:	2b01      	cmp	r3, #1
 800e024:	d108      	bne.n	800e038 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	e007      	b.n	800e048 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	685a      	ldr	r2, [r3, #4]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e046:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	617b      	str	r3, [r7, #20]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	617b      	str	r3, [r7, #20]
 800e05c:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	685a      	ldr	r2, [r3, #4]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e074:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e084:	605a      	str	r2, [r3, #4]
 800e086:	e048      	b.n	800e11a <HAL_I2C_Mem_Read_DMA+0x318>
 800e088:	20000058 	.word	0x20000058
 800e08c:	14f8b589 	.word	0x14f8b589
 800e090:	ffff0000 	.word	0xffff0000
 800e094:	08011319 	.word	0x08011319
 800e098:	080114c3 	.word	0x080114c3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2220      	movs	r2, #32
 800e0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b0:	f043 0210 	orr.w	r2, r3, #16
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e02d      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800e0c4:	88f8      	ldrh	r0, [r7, #6]
 800e0c6:	893a      	ldrh	r2, [r7, #8]
 800e0c8:	8979      	ldrh	r1, [r7, #10]
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	2323      	movs	r3, #35	; 0x23
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f003 f837 	bl	8011148 <I2C_RequestMemoryRead>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e01d      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61bb      	str	r3, [r7, #24]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	695b      	ldr	r3, [r3, #20]
 800e0ee:	61bb      	str	r3, [r7, #24]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	61bb      	str	r3, [r7, #24]
 800e0f8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e108:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2220      	movs	r2, #32
 800e10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2200      	movs	r2, #0
 800e116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	e000      	b.n	800e120 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800e11e:	2302      	movs	r3, #2
  }
}
 800e120:	4618      	mov	r0, r3
 800e122:	3728      	adds	r7, #40	; 0x28
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	460b      	mov	r3, r1
 800e136:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800e138:	f7f8 feec 	bl	8006f14 <HAL_GetTick>
 800e13c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800e13e:	2301      	movs	r3, #1
 800e140:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b20      	cmp	r3, #32
 800e14c:	f040 8111 	bne.w	800e372 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	2319      	movs	r3, #25
 800e156:	2201      	movs	r2, #1
 800e158:	4988      	ldr	r1, [pc, #544]	; (800e37c <HAL_I2C_IsDeviceReady+0x254>)
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f003 fa96 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800e166:	2302      	movs	r3, #2
 800e168:	e104      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e170:	2b01      	cmp	r3, #1
 800e172:	d101      	bne.n	800e178 <HAL_I2C_IsDeviceReady+0x50>
 800e174:	2302      	movs	r3, #2
 800e176:	e0fd      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f003 0301 	and.w	r3, r3, #1
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d007      	beq.n	800e19e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f042 0201 	orr.w	r2, r2, #1
 800e19c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2224      	movs	r2, #36	; 0x24
 800e1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4a70      	ldr	r2, [pc, #448]	; (800e380 <HAL_I2C_IsDeviceReady+0x258>)
 800e1c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f003 fa54 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00d      	beq.n	800e206 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1f8:	d103      	bne.n	800e202 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e200:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800e202:	2303      	movs	r3, #3
 800e204:	e0b6      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e206:	897b      	ldrh	r3, [r7, #10]
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	461a      	mov	r2, r3
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e214:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800e216:	f7f8 fe7d 	bl	8006f14 <HAL_GetTick>
 800e21a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	f003 0302 	and.w	r3, r3, #2
 800e226:	2b02      	cmp	r3, #2
 800e228:	bf0c      	ite	eq
 800e22a:	2301      	moveq	r3, #1
 800e22c:	2300      	movne	r3, #0
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e240:	bf0c      	ite	eq
 800e242:	2301      	moveq	r3, #1
 800e244:	2300      	movne	r3, #0
 800e246:	b2db      	uxtb	r3, r3
 800e248:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e24a:	e025      	b.n	800e298 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e24c:	f7f8 fe62 	bl	8006f14 <HAL_GetTick>
 800e250:	4602      	mov	r2, r0
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d302      	bcc.n	800e262 <HAL_I2C_IsDeviceReady+0x13a>
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d103      	bne.n	800e26a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	22a0      	movs	r2, #160	; 0xa0
 800e266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	f003 0302 	and.w	r3, r3, #2
 800e274:	2b02      	cmp	r3, #2
 800e276:	bf0c      	ite	eq
 800e278:	2301      	moveq	r3, #1
 800e27a:	2300      	movne	r3, #0
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e28a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e28e:	bf0c      	ite	eq
 800e290:	2301      	moveq	r3, #1
 800e292:	2300      	movne	r3, #0
 800e294:	b2db      	uxtb	r3, r3
 800e296:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2ba0      	cmp	r3, #160	; 0xa0
 800e2a2:	d005      	beq.n	800e2b0 <HAL_I2C_IsDeviceReady+0x188>
 800e2a4:	7dfb      	ldrb	r3, [r7, #23]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d102      	bne.n	800e2b0 <HAL_I2C_IsDeviceReady+0x188>
 800e2aa:	7dbb      	ldrb	r3, [r7, #22]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d0cd      	beq.n	800e24c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	f003 0302 	and.w	r3, r3, #2
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d129      	bne.n	800e31a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	613b      	str	r3, [r7, #16]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	695b      	ldr	r3, [r3, #20]
 800e2e0:	613b      	str	r3, [r7, #16]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	613b      	str	r3, [r7, #16]
 800e2ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	2319      	movs	r3, #25
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	4921      	ldr	r1, [pc, #132]	; (800e37c <HAL_I2C_IsDeviceReady+0x254>)
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f003 f9c8 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	e036      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2220      	movs	r2, #32
 800e30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	e02c      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e328:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e332:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	2319      	movs	r3, #25
 800e33a:	2201      	movs	r2, #1
 800e33c:	490f      	ldr	r1, [pc, #60]	; (800e37c <HAL_I2C_IsDeviceReady+0x254>)
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f003 f9a4 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	e012      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	3301      	adds	r3, #1
 800e352:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800e354:	69ba      	ldr	r2, [r7, #24]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	429a      	cmp	r2, r3
 800e35a:	f4ff af32 	bcc.w	800e1c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2220      	movs	r2, #32
 800e362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e000      	b.n	800e374 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800e372:	2302      	movs	r3, #2
  }
}
 800e374:	4618      	mov	r0, r3
 800e376:	3720      	adds	r7, #32
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	00100002 	.word	0x00100002
 800e380:	ffff0000 	.word	0xffff0000

0800e384 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e384:	b480      	push	{r7}
 800e386:	b087      	sub	sp, #28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	607a      	str	r2, [r7, #4]
 800e38e:	461a      	mov	r2, r3
 800e390:	460b      	mov	r3, r1
 800e392:	817b      	strh	r3, [r7, #10]
 800e394:	4613      	mov	r3, r2
 800e396:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e398:	2300      	movs	r3, #0
 800e39a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800e39c:	2300      	movs	r3, #0
 800e39e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b20      	cmp	r3, #32
 800e3aa:	f040 80a6 	bne.w	800e4fa <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3bc:	d005      	beq.n	800e3ca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	2b08      	cmp	r3, #8
 800e3c2:	d002      	beq.n	800e3ca <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d130      	bne.n	800e42c <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e3ca:	4b4f      	ldr	r3, [pc, #316]	; (800e508 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	08db      	lsrs	r3, r3, #3
 800e3d0:	4a4e      	ldr	r2, [pc, #312]	; (800e50c <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800e3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d6:	0a1a      	lsrs	r2, r3, #8
 800e3d8:	4613      	mov	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	009a      	lsls	r2, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	3b01      	subs	r3, #1
 800e3e8:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d116      	bne.n	800e41e <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2220      	movs	r2, #32
 800e3fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	f043 0220 	orr.w	r2, r3, #32
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e06e      	b.n	800e4fc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	699b      	ldr	r3, [r3, #24]
 800e424:	f003 0302 	and.w	r3, r3, #2
 800e428:	2b02      	cmp	r3, #2
 800e42a:	d0db      	beq.n	800e3e4 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e432:	2b01      	cmp	r3, #1
 800e434:	d101      	bne.n	800e43a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800e436:	2302      	movs	r3, #2
 800e438:	e060      	b.n	800e4fc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d007      	beq.n	800e460 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f042 0201 	orr.w	r2, r2, #1
 800e45e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e46e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2221      	movs	r2, #33	; 0x21
 800e474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2210      	movs	r2, #16
 800e47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2200      	movs	r2, #0
 800e484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	893a      	ldrh	r2, [r7, #8]
 800e490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e496:	b29a      	uxth	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6a3a      	ldr	r2, [r7, #32]
 800e4a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e4a2:	897a      	ldrh	r2, [r7, #10]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ac:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	2b11      	cmp	r3, #17
 800e4b2:	d10c      	bne.n	800e4ce <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e4ba:	d003      	beq.n	800e4c4 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800e4bc:	6a3b      	ldr	r3, [r7, #32]
 800e4be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e4c2:	d101      	bne.n	800e4c8 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e000      	b.n	800e4ca <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d107      	bne.n	800e4de <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4dc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e4f4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e000      	b.n	800e4fc <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800e4fa:	2302      	movs	r3, #2
  }
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	371c      	adds	r7, #28
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	20000058 	.word	0x20000058
 800e50c:	14f8b589 	.word	0x14f8b589

0800e510 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b088      	sub	sp, #32
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	607a      	str	r2, [r7, #4]
 800e51a:	461a      	mov	r2, r3
 800e51c:	460b      	mov	r3, r1
 800e51e:	817b      	strh	r3, [r7, #10]
 800e520:	4613      	mov	r3, r2
 800e522:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e524:	2300      	movs	r3, #0
 800e526:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800e528:	2300      	movs	r3, #0
 800e52a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b20      	cmp	r3, #32
 800e536:	f040 8149 	bne.w	800e7cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e548:	d005      	beq.n	800e556 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	2b08      	cmp	r3, #8
 800e54e:	d002      	beq.n	800e556 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	2b01      	cmp	r3, #1
 800e554:	d130      	bne.n	800e5b8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e556:	4b99      	ldr	r3, [pc, #612]	; (800e7bc <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	08db      	lsrs	r3, r3, #3
 800e55c:	4a98      	ldr	r2, [pc, #608]	; (800e7c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800e55e:	fba2 2303 	umull	r2, r3, r2, r3
 800e562:	0a1a      	lsrs	r2, r3, #8
 800e564:	4613      	mov	r3, r2
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	4413      	add	r3, r2
 800e56a:	009a      	lsls	r2, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	3b01      	subs	r3, #1
 800e574:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d116      	bne.n	800e5aa <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2220      	movs	r2, #32
 800e586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e596:	f043 0220 	orr.w	r2, r3, #32
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e111      	b.n	800e7ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	f003 0302 	and.w	r3, r3, #2
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d0db      	beq.n	800e570 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d101      	bne.n	800e5c6 <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800e5c2:	2302      	movs	r3, #2
 800e5c4:	e103      	b.n	800e7ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d007      	beq.n	800e5ec <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f042 0201 	orr.w	r2, r2, #1
 800e5ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2221      	movs	r2, #33	; 0x21
 800e600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2210      	movs	r2, #16
 800e608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	893a      	ldrh	r2, [r7, #8]
 800e61c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e622:	b29a      	uxth	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e62c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e62e:	897a      	ldrh	r2, [r7, #10]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e638:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f000 808d 	beq.w	800e75e <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d022      	beq.n	800e692 <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e650:	4a5c      	ldr	r2, [pc, #368]	; (800e7c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800e652:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e658:	4a5b      	ldr	r2, [pc, #364]	; (800e7c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800e65a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e660:	2200      	movs	r2, #0
 800e662:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e668:	2200      	movs	r2, #0
 800e66a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e674:	4619      	mov	r1, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3310      	adds	r3, #16
 800e67c:	461a      	mov	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e682:	f7f9 feb0 	bl	80083e6 <HAL_DMA_Start_IT>
 800e686:	4603      	mov	r3, r0
 800e688:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800e68a:	7ffb      	ldrb	r3, [r7, #31]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d152      	bne.n	800e736 <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800e690:	e013      	b.n	800e6ba <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2220      	movs	r2, #32
 800e696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e089      	b.n	800e7ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e6c8:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	2b11      	cmp	r3, #17
 800e6ce:	d10c      	bne.n	800e6ea <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e6d6:	d003      	beq.n	800e6e0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e6de:	d101      	bne.n	800e6e4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d107      	bne.n	800e6fa <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6f8:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e704:	2b04      	cmp	r3, #4
 800e706:	d005      	beq.n	800e714 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	2b20      	cmp	r3, #32
 800e70c:	d002      	beq.n	800e714 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	2b10      	cmp	r3, #16
 800e712:	d107      	bne.n	800e724 <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e722:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e732:	605a      	str	r2, [r3, #4]
 800e734:	e03f      	b.n	800e7b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2220      	movs	r2, #32
 800e73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74a:	f043 0210 	orr.w	r2, r3, #16
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e037      	b.n	800e7ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e76c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	2b11      	cmp	r3, #17
 800e772:	d10c      	bne.n	800e78e <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e77a:	d003      	beq.n	800e784 <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e782:	d101      	bne.n	800e788 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e784:	2301      	movs	r3, #1
 800e786:	e000      	b.n	800e78a <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e788:	2300      	movs	r3, #0
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d107      	bne.n	800e79e <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e79c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e7b4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	e009      	b.n	800e7ce <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e7ba:	bf00      	nop
 800e7bc:	20000058 	.word	0x20000058
 800e7c0:	14f8b589 	.word	0x14f8b589
 800e7c4:	08011319 	.word	0x08011319
 800e7c8:	080114c3 	.word	0x080114c3
  }
  else
  {
    return HAL_BUSY;
 800e7cc:	2302      	movs	r3, #2
  }
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3720      	adds	r7, #32
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	b089      	sub	sp, #36	; 0x24
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	60f8      	str	r0, [r7, #12]
 800e7de:	607a      	str	r2, [r7, #4]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	817b      	strh	r3, [r7, #10]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e7f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e7f6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b20      	cmp	r3, #32
 800e802:	f040 80da 	bne.w	800e9ba <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e814:	d005      	beq.n	800e822 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	2b08      	cmp	r3, #8
 800e81a:	d002      	beq.n	800e822 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d130      	bne.n	800e884 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e822:	4b69      	ldr	r3, [pc, #420]	; (800e9c8 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	08db      	lsrs	r3, r3, #3
 800e828:	4a68      	ldr	r2, [pc, #416]	; (800e9cc <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e82a:	fba2 2303 	umull	r2, r3, r2, r3
 800e82e:	0a1a      	lsrs	r2, r3, #8
 800e830:	4613      	mov	r3, r2
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4413      	add	r3, r2
 800e836:	009a      	lsls	r2, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	3b01      	subs	r3, #1
 800e840:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d116      	bne.n	800e876 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2220      	movs	r2, #32
 800e852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e862:	f043 0220 	orr.w	r2, r3, #32
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e872:	2301      	movs	r3, #1
 800e874:	e0a2      	b.n	800e9bc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	f003 0302 	and.w	r3, r3, #2
 800e880:	2b02      	cmp	r3, #2
 800e882:	d0db      	beq.n	800e83c <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d101      	bne.n	800e892 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e88e:	2302      	movs	r3, #2
 800e890:	e094      	b.n	800e9bc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f003 0301 	and.w	r3, r3, #1
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d007      	beq.n	800e8b8 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0201 	orr.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e8c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2222      	movs	r2, #34	; 0x22
 800e8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2210      	movs	r2, #16
 800e8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	893a      	ldrh	r2, [r7, #8]
 800e8e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e8fa:	897a      	ldrh	r2, [r7, #10]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e904:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	2b02      	cmp	r3, #2
 800e90e:	d126      	bne.n	800e95e <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	2b20      	cmp	r3, #32
 800e914:	d002      	beq.n	800e91c <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	2b10      	cmp	r3, #16
 800e91a:	d120      	bne.n	800e95e <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	2b12      	cmp	r3, #18
 800e920:	d114      	bne.n	800e94c <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e930:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e940:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e948:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e94a:	e010      	b.n	800e96e <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e95a:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e95c:	e007      	b.n	800e96e <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e96c:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	2b12      	cmp	r3, #18
 800e972:	d10c      	bne.n	800e98e <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e97a:	d003      	beq.n	800e984 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e982:	d101      	bne.n	800e988 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e984:	2301      	movs	r3, #1
 800e986:	e000      	b.n	800e98a <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e988:	2300      	movs	r3, #0
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d107      	bne.n	800e99e <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e99c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	6859      	ldr	r1, [r3, #4]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	69fa      	ldr	r2, [r7, #28]
 800e9b2:	430a      	orrs	r2, r1
 800e9b4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e000      	b.n	800e9bc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e9ba:	2302      	movs	r3, #2
  }
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3724      	adds	r7, #36	; 0x24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	20000058 	.word	0x20000058
 800e9cc:	14f8b589 	.word	0x14f8b589

0800e9d0 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b088      	sub	sp, #32
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	607a      	str	r2, [r7, #4]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	460b      	mov	r3, r1
 800e9de:	817b      	strh	r3, [r7, #10]
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e9ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e9f0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	f040 8199 	bne.w	800ed32 <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea0e:	d005      	beq.n	800ea1c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	2b08      	cmp	r3, #8
 800ea14:	d002      	beq.n	800ea1c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800ea16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d130      	bne.n	800ea7e <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ea1c:	4b8f      	ldr	r3, [pc, #572]	; (800ec5c <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	08db      	lsrs	r3, r3, #3
 800ea22:	4a8f      	ldr	r2, [pc, #572]	; (800ec60 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800ea24:	fba2 2303 	umull	r2, r3, r2, r3
 800ea28:	0a1a      	lsrs	r2, r3, #8
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4413      	add	r3, r2
 800ea30:	009a      	lsls	r2, r3, #2
 800ea32:	4413      	add	r3, r2
 800ea34:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d116      	bne.n	800ea70 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2220      	movs	r2, #32
 800ea4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5c:	f043 0220 	orr.w	r2, r3, #32
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e161      	b.n	800ed34 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	699b      	ldr	r3, [r3, #24]
 800ea76:	f003 0302 	and.w	r3, r3, #2
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d0db      	beq.n	800ea36 <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d101      	bne.n	800ea8c <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800ea88:	2302      	movs	r3, #2
 800ea8a:	e153      	b.n	800ed34 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f003 0301 	and.w	r3, r3, #1
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d007      	beq.n	800eab2 <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f042 0201 	orr.w	r2, r2, #1
 800eab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eac0:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ead0:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2222      	movs	r2, #34	; 0x22
 800ead6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2210      	movs	r2, #16
 800eade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	893a      	ldrh	r2, [r7, #8]
 800eaf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800eb04:	897a      	ldrh	r2, [r7, #10]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb0e:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	f000 80de 	beq.w	800ecd6 <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	2b02      	cmp	r3, #2
 800eb22:	d12a      	bne.n	800eb7a <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800eb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb26:	2b20      	cmp	r3, #32
 800eb28:	d002      	beq.n	800eb30 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	2b10      	cmp	r3, #16
 800eb2e:	d124      	bne.n	800eb7a <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	2b12      	cmp	r3, #18
 800eb34:	d118      	bne.n	800eb68 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb44:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb54:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eb64:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800eb66:	e022      	b.n	800ebae <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb76:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800eb78:	e019      	b.n	800ebae <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb88:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800eb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8c:	2b20      	cmp	r3, #32
 800eb8e:	d006      	beq.n	800eb9e <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800eb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb92:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800eb96:	d002      	beq.n	800eb9e <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	2b10      	cmp	r3, #16
 800eb9c:	d107      	bne.n	800ebae <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	685a      	ldr	r2, [r3, #4]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ebac:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d022      	beq.n	800ebfc <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebba:	4a2a      	ldr	r2, [pc, #168]	; (800ec64 <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800ebbc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc2:	4a29      	ldr	r2, [pc, #164]	; (800ec68 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800ebc4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebca:	2200      	movs	r2, #0
 800ebcc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	3310      	adds	r3, #16
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebec:	f7f9 fbfb 	bl	80083e6 <HAL_DMA_Start_IT>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800ebf4:	7efb      	ldrb	r3, [r7, #27]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d159      	bne.n	800ecae <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800ebfa:	e013      	b.n	800ec24 <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2220      	movs	r2, #32
 800ec00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800ec20:	2301      	movs	r3, #1
 800ec22:	e087      	b.n	800ed34 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	2b12      	cmp	r3, #18
 800ec28:	d10c      	bne.n	800ec44 <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ec30:	d003      	beq.n	800ec3a <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ec38:	d101      	bne.n	800ec3e <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e000      	b.n	800ec40 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d113      	bne.n	800ec6c <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec52:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800ec54:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ec58:	61fb      	str	r3, [r7, #28]
 800ec5a:	e00a      	b.n	800ec72 <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800ec5c:	20000058 	.word	0x20000058
 800ec60:	14f8b589 	.word	0x14f8b589
 800ec64:	08011319 	.word	0x08011319
 800ec68:	080114c3 	.word	0x080114c3
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800ec6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec70:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2200      	movs	r2, #0
 800ec76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800ec7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7c:	2b04      	cmp	r3, #4
 800ec7e:	d005      	beq.n	800ec8c <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	2b20      	cmp	r3, #32
 800ec84:	d002      	beq.n	800ec8c <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800ec86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec88:	2b10      	cmp	r3, #16
 800ec8a:	d107      	bne.n	800ec9c <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	685a      	ldr	r2, [r3, #4]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec9a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6859      	ldr	r1, [r3, #4]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69fa      	ldr	r2, [r7, #28]
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	605a      	str	r2, [r3, #4]
 800ecac:	e03f      	b.n	800ed2e <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2220      	movs	r2, #32
 800ecb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc2:	f043 0210 	orr.w	r2, r3, #16
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e02e      	b.n	800ed34 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ece4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	2b12      	cmp	r3, #18
 800ecea:	d10c      	bne.n	800ed06 <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800ecec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ecf2:	d003      	beq.n	800ecfc <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ecfa:	d101      	bne.n	800ed00 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e000      	b.n	800ed02 <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800ed00:	2300      	movs	r3, #0
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d107      	bne.n	800ed16 <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed14:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6859      	ldr	r1, [r3, #4]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	69fa      	ldr	r2, [r7, #28]
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e000      	b.n	800ed34 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800ed32:	2302      	movs	r3, #2
  }
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b087      	sub	sp, #28
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	603b      	str	r3, [r7, #0]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ed58:	2b28      	cmp	r3, #40	; 0x28
 800ed5a:	d15b      	bne.n	800ee14 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d002      	beq.n	800ed68 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800ed62:	88fb      	ldrh	r3, [r7, #6]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e054      	b.n	800ee16 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d101      	bne.n	800ed7a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800ed76:	2302      	movs	r3, #2
 800ed78:	e04d      	b.n	800ee16 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d007      	beq.n	800eda0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f042 0201 	orr.w	r2, r2, #1
 800ed9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800edae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2229      	movs	r2, #41	; 0x29
 800edb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2220      	movs	r2, #32
 800edbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	88fa      	ldrh	r2, [r7, #6]
 800edd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	695b      	ldr	r3, [r3, #20]
 800edec:	617b      	str	r3, [r7, #20]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	699b      	ldr	r3, [r3, #24]
 800edf4:	617b      	str	r3, [r7, #20]
 800edf6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ee0e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	e000      	b.n	800ee16 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ee14:	2302      	movs	r3, #2
  }
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	371c      	adds	r7, #28
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b086      	sub	sp, #24
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	60f8      	str	r0, [r7, #12]
 800ee2a:	60b9      	str	r1, [r7, #8]
 800ee2c:	603b      	str	r3, [r7, #0]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ee3e:	2b28      	cmp	r3, #40	; 0x28
 800ee40:	f040 811e 	bne.w	800f080 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d002      	beq.n	800ee50 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800ee4a:	88fb      	ldrh	r3, [r7, #6]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d101      	bne.n	800ee54 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	e116      	b.n	800f082 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d101      	bne.n	800ee62 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800ee5e:	2302      	movs	r3, #2
 800ee60:	e10f      	b.n	800f082 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ee78:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b2a      	cmp	r3, #42	; 0x2a
 800ee84:	d127      	bne.n	800eed6 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee94:	d14c      	bne.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d048      	beq.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	685a      	ldr	r2, [r3, #4]
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eeac:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb2:	4a76      	ldr	r2, [pc, #472]	; (800f08c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800eeb4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7f9 fb5b 	bl	8008576 <HAL_DMA_Abort_IT>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d034      	beq.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eed0:	4610      	mov	r0, r2
 800eed2:	4798      	blx	r3
 800eed4:	e02c      	b.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b29      	cmp	r3, #41	; 0x29
 800eee0:	d126      	bne.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	685b      	ldr	r3, [r3, #4]
 800eee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eeec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eef0:	d11e      	bne.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef00:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d012      	beq.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef0e:	4a5f      	ldr	r2, [pc, #380]	; (800f08c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800ef10:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7f9 fb2d 	bl	8008576 <HAL_DMA_Abort_IT>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d007      	beq.n	800ef4e <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f042 0201 	orr.w	r2, r2, #1
 800ef4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef5c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2229      	movs	r2, #41	; 0x29
 800ef62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2220      	movs	r2, #32
 800ef6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	88fa      	ldrh	r2, [r7, #6]
 800ef7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	683a      	ldr	r2, [r7, #0]
 800ef8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d022      	beq.n	800efde <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9c:	4a3c      	ldr	r2, [pc, #240]	; (800f090 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800ef9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efa4:	4a3b      	ldr	r2, [pc, #236]	; (800f094 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800efa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efac:	2200      	movs	r2, #0
 800efae:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efb4:	2200      	movs	r2, #0
 800efb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc0:	4619      	mov	r1, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3310      	adds	r3, #16
 800efc8:	461a      	mov	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efce:	f7f9 fa0a 	bl	80083e6 <HAL_DMA_Start_IT>
 800efd2:	4603      	mov	r3, r0
 800efd4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800efd6:	7dfb      	ldrb	r3, [r7, #23]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d13d      	bne.n	800f058 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800efdc:	e013      	b.n	800f006 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2228      	movs	r2, #40	; 0x28
 800efe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e03d      	b.n	800f082 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f016:	2300      	movs	r3, #0
 800f018:	613b      	str	r3, [r7, #16]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	695b      	ldr	r3, [r3, #20]
 800f020:	613b      	str	r3, [r7, #16]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	613b      	str	r3, [r7, #16]
 800f02a:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	685a      	ldr	r2, [r3, #4]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f042:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685a      	ldr	r2, [r3, #4]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f052:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	e014      	b.n	800f082 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2220      	movs	r2, #32
 800f05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06c:	f043 0210 	orr.w	r2, r3, #16
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e000      	b.n	800f082 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800f080:	2302      	movs	r3, #2
  }
}
 800f082:	4618      	mov	r0, r3
 800f084:	3718      	adds	r7, #24
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	0801153d 	.word	0x0801153d
 800f090:	08011319 	.word	0x08011319
 800f094:	080114c3 	.word	0x080114c3

0800f098 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800f098:	b480      	push	{r7}
 800f09a:	b087      	sub	sp, #28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	603b      	str	r3, [r7, #0]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f0b4:	2b28      	cmp	r3, #40	; 0x28
 800f0b6:	d15b      	bne.n	800f170 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800f0be:	88fb      	ldrh	r3, [r7, #6]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d101      	bne.n	800f0c8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e054      	b.n	800f172 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d101      	bne.n	800f0d6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	e04d      	b.n	800f172 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f003 0301 	and.w	r3, r3, #1
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d007      	beq.n	800f0fc <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f042 0201 	orr.w	r2, r2, #1
 800f0fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f10a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	222a      	movs	r2, #42	; 0x2a
 800f110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2220      	movs	r2, #32
 800f118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	88fa      	ldrh	r2, [r7, #6]
 800f12c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f132:	b29a      	uxth	r2, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f13e:	2300      	movs	r3, #0
 800f140:	617b      	str	r3, [r7, #20]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	695b      	ldr	r3, [r3, #20]
 800f148:	617b      	str	r3, [r7, #20]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	699b      	ldr	r3, [r3, #24]
 800f150:	617b      	str	r3, [r7, #20]
 800f152:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	685a      	ldr	r2, [r3, #4]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800f16a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f16c:	2300      	movs	r3, #0
 800f16e:	e000      	b.n	800f172 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800f170:	2302      	movs	r3, #2
  }
}
 800f172:	4618      	mov	r0, r3
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800f17e:	b580      	push	{r7, lr}
 800f180:	b086      	sub	sp, #24
 800f182:	af00      	add	r7, sp, #0
 800f184:	60f8      	str	r0, [r7, #12]
 800f186:	60b9      	str	r1, [r7, #8]
 800f188:	603b      	str	r3, [r7, #0]
 800f18a:	4613      	mov	r3, r2
 800f18c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f194:	b2db      	uxtb	r3, r3
 800f196:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f19a:	2b28      	cmp	r3, #40	; 0x28
 800f19c:	f040 811e 	bne.w	800f3dc <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800f1a6:	88fb      	ldrh	r3, [r7, #6]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d101      	bne.n	800f1b0 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e116      	b.n	800f3de <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d101      	bne.n	800f1be <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e10f      	b.n	800f3de <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	685a      	ldr	r2, [r3, #4]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f1d4:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e0:	d127      	bne.n	800f232 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f1f0:	d14c      	bne.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d048      	beq.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f208:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20e:	4a76      	ldr	r2, [pc, #472]	; (800f3e8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800f210:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f216:	4618      	mov	r0, r3
 800f218:	f7f9 f9ad 	bl	8008576 <HAL_DMA_Abort_IT>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d034      	beq.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f22c:	4610      	mov	r0, r2
 800f22e:	4798      	blx	r3
 800f230:	e02c      	b.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b29      	cmp	r3, #41	; 0x29
 800f23c:	d126      	bne.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f24c:	d11e      	bne.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f25c:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f262:	2b00      	cmp	r3, #0
 800f264:	d012      	beq.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f26a:	4a5f      	ldr	r2, [pc, #380]	; (800f3e8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800f26c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f272:	4618      	mov	r0, r3
 800f274:	f7f9 f97f 	bl	8008576 <HAL_DMA_Abort_IT>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d006      	beq.n	800f28c <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f288:	4610      	mov	r0, r2
 800f28a:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f003 0301 	and.w	r3, r3, #1
 800f296:	2b01      	cmp	r3, #1
 800f298:	d007      	beq.n	800f2aa <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f042 0201 	orr.w	r2, r2, #1
 800f2a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f2b8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	222a      	movs	r2, #42	; 0x2a
 800f2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2220      	movs	r2, #32
 800f2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	88fa      	ldrh	r2, [r7, #6]
 800f2da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d022      	beq.n	800f33a <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f8:	4a3c      	ldr	r2, [pc, #240]	; (800f3ec <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800f2fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f300:	4a3b      	ldr	r2, [pc, #236]	; (800f3f0 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800f302:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f308:	2200      	movs	r2, #0
 800f30a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f310:	2200      	movs	r2, #0
 800f312:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	3310      	adds	r3, #16
 800f31e:	4619      	mov	r1, r3
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f324:	461a      	mov	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f32a:	f7f9 f85c 	bl	80083e6 <HAL_DMA_Start_IT>
 800f32e:	4603      	mov	r3, r0
 800f330:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800f332:	7dfb      	ldrb	r3, [r7, #23]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d13d      	bne.n	800f3b4 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800f338:	e013      	b.n	800f362 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2228      	movs	r2, #40	; 0x28
 800f33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2200      	movs	r2, #0
 800f346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f34e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800f35e:	2301      	movs	r3, #1
 800f360:	e03d      	b.n	800f3de <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f372:	2300      	movs	r3, #0
 800f374:	613b      	str	r3, [r7, #16]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	695b      	ldr	r3, [r3, #20]
 800f37c:	613b      	str	r3, [r7, #16]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	613b      	str	r3, [r7, #16]
 800f386:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f39e:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f3ae:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	e014      	b.n	800f3de <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3c8:	f043 0210 	orr.w	r2, r3, #16
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	e000      	b.n	800f3de <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800f3dc:	2302      	movs	r3, #2
  }
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	0801153d 	.word	0x0801153d
 800f3ec:	08011319 	.word	0x08011319
 800f3f0:	080114c3 	.word	0x080114c3

0800f3f4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f402:	b2db      	uxtb	r3, r3
 800f404:	2b20      	cmp	r3, #32
 800f406:	d124      	bne.n	800f452 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2228      	movs	r2, #40	; 0x28
 800f40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 0301 	and.w	r3, r3, #1
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d007      	beq.n	800f42e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f042 0201 	orr.w	r2, r2, #1
 800f42c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f43c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f44c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	e000      	b.n	800f454 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800f452:	2302      	movs	r3, #2
  }
}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800f460:	b480      	push	{r7}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b28      	cmp	r3, #40	; 0x28
 800f472:	d129      	bne.n	800f4c8 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	f003 0303 	and.w	r3, r3, #3
 800f480:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	461a      	mov	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	431a      	orrs	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2220      	movs	r2, #32
 800f498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4b2:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f4c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e000      	b.n	800f4ca <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800f4c8:	2302      	movs	r3, #2
  }
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3714      	adds	r7, #20
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr

0800f4d6 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b084      	sub	sp, #16
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
 800f4de:	460b      	mov	r3, r1
 800f4e0:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4e8:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	699b      	ldr	r3, [r3, #24]
 800f4f0:	f003 0302 	and.w	r3, r3, #2
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d138      	bne.n	800f56a <HAL_I2C_Master_Abort_IT+0x94>
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	2b10      	cmp	r3, #16
 800f4fc:	d135      	bne.n	800f56a <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f504:	2b01      	cmp	r3, #1
 800f506:	d101      	bne.n	800f50c <HAL_I2C_Master_Abort_IT+0x36>
 800f508:	2302      	movs	r3, #2
 800f50a:	e02f      	b.n	800f56c <HAL_I2C_Master_Abort_IT+0x96>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2201      	movs	r2, #1
 800f510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2260      	movs	r2, #96	; 0x60
 800f51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f530:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f540:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	685a      	ldr	r2, [r3, #4]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f556:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f001 fad9 	bl	8010b18 <I2C_ITError>

    return HAL_OK;
 800f566:	2300      	movs	r3, #0
 800f568:	e000      	b.n	800f56c <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
  }
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800f57c:	2300      	movs	r3, #0
 800f57e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f58c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f594:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f59c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	2b10      	cmp	r3, #16
 800f5a2:	d003      	beq.n	800f5ac <HAL_I2C_EV_IRQHandler+0x38>
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	2b40      	cmp	r3, #64	; 0x40
 800f5a8:	f040 80c1 	bne.w	800f72e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	699b      	ldr	r3, [r3, #24]
 800f5b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	695b      	ldr	r3, [r3, #20]
 800f5ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10d      	bne.n	800f5e2 <HAL_I2C_EV_IRQHandler+0x6e>
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f5cc:	d003      	beq.n	800f5d6 <HAL_I2C_EV_IRQHandler+0x62>
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f5d4:	d101      	bne.n	800f5da <HAL_I2C_EV_IRQHandler+0x66>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e000      	b.n	800f5dc <HAL_I2C_EV_IRQHandler+0x68>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	f000 8132 	beq.w	800f846 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	f003 0301 	and.w	r3, r3, #1
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00c      	beq.n	800f606 <HAL_I2C_EV_IRQHandler+0x92>
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	0a5b      	lsrs	r3, r3, #9
 800f5f0:	f003 0301 	and.w	r3, r3, #1
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d006      	beq.n	800f606 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f002 fa94 	bl	8011b26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fda1 	bl	8010146 <I2C_Master_SB>
 800f604:	e092      	b.n	800f72c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	08db      	lsrs	r3, r3, #3
 800f60a:	f003 0301 	and.w	r3, r3, #1
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d009      	beq.n	800f626 <HAL_I2C_EV_IRQHandler+0xb2>
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	0a5b      	lsrs	r3, r3, #9
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fe17 	bl	8010252 <I2C_Master_ADD10>
 800f624:	e082      	b.n	800f72c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	085b      	lsrs	r3, r3, #1
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d009      	beq.n	800f646 <HAL_I2C_EV_IRQHandler+0xd2>
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	0a5b      	lsrs	r3, r3, #9
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fe31 	bl	80102a6 <I2C_Master_ADDR>
 800f644:	e072      	b.n	800f72c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	089b      	lsrs	r3, r3, #2
 800f64a:	f003 0301 	and.w	r3, r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d03b      	beq.n	800f6ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f65c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f660:	f000 80f3 	beq.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	09db      	lsrs	r3, r3, #7
 800f668:	f003 0301 	and.w	r3, r3, #1
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00f      	beq.n	800f690 <HAL_I2C_EV_IRQHandler+0x11c>
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	0a9b      	lsrs	r3, r3, #10
 800f674:	f003 0301 	and.w	r3, r3, #1
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d009      	beq.n	800f690 <HAL_I2C_EV_IRQHandler+0x11c>
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	089b      	lsrs	r3, r3, #2
 800f680:	f003 0301 	and.w	r3, r3, #1
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fa1b 	bl	800fac4 <I2C_MasterTransmit_TXE>
 800f68e:	e04d      	b.n	800f72c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	089b      	lsrs	r3, r3, #2
 800f694:	f003 0301 	and.w	r3, r3, #1
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f000 80d6 	beq.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	0a5b      	lsrs	r3, r3, #9
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 80cf 	beq.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800f6ac:	7bbb      	ldrb	r3, [r7, #14]
 800f6ae:	2b21      	cmp	r3, #33	; 0x21
 800f6b0:	d103      	bne.n	800f6ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 faa2 	bl	800fbfc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f6b8:	e0c7      	b.n	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800f6ba:	7bfb      	ldrb	r3, [r7, #15]
 800f6bc:	2b40      	cmp	r3, #64	; 0x40
 800f6be:	f040 80c4 	bne.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fb10 	bl	800fce8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f6c8:	e0bf      	b.n	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6d8:	f000 80b7 	beq.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	099b      	lsrs	r3, r3, #6
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00f      	beq.n	800f708 <HAL_I2C_EV_IRQHandler+0x194>
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	0a9b      	lsrs	r3, r3, #10
 800f6ec:	f003 0301 	and.w	r3, r3, #1
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d009      	beq.n	800f708 <HAL_I2C_EV_IRQHandler+0x194>
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	089b      	lsrs	r3, r3, #2
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d103      	bne.n	800f708 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fb85 	bl	800fe10 <I2C_MasterReceive_RXNE>
 800f706:	e011      	b.n	800f72c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	089b      	lsrs	r3, r3, #2
 800f70c:	f003 0301 	and.w	r3, r3, #1
 800f710:	2b00      	cmp	r3, #0
 800f712:	f000 809a 	beq.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	0a5b      	lsrs	r3, r3, #9
 800f71a:	f003 0301 	and.w	r3, r3, #1
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f000 8093 	beq.w	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 fc24 	bl	800ff72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f72a:	e08e      	b.n	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
 800f72c:	e08d      	b.n	800f84a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f732:	2b00      	cmp	r3, #0
 800f734:	d004      	beq.n	800f740 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	61fb      	str	r3, [r7, #28]
 800f73e:	e007      	b.n	800f750 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	699b      	ldr	r3, [r3, #24]
 800f746:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	695b      	ldr	r3, [r3, #20]
 800f74e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	085b      	lsrs	r3, r3, #1
 800f754:	f003 0301 	and.w	r3, r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d012      	beq.n	800f782 <HAL_I2C_EV_IRQHandler+0x20e>
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	0a5b      	lsrs	r3, r3, #9
 800f760:	f003 0301 	and.w	r3, r3, #1
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00c      	beq.n	800f782 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d003      	beq.n	800f778 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	699b      	ldr	r3, [r3, #24]
 800f776:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f778:	69b9      	ldr	r1, [r7, #24]
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 ffe2 	bl	8010744 <I2C_Slave_ADDR>
 800f780:	e066      	b.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	091b      	lsrs	r3, r3, #4
 800f786:	f003 0301 	and.w	r3, r3, #1
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d009      	beq.n	800f7a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	0a5b      	lsrs	r3, r3, #9
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	2b00      	cmp	r3, #0
 800f798:	d003      	beq.n	800f7a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 f81c 	bl	80107d8 <I2C_Slave_STOPF>
 800f7a0:	e056      	b.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f7a2:	7bbb      	ldrb	r3, [r7, #14]
 800f7a4:	2b21      	cmp	r3, #33	; 0x21
 800f7a6:	d002      	beq.n	800f7ae <HAL_I2C_EV_IRQHandler+0x23a>
 800f7a8:	7bbb      	ldrb	r3, [r7, #14]
 800f7aa:	2b29      	cmp	r3, #41	; 0x29
 800f7ac:	d125      	bne.n	800f7fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	09db      	lsrs	r3, r3, #7
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00f      	beq.n	800f7da <HAL_I2C_EV_IRQHandler+0x266>
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	0a9b      	lsrs	r3, r3, #10
 800f7be:	f003 0301 	and.w	r3, r3, #1
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d009      	beq.n	800f7da <HAL_I2C_EV_IRQHandler+0x266>
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	089b      	lsrs	r3, r3, #2
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d103      	bne.n	800f7da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fef8 	bl	80105c8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f7d8:	e039      	b.n	800f84e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	089b      	lsrs	r3, r3, #2
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d033      	beq.n	800f84e <HAL_I2C_EV_IRQHandler+0x2da>
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	0a5b      	lsrs	r3, r3, #9
 800f7ea:	f003 0301 	and.w	r3, r3, #1
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d02d      	beq.n	800f84e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 ff25 	bl	8010642 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f7f8:	e029      	b.n	800f84e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	099b      	lsrs	r3, r3, #6
 800f7fe:	f003 0301 	and.w	r3, r3, #1
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00f      	beq.n	800f826 <HAL_I2C_EV_IRQHandler+0x2b2>
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	0a9b      	lsrs	r3, r3, #10
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d009      	beq.n	800f826 <HAL_I2C_EV_IRQHandler+0x2b2>
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	089b      	lsrs	r3, r3, #2
 800f816:	f003 0301 	and.w	r3, r3, #1
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d103      	bne.n	800f826 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 ff30 	bl	8010684 <I2C_SlaveReceive_RXNE>
 800f824:	e014      	b.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	089b      	lsrs	r3, r3, #2
 800f82a:	f003 0301 	and.w	r3, r3, #1
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00e      	beq.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	0a5b      	lsrs	r3, r3, #9
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d008      	beq.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 ff5e 	bl	8010700 <I2C_SlaveReceive_BTF>
 800f844:	e004      	b.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f846:	bf00      	nop
 800f848:	e002      	b.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f84a:	bf00      	nop
 800f84c:	e000      	b.n	800f850 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f84e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f850:	3720      	adds	r7, #32
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b08a      	sub	sp, #40	; 0x28
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	695b      	ldr	r3, [r3, #20]
 800f864:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f86e:	2300      	movs	r3, #0
 800f870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f878:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	0a1b      	lsrs	r3, r3, #8
 800f87e:	f003 0301 	and.w	r3, r3, #1
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00e      	beq.n	800f8a4 <HAL_I2C_ER_IRQHandler+0x4e>
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	0a1b      	lsrs	r3, r3, #8
 800f88a:	f003 0301 	and.w	r3, r3, #1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d008      	beq.n	800f8a4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f894:	f043 0301 	orr.w	r3, r3, #1
 800f898:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f8a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	0a5b      	lsrs	r3, r3, #9
 800f8a8:	f003 0301 	and.w	r3, r3, #1
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00e      	beq.n	800f8ce <HAL_I2C_ER_IRQHandler+0x78>
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	0a1b      	lsrs	r3, r3, #8
 800f8b4:	f003 0301 	and.w	r3, r3, #1
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d008      	beq.n	800f8ce <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8be:	f043 0302 	orr.w	r3, r3, #2
 800f8c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f8cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f8ce:	6a3b      	ldr	r3, [r7, #32]
 800f8d0:	0a9b      	lsrs	r3, r3, #10
 800f8d2:	f003 0301 	and.w	r3, r3, #1
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d03f      	beq.n	800f95a <HAL_I2C_ER_IRQHandler+0x104>
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	0a1b      	lsrs	r3, r3, #8
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d039      	beq.n	800f95a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f8e6:	7efb      	ldrb	r3, [r7, #27]
 800f8e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f900:	7ebb      	ldrb	r3, [r7, #26]
 800f902:	2b20      	cmp	r3, #32
 800f904:	d112      	bne.n	800f92c <HAL_I2C_ER_IRQHandler+0xd6>
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d10f      	bne.n	800f92c <HAL_I2C_ER_IRQHandler+0xd6>
 800f90c:	7cfb      	ldrb	r3, [r7, #19]
 800f90e:	2b21      	cmp	r3, #33	; 0x21
 800f910:	d008      	beq.n	800f924 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f912:	7cfb      	ldrb	r3, [r7, #19]
 800f914:	2b29      	cmp	r3, #41	; 0x29
 800f916:	d005      	beq.n	800f924 <HAL_I2C_ER_IRQHandler+0xce>
 800f918:	7cfb      	ldrb	r3, [r7, #19]
 800f91a:	2b28      	cmp	r3, #40	; 0x28
 800f91c:	d106      	bne.n	800f92c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b21      	cmp	r3, #33	; 0x21
 800f922:	d103      	bne.n	800f92c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f001 f887 	bl	8010a38 <I2C_Slave_AF>
 800f92a:	e016      	b.n	800f95a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f934:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	f043 0304 	orr.w	r3, r3, #4
 800f93c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f93e:	7efb      	ldrb	r3, [r7, #27]
 800f940:	2b10      	cmp	r3, #16
 800f942:	d002      	beq.n	800f94a <HAL_I2C_ER_IRQHandler+0xf4>
 800f944:	7efb      	ldrb	r3, [r7, #27]
 800f946:	2b40      	cmp	r3, #64	; 0x40
 800f948:	d107      	bne.n	800f95a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f958:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f95a:	6a3b      	ldr	r3, [r7, #32]
 800f95c:	0adb      	lsrs	r3, r3, #11
 800f95e:	f003 0301 	and.w	r3, r3, #1
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00e      	beq.n	800f984 <HAL_I2C_ER_IRQHandler+0x12e>
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	0a1b      	lsrs	r3, r3, #8
 800f96a:	f003 0301 	and.w	r3, r3, #1
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d008      	beq.n	800f984 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f974:	f043 0308 	orr.w	r3, r3, #8
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f982:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	2b00      	cmp	r3, #0
 800f988:	d008      	beq.n	800f99c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f990:	431a      	orrs	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f001 f8be 	bl	8010b18 <I2C_ITError>
  }
}
 800f99c:	bf00      	nop
 800f99e:	3728      	adds	r7, #40	; 0x28
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f9d4:	bf00      	nop
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
 800fa00:	4613      	mov	r3, r2
 800fa02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fa04:	bf00      	nop
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800fa18:	bf00      	nop
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa82:	b2db      	uxtb	r3, r3
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa9e:	b2db      	uxtb	r3, r3
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800fab8:	4618      	mov	r0, r3
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fad2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fada:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d150      	bne.n	800fb8c <I2C_MasterTransmit_TXE+0xc8>
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2b21      	cmp	r3, #33	; 0x21
 800faee:	d14d      	bne.n	800fb8c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	2b08      	cmp	r3, #8
 800faf4:	d01d      	beq.n	800fb32 <I2C_MasterTransmit_TXE+0x6e>
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2b20      	cmp	r3, #32
 800fafa:	d01a      	beq.n	800fb32 <I2C_MasterTransmit_TXE+0x6e>
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fb02:	d016      	beq.n	800fb32 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685a      	ldr	r2, [r3, #4]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fb12:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2211      	movs	r2, #17
 800fb18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2220      	movs	r2, #32
 800fb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff ff3a 	bl	800f9a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fb30:	e060      	b.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	685a      	ldr	r2, [r3, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fb40:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb50:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2220      	movs	r2, #32
 800fb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	2b40      	cmp	r3, #64	; 0x40
 800fb6a:	d107      	bne.n	800fb7c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f7ff ff55 	bl	800fa24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fb7a:	e03b      	b.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff ff0d 	bl	800f9a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fb8a:	e033      	b.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	2b21      	cmp	r3, #33	; 0x21
 800fb90:	d005      	beq.n	800fb9e <I2C_MasterTransmit_TXE+0xda>
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	2b40      	cmp	r3, #64	; 0x40
 800fb96:	d12d      	bne.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	2b22      	cmp	r3, #34	; 0x22
 800fb9c:	d12a      	bne.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d108      	bne.n	800fbba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbb6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800fbb8:	e01c      	b.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	2b40      	cmp	r3, #64	; 0x40
 800fbc4:	d103      	bne.n	800fbce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 f88e 	bl	800fce8 <I2C_MemoryTransmit_TXE_BTF>
}
 800fbcc:	e012      	b.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd2:	781a      	ldrb	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	3b01      	subs	r3, #1
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fbf2:	e7ff      	b.n	800fbf4 <I2C_MasterTransmit_TXE+0x130>
 800fbf4:	bf00      	nop
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	2b21      	cmp	r3, #33	; 0x21
 800fc14:	d164      	bne.n	800fce0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d012      	beq.n	800fc46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc24:	781a      	ldrb	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800fc44:	e04c      	b.n	800fce0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2b08      	cmp	r3, #8
 800fc4a:	d01d      	beq.n	800fc88 <I2C_MasterTransmit_BTF+0x8c>
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b20      	cmp	r3, #32
 800fc50:	d01a      	beq.n	800fc88 <I2C_MasterTransmit_BTF+0x8c>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc58:	d016      	beq.n	800fc88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	685a      	ldr	r2, [r3, #4]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fc68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2211      	movs	r2, #17
 800fc6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2220      	movs	r2, #32
 800fc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f7ff fe8f 	bl	800f9a4 <HAL_I2C_MasterTxCpltCallback>
}
 800fc86:	e02b      	b.n	800fce0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	685a      	ldr	r2, [r3, #4]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fc96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fca6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2220      	movs	r2, #32
 800fcb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b40      	cmp	r3, #64	; 0x40
 800fcc0:	d107      	bne.n	800fcd2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7ff feaa 	bl	800fa24 <HAL_I2C_MemTxCpltCallback>
}
 800fcd0:	e006      	b.n	800fce0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff fe62 	bl	800f9a4 <HAL_I2C_MasterTxCpltCallback>
}
 800fce0:	bf00      	nop
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcf6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d11d      	bne.n	800fd3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d10b      	bne.n	800fd20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd0c:	b2da      	uxtb	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd18:	1c9a      	adds	r2, r3, #2
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800fd1e:	e073      	b.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	121b      	asrs	r3, r3, #8
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd34:	1c5a      	adds	r2, r3, #1
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fd3a:	e065      	b.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d10b      	bne.n	800fd5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd48:	b2da      	uxtb	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd54:	1c5a      	adds	r2, r3, #1
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fd5a:	e055      	b.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd60:	2b02      	cmp	r3, #2
 800fd62:	d151      	bne.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800fd64:	7bfb      	ldrb	r3, [r7, #15]
 800fd66:	2b22      	cmp	r3, #34	; 0x22
 800fd68:	d10d      	bne.n	800fd86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fd84:	e040      	b.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d015      	beq.n	800fdbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	2b21      	cmp	r3, #33	; 0x21
 800fd94:	d112      	bne.n	800fdbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9a:	781a      	ldrb	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda6:	1c5a      	adds	r2, r3, #1
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fdba:	e025      	b.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d120      	bne.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800fdc6:	7bfb      	ldrb	r3, [r7, #15]
 800fdc8:	2b21      	cmp	r3, #33	; 0x21
 800fdca:	d11d      	bne.n	800fe08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	685a      	ldr	r2, [r3, #4]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fdda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fdea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2220      	movs	r2, #32
 800fdf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7ff fe0e 	bl	800fa24 <HAL_I2C_MemTxCpltCallback>
}
 800fe08:	bf00      	nop
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	2b22      	cmp	r3, #34	; 0x22
 800fe22:	f040 80a2 	bne.w	800ff6a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d921      	bls.n	800fe78 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	691a      	ldr	r2, [r3, #16]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3e:	b2d2      	uxtb	r2, r2
 800fe40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	3b01      	subs	r3, #1
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	2b03      	cmp	r3, #3
 800fe62:	f040 8082 	bne.w	800ff6a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	685a      	ldr	r2, [r3, #4]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe74:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800fe76:	e078      	b.n	800ff6a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d074      	beq.n	800ff6a <I2C_MasterReceive_RXNE+0x15a>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d002      	beq.n	800fe8c <I2C_MasterReceive_RXNE+0x7c>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d16e      	bne.n	800ff6a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f001 fd92 	bl	80119b6 <I2C_WaitOnSTOPRequestThroughIT>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d142      	bne.n	800ff1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fea6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800feb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	691a      	ldr	r2, [r3, #16]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	b2d2      	uxtb	r2, r2
 800fec4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fed4:	b29b      	uxth	r3, r3
 800fed6:	3b01      	subs	r3, #1
 800fed8:	b29a      	uxth	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2220      	movs	r2, #32
 800fee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b40      	cmp	r3, #64	; 0x40
 800fef0:	d10a      	bne.n	800ff08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff fd99 	bl	800fa38 <HAL_I2C_MemRxCpltCallback>
}
 800ff06:	e030      	b.n	800ff6a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2212      	movs	r2, #18
 800ff14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff fd4e 	bl	800f9b8 <HAL_I2C_MasterRxCpltCallback>
}
 800ff1c:	e025      	b.n	800ff6a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	685a      	ldr	r2, [r3, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ff2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	691a      	ldr	r2, [r3, #16]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff38:	b2d2      	uxtb	r2, r2
 800ff3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	1c5a      	adds	r2, r3, #1
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2220      	movs	r2, #32
 800ff58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff fd71 	bl	800fa4c <HAL_I2C_ErrorCallback>
}
 800ff6a:	bf00      	nop
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b084      	sub	sp, #16
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	2b04      	cmp	r3, #4
 800ff88:	d11b      	bne.n	800ffc2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	691a      	ldr	r2, [r3, #16]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	b2d2      	uxtb	r2, r2
 800ffa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffac:	1c5a      	adds	r2, r3, #1
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800ffc0:	e0bd      	b.n	801013e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	2b03      	cmp	r3, #3
 800ffca:	d129      	bne.n	8010020 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685a      	ldr	r2, [r3, #4]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffda:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2b04      	cmp	r3, #4
 800ffe0:	d00a      	beq.n	800fff8 <I2C_MasterReceive_BTF+0x86>
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	d007      	beq.n	800fff8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fff6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	691a      	ldr	r2, [r3, #16]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010002:	b2d2      	uxtb	r2, r2
 8010004:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010014:	b29b      	uxth	r3, r3
 8010016:	3b01      	subs	r3, #1
 8010018:	b29a      	uxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801001e:	e08e      	b.n	801013e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010024:	b29b      	uxth	r3, r3
 8010026:	2b02      	cmp	r3, #2
 8010028:	d176      	bne.n	8010118 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d002      	beq.n	8010036 <I2C_MasterReceive_BTF+0xc4>
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2b10      	cmp	r3, #16
 8010034:	d108      	bne.n	8010048 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	e019      	b.n	801007c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2b04      	cmp	r3, #4
 801004c:	d002      	beq.n	8010054 <I2C_MasterReceive_BTF+0xe2>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2b02      	cmp	r3, #2
 8010052:	d108      	bne.n	8010066 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	e00a      	b.n	801007c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2b10      	cmp	r3, #16
 801006a:	d007      	beq.n	801007c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801007a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	691a      	ldr	r2, [r3, #16]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010086:	b2d2      	uxtb	r2, r2
 8010088:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008e:	1c5a      	adds	r2, r3, #1
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010098:	b29b      	uxth	r3, r3
 801009a:	3b01      	subs	r3, #1
 801009c:	b29a      	uxth	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	691a      	ldr	r2, [r3, #16]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ac:	b2d2      	uxtb	r2, r2
 80100ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100be:	b29b      	uxth	r3, r3
 80100c0:	3b01      	subs	r3, #1
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80100d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2220      	movs	r2, #32
 80100dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b40      	cmp	r3, #64	; 0x40
 80100ea:	d10a      	bne.n	8010102 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2200      	movs	r2, #0
 80100f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff fc9c 	bl	800fa38 <HAL_I2C_MemRxCpltCallback>
}
 8010100:	e01d      	b.n	801013e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2212      	movs	r2, #18
 801010e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff fc51 	bl	800f9b8 <HAL_I2C_MasterRxCpltCallback>
}
 8010116:	e012      	b.n	801013e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	691a      	ldr	r2, [r3, #16]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010122:	b2d2      	uxtb	r2, r2
 8010124:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010134:	b29b      	uxth	r3, r3
 8010136:	3b01      	subs	r3, #1
 8010138:	b29a      	uxth	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801013e:	bf00      	nop
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8010146:	b480      	push	{r7}
 8010148:	b083      	sub	sp, #12
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010154:	b2db      	uxtb	r3, r3
 8010156:	2b40      	cmp	r3, #64	; 0x40
 8010158:	d117      	bne.n	801018a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010166:	b2db      	uxtb	r3, r3
 8010168:	461a      	mov	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010172:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8010174:	e067      	b.n	8010246 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801017a:	b2db      	uxtb	r3, r3
 801017c:	f043 0301 	orr.w	r3, r3, #1
 8010180:	b2da      	uxtb	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	611a      	str	r2, [r3, #16]
}
 8010188:	e05d      	b.n	8010246 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	691b      	ldr	r3, [r3, #16]
 801018e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010192:	d133      	bne.n	80101fc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801019a:	b2db      	uxtb	r3, r3
 801019c:	2b21      	cmp	r3, #33	; 0x21
 801019e:	d109      	bne.n	80101b4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	461a      	mov	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80101b0:	611a      	str	r2, [r3, #16]
 80101b2:	e008      	b.n	80101c6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101b8:	b2db      	uxtb	r3, r3
 80101ba:	f043 0301 	orr.w	r3, r3, #1
 80101be:	b2da      	uxtb	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d004      	beq.n	80101d8 <I2C_Master_SB+0x92>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d108      	bne.n	80101ea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d032      	beq.n	8010246 <I2C_Master_SB+0x100>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d02d      	beq.n	8010246 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	685a      	ldr	r2, [r3, #4]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101f8:	605a      	str	r2, [r3, #4]
}
 80101fa:	e024      	b.n	8010246 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10e      	bne.n	8010222 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010208:	b29b      	uxth	r3, r3
 801020a:	11db      	asrs	r3, r3, #7
 801020c:	b2db      	uxtb	r3, r3
 801020e:	f003 0306 	and.w	r3, r3, #6
 8010212:	b2db      	uxtb	r3, r3
 8010214:	f063 030f 	orn	r3, r3, #15
 8010218:	b2da      	uxtb	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	611a      	str	r2, [r3, #16]
}
 8010220:	e011      	b.n	8010246 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010226:	2b01      	cmp	r3, #1
 8010228:	d10d      	bne.n	8010246 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801022e:	b29b      	uxth	r3, r3
 8010230:	11db      	asrs	r3, r3, #7
 8010232:	b2db      	uxtb	r3, r3
 8010234:	f003 0306 	and.w	r3, r3, #6
 8010238:	b2db      	uxtb	r3, r3
 801023a:	f063 030e 	orn	r3, r3, #14
 801023e:	b2da      	uxtb	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	611a      	str	r2, [r3, #16]
}
 8010246:	bf00      	nop
 8010248:	370c      	adds	r7, #12
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr

08010252 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8010252:	b480      	push	{r7}
 8010254:	b083      	sub	sp, #12
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801025e:	b2da      	uxtb	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801026a:	2b00      	cmp	r3, #0
 801026c:	d004      	beq.n	8010278 <I2C_Master_ADD10+0x26>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010274:	2b00      	cmp	r3, #0
 8010276:	d108      	bne.n	801028a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00c      	beq.n	801029a <I2C_Master_ADD10+0x48>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010286:	2b00      	cmp	r3, #0
 8010288:	d007      	beq.n	801029a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	685a      	ldr	r2, [r3, #4]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010298:	605a      	str	r2, [r3, #4]
  }
}
 801029a:	bf00      	nop
 801029c:	370c      	adds	r7, #12
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr

080102a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80102a6:	b480      	push	{r7}
 80102a8:	b091      	sub	sp, #68	; 0x44
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80102b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102bc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	2b22      	cmp	r3, #34	; 0x22
 80102ce:	f040 8169 	bne.w	80105a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10f      	bne.n	80102fa <I2C_Master_ADDR+0x54>
 80102da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102de:	2b40      	cmp	r3, #64	; 0x40
 80102e0:	d10b      	bne.n	80102fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80102e2:	2300      	movs	r3, #0
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	695b      	ldr	r3, [r3, #20]
 80102ec:	60fb      	str	r3, [r7, #12]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	699b      	ldr	r3, [r3, #24]
 80102f4:	60fb      	str	r3, [r7, #12]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	e160      	b.n	80105bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d11d      	bne.n	801033e <I2C_Master_ADDR+0x98>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	691b      	ldr	r3, [r3, #16]
 8010306:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801030a:	d118      	bne.n	801033e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801030c:	2300      	movs	r3, #0
 801030e:	613b      	str	r3, [r7, #16]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	695b      	ldr	r3, [r3, #20]
 8010316:	613b      	str	r3, [r7, #16]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	699b      	ldr	r3, [r3, #24]
 801031e:	613b      	str	r3, [r7, #16]
 8010320:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010330:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010336:	1c5a      	adds	r2, r3, #1
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	651a      	str	r2, [r3, #80]	; 0x50
 801033c:	e13e      	b.n	80105bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010342:	b29b      	uxth	r3, r3
 8010344:	2b00      	cmp	r3, #0
 8010346:	d113      	bne.n	8010370 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010348:	2300      	movs	r3, #0
 801034a:	617b      	str	r3, [r7, #20]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	695b      	ldr	r3, [r3, #20]
 8010352:	617b      	str	r3, [r7, #20]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	699b      	ldr	r3, [r3, #24]
 801035a:	617b      	str	r3, [r7, #20]
 801035c:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	e115      	b.n	801059c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010374:	b29b      	uxth	r3, r3
 8010376:	2b01      	cmp	r3, #1
 8010378:	f040 808a 	bne.w	8010490 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010382:	d137      	bne.n	80103f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010392:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801039e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80103a2:	d113      	bne.n	80103cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80103b4:	2300      	movs	r3, #0
 80103b6:	61bb      	str	r3, [r7, #24]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	695b      	ldr	r3, [r3, #20]
 80103be:	61bb      	str	r3, [r7, #24]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	61bb      	str	r3, [r7, #24]
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	e0e7      	b.n	801059c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80103cc:	2300      	movs	r3, #0
 80103ce:	61fb      	str	r3, [r7, #28]
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	695b      	ldr	r3, [r3, #20]
 80103d6:	61fb      	str	r3, [r7, #28]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	699b      	ldr	r3, [r3, #24]
 80103de:	61fb      	str	r3, [r7, #28]
 80103e0:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	e0d3      	b.n	801059c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80103f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f6:	2b08      	cmp	r3, #8
 80103f8:	d02e      	beq.n	8010458 <I2C_Master_ADDR+0x1b2>
 80103fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fc:	2b20      	cmp	r3, #32
 80103fe:	d02b      	beq.n	8010458 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8010400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010402:	2b12      	cmp	r3, #18
 8010404:	d102      	bne.n	801040c <I2C_Master_ADDR+0x166>
 8010406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010408:	2b01      	cmp	r3, #1
 801040a:	d125      	bne.n	8010458 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	2b04      	cmp	r3, #4
 8010410:	d00e      	beq.n	8010430 <I2C_Master_ADDR+0x18a>
 8010412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010414:	2b02      	cmp	r3, #2
 8010416:	d00b      	beq.n	8010430 <I2C_Master_ADDR+0x18a>
 8010418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041a:	2b10      	cmp	r3, #16
 801041c:	d008      	beq.n	8010430 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	e007      	b.n	8010440 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801043e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010440:	2300      	movs	r3, #0
 8010442:	623b      	str	r3, [r7, #32]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	695b      	ldr	r3, [r3, #20]
 801044a:	623b      	str	r3, [r7, #32]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	699b      	ldr	r3, [r3, #24]
 8010452:	623b      	str	r3, [r7, #32]
 8010454:	6a3b      	ldr	r3, [r7, #32]
 8010456:	e0a1      	b.n	801059c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010466:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010468:	2300      	movs	r3, #0
 801046a:	627b      	str	r3, [r7, #36]	; 0x24
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	695b      	ldr	r3, [r3, #20]
 8010472:	627b      	str	r3, [r7, #36]	; 0x24
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	699b      	ldr	r3, [r3, #24]
 801047a:	627b      	str	r3, [r7, #36]	; 0x24
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	e085      	b.n	801059c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010494:	b29b      	uxth	r3, r3
 8010496:	2b02      	cmp	r3, #2
 8010498:	d14d      	bne.n	8010536 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	2b04      	cmp	r3, #4
 801049e:	d016      	beq.n	80104ce <I2C_Master_ADDR+0x228>
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	2b02      	cmp	r3, #2
 80104a4:	d013      	beq.n	80104ce <I2C_Master_ADDR+0x228>
 80104a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a8:	2b10      	cmp	r3, #16
 80104aa:	d010      	beq.n	80104ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	e007      	b.n	80104de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80104dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104ec:	d117      	bne.n	801051e <I2C_Master_ADDR+0x278>
 80104ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80104f4:	d00b      	beq.n	801050e <I2C_Master_ADDR+0x268>
 80104f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d008      	beq.n	801050e <I2C_Master_ADDR+0x268>
 80104fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fe:	2b08      	cmp	r3, #8
 8010500:	d005      	beq.n	801050e <I2C_Master_ADDR+0x268>
 8010502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010504:	2b10      	cmp	r3, #16
 8010506:	d002      	beq.n	801050e <I2C_Master_ADDR+0x268>
 8010508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050a:	2b20      	cmp	r3, #32
 801050c:	d107      	bne.n	801051e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	685a      	ldr	r2, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801051c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801051e:	2300      	movs	r3, #0
 8010520:	62bb      	str	r3, [r7, #40]	; 0x28
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	695b      	ldr	r3, [r3, #20]
 8010528:	62bb      	str	r3, [r7, #40]	; 0x28
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	699b      	ldr	r3, [r3, #24]
 8010530:	62bb      	str	r3, [r7, #40]	; 0x28
 8010532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010534:	e032      	b.n	801059c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010544:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010554:	d117      	bne.n	8010586 <I2C_Master_ADDR+0x2e0>
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801055c:	d00b      	beq.n	8010576 <I2C_Master_ADDR+0x2d0>
 801055e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010560:	2b01      	cmp	r3, #1
 8010562:	d008      	beq.n	8010576 <I2C_Master_ADDR+0x2d0>
 8010564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010566:	2b08      	cmp	r3, #8
 8010568:	d005      	beq.n	8010576 <I2C_Master_ADDR+0x2d0>
 801056a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056c:	2b10      	cmp	r3, #16
 801056e:	d002      	beq.n	8010576 <I2C_Master_ADDR+0x2d0>
 8010570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010572:	2b20      	cmp	r3, #32
 8010574:	d107      	bne.n	8010586 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	685a      	ldr	r2, [r3, #4]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010584:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010586:	2300      	movs	r3, #0
 8010588:	62fb      	str	r3, [r7, #44]	; 0x2c
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	695b      	ldr	r3, [r3, #20]
 8010590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	699b      	ldr	r3, [r3, #24]
 8010598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80105a2:	e00b      	b.n	80105bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80105a4:	2300      	movs	r3, #0
 80105a6:	633b      	str	r3, [r7, #48]	; 0x30
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	695b      	ldr	r3, [r3, #20]
 80105ae:	633b      	str	r3, [r7, #48]	; 0x30
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	633b      	str	r3, [r7, #48]	; 0x30
 80105b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80105ba:	e7ff      	b.n	80105bc <I2C_Master_ADDR+0x316>
 80105bc:	bf00      	nop
 80105be:	3744      	adds	r7, #68	; 0x44
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105dc:	b29b      	uxth	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d02b      	beq.n	801063a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e6:	781a      	ldrb	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f2:	1c5a      	adds	r2, r3, #1
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	3b01      	subs	r3, #1
 8010600:	b29a      	uxth	r2, r3
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801060a:	b29b      	uxth	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	d114      	bne.n	801063a <I2C_SlaveTransmit_TXE+0x72>
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	2b29      	cmp	r3, #41	; 0x29
 8010614:	d111      	bne.n	801063a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	685a      	ldr	r2, [r3, #4]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010624:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2221      	movs	r2, #33	; 0x21
 801062a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2228      	movs	r2, #40	; 0x28
 8010630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff f9c9 	bl	800f9cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801063a:	bf00      	nop
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8010642:	b480      	push	{r7}
 8010644:	b083      	sub	sp, #12
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801064e:	b29b      	uxth	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	d011      	beq.n	8010678 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010658:	781a      	ldrb	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801066e:	b29b      	uxth	r3, r3
 8010670:	3b01      	subs	r3, #1
 8010672:	b29a      	uxth	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010678:	bf00      	nop
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010692:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010698:	b29b      	uxth	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	d02c      	beq.n	80106f8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	691a      	ldr	r2, [r3, #16]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a8:	b2d2      	uxtb	r2, r2
 80106aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b0:	1c5a      	adds	r2, r3, #1
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	3b01      	subs	r3, #1
 80106be:	b29a      	uxth	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d114      	bne.n	80106f8 <I2C_SlaveReceive_RXNE+0x74>
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	2b2a      	cmp	r3, #42	; 0x2a
 80106d2:	d111      	bne.n	80106f8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	685a      	ldr	r2, [r3, #4]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2222      	movs	r2, #34	; 0x22
 80106e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2228      	movs	r2, #40	; 0x28
 80106ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7ff f974 	bl	800f9e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80106f8:	bf00      	nop
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801070c:	b29b      	uxth	r3, r3
 801070e:	2b00      	cmp	r3, #0
 8010710:	d012      	beq.n	8010738 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	691a      	ldr	r2, [r3, #16]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071c:	b2d2      	uxtb	r2, r2
 801071e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010724:	1c5a      	adds	r2, r3, #1
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801072e:	b29b      	uxth	r3, r3
 8010730:	3b01      	subs	r3, #1
 8010732:	b29a      	uxth	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010738:	bf00      	nop
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801074e:	2300      	movs	r3, #0
 8010750:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010758:	b2db      	uxtb	r3, r3
 801075a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801075e:	2b28      	cmp	r3, #40	; 0x28
 8010760:	d127      	bne.n	80107b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010770:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	089b      	lsrs	r3, r3, #2
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	2b00      	cmp	r3, #0
 801077c:	d101      	bne.n	8010782 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801077e:	2301      	movs	r3, #1
 8010780:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	09db      	lsrs	r3, r3, #7
 8010786:	f003 0301 	and.w	r3, r3, #1
 801078a:	2b00      	cmp	r3, #0
 801078c:	d103      	bne.n	8010796 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	81bb      	strh	r3, [r7, #12]
 8010794:	e002      	b.n	801079c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80107a4:	89ba      	ldrh	r2, [r7, #12]
 80107a6:	7bfb      	ldrb	r3, [r7, #15]
 80107a8:	4619      	mov	r1, r3
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff f922 	bl	800f9f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80107b0:	e00e      	b.n	80107d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80107b2:	2300      	movs	r3, #0
 80107b4:	60bb      	str	r3, [r7, #8]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	695b      	ldr	r3, [r3, #20]
 80107bc:	60bb      	str	r3, [r7, #8]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	60bb      	str	r3, [r7, #8]
 80107c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80107d0:	bf00      	nop
 80107d2:	3710      	adds	r7, #16
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	685a      	ldr	r2, [r3, #4]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80107f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80107f8:	2300      	movs	r3, #0
 80107fa:	60bb      	str	r3, [r7, #8]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	695b      	ldr	r3, [r3, #20]
 8010802:	60bb      	str	r3, [r7, #8]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f042 0201 	orr.w	r2, r2, #1
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010824:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	685b      	ldr	r3, [r3, #4]
 801082c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010834:	d172      	bne.n	801091c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010836:	7bfb      	ldrb	r3, [r7, #15]
 8010838:	2b22      	cmp	r3, #34	; 0x22
 801083a:	d002      	beq.n	8010842 <I2C_Slave_STOPF+0x6a>
 801083c:	7bfb      	ldrb	r3, [r7, #15]
 801083e:	2b2a      	cmp	r3, #42	; 0x2a
 8010840:	d135      	bne.n	80108ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	b29a      	uxth	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010854:	b29b      	uxth	r3, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	d005      	beq.n	8010866 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801085e:	f043 0204 	orr.w	r2, r3, #4
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	685a      	ldr	r2, [r3, #4]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010874:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801087a:	4618      	mov	r0, r3
 801087c:	f7f8 f9c1 	bl	8008c02 <HAL_DMA_GetState>
 8010880:	4603      	mov	r3, r0
 8010882:	2b01      	cmp	r3, #1
 8010884:	d049      	beq.n	801091a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801088a:	4a69      	ldr	r2, [pc, #420]	; (8010a30 <I2C_Slave_STOPF+0x258>)
 801088c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010892:	4618      	mov	r0, r3
 8010894:	f7f7 fe6f 	bl	8008576 <HAL_DMA_Abort_IT>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d03d      	beq.n	801091a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80108a8:	4610      	mov	r0, r2
 80108aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108ac:	e035      	b.n	801091a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d005      	beq.n	80108d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ca:	f043 0204 	orr.w	r2, r3, #4
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	685a      	ldr	r2, [r3, #4]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80108e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7f8 f98b 	bl	8008c02 <HAL_DMA_GetState>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d014      	beq.n	801091c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108f6:	4a4e      	ldr	r2, [pc, #312]	; (8010a30 <I2C_Slave_STOPF+0x258>)
 80108f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108fe:	4618      	mov	r0, r3
 8010900:	f7f7 fe39 	bl	8008576 <HAL_DMA_Abort_IT>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d008      	beq.n	801091c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801090e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010914:	4610      	mov	r0, r2
 8010916:	4798      	blx	r3
 8010918:	e000      	b.n	801091c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801091a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010920:	b29b      	uxth	r3, r3
 8010922:	2b00      	cmp	r3, #0
 8010924:	d03e      	beq.n	80109a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	f003 0304 	and.w	r3, r3, #4
 8010930:	2b04      	cmp	r3, #4
 8010932:	d112      	bne.n	801095a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	691a      	ldr	r2, [r3, #16]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093e:	b2d2      	uxtb	r2, r2
 8010940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010946:	1c5a      	adds	r2, r3, #1
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010950:	b29b      	uxth	r3, r3
 8010952:	3b01      	subs	r3, #1
 8010954:	b29a      	uxth	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	695b      	ldr	r3, [r3, #20]
 8010960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010964:	2b40      	cmp	r3, #64	; 0x40
 8010966:	d112      	bne.n	801098e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	691a      	ldr	r2, [r3, #16]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010972:	b2d2      	uxtb	r2, r2
 8010974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097a:	1c5a      	adds	r2, r3, #1
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010984:	b29b      	uxth	r3, r3
 8010986:	3b01      	subs	r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010992:	b29b      	uxth	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d005      	beq.n	80109a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099c:	f043 0204 	orr.w	r2, r3, #4
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d003      	beq.n	80109b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 f8b3 	bl	8010b18 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80109b2:	e039      	b.n	8010a28 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
 80109b6:	2b2a      	cmp	r3, #42	; 0x2a
 80109b8:	d109      	bne.n	80109ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2228      	movs	r2, #40	; 0x28
 80109c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f7ff f809 	bl	800f9e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	2b28      	cmp	r3, #40	; 0x28
 80109d8:	d111      	bne.n	80109fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4a15      	ldr	r2, [pc, #84]	; (8010a34 <I2C_Slave_STOPF+0x25c>)
 80109de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2220      	movs	r2, #32
 80109ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2200      	movs	r2, #0
 80109f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7ff f80a 	bl	800fa10 <HAL_I2C_ListenCpltCallback>
}
 80109fc:	e014      	b.n	8010a28 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a02:	2b22      	cmp	r3, #34	; 0x22
 8010a04:	d002      	beq.n	8010a0c <I2C_Slave_STOPF+0x234>
 8010a06:	7bfb      	ldrb	r3, [r7, #15]
 8010a08:	2b22      	cmp	r3, #34	; 0x22
 8010a0a:	d10d      	bne.n	8010a28 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2220      	movs	r2, #32
 8010a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f7fe ffdc 	bl	800f9e0 <HAL_I2C_SlaveRxCpltCallback>
}
 8010a28:	bf00      	nop
 8010a2a:	3710      	adds	r7, #16
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	0801153d 	.word	0x0801153d
 8010a34:	ffff0000 	.word	0xffff0000

08010a38 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a46:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a4c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b08      	cmp	r3, #8
 8010a52:	d002      	beq.n	8010a5a <I2C_Slave_AF+0x22>
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	2b20      	cmp	r3, #32
 8010a58:	d129      	bne.n	8010aae <I2C_Slave_AF+0x76>
 8010a5a:	7bfb      	ldrb	r3, [r7, #15]
 8010a5c:	2b28      	cmp	r3, #40	; 0x28
 8010a5e:	d126      	bne.n	8010aae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	4a2c      	ldr	r2, [pc, #176]	; (8010b14 <I2C_Slave_AF+0xdc>)
 8010a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	685a      	ldr	r2, [r3, #4]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010a74:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010a7e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a8e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2220      	movs	r2, #32
 8010a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7fe ffb2 	bl	800fa10 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8010aac:	e02e      	b.n	8010b0c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010aae:	7bfb      	ldrb	r3, [r7, #15]
 8010ab0:	2b21      	cmp	r3, #33	; 0x21
 8010ab2:	d126      	bne.n	8010b02 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	4a17      	ldr	r2, [pc, #92]	; (8010b14 <I2C_Slave_AF+0xdc>)
 8010ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2221      	movs	r2, #33	; 0x21
 8010abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2220      	movs	r2, #32
 8010ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	685a      	ldr	r2, [r3, #4]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010ade:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010ae8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010af8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f7fe ff66 	bl	800f9cc <HAL_I2C_SlaveTxCpltCallback>
}
 8010b00:	e004      	b.n	8010b0c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010b0a:	615a      	str	r2, [r3, #20]
}
 8010b0c:	bf00      	nop
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	ffff0000 	.word	0xffff0000

08010b18 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b2e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010b30:	7bbb      	ldrb	r3, [r7, #14]
 8010b32:	2b10      	cmp	r3, #16
 8010b34:	d002      	beq.n	8010b3c <I2C_ITError+0x24>
 8010b36:	7bbb      	ldrb	r3, [r7, #14]
 8010b38:	2b40      	cmp	r3, #64	; 0x40
 8010b3a:	d10a      	bne.n	8010b52 <I2C_ITError+0x3a>
 8010b3c:	7bfb      	ldrb	r3, [r7, #15]
 8010b3e:	2b22      	cmp	r3, #34	; 0x22
 8010b40:	d107      	bne.n	8010b52 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010b50:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
 8010b54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010b58:	2b28      	cmp	r3, #40	; 0x28
 8010b5a:	d107      	bne.n	8010b6c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2228      	movs	r2, #40	; 0x28
 8010b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010b6a:	e015      	b.n	8010b98 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b7a:	d00a      	beq.n	8010b92 <I2C_ITError+0x7a>
 8010b7c:	7bfb      	ldrb	r3, [r7, #15]
 8010b7e:	2b60      	cmp	r3, #96	; 0x60
 8010b80:	d007      	beq.n	8010b92 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2220      	movs	r2, #32
 8010b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ba6:	d162      	bne.n	8010c6e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	685a      	ldr	r2, [r3, #4]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010bb6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d020      	beq.n	8010c08 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bca:	4a6a      	ldr	r2, [pc, #424]	; (8010d74 <I2C_ITError+0x25c>)
 8010bcc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7f7 fccf 	bl	8008576 <HAL_DMA_Abort_IT>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 8089 	beq.w	8010cf2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f022 0201 	bic.w	r2, r2, #1
 8010bee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2220      	movs	r2, #32
 8010bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010c02:	4610      	mov	r0, r2
 8010c04:	4798      	blx	r3
 8010c06:	e074      	b.n	8010cf2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0c:	4a59      	ldr	r2, [pc, #356]	; (8010d74 <I2C_ITError+0x25c>)
 8010c0e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7f7 fcae 	bl	8008576 <HAL_DMA_Abort_IT>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d068      	beq.n	8010cf2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c2a:	2b40      	cmp	r3, #64	; 0x40
 8010c2c:	d10b      	bne.n	8010c46 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	691a      	ldr	r2, [r3, #16]
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c38:	b2d2      	uxtb	r2, r2
 8010c3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c40:	1c5a      	adds	r2, r3, #1
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f022 0201 	bic.w	r2, r2, #1
 8010c54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2220      	movs	r2, #32
 8010c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010c68:	4610      	mov	r0, r2
 8010c6a:	4798      	blx	r3
 8010c6c:	e041      	b.n	8010cf2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	2b60      	cmp	r3, #96	; 0x60
 8010c78:	d125      	bne.n	8010cc6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2220      	movs	r2, #32
 8010c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	695b      	ldr	r3, [r3, #20]
 8010c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c92:	2b40      	cmp	r3, #64	; 0x40
 8010c94:	d10b      	bne.n	8010cae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	691a      	ldr	r2, [r3, #16]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca0:	b2d2      	uxtb	r2, r2
 8010ca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca8:	1c5a      	adds	r2, r3, #1
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f022 0201 	bic.w	r2, r2, #1
 8010cbc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7fe fece 	bl	800fa60 <HAL_I2C_AbortCpltCallback>
 8010cc4:	e015      	b.n	8010cf2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	695b      	ldr	r3, [r3, #20]
 8010ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cd0:	2b40      	cmp	r3, #64	; 0x40
 8010cd2:	d10b      	bne.n	8010cec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	691a      	ldr	r2, [r3, #16]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cde:	b2d2      	uxtb	r2, r2
 8010ce0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce6:	1c5a      	adds	r2, r3, #1
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f7fe fead 	bl	800fa4c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	f003 0301 	and.w	r3, r3, #1
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d10e      	bne.n	8010d20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d109      	bne.n	8010d20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d104      	bne.n	8010d20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d007      	beq.n	8010d30 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	685a      	ldr	r2, [r3, #4]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010d2e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d36:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3c:	f003 0304 	and.w	r3, r3, #4
 8010d40:	2b04      	cmp	r3, #4
 8010d42:	d113      	bne.n	8010d6c <I2C_ITError+0x254>
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	2b28      	cmp	r3, #40	; 0x28
 8010d48:	d110      	bne.n	8010d6c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4a0a      	ldr	r2, [pc, #40]	; (8010d78 <I2C_ITError+0x260>)
 8010d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2200      	movs	r2, #0
 8010d54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2220      	movs	r2, #32
 8010d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2200      	movs	r2, #0
 8010d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7fe fe52 	bl	800fa10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010d6c:	bf00      	nop
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	0801153d 	.word	0x0801153d
 8010d78:	ffff0000 	.word	0xffff0000

08010d7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b088      	sub	sp, #32
 8010d80:	af02      	add	r7, sp, #8
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	607a      	str	r2, [r7, #4]
 8010d86:	603b      	str	r3, [r7, #0]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	2b08      	cmp	r3, #8
 8010d96:	d006      	beq.n	8010da6 <I2C_MasterRequestWrite+0x2a>
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d003      	beq.n	8010da6 <I2C_MasterRequestWrite+0x2a>
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010da4:	d108      	bne.n	8010db8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010db4:	601a      	str	r2, [r3, #0]
 8010db6:	e00b      	b.n	8010dd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dbc:	2b12      	cmp	r3, #18
 8010dbe:	d107      	bne.n	8010dd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f000 fc55 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d00d      	beq.n	8010e04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010df6:	d103      	bne.n	8010e00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010e00:	2303      	movs	r3, #3
 8010e02:	e035      	b.n	8010e70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	691b      	ldr	r3, [r3, #16]
 8010e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e0c:	d108      	bne.n	8010e20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010e0e:	897b      	ldrh	r3, [r7, #10]
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	461a      	mov	r2, r3
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010e1c:	611a      	str	r2, [r3, #16]
 8010e1e:	e01b      	b.n	8010e58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010e20:	897b      	ldrh	r3, [r7, #10]
 8010e22:	11db      	asrs	r3, r3, #7
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	f003 0306 	and.w	r3, r3, #6
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	f063 030f 	orn	r3, r3, #15
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	490e      	ldr	r1, [pc, #56]	; (8010e78 <I2C_MasterRequestWrite+0xfc>)
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f000 fc7b 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d001      	beq.n	8010e4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e010      	b.n	8010e70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010e4e:	897b      	ldrh	r3, [r7, #10]
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	4907      	ldr	r1, [pc, #28]	; (8010e7c <I2C_MasterRequestWrite+0x100>)
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	f000 fc6b 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e000      	b.n	8010e70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3718      	adds	r7, #24
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	00010008 	.word	0x00010008
 8010e7c:	00010002 	.word	0x00010002

08010e80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b088      	sub	sp, #32
 8010e84:	af02      	add	r7, sp, #8
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	607a      	str	r2, [r7, #4]
 8010e8a:	603b      	str	r3, [r7, #0]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	2b08      	cmp	r3, #8
 8010eaa:	d006      	beq.n	8010eba <I2C_MasterRequestRead+0x3a>
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d003      	beq.n	8010eba <I2C_MasterRequestRead+0x3a>
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010eb8:	d108      	bne.n	8010ecc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ec8:	601a      	str	r2, [r3, #0]
 8010eca:	e00b      	b.n	8010ee4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ed0:	2b11      	cmp	r3, #17
 8010ed2:	d107      	bne.n	8010ee4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2200      	movs	r2, #0
 8010eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010ef0:	68f8      	ldr	r0, [r7, #12]
 8010ef2:	f000 fbcb 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00d      	beq.n	8010f18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f0a:	d103      	bne.n	8010f14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010f14:	2303      	movs	r3, #3
 8010f16:	e079      	b.n	801100c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	691b      	ldr	r3, [r3, #16]
 8010f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f20:	d108      	bne.n	8010f34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010f22:	897b      	ldrh	r3, [r7, #10]
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	f043 0301 	orr.w	r3, r3, #1
 8010f2a:	b2da      	uxtb	r2, r3
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	611a      	str	r2, [r3, #16]
 8010f32:	e05f      	b.n	8010ff4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010f34:	897b      	ldrh	r3, [r7, #10]
 8010f36:	11db      	asrs	r3, r3, #7
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	f003 0306 	and.w	r3, r3, #6
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	f063 030f 	orn	r3, r3, #15
 8010f44:	b2da      	uxtb	r2, r3
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	4930      	ldr	r1, [pc, #192]	; (8011014 <I2C_MasterRequestRead+0x194>)
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f000 fbf1 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e054      	b.n	801100c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010f62:	897b      	ldrh	r3, [r7, #10]
 8010f64:	b2da      	uxtb	r2, r3
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	4929      	ldr	r1, [pc, #164]	; (8011018 <I2C_MasterRequestRead+0x198>)
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f000 fbe1 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d001      	beq.n	8010f82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e044      	b.n	801100c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010f82:	2300      	movs	r3, #0
 8010f84:	613b      	str	r3, [r7, #16]
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	695b      	ldr	r3, [r3, #20]
 8010f8c:	613b      	str	r3, [r7, #16]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	613b      	str	r3, [r7, #16]
 8010f96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010fa6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	9300      	str	r3, [sp, #0]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f000 fb69 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00d      	beq.n	8010fdc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fce:	d103      	bne.n	8010fd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8010fd8:	2303      	movs	r3, #3
 8010fda:	e017      	b.n	801100c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8010fdc:	897b      	ldrh	r3, [r7, #10]
 8010fde:	11db      	asrs	r3, r3, #7
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	f003 0306 	and.w	r3, r3, #6
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	f063 030e 	orn	r3, r3, #14
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	4907      	ldr	r1, [pc, #28]	; (8011018 <I2C_MasterRequestRead+0x198>)
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f000 fb9d 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8011006:	2301      	movs	r3, #1
 8011008:	e000      	b.n	801100c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801100a:	2300      	movs	r3, #0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3718      	adds	r7, #24
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	00010008 	.word	0x00010008
 8011018:	00010002 	.word	0x00010002

0801101c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b088      	sub	sp, #32
 8011020:	af02      	add	r7, sp, #8
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	4608      	mov	r0, r1
 8011026:	4611      	mov	r1, r2
 8011028:	461a      	mov	r2, r3
 801102a:	4603      	mov	r3, r0
 801102c:	817b      	strh	r3, [r7, #10]
 801102e:	460b      	mov	r3, r1
 8011030:	813b      	strh	r3, [r7, #8]
 8011032:	4613      	mov	r3, r2
 8011034:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8011046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	2200      	movs	r2, #0
 801104e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011052:	68f8      	ldr	r0, [r7, #12]
 8011054:	f000 fb1a 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00d      	beq.n	801107a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801106c:	d103      	bne.n	8011076 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8011076:	2303      	movs	r3, #3
 8011078:	e05f      	b.n	801113a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801107a:	897b      	ldrh	r3, [r7, #10]
 801107c:	b2db      	uxtb	r3, r3
 801107e:	461a      	mov	r2, r3
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108c:	6a3a      	ldr	r2, [r7, #32]
 801108e:	492d      	ldr	r1, [pc, #180]	; (8011144 <I2C_RequestMemoryWrite+0x128>)
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f000 fb52 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d001      	beq.n	80110a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801109c:	2301      	movs	r3, #1
 801109e:	e04c      	b.n	801113a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80110a0:	2300      	movs	r3, #0
 80110a2:	617b      	str	r3, [r7, #20]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	695b      	ldr	r3, [r3, #20]
 80110aa:	617b      	str	r3, [r7, #20]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	699b      	ldr	r3, [r3, #24]
 80110b2:	617b      	str	r3, [r7, #20]
 80110b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80110b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110b8:	6a39      	ldr	r1, [r7, #32]
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f000 fbbc 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d00d      	beq.n	80110e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ca:	2b04      	cmp	r3, #4
 80110cc:	d107      	bne.n	80110de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80110de:	2301      	movs	r3, #1
 80110e0:	e02b      	b.n	801113a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80110e2:	88fb      	ldrh	r3, [r7, #6]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d105      	bne.n	80110f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80110e8:	893b      	ldrh	r3, [r7, #8]
 80110ea:	b2da      	uxtb	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	611a      	str	r2, [r3, #16]
 80110f2:	e021      	b.n	8011138 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80110f4:	893b      	ldrh	r3, [r7, #8]
 80110f6:	0a1b      	lsrs	r3, r3, #8
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	b2da      	uxtb	r2, r3
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011104:	6a39      	ldr	r1, [r7, #32]
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 fb96 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00d      	beq.n	801112e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011116:	2b04      	cmp	r3, #4
 8011118:	d107      	bne.n	801112a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801112a:	2301      	movs	r3, #1
 801112c:	e005      	b.n	801113a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801112e:	893b      	ldrh	r3, [r7, #8]
 8011130:	b2da      	uxtb	r2, r3
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3718      	adds	r7, #24
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	00010002 	.word	0x00010002

08011148 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b088      	sub	sp, #32
 801114c:	af02      	add	r7, sp, #8
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	4608      	mov	r0, r1
 8011152:	4611      	mov	r1, r2
 8011154:	461a      	mov	r2, r3
 8011156:	4603      	mov	r3, r0
 8011158:	817b      	strh	r3, [r7, #10]
 801115a:	460b      	mov	r3, r1
 801115c:	813b      	strh	r3, [r7, #8]
 801115e:	4613      	mov	r3, r2
 8011160:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011170:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	681a      	ldr	r2, [r3, #0]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011180:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8011182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	6a3b      	ldr	r3, [r7, #32]
 8011188:	2200      	movs	r2, #0
 801118a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f000 fa7c 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00d      	beq.n	80111b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111a8:	d103      	bne.n	80111b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80111b2:	2303      	movs	r3, #3
 80111b4:	e0aa      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80111b6:	897b      	ldrh	r3, [r7, #10]
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	461a      	mov	r2, r3
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80111c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80111c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c8:	6a3a      	ldr	r2, [r7, #32]
 80111ca:	4952      	ldr	r1, [pc, #328]	; (8011314 <I2C_RequestMemoryRead+0x1cc>)
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f000 fab4 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80111d2:	4603      	mov	r3, r0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d001      	beq.n	80111dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80111d8:	2301      	movs	r3, #1
 80111da:	e097      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80111dc:	2300      	movs	r3, #0
 80111de:	617b      	str	r3, [r7, #20]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	695b      	ldr	r3, [r3, #20]
 80111e6:	617b      	str	r3, [r7, #20]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	699b      	ldr	r3, [r3, #24]
 80111ee:	617b      	str	r3, [r7, #20]
 80111f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80111f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111f4:	6a39      	ldr	r1, [r7, #32]
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 fb1e 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00d      	beq.n	801121e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011206:	2b04      	cmp	r3, #4
 8011208:	d107      	bne.n	801121a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011218:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	e076      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801121e:	88fb      	ldrh	r3, [r7, #6]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d105      	bne.n	8011230 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8011224:	893b      	ldrh	r3, [r7, #8]
 8011226:	b2da      	uxtb	r2, r3
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	611a      	str	r2, [r3, #16]
 801122e:	e021      	b.n	8011274 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8011230:	893b      	ldrh	r3, [r7, #8]
 8011232:	0a1b      	lsrs	r3, r3, #8
 8011234:	b29b      	uxth	r3, r3
 8011236:	b2da      	uxtb	r2, r3
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801123e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011240:	6a39      	ldr	r1, [r7, #32]
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f000 faf8 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d00d      	beq.n	801126a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011252:	2b04      	cmp	r3, #4
 8011254:	d107      	bne.n	8011266 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011264:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	e050      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801126a:	893b      	ldrh	r3, [r7, #8]
 801126c:	b2da      	uxtb	r2, r3
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011276:	6a39      	ldr	r1, [r7, #32]
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f000 fadd 	bl	8011838 <I2C_WaitOnTXEFlagUntilTimeout>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00d      	beq.n	80112a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011288:	2b04      	cmp	r3, #4
 801128a:	d107      	bne.n	801129c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801129a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801129c:	2301      	movs	r3, #1
 801129e:	e035      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	681a      	ldr	r2, [r3, #0]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80112ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80112b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b2:	9300      	str	r3, [sp, #0]
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f000 f9e5 	bl	801168c <I2C_WaitOnFlagUntilTimeout>
 80112c2:	4603      	mov	r3, r0
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00d      	beq.n	80112e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80112d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112d6:	d103      	bne.n	80112e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80112e0:	2303      	movs	r3, #3
 80112e2:	e013      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80112e4:	897b      	ldrh	r3, [r7, #10]
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	f043 0301 	orr.w	r3, r3, #1
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80112f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f6:	6a3a      	ldr	r2, [r7, #32]
 80112f8:	4906      	ldr	r1, [pc, #24]	; (8011314 <I2C_RequestMemoryRead+0x1cc>)
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f000 fa1d 	bl	801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8011306:	2301      	movs	r3, #1
 8011308:	e000      	b.n	801130c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3718      	adds	r7, #24
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	00010002 	.word	0x00010002

08011318 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011324:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801132c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011334:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	685a      	ldr	r2, [r3, #4]
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801134a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011350:	2b00      	cmp	r3, #0
 8011352:	d003      	beq.n	801135c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011358:	2200      	movs	r2, #0
 801135a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011360:	2b00      	cmp	r3, #0
 8011362:	d003      	beq.n	801136c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011368:	2200      	movs	r2, #0
 801136a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801136c:	7cfb      	ldrb	r3, [r7, #19]
 801136e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8011372:	2b21      	cmp	r3, #33	; 0x21
 8011374:	d007      	beq.n	8011386 <I2C_DMAXferCplt+0x6e>
 8011376:	7cfb      	ldrb	r3, [r7, #19]
 8011378:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801137c:	2b22      	cmp	r3, #34	; 0x22
 801137e:	d131      	bne.n	80113e4 <I2C_DMAXferCplt+0xcc>
 8011380:	7cbb      	ldrb	r3, [r7, #18]
 8011382:	2b20      	cmp	r3, #32
 8011384:	d12e      	bne.n	80113e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011394:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	2200      	movs	r2, #0
 801139a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801139c:	7cfb      	ldrb	r3, [r7, #19]
 801139e:	2b29      	cmp	r3, #41	; 0x29
 80113a0:	d10a      	bne.n	80113b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	2221      	movs	r2, #33	; 0x21
 80113a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	2228      	movs	r2, #40	; 0x28
 80113ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80113b0:	6978      	ldr	r0, [r7, #20]
 80113b2:	f7fe fb0b 	bl	800f9cc <HAL_I2C_SlaveTxCpltCallback>
 80113b6:	e00c      	b.n	80113d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80113b8:	7cfb      	ldrb	r3, [r7, #19]
 80113ba:	2b2a      	cmp	r3, #42	; 0x2a
 80113bc:	d109      	bne.n	80113d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	2222      	movs	r2, #34	; 0x22
 80113c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2228      	movs	r2, #40	; 0x28
 80113c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80113cc:	6978      	ldr	r0, [r7, #20]
 80113ce:	f7fe fb07 	bl	800f9e0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	685a      	ldr	r2, [r3, #4]
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80113e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80113e2:	e06a      	b.n	80114ba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d064      	beq.n	80114ba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d107      	bne.n	801140a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011408:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	685a      	ldr	r2, [r3, #4]
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011418:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011420:	d009      	beq.n	8011436 <I2C_DMAXferCplt+0x11e>
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2b08      	cmp	r3, #8
 8011426:	d006      	beq.n	8011436 <I2C_DMAXferCplt+0x11e>
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801142e:	d002      	beq.n	8011436 <I2C_DMAXferCplt+0x11e>
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2b20      	cmp	r3, #32
 8011434:	d107      	bne.n	8011446 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011444:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	685a      	ldr	r2, [r3, #4]
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011454:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011464:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	2200      	movs	r2, #0
 801146a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011470:	2b00      	cmp	r3, #0
 8011472:	d003      	beq.n	801147c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8011474:	6978      	ldr	r0, [r7, #20]
 8011476:	f7fe fae9 	bl	800fa4c <HAL_I2C_ErrorCallback>
}
 801147a:	e01e      	b.n	80114ba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	2220      	movs	r2, #32
 8011480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801148a:	b2db      	uxtb	r3, r3
 801148c:	2b40      	cmp	r3, #64	; 0x40
 801148e:	d10a      	bne.n	80114a6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2200      	movs	r2, #0
 8011494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2200      	movs	r2, #0
 801149c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801149e:	6978      	ldr	r0, [r7, #20]
 80114a0:	f7fe faca 	bl	800fa38 <HAL_I2C_MemRxCpltCallback>
}
 80114a4:	e009      	b.n	80114ba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2200      	movs	r2, #0
 80114aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2212      	movs	r2, #18
 80114b2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80114b4:	6978      	ldr	r0, [r7, #20]
 80114b6:	f7fe fa7f 	bl	800f9b8 <HAL_I2C_MasterRxCpltCallback>
}
 80114ba:	bf00      	nop
 80114bc:	3718      	adds	r7, #24
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b084      	sub	sp, #16
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d003      	beq.n	80114e0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114dc:	2200      	movs	r2, #0
 80114de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d003      	beq.n	80114f0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ec:	2200      	movs	r2, #0
 80114ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7f7 fb94 	bl	8008c1e <HAL_DMA_GetError>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b02      	cmp	r3, #2
 80114fa:	d01b      	beq.n	8011534 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801150a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2200      	movs	r2, #0
 8011510:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2220      	movs	r2, #32
 8011516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2200      	movs	r2, #0
 801151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011526:	f043 0210 	orr.w	r2, r3, #16
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7fe fa8c 	bl	800fa4c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011534:	bf00      	nop
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011544:	2300      	movs	r3, #0
 8011546:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801154c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011554:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8011556:	4b4b      	ldr	r3, [pc, #300]	; (8011684 <I2C_DMAAbort+0x148>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	08db      	lsrs	r3, r3, #3
 801155c:	4a4a      	ldr	r2, [pc, #296]	; (8011688 <I2C_DMAAbort+0x14c>)
 801155e:	fba2 2303 	umull	r2, r3, r2, r3
 8011562:	0a1a      	lsrs	r2, r3, #8
 8011564:	4613      	mov	r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	4413      	add	r3, r2
 801156a:	00da      	lsls	r2, r3, #3
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d106      	bne.n	8011584 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801157a:	f043 0220 	orr.w	r2, r3, #32
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8011582:	e00a      	b.n	801159a <I2C_DMAAbort+0x5e>
    }
    count--;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	3b01      	subs	r3, #1
 8011588:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011598:	d0ea      	beq.n	8011570 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d003      	beq.n	80115aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a6:	2200      	movs	r2, #0
 80115a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d003      	beq.n	80115ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b6:	2200      	movs	r2, #0
 80115b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80115c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	2200      	movs	r2, #0
 80115ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115dc:	2200      	movs	r2, #0
 80115de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d003      	beq.n	80115f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ec:	2200      	movs	r2, #0
 80115ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f022 0201 	bic.w	r2, r2, #1
 80115fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011606:	b2db      	uxtb	r3, r3
 8011608:	2b60      	cmp	r3, #96	; 0x60
 801160a:	d10e      	bne.n	801162a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	2220      	movs	r2, #32
 8011610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	2200      	movs	r2, #0
 8011618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	2200      	movs	r2, #0
 8011620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011622:	6978      	ldr	r0, [r7, #20]
 8011624:	f7fe fa1c 	bl	800fa60 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011628:	e027      	b.n	801167a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801162a:	7cfb      	ldrb	r3, [r7, #19]
 801162c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011630:	2b28      	cmp	r3, #40	; 0x28
 8011632:	d117      	bne.n	8011664 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f042 0201 	orr.w	r2, r2, #1
 8011642:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011652:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	2200      	movs	r2, #0
 8011658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	2228      	movs	r2, #40	; 0x28
 801165e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011662:	e007      	b.n	8011674 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	2220      	movs	r2, #32
 8011668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	2200      	movs	r2, #0
 8011670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8011674:	6978      	ldr	r0, [r7, #20]
 8011676:	f7fe f9e9 	bl	800fa4c <HAL_I2C_ErrorCallback>
}
 801167a:	bf00      	nop
 801167c:	3718      	adds	r7, #24
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	20000058 	.word	0x20000058
 8011688:	14f8b589 	.word	0x14f8b589

0801168c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	603b      	str	r3, [r7, #0]
 8011698:	4613      	mov	r3, r2
 801169a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801169c:	e025      	b.n	80116ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a4:	d021      	beq.n	80116ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116a6:	f7f5 fc35 	bl	8006f14 <HAL_GetTick>
 80116aa:	4602      	mov	r2, r0
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d302      	bcc.n	80116bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d116      	bne.n	80116ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2220      	movs	r2, #32
 80116c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d6:	f043 0220 	orr.w	r2, r3, #32
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80116e6:	2301      	movs	r3, #1
 80116e8:	e023      	b.n	8011732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	0c1b      	lsrs	r3, r3, #16
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d10d      	bne.n	8011710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	695b      	ldr	r3, [r3, #20]
 80116fa:	43da      	mvns	r2, r3
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	4013      	ands	r3, r2
 8011700:	b29b      	uxth	r3, r3
 8011702:	2b00      	cmp	r3, #0
 8011704:	bf0c      	ite	eq
 8011706:	2301      	moveq	r3, #1
 8011708:	2300      	movne	r3, #0
 801170a:	b2db      	uxtb	r3, r3
 801170c:	461a      	mov	r2, r3
 801170e:	e00c      	b.n	801172a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	699b      	ldr	r3, [r3, #24]
 8011716:	43da      	mvns	r2, r3
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	4013      	ands	r3, r2
 801171c:	b29b      	uxth	r3, r3
 801171e:	2b00      	cmp	r3, #0
 8011720:	bf0c      	ite	eq
 8011722:	2301      	moveq	r3, #1
 8011724:	2300      	movne	r3, #0
 8011726:	b2db      	uxtb	r3, r3
 8011728:	461a      	mov	r2, r3
 801172a:	79fb      	ldrb	r3, [r7, #7]
 801172c:	429a      	cmp	r2, r3
 801172e:	d0b6      	beq.n	801169e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}

0801173a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801173a:	b580      	push	{r7, lr}
 801173c:	b084      	sub	sp, #16
 801173e:	af00      	add	r7, sp, #0
 8011740:	60f8      	str	r0, [r7, #12]
 8011742:	60b9      	str	r1, [r7, #8]
 8011744:	607a      	str	r2, [r7, #4]
 8011746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011748:	e051      	b.n	80117ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	695b      	ldr	r3, [r3, #20]
 8011750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011758:	d123      	bne.n	80117a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2220      	movs	r2, #32
 801177e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801178e:	f043 0204 	orr.w	r2, r3, #4
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	e046      	b.n	8011830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a8:	d021      	beq.n	80117ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117aa:	f7f5 fbb3 	bl	8006f14 <HAL_GetTick>
 80117ae:	4602      	mov	r2, r0
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	687a      	ldr	r2, [r7, #4]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d302      	bcc.n	80117c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d116      	bne.n	80117ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2200      	movs	r2, #0
 80117c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2220      	movs	r2, #32
 80117ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2200      	movs	r2, #0
 80117d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117da:	f043 0220 	orr.w	r2, r3, #32
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80117ea:	2301      	movs	r3, #1
 80117ec:	e020      	b.n	8011830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	0c1b      	lsrs	r3, r3, #16
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d10c      	bne.n	8011812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	695b      	ldr	r3, [r3, #20]
 80117fe:	43da      	mvns	r2, r3
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	4013      	ands	r3, r2
 8011804:	b29b      	uxth	r3, r3
 8011806:	2b00      	cmp	r3, #0
 8011808:	bf14      	ite	ne
 801180a:	2301      	movne	r3, #1
 801180c:	2300      	moveq	r3, #0
 801180e:	b2db      	uxtb	r3, r3
 8011810:	e00b      	b.n	801182a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	699b      	ldr	r3, [r3, #24]
 8011818:	43da      	mvns	r2, r3
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	4013      	ands	r3, r2
 801181e:	b29b      	uxth	r3, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	bf14      	ite	ne
 8011824:	2301      	movne	r3, #1
 8011826:	2300      	moveq	r3, #0
 8011828:	b2db      	uxtb	r3, r3
 801182a:	2b00      	cmp	r3, #0
 801182c:	d18d      	bne.n	801174a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3710      	adds	r7, #16
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011844:	e02d      	b.n	80118a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f000 f93e 	bl	8011ac8 <I2C_IsAcknowledgeFailed>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d001      	beq.n	8011856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011852:	2301      	movs	r3, #1
 8011854:	e02d      	b.n	80118b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801185c:	d021      	beq.n	80118a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801185e:	f7f5 fb59 	bl	8006f14 <HAL_GetTick>
 8011862:	4602      	mov	r2, r0
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	429a      	cmp	r2, r3
 801186c:	d302      	bcc.n	8011874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d116      	bne.n	80118a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2200      	movs	r2, #0
 8011878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2220      	movs	r2, #32
 801187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2200      	movs	r2, #0
 8011886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188e:	f043 0220 	orr.w	r2, r3, #32
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2200      	movs	r2, #0
 801189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801189e:	2301      	movs	r3, #1
 80118a0:	e007      	b.n	80118b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	695b      	ldr	r3, [r3, #20]
 80118a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118ac:	2b80      	cmp	r3, #128	; 0x80
 80118ae:	d1ca      	bne.n	8011846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b084      	sub	sp, #16
 80118be:	af00      	add	r7, sp, #0
 80118c0:	60f8      	str	r0, [r7, #12]
 80118c2:	60b9      	str	r1, [r7, #8]
 80118c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80118c6:	e02d      	b.n	8011924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f000 f8fd 	bl	8011ac8 <I2C_IsAcknowledgeFailed>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d001      	beq.n	80118d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80118d4:	2301      	movs	r3, #1
 80118d6:	e02d      	b.n	8011934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118de:	d021      	beq.n	8011924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118e0:	f7f5 fb18 	bl	8006f14 <HAL_GetTick>
 80118e4:	4602      	mov	r2, r0
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	68ba      	ldr	r2, [r7, #8]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d302      	bcc.n	80118f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d116      	bne.n	8011924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2220      	movs	r2, #32
 8011900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2200      	movs	r2, #0
 8011908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011910:	f043 0220 	orr.w	r2, r3, #32
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2200      	movs	r2, #0
 801191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011920:	2301      	movs	r3, #1
 8011922:	e007      	b.n	8011934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	695b      	ldr	r3, [r3, #20]
 801192a:	f003 0304 	and.w	r3, r3, #4
 801192e:	2b04      	cmp	r3, #4
 8011930:	d1ca      	bne.n	80118c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3710      	adds	r7, #16
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011948:	e029      	b.n	801199e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	f000 f8bc 	bl	8011ac8 <I2C_IsAcknowledgeFailed>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d001      	beq.n	801195a <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011956:	2301      	movs	r3, #1
 8011958:	e029      	b.n	80119ae <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801195a:	f7f5 fadb 	bl	8006f14 <HAL_GetTick>
 801195e:	4602      	mov	r2, r0
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	68ba      	ldr	r2, [r7, #8]
 8011966:	429a      	cmp	r2, r3
 8011968:	d302      	bcc.n	8011970 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d116      	bne.n	801199e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2200      	movs	r2, #0
 8011974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2220      	movs	r2, #32
 801197a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2200      	movs	r2, #0
 8011982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198a:	f043 0220 	orr.w	r2, r3, #32
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2200      	movs	r2, #0
 8011996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801199a:	2301      	movs	r3, #1
 801199c:	e007      	b.n	80119ae <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	f003 0310 	and.w	r3, r3, #16
 80119a8:	2b10      	cmp	r3, #16
 80119aa:	d1ce      	bne.n	801194a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80119b6:	b480      	push	{r7}
 80119b8:	b085      	sub	sp, #20
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80119be:	2300      	movs	r3, #0
 80119c0:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80119c2:	4b14      	ldr	r3, [pc, #80]	; (8011a14 <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	08db      	lsrs	r3, r3, #3
 80119c8:	4a13      	ldr	r2, [pc, #76]	; (8011a18 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 80119ca:	fba2 2303 	umull	r2, r3, r2, r3
 80119ce:	0a1a      	lsrs	r2, r3, #8
 80119d0:	4613      	mov	r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	4413      	add	r3, r2
 80119d6:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	3b01      	subs	r3, #1
 80119dc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d107      	bne.n	80119f4 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e8:	f043 0220 	orr.w	r2, r3, #32
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80119f0:	2301      	movs	r3, #1
 80119f2:	e008      	b.n	8011a06 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80119fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a02:	d0e9      	beq.n	80119d8 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3714      	adds	r7, #20
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a10:	4770      	bx	lr
 8011a12:	bf00      	nop
 8011a14:	20000058 	.word	0x20000058
 8011a18:	14f8b589 	.word	0x14f8b589

08011a1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011a28:	e042      	b.n	8011ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	695b      	ldr	r3, [r3, #20]
 8011a30:	f003 0310 	and.w	r3, r3, #16
 8011a34:	2b10      	cmp	r3, #16
 8011a36:	d119      	bne.n	8011a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f06f 0210 	mvn.w	r2, #16
 8011a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2200      	movs	r2, #0
 8011a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2220      	movs	r2, #32
 8011a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2200      	movs	r2, #0
 8011a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e029      	b.n	8011ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a6c:	f7f5 fa52 	bl	8006f14 <HAL_GetTick>
 8011a70:	4602      	mov	r2, r0
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d302      	bcc.n	8011a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d116      	bne.n	8011ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2200      	movs	r2, #0
 8011a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2220      	movs	r2, #32
 8011a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a9c:	f043 0220 	orr.w	r2, r3, #32
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011aac:	2301      	movs	r3, #1
 8011aae:	e007      	b.n	8011ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	695b      	ldr	r3, [r3, #20]
 8011ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aba:	2b40      	cmp	r3, #64	; 0x40
 8011abc:	d1b5      	bne.n	8011a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011abe:	2300      	movs	r3, #0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b083      	sub	sp, #12
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	695b      	ldr	r3, [r3, #20]
 8011ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ade:	d11b      	bne.n	8011b18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011ae8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2220      	movs	r2, #32
 8011af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b04:	f043 0204 	orr.w	r2, r3, #4
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011b14:	2301      	movs	r3, #1
 8011b16:	e000      	b.n	8011b1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011b18:	2300      	movs	r3, #0
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8011b36:	d103      	bne.n	8011b40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8011b3e:	e007      	b.n	8011b50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011b48:	d102      	bne.n	8011b50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2208      	movs	r2, #8
 8011b4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011b50:	bf00      	nop
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr

08011b5c <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8011b60:	4b08      	ldr	r3, [pc, #32]	; (8011b84 <HAL_PWR_DeInit+0x28>)
 8011b62:	6a1b      	ldr	r3, [r3, #32]
 8011b64:	4a07      	ldr	r2, [pc, #28]	; (8011b84 <HAL_PWR_DeInit+0x28>)
 8011b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b6a:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8011b6c:	4b05      	ldr	r3, [pc, #20]	; (8011b84 <HAL_PWR_DeInit+0x28>)
 8011b6e:	6a1b      	ldr	r3, [r3, #32]
 8011b70:	4a04      	ldr	r2, [pc, #16]	; (8011b84 <HAL_PWR_DeInit+0x28>)
 8011b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b76:	6213      	str	r3, [r2, #32]
}
 8011b78:	bf00      	nop
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop
 8011b84:	40023800 	.word	0x40023800

08011b88 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8011b8e:	4b06      	ldr	r3, [pc, #24]	; (8011ba8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8011b90:	2201      	movs	r2, #1
 8011b92:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011b94:	4b05      	ldr	r3, [pc, #20]	; (8011bac <HAL_PWR_EnableBkUpAccess+0x24>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8011b9a:	687b      	ldr	r3, [r7, #4]
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	420e0020 	.word	0x420e0020
 8011bac:	40007000 	.word	0x40007000

08011bb0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8011bb6:	4b06      	ldr	r3, [pc, #24]	; (8011bd0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011bbc:	4b05      	ldr	r3, [pc, #20]	; (8011bd4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8011bc2:	687b      	ldr	r3, [r7, #4]
}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr
 8011bd0:	420e0020 	.word	0x420e0020
 8011bd4:	40007000 	.word	0x40007000

08011bd8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8011be0:	4b2b      	ldr	r3, [pc, #172]	; (8011c90 <HAL_PWR_ConfigPVD+0xb8>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4928      	ldr	r1, [pc, #160]	; (8011c90 <HAL_PWR_ConfigPVD+0xb8>)
 8011bee:	4313      	orrs	r3, r2
 8011bf0:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8011bf2:	4b28      	ldr	r3, [pc, #160]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	4a27      	ldr	r2, [pc, #156]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011bfc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8011bfe:	4b25      	ldr	r3, [pc, #148]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a24      	ldr	r2, [pc, #144]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c08:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011c0a:	4b22      	ldr	r3, [pc, #136]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	4a21      	ldr	r2, [pc, #132]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c14:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8011c16:	4b1f      	ldr	r3, [pc, #124]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	4a1e      	ldr	r2, [pc, #120]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c20:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d005      	beq.n	8011c3a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8011c2e:	4b19      	ldr	r3, [pc, #100]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4a18      	ldr	r2, [pc, #96]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c38:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d005      	beq.n	8011c52 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8011c46:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	4a12      	ldr	r2, [pc, #72]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c50:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	f003 0301 	and.w	r3, r3, #1
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d005      	beq.n	8011c6a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8011c5e:	4b0d      	ldr	r3, [pc, #52]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	4a0c      	ldr	r2, [pc, #48]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c68:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	f003 0302 	and.w	r3, r3, #2
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d005      	beq.n	8011c82 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8011c76:	4b07      	ldr	r3, [pc, #28]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	4a06      	ldr	r2, [pc, #24]	; (8011c94 <HAL_PWR_ConfigPVD+0xbc>)
 8011c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c80:	60d3      	str	r3, [r2, #12]
  }
}
 8011c82:	bf00      	nop
 8011c84:	370c      	adds	r7, #12
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop
 8011c90:	40007000 	.word	0x40007000
 8011c94:	40013c00 	.word	0x40013c00

08011c98 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8011c98:	b480      	push	{r7}
 8011c9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8011c9c:	4b03      	ldr	r3, [pc, #12]	; (8011cac <HAL_PWR_EnablePVD+0x14>)
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	601a      	str	r2, [r3, #0]
}
 8011ca2:	bf00      	nop
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr
 8011cac:	420e0010 	.word	0x420e0010

08011cb0 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8011cb4:	4b03      	ldr	r3, [pc, #12]	; (8011cc4 <HAL_PWR_DisablePVD+0x14>)
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	601a      	str	r2, [r3, #0]
}
 8011cba:	bf00      	nop
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr
 8011cc4:	420e0010 	.word	0x420e0010

08011cc8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8011cd0:	4b05      	ldr	r3, [pc, #20]	; (8011ce8 <HAL_PWR_EnableWakeUpPin+0x20>)
 8011cd2:	685a      	ldr	r2, [r3, #4]
 8011cd4:	4904      	ldr	r1, [pc, #16]	; (8011ce8 <HAL_PWR_EnableWakeUpPin+0x20>)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	604b      	str	r3, [r1, #4]
}
 8011cdc:	bf00      	nop
 8011cde:	370c      	adds	r7, #12
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr
 8011ce8:	40007000 	.word	0x40007000

08011cec <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8011cf4:	4b06      	ldr	r3, [pc, #24]	; (8011d10 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011cf6:	685a      	ldr	r2, [r3, #4]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	43db      	mvns	r3, r3
 8011cfc:	4904      	ldr	r1, [pc, #16]	; (8011d10 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011cfe:	4013      	ands	r3, r2
 8011d00:	604b      	str	r3, [r1, #4]
}
 8011d02:	bf00      	nop
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop
 8011d10:	40007000 	.word	0x40007000

08011d14 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011d20:	4b09      	ldr	r3, [pc, #36]	; (8011d48 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	4a08      	ldr	r2, [pc, #32]	; (8011d48 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011d26:	f023 0304 	bic.w	r3, r3, #4
 8011d2a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011d2c:	78fb      	ldrb	r3, [r7, #3]
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d101      	bne.n	8011d36 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011d32:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8011d34:	e002      	b.n	8011d3c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8011d36:	bf40      	sev
    __WFE();
 8011d38:	bf20      	wfe
    __WFE();
 8011d3a:	bf20      	wfe
}
 8011d3c:	bf00      	nop
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr
 8011d48:	e000ed00 	.word	0xe000ed00

08011d4c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	460b      	mov	r3, r1
 8011d56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011d58:	4b10      	ldr	r3, [pc, #64]	; (8011d9c <HAL_PWR_EnterSTOPMode+0x50>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f023 0203 	bic.w	r2, r3, #3
 8011d60:	490e      	ldr	r1, [pc, #56]	; (8011d9c <HAL_PWR_EnterSTOPMode+0x50>)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	4313      	orrs	r3, r2
 8011d66:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011d68:	4b0d      	ldr	r3, [pc, #52]	; (8011da0 <HAL_PWR_EnterSTOPMode+0x54>)
 8011d6a:	691b      	ldr	r3, [r3, #16]
 8011d6c:	4a0c      	ldr	r2, [pc, #48]	; (8011da0 <HAL_PWR_EnterSTOPMode+0x54>)
 8011d6e:	f043 0304 	orr.w	r3, r3, #4
 8011d72:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8011d74:	78fb      	ldrb	r3, [r7, #3]
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011d7a:	bf30      	wfi
 8011d7c:	e002      	b.n	8011d84 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8011d7e:	bf40      	sev
    __WFE();
 8011d80:	bf20      	wfe
    __WFE();
 8011d82:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8011d84:	4b06      	ldr	r3, [pc, #24]	; (8011da0 <HAL_PWR_EnterSTOPMode+0x54>)
 8011d86:	691b      	ldr	r3, [r3, #16]
 8011d88:	4a05      	ldr	r2, [pc, #20]	; (8011da0 <HAL_PWR_EnterSTOPMode+0x54>)
 8011d8a:	f023 0304 	bic.w	r3, r3, #4
 8011d8e:	6113      	str	r3, [r2, #16]
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr
 8011d9c:	40007000 	.word	0x40007000
 8011da0:	e000ed00 	.word	0xe000ed00

08011da4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8011da4:	b480      	push	{r7}
 8011da6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8011da8:	4b08      	ldr	r3, [pc, #32]	; (8011dcc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4a07      	ldr	r2, [pc, #28]	; (8011dcc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011dae:	f043 0302 	orr.w	r3, r3, #2
 8011db2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011db4:	4b06      	ldr	r3, [pc, #24]	; (8011dd0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011db6:	691b      	ldr	r3, [r3, #16]
 8011db8:	4a05      	ldr	r2, [pc, #20]	; (8011dd0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011dba:	f043 0304 	orr.w	r3, r3, #4
 8011dbe:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8011dc0:	bf30      	wfi
}
 8011dc2:	bf00      	nop
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	40007000 	.word	0x40007000
 8011dd0:	e000ed00 	.word	0xe000ed00

08011dd4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8011dd8:	4b06      	ldr	r3, [pc, #24]	; (8011df4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8011dda:	695b      	ldr	r3, [r3, #20]
 8011ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d005      	beq.n	8011df0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8011de4:	f000 f808 	bl	8011df8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011de8:	4b02      	ldr	r3, [pc, #8]	; (8011df4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8011dea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011dee:	615a      	str	r2, [r3, #20]
  }
}
 8011df0:	bf00      	nop
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	40013c00 	.word	0x40013c00

08011df8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011dfc:	bf00      	nop
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr

08011e06 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8011e06:	b480      	push	{r7}
 8011e08:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011e0a:	4b05      	ldr	r3, [pc, #20]	; (8011e20 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011e0c:	691b      	ldr	r3, [r3, #16]
 8011e0e:	4a04      	ldr	r2, [pc, #16]	; (8011e20 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011e10:	f043 0302 	orr.w	r3, r3, #2
 8011e14:	6113      	str	r3, [r2, #16]
}
 8011e16:	bf00      	nop
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr
 8011e20:	e000ed00 	.word	0xe000ed00

08011e24 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8011e24:	b480      	push	{r7}
 8011e26:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011e28:	4b05      	ldr	r3, [pc, #20]	; (8011e40 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011e2a:	691b      	ldr	r3, [r3, #16]
 8011e2c:	4a04      	ldr	r2, [pc, #16]	; (8011e40 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011e2e:	f023 0302 	bic.w	r3, r3, #2
 8011e32:	6113      	str	r3, [r2, #16]
}
 8011e34:	bf00      	nop
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop
 8011e40:	e000ed00 	.word	0xe000ed00

08011e44 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8011e44:	b480      	push	{r7}
 8011e46:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011e48:	4b05      	ldr	r3, [pc, #20]	; (8011e60 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011e4a:	691b      	ldr	r3, [r3, #16]
 8011e4c:	4a04      	ldr	r2, [pc, #16]	; (8011e60 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011e4e:	f043 0310 	orr.w	r3, r3, #16
 8011e52:	6113      	str	r3, [r2, #16]
}
 8011e54:	bf00      	nop
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	e000ed00 	.word	0xe000ed00

08011e64 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8011e64:	b480      	push	{r7}
 8011e66:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011e68:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011e6a:	691b      	ldr	r3, [r3, #16]
 8011e6c:	4a04      	ldr	r2, [pc, #16]	; (8011e80 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011e6e:	f023 0310 	bic.w	r3, r3, #16
 8011e72:	6113      	str	r3, [r2, #16]
}
 8011e74:	bf00      	nop
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	e000ed00 	.word	0xe000ed00

08011e84 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8011e8e:	4b0e      	ldr	r3, [pc, #56]	; (8011ec8 <HAL_PWREx_EnableBkUpReg+0x44>)
 8011e90:	2201      	movs	r2, #1
 8011e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011e94:	f7f5 f83e 	bl	8006f14 <HAL_GetTick>
 8011e98:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011e9a:	e009      	b.n	8011eb0 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011e9c:	f7f5 f83a 	bl	8006f14 <HAL_GetTick>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	1ad3      	subs	r3, r2, r3
 8011ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011eaa:	d901      	bls.n	8011eb0 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011eac:	2303      	movs	r3, #3
 8011eae:	e006      	b.n	8011ebe <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011eb0:	4b06      	ldr	r3, [pc, #24]	; (8011ecc <HAL_PWREx_EnableBkUpReg+0x48>)
 8011eb2:	685b      	ldr	r3, [r3, #4]
 8011eb4:	f003 0308 	and.w	r3, r3, #8
 8011eb8:	2b08      	cmp	r3, #8
 8011eba:	d1ef      	bne.n	8011e9c <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011ebc:	2300      	movs	r3, #0
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3708      	adds	r7, #8
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	420e00a4 	.word	0x420e00a4
 8011ecc:	40007000 	.word	0x40007000

08011ed0 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8011eda:	4b0e      	ldr	r3, [pc, #56]	; (8011f14 <HAL_PWREx_DisableBkUpReg+0x44>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011ee0:	f7f5 f818 	bl	8006f14 <HAL_GetTick>
 8011ee4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011ee6:	e009      	b.n	8011efc <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011ee8:	f7f5 f814 	bl	8006f14 <HAL_GetTick>
 8011eec:	4602      	mov	r2, r0
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ef6:	d901      	bls.n	8011efc <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011ef8:	2303      	movs	r3, #3
 8011efa:	e006      	b.n	8011f0a <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011efc:	4b06      	ldr	r3, [pc, #24]	; (8011f18 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	f003 0308 	and.w	r3, r3, #8
 8011f04:	2b08      	cmp	r3, #8
 8011f06:	d0ef      	beq.n	8011ee8 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011f08:	2300      	movs	r3, #0
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	420e00a4 	.word	0x420e00a4
 8011f18:	40007000 	.word	0x40007000

08011f1c <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011f20:	4b03      	ldr	r3, [pc, #12]	; (8011f30 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8011f22:	2201      	movs	r2, #1
 8011f24:	601a      	str	r2, [r3, #0]
}
 8011f26:	bf00      	nop
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr
 8011f30:	420e0024 	.word	0x420e0024

08011f34 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8011f34:	b480      	push	{r7}
 8011f36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011f38:	4b03      	ldr	r3, [pc, #12]	; (8011f48 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	601a      	str	r2, [r3, #0]
}
 8011f3e:	bf00      	nop
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	420e0024 	.word	0x420e0024

08011f4c <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011f50:	4b04      	ldr	r3, [pc, #16]	; (8011f64 <HAL_PWREx_GetVoltageRange+0x18>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	40007000 	.word	0x40007000

08011f68 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b086      	sub	sp, #24
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011f70:	2300      	movs	r3, #0
 8011f72:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011f74:	2300      	movs	r3, #0
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	4b1a      	ldr	r3, [pc, #104]	; (8011fe4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f7c:	4a19      	ldr	r2, [pc, #100]	; (8011fe4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f82:	6413      	str	r3, [r2, #64]	; 0x40
 8011f84:	4b17      	ldr	r3, [pc, #92]	; (8011fe4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f8c:	60fb      	str	r3, [r7, #12]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8011f90:	2300      	movs	r3, #0
 8011f92:	613b      	str	r3, [r7, #16]
 8011f94:	4b14      	ldr	r3, [pc, #80]	; (8011fe8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011f9c:	4912      	ldr	r1, [pc, #72]	; (8011fe8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	600b      	str	r3, [r1, #0]
 8011fa4:	4b10      	ldr	r3, [pc, #64]	; (8011fe8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fac:	613b      	str	r3, [r7, #16]
 8011fae:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011fb0:	f7f4 ffb0 	bl	8006f14 <HAL_GetTick>
 8011fb4:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8011fb6:	e009      	b.n	8011fcc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8011fb8:	f7f4 ffac 	bl	8006f14 <HAL_GetTick>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011fc6:	d901      	bls.n	8011fcc <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 8011fc8:	2303      	movs	r3, #3
 8011fca:	e007      	b.n	8011fdc <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8011fcc:	4b06      	ldr	r3, [pc, #24]	; (8011fe8 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fd8:	d1ee      	bne.n	8011fb8 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3718      	adds	r7, #24
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	40023800 	.word	0x40023800
 8011fe8:	40007000 	.word	0x40007000

08011fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b086      	sub	sp, #24
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	e267      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f003 0301 	and.w	r3, r3, #1
 8012006:	2b00      	cmp	r3, #0
 8012008:	d075      	beq.n	80120f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801200a:	4b88      	ldr	r3, [pc, #544]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	f003 030c 	and.w	r3, r3, #12
 8012012:	2b04      	cmp	r3, #4
 8012014:	d00c      	beq.n	8012030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012016:	4b85      	ldr	r3, [pc, #532]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012018:	689b      	ldr	r3, [r3, #8]
 801201a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801201e:	2b08      	cmp	r3, #8
 8012020:	d112      	bne.n	8012048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012022:	4b82      	ldr	r3, [pc, #520]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801202a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801202e:	d10b      	bne.n	8012048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012030:	4b7e      	ldr	r3, [pc, #504]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012038:	2b00      	cmp	r3, #0
 801203a:	d05b      	beq.n	80120f4 <HAL_RCC_OscConfig+0x108>
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d157      	bne.n	80120f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012044:	2301      	movs	r3, #1
 8012046:	e242      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012050:	d106      	bne.n	8012060 <HAL_RCC_OscConfig+0x74>
 8012052:	4b76      	ldr	r3, [pc, #472]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a75      	ldr	r2, [pc, #468]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801205c:	6013      	str	r3, [r2, #0]
 801205e:	e01d      	b.n	801209c <HAL_RCC_OscConfig+0xb0>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012068:	d10c      	bne.n	8012084 <HAL_RCC_OscConfig+0x98>
 801206a:	4b70      	ldr	r3, [pc, #448]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4a6f      	ldr	r2, [pc, #444]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012074:	6013      	str	r3, [r2, #0]
 8012076:	4b6d      	ldr	r3, [pc, #436]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4a6c      	ldr	r2, [pc, #432]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012080:	6013      	str	r3, [r2, #0]
 8012082:	e00b      	b.n	801209c <HAL_RCC_OscConfig+0xb0>
 8012084:	4b69      	ldr	r3, [pc, #420]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a68      	ldr	r2, [pc, #416]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801208e:	6013      	str	r3, [r2, #0]
 8012090:	4b66      	ldr	r3, [pc, #408]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4a65      	ldr	r2, [pc, #404]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	685b      	ldr	r3, [r3, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d013      	beq.n	80120cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80120a4:	f7f4 ff36 	bl	8006f14 <HAL_GetTick>
 80120a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80120aa:	e008      	b.n	80120be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120ac:	f7f4 ff32 	bl	8006f14 <HAL_GetTick>
 80120b0:	4602      	mov	r2, r0
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	2b64      	cmp	r3, #100	; 0x64
 80120b8:	d901      	bls.n	80120be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80120ba:	2303      	movs	r3, #3
 80120bc:	e207      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80120be:	4b5b      	ldr	r3, [pc, #364]	; (801222c <HAL_RCC_OscConfig+0x240>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d0f0      	beq.n	80120ac <HAL_RCC_OscConfig+0xc0>
 80120ca:	e014      	b.n	80120f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80120cc:	f7f4 ff22 	bl	8006f14 <HAL_GetTick>
 80120d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120d2:	e008      	b.n	80120e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120d4:	f7f4 ff1e 	bl	8006f14 <HAL_GetTick>
 80120d8:	4602      	mov	r2, r0
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	2b64      	cmp	r3, #100	; 0x64
 80120e0:	d901      	bls.n	80120e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80120e2:	2303      	movs	r3, #3
 80120e4:	e1f3      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120e6:	4b51      	ldr	r3, [pc, #324]	; (801222c <HAL_RCC_OscConfig+0x240>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1f0      	bne.n	80120d4 <HAL_RCC_OscConfig+0xe8>
 80120f2:	e000      	b.n	80120f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80120f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	f003 0302 	and.w	r3, r3, #2
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d063      	beq.n	80121ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012102:	4b4a      	ldr	r3, [pc, #296]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012104:	689b      	ldr	r3, [r3, #8]
 8012106:	f003 030c 	and.w	r3, r3, #12
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00b      	beq.n	8012126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801210e:	4b47      	ldr	r3, [pc, #284]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012116:	2b08      	cmp	r3, #8
 8012118:	d11c      	bne.n	8012154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801211a:	4b44      	ldr	r3, [pc, #272]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012122:	2b00      	cmp	r3, #0
 8012124:	d116      	bne.n	8012154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012126:	4b41      	ldr	r3, [pc, #260]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f003 0302 	and.w	r3, r3, #2
 801212e:	2b00      	cmp	r3, #0
 8012130:	d005      	beq.n	801213e <HAL_RCC_OscConfig+0x152>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d001      	beq.n	801213e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801213a:	2301      	movs	r3, #1
 801213c:	e1c7      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801213e:	4b3b      	ldr	r3, [pc, #236]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	691b      	ldr	r3, [r3, #16]
 801214a:	00db      	lsls	r3, r3, #3
 801214c:	4937      	ldr	r1, [pc, #220]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801214e:	4313      	orrs	r3, r2
 8012150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012152:	e03a      	b.n	80121ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d020      	beq.n	801219e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801215c:	4b34      	ldr	r3, [pc, #208]	; (8012230 <HAL_RCC_OscConfig+0x244>)
 801215e:	2201      	movs	r2, #1
 8012160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012162:	f7f4 fed7 	bl	8006f14 <HAL_GetTick>
 8012166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012168:	e008      	b.n	801217c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801216a:	f7f4 fed3 	bl	8006f14 <HAL_GetTick>
 801216e:	4602      	mov	r2, r0
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	2b02      	cmp	r3, #2
 8012176:	d901      	bls.n	801217c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012178:	2303      	movs	r3, #3
 801217a:	e1a8      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801217c:	4b2b      	ldr	r3, [pc, #172]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f003 0302 	and.w	r3, r3, #2
 8012184:	2b00      	cmp	r3, #0
 8012186:	d0f0      	beq.n	801216a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012188:	4b28      	ldr	r3, [pc, #160]	; (801222c <HAL_RCC_OscConfig+0x240>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	00db      	lsls	r3, r3, #3
 8012196:	4925      	ldr	r1, [pc, #148]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012198:	4313      	orrs	r3, r2
 801219a:	600b      	str	r3, [r1, #0]
 801219c:	e015      	b.n	80121ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801219e:	4b24      	ldr	r3, [pc, #144]	; (8012230 <HAL_RCC_OscConfig+0x244>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121a4:	f7f4 feb6 	bl	8006f14 <HAL_GetTick>
 80121a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80121aa:	e008      	b.n	80121be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80121ac:	f7f4 feb2 	bl	8006f14 <HAL_GetTick>
 80121b0:	4602      	mov	r2, r0
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	2b02      	cmp	r3, #2
 80121b8:	d901      	bls.n	80121be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80121ba:	2303      	movs	r3, #3
 80121bc:	e187      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80121be:	4b1b      	ldr	r3, [pc, #108]	; (801222c <HAL_RCC_OscConfig+0x240>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	f003 0302 	and.w	r3, r3, #2
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d1f0      	bne.n	80121ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f003 0308 	and.w	r3, r3, #8
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d036      	beq.n	8012244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	695b      	ldr	r3, [r3, #20]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d016      	beq.n	801220c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80121de:	4b15      	ldr	r3, [pc, #84]	; (8012234 <HAL_RCC_OscConfig+0x248>)
 80121e0:	2201      	movs	r2, #1
 80121e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80121e4:	f7f4 fe96 	bl	8006f14 <HAL_GetTick>
 80121e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80121ea:	e008      	b.n	80121fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80121ec:	f7f4 fe92 	bl	8006f14 <HAL_GetTick>
 80121f0:	4602      	mov	r2, r0
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d901      	bls.n	80121fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80121fa:	2303      	movs	r3, #3
 80121fc:	e167      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80121fe:	4b0b      	ldr	r3, [pc, #44]	; (801222c <HAL_RCC_OscConfig+0x240>)
 8012200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012202:	f003 0302 	and.w	r3, r3, #2
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0f0      	beq.n	80121ec <HAL_RCC_OscConfig+0x200>
 801220a:	e01b      	b.n	8012244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801220c:	4b09      	ldr	r3, [pc, #36]	; (8012234 <HAL_RCC_OscConfig+0x248>)
 801220e:	2200      	movs	r2, #0
 8012210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012212:	f7f4 fe7f 	bl	8006f14 <HAL_GetTick>
 8012216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012218:	e00e      	b.n	8012238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801221a:	f7f4 fe7b 	bl	8006f14 <HAL_GetTick>
 801221e:	4602      	mov	r2, r0
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	2b02      	cmp	r3, #2
 8012226:	d907      	bls.n	8012238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012228:	2303      	movs	r3, #3
 801222a:	e150      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
 801222c:	40023800 	.word	0x40023800
 8012230:	42470000 	.word	0x42470000
 8012234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012238:	4b88      	ldr	r3, [pc, #544]	; (801245c <HAL_RCC_OscConfig+0x470>)
 801223a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801223c:	f003 0302 	and.w	r3, r3, #2
 8012240:	2b00      	cmp	r3, #0
 8012242:	d1ea      	bne.n	801221a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f003 0304 	and.w	r3, r3, #4
 801224c:	2b00      	cmp	r3, #0
 801224e:	f000 8097 	beq.w	8012380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012252:	2300      	movs	r3, #0
 8012254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012256:	4b81      	ldr	r3, [pc, #516]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801225e:	2b00      	cmp	r3, #0
 8012260:	d10f      	bne.n	8012282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012262:	2300      	movs	r3, #0
 8012264:	60bb      	str	r3, [r7, #8]
 8012266:	4b7d      	ldr	r3, [pc, #500]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801226a:	4a7c      	ldr	r2, [pc, #496]	; (801245c <HAL_RCC_OscConfig+0x470>)
 801226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012270:	6413      	str	r3, [r2, #64]	; 0x40
 8012272:	4b7a      	ldr	r3, [pc, #488]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801227a:	60bb      	str	r3, [r7, #8]
 801227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801227e:	2301      	movs	r3, #1
 8012280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012282:	4b77      	ldr	r3, [pc, #476]	; (8012460 <HAL_RCC_OscConfig+0x474>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801228a:	2b00      	cmp	r3, #0
 801228c:	d118      	bne.n	80122c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801228e:	4b74      	ldr	r3, [pc, #464]	; (8012460 <HAL_RCC_OscConfig+0x474>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	4a73      	ldr	r2, [pc, #460]	; (8012460 <HAL_RCC_OscConfig+0x474>)
 8012294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801229a:	f7f4 fe3b 	bl	8006f14 <HAL_GetTick>
 801229e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80122a0:	e008      	b.n	80122b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80122a2:	f7f4 fe37 	bl	8006f14 <HAL_GetTick>
 80122a6:	4602      	mov	r2, r0
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	1ad3      	subs	r3, r2, r3
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	d901      	bls.n	80122b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80122b0:	2303      	movs	r3, #3
 80122b2:	e10c      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80122b4:	4b6a      	ldr	r3, [pc, #424]	; (8012460 <HAL_RCC_OscConfig+0x474>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d0f0      	beq.n	80122a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d106      	bne.n	80122d6 <HAL_RCC_OscConfig+0x2ea>
 80122c8:	4b64      	ldr	r3, [pc, #400]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122cc:	4a63      	ldr	r2, [pc, #396]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122ce:	f043 0301 	orr.w	r3, r3, #1
 80122d2:	6713      	str	r3, [r2, #112]	; 0x70
 80122d4:	e01c      	b.n	8012310 <HAL_RCC_OscConfig+0x324>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	2b05      	cmp	r3, #5
 80122dc:	d10c      	bne.n	80122f8 <HAL_RCC_OscConfig+0x30c>
 80122de:	4b5f      	ldr	r3, [pc, #380]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122e2:	4a5e      	ldr	r2, [pc, #376]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122e4:	f043 0304 	orr.w	r3, r3, #4
 80122e8:	6713      	str	r3, [r2, #112]	; 0x70
 80122ea:	4b5c      	ldr	r3, [pc, #368]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122ee:	4a5b      	ldr	r2, [pc, #364]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122f0:	f043 0301 	orr.w	r3, r3, #1
 80122f4:	6713      	str	r3, [r2, #112]	; 0x70
 80122f6:	e00b      	b.n	8012310 <HAL_RCC_OscConfig+0x324>
 80122f8:	4b58      	ldr	r3, [pc, #352]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122fc:	4a57      	ldr	r2, [pc, #348]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80122fe:	f023 0301 	bic.w	r3, r3, #1
 8012302:	6713      	str	r3, [r2, #112]	; 0x70
 8012304:	4b55      	ldr	r3, [pc, #340]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012308:	4a54      	ldr	r2, [pc, #336]	; (801245c <HAL_RCC_OscConfig+0x470>)
 801230a:	f023 0304 	bic.w	r3, r3, #4
 801230e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d015      	beq.n	8012344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012318:	f7f4 fdfc 	bl	8006f14 <HAL_GetTick>
 801231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801231e:	e00a      	b.n	8012336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012320:	f7f4 fdf8 	bl	8006f14 <HAL_GetTick>
 8012324:	4602      	mov	r2, r0
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	f241 3288 	movw	r2, #5000	; 0x1388
 801232e:	4293      	cmp	r3, r2
 8012330:	d901      	bls.n	8012336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8012332:	2303      	movs	r3, #3
 8012334:	e0cb      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012336:	4b49      	ldr	r3, [pc, #292]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801233a:	f003 0302 	and.w	r3, r3, #2
 801233e:	2b00      	cmp	r3, #0
 8012340:	d0ee      	beq.n	8012320 <HAL_RCC_OscConfig+0x334>
 8012342:	e014      	b.n	801236e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012344:	f7f4 fde6 	bl	8006f14 <HAL_GetTick>
 8012348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801234a:	e00a      	b.n	8012362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801234c:	f7f4 fde2 	bl	8006f14 <HAL_GetTick>
 8012350:	4602      	mov	r2, r0
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	f241 3288 	movw	r2, #5000	; 0x1388
 801235a:	4293      	cmp	r3, r2
 801235c:	d901      	bls.n	8012362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801235e:	2303      	movs	r3, #3
 8012360:	e0b5      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012362:	4b3e      	ldr	r3, [pc, #248]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012366:	f003 0302 	and.w	r3, r3, #2
 801236a:	2b00      	cmp	r3, #0
 801236c:	d1ee      	bne.n	801234c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801236e:	7dfb      	ldrb	r3, [r7, #23]
 8012370:	2b01      	cmp	r3, #1
 8012372:	d105      	bne.n	8012380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012374:	4b39      	ldr	r3, [pc, #228]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012378:	4a38      	ldr	r2, [pc, #224]	; (801245c <HAL_RCC_OscConfig+0x470>)
 801237a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801237e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	699b      	ldr	r3, [r3, #24]
 8012384:	2b00      	cmp	r3, #0
 8012386:	f000 80a1 	beq.w	80124cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801238a:	4b34      	ldr	r3, [pc, #208]	; (801245c <HAL_RCC_OscConfig+0x470>)
 801238c:	689b      	ldr	r3, [r3, #8]
 801238e:	f003 030c 	and.w	r3, r3, #12
 8012392:	2b08      	cmp	r3, #8
 8012394:	d05c      	beq.n	8012450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	699b      	ldr	r3, [r3, #24]
 801239a:	2b02      	cmp	r3, #2
 801239c:	d141      	bne.n	8012422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801239e:	4b31      	ldr	r3, [pc, #196]	; (8012464 <HAL_RCC_OscConfig+0x478>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80123a4:	f7f4 fdb6 	bl	8006f14 <HAL_GetTick>
 80123a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80123aa:	e008      	b.n	80123be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80123ac:	f7f4 fdb2 	bl	8006f14 <HAL_GetTick>
 80123b0:	4602      	mov	r2, r0
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	1ad3      	subs	r3, r2, r3
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	d901      	bls.n	80123be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80123ba:	2303      	movs	r3, #3
 80123bc:	e087      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80123be:	4b27      	ldr	r3, [pc, #156]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d1f0      	bne.n	80123ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	69da      	ldr	r2, [r3, #28]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6a1b      	ldr	r3, [r3, #32]
 80123d2:	431a      	orrs	r2, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d8:	019b      	lsls	r3, r3, #6
 80123da:	431a      	orrs	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123e0:	085b      	lsrs	r3, r3, #1
 80123e2:	3b01      	subs	r3, #1
 80123e4:	041b      	lsls	r3, r3, #16
 80123e6:	431a      	orrs	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ec:	061b      	lsls	r3, r3, #24
 80123ee:	491b      	ldr	r1, [pc, #108]	; (801245c <HAL_RCC_OscConfig+0x470>)
 80123f0:	4313      	orrs	r3, r2
 80123f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80123f4:	4b1b      	ldr	r3, [pc, #108]	; (8012464 <HAL_RCC_OscConfig+0x478>)
 80123f6:	2201      	movs	r2, #1
 80123f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80123fa:	f7f4 fd8b 	bl	8006f14 <HAL_GetTick>
 80123fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012400:	e008      	b.n	8012414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012402:	f7f4 fd87 	bl	8006f14 <HAL_GetTick>
 8012406:	4602      	mov	r2, r0
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	2b02      	cmp	r3, #2
 801240e:	d901      	bls.n	8012414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012410:	2303      	movs	r3, #3
 8012412:	e05c      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012414:	4b11      	ldr	r3, [pc, #68]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801241c:	2b00      	cmp	r3, #0
 801241e:	d0f0      	beq.n	8012402 <HAL_RCC_OscConfig+0x416>
 8012420:	e054      	b.n	80124cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012422:	4b10      	ldr	r3, [pc, #64]	; (8012464 <HAL_RCC_OscConfig+0x478>)
 8012424:	2200      	movs	r2, #0
 8012426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012428:	f7f4 fd74 	bl	8006f14 <HAL_GetTick>
 801242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801242e:	e008      	b.n	8012442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012430:	f7f4 fd70 	bl	8006f14 <HAL_GetTick>
 8012434:	4602      	mov	r2, r0
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	2b02      	cmp	r3, #2
 801243c:	d901      	bls.n	8012442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801243e:	2303      	movs	r3, #3
 8012440:	e045      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012442:	4b06      	ldr	r3, [pc, #24]	; (801245c <HAL_RCC_OscConfig+0x470>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801244a:	2b00      	cmp	r3, #0
 801244c:	d1f0      	bne.n	8012430 <HAL_RCC_OscConfig+0x444>
 801244e:	e03d      	b.n	80124cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	699b      	ldr	r3, [r3, #24]
 8012454:	2b01      	cmp	r3, #1
 8012456:	d107      	bne.n	8012468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012458:	2301      	movs	r3, #1
 801245a:	e038      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
 801245c:	40023800 	.word	0x40023800
 8012460:	40007000 	.word	0x40007000
 8012464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012468:	4b1b      	ldr	r3, [pc, #108]	; (80124d8 <HAL_RCC_OscConfig+0x4ec>)
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	699b      	ldr	r3, [r3, #24]
 8012472:	2b01      	cmp	r3, #1
 8012474:	d028      	beq.n	80124c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012480:	429a      	cmp	r2, r3
 8012482:	d121      	bne.n	80124c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801248e:	429a      	cmp	r2, r3
 8012490:	d11a      	bne.n	80124c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012498:	4013      	ands	r3, r2
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801249e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80124a0:	4293      	cmp	r3, r2
 80124a2:	d111      	bne.n	80124c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124ae:	085b      	lsrs	r3, r3, #1
 80124b0:	3b01      	subs	r3, #1
 80124b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d107      	bne.n	80124c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d001      	beq.n	80124cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80124c8:	2301      	movs	r3, #1
 80124ca:	e000      	b.n	80124ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80124cc:	2300      	movs	r3, #0
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3718      	adds	r7, #24
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	40023800 	.word	0x40023800

080124dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d101      	bne.n	80124f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80124ec:	2301      	movs	r3, #1
 80124ee:	e0cc      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80124f0:	4b68      	ldr	r3, [pc, #416]	; (8012694 <HAL_RCC_ClockConfig+0x1b8>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f003 0307 	and.w	r3, r3, #7
 80124f8:	683a      	ldr	r2, [r7, #0]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d90c      	bls.n	8012518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80124fe:	4b65      	ldr	r3, [pc, #404]	; (8012694 <HAL_RCC_ClockConfig+0x1b8>)
 8012500:	683a      	ldr	r2, [r7, #0]
 8012502:	b2d2      	uxtb	r2, r2
 8012504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012506:	4b63      	ldr	r3, [pc, #396]	; (8012694 <HAL_RCC_ClockConfig+0x1b8>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f003 0307 	and.w	r3, r3, #7
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	429a      	cmp	r2, r3
 8012512:	d001      	beq.n	8012518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012514:	2301      	movs	r3, #1
 8012516:	e0b8      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f003 0302 	and.w	r3, r3, #2
 8012520:	2b00      	cmp	r3, #0
 8012522:	d020      	beq.n	8012566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f003 0304 	and.w	r3, r3, #4
 801252c:	2b00      	cmp	r3, #0
 801252e:	d005      	beq.n	801253c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012530:	4b59      	ldr	r3, [pc, #356]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 8012532:	689b      	ldr	r3, [r3, #8]
 8012534:	4a58      	ldr	r2, [pc, #352]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 8012536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801253a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	f003 0308 	and.w	r3, r3, #8
 8012544:	2b00      	cmp	r3, #0
 8012546:	d005      	beq.n	8012554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012548:	4b53      	ldr	r3, [pc, #332]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801254a:	689b      	ldr	r3, [r3, #8]
 801254c:	4a52      	ldr	r2, [pc, #328]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801254e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012554:	4b50      	ldr	r3, [pc, #320]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	494d      	ldr	r1, [pc, #308]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 8012562:	4313      	orrs	r3, r2
 8012564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f003 0301 	and.w	r3, r3, #1
 801256e:	2b00      	cmp	r3, #0
 8012570:	d044      	beq.n	80125fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	2b01      	cmp	r3, #1
 8012578:	d107      	bne.n	801258a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801257a:	4b47      	ldr	r3, [pc, #284]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012582:	2b00      	cmp	r3, #0
 8012584:	d119      	bne.n	80125ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012586:	2301      	movs	r3, #1
 8012588:	e07f      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	2b02      	cmp	r3, #2
 8012590:	d003      	beq.n	801259a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012596:	2b03      	cmp	r3, #3
 8012598:	d107      	bne.n	80125aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801259a:	4b3f      	ldr	r3, [pc, #252]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d109      	bne.n	80125ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e06f      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80125aa:	4b3b      	ldr	r3, [pc, #236]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	f003 0302 	and.w	r3, r3, #2
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80125b6:	2301      	movs	r3, #1
 80125b8:	e067      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80125ba:	4b37      	ldr	r3, [pc, #220]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	f023 0203 	bic.w	r2, r3, #3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	4934      	ldr	r1, [pc, #208]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 80125c8:	4313      	orrs	r3, r2
 80125ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80125cc:	f7f4 fca2 	bl	8006f14 <HAL_GetTick>
 80125d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80125d2:	e00a      	b.n	80125ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125d4:	f7f4 fc9e 	bl	8006f14 <HAL_GetTick>
 80125d8:	4602      	mov	r2, r0
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	f241 3288 	movw	r2, #5000	; 0x1388
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d901      	bls.n	80125ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80125e6:	2303      	movs	r3, #3
 80125e8:	e04f      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80125ea:	4b2b      	ldr	r3, [pc, #172]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 80125ec:	689b      	ldr	r3, [r3, #8]
 80125ee:	f003 020c 	and.w	r2, r3, #12
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d1eb      	bne.n	80125d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80125fc:	4b25      	ldr	r3, [pc, #148]	; (8012694 <HAL_RCC_ClockConfig+0x1b8>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f003 0307 	and.w	r3, r3, #7
 8012604:	683a      	ldr	r2, [r7, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	d20c      	bcs.n	8012624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801260a:	4b22      	ldr	r3, [pc, #136]	; (8012694 <HAL_RCC_ClockConfig+0x1b8>)
 801260c:	683a      	ldr	r2, [r7, #0]
 801260e:	b2d2      	uxtb	r2, r2
 8012610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012612:	4b20      	ldr	r3, [pc, #128]	; (8012694 <HAL_RCC_ClockConfig+0x1b8>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f003 0307 	and.w	r3, r3, #7
 801261a:	683a      	ldr	r2, [r7, #0]
 801261c:	429a      	cmp	r2, r3
 801261e:	d001      	beq.n	8012624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012620:	2301      	movs	r3, #1
 8012622:	e032      	b.n	801268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f003 0304 	and.w	r3, r3, #4
 801262c:	2b00      	cmp	r3, #0
 801262e:	d008      	beq.n	8012642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012630:	4b19      	ldr	r3, [pc, #100]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 8012632:	689b      	ldr	r3, [r3, #8]
 8012634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	68db      	ldr	r3, [r3, #12]
 801263c:	4916      	ldr	r1, [pc, #88]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801263e:	4313      	orrs	r3, r2
 8012640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f003 0308 	and.w	r3, r3, #8
 801264a:	2b00      	cmp	r3, #0
 801264c:	d009      	beq.n	8012662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801264e:	4b12      	ldr	r3, [pc, #72]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 8012650:	689b      	ldr	r3, [r3, #8]
 8012652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	691b      	ldr	r3, [r3, #16]
 801265a:	00db      	lsls	r3, r3, #3
 801265c:	490e      	ldr	r1, [pc, #56]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801265e:	4313      	orrs	r3, r2
 8012660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012662:	f000 f8a1 	bl	80127a8 <HAL_RCC_GetSysClockFreq>
 8012666:	4602      	mov	r2, r0
 8012668:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <HAL_RCC_ClockConfig+0x1bc>)
 801266a:	689b      	ldr	r3, [r3, #8]
 801266c:	091b      	lsrs	r3, r3, #4
 801266e:	f003 030f 	and.w	r3, r3, #15
 8012672:	490a      	ldr	r1, [pc, #40]	; (801269c <HAL_RCC_ClockConfig+0x1c0>)
 8012674:	5ccb      	ldrb	r3, [r1, r3]
 8012676:	fa22 f303 	lsr.w	r3, r2, r3
 801267a:	4a09      	ldr	r2, [pc, #36]	; (80126a0 <HAL_RCC_ClockConfig+0x1c4>)
 801267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801267e:	4b09      	ldr	r3, [pc, #36]	; (80126a4 <HAL_RCC_ClockConfig+0x1c8>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	4618      	mov	r0, r3
 8012684:	f7f4 fc01 	bl	8006e8a <HAL_InitTick>

  return HAL_OK;
 8012688:	2300      	movs	r3, #0
}
 801268a:	4618      	mov	r0, r3
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	40023c00 	.word	0x40023c00
 8012698:	40023800 	.word	0x40023800
 801269c:	08052618 	.word	0x08052618
 80126a0:	20000058 	.word	0x20000058
 80126a4:	2000005c 	.word	0x2000005c

080126a8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08c      	sub	sp, #48	; 0x30
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d129      	bne.n	801270e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80126ba:	2300      	movs	r3, #0
 80126bc:	617b      	str	r3, [r7, #20]
 80126be:	4b2b      	ldr	r3, [pc, #172]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 80126c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126c2:	4a2a      	ldr	r2, [pc, #168]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 80126c4:	f043 0301 	orr.w	r3, r3, #1
 80126c8:	6313      	str	r3, [r2, #48]	; 0x30
 80126ca:	4b28      	ldr	r3, [pc, #160]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 80126cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ce:	f003 0301 	and.w	r3, r3, #1
 80126d2:	617b      	str	r3, [r7, #20]
 80126d4:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80126d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126dc:	2302      	movs	r3, #2
 80126de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126e0:	2303      	movs	r3, #3
 80126e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126e4:	2300      	movs	r3, #0
 80126e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80126e8:	2300      	movs	r3, #0
 80126ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80126ec:	f107 031c 	add.w	r3, r7, #28
 80126f0:	4619      	mov	r1, r3
 80126f2:	481f      	ldr	r0, [pc, #124]	; (8012770 <HAL_RCC_MCOConfig+0xc8>)
 80126f4:	f7f8 fd76 	bl	800b1e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80126f8:	4b1c      	ldr	r3, [pc, #112]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8012700:	68b9      	ldr	r1, [r7, #8]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	430b      	orrs	r3, r1
 8012706:	4919      	ldr	r1, [pc, #100]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 8012708:	4313      	orrs	r3, r2
 801270a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 801270c:	e029      	b.n	8012762 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 801270e:	2300      	movs	r3, #0
 8012710:	61bb      	str	r3, [r7, #24]
 8012712:	4b16      	ldr	r3, [pc, #88]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 8012714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012716:	4a15      	ldr	r2, [pc, #84]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 8012718:	f043 0304 	orr.w	r3, r3, #4
 801271c:	6313      	str	r3, [r2, #48]	; 0x30
 801271e:	4b13      	ldr	r3, [pc, #76]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 8012720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012722:	f003 0304 	and.w	r3, r3, #4
 8012726:	61bb      	str	r3, [r7, #24]
 8012728:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801272a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012730:	2302      	movs	r3, #2
 8012732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012734:	2303      	movs	r3, #3
 8012736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012738:	2300      	movs	r3, #0
 801273a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801273c:	2300      	movs	r3, #0
 801273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8012740:	f107 031c 	add.w	r3, r7, #28
 8012744:	4619      	mov	r1, r3
 8012746:	480b      	ldr	r0, [pc, #44]	; (8012774 <HAL_RCC_MCOConfig+0xcc>)
 8012748:	f7f8 fd4c 	bl	800b1e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 801274c:	4b07      	ldr	r3, [pc, #28]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	00d9      	lsls	r1, r3, #3
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	430b      	orrs	r3, r1
 801275c:	4903      	ldr	r1, [pc, #12]	; (801276c <HAL_RCC_MCOConfig+0xc4>)
 801275e:	4313      	orrs	r3, r2
 8012760:	608b      	str	r3, [r1, #8]
}
 8012762:	bf00      	nop
 8012764:	3730      	adds	r7, #48	; 0x30
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	40023800 	.word	0x40023800
 8012770:	40020000 	.word	0x40020000
 8012774:	40020800 	.word	0x40020800

08012778 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012778:	b480      	push	{r7}
 801277a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 801277c:	4b03      	ldr	r3, [pc, #12]	; (801278c <HAL_RCC_EnableCSS+0x14>)
 801277e:	2201      	movs	r2, #1
 8012780:	601a      	str	r2, [r3, #0]
}
 8012782:	bf00      	nop
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	4247004c 	.word	0x4247004c

08012790 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8012790:	b480      	push	{r7}
 8012792:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8012794:	4b03      	ldr	r3, [pc, #12]	; (80127a4 <HAL_RCC_DisableCSS+0x14>)
 8012796:	2200      	movs	r2, #0
 8012798:	601a      	str	r2, [r3, #0]
}
 801279a:	bf00      	nop
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	4247004c 	.word	0x4247004c

080127a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80127a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127ac:	b094      	sub	sp, #80	; 0x50
 80127ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80127b0:	2300      	movs	r3, #0
 80127b2:	647b      	str	r3, [r7, #68]	; 0x44
 80127b4:	2300      	movs	r3, #0
 80127b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127b8:	2300      	movs	r3, #0
 80127ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80127bc:	2300      	movs	r3, #0
 80127be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80127c0:	4b79      	ldr	r3, [pc, #484]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	f003 030c 	and.w	r3, r3, #12
 80127c8:	2b08      	cmp	r3, #8
 80127ca:	d00d      	beq.n	80127e8 <HAL_RCC_GetSysClockFreq+0x40>
 80127cc:	2b08      	cmp	r3, #8
 80127ce:	f200 80e1 	bhi.w	8012994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d002      	beq.n	80127dc <HAL_RCC_GetSysClockFreq+0x34>
 80127d6:	2b04      	cmp	r3, #4
 80127d8:	d003      	beq.n	80127e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80127da:	e0db      	b.n	8012994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80127dc:	4b73      	ldr	r3, [pc, #460]	; (80129ac <HAL_RCC_GetSysClockFreq+0x204>)
 80127de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80127e0:	e0db      	b.n	801299a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80127e2:	4b73      	ldr	r3, [pc, #460]	; (80129b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80127e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80127e6:	e0d8      	b.n	801299a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80127e8:	4b6f      	ldr	r3, [pc, #444]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80127f2:	4b6d      	ldr	r3, [pc, #436]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d063      	beq.n	80128c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80127fe:	4b6a      	ldr	r3, [pc, #424]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	099b      	lsrs	r3, r3, #6
 8012804:	2200      	movs	r2, #0
 8012806:	63bb      	str	r3, [r7, #56]	; 0x38
 8012808:	63fa      	str	r2, [r7, #60]	; 0x3c
 801280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801280c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012810:	633b      	str	r3, [r7, #48]	; 0x30
 8012812:	2300      	movs	r3, #0
 8012814:	637b      	str	r3, [r7, #52]	; 0x34
 8012816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801281a:	4622      	mov	r2, r4
 801281c:	462b      	mov	r3, r5
 801281e:	f04f 0000 	mov.w	r0, #0
 8012822:	f04f 0100 	mov.w	r1, #0
 8012826:	0159      	lsls	r1, r3, #5
 8012828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801282c:	0150      	lsls	r0, r2, #5
 801282e:	4602      	mov	r2, r0
 8012830:	460b      	mov	r3, r1
 8012832:	4621      	mov	r1, r4
 8012834:	1a51      	subs	r1, r2, r1
 8012836:	6139      	str	r1, [r7, #16]
 8012838:	4629      	mov	r1, r5
 801283a:	eb63 0301 	sbc.w	r3, r3, r1
 801283e:	617b      	str	r3, [r7, #20]
 8012840:	f04f 0200 	mov.w	r2, #0
 8012844:	f04f 0300 	mov.w	r3, #0
 8012848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801284c:	4659      	mov	r1, fp
 801284e:	018b      	lsls	r3, r1, #6
 8012850:	4651      	mov	r1, sl
 8012852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012856:	4651      	mov	r1, sl
 8012858:	018a      	lsls	r2, r1, #6
 801285a:	4651      	mov	r1, sl
 801285c:	ebb2 0801 	subs.w	r8, r2, r1
 8012860:	4659      	mov	r1, fp
 8012862:	eb63 0901 	sbc.w	r9, r3, r1
 8012866:	f04f 0200 	mov.w	r2, #0
 801286a:	f04f 0300 	mov.w	r3, #0
 801286e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801287a:	4690      	mov	r8, r2
 801287c:	4699      	mov	r9, r3
 801287e:	4623      	mov	r3, r4
 8012880:	eb18 0303 	adds.w	r3, r8, r3
 8012884:	60bb      	str	r3, [r7, #8]
 8012886:	462b      	mov	r3, r5
 8012888:	eb49 0303 	adc.w	r3, r9, r3
 801288c:	60fb      	str	r3, [r7, #12]
 801288e:	f04f 0200 	mov.w	r2, #0
 8012892:	f04f 0300 	mov.w	r3, #0
 8012896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801289a:	4629      	mov	r1, r5
 801289c:	024b      	lsls	r3, r1, #9
 801289e:	4621      	mov	r1, r4
 80128a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80128a4:	4621      	mov	r1, r4
 80128a6:	024a      	lsls	r2, r1, #9
 80128a8:	4610      	mov	r0, r2
 80128aa:	4619      	mov	r1, r3
 80128ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128ae:	2200      	movs	r2, #0
 80128b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80128b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80128b8:	f007 f99c 	bl	8019bf4 <__aeabi_uldivmod>
 80128bc:	4602      	mov	r2, r0
 80128be:	460b      	mov	r3, r1
 80128c0:	4613      	mov	r3, r2
 80128c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128c4:	e058      	b.n	8012978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80128c6:	4b38      	ldr	r3, [pc, #224]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	099b      	lsrs	r3, r3, #6
 80128cc:	2200      	movs	r2, #0
 80128ce:	4618      	mov	r0, r3
 80128d0:	4611      	mov	r1, r2
 80128d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80128d6:	623b      	str	r3, [r7, #32]
 80128d8:	2300      	movs	r3, #0
 80128da:	627b      	str	r3, [r7, #36]	; 0x24
 80128dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80128e0:	4642      	mov	r2, r8
 80128e2:	464b      	mov	r3, r9
 80128e4:	f04f 0000 	mov.w	r0, #0
 80128e8:	f04f 0100 	mov.w	r1, #0
 80128ec:	0159      	lsls	r1, r3, #5
 80128ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80128f2:	0150      	lsls	r0, r2, #5
 80128f4:	4602      	mov	r2, r0
 80128f6:	460b      	mov	r3, r1
 80128f8:	4641      	mov	r1, r8
 80128fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80128fe:	4649      	mov	r1, r9
 8012900:	eb63 0b01 	sbc.w	fp, r3, r1
 8012904:	f04f 0200 	mov.w	r2, #0
 8012908:	f04f 0300 	mov.w	r3, #0
 801290c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8012914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012918:	ebb2 040a 	subs.w	r4, r2, sl
 801291c:	eb63 050b 	sbc.w	r5, r3, fp
 8012920:	f04f 0200 	mov.w	r2, #0
 8012924:	f04f 0300 	mov.w	r3, #0
 8012928:	00eb      	lsls	r3, r5, #3
 801292a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801292e:	00e2      	lsls	r2, r4, #3
 8012930:	4614      	mov	r4, r2
 8012932:	461d      	mov	r5, r3
 8012934:	4643      	mov	r3, r8
 8012936:	18e3      	adds	r3, r4, r3
 8012938:	603b      	str	r3, [r7, #0]
 801293a:	464b      	mov	r3, r9
 801293c:	eb45 0303 	adc.w	r3, r5, r3
 8012940:	607b      	str	r3, [r7, #4]
 8012942:	f04f 0200 	mov.w	r2, #0
 8012946:	f04f 0300 	mov.w	r3, #0
 801294a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801294e:	4629      	mov	r1, r5
 8012950:	028b      	lsls	r3, r1, #10
 8012952:	4621      	mov	r1, r4
 8012954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012958:	4621      	mov	r1, r4
 801295a:	028a      	lsls	r2, r1, #10
 801295c:	4610      	mov	r0, r2
 801295e:	4619      	mov	r1, r3
 8012960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012962:	2200      	movs	r2, #0
 8012964:	61bb      	str	r3, [r7, #24]
 8012966:	61fa      	str	r2, [r7, #28]
 8012968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801296c:	f007 f942 	bl	8019bf4 <__aeabi_uldivmod>
 8012970:	4602      	mov	r2, r0
 8012972:	460b      	mov	r3, r1
 8012974:	4613      	mov	r3, r2
 8012976:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012978:	4b0b      	ldr	r3, [pc, #44]	; (80129a8 <HAL_RCC_GetSysClockFreq+0x200>)
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	0c1b      	lsrs	r3, r3, #16
 801297e:	f003 0303 	and.w	r3, r3, #3
 8012982:	3301      	adds	r3, #1
 8012984:	005b      	lsls	r3, r3, #1
 8012986:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8012988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801298a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012992:	e002      	b.n	801299a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012994:	4b05      	ldr	r3, [pc, #20]	; (80129ac <HAL_RCC_GetSysClockFreq+0x204>)
 8012996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012998:	bf00      	nop
    }
  }
  return sysclockfreq;
 801299a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801299c:	4618      	mov	r0, r3
 801299e:	3750      	adds	r7, #80	; 0x50
 80129a0:	46bd      	mov	sp, r7
 80129a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80129a6:	bf00      	nop
 80129a8:	40023800 	.word	0x40023800
 80129ac:	00f42400 	.word	0x00f42400
 80129b0:	007a1200 	.word	0x007a1200

080129b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80129b4:	b480      	push	{r7}
 80129b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80129b8:	4b03      	ldr	r3, [pc, #12]	; (80129c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80129ba:	681b      	ldr	r3, [r3, #0]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	4770      	bx	lr
 80129c6:	bf00      	nop
 80129c8:	20000058 	.word	0x20000058

080129cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80129d0:	f7ff fff0 	bl	80129b4 <HAL_RCC_GetHCLKFreq>
 80129d4:	4602      	mov	r2, r0
 80129d6:	4b05      	ldr	r3, [pc, #20]	; (80129ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80129d8:	689b      	ldr	r3, [r3, #8]
 80129da:	0a9b      	lsrs	r3, r3, #10
 80129dc:	f003 0307 	and.w	r3, r3, #7
 80129e0:	4903      	ldr	r1, [pc, #12]	; (80129f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80129e2:	5ccb      	ldrb	r3, [r1, r3]
 80129e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	40023800 	.word	0x40023800
 80129f0:	08052628 	.word	0x08052628

080129f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80129f8:	f7ff ffdc 	bl	80129b4 <HAL_RCC_GetHCLKFreq>
 80129fc:	4602      	mov	r2, r0
 80129fe:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012a00:	689b      	ldr	r3, [r3, #8]
 8012a02:	0b5b      	lsrs	r3, r3, #13
 8012a04:	f003 0307 	and.w	r3, r3, #7
 8012a08:	4903      	ldr	r1, [pc, #12]	; (8012a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012a0a:	5ccb      	ldrb	r3, [r1, r3]
 8012a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	40023800 	.word	0x40023800
 8012a18:	08052628 	.word	0x08052628

08012a1c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	b083      	sub	sp, #12
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	220f      	movs	r2, #15
 8012a28:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012a2a:	4b45      	ldr	r3, [pc, #276]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012a36:	d104      	bne.n	8012a42 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8012a3e:	605a      	str	r2, [r3, #4]
 8012a40:	e00e      	b.n	8012a60 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8012a42:	4b3f      	ldr	r3, [pc, #252]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a4e:	d104      	bne.n	8012a5a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012a56:	605a      	str	r2, [r3, #4]
 8012a58:	e002      	b.n	8012a60 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8012a60:	4b37      	ldr	r3, [pc, #220]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	f003 0301 	and.w	r3, r3, #1
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d103      	bne.n	8012a74 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	60da      	str	r2, [r3, #12]
 8012a72:	e002      	b.n	8012a7a <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2200      	movs	r2, #0
 8012a78:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8012a7a:	4b31      	ldr	r3, [pc, #196]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	08db      	lsrs	r3, r3, #3
 8012a80:	f003 021f 	and.w	r2, r3, #31
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8012a88:	4b2d      	ldr	r3, [pc, #180]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a8c:	f003 0304 	and.w	r3, r3, #4
 8012a90:	2b04      	cmp	r3, #4
 8012a92:	d103      	bne.n	8012a9c <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2205      	movs	r2, #5
 8012a98:	609a      	str	r2, [r3, #8]
 8012a9a:	e00c      	b.n	8012ab6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8012a9c:	4b28      	ldr	r3, [pc, #160]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d103      	bne.n	8012ab0 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2201      	movs	r2, #1
 8012aac:	609a      	str	r2, [r3, #8]
 8012aae:	e002      	b.n	8012ab6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8012ab6:	4b22      	ldr	r3, [pc, #136]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aba:	f003 0301 	and.w	r3, r3, #1
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d103      	bne.n	8012aca <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	615a      	str	r2, [r3, #20]
 8012ac8:	e002      	b.n	8012ad0 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2200      	movs	r2, #0
 8012ace:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8012ad0:	4b1b      	ldr	r3, [pc, #108]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012adc:	d103      	bne.n	8012ae6 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2202      	movs	r2, #2
 8012ae2:	619a      	str	r2, [r3, #24]
 8012ae4:	e002      	b.n	8012aec <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2201      	movs	r2, #1
 8012aea:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012aec:	4b14      	ldr	r3, [pc, #80]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012af8:	4b11      	ldr	r3, [pc, #68]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012b04:	4b0e      	ldr	r3, [pc, #56]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	099b      	lsrs	r3, r3, #6
 8012b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8012b12:	4b0b      	ldr	r3, [pc, #44]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012b1a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8012b1e:	005b      	lsls	r3, r3, #1
 8012b20:	0c1a      	lsrs	r2, r3, #16
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8012b26:	4b06      	ldr	r3, [pc, #24]	; (8012b40 <HAL_RCC_GetOscConfig+0x124>)
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	0e1b      	lsrs	r3, r3, #24
 8012b2c:	f003 020f 	and.w	r2, r3, #15
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012b34:	bf00      	nop
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr
 8012b40:	40023800 	.word	0x40023800

08012b44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012b44:	b480      	push	{r7}
 8012b46:	b083      	sub	sp, #12
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	220f      	movs	r2, #15
 8012b52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012b54:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	f003 0203 	and.w	r2, r3, #3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012b60:	4b0f      	ldr	r3, [pc, #60]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b62:	689b      	ldr	r3, [r3, #8]
 8012b64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b6e:	689b      	ldr	r3, [r3, #8]
 8012b70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012b78:	4b09      	ldr	r3, [pc, #36]	; (8012ba0 <HAL_RCC_GetClockConfig+0x5c>)
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	08db      	lsrs	r3, r3, #3
 8012b7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012b86:	4b07      	ldr	r3, [pc, #28]	; (8012ba4 <HAL_RCC_GetClockConfig+0x60>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f003 0207 	and.w	r2, r3, #7
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	601a      	str	r2, [r3, #0]
}
 8012b92:	bf00      	nop
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	40023800 	.word	0x40023800
 8012ba4:	40023c00 	.word	0x40023c00

08012ba8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8012bac:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bb4:	2b80      	cmp	r3, #128	; 0x80
 8012bb6:	d104      	bne.n	8012bc2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8012bb8:	f000 f80a 	bl	8012bd0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8012bbc:	4b03      	ldr	r3, [pc, #12]	; (8012bcc <HAL_RCC_NMI_IRQHandler+0x24>)
 8012bbe:	2280      	movs	r2, #128	; 0x80
 8012bc0:	701a      	strb	r2, [r3, #0]
  }
}
 8012bc2:	bf00      	nop
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	40023800 	.word	0x40023800
 8012bcc:	4002380e 	.word	0x4002380e

08012bd0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8012bd4:	bf00      	nop
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b086      	sub	sp, #24
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012be6:	2300      	movs	r3, #0
 8012be8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8012bea:	2300      	movs	r3, #0
 8012bec:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f003 0301 	and.w	r3, r3, #1
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d105      	bne.n	8012c06 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d035      	beq.n	8012c72 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8012c06:	4b62      	ldr	r3, [pc, #392]	; (8012d90 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012c08:	2200      	movs	r2, #0
 8012c0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012c0c:	f7f4 f982 	bl	8006f14 <HAL_GetTick>
 8012c10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012c12:	e008      	b.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012c14:	f7f4 f97e 	bl	8006f14 <HAL_GetTick>
 8012c18:	4602      	mov	r2, r0
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	1ad3      	subs	r3, r2, r3
 8012c1e:	2b02      	cmp	r3, #2
 8012c20:	d901      	bls.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012c22:	2303      	movs	r3, #3
 8012c24:	e0b0      	b.n	8012d88 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012c26:	4b5b      	ldr	r3, [pc, #364]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1f0      	bne.n	8012c14 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	019a      	lsls	r2, r3, #6
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	071b      	lsls	r3, r3, #28
 8012c3e:	4955      	ldr	r1, [pc, #340]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012c40:	4313      	orrs	r3, r2
 8012c42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8012c46:	4b52      	ldr	r3, [pc, #328]	; (8012d90 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012c48:	2201      	movs	r2, #1
 8012c4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012c4c:	f7f4 f962 	bl	8006f14 <HAL_GetTick>
 8012c50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012c52:	e008      	b.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012c54:	f7f4 f95e 	bl	8006f14 <HAL_GetTick>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	2b02      	cmp	r3, #2
 8012c60:	d901      	bls.n	8012c66 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012c62:	2303      	movs	r3, #3
 8012c64:	e090      	b.n	8012d88 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012c66:	4b4b      	ldr	r3, [pc, #300]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d0f0      	beq.n	8012c54 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f003 0302 	and.w	r3, r3, #2
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	f000 8083 	beq.w	8012d86 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8012c80:	2300      	movs	r3, #0
 8012c82:	60fb      	str	r3, [r7, #12]
 8012c84:	4b43      	ldr	r3, [pc, #268]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c88:	4a42      	ldr	r2, [pc, #264]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8012c90:	4b40      	ldr	r3, [pc, #256]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c98:	60fb      	str	r3, [r7, #12]
 8012c9a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8012c9c:	4b3e      	ldr	r3, [pc, #248]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a3d      	ldr	r2, [pc, #244]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ca6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012ca8:	f7f4 f934 	bl	8006f14 <HAL_GetTick>
 8012cac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012cae:	e008      	b.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012cb0:	f7f4 f930 	bl	8006f14 <HAL_GetTick>
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	2b02      	cmp	r3, #2
 8012cbc:	d901      	bls.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8012cbe:	2303      	movs	r3, #3
 8012cc0:	e062      	b.n	8012d88 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012cc2:	4b35      	ldr	r3, [pc, #212]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0f0      	beq.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012cce:	4b31      	ldr	r3, [pc, #196]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012cd6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d02f      	beq.n	8012d3e <HAL_RCCEx_PeriphCLKConfig+0x160>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ce6:	693a      	ldr	r2, [r7, #16]
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d028      	beq.n	8012d3e <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012cec:	4b29      	ldr	r3, [pc, #164]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012cf4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012cf6:	4b29      	ldr	r3, [pc, #164]	; (8012d9c <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012cf8:	2201      	movs	r2, #1
 8012cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012cfc:	4b27      	ldr	r3, [pc, #156]	; (8012d9c <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012d02:	4a24      	ldr	r2, [pc, #144]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012d08:	4b22      	ldr	r3, [pc, #136]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d0c:	f003 0301 	and.w	r3, r3, #1
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d114      	bne.n	8012d3e <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012d14:	f7f4 f8fe 	bl	8006f14 <HAL_GetTick>
 8012d18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d1a:	e00a      	b.n	8012d32 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d1c:	f7f4 f8fa 	bl	8006f14 <HAL_GetTick>
 8012d20:	4602      	mov	r2, r0
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	1ad3      	subs	r3, r2, r3
 8012d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d2a:	4293      	cmp	r3, r2
 8012d2c:	d901      	bls.n	8012d32 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012d2e:	2303      	movs	r3, #3
 8012d30:	e02a      	b.n	8012d88 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d32:	4b18      	ldr	r3, [pc, #96]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d36:	f003 0302 	and.w	r3, r3, #2
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d0ee      	beq.n	8012d1c <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012d4a:	d10d      	bne.n	8012d68 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8012d4c:	4b11      	ldr	r3, [pc, #68]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d4e:	689b      	ldr	r3, [r3, #8]
 8012d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d60:	490c      	ldr	r1, [pc, #48]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d62:	4313      	orrs	r3, r2
 8012d64:	608b      	str	r3, [r1, #8]
 8012d66:	e005      	b.n	8012d74 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012d68:	4b0a      	ldr	r3, [pc, #40]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d6a:	689b      	ldr	r3, [r3, #8]
 8012d6c:	4a09      	ldr	r2, [pc, #36]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012d72:	6093      	str	r3, [r2, #8]
 8012d74:	4b07      	ldr	r3, [pc, #28]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d80:	4904      	ldr	r1, [pc, #16]	; (8012d94 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d82:	4313      	orrs	r3, r2
 8012d84:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3718      	adds	r7, #24
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	42470068 	.word	0x42470068
 8012d94:	40023800 	.word	0x40023800
 8012d98:	40007000 	.word	0x40007000
 8012d9c:	42470e40 	.word	0x42470e40

08012da0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2203      	movs	r2, #3
 8012dac:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8012dae:	4b11      	ldr	r3, [pc, #68]	; (8012df4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012db4:	099b      	lsrs	r3, r3, #6
 8012db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012dbe:	4b0d      	ldr	r3, [pc, #52]	; (8012df4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012dc4:	0f1b      	lsrs	r3, r3, #28
 8012dc6:	f003 0207 	and.w	r2, r3, #7
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8012dce:	4b09      	ldr	r3, [pc, #36]	; (8012df4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012dd6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8012dd8:	4b06      	ldr	r3, [pc, #24]	; (8012df4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ddc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	431a      	orrs	r2, r3
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012de8:	bf00      	nop
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr
 8012df4:	40023800 	.word	0x40023800

08012df8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b087      	sub	sp, #28
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012e00:	2300      	movs	r3, #0
 8012e02:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8012e04:	2300      	movs	r3, #0
 8012e06:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d13e      	bne.n	8012e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8012e16:	4b23      	ldr	r3, [pc, #140]	; (8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012e1e:	60fb      	str	r3, [r7, #12]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d005      	beq.n	8012e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d12f      	bne.n	8012e8c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012e2c:	4b1e      	ldr	r3, [pc, #120]	; (8012ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012e2e:	617b      	str	r3, [r7, #20]
          break;
 8012e30:	e02f      	b.n	8012e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012e32:	4b1c      	ldr	r3, [pc, #112]	; (8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012e34:	685b      	ldr	r3, [r3, #4]
 8012e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012e3e:	d108      	bne.n	8012e52 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012e40:	4b18      	ldr	r3, [pc, #96]	; (8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e48:	4a18      	ldr	r2, [pc, #96]	; (8012eac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8012e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e4e:	613b      	str	r3, [r7, #16]
 8012e50:	e007      	b.n	8012e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012e52:	4b14      	ldr	r3, [pc, #80]	; (8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e5a:	4a15      	ldr	r2, [pc, #84]	; (8012eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e60:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012e62:	4b10      	ldr	r3, [pc, #64]	; (8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e68:	099b      	lsrs	r3, r3, #6
 8012e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	fb02 f303 	mul.w	r3, r2, r3
 8012e74:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8012e76:	4b0b      	ldr	r3, [pc, #44]	; (8012ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e7c:	0f1b      	lsrs	r3, r3, #28
 8012e7e:	f003 0307 	and.w	r3, r3, #7
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e88:	617b      	str	r3, [r7, #20]
          break;
 8012e8a:	e002      	b.n	8012e92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	617b      	str	r3, [r7, #20]
          break;
 8012e90:	bf00      	nop
        }
      }
      break;
 8012e92:	bf00      	nop
    }
  }
  return frequency;
 8012e94:	697b      	ldr	r3, [r7, #20]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	371c      	adds	r7, #28
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	40023800 	.word	0x40023800
 8012ea8:	00bb8000 	.word	0x00bb8000
 8012eac:	007a1200 	.word	0x007a1200
 8012eb0:	00f42400 	.word	0x00f42400

08012eb4 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012ebc:	4b1d      	ldr	r3, [pc, #116]	; (8012f34 <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012ec2:	f7f4 f827 	bl	8006f14 <HAL_GetTick>
 8012ec6:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012ec8:	e008      	b.n	8012edc <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012eca:	f7f4 f823 	bl	8006f14 <HAL_GetTick>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	2b02      	cmp	r3, #2
 8012ed6:	d901      	bls.n	8012edc <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012ed8:	2303      	movs	r3, #3
 8012eda:	e026      	b.n	8012f2a <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012edc:	4b16      	ldr	r3, [pc, #88]	; (8012f38 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d1f0      	bne.n	8012eca <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	019a      	lsls	r2, r3, #6
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	071b      	lsls	r3, r3, #28
 8012ef4:	4910      	ldr	r1, [pc, #64]	; (8012f38 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012efc:	4b0d      	ldr	r3, [pc, #52]	; (8012f34 <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012efe:	2201      	movs	r2, #1
 8012f00:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 8012f02:	f7f4 f807 	bl	8006f14 <HAL_GetTick>
 8012f06:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012f08:	e008      	b.n	8012f1c <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012f0a:	f7f4 f803 	bl	8006f14 <HAL_GetTick>
 8012f0e:	4602      	mov	r2, r0
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	2b02      	cmp	r3, #2
 8012f16:	d901      	bls.n	8012f1c <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012f18:	2303      	movs	r3, #3
 8012f1a:	e006      	b.n	8012f2a <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012f1c:	4b06      	ldr	r3, [pc, #24]	; (8012f38 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d0f0      	beq.n	8012f0a <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3710      	adds	r7, #16
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
 8012f32:	bf00      	nop
 8012f34:	42470068 	.word	0x42470068
 8012f38:	40023800 	.word	0x40023800

08012f3c <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012f42:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8012f44:	2200      	movs	r2, #0
 8012f46:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012f48:	f7f3 ffe4 	bl	8006f14 <HAL_GetTick>
 8012f4c:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012f4e:	e008      	b.n	8012f62 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012f50:	f7f3 ffe0 	bl	8006f14 <HAL_GetTick>
 8012f54:	4602      	mov	r2, r0
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	2b02      	cmp	r3, #2
 8012f5c:	d901      	bls.n	8012f62 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012f5e:	2303      	movs	r3, #3
 8012f60:	e006      	b.n	8012f70 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012f62:	4b06      	ldr	r3, [pc, #24]	; (8012f7c <HAL_RCCEx_DisablePLLI2S+0x40>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d1f0      	bne.n	8012f50 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8012f6e:	2300      	movs	r3, #0
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	42470068 	.word	0x42470068
 8012f7c:	40023800 	.word	0x40023800

08012f80 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b082      	sub	sp, #8
 8012f84:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012f86:	f7f3 ffc5 	bl	8006f14 <HAL_GetTick>
 8012f8a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8012f8c:	4b5d      	ldr	r3, [pc, #372]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4a5c      	ldr	r2, [pc, #368]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012f92:	f043 0301 	orr.w	r3, r3, #1
 8012f96:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012f98:	e008      	b.n	8012fac <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012f9a:	f7f3 ffbb 	bl	8006f14 <HAL_GetTick>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	1ad3      	subs	r3, r2, r3
 8012fa4:	2b02      	cmp	r3, #2
 8012fa6:	d901      	bls.n	8012fac <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8012fa8:	2303      	movs	r3, #3
 8012faa:	e0a7      	b.n	80130fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012fac:	4b55      	ldr	r3, [pc, #340]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f003 0302 	and.w	r3, r3, #2
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d0f0      	beq.n	8012f9a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8012fb8:	4b52      	ldr	r3, [pc, #328]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a51      	ldr	r2, [pc, #324]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012fc4:	f7f3 ffa6 	bl	8006f14 <HAL_GetTick>
 8012fc8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8012fca:	4b4e      	ldr	r3, [pc, #312]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012fcc:	2200      	movs	r2, #0
 8012fce:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012fd0:	e00a      	b.n	8012fe8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fd2:	f7f3 ff9f 	bl	8006f14 <HAL_GetTick>
 8012fd6:	4602      	mov	r2, r0
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d901      	bls.n	8012fe8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	e089      	b.n	80130fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012fe8:	4b46      	ldr	r3, [pc, #280]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	f003 030c 	and.w	r3, r3, #12
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d1ee      	bne.n	8012fd2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012ff4:	f7f3 ff8e 	bl	8006f14 <HAL_GetTick>
 8012ff8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8012ffa:	4b42      	ldr	r3, [pc, #264]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	4a41      	ldr	r2, [pc, #260]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8013000:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8013004:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8013006:	e008      	b.n	801301a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013008:	f7f3 ff84 	bl	8006f14 <HAL_GetTick>
 801300c:	4602      	mov	r2, r0
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	2b64      	cmp	r3, #100	; 0x64
 8013014:	d901      	bls.n	801301a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8013016:	2303      	movs	r3, #3
 8013018:	e070      	b.n	80130fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801301a:	4b3a      	ldr	r3, [pc, #232]	; (8013104 <HAL_RCC_DeInit+0x184>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013022:	2b00      	cmp	r3, #0
 8013024:	d1f0      	bne.n	8013008 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8013026:	f7f3 ff75 	bl	8006f14 <HAL_GetTick>
 801302a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801302c:	4b35      	ldr	r3, [pc, #212]	; (8013104 <HAL_RCC_DeInit+0x184>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	4a34      	ldr	r2, [pc, #208]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8013032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013036:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8013038:	e008      	b.n	801304c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801303a:	f7f3 ff6b 	bl	8006f14 <HAL_GetTick>
 801303e:	4602      	mov	r2, r0
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	2b02      	cmp	r3, #2
 8013046:	d901      	bls.n	801304c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8013048:	2303      	movs	r3, #3
 801304a:	e057      	b.n	80130fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 801304c:	4b2d      	ldr	r3, [pc, #180]	; (8013104 <HAL_RCC_DeInit+0x184>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013054:	2b00      	cmp	r3, #0
 8013056:	d1f0      	bne.n	801303a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8013058:	f7f3 ff5c 	bl	8006f14 <HAL_GetTick>
 801305c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 801305e:	4b29      	ldr	r3, [pc, #164]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4a28      	ldr	r2, [pc, #160]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8013064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013068:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801306a:	e008      	b.n	801307e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801306c:	f7f3 ff52 	bl	8006f14 <HAL_GetTick>
 8013070:	4602      	mov	r2, r0
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	2b02      	cmp	r3, #2
 8013078:	d901      	bls.n	801307e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 801307a:	2303      	movs	r3, #3
 801307c:	e03e      	b.n	80130fc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801307e:	4b21      	ldr	r3, [pc, #132]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013086:	2b00      	cmp	r3, #0
 8013088:	d1f0      	bne.n	801306c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 801308a:	4b1e      	ldr	r3, [pc, #120]	; (8013104 <HAL_RCC_DeInit+0x184>)
 801308c:	4a1e      	ldr	r2, [pc, #120]	; (8013108 <HAL_RCC_DeInit+0x188>)
 801308e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8013090:	4b1c      	ldr	r3, [pc, #112]	; (8013104 <HAL_RCC_DeInit+0x184>)
 8013092:	4a1e      	ldr	r2, [pc, #120]	; (801310c <HAL_RCC_DeInit+0x18c>)
 8013094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8013098:	4b1a      	ldr	r3, [pc, #104]	; (8013104 <HAL_RCC_DeInit+0x184>)
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	4a19      	ldr	r2, [pc, #100]	; (8013104 <HAL_RCC_DeInit+0x184>)
 801309e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80130a2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80130a4:	4b17      	ldr	r3, [pc, #92]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130a6:	68db      	ldr	r3, [r3, #12]
 80130a8:	4a16      	ldr	r2, [pc, #88]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80130ae:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80130b0:	4b14      	ldr	r3, [pc, #80]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130b2:	68db      	ldr	r3, [r3, #12]
 80130b4:	4a13      	ldr	r2, [pc, #76]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130b6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80130ba:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80130bc:	4b11      	ldr	r3, [pc, #68]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	4a10      	ldr	r2, [pc, #64]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80130c6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80130c8:	4b0e      	ldr	r3, [pc, #56]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130cc:	4a0d      	ldr	r2, [pc, #52]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130ce:	f023 0301 	bic.w	r3, r3, #1
 80130d2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80130d4:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130d8:	4a0a      	ldr	r2, [pc, #40]	; (8013104 <HAL_RCC_DeInit+0x184>)
 80130da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80130de:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80130e0:	4b0b      	ldr	r3, [pc, #44]	; (8013110 <HAL_RCC_DeInit+0x190>)
 80130e2:	4a0c      	ldr	r2, [pc, #48]	; (8013114 <HAL_RCC_DeInit+0x194>)
 80130e4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80130e6:	4b0c      	ldr	r3, [pc, #48]	; (8013118 <HAL_RCC_DeInit+0x198>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f3 fecd 	bl	8006e8a <HAL_InitTick>
 80130f0:	4603      	mov	r3, r0
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d001      	beq.n	80130fa <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80130f6:	2301      	movs	r3, #1
 80130f8:	e000      	b.n	80130fc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80130fa:	2300      	movs	r3, #0
  }
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3708      	adds	r7, #8
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	40023800 	.word	0x40023800
 8013108:	04003010 	.word	0x04003010
 801310c:	20003000 	.word	0x20003000
 8013110:	20000058 	.word	0x20000058
 8013114:	00f42400 	.word	0x00f42400
 8013118:	2000005c 	.word	0x2000005c

0801311c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d101      	bne.n	801312e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801312a:	2301      	movs	r3, #1
 801312c:	e07b      	b.n	8013226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013132:	2b00      	cmp	r3, #0
 8013134:	d108      	bne.n	8013148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	685b      	ldr	r3, [r3, #4]
 801313a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801313e:	d009      	beq.n	8013154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2200      	movs	r2, #0
 8013144:	61da      	str	r2, [r3, #28]
 8013146:	e005      	b.n	8013154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2200      	movs	r2, #0
 801314c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2200      	movs	r2, #0
 8013158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013160:	b2db      	uxtb	r3, r3
 8013162:	2b00      	cmp	r3, #0
 8013164:	d106      	bne.n	8013174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2200      	movs	r2, #0
 801316a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f7f2 fa9e 	bl	80056b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2202      	movs	r2, #2
 8013178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801318a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801319c:	431a      	orrs	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	68db      	ldr	r3, [r3, #12]
 80131a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80131a6:	431a      	orrs	r2, r3
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	691b      	ldr	r3, [r3, #16]
 80131ac:	f003 0302 	and.w	r3, r3, #2
 80131b0:	431a      	orrs	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	695b      	ldr	r3, [r3, #20]
 80131b6:	f003 0301 	and.w	r3, r3, #1
 80131ba:	431a      	orrs	r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	699b      	ldr	r3, [r3, #24]
 80131c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80131c4:	431a      	orrs	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	69db      	ldr	r3, [r3, #28]
 80131ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80131ce:	431a      	orrs	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6a1b      	ldr	r3, [r3, #32]
 80131d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131d8:	ea42 0103 	orr.w	r1, r2, r3
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	430a      	orrs	r2, r1
 80131ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	699b      	ldr	r3, [r3, #24]
 80131f0:	0c1b      	lsrs	r3, r3, #16
 80131f2:	f003 0104 	and.w	r1, r3, #4
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fa:	f003 0210 	and.w	r2, r3, #16
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	430a      	orrs	r2, r1
 8013204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	69da      	ldr	r2, [r3, #28]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2200      	movs	r2, #0
 801321a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2201      	movs	r2, #1
 8013220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3708      	adds	r7, #8
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b082      	sub	sp, #8
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d101      	bne.n	8013240 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 801323c:	2301      	movs	r3, #1
 801323e:	e01a      	b.n	8013276 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2202      	movs	r2, #2
 8013244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013256:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7f2 fb61 	bl	8005920 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2200      	movs	r2, #0
 8013262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2200      	movs	r2, #0
 8013268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b088      	sub	sp, #32
 8013282:	af00      	add	r7, sp, #0
 8013284:	60f8      	str	r0, [r7, #12]
 8013286:	60b9      	str	r1, [r7, #8]
 8013288:	603b      	str	r3, [r7, #0]
 801328a:	4613      	mov	r3, r2
 801328c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801328e:	2300      	movs	r3, #0
 8013290:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013298:	2b01      	cmp	r3, #1
 801329a:	d101      	bne.n	80132a0 <HAL_SPI_Transmit+0x22>
 801329c:	2302      	movs	r3, #2
 801329e:	e126      	b.n	80134ee <HAL_SPI_Transmit+0x270>
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2201      	movs	r2, #1
 80132a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80132a8:	f7f3 fe34 	bl	8006f14 <HAL_GetTick>
 80132ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80132ae:	88fb      	ldrh	r3, [r7, #6]
 80132b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d002      	beq.n	80132c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80132be:	2302      	movs	r3, #2
 80132c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80132c2:	e10b      	b.n	80134dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d002      	beq.n	80132d0 <HAL_SPI_Transmit+0x52>
 80132ca:	88fb      	ldrh	r3, [r7, #6]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d102      	bne.n	80132d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80132d4:	e102      	b.n	80134dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2203      	movs	r2, #3
 80132da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2200      	movs	r2, #0
 80132e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	88fa      	ldrh	r2, [r7, #6]
 80132ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	88fa      	ldrh	r2, [r7, #6]
 80132f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2200      	movs	r2, #0
 80132fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2200      	movs	r2, #0
 8013300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2200      	movs	r2, #0
 8013306:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2200      	movs	r2, #0
 801330c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	2200      	movs	r2, #0
 8013312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801331c:	d10f      	bne.n	801333e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801332c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801333c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013348:	2b40      	cmp	r3, #64	; 0x40
 801334a:	d007      	beq.n	801335c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801335a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013364:	d14b      	bne.n	80133fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d002      	beq.n	8013374 <HAL_SPI_Transmit+0xf6>
 801336e:	8afb      	ldrh	r3, [r7, #22]
 8013370:	2b01      	cmp	r3, #1
 8013372:	d13e      	bne.n	80133f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013378:	881a      	ldrh	r2, [r3, #0]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013384:	1c9a      	adds	r2, r3, #2
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801338e:	b29b      	uxth	r3, r3
 8013390:	3b01      	subs	r3, #1
 8013392:	b29a      	uxth	r2, r3
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013398:	e02b      	b.n	80133f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	f003 0302 	and.w	r3, r3, #2
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	d112      	bne.n	80133ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ac:	881a      	ldrh	r2, [r3, #0]
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133b8:	1c9a      	adds	r2, r3, #2
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	3b01      	subs	r3, #1
 80133c6:	b29a      	uxth	r2, r3
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80133cc:	e011      	b.n	80133f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80133ce:	f7f3 fda1 	bl	8006f14 <HAL_GetTick>
 80133d2:	4602      	mov	r2, r0
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	683a      	ldr	r2, [r7, #0]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d803      	bhi.n	80133e6 <HAL_SPI_Transmit+0x168>
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e4:	d102      	bne.n	80133ec <HAL_SPI_Transmit+0x16e>
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d102      	bne.n	80133f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80133ec:	2303      	movs	r3, #3
 80133ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80133f0:	e074      	b.n	80134dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1ce      	bne.n	801339a <HAL_SPI_Transmit+0x11c>
 80133fc:	e04c      	b.n	8013498 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d002      	beq.n	801340c <HAL_SPI_Transmit+0x18e>
 8013406:	8afb      	ldrh	r3, [r7, #22]
 8013408:	2b01      	cmp	r3, #1
 801340a:	d140      	bne.n	801348e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	330c      	adds	r3, #12
 8013416:	7812      	ldrb	r2, [r2, #0]
 8013418:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801341e:	1c5a      	adds	r2, r3, #1
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013428:	b29b      	uxth	r3, r3
 801342a:	3b01      	subs	r3, #1
 801342c:	b29a      	uxth	r2, r3
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013432:	e02c      	b.n	801348e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	f003 0302 	and.w	r3, r3, #2
 801343e:	2b02      	cmp	r3, #2
 8013440:	d113      	bne.n	801346a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	330c      	adds	r3, #12
 801344c:	7812      	ldrb	r2, [r2, #0]
 801344e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013454:	1c5a      	adds	r2, r3, #1
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801345e:	b29b      	uxth	r3, r3
 8013460:	3b01      	subs	r3, #1
 8013462:	b29a      	uxth	r2, r3
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	86da      	strh	r2, [r3, #54]	; 0x36
 8013468:	e011      	b.n	801348e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801346a:	f7f3 fd53 	bl	8006f14 <HAL_GetTick>
 801346e:	4602      	mov	r2, r0
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	1ad3      	subs	r3, r2, r3
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	429a      	cmp	r2, r3
 8013478:	d803      	bhi.n	8013482 <HAL_SPI_Transmit+0x204>
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013480:	d102      	bne.n	8013488 <HAL_SPI_Transmit+0x20a>
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d102      	bne.n	801348e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013488:	2303      	movs	r3, #3
 801348a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801348c:	e026      	b.n	80134dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013492:	b29b      	uxth	r3, r3
 8013494:	2b00      	cmp	r3, #0
 8013496:	d1cd      	bne.n	8013434 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013498:	69ba      	ldr	r2, [r7, #24]
 801349a:	6839      	ldr	r1, [r7, #0]
 801349c:	68f8      	ldr	r0, [r7, #12]
 801349e:	f001 ff3e 	bl	801531e <SPI_EndRxTxTransaction>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d002      	beq.n	80134ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2220      	movs	r2, #32
 80134ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10a      	bne.n	80134cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80134b6:	2300      	movs	r3, #0
 80134b8:	613b      	str	r3, [r7, #16]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	613b      	str	r3, [r7, #16]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	689b      	ldr	r3, [r3, #8]
 80134c8:	613b      	str	r3, [r7, #16]
 80134ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80134d4:	2301      	movs	r3, #1
 80134d6:	77fb      	strb	r3, [r7, #31]
 80134d8:	e000      	b.n	80134dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80134da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2201      	movs	r2, #1
 80134e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2200      	movs	r2, #0
 80134e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80134ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3720      	adds	r7, #32
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}

080134f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b088      	sub	sp, #32
 80134fa:	af02      	add	r7, sp, #8
 80134fc:	60f8      	str	r0, [r7, #12]
 80134fe:	60b9      	str	r1, [r7, #8]
 8013500:	603b      	str	r3, [r7, #0]
 8013502:	4613      	mov	r3, r2
 8013504:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013506:	2300      	movs	r3, #0
 8013508:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013512:	d112      	bne.n	801353a <HAL_SPI_Receive+0x44>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d10e      	bne.n	801353a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2204      	movs	r2, #4
 8013520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013524:	88fa      	ldrh	r2, [r7, #6]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	9300      	str	r3, [sp, #0]
 801352a:	4613      	mov	r3, r2
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	68b9      	ldr	r1, [r7, #8]
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f000 f8f1 	bl	8013718 <HAL_SPI_TransmitReceive>
 8013536:	4603      	mov	r3, r0
 8013538:	e0ea      	b.n	8013710 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013540:	2b01      	cmp	r3, #1
 8013542:	d101      	bne.n	8013548 <HAL_SPI_Receive+0x52>
 8013544:	2302      	movs	r3, #2
 8013546:	e0e3      	b.n	8013710 <HAL_SPI_Receive+0x21a>
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2201      	movs	r2, #1
 801354c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013550:	f7f3 fce0 	bl	8006f14 <HAL_GetTick>
 8013554:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801355c:	b2db      	uxtb	r3, r3
 801355e:	2b01      	cmp	r3, #1
 8013560:	d002      	beq.n	8013568 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013562:	2302      	movs	r3, #2
 8013564:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013566:	e0ca      	b.n	80136fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d002      	beq.n	8013574 <HAL_SPI_Receive+0x7e>
 801356e:	88fb      	ldrh	r3, [r7, #6]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d102      	bne.n	801357a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013574:	2301      	movs	r3, #1
 8013576:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013578:	e0c1      	b.n	80136fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2204      	movs	r2, #4
 801357e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	2200      	movs	r2, #0
 8013586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	68ba      	ldr	r2, [r7, #8]
 801358c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	88fa      	ldrh	r2, [r7, #6]
 8013592:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	88fa      	ldrh	r2, [r7, #6]
 8013598:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2200      	movs	r2, #0
 801359e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	2200      	movs	r2, #0
 80135a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2200      	movs	r2, #0
 80135aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2200      	movs	r2, #0
 80135b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2200      	movs	r2, #0
 80135b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	689b      	ldr	r3, [r3, #8]
 80135bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135c0:	d10f      	bne.n	80135e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80135d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80135e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135ec:	2b40      	cmp	r3, #64	; 0x40
 80135ee:	d007      	beq.n	8013600 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	68db      	ldr	r3, [r3, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d162      	bne.n	80136ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013608:	e02e      	b.n	8013668 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	689b      	ldr	r3, [r3, #8]
 8013610:	f003 0301 	and.w	r3, r3, #1
 8013614:	2b01      	cmp	r3, #1
 8013616:	d115      	bne.n	8013644 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	f103 020c 	add.w	r2, r3, #12
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013624:	7812      	ldrb	r2, [r2, #0]
 8013626:	b2d2      	uxtb	r2, r2
 8013628:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801362e:	1c5a      	adds	r2, r3, #1
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013638:	b29b      	uxth	r3, r3
 801363a:	3b01      	subs	r3, #1
 801363c:	b29a      	uxth	r2, r3
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013642:	e011      	b.n	8013668 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013644:	f7f3 fc66 	bl	8006f14 <HAL_GetTick>
 8013648:	4602      	mov	r2, r0
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	683a      	ldr	r2, [r7, #0]
 8013650:	429a      	cmp	r2, r3
 8013652:	d803      	bhi.n	801365c <HAL_SPI_Receive+0x166>
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801365a:	d102      	bne.n	8013662 <HAL_SPI_Receive+0x16c>
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d102      	bne.n	8013668 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8013662:	2303      	movs	r3, #3
 8013664:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013666:	e04a      	b.n	80136fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801366c:	b29b      	uxth	r3, r3
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1cb      	bne.n	801360a <HAL_SPI_Receive+0x114>
 8013672:	e031      	b.n	80136d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	f003 0301 	and.w	r3, r3, #1
 801367e:	2b01      	cmp	r3, #1
 8013680:	d113      	bne.n	80136aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	68da      	ldr	r2, [r3, #12]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801368c:	b292      	uxth	r2, r2
 801368e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013694:	1c9a      	adds	r2, r3, #2
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801369e:	b29b      	uxth	r3, r3
 80136a0:	3b01      	subs	r3, #1
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80136a8:	e011      	b.n	80136ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80136aa:	f7f3 fc33 	bl	8006f14 <HAL_GetTick>
 80136ae:	4602      	mov	r2, r0
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	683a      	ldr	r2, [r7, #0]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d803      	bhi.n	80136c2 <HAL_SPI_Receive+0x1cc>
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c0:	d102      	bne.n	80136c8 <HAL_SPI_Receive+0x1d2>
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d102      	bne.n	80136ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80136c8:	2303      	movs	r3, #3
 80136ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80136cc:	e017      	b.n	80136fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1cd      	bne.n	8013674 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80136d8:	693a      	ldr	r2, [r7, #16]
 80136da:	6839      	ldr	r1, [r7, #0]
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f001 fdb9 	bl	8015254 <SPI_EndRxTransaction>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d002      	beq.n	80136ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2220      	movs	r2, #32
 80136ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80136f6:	2301      	movs	r3, #1
 80136f8:	75fb      	strb	r3, [r7, #23]
 80136fa:	e000      	b.n	80136fe <HAL_SPI_Receive+0x208>
  }

error :
 80136fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2201      	movs	r2, #1
 8013702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2200      	movs	r2, #0
 801370a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013710:	4618      	mov	r0, r3
 8013712:	3718      	adds	r7, #24
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b08c      	sub	sp, #48	; 0x30
 801371c:	af00      	add	r7, sp, #0
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013726:	2301      	movs	r3, #1
 8013728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801372a:	2300      	movs	r3, #0
 801372c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013736:	2b01      	cmp	r3, #1
 8013738:	d101      	bne.n	801373e <HAL_SPI_TransmitReceive+0x26>
 801373a:	2302      	movs	r3, #2
 801373c:	e18a      	b.n	8013a54 <HAL_SPI_TransmitReceive+0x33c>
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2201      	movs	r2, #1
 8013742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013746:	f7f3 fbe5 	bl	8006f14 <HAL_GetTick>
 801374a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801375c:	887b      	ldrh	r3, [r7, #2]
 801375e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013764:	2b01      	cmp	r3, #1
 8013766:	d00f      	beq.n	8013788 <HAL_SPI_TransmitReceive+0x70>
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801376e:	d107      	bne.n	8013780 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	689b      	ldr	r3, [r3, #8]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d103      	bne.n	8013780 <HAL_SPI_TransmitReceive+0x68>
 8013778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801377c:	2b04      	cmp	r3, #4
 801377e:	d003      	beq.n	8013788 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013780:	2302      	movs	r3, #2
 8013782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013786:	e15b      	b.n	8013a40 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d005      	beq.n	801379a <HAL_SPI_TransmitReceive+0x82>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d002      	beq.n	801379a <HAL_SPI_TransmitReceive+0x82>
 8013794:	887b      	ldrh	r3, [r7, #2]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d103      	bne.n	80137a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801379a:	2301      	movs	r3, #1
 801379c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80137a0:	e14e      	b.n	8013a40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80137a8:	b2db      	uxtb	r3, r3
 80137aa:	2b04      	cmp	r3, #4
 80137ac:	d003      	beq.n	80137b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2205      	movs	r2, #5
 80137b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2200      	movs	r2, #0
 80137ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	887a      	ldrh	r2, [r7, #2]
 80137c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	887a      	ldrh	r2, [r7, #2]
 80137cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	68ba      	ldr	r2, [r7, #8]
 80137d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	887a      	ldrh	r2, [r7, #2]
 80137d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	887a      	ldrh	r2, [r7, #2]
 80137de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2200      	movs	r2, #0
 80137e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2200      	movs	r2, #0
 80137ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137f6:	2b40      	cmp	r3, #64	; 0x40
 80137f8:	d007      	beq.n	801380a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	681a      	ldr	r2, [r3, #0]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013808:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	68db      	ldr	r3, [r3, #12]
 801380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013812:	d178      	bne.n	8013906 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	685b      	ldr	r3, [r3, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d002      	beq.n	8013822 <HAL_SPI_TransmitReceive+0x10a>
 801381c:	8b7b      	ldrh	r3, [r7, #26]
 801381e:	2b01      	cmp	r3, #1
 8013820:	d166      	bne.n	80138f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013826:	881a      	ldrh	r2, [r3, #0]
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013832:	1c9a      	adds	r2, r3, #2
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801383c:	b29b      	uxth	r3, r3
 801383e:	3b01      	subs	r3, #1
 8013840:	b29a      	uxth	r2, r3
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013846:	e053      	b.n	80138f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	689b      	ldr	r3, [r3, #8]
 801384e:	f003 0302 	and.w	r3, r3, #2
 8013852:	2b02      	cmp	r3, #2
 8013854:	d11b      	bne.n	801388e <HAL_SPI_TransmitReceive+0x176>
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801385a:	b29b      	uxth	r3, r3
 801385c:	2b00      	cmp	r3, #0
 801385e:	d016      	beq.n	801388e <HAL_SPI_TransmitReceive+0x176>
 8013860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013862:	2b01      	cmp	r3, #1
 8013864:	d113      	bne.n	801388e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386a:	881a      	ldrh	r2, [r3, #0]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013876:	1c9a      	adds	r2, r3, #2
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013880:	b29b      	uxth	r3, r3
 8013882:	3b01      	subs	r3, #1
 8013884:	b29a      	uxth	r2, r3
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801388a:	2300      	movs	r3, #0
 801388c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	689b      	ldr	r3, [r3, #8]
 8013894:	f003 0301 	and.w	r3, r3, #1
 8013898:	2b01      	cmp	r3, #1
 801389a:	d119      	bne.n	80138d0 <HAL_SPI_TransmitReceive+0x1b8>
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d014      	beq.n	80138d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	68da      	ldr	r2, [r3, #12]
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138b0:	b292      	uxth	r2, r2
 80138b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138b8:	1c9a      	adds	r2, r3, #2
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	3b01      	subs	r3, #1
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80138cc:	2301      	movs	r3, #1
 80138ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80138d0:	f7f3 fb20 	bl	8006f14 <HAL_GetTick>
 80138d4:	4602      	mov	r2, r0
 80138d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138dc:	429a      	cmp	r2, r3
 80138de:	d807      	bhi.n	80138f0 <HAL_SPI_TransmitReceive+0x1d8>
 80138e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e6:	d003      	beq.n	80138f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80138e8:	2303      	movs	r3, #3
 80138ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80138ee:	e0a7      	b.n	8013a40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d1a6      	bne.n	8013848 <HAL_SPI_TransmitReceive+0x130>
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138fe:	b29b      	uxth	r3, r3
 8013900:	2b00      	cmp	r3, #0
 8013902:	d1a1      	bne.n	8013848 <HAL_SPI_TransmitReceive+0x130>
 8013904:	e07c      	b.n	8013a00 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d002      	beq.n	8013914 <HAL_SPI_TransmitReceive+0x1fc>
 801390e:	8b7b      	ldrh	r3, [r7, #26]
 8013910:	2b01      	cmp	r3, #1
 8013912:	d16b      	bne.n	80139ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	330c      	adds	r3, #12
 801391e:	7812      	ldrb	r2, [r2, #0]
 8013920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013926:	1c5a      	adds	r2, r3, #1
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013930:	b29b      	uxth	r3, r3
 8013932:	3b01      	subs	r3, #1
 8013934:	b29a      	uxth	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801393a:	e057      	b.n	80139ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	689b      	ldr	r3, [r3, #8]
 8013942:	f003 0302 	and.w	r3, r3, #2
 8013946:	2b02      	cmp	r3, #2
 8013948:	d11c      	bne.n	8013984 <HAL_SPI_TransmitReceive+0x26c>
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801394e:	b29b      	uxth	r3, r3
 8013950:	2b00      	cmp	r3, #0
 8013952:	d017      	beq.n	8013984 <HAL_SPI_TransmitReceive+0x26c>
 8013954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013956:	2b01      	cmp	r3, #1
 8013958:	d114      	bne.n	8013984 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	330c      	adds	r3, #12
 8013964:	7812      	ldrb	r2, [r2, #0]
 8013966:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801396c:	1c5a      	adds	r2, r3, #1
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013976:	b29b      	uxth	r3, r3
 8013978:	3b01      	subs	r3, #1
 801397a:	b29a      	uxth	r2, r3
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013980:	2300      	movs	r3, #0
 8013982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	f003 0301 	and.w	r3, r3, #1
 801398e:	2b01      	cmp	r3, #1
 8013990:	d119      	bne.n	80139c6 <HAL_SPI_TransmitReceive+0x2ae>
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013996:	b29b      	uxth	r3, r3
 8013998:	2b00      	cmp	r3, #0
 801399a:	d014      	beq.n	80139c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	68da      	ldr	r2, [r3, #12]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139a6:	b2d2      	uxtb	r2, r2
 80139a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	3b01      	subs	r3, #1
 80139bc:	b29a      	uxth	r2, r3
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80139c2:	2301      	movs	r3, #1
 80139c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80139c6:	f7f3 faa5 	bl	8006f14 <HAL_GetTick>
 80139ca:	4602      	mov	r2, r0
 80139cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ce:	1ad3      	subs	r3, r2, r3
 80139d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d803      	bhi.n	80139de <HAL_SPI_TransmitReceive+0x2c6>
 80139d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139dc:	d102      	bne.n	80139e4 <HAL_SPI_TransmitReceive+0x2cc>
 80139de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d103      	bne.n	80139ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80139e4:	2303      	movs	r3, #3
 80139e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80139ea:	e029      	b.n	8013a40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d1a2      	bne.n	801393c <HAL_SPI_TransmitReceive+0x224>
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80139fa:	b29b      	uxth	r3, r3
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d19d      	bne.n	801393c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	f001 fc8a 	bl	801531e <SPI_EndRxTxTransaction>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d006      	beq.n	8013a1e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013a10:	2301      	movs	r3, #1
 8013a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2220      	movs	r2, #32
 8013a1a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013a1c:	e010      	b.n	8013a40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	689b      	ldr	r3, [r3, #8]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d10b      	bne.n	8013a3e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013a26:	2300      	movs	r3, #0
 8013a28:	617b      	str	r3, [r7, #20]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	617b      	str	r3, [r7, #20]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	689b      	ldr	r3, [r3, #8]
 8013a38:	617b      	str	r3, [r7, #20]
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	e000      	b.n	8013a40 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013a3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2201      	movs	r2, #1
 8013a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013a54:	4618      	mov	r0, r3
 8013a56:	3730      	adds	r7, #48	; 0x30
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b087      	sub	sp, #28
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	4613      	mov	r3, r2
 8013a68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d101      	bne.n	8013a7c <HAL_SPI_Transmit_IT+0x20>
 8013a78:	2302      	movs	r3, #2
 8013a7a:	e06f      	b.n	8013b5c <HAL_SPI_Transmit_IT+0x100>
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	2201      	movs	r2, #1
 8013a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d002      	beq.n	8013a90 <HAL_SPI_Transmit_IT+0x34>
 8013a8a:	88fb      	ldrh	r3, [r7, #6]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d102      	bne.n	8013a96 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8013a90:	2301      	movs	r3, #1
 8013a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a94:	e05d      	b.n	8013b52 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d002      	beq.n	8013aa8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8013aa2:	2302      	movs	r3, #2
 8013aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013aa6:	e054      	b.n	8013b52 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2203      	movs	r2, #3
 8013aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	68ba      	ldr	r2, [r7, #8]
 8013aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	88fa      	ldrh	r2, [r7, #6]
 8013ac0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	88fa      	ldrh	r2, [r7, #6]
 8013ac6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2200      	movs	r2, #0
 8013acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2200      	movs	r2, #0
 8013ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d003      	beq.n	8013af0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4a1f      	ldr	r2, [pc, #124]	; (8013b68 <HAL_SPI_Transmit_IT+0x10c>)
 8013aec:	645a      	str	r2, [r3, #68]	; 0x44
 8013aee:	e002      	b.n	8013af6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	4a1e      	ldr	r2, [pc, #120]	; (8013b6c <HAL_SPI_Transmit_IT+0x110>)
 8013af4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	689b      	ldr	r3, [r3, #8]
 8013afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013afe:	d10f      	bne.n	8013b20 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	681a      	ldr	r2, [r3, #0]
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	681a      	ldr	r2, [r3, #0]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013b1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	685a      	ldr	r2, [r3, #4]
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013b2e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b3a:	2b40      	cmp	r3, #64	; 0x40
 8013b3c:	d008      	beq.n	8013b50 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	681a      	ldr	r2, [r3, #0]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013b4c:	601a      	str	r2, [r3, #0]
 8013b4e:	e000      	b.n	8013b52 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8013b50:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2200      	movs	r2, #0
 8013b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	371c      	adds	r7, #28
 8013b60:	46bd      	mov	sp, r7
 8013b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b66:	4770      	bx	lr
 8013b68:	08015101 	.word	0x08015101
 8013b6c:	080150bb 	.word	0x080150bb

08013b70 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b086      	sub	sp, #24
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	689b      	ldr	r3, [r3, #8]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d110      	bne.n	8013bac <HAL_SPI_Receive_IT+0x3c>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b92:	d10b      	bne.n	8013bac <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2204      	movs	r2, #4
 8013b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8013b9c:	88fb      	ldrh	r3, [r7, #6]
 8013b9e:	68ba      	ldr	r2, [r7, #8]
 8013ba0:	68b9      	ldr	r1, [r7, #8]
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f000 f882 	bl	8013cac <HAL_SPI_TransmitReceive_IT>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	e076      	b.n	8013c9a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d101      	bne.n	8013bba <HAL_SPI_Receive_IT+0x4a>
 8013bb6:	2302      	movs	r3, #2
 8013bb8:	e06f      	b.n	8013c9a <HAL_SPI_Receive_IT+0x12a>
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013bc8:	b2db      	uxtb	r3, r3
 8013bca:	2b01      	cmp	r3, #1
 8013bcc:	d002      	beq.n	8013bd4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8013bce:	2302      	movs	r3, #2
 8013bd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013bd2:	e05d      	b.n	8013c90 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <HAL_SPI_Receive_IT+0x70>
 8013bda:	88fb      	ldrh	r3, [r7, #6]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d102      	bne.n	8013be6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8013be0:	2301      	movs	r3, #1
 8013be2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013be4:	e054      	b.n	8013c90 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2204      	movs	r2, #4
 8013bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	68ba      	ldr	r2, [r7, #8]
 8013bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	88fa      	ldrh	r2, [r7, #6]
 8013bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	88fa      	ldrh	r2, [r7, #6]
 8013c04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	2200      	movs	r2, #0
 8013c16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d003      	beq.n	8013c2e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	4a1e      	ldr	r2, [pc, #120]	; (8013ca4 <HAL_SPI_Receive_IT+0x134>)
 8013c2a:	641a      	str	r2, [r3, #64]	; 0x40
 8013c2c:	e002      	b.n	8013c34 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	4a1d      	ldr	r2, [pc, #116]	; (8013ca8 <HAL_SPI_Receive_IT+0x138>)
 8013c32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c3c:	d10f      	bne.n	8013c5e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013c4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013c5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	685a      	ldr	r2, [r3, #4]
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8013c6c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c78:	2b40      	cmp	r3, #64	; 0x40
 8013c7a:	d008      	beq.n	8013c8e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c8a:	601a      	str	r2, [r3, #0]
 8013c8c:	e000      	b.n	8013c90 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8013c8e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2200      	movs	r2, #0
 8013c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3718      	adds	r7, #24
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	08015075 	.word	0x08015075
 8013ca8:	0801502b 	.word	0x0801502b

08013cac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b087      	sub	sp, #28
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
 8013cb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	d101      	bne.n	8013ccc <HAL_SPI_TransmitReceive_IT+0x20>
 8013cc8:	2302      	movs	r3, #2
 8013cca:	e075      	b.n	8013db8 <HAL_SPI_TransmitReceive_IT+0x10c>
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	2201      	movs	r2, #1
 8013cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cda:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	685b      	ldr	r3, [r3, #4]
 8013ce0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013ce2:	7dbb      	ldrb	r3, [r7, #22]
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d00d      	beq.n	8013d04 <HAL_SPI_TransmitReceive_IT+0x58>
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013cee:	d106      	bne.n	8013cfe <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	689b      	ldr	r3, [r3, #8]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d102      	bne.n	8013cfe <HAL_SPI_TransmitReceive_IT+0x52>
 8013cf8:	7dbb      	ldrb	r3, [r7, #22]
 8013cfa:	2b04      	cmp	r3, #4
 8013cfc:	d002      	beq.n	8013d04 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013cfe:	2302      	movs	r3, #2
 8013d00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013d02:	e054      	b.n	8013dae <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d005      	beq.n	8013d16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d002      	beq.n	8013d16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013d10:	887b      	ldrh	r3, [r7, #2]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d102      	bne.n	8013d1c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8013d16:	2301      	movs	r3, #1
 8013d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013d1a:	e048      	b.n	8013dae <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	2b04      	cmp	r3, #4
 8013d26:	d003      	beq.n	8013d30 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	2205      	movs	r2, #5
 8013d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2200      	movs	r2, #0
 8013d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	68ba      	ldr	r2, [r7, #8]
 8013d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	887a      	ldrh	r2, [r7, #2]
 8013d40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	887a      	ldrh	r2, [r7, #2]
 8013d46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	887a      	ldrh	r2, [r7, #2]
 8013d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	887a      	ldrh	r2, [r7, #2]
 8013d58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d006      	beq.n	8013d70 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	4a17      	ldr	r2, [pc, #92]	; (8013dc4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8013d66:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	4a17      	ldr	r2, [pc, #92]	; (8013dc8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8013d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8013d6e:	e005      	b.n	8013d7c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4a16      	ldr	r2, [pc, #88]	; (8013dcc <HAL_SPI_TransmitReceive_IT+0x120>)
 8013d74:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	4a15      	ldr	r2, [pc, #84]	; (8013dd0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8013d7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	685a      	ldr	r2, [r3, #4]
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8013d8a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d96:	2b40      	cmp	r3, #64	; 0x40
 8013d98:	d008      	beq.n	8013dac <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013da8:	601a      	str	r2, [r3, #0]
 8013daa:	e000      	b.n	8013dae <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8013dac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2200      	movs	r2, #0
 8013db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	371c      	adds	r7, #28
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc2:	4770      	bx	lr
 8013dc4:	08014f6d 	.word	0x08014f6d
 8013dc8:	08014fcd 	.word	0x08014fcd
 8013dcc:	08014ea9 	.word	0x08014ea9
 8013dd0:	08014f0d 	.word	0x08014f0d

08013dd4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b086      	sub	sp, #24
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	4613      	mov	r3, r2
 8013de0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013de2:	2300      	movs	r3, #0
 8013de4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d101      	bne.n	8013df4 <HAL_SPI_Transmit_DMA+0x20>
 8013df0:	2302      	movs	r3, #2
 8013df2:	e09b      	b.n	8013f2c <HAL_SPI_Transmit_DMA+0x158>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	2201      	movs	r2, #1
 8013df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d002      	beq.n	8013e0e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013e08:	2302      	movs	r3, #2
 8013e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013e0c:	e089      	b.n	8013f22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d002      	beq.n	8013e1a <HAL_SPI_Transmit_DMA+0x46>
 8013e14:	88fb      	ldrh	r3, [r7, #6]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d102      	bne.n	8013e20 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013e1e:	e080      	b.n	8013f22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2203      	movs	r2, #3
 8013e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	68ba      	ldr	r2, [r7, #8]
 8013e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	88fa      	ldrh	r2, [r7, #6]
 8013e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	88fa      	ldrh	r2, [r7, #6]
 8013e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2200      	movs	r2, #0
 8013e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2200      	movs	r2, #0
 8013e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e66:	d10f      	bne.n	8013e88 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	681a      	ldr	r2, [r3, #0]
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013e86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e8c:	4a29      	ldr	r2, [pc, #164]	; (8013f34 <HAL_SPI_Transmit_DMA+0x160>)
 8013e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e94:	4a28      	ldr	r2, [pc, #160]	; (8013f38 <HAL_SPI_Transmit_DMA+0x164>)
 8013e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e9c:	4a27      	ldr	r2, [pc, #156]	; (8013f3c <HAL_SPI_Transmit_DMA+0x168>)
 8013e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	330c      	adds	r3, #12
 8013eb8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ebe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013ec0:	f7f4 fa91 	bl	80083e6 <HAL_DMA_Start_IT>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d00c      	beq.n	8013ee4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ece:	f043 0210 	orr.w	r2, r3, #16
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2201      	movs	r2, #1
 8013ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013ee2:	e01e      	b.n	8013f22 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013eee:	2b40      	cmp	r3, #64	; 0x40
 8013ef0:	d007      	beq.n	8013f02 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	681a      	ldr	r2, [r3, #0]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013f00:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	685a      	ldr	r2, [r3, #4]
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f042 0220 	orr.w	r2, r2, #32
 8013f10:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	685a      	ldr	r2, [r3, #4]
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	f042 0202 	orr.w	r2, r2, #2
 8013f20:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3718      	adds	r7, #24
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	08014c59 	.word	0x08014c59
 8013f38:	08014a79 	.word	0x08014a79
 8013f3c:	08014cad 	.word	0x08014cad

08013f40 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	689b      	ldr	r3, [r3, #8]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d110      	bne.n	8013f7c <HAL_SPI_Receive_DMA+0x3c>
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	685b      	ldr	r3, [r3, #4]
 8013f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f62:	d10b      	bne.n	8013f7c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2204      	movs	r2, #4
 8013f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8013f6c:	88fb      	ldrh	r3, [r7, #6]
 8013f6e:	68ba      	ldr	r2, [r7, #8]
 8013f70:	68b9      	ldr	r1, [r7, #8]
 8013f72:	68f8      	ldr	r0, [r7, #12]
 8013f74:	f000 f8ac 	bl	80140d0 <HAL_SPI_TransmitReceive_DMA>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	e09f      	b.n	80140bc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d101      	bne.n	8013f8a <HAL_SPI_Receive_DMA+0x4a>
 8013f86:	2302      	movs	r3, #2
 8013f88:	e098      	b.n	80140bc <HAL_SPI_Receive_DMA+0x17c>
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d002      	beq.n	8013fa4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8013f9e:	2302      	movs	r3, #2
 8013fa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013fa2:	e086      	b.n	80140b2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d002      	beq.n	8013fb0 <HAL_SPI_Receive_DMA+0x70>
 8013faa:	88fb      	ldrh	r3, [r7, #6]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d102      	bne.n	8013fb6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013fb4:	e07d      	b.n	80140b2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2204      	movs	r2, #4
 8013fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	68ba      	ldr	r2, [r7, #8]
 8013fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	88fa      	ldrh	r2, [r7, #6]
 8013fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	88fa      	ldrh	r2, [r7, #6]
 8013fd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	2200      	movs	r2, #0
 8013fec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	689b      	ldr	r3, [r3, #8]
 8013ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ff6:	d10f      	bne.n	8014018 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	681a      	ldr	r2, [r3, #0]
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014006:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014016:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801401c:	4a29      	ldr	r2, [pc, #164]	; (80140c4 <HAL_SPI_Receive_DMA+0x184>)
 801401e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014024:	4a28      	ldr	r2, [pc, #160]	; (80140c8 <HAL_SPI_Receive_DMA+0x188>)
 8014026:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801402c:	4a27      	ldr	r2, [pc, #156]	; (80140cc <HAL_SPI_Receive_DMA+0x18c>)
 801402e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014034:	2200      	movs	r2, #0
 8014036:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	330c      	adds	r3, #12
 8014042:	4619      	mov	r1, r3
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014048:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801404e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8014050:	f7f4 f9c9 	bl	80083e6 <HAL_DMA_Start_IT>
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00c      	beq.n	8014074 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801405e:	f043 0210 	orr.w	r2, r3, #16
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8014066:	2301      	movs	r3, #1
 8014068:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2201      	movs	r2, #1
 801406e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8014072:	e01e      	b.n	80140b2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801407e:	2b40      	cmp	r3, #64	; 0x40
 8014080:	d007      	beq.n	8014092 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014090:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	685a      	ldr	r2, [r3, #4]
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	f042 0220 	orr.w	r2, r2, #32
 80140a0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	685a      	ldr	r2, [r3, #4]
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	f042 0201 	orr.w	r2, r2, #1
 80140b0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	2200      	movs	r2, #0
 80140b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80140ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3718      	adds	r7, #24
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}
 80140c4:	08014c75 	.word	0x08014c75
 80140c8:	08014b21 	.word	0x08014b21
 80140cc:	08014cad 	.word	0x08014cad

080140d0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80140de:	2300      	movs	r3, #0
 80140e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d101      	bne.n	80140f0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80140ec:	2302      	movs	r3, #2
 80140ee:	e0e3      	b.n	80142b8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	2201      	movs	r2, #1
 80140f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80140fe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8014106:	7dbb      	ldrb	r3, [r7, #22]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d00d      	beq.n	8014128 <HAL_SPI_TransmitReceive_DMA+0x58>
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014112:	d106      	bne.n	8014122 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d102      	bne.n	8014122 <HAL_SPI_TransmitReceive_DMA+0x52>
 801411c:	7dbb      	ldrb	r3, [r7, #22]
 801411e:	2b04      	cmp	r3, #4
 8014120:	d002      	beq.n	8014128 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8014122:	2302      	movs	r3, #2
 8014124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014126:	e0c2      	b.n	80142ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d005      	beq.n	801413a <HAL_SPI_TransmitReceive_DMA+0x6a>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d002      	beq.n	801413a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8014134:	887b      	ldrh	r3, [r7, #2]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d102      	bne.n	8014140 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 801413a:	2301      	movs	r3, #1
 801413c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801413e:	e0b6      	b.n	80142ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b04      	cmp	r3, #4
 801414a:	d003      	beq.n	8014154 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2205      	movs	r2, #5
 8014150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	68ba      	ldr	r2, [r7, #8]
 801415e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	887a      	ldrh	r2, [r7, #2]
 8014164:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	887a      	ldrh	r2, [r7, #2]
 801416a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	887a      	ldrh	r2, [r7, #2]
 8014176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	887a      	ldrh	r2, [r7, #2]
 801417c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2200      	movs	r2, #0
 8014182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2200      	movs	r2, #0
 8014188:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014190:	b2db      	uxtb	r3, r3
 8014192:	2b04      	cmp	r3, #4
 8014194:	d108      	bne.n	80141a8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801419a:	4a49      	ldr	r2, [pc, #292]	; (80142c0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 801419c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141a2:	4a48      	ldr	r2, [pc, #288]	; (80142c4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80141a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80141a6:	e007      	b.n	80141b8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141ac:	4a46      	ldr	r2, [pc, #280]	; (80142c8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80141ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141b4:	4a45      	ldr	r2, [pc, #276]	; (80142cc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80141b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141bc:	4a44      	ldr	r2, [pc, #272]	; (80142d0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80141be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141c4:	2200      	movs	r2, #0
 80141c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	330c      	adds	r3, #12
 80141d2:	4619      	mov	r1, r3
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141d8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80141de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80141e0:	f7f4 f901 	bl	80083e6 <HAL_DMA_Start_IT>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00c      	beq.n	8014204 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141ee:	f043 0210 	orr.w	r2, r3, #16
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80141f6:	2301      	movs	r3, #1
 80141f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	2201      	movs	r2, #1
 80141fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8014202:	e054      	b.n	80142ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	685a      	ldr	r2, [r3, #4]
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f042 0201 	orr.w	r2, r2, #1
 8014212:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014218:	2200      	movs	r2, #0
 801421a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014220:	2200      	movs	r2, #0
 8014222:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014228:	2200      	movs	r2, #0
 801422a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014230:	2200      	movs	r2, #0
 8014232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801423c:	4619      	mov	r1, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	330c      	adds	r3, #12
 8014244:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801424a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801424c:	f7f4 f8cb 	bl	80083e6 <HAL_DMA_Start_IT>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d00c      	beq.n	8014270 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801425a:	f043 0210 	orr.w	r2, r3, #16
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8014262:	2301      	movs	r3, #1
 8014264:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2201      	movs	r2, #1
 801426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801426e:	e01e      	b.n	80142ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801427a:	2b40      	cmp	r3, #64	; 0x40
 801427c:	d007      	beq.n	801428e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801428c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	685a      	ldr	r2, [r3, #4]
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f042 0220 	orr.w	r2, r2, #32
 801429c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	685a      	ldr	r2, [r3, #4]
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	f042 0202 	orr.w	r2, r2, #2
 80142ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	2200      	movs	r2, #0
 80142b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80142b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3718      	adds	r7, #24
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	08014c75 	.word	0x08014c75
 80142c4:	08014b21 	.word	0x08014b21
 80142c8:	08014c91 	.word	0x08014c91
 80142cc:	08014bc9 	.word	0x08014bc9
 80142d0:	08014cad 	.word	0x08014cad

080142d4 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b088      	sub	sp, #32
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80142dc:	2300      	movs	r3, #0
 80142de:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80142e0:	4b6e      	ldr	r3, [pc, #440]	; (801449c <HAL_SPI_Abort+0x1c8>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	4a6e      	ldr	r2, [pc, #440]	; (80144a0 <HAL_SPI_Abort+0x1cc>)
 80142e6:	fba2 2303 	umull	r2, r3, r2, r3
 80142ea:	0a5b      	lsrs	r3, r3, #9
 80142ec:	2264      	movs	r2, #100	; 0x64
 80142ee:	fb02 f303 	mul.w	r3, r2, r3
 80142f2:	617b      	str	r3, [r7, #20]
  count = resetcount;
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	685a      	ldr	r2, [r3, #4]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	f022 0220 	bic.w	r2, r2, #32
 8014306:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014312:	2b80      	cmp	r3, #128	; 0x80
 8014314:	d117      	bne.n	8014346 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	4a62      	ldr	r2, [pc, #392]	; (80144a4 <HAL_SPI_Abort+0x1d0>)
 801431a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 801431c:	69bb      	ldr	r3, [r7, #24]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d106      	bne.n	8014330 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801432e:	e008      	b.n	8014342 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	3b01      	subs	r3, #1
 8014334:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801433c:	b2db      	uxtb	r3, r3
 801433e:	2b07      	cmp	r3, #7
 8014340:	d1ec      	bne.n	801431c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	685b      	ldr	r3, [r3, #4]
 801434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014350:	2b40      	cmp	r3, #64	; 0x40
 8014352:	d117      	bne.n	8014384 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	4a54      	ldr	r2, [pc, #336]	; (80144a8 <HAL_SPI_Abort+0x1d4>)
 8014358:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d106      	bne.n	801436e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801436c:	e008      	b.n	8014380 <HAL_SPI_Abort+0xac>
      }
      count--;
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	3b01      	subs	r3, #1
 8014372:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801437a:	b2db      	uxtb	r3, r3
 801437c:	2b07      	cmp	r3, #7
 801437e:	d1ec      	bne.n	801435a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	f003 0302 	and.w	r3, r3, #2
 801438e:	2b02      	cmp	r3, #2
 8014390:	d12e      	bne.n	80143f0 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014396:	2b00      	cmp	r3, #0
 8014398:	d02a      	beq.n	80143f0 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801439e:	2200      	movs	r2, #0
 80143a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7f4 f875 	bl	8008496 <HAL_DMA_Abort>
 80143ac:	4603      	mov	r3, r0
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d002      	beq.n	80143b8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	2240      	movs	r2, #64	; 0x40
 80143b6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	685a      	ldr	r2, [r3, #4]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f022 0202 	bic.w	r2, r2, #2
 80143c6:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 80143c8:	69bb      	ldr	r3, [r7, #24]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d106      	bne.n	80143dc <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 80143da:	e009      	b.n	80143f0 <HAL_SPI_Abort+0x11c>
        }
        count--;
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	3b01      	subs	r3, #1
 80143e0:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	689b      	ldr	r3, [r3, #8]
 80143e8:	f003 0302 	and.w	r3, r3, #2
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d0eb      	beq.n	80143c8 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	685b      	ldr	r3, [r3, #4]
 80143f6:	f003 0301 	and.w	r3, r3, #1
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d122      	bne.n	8014444 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014402:	2b00      	cmp	r3, #0
 8014404:	d01e      	beq.n	8014444 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801440a:	2200      	movs	r2, #0
 801440c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014412:	4618      	mov	r0, r3
 8014414:	f7f4 f83f 	bl	8008496 <HAL_DMA_Abort>
 8014418:	4603      	mov	r3, r0
 801441a:	2b00      	cmp	r3, #0
 801441c:	d002      	beq.n	8014424 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2240      	movs	r2, #64	; 0x40
 8014422:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014432:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	685a      	ldr	r2, [r3, #4]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	f022 0201 	bic.w	r2, r2, #1
 8014442:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2200      	movs	r2, #0
 8014448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2200      	movs	r2, #0
 801444e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014454:	2b40      	cmp	r3, #64	; 0x40
 8014456:	d102      	bne.n	801445e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8014458:	2301      	movs	r3, #1
 801445a:	77fb      	strb	r3, [r7, #31]
 801445c:	e002      	b.n	8014464 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2200      	movs	r2, #0
 8014462:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014464:	2300      	movs	r3, #0
 8014466:	60fb      	str	r3, [r7, #12]
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	60fb      	str	r3, [r7, #12]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	689b      	ldr	r3, [r3, #8]
 8014476:	60fb      	str	r3, [r7, #12]
 8014478:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 801447a:	2300      	movs	r3, #0
 801447c:	613b      	str	r3, [r7, #16]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	689b      	ldr	r3, [r3, #8]
 8014484:	613b      	str	r3, [r7, #16]
 8014486:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2201      	movs	r2, #1
 801448c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8014490:	7ffb      	ldrb	r3, [r7, #31]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3720      	adds	r7, #32
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}
 801449a:	bf00      	nop
 801449c:	20000058 	.word	0x20000058
 80144a0:	057619f1 	.word	0x057619f1
 80144a4:	08015659 	.word	0x08015659
 80144a8:	080155c9 	.word	0x080155c9

080144ac <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b088      	sub	sp, #32
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80144b4:	2300      	movs	r3, #0
 80144b6:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 80144b8:	2301      	movs	r3, #1
 80144ba:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80144bc:	4b72      	ldr	r3, [pc, #456]	; (8014688 <HAL_SPI_Abort_IT+0x1dc>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4a72      	ldr	r2, [pc, #456]	; (801468c <HAL_SPI_Abort_IT+0x1e0>)
 80144c2:	fba2 2303 	umull	r2, r3, r2, r3
 80144c6:	0a5b      	lsrs	r3, r3, #9
 80144c8:	2264      	movs	r2, #100	; 0x64
 80144ca:	fb02 f303 	mul.w	r3, r2, r3
 80144ce:	613b      	str	r3, [r7, #16]
  count = resetcount;
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	685a      	ldr	r2, [r3, #4]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	f022 0220 	bic.w	r2, r2, #32
 80144e2:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144ee:	2b80      	cmp	r3, #128	; 0x80
 80144f0:	d117      	bne.n	8014522 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	4a66      	ldr	r2, [pc, #408]	; (8014690 <HAL_SPI_Abort_IT+0x1e4>)
 80144f6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801450a:	e008      	b.n	801451e <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	3b01      	subs	r3, #1
 8014510:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014518:	b2db      	uxtb	r3, r3
 801451a:	2b07      	cmp	r3, #7
 801451c:	d1ec      	bne.n	80144f8 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801452c:	2b40      	cmp	r3, #64	; 0x40
 801452e:	d117      	bne.n	8014560 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	4a58      	ldr	r2, [pc, #352]	; (8014694 <HAL_SPI_Abort_IT+0x1e8>)
 8014534:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d106      	bne.n	801454a <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014540:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8014548:	e008      	b.n	801455c <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	3b01      	subs	r3, #1
 801454e:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014556:	b2db      	uxtb	r3, r3
 8014558:	2b07      	cmp	r3, #7
 801455a:	d1ec      	bne.n	8014536 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014564:	2b00      	cmp	r3, #0
 8014566:	d00f      	beq.n	8014588 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	f003 0302 	and.w	r3, r3, #2
 8014572:	2b02      	cmp	r3, #2
 8014574:	d104      	bne.n	8014580 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801457a:	4a47      	ldr	r2, [pc, #284]	; (8014698 <HAL_SPI_Abort_IT+0x1ec>)
 801457c:	651a      	str	r2, [r3, #80]	; 0x50
 801457e:	e003      	b.n	8014588 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014584:	2200      	movs	r2, #0
 8014586:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801458c:	2b00      	cmp	r3, #0
 801458e:	d00f      	beq.n	80145b0 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	685b      	ldr	r3, [r3, #4]
 8014596:	f003 0301 	and.w	r3, r3, #1
 801459a:	2b01      	cmp	r3, #1
 801459c:	d104      	bne.n	80145a8 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145a2:	4a3e      	ldr	r2, [pc, #248]	; (801469c <HAL_SPI_Abort_IT+0x1f0>)
 80145a4:	651a      	str	r2, [r3, #80]	; 0x50
 80145a6:	e003      	b.n	80145b0 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145ac:	2200      	movs	r2, #0
 80145ae:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	f003 0302 	and.w	r3, r3, #2
 80145ba:	2b02      	cmp	r3, #2
 80145bc:	d115      	bne.n	80145ea <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d011      	beq.n	80145ea <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7f3 ffd3 	bl	8008576 <HAL_DMA_Abort_IT>
 80145d0:	4603      	mov	r3, r0
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d007      	beq.n	80145e6 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145da:	2200      	movs	r2, #0
 80145dc:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2240      	movs	r2, #64	; 0x40
 80145e2:	655a      	str	r2, [r3, #84]	; 0x54
 80145e4:	e001      	b.n	80145ea <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 80145e6:	2300      	movs	r3, #0
 80145e8:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	f003 0301 	and.w	r3, r3, #1
 80145f4:	2b01      	cmp	r3, #1
 80145f6:	d115      	bne.n	8014624 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d011      	beq.n	8014624 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014604:	4618      	mov	r0, r3
 8014606:	f7f3 ffb6 	bl	8008576 <HAL_DMA_Abort_IT>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d007      	beq.n	8014620 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014614:	2200      	movs	r2, #0
 8014616:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2240      	movs	r2, #64	; 0x40
 801461c:	655a      	str	r2, [r3, #84]	; 0x54
 801461e:	e001      	b.n	8014624 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8014620:	2300      	movs	r3, #0
 8014622:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8014624:	69bb      	ldr	r3, [r7, #24]
 8014626:	2b01      	cmp	r3, #1
 8014628:	d128      	bne.n	801467c <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2200      	movs	r2, #0
 801462e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2200      	movs	r2, #0
 8014634:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801463a:	2b40      	cmp	r3, #64	; 0x40
 801463c:	d102      	bne.n	8014644 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 801463e:	2301      	movs	r3, #1
 8014640:	77fb      	strb	r3, [r7, #31]
 8014642:	e002      	b.n	801464a <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2200      	movs	r2, #0
 8014648:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801464a:	2300      	movs	r3, #0
 801464c:	60bb      	str	r3, [r7, #8]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	60bb      	str	r3, [r7, #8]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	689b      	ldr	r3, [r3, #8]
 801465c:	60bb      	str	r3, [r7, #8]
 801465e:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014660:	2300      	movs	r3, #0
 8014662:	60fb      	str	r3, [r7, #12]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	689b      	ldr	r3, [r3, #8]
 801466a:	60fb      	str	r3, [r7, #12]
 801466c:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2201      	movs	r2, #1
 8014672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 f9da 	bl	8014a30 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 801467c:	7ffb      	ldrb	r3, [r7, #31]
}
 801467e:	4618      	mov	r0, r3
 8014680:	3720      	adds	r7, #32
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	20000058 	.word	0x20000058
 801468c:	057619f1 	.word	0x057619f1
 8014690:	08015659 	.word	0x08015659
 8014694:	080155c9 	.word	0x080155c9
 8014698:	08014d15 	.word	0x08014d15
 801469c:	08014de9 	.word	0x08014de9

080146a0 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b083      	sub	sp, #12
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d101      	bne.n	80146b6 <HAL_SPI_DMAPause+0x16>
 80146b2:	2302      	movs	r3, #2
 80146b4:	e010      	b.n	80146d8 <HAL_SPI_DMAPause+0x38>
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2201      	movs	r2, #1
 80146ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	685a      	ldr	r2, [r3, #4]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	f022 0203 	bic.w	r2, r2, #3
 80146cc:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2200      	movs	r2, #0
 80146d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80146d6:	2300      	movs	r3, #0
}
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b083      	sub	sp, #12
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80146f2:	2b01      	cmp	r3, #1
 80146f4:	d101      	bne.n	80146fa <HAL_SPI_DMAResume+0x16>
 80146f6:	2302      	movs	r3, #2
 80146f8:	e010      	b.n	801471c <HAL_SPI_DMAResume+0x38>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2201      	movs	r2, #1
 80146fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	685a      	ldr	r2, [r3, #4]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f042 0203 	orr.w	r2, r2, #3
 8014710:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2200      	movs	r2, #0
 8014716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801471a:	2300      	movs	r3, #0
}
 801471c:	4618      	mov	r0, r3
 801471e:	370c      	adds	r7, #12
 8014720:	46bd      	mov	sp, r7
 8014722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014726:	4770      	bx	lr

08014728 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b084      	sub	sp, #16
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00f      	beq.n	801475c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014740:	4618      	mov	r0, r3
 8014742:	f7f3 fea8 	bl	8008496 <HAL_DMA_Abort>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d007      	beq.n	801475c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014750:	f043 0210 	orr.w	r2, r3, #16
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014758:	2301      	movs	r3, #1
 801475a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014760:	2b00      	cmp	r3, #0
 8014762:	d00f      	beq.n	8014784 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014768:	4618      	mov	r0, r3
 801476a:	f7f3 fe94 	bl	8008496 <HAL_DMA_Abort>
 801476e:	4603      	mov	r3, r0
 8014770:	2b00      	cmp	r3, #0
 8014772:	d007      	beq.n	8014784 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014778:	f043 0210 	orr.w	r2, r3, #16
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014780:	2301      	movs	r3, #1
 8014782:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	685a      	ldr	r2, [r3, #4]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	f022 0203 	bic.w	r2, r2, #3
 8014792:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2201      	movs	r2, #1
 8014798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 801479c:	7bfb      	ldrb	r3, [r7, #15]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b088      	sub	sp, #32
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	689b      	ldr	r3, [r3, #8]
 80147bc:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	099b      	lsrs	r3, r3, #6
 80147c2:	f003 0301 	and.w	r3, r3, #1
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d10f      	bne.n	80147ea <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d00a      	beq.n	80147ea <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80147d4:	69fb      	ldr	r3, [r7, #28]
 80147d6:	099b      	lsrs	r3, r3, #6
 80147d8:	f003 0301 	and.w	r3, r3, #1
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d004      	beq.n	80147ea <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	4798      	blx	r3
    return;
 80147e8:	e0d7      	b.n	801499a <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	085b      	lsrs	r3, r3, #1
 80147ee:	f003 0301 	and.w	r3, r3, #1
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00a      	beq.n	801480c <HAL_SPI_IRQHandler+0x66>
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	09db      	lsrs	r3, r3, #7
 80147fa:	f003 0301 	and.w	r3, r3, #1
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d004      	beq.n	801480c <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	4798      	blx	r3
    return;
 801480a:	e0c6      	b.n	801499a <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	095b      	lsrs	r3, r3, #5
 8014810:	f003 0301 	and.w	r3, r3, #1
 8014814:	2b00      	cmp	r3, #0
 8014816:	d10c      	bne.n	8014832 <HAL_SPI_IRQHandler+0x8c>
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	099b      	lsrs	r3, r3, #6
 801481c:	f003 0301 	and.w	r3, r3, #1
 8014820:	2b00      	cmp	r3, #0
 8014822:	d106      	bne.n	8014832 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014824:	69bb      	ldr	r3, [r7, #24]
 8014826:	0a1b      	lsrs	r3, r3, #8
 8014828:	f003 0301 	and.w	r3, r3, #1
 801482c:	2b00      	cmp	r3, #0
 801482e:	f000 80b4 	beq.w	801499a <HAL_SPI_IRQHandler+0x1f4>
 8014832:	69fb      	ldr	r3, [r7, #28]
 8014834:	095b      	lsrs	r3, r3, #5
 8014836:	f003 0301 	and.w	r3, r3, #1
 801483a:	2b00      	cmp	r3, #0
 801483c:	f000 80ad 	beq.w	801499a <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014840:	69bb      	ldr	r3, [r7, #24]
 8014842:	099b      	lsrs	r3, r3, #6
 8014844:	f003 0301 	and.w	r3, r3, #1
 8014848:	2b00      	cmp	r3, #0
 801484a:	d023      	beq.n	8014894 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014852:	b2db      	uxtb	r3, r3
 8014854:	2b03      	cmp	r3, #3
 8014856:	d011      	beq.n	801487c <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801485c:	f043 0204 	orr.w	r2, r3, #4
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014864:	2300      	movs	r3, #0
 8014866:	60bb      	str	r3, [r7, #8]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	68db      	ldr	r3, [r3, #12]
 801486e:	60bb      	str	r3, [r7, #8]
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	60bb      	str	r3, [r7, #8]
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	e00b      	b.n	8014894 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801487c:	2300      	movs	r3, #0
 801487e:	60fb      	str	r3, [r7, #12]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	60fb      	str	r3, [r7, #12]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	689b      	ldr	r3, [r3, #8]
 801488e:	60fb      	str	r3, [r7, #12]
 8014890:	68fb      	ldr	r3, [r7, #12]
        return;
 8014892:	e082      	b.n	801499a <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8014894:	69bb      	ldr	r3, [r7, #24]
 8014896:	095b      	lsrs	r3, r3, #5
 8014898:	f003 0301 	and.w	r3, r3, #1
 801489c:	2b00      	cmp	r3, #0
 801489e:	d014      	beq.n	80148ca <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148a4:	f043 0201 	orr.w	r2, r3, #1
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80148ac:	2300      	movs	r3, #0
 80148ae:	613b      	str	r3, [r7, #16]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	613b      	str	r3, [r7, #16]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148c6:	601a      	str	r2, [r3, #0]
 80148c8:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80148ca:	69bb      	ldr	r3, [r7, #24]
 80148cc:	0a1b      	lsrs	r3, r3, #8
 80148ce:	f003 0301 	and.w	r3, r3, #1
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d00c      	beq.n	80148f0 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148da:	f043 0208 	orr.w	r2, r3, #8
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80148e2:	2300      	movs	r3, #0
 80148e4:	617b      	str	r3, [r7, #20]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	689b      	ldr	r3, [r3, #8]
 80148ec:	617b      	str	r3, [r7, #20]
 80148ee:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d04f      	beq.n	8014998 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	685a      	ldr	r2, [r3, #4]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014906:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2201      	movs	r2, #1
 801490c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	f003 0302 	and.w	r3, r3, #2
 8014916:	2b00      	cmp	r3, #0
 8014918:	d104      	bne.n	8014924 <HAL_SPI_IRQHandler+0x17e>
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	f003 0301 	and.w	r3, r3, #1
 8014920:	2b00      	cmp	r3, #0
 8014922:	d034      	beq.n	801498e <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	685a      	ldr	r2, [r3, #4]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	f022 0203 	bic.w	r2, r2, #3
 8014932:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014938:	2b00      	cmp	r3, #0
 801493a:	d011      	beq.n	8014960 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014940:	4a17      	ldr	r2, [pc, #92]	; (80149a0 <HAL_SPI_IRQHandler+0x1fa>)
 8014942:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014948:	4618      	mov	r0, r3
 801494a:	f7f3 fe14 	bl	8008576 <HAL_DMA_Abort_IT>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d005      	beq.n	8014960 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014964:	2b00      	cmp	r3, #0
 8014966:	d016      	beq.n	8014996 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801496c:	4a0c      	ldr	r2, [pc, #48]	; (80149a0 <HAL_SPI_IRQHandler+0x1fa>)
 801496e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014974:	4618      	mov	r0, r3
 8014976:	f7f3 fdfe 	bl	8008576 <HAL_DMA_Abort_IT>
 801497a:	4603      	mov	r3, r0
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00a      	beq.n	8014996 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801498c:	e003      	b.n	8014996 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f000 f844 	bl	8014a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014994:	e000      	b.n	8014998 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014996:	bf00      	nop
    return;
 8014998:	bf00      	nop
  }
}
 801499a:	3720      	adds	r7, #32
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	08014ced 	.word	0x08014ced

080149a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80149ac:	bf00      	nop
 80149ae:	370c      	adds	r7, #12
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr

080149b8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80149c0:	bf00      	nop
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr

080149cc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80149cc:	b480      	push	{r7}
 80149ce:	b083      	sub	sp, #12
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80149d4:	bf00      	nop
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80149e0:	b480      	push	{r7}
 80149e2:	b083      	sub	sp, #12
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80149e8:	bf00      	nop
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80149fc:	bf00      	nop
 80149fe:	370c      	adds	r7, #12
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014a10:	bf00      	nop
 8014a12:	370c      	adds	r7, #12
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b083      	sub	sp, #12
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014a24:	bf00      	nop
 8014a26:	370c      	adds	r7, #12
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a30:	b480      	push	{r7}
 8014a32:	b083      	sub	sp, #12
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014a38:	bf00      	nop
 8014a3a:	370c      	adds	r7, #12
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr

08014a44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8014a44:	b480      	push	{r7}
 8014a46:	b083      	sub	sp, #12
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014a52:	b2db      	uxtb	r3, r3
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	370c      	adds	r7, #12
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr

08014a78 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b086      	sub	sp, #24
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a84:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a86:	f7f2 fa45 	bl	8006f14 <HAL_GetTick>
 8014a8a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a9a:	d03b      	beq.n	8014b14 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	685a      	ldr	r2, [r3, #4]
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	f022 0220 	bic.w	r2, r2, #32
 8014aaa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	685a      	ldr	r2, [r3, #4]
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f022 0202 	bic.w	r2, r2, #2
 8014aba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014abc:	693a      	ldr	r2, [r7, #16]
 8014abe:	2164      	movs	r1, #100	; 0x64
 8014ac0:	6978      	ldr	r0, [r7, #20]
 8014ac2:	f000 fc2c 	bl	801531e <SPI_EndRxTxTransaction>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d005      	beq.n	8014ad8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ad0:	f043 0220 	orr.w	r2, r3, #32
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	689b      	ldr	r3, [r3, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d10a      	bne.n	8014af6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	60fb      	str	r3, [r7, #12]
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	60fb      	str	r3, [r7, #12]
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	689b      	ldr	r3, [r3, #8]
 8014af2:	60fb      	str	r3, [r7, #12]
 8014af4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	2200      	movs	r2, #0
 8014afa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	2201      	movs	r2, #1
 8014b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d003      	beq.n	8014b14 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014b0c:	6978      	ldr	r0, [r7, #20]
 8014b0e:	f7ff ff85 	bl	8014a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014b12:	e002      	b.n	8014b1a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8014b14:	6978      	ldr	r0, [r7, #20]
 8014b16:	f7ff ff45 	bl	80149a4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014b1a:	3718      	adds	r7, #24
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b084      	sub	sp, #16
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b2c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014b2e:	f7f2 f9f1 	bl	8006f14 <HAL_GetTick>
 8014b32:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b42:	d03b      	beq.n	8014bbc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	685a      	ldr	r2, [r3, #4]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	f022 0220 	bic.w	r2, r2, #32
 8014b52:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	689b      	ldr	r3, [r3, #8]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d10d      	bne.n	8014b78 <SPI_DMAReceiveCplt+0x58>
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014b64:	d108      	bne.n	8014b78 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	685a      	ldr	r2, [r3, #4]
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f022 0203 	bic.w	r2, r2, #3
 8014b74:	605a      	str	r2, [r3, #4]
 8014b76:	e007      	b.n	8014b88 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	685a      	ldr	r2, [r3, #4]
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	f022 0201 	bic.w	r2, r2, #1
 8014b86:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014b88:	68ba      	ldr	r2, [r7, #8]
 8014b8a:	2164      	movs	r1, #100	; 0x64
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	f000 fb61 	bl	8015254 <SPI_EndRxTransaction>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d002      	beq.n	8014b9e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2220      	movs	r2, #32
 8014b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d003      	beq.n	8014bbc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014bb4:	68f8      	ldr	r0, [r7, #12]
 8014bb6:	f7ff ff31 	bl	8014a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014bba:	e002      	b.n	8014bc2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8014bbc:	68f8      	ldr	r0, [r7, #12]
 8014bbe:	f7ff fefb 	bl	80149b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014bc2:	3710      	adds	r7, #16
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b084      	sub	sp, #16
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bd4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014bd6:	f7f2 f99d 	bl	8006f14 <HAL_GetTick>
 8014bda:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bea:	d02f      	beq.n	8014c4c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	685a      	ldr	r2, [r3, #4]
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f022 0220 	bic.w	r2, r2, #32
 8014bfa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014bfc:	68ba      	ldr	r2, [r7, #8]
 8014bfe:	2164      	movs	r1, #100	; 0x64
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f000 fb8c 	bl	801531e <SPI_EndRxTxTransaction>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d005      	beq.n	8014c18 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c10:	f043 0220 	orr.w	r2, r3, #32
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	685a      	ldr	r2, [r3, #4]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f022 0203 	bic.w	r2, r2, #3
 8014c26:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2200      	movs	r2, #0
 8014c32:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2201      	movs	r2, #1
 8014c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d003      	beq.n	8014c4c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f7ff fee9 	bl	8014a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014c4a:	e002      	b.n	8014c52 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f7ff febd 	bl	80149cc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014c52:	3710      	adds	r7, #16
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c64:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8014c66:	68f8      	ldr	r0, [r7, #12]
 8014c68:	f7ff feba 	bl	80149e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014c6c:	bf00      	nop
 8014c6e:	3710      	adds	r7, #16
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}

08014c74 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c80:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8014c82:	68f8      	ldr	r0, [r7, #12]
 8014c84:	f7ff feb6 	bl	80149f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014c88:	bf00      	nop
 8014c8a:	3710      	adds	r7, #16
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}

08014c90 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b084      	sub	sp, #16
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c9c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8014c9e:	68f8      	ldr	r0, [r7, #12]
 8014ca0:	f7ff feb2 	bl	8014a08 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014ca4:	bf00      	nop
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}

08014cac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cb8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	685a      	ldr	r2, [r3, #4]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	f022 0203 	bic.w	r2, r2, #3
 8014cc8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cce:	f043 0210 	orr.w	r2, r3, #16
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2201      	movs	r2, #1
 8014cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	f7ff fe9c 	bl	8014a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014ce4:	bf00      	nop
 8014ce6:	3710      	adds	r7, #16
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	bd80      	pop	{r7, pc}

08014cec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cf8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2200      	movs	r2, #0
 8014d04:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f7ff fe88 	bl	8014a1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014d0c:	bf00      	nop
 8014d0e:	3710      	adds	r7, #16
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d20:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014d26:	2200      	movs	r2, #0
 8014d28:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014d2a:	4b2d      	ldr	r3, [pc, #180]	; (8014de0 <SPI_DMATxAbortCallback+0xcc>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	4a2d      	ldr	r2, [pc, #180]	; (8014de4 <SPI_DMATxAbortCallback+0xd0>)
 8014d30:	fba2 2303 	umull	r2, r3, r2, r3
 8014d34:	0a5b      	lsrs	r3, r3, #9
 8014d36:	2264      	movs	r2, #100	; 0x64
 8014d38:	fb02 f303 	mul.w	r3, r2, r3
 8014d3c:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	685a      	ldr	r2, [r3, #4]
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	f022 0202 	bic.w	r2, r2, #2
 8014d4c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d106      	bne.n	8014d62 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014d60:	e009      	b.n	8014d76 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	3b01      	subs	r3, #1
 8014d66:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	689b      	ldr	r3, [r3, #8]
 8014d6e:	f003 0302 	and.w	r3, r3, #2
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d0eb      	beq.n	8014d4e <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d004      	beq.n	8014d88 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d126      	bne.n	8014dd6 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	2200      	movs	r2, #0
 8014d92:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d98:	2b40      	cmp	r3, #64	; 0x40
 8014d9a:	d002      	beq.n	8014da2 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014da2:	2300      	movs	r3, #0
 8014da4:	60bb      	str	r3, [r7, #8]
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	60bb      	str	r3, [r7, #8]
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	689b      	ldr	r3, [r3, #8]
 8014db4:	60bb      	str	r3, [r7, #8]
 8014db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014db8:	2300      	movs	r3, #0
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	689b      	ldr	r3, [r3, #8]
 8014dc2:	60fb      	str	r3, [r7, #12]
 8014dc4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014dce:	6978      	ldr	r0, [r7, #20]
 8014dd0:	f7ff fe2e 	bl	8014a30 <HAL_SPI_AbortCpltCallback>
 8014dd4:	e000      	b.n	8014dd8 <SPI_DMATxAbortCallback+0xc4>
      return;
 8014dd6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014dd8:	3718      	adds	r7, #24
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	20000058 	.word	0x20000058
 8014de4:	057619f1 	.word	0x057619f1

08014de8 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014df4:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014e04:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	685a      	ldr	r2, [r3, #4]
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	f022 0201 	bic.w	r2, r2, #1
 8014e1c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014e1e:	f7f2 f879 	bl	8006f14 <HAL_GetTick>
 8014e22:	4603      	mov	r3, r0
 8014e24:	461a      	mov	r2, r3
 8014e26:	2164      	movs	r1, #100	; 0x64
 8014e28:	6978      	ldr	r0, [r7, #20]
 8014e2a:	f000 fa78 	bl	801531e <SPI_EndRxTxTransaction>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d005      	beq.n	8014e40 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d004      	beq.n	8014e52 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014e48:	697b      	ldr	r3, [r7, #20]
 8014e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d126      	bne.n	8014ea0 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	2200      	movs	r2, #0
 8014e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e62:	2b40      	cmp	r3, #64	; 0x40
 8014e64:	d002      	beq.n	8014e6c <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	2200      	movs	r2, #0
 8014e6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	60fb      	str	r3, [r7, #12]
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	60fb      	str	r3, [r7, #12]
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	689b      	ldr	r3, [r3, #8]
 8014e7e:	60fb      	str	r3, [r7, #12]
 8014e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014e82:	2300      	movs	r3, #0
 8014e84:	613b      	str	r3, [r7, #16]
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	689b      	ldr	r3, [r3, #8]
 8014e8c:	613b      	str	r3, [r7, #16]
 8014e8e:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	2201      	movs	r2, #1
 8014e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014e98:	6978      	ldr	r0, [r7, #20]
 8014e9a:	f7ff fdc9 	bl	8014a30 <HAL_SPI_AbortCpltCallback>
 8014e9e:	e000      	b.n	8014ea2 <SPI_DMARxAbortCallback+0xba>
      return;
 8014ea0:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014ea2:	3718      	adds	r7, #24
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	f103 020c 	add.w	r2, r3, #12
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ebc:	7812      	ldrb	r2, [r2, #0]
 8014ebe:	b2d2      	uxtb	r2, r2
 8014ec0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ec6:	1c5a      	adds	r2, r3, #1
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	3b01      	subs	r3, #1
 8014ed4:	b29a      	uxth	r2, r3
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d10f      	bne.n	8014f04 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	685a      	ldr	r2, [r3, #4]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014ef2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d102      	bne.n	8014f04 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 fa4e 	bl	80153a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	330c      	adds	r3, #12
 8014f1e:	7812      	ldrb	r2, [r2, #0]
 8014f20:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f26:	1c5a      	adds	r2, r3, #1
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	3b01      	subs	r3, #1
 8014f34:	b29a      	uxth	r2, r3
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d10f      	bne.n	8014f64 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	685a      	ldr	r2, [r3, #4]
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014f52:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d102      	bne.n	8014f64 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f000 fa1e 	bl	80153a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014f64:	bf00      	nop
 8014f66:	3708      	adds	r7, #8
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b082      	sub	sp, #8
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	68da      	ldr	r2, [r3, #12]
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f7e:	b292      	uxth	r2, r2
 8014f80:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f86:	1c9a      	adds	r2, r3, #2
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	3b01      	subs	r3, #1
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d10f      	bne.n	8014fc4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	685a      	ldr	r2, [r3, #4]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014fb2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d102      	bne.n	8014fc4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 f9ee 	bl	80153a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014fc4:	bf00      	nop
 8014fc6:	3708      	adds	r7, #8
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fd8:	881a      	ldrh	r2, [r3, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fe4:	1c9a      	adds	r2, r3, #2
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	b29a      	uxth	r2, r3
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d10f      	bne.n	8015022 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	685a      	ldr	r2, [r3, #4]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015010:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015016:	b29b      	uxth	r3, r3
 8015018:	2b00      	cmp	r3, #0
 801501a:	d102      	bne.n	8015022 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f000 f9bf 	bl	80153a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8015022:	bf00      	nop
 8015024:	3708      	adds	r7, #8
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b082      	sub	sp, #8
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f103 020c 	add.w	r2, r3, #12
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801503e:	7812      	ldrb	r2, [r2, #0]
 8015040:	b2d2      	uxtb	r2, r2
 8015042:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015048:	1c5a      	adds	r2, r3, #1
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015052:	b29b      	uxth	r3, r3
 8015054:	3b01      	subs	r3, #1
 8015056:	b29a      	uxth	r2, r3
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015060:	b29b      	uxth	r3, r3
 8015062:	2b00      	cmp	r3, #0
 8015064:	d102      	bne.n	801506c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f000 fa0e 	bl	8015488 <SPI_CloseRx_ISR>
  }
}
 801506c:	bf00      	nop
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	68da      	ldr	r2, [r3, #12]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015086:	b292      	uxth	r2, r2
 8015088:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801508e:	1c9a      	adds	r2, r3, #2
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015098:	b29b      	uxth	r3, r3
 801509a:	3b01      	subs	r3, #1
 801509c:	b29a      	uxth	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80150a6:	b29b      	uxth	r3, r3
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d102      	bne.n	80150b2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f000 f9eb 	bl	8015488 <SPI_CloseRx_ISR>
  }
}
 80150b2:	bf00      	nop
 80150b4:	3708      	adds	r7, #8
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b082      	sub	sp, #8
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	330c      	adds	r3, #12
 80150cc:	7812      	ldrb	r2, [r2, #0]
 80150ce:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150d4:	1c5a      	adds	r2, r3, #1
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80150de:	b29b      	uxth	r3, r3
 80150e0:	3b01      	subs	r3, #1
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d102      	bne.n	80150f8 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f000 fa07 	bl	8015506 <SPI_CloseTx_ISR>
  }
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b082      	sub	sp, #8
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801510c:	881a      	ldrh	r2, [r3, #0]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015118:	1c9a      	adds	r2, r3, #2
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015122:	b29b      	uxth	r3, r3
 8015124:	3b01      	subs	r3, #1
 8015126:	b29a      	uxth	r2, r3
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015130:	b29b      	uxth	r3, r3
 8015132:	2b00      	cmp	r3, #0
 8015134:	d102      	bne.n	801513c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f000 f9e5 	bl	8015506 <SPI_CloseTx_ISR>
  }
}
 801513c:	bf00      	nop
 801513e:	3708      	adds	r7, #8
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b088      	sub	sp, #32
 8015148:	af00      	add	r7, sp, #0
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	603b      	str	r3, [r7, #0]
 8015150:	4613      	mov	r3, r2
 8015152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015154:	f7f1 fede 	bl	8006f14 <HAL_GetTick>
 8015158:	4602      	mov	r2, r0
 801515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515c:	1a9b      	subs	r3, r3, r2
 801515e:	683a      	ldr	r2, [r7, #0]
 8015160:	4413      	add	r3, r2
 8015162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8015164:	f7f1 fed6 	bl	8006f14 <HAL_GetTick>
 8015168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801516a:	4b39      	ldr	r3, [pc, #228]	; (8015250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	015b      	lsls	r3, r3, #5
 8015170:	0d1b      	lsrs	r3, r3, #20
 8015172:	69fa      	ldr	r2, [r7, #28]
 8015174:	fb02 f303 	mul.w	r3, r2, r3
 8015178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801517a:	e054      	b.n	8015226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015182:	d050      	beq.n	8015226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015184:	f7f1 fec6 	bl	8006f14 <HAL_GetTick>
 8015188:	4602      	mov	r2, r0
 801518a:	69bb      	ldr	r3, [r7, #24]
 801518c:	1ad3      	subs	r3, r2, r3
 801518e:	69fa      	ldr	r2, [r7, #28]
 8015190:	429a      	cmp	r2, r3
 8015192:	d902      	bls.n	801519a <SPI_WaitFlagStateUntilTimeout+0x56>
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d13d      	bne.n	8015216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80151a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80151b2:	d111      	bne.n	80151d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	689b      	ldr	r3, [r3, #8]
 80151b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80151bc:	d004      	beq.n	80151c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80151c6:	d107      	bne.n	80151d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80151d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80151dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80151e0:	d10f      	bne.n	8015202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	681a      	ldr	r2, [r3, #0]
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80151f0:	601a      	str	r2, [r3, #0]
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	681a      	ldr	r2, [r3, #0]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	2201      	movs	r2, #1
 8015206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2200      	movs	r2, #0
 801520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8015212:	2303      	movs	r3, #3
 8015214:	e017      	b.n	8015246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d101      	bne.n	8015220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801521c:	2300      	movs	r3, #0
 801521e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	3b01      	subs	r3, #1
 8015224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	689a      	ldr	r2, [r3, #8]
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	4013      	ands	r3, r2
 8015230:	68ba      	ldr	r2, [r7, #8]
 8015232:	429a      	cmp	r2, r3
 8015234:	bf0c      	ite	eq
 8015236:	2301      	moveq	r3, #1
 8015238:	2300      	movne	r3, #0
 801523a:	b2db      	uxtb	r3, r3
 801523c:	461a      	mov	r2, r3
 801523e:	79fb      	ldrb	r3, [r7, #7]
 8015240:	429a      	cmp	r2, r3
 8015242:	d19b      	bne.n	801517c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3720      	adds	r7, #32
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	20000058 	.word	0x20000058

08015254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b086      	sub	sp, #24
 8015258:	af02      	add	r7, sp, #8
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	60b9      	str	r1, [r7, #8]
 801525e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015268:	d111      	bne.n	801528e <SPI_EndRxTransaction+0x3a>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	689b      	ldr	r3, [r3, #8]
 801526e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015272:	d004      	beq.n	801527e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	689b      	ldr	r3, [r3, #8]
 8015278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801527c:	d107      	bne.n	801528e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801528c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015296:	d12a      	bne.n	80152ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	689b      	ldr	r3, [r3, #8]
 801529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152a0:	d012      	beq.n	80152c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	2200      	movs	r2, #0
 80152aa:	2180      	movs	r1, #128	; 0x80
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f7ff ff49 	bl	8015144 <SPI_WaitFlagStateUntilTimeout>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d02d      	beq.n	8015314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152bc:	f043 0220 	orr.w	r2, r3, #32
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80152c4:	2303      	movs	r3, #3
 80152c6:	e026      	b.n	8015316 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	9300      	str	r3, [sp, #0]
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	2200      	movs	r2, #0
 80152d0:	2101      	movs	r1, #1
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	f7ff ff36 	bl	8015144 <SPI_WaitFlagStateUntilTimeout>
 80152d8:	4603      	mov	r3, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d01a      	beq.n	8015314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152e2:	f043 0220 	orr.w	r2, r3, #32
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80152ea:	2303      	movs	r3, #3
 80152ec:	e013      	b.n	8015316 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	2200      	movs	r2, #0
 80152f6:	2101      	movs	r1, #1
 80152f8:	68f8      	ldr	r0, [r7, #12]
 80152fa:	f7ff ff23 	bl	8015144 <SPI_WaitFlagStateUntilTimeout>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d007      	beq.n	8015314 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015308:	f043 0220 	orr.w	r2, r3, #32
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8015310:	2303      	movs	r3, #3
 8015312:	e000      	b.n	8015316 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8015314:	2300      	movs	r3, #0
}
 8015316:	4618      	mov	r0, r3
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}

0801531e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801531e:	b580      	push	{r7, lr}
 8015320:	b088      	sub	sp, #32
 8015322:	af02      	add	r7, sp, #8
 8015324:	60f8      	str	r0, [r7, #12]
 8015326:	60b9      	str	r1, [r7, #8]
 8015328:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801532a:	4b1b      	ldr	r3, [pc, #108]	; (8015398 <SPI_EndRxTxTransaction+0x7a>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	4a1b      	ldr	r2, [pc, #108]	; (801539c <SPI_EndRxTxTransaction+0x7e>)
 8015330:	fba2 2303 	umull	r2, r3, r2, r3
 8015334:	0d5b      	lsrs	r3, r3, #21
 8015336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801533a:	fb02 f303 	mul.w	r3, r2, r3
 801533e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015348:	d112      	bne.n	8015370 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	9300      	str	r3, [sp, #0]
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	2200      	movs	r2, #0
 8015352:	2180      	movs	r1, #128	; 0x80
 8015354:	68f8      	ldr	r0, [r7, #12]
 8015356:	f7ff fef5 	bl	8015144 <SPI_WaitFlagStateUntilTimeout>
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d016      	beq.n	801538e <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015364:	f043 0220 	orr.w	r2, r3, #32
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801536c:	2303      	movs	r3, #3
 801536e:	e00f      	b.n	8015390 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00a      	beq.n	801538c <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	3b01      	subs	r3, #1
 801537a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	689b      	ldr	r3, [r3, #8]
 8015382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015386:	2b80      	cmp	r3, #128	; 0x80
 8015388:	d0f2      	beq.n	8015370 <SPI_EndRxTxTransaction+0x52>
 801538a:	e000      	b.n	801538e <SPI_EndRxTxTransaction+0x70>
        break;
 801538c:	bf00      	nop
  }

  return HAL_OK;
 801538e:	2300      	movs	r3, #0
}
 8015390:	4618      	mov	r0, r3
 8015392:	3718      	adds	r7, #24
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	20000058 	.word	0x20000058
 801539c:	165e9f81 	.word	0x165e9f81

080153a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b086      	sub	sp, #24
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80153a8:	4b35      	ldr	r3, [pc, #212]	; (8015480 <SPI_CloseRxTx_ISR+0xe0>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4a35      	ldr	r2, [pc, #212]	; (8015484 <SPI_CloseRxTx_ISR+0xe4>)
 80153ae:	fba2 2303 	umull	r2, r3, r2, r3
 80153b2:	0a5b      	lsrs	r3, r3, #9
 80153b4:	2264      	movs	r2, #100	; 0x64
 80153b6:	fb02 f303 	mul.w	r3, r2, r3
 80153ba:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80153bc:	f7f1 fdaa 	bl	8006f14 <HAL_GetTick>
 80153c0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	685a      	ldr	r2, [r3, #4]
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	f022 0220 	bic.w	r2, r2, #32
 80153d0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d106      	bne.n	80153e6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153dc:	f043 0220 	orr.w	r2, r3, #32
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80153e4:	e009      	b.n	80153fa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	3b01      	subs	r3, #1
 80153ea:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	689b      	ldr	r3, [r3, #8]
 80153f2:	f003 0302 	and.w	r3, r3, #2
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d0eb      	beq.n	80153d2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80153fa:	697a      	ldr	r2, [r7, #20]
 80153fc:	2164      	movs	r1, #100	; 0x64
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f7ff ff8d 	bl	801531e <SPI_EndRxTxTransaction>
 8015404:	4603      	mov	r3, r0
 8015406:	2b00      	cmp	r3, #0
 8015408:	d005      	beq.n	8015416 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801540e:	f043 0220 	orr.w	r2, r3, #32
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	689b      	ldr	r3, [r3, #8]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d10a      	bne.n	8015434 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801541e:	2300      	movs	r3, #0
 8015420:	60fb      	str	r3, [r7, #12]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	60fb      	str	r3, [r7, #12]
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	689b      	ldr	r3, [r3, #8]
 8015430:	60fb      	str	r3, [r7, #12]
 8015432:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015438:	2b00      	cmp	r3, #0
 801543a:	d115      	bne.n	8015468 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8015442:	b2db      	uxtb	r3, r3
 8015444:	2b04      	cmp	r3, #4
 8015446:	d107      	bne.n	8015458 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2201      	movs	r2, #1
 801544c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f7ff fab1 	bl	80149b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8015456:	e00e      	b.n	8015476 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2201      	movs	r2, #1
 801545c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f7ff fab3 	bl	80149cc <HAL_SPI_TxRxCpltCallback>
}
 8015466:	e006      	b.n	8015476 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2201      	movs	r2, #1
 801546c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7ff fad3 	bl	8014a1c <HAL_SPI_ErrorCallback>
}
 8015476:	bf00      	nop
 8015478:	3718      	adds	r7, #24
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	20000058 	.word	0x20000058
 8015484:	057619f1 	.word	0x057619f1

08015488 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	685a      	ldr	r2, [r3, #4]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801549e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80154a0:	f7f1 fd38 	bl	8006f14 <HAL_GetTick>
 80154a4:	4603      	mov	r3, r0
 80154a6:	461a      	mov	r2, r3
 80154a8:	2164      	movs	r1, #100	; 0x64
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff fed2 	bl	8015254 <SPI_EndRxTransaction>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d005      	beq.n	80154c2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154ba:	f043 0220 	orr.w	r2, r3, #32
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	689b      	ldr	r3, [r3, #8]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d10a      	bne.n	80154e0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80154ca:	2300      	movs	r3, #0
 80154cc:	60fb      	str	r3, [r7, #12]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	68db      	ldr	r3, [r3, #12]
 80154d4:	60fb      	str	r3, [r7, #12]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	689b      	ldr	r3, [r3, #8]
 80154dc:	60fb      	str	r3, [r7, #12]
 80154de:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2201      	movs	r2, #1
 80154e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d103      	bne.n	80154f8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f7ff fa61 	bl	80149b8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80154f6:	e002      	b.n	80154fe <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7ff fa8f 	bl	8014a1c <HAL_SPI_ErrorCallback>
}
 80154fe:	bf00      	nop
 8015500:	3710      	adds	r7, #16
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}

08015506 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8015506:	b580      	push	{r7, lr}
 8015508:	b086      	sub	sp, #24
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801550e:	4b2c      	ldr	r3, [pc, #176]	; (80155c0 <SPI_CloseTx_ISR+0xba>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	4a2c      	ldr	r2, [pc, #176]	; (80155c4 <SPI_CloseTx_ISR+0xbe>)
 8015514:	fba2 2303 	umull	r2, r3, r2, r3
 8015518:	0a5b      	lsrs	r3, r3, #9
 801551a:	2264      	movs	r2, #100	; 0x64
 801551c:	fb02 f303 	mul.w	r3, r2, r3
 8015520:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8015522:	f7f1 fcf7 	bl	8006f14 <HAL_GetTick>
 8015526:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d106      	bne.n	801553c <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015532:	f043 0220 	orr.w	r2, r3, #32
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801553a:	e009      	b.n	8015550 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 801553c:	693b      	ldr	r3, [r7, #16]
 801553e:	3b01      	subs	r3, #1
 8015540:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	689b      	ldr	r3, [r3, #8]
 8015548:	f003 0302 	and.w	r3, r3, #2
 801554c:	2b00      	cmp	r3, #0
 801554e:	d0eb      	beq.n	8015528 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	685a      	ldr	r2, [r3, #4]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801555e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8015560:	697a      	ldr	r2, [r7, #20]
 8015562:	2164      	movs	r1, #100	; 0x64
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f7ff feda 	bl	801531e <SPI_EndRxTxTransaction>
 801556a:	4603      	mov	r3, r0
 801556c:	2b00      	cmp	r3, #0
 801556e:	d005      	beq.n	801557c <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015574:	f043 0220 	orr.w	r2, r3, #32
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	689b      	ldr	r3, [r3, #8]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d10a      	bne.n	801559a <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015584:	2300      	movs	r3, #0
 8015586:	60fb      	str	r3, [r7, #12]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	60fb      	str	r3, [r7, #12]
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	689b      	ldr	r3, [r3, #8]
 8015596:	60fb      	str	r3, [r7, #12]
 8015598:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2201      	movs	r2, #1
 801559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d003      	beq.n	80155b2 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f7ff fa36 	bl	8014a1c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80155b0:	e002      	b.n	80155b8 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	f7ff f9f6 	bl	80149a4 <HAL_SPI_TxCpltCallback>
}
 80155b8:	bf00      	nop
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	20000058 	.word	0x20000058
 80155c4:	057619f1 	.word	0x057619f1

080155c8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b085      	sub	sp, #20
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80155d0:	2300      	movs	r3, #0
 80155d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80155d4:	4b1e      	ldr	r3, [pc, #120]	; (8015650 <SPI_AbortRx_ISR+0x88>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	4a1e      	ldr	r2, [pc, #120]	; (8015654 <SPI_AbortRx_ISR+0x8c>)
 80155da:	fba2 2303 	umull	r2, r3, r2, r3
 80155de:	0a5b      	lsrs	r3, r3, #9
 80155e0:	2264      	movs	r2, #100	; 0x64
 80155e2:	fb02 f303 	mul.w	r3, r2, r3
 80155e6:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d106      	bne.n	80155fc <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80155fa:	e009      	b.n	8015610 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	3b01      	subs	r3, #1
 8015600:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	689b      	ldr	r3, [r3, #8]
 8015608:	f003 0302 	and.w	r3, r3, #2
 801560c:	2b00      	cmp	r3, #0
 801560e:	d0eb      	beq.n	80155e8 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801561e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	685a      	ldr	r2, [r3, #4]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801562e:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	68db      	ldr	r3, [r3, #12]
 8015636:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8015638:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2207      	movs	r2, #7
 801563e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8015642:	bf00      	nop
 8015644:	3714      	adds	r7, #20
 8015646:	46bd      	mov	sp, r7
 8015648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564c:	4770      	bx	lr
 801564e:	bf00      	nop
 8015650:	20000058 	.word	0x20000058
 8015654:	057619f1 	.word	0x057619f1

08015658 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8015658:	b480      	push	{r7}
 801565a:	b083      	sub	sp, #12
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	685a      	ldr	r2, [r3, #4]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801566e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801567e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2207      	movs	r2, #7
 8015684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8015688:	bf00      	nop
 801568a:	370c      	adds	r7, #12
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	60b9      	str	r1, [r7, #8]
 801569e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d101      	bne.n	80156aa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80156a6:	2301      	movs	r3, #1
 80156a8:	e034      	b.n	8015714 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d106      	bne.n	80156c4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2200      	movs	r2, #0
 80156ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f7f0 fa42 	bl	8005b48 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	681a      	ldr	r2, [r3, #0]
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	3308      	adds	r3, #8
 80156cc:	4619      	mov	r1, r3
 80156ce:	4610      	mov	r0, r2
 80156d0:	f003 f9a0 	bl	8018a14 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	6818      	ldr	r0, [r3, #0]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	689b      	ldr	r3, [r3, #8]
 80156dc:	461a      	mov	r2, r3
 80156de:	68b9      	ldr	r1, [r7, #8]
 80156e0:	f003 fa1e 	bl	8018b20 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6858      	ldr	r0, [r3, #4]
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	689a      	ldr	r2, [r3, #8]
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156f0:	6879      	ldr	r1, [r7, #4]
 80156f2:	f003 fa52 	bl	8018b9a <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	6892      	ldr	r2, [r2, #8]
 80156fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	68fa      	ldr	r2, [r7, #12]
 8015708:	6892      	ldr	r2, [r2, #8]
 801570a:	f041 0101 	orr.w	r1, r1, #1
 801570e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8015712:	2300      	movs	r3, #0
}
 8015714:	4618      	mov	r0, r3
 8015716:	3710      	adds	r7, #16
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7f0 fa3d 	bl	8005ba4 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	6818      	ldr	r0, [r3, #0]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6859      	ldr	r1, [r3, #4]
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	689b      	ldr	r3, [r3, #8]
 8015736:	461a      	mov	r2, r3
 8015738:	f003 f9be 	bl	8018ab8 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2200      	movs	r2, #0
 8015740:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2200      	movs	r2, #0
 8015748:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 801574c:	2300      	movs	r3, #0
}
 801574e:	4618      	mov	r0, r3
 8015750:	3708      	adds	r7, #8
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}

08015756 <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8015756:	b480      	push	{r7}
 8015758:	b083      	sub	sp, #12
 801575a:	af00      	add	r7, sp, #0
 801575c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 801575e:	bf00      	nop
 8015760:	370c      	adds	r7, #12
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr

0801576a <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 801576a:	b480      	push	{r7}
 801576c:	b083      	sub	sp, #12
 801576e:	af00      	add	r7, sp, #0
 8015770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 8015772:	bf00      	nop
 8015774:	370c      	adds	r7, #12
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr

0801577e <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 801577e:	b480      	push	{r7}
 8015780:	b087      	sub	sp, #28
 8015782:	af00      	add	r7, sp, #0
 8015784:	60f8      	str	r0, [r7, #12]
 8015786:	60b9      	str	r1, [r7, #8]
 8015788:	607a      	str	r2, [r7, #4]
 801578a:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015796:	2b01      	cmp	r3, #1
 8015798:	d101      	bne.n	801579e <HAL_SRAM_Read_8b+0x20>
 801579a:	2302      	movs	r3, #2
 801579c:	e022      	b.n	80157e4 <HAL_SRAM_Read_8b+0x66>
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2201      	movs	r2, #1
 80157a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2202      	movs	r2, #2
 80157aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80157ae:	e00d      	b.n	80157cc <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	781b      	ldrb	r3, [r3, #0]
 80157b4:	b2da      	uxtb	r2, r3
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	3301      	adds	r3, #1
 80157be:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	3301      	adds	r3, #1
 80157c4:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	3b01      	subs	r3, #1
 80157ca:	603b      	str	r3, [r7, #0]
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d1ee      	bne.n	80157b0 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2201      	movs	r2, #1
 80157d6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2200      	movs	r2, #0
 80157de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80157e2:	2300      	movs	r3, #0
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	371c      	adds	r7, #28
 80157e8:	46bd      	mov	sp, r7
 80157ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ee:	4770      	bx	lr

080157f0 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b087      	sub	sp, #28
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	607a      	str	r2, [r7, #4]
 80157fc:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015808:	b2db      	uxtb	r3, r3
 801580a:	2b04      	cmp	r3, #4
 801580c:	d101      	bne.n	8015812 <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 801580e:	2301      	movs	r3, #1
 8015810:	e028      	b.n	8015864 <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015818:	2b01      	cmp	r3, #1
 801581a:	d101      	bne.n	8015820 <HAL_SRAM_Write_8b+0x30>
 801581c:	2302      	movs	r3, #2
 801581e:	e021      	b.n	8015864 <HAL_SRAM_Write_8b+0x74>
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	2201      	movs	r2, #1
 8015824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2202      	movs	r2, #2
 801582c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015830:	e00c      	b.n	801584c <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	781a      	ldrb	r2, [r3, #0]
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	3301      	adds	r3, #1
 801583e:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	3301      	adds	r3, #1
 8015844:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	3b01      	subs	r3, #1
 801584a:	603b      	str	r3, [r7, #0]
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d1ef      	bne.n	8015832 <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	2201      	movs	r2, #1
 8015856:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	2200      	movs	r2, #0
 801585e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015862:	2300      	movs	r3, #0
}
 8015864:	4618      	mov	r0, r3
 8015866:	371c      	adds	r7, #28
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr

08015870 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8015870:	b480      	push	{r7}
 8015872:	b087      	sub	sp, #28
 8015874:	af00      	add	r7, sp, #0
 8015876:	60f8      	str	r0, [r7, #12]
 8015878:	60b9      	str	r1, [r7, #8]
 801587a:	607a      	str	r2, [r7, #4]
 801587c:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015888:	2b01      	cmp	r3, #1
 801588a:	d101      	bne.n	8015890 <HAL_SRAM_Read_16b+0x20>
 801588c:	2302      	movs	r3, #2
 801588e:	e022      	b.n	80158d6 <HAL_SRAM_Read_16b+0x66>
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2201      	movs	r2, #1
 8015894:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2202      	movs	r2, #2
 801589c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80158a0:	e00d      	b.n	80158be <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	881b      	ldrh	r3, [r3, #0]
 80158a6:	b29a      	uxth	r2, r3
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	3302      	adds	r3, #2
 80158b0:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	3302      	adds	r3, #2
 80158b6:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	3b01      	subs	r3, #1
 80158bc:	603b      	str	r3, [r7, #0]
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d1ee      	bne.n	80158a2 <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2201      	movs	r2, #1
 80158c8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	2200      	movs	r2, #0
 80158d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80158d4:	2300      	movs	r3, #0
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	371c      	adds	r7, #28
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr

080158e2 <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 80158e2:	b480      	push	{r7}
 80158e4:	b087      	sub	sp, #28
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	60f8      	str	r0, [r7, #12]
 80158ea:	60b9      	str	r1, [r7, #8]
 80158ec:	607a      	str	r2, [r7, #4]
 80158ee:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	2b04      	cmp	r3, #4
 80158fe:	d101      	bne.n	8015904 <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015900:	2301      	movs	r3, #1
 8015902:	e028      	b.n	8015956 <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801590a:	2b01      	cmp	r3, #1
 801590c:	d101      	bne.n	8015912 <HAL_SRAM_Write_16b+0x30>
 801590e:	2302      	movs	r3, #2
 8015910:	e021      	b.n	8015956 <HAL_SRAM_Write_16b+0x74>
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2201      	movs	r2, #1
 8015916:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2202      	movs	r2, #2
 801591e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015922:	e00c      	b.n	801593e <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	881a      	ldrh	r2, [r3, #0]
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	3302      	adds	r3, #2
 8015930:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	3302      	adds	r3, #2
 8015936:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	3b01      	subs	r3, #1
 801593c:	603b      	str	r3, [r7, #0]
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d1ef      	bne.n	8015924 <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2201      	movs	r2, #1
 8015948:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2200      	movs	r2, #0
 8015950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8015954:	2300      	movs	r3, #0
}
 8015956:	4618      	mov	r0, r3
 8015958:	371c      	adds	r7, #28
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr

08015962 <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015962:	b480      	push	{r7}
 8015964:	b085      	sub	sp, #20
 8015966:	af00      	add	r7, sp, #0
 8015968:	60f8      	str	r0, [r7, #12]
 801596a:	60b9      	str	r1, [r7, #8]
 801596c:	607a      	str	r2, [r7, #4]
 801596e:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015976:	2b01      	cmp	r3, #1
 8015978:	d101      	bne.n	801597e <HAL_SRAM_Read_32b+0x1c>
 801597a:	2302      	movs	r3, #2
 801597c:	e021      	b.n	80159c2 <HAL_SRAM_Read_32b+0x60>
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2201      	movs	r2, #1
 8015982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2202      	movs	r2, #2
 801598a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 801598e:	e00c      	b.n	80159aa <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 8015990:	68bb      	ldr	r3, [r7, #8]
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	3304      	adds	r3, #4
 801599c:	607b      	str	r3, [r7, #4]
    pAddress++;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	3304      	adds	r3, #4
 80159a2:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	3b01      	subs	r3, #1
 80159a8:	603b      	str	r3, [r7, #0]
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d1ef      	bne.n	8015990 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2201      	movs	r2, #1
 80159b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2200      	movs	r2, #0
 80159bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80159c0:	2300      	movs	r3, #0
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3714      	adds	r7, #20
 80159c6:	46bd      	mov	sp, r7
 80159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159cc:	4770      	bx	lr

080159ce <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80159ce:	b480      	push	{r7}
 80159d0:	b085      	sub	sp, #20
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	60f8      	str	r0, [r7, #12]
 80159d6:	60b9      	str	r1, [r7, #8]
 80159d8:	607a      	str	r2, [r7, #4]
 80159da:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80159e2:	b2db      	uxtb	r3, r3
 80159e4:	2b04      	cmp	r3, #4
 80159e6:	d101      	bne.n	80159ec <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 80159e8:	2301      	movs	r3, #1
 80159ea:	e028      	b.n	8015a3e <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d101      	bne.n	80159fa <HAL_SRAM_Write_32b+0x2c>
 80159f6:	2302      	movs	r3, #2
 80159f8:	e021      	b.n	8015a3e <HAL_SRAM_Write_32b+0x70>
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	2201      	movs	r2, #1
 80159fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	2202      	movs	r2, #2
 8015a06:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015a0a:	e00c      	b.n	8015a26 <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	3304      	adds	r3, #4
 8015a18:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	3304      	adds	r3, #4
 8015a1e:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	3b01      	subs	r3, #1
 8015a24:	603b      	str	r3, [r7, #0]
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d1ef      	bne.n	8015a0c <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2201      	movs	r2, #1
 8015a30:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2200      	movs	r2, #0
 8015a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015a3c:	2300      	movs	r3, #0
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3714      	adds	r7, #20
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr

08015a4a <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b084      	sub	sp, #16
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	60f8      	str	r0, [r7, #12]
 8015a52:	60b9      	str	r1, [r7, #8]
 8015a54:	607a      	str	r2, [r7, #4]
 8015a56:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d101      	bne.n	8015a66 <HAL_SRAM_Read_DMA+0x1c>
 8015a62:	2302      	movs	r3, #2
 8015a64:	e01f      	b.n	8015aa6 <HAL_SRAM_Read_DMA+0x5c>
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2201      	movs	r2, #1
 8015a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2202      	movs	r2, #2
 8015a72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a7a:	4a0d      	ldr	r2, [pc, #52]	; (8015ab0 <HAL_SRAM_Read_DMA+0x66>)
 8015a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a82:	4a0c      	ldr	r2, [pc, #48]	; (8015ab4 <HAL_SRAM_Read_DMA+0x6a>)
 8015a84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015a8a:	68b9      	ldr	r1, [r7, #8]
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	f7f2 fca9 	bl	80083e6 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2201      	movs	r2, #1
 8015a98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 8015aa4:	2300      	movs	r3, #0
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	08015757 	.word	0x08015757
 8015ab4:	0801576b 	.word	0x0801576b

08015ab8 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b084      	sub	sp, #16
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	60f8      	str	r0, [r7, #12]
 8015ac0:	60b9      	str	r1, [r7, #8]
 8015ac2:	607a      	str	r2, [r7, #4]
 8015ac4:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	2b04      	cmp	r3, #4
 8015ad0:	d101      	bne.n	8015ad6 <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	e026      	b.n	8015b24 <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015adc:	2b01      	cmp	r3, #1
 8015ade:	d101      	bne.n	8015ae4 <HAL_SRAM_Write_DMA+0x2c>
 8015ae0:	2302      	movs	r3, #2
 8015ae2:	e01f      	b.n	8015b24 <HAL_SRAM_Write_DMA+0x6c>
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	2202      	movs	r2, #2
 8015af0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015af8:	4a0c      	ldr	r2, [pc, #48]	; (8015b2c <HAL_SRAM_Write_DMA+0x74>)
 8015afa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b00:	4a0b      	ldr	r2, [pc, #44]	; (8015b30 <HAL_SRAM_Write_DMA+0x78>)
 8015b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015b08:	6879      	ldr	r1, [r7, #4]
 8015b0a:	68ba      	ldr	r2, [r7, #8]
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	f7f2 fc6a 	bl	80083e6 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2201      	movs	r2, #1
 8015b16:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 8015b22:	2300      	movs	r3, #0
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3710      	adds	r7, #16
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	08015757 	.word	0x08015757
 8015b30:	0801576b 	.word	0x0801576b

08015b34 <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b082      	sub	sp, #8
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015b42:	2b01      	cmp	r3, #1
 8015b44:	d101      	bne.n	8015b4a <HAL_SRAM_WriteOperation_Enable+0x16>
 8015b46:	2302      	movs	r3, #2
 8015b48:	e014      	b.n	8015b74 <HAL_SRAM_WriteOperation_Enable+0x40>
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	681a      	ldr	r2, [r3, #0]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	4610      	mov	r0, r2
 8015b5e:	f003 f85b 	bl	8018c18 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2201      	movs	r2, #1
 8015b66:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8015b72:	2300      	movs	r3, #0
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3708      	adds	r7, #8
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d101      	bne.n	8015b92 <HAL_SRAM_WriteOperation_Disable+0x16>
 8015b8e:	2302      	movs	r3, #2
 8015b90:	e018      	b.n	8015bc4 <HAL_SRAM_WriteOperation_Disable+0x48>
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	2201      	movs	r2, #1
 8015b96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2202      	movs	r2, #2
 8015b9e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	689b      	ldr	r3, [r3, #8]
 8015baa:	4619      	mov	r1, r3
 8015bac:	4610      	mov	r0, r2
 8015bae:	f003 f849 	bl	8018c44 <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2204      	movs	r2, #4
 8015bb6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8015bc2:	2300      	movs	r3, #0
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
  return hsram->State;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015bda:	b2db      	uxtb	r3, r3
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d101      	bne.n	8015bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	e03f      	b.n	8015c7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f7ef fedc 	bl	80059cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2224      	movs	r2, #36	; 0x24
 8015c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	68da      	ldr	r2, [r3, #12]
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f002 fc7e 	bl	801852e <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	691a      	ldr	r2, [r3, #16]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	695a      	ldr	r2, [r3, #20]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	68da      	ldr	r2, [r3, #12]
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	2200      	movs	r2, #0
 8015c66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2220      	movs	r2, #32
 8015c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2220      	movs	r2, #32
 8015c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3708      	adds	r7, #8
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}

08015c82 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b082      	sub	sp, #8
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8015c90:	2301      	movs	r3, #1
 8015c92:	e047      	b.n	8015d24 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d106      	bne.n	8015cae <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7ef fe8f 	bl	80059cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2224      	movs	r2, #36	; 0x24
 8015cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	68da      	ldr	r2, [r3, #12]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015cc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f002 fc31 	bl	801852e <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	691a      	ldr	r2, [r3, #16]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015cda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	695a      	ldr	r2, [r3, #20]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015cea:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	695a      	ldr	r2, [r3, #20]
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f042 0208 	orr.w	r2, r2, #8
 8015cfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	68da      	ldr	r2, [r3, #12]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015d0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2220      	movs	r2, #32
 8015d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2220      	movs	r2, #32
 8015d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015d22:	2300      	movs	r3, #0
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3708      	adds	r7, #8
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d101      	bne.n	8015d40 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	e057      	b.n	8015df0 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d106      	bne.n	8015d5a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f7ef fe39 	bl	80059cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2224      	movs	r2, #36	; 0x24
 8015d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	68da      	ldr	r2, [r3, #12]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015d70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f002 fbdb 	bl	801852e <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	691a      	ldr	r2, [r3, #16]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015d86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	695a      	ldr	r2, [r3, #20]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015d96:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	691a      	ldr	r2, [r3, #16]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015da6:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	691a      	ldr	r2, [r3, #16]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	f022 0220 	bic.w	r2, r2, #32
 8015db6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	6919      	ldr	r1, [r3, #16]
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	430a      	orrs	r2, r1
 8015dc6:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	68da      	ldr	r2, [r3, #12]
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015dd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2200      	movs	r2, #0
 8015ddc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	2220      	movs	r2, #32
 8015de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2220      	movs	r2, #32
 8015dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015dee:	2300      	movs	r3, #0
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3708      	adds	r7, #8
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	460b      	mov	r3, r1
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d101      	bne.n	8015e10 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	e05f      	b.n	8015ed0 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d106      	bne.n	8015e2a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015e24:	68f8      	ldr	r0, [r7, #12]
 8015e26:	f7ef fdd1 	bl	80059cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	2224      	movs	r2, #36	; 0x24
 8015e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	68da      	ldr	r2, [r3, #12]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015e40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015e42:	68f8      	ldr	r0, [r7, #12]
 8015e44:	f002 fb73 	bl	801852e <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	691a      	ldr	r2, [r3, #16]
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015e56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	695a      	ldr	r2, [r3, #20]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015e66:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	691a      	ldr	r2, [r3, #16]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f022 020f 	bic.w	r2, r2, #15
 8015e76:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	6919      	ldr	r1, [r3, #16]
 8015e7e:	7afa      	ldrb	r2, [r7, #11]
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	430a      	orrs	r2, r1
 8015e86:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	68da      	ldr	r2, [r3, #12]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015e96:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	68d9      	ldr	r1, [r3, #12]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	430a      	orrs	r2, r1
 8015ea6:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	68da      	ldr	r2, [r3, #12]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015eb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2220      	movs	r2, #32
 8015ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	2220      	movs	r2, #32
 8015eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015ece:	2300      	movs	r3, #0
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3710      	adds	r7, #16
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}

08015ed8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d101      	bne.n	8015eea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	e021      	b.n	8015f2e <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2224      	movs	r2, #36	; 0x24
 8015eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	68da      	ldr	r2, [r3, #12]
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015f00:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7ef fdb2 	bl	8005a6c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2200      	movs	r2, #0
 8015f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2200      	movs	r2, #0
 8015f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2200      	movs	r2, #0
 8015f22:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2200      	movs	r2, #0
 8015f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015f2c:	2300      	movs	r3, #0
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3708      	adds	r7, #8
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b08a      	sub	sp, #40	; 0x28
 8015f3a:	af02      	add	r7, sp, #8
 8015f3c:	60f8      	str	r0, [r7, #12]
 8015f3e:	60b9      	str	r1, [r7, #8]
 8015f40:	603b      	str	r3, [r7, #0]
 8015f42:	4613      	mov	r3, r2
 8015f44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015f46:	2300      	movs	r3, #0
 8015f48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f50:	b2db      	uxtb	r3, r3
 8015f52:	2b20      	cmp	r3, #32
 8015f54:	d17c      	bne.n	8016050 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d002      	beq.n	8015f62 <HAL_UART_Transmit+0x2c>
 8015f5c:	88fb      	ldrh	r3, [r7, #6]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d101      	bne.n	8015f66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015f62:	2301      	movs	r3, #1
 8015f64:	e075      	b.n	8016052 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	d101      	bne.n	8015f74 <HAL_UART_Transmit+0x3e>
 8015f70:	2302      	movs	r3, #2
 8015f72:	e06e      	b.n	8016052 <HAL_UART_Transmit+0x11c>
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2201      	movs	r2, #1
 8015f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2221      	movs	r2, #33	; 0x21
 8015f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015f8a:	f7f0 ffc3 	bl	8006f14 <HAL_GetTick>
 8015f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	88fa      	ldrh	r2, [r7, #6]
 8015f94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	88fa      	ldrh	r2, [r7, #6]
 8015f9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	689b      	ldr	r3, [r3, #8]
 8015fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fa4:	d108      	bne.n	8015fb8 <HAL_UART_Transmit+0x82>
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	691b      	ldr	r3, [r3, #16]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d104      	bne.n	8015fb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015fb2:	68bb      	ldr	r3, [r7, #8]
 8015fb4:	61bb      	str	r3, [r7, #24]
 8015fb6:	e003      	b.n	8015fc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8015fc8:	e02a      	b.n	8016020 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015fca:	683b      	ldr	r3, [r7, #0]
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	2180      	movs	r1, #128	; 0x80
 8015fd4:	68f8      	ldr	r0, [r7, #12]
 8015fd6:	f001 ff19 	bl	8017e0c <UART_WaitOnFlagUntilTimeout>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d001      	beq.n	8015fe4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015fe0:	2303      	movs	r3, #3
 8015fe2:	e036      	b.n	8016052 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d10b      	bne.n	8016002 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015fea:	69bb      	ldr	r3, [r7, #24]
 8015fec:	881b      	ldrh	r3, [r3, #0]
 8015fee:	461a      	mov	r2, r3
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	3302      	adds	r3, #2
 8015ffe:	61bb      	str	r3, [r7, #24]
 8016000:	e007      	b.n	8016012 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	781a      	ldrb	r2, [r3, #0]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	3301      	adds	r3, #1
 8016010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016016:	b29b      	uxth	r3, r3
 8016018:	3b01      	subs	r3, #1
 801601a:	b29a      	uxth	r2, r3
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016024:	b29b      	uxth	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1cf      	bne.n	8015fca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	2200      	movs	r2, #0
 8016032:	2140      	movs	r1, #64	; 0x40
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f001 fee9 	bl	8017e0c <UART_WaitOnFlagUntilTimeout>
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d001      	beq.n	8016044 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8016040:	2303      	movs	r3, #3
 8016042:	e006      	b.n	8016052 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	2220      	movs	r2, #32
 8016048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801604c:	2300      	movs	r3, #0
 801604e:	e000      	b.n	8016052 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8016050:	2302      	movs	r3, #2
  }
}
 8016052:	4618      	mov	r0, r3
 8016054:	3720      	adds	r7, #32
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b08a      	sub	sp, #40	; 0x28
 801605e:	af02      	add	r7, sp, #8
 8016060:	60f8      	str	r0, [r7, #12]
 8016062:	60b9      	str	r1, [r7, #8]
 8016064:	603b      	str	r3, [r7, #0]
 8016066:	4613      	mov	r3, r2
 8016068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801606a:	2300      	movs	r3, #0
 801606c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016074:	b2db      	uxtb	r3, r3
 8016076:	2b20      	cmp	r3, #32
 8016078:	f040 808c 	bne.w	8016194 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <HAL_UART_Receive+0x2e>
 8016082:	88fb      	ldrh	r3, [r7, #6]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8016088:	2301      	movs	r3, #1
 801608a:	e084      	b.n	8016196 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016092:	2b01      	cmp	r3, #1
 8016094:	d101      	bne.n	801609a <HAL_UART_Receive+0x40>
 8016096:	2302      	movs	r3, #2
 8016098:	e07d      	b.n	8016196 <HAL_UART_Receive+0x13c>
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2201      	movs	r2, #1
 801609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2200      	movs	r2, #0
 80160a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2222      	movs	r2, #34	; 0x22
 80160ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2200      	movs	r2, #0
 80160b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80160b6:	f7f0 ff2d 	bl	8006f14 <HAL_GetTick>
 80160ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	88fa      	ldrh	r2, [r7, #6]
 80160c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	88fa      	ldrh	r2, [r7, #6]
 80160c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	689b      	ldr	r3, [r3, #8]
 80160cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160d0:	d108      	bne.n	80160e4 <HAL_UART_Receive+0x8a>
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	691b      	ldr	r3, [r3, #16]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d104      	bne.n	80160e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80160da:	2300      	movs	r3, #0
 80160dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	61bb      	str	r3, [r7, #24]
 80160e2:	e003      	b.n	80160ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80160e8:	2300      	movs	r3, #0
 80160ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80160f4:	e043      	b.n	801617e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	2200      	movs	r2, #0
 80160fe:	2120      	movs	r1, #32
 8016100:	68f8      	ldr	r0, [r7, #12]
 8016102:	f001 fe83 	bl	8017e0c <UART_WaitOnFlagUntilTimeout>
 8016106:	4603      	mov	r3, r0
 8016108:	2b00      	cmp	r3, #0
 801610a:	d001      	beq.n	8016110 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 801610c:	2303      	movs	r3, #3
 801610e:	e042      	b.n	8016196 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8016110:	69fb      	ldr	r3, [r7, #28]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d10c      	bne.n	8016130 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	685b      	ldr	r3, [r3, #4]
 801611c:	b29b      	uxth	r3, r3
 801611e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016122:	b29a      	uxth	r2, r3
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	3302      	adds	r3, #2
 801612c:	61bb      	str	r3, [r7, #24]
 801612e:	e01f      	b.n	8016170 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	689b      	ldr	r3, [r3, #8]
 8016134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016138:	d007      	beq.n	801614a <HAL_UART_Receive+0xf0>
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	689b      	ldr	r3, [r3, #8]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d10a      	bne.n	8016158 <HAL_UART_Receive+0xfe>
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	691b      	ldr	r3, [r3, #16]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d106      	bne.n	8016158 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	b2da      	uxtb	r2, r3
 8016152:	69fb      	ldr	r3, [r7, #28]
 8016154:	701a      	strb	r2, [r3, #0]
 8016156:	e008      	b.n	801616a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	b2db      	uxtb	r3, r3
 8016160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016164:	b2da      	uxtb	r2, r3
 8016166:	69fb      	ldr	r3, [r7, #28]
 8016168:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	3301      	adds	r3, #1
 801616e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016174:	b29b      	uxth	r3, r3
 8016176:	3b01      	subs	r3, #1
 8016178:	b29a      	uxth	r2, r3
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016182:	b29b      	uxth	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d1b6      	bne.n	80160f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2220      	movs	r2, #32
 801618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016190:	2300      	movs	r3, #0
 8016192:	e000      	b.n	8016196 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8016194:	2302      	movs	r3, #2
  }
}
 8016196:	4618      	mov	r0, r3
 8016198:	3720      	adds	r7, #32
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}

0801619e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801619e:	b480      	push	{r7}
 80161a0:	b085      	sub	sp, #20
 80161a2:	af00      	add	r7, sp, #0
 80161a4:	60f8      	str	r0, [r7, #12]
 80161a6:	60b9      	str	r1, [r7, #8]
 80161a8:	4613      	mov	r3, r2
 80161aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	2b20      	cmp	r3, #32
 80161b6:	d130      	bne.n	801621a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d002      	beq.n	80161c4 <HAL_UART_Transmit_IT+0x26>
 80161be:	88fb      	ldrh	r3, [r7, #6]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d101      	bne.n	80161c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80161c4:	2301      	movs	r3, #1
 80161c6:	e029      	b.n	801621c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d101      	bne.n	80161d6 <HAL_UART_Transmit_IT+0x38>
 80161d2:	2302      	movs	r3, #2
 80161d4:	e022      	b.n	801621c <HAL_UART_Transmit_IT+0x7e>
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2201      	movs	r2, #1
 80161da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	68ba      	ldr	r2, [r7, #8]
 80161e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	88fa      	ldrh	r2, [r7, #6]
 80161e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	88fa      	ldrh	r2, [r7, #6]
 80161ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2200      	movs	r2, #0
 80161f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2221      	movs	r2, #33	; 0x21
 80161fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2200      	movs	r2, #0
 8016202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	68da      	ldr	r2, [r3, #12]
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016214:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8016216:	2300      	movs	r3, #0
 8016218:	e000      	b.n	801621c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801621a:	2302      	movs	r3, #2
  }
}
 801621c:	4618      	mov	r0, r3
 801621e:	3714      	adds	r7, #20
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr

08016228 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	60f8      	str	r0, [r7, #12]
 8016230:	60b9      	str	r1, [r7, #8]
 8016232:	4613      	mov	r3, r2
 8016234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801623c:	b2db      	uxtb	r3, r3
 801623e:	2b20      	cmp	r3, #32
 8016240:	d11d      	bne.n	801627e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8016242:	68bb      	ldr	r3, [r7, #8]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d002      	beq.n	801624e <HAL_UART_Receive_IT+0x26>
 8016248:	88fb      	ldrh	r3, [r7, #6]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d101      	bne.n	8016252 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801624e:	2301      	movs	r3, #1
 8016250:	e016      	b.n	8016280 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016258:	2b01      	cmp	r3, #1
 801625a:	d101      	bne.n	8016260 <HAL_UART_Receive_IT+0x38>
 801625c:	2302      	movs	r3, #2
 801625e:	e00f      	b.n	8016280 <HAL_UART_Receive_IT+0x58>
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	2201      	movs	r2, #1
 8016264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2200      	movs	r2, #0
 801626c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801626e:	88fb      	ldrh	r3, [r7, #6]
 8016270:	461a      	mov	r2, r3
 8016272:	68b9      	ldr	r1, [r7, #8]
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f001 fe37 	bl	8017ee8 <UART_Start_Receive_IT>
 801627a:	4603      	mov	r3, r0
 801627c:	e000      	b.n	8016280 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801627e:	2302      	movs	r3, #2
  }
}
 8016280:	4618      	mov	r0, r3
 8016282:	3710      	adds	r7, #16
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b08c      	sub	sp, #48	; 0x30
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	4613      	mov	r3, r2
 8016294:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801629c:	b2db      	uxtb	r3, r3
 801629e:	2b20      	cmp	r3, #32
 80162a0:	d165      	bne.n	801636e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d002      	beq.n	80162ae <HAL_UART_Transmit_DMA+0x26>
 80162a8:	88fb      	ldrh	r3, [r7, #6]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d101      	bne.n	80162b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80162ae:	2301      	movs	r3, #1
 80162b0:	e05e      	b.n	8016370 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d101      	bne.n	80162c0 <HAL_UART_Transmit_DMA+0x38>
 80162bc:	2302      	movs	r3, #2
 80162be:	e057      	b.n	8016370 <HAL_UART_Transmit_DMA+0xe8>
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2201      	movs	r2, #1
 80162c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80162c8:	68ba      	ldr	r2, [r7, #8]
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	88fa      	ldrh	r2, [r7, #6]
 80162d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	88fa      	ldrh	r2, [r7, #6]
 80162d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2200      	movs	r2, #0
 80162de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2221      	movs	r2, #33	; 0x21
 80162e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162ec:	4a22      	ldr	r2, [pc, #136]	; (8016378 <HAL_UART_Transmit_DMA+0xf0>)
 80162ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162f4:	4a21      	ldr	r2, [pc, #132]	; (801637c <HAL_UART_Transmit_DMA+0xf4>)
 80162f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162fc:	4a20      	ldr	r2, [pc, #128]	; (8016380 <HAL_UART_Transmit_DMA+0xf8>)
 80162fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016304:	2200      	movs	r2, #0
 8016306:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8016308:	f107 0308 	add.w	r3, r7, #8
 801630c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016314:	6819      	ldr	r1, [r3, #0]
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	3304      	adds	r3, #4
 801631c:	461a      	mov	r2, r3
 801631e:	88fb      	ldrh	r3, [r7, #6]
 8016320:	f7f2 f861 	bl	80083e6 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801632c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2200      	movs	r2, #0
 8016332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	3314      	adds	r3, #20
 801633c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801633e:	69bb      	ldr	r3, [r7, #24]
 8016340:	e853 3f00 	ldrex	r3, [r3]
 8016344:	617b      	str	r3, [r7, #20]
   return(result);
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801634c:	62bb      	str	r3, [r7, #40]	; 0x28
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	3314      	adds	r3, #20
 8016354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016356:	627a      	str	r2, [r7, #36]	; 0x24
 8016358:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801635a:	6a39      	ldr	r1, [r7, #32]
 801635c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801635e:	e841 2300 	strex	r3, r2, [r1]
 8016362:	61fb      	str	r3, [r7, #28]
   return(result);
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d1e5      	bne.n	8016336 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801636a:	2300      	movs	r3, #0
 801636c:	e000      	b.n	8016370 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801636e:	2302      	movs	r3, #2
  }
}
 8016370:	4618      	mov	r0, r3
 8016372:	3730      	adds	r7, #48	; 0x30
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	08017b67 	.word	0x08017b67
 801637c:	08017c01 	.word	0x08017c01
 8016380:	08017d79 	.word	0x08017d79

08016384 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b084      	sub	sp, #16
 8016388:	af00      	add	r7, sp, #0
 801638a:	60f8      	str	r0, [r7, #12]
 801638c:	60b9      	str	r1, [r7, #8]
 801638e:	4613      	mov	r3, r2
 8016390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016398:	b2db      	uxtb	r3, r3
 801639a:	2b20      	cmp	r3, #32
 801639c:	d11d      	bne.n	80163da <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d002      	beq.n	80163aa <HAL_UART_Receive_DMA+0x26>
 80163a4:	88fb      	ldrh	r3, [r7, #6]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d101      	bne.n	80163ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80163aa:	2301      	movs	r3, #1
 80163ac:	e016      	b.n	80163dc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80163b4:	2b01      	cmp	r3, #1
 80163b6:	d101      	bne.n	80163bc <HAL_UART_Receive_DMA+0x38>
 80163b8:	2302      	movs	r3, #2
 80163ba:	e00f      	b.n	80163dc <HAL_UART_Receive_DMA+0x58>
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	2201      	movs	r2, #1
 80163c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	2200      	movs	r2, #0
 80163c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80163ca:	88fb      	ldrh	r3, [r7, #6]
 80163cc:	461a      	mov	r2, r3
 80163ce:	68b9      	ldr	r1, [r7, #8]
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f001 fdc3 	bl	8017f5c <UART_Start_Receive_DMA>
 80163d6:	4603      	mov	r3, r0
 80163d8:	e000      	b.n	80163dc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80163da:	2302      	movs	r3, #2
  }
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3710      	adds	r7, #16
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}

080163e4 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80163e4:	b480      	push	{r7}
 80163e6:	b09d      	sub	sp, #116	; 0x74
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80163ec:	2300      	movs	r3, #0
 80163ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d101      	bne.n	80163fe <HAL_UART_DMAPause+0x1a>
 80163fa:	2302      	movs	r3, #2
 80163fc:	e098      	b.n	8016530 <HAL_UART_DMAPause+0x14c>
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	2201      	movs	r2, #1
 8016402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	695b      	ldr	r3, [r3, #20]
 801640c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016410:	2b80      	cmp	r3, #128	; 0x80
 8016412:	bf0c      	ite	eq
 8016414:	2301      	moveq	r3, #1
 8016416:	2300      	movne	r3, #0
 8016418:	b2db      	uxtb	r3, r3
 801641a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016422:	b2db      	uxtb	r3, r3
 8016424:	2b21      	cmp	r3, #33	; 0x21
 8016426:	d11c      	bne.n	8016462 <HAL_UART_DMAPause+0x7e>
 8016428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801642a:	2b00      	cmp	r3, #0
 801642c:	d019      	beq.n	8016462 <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	3314      	adds	r3, #20
 8016434:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016438:	e853 3f00 	ldrex	r3, [r3]
 801643c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801643e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016444:	66bb      	str	r3, [r7, #104]	; 0x68
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	3314      	adds	r3, #20
 801644c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801644e:	65ba      	str	r2, [r7, #88]	; 0x58
 8016450:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016452:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016454:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016456:	e841 2300 	strex	r3, r2, [r1]
 801645a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801645c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1e5      	bne.n	801642e <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	695b      	ldr	r3, [r3, #20]
 8016468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801646c:	2b40      	cmp	r3, #64	; 0x40
 801646e:	bf0c      	ite	eq
 8016470:	2301      	moveq	r3, #1
 8016472:	2300      	movne	r3, #0
 8016474:	b2db      	uxtb	r3, r3
 8016476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801647e:	b2db      	uxtb	r3, r3
 8016480:	2b22      	cmp	r3, #34	; 0x22
 8016482:	d150      	bne.n	8016526 <HAL_UART_DMAPause+0x142>
 8016484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016486:	2b00      	cmp	r3, #0
 8016488:	d04d      	beq.n	8016526 <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	330c      	adds	r3, #12
 8016490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016494:	e853 3f00 	ldrex	r3, [r3]
 8016498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801649c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164a0:	667b      	str	r3, [r7, #100]	; 0x64
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	330c      	adds	r3, #12
 80164a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80164aa:	647a      	str	r2, [r7, #68]	; 0x44
 80164ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80164b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80164b2:	e841 2300 	strex	r3, r2, [r1]
 80164b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80164b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d1e5      	bne.n	801648a <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	3314      	adds	r3, #20
 80164c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c8:	e853 3f00 	ldrex	r3, [r3]
 80164cc:	623b      	str	r3, [r7, #32]
   return(result);
 80164ce:	6a3b      	ldr	r3, [r7, #32]
 80164d0:	f023 0301 	bic.w	r3, r3, #1
 80164d4:	663b      	str	r3, [r7, #96]	; 0x60
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	3314      	adds	r3, #20
 80164dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80164de:	633a      	str	r2, [r7, #48]	; 0x30
 80164e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80164e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164e6:	e841 2300 	strex	r3, r2, [r1]
 80164ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80164ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1e5      	bne.n	80164be <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	3314      	adds	r3, #20
 80164f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	e853 3f00 	ldrex	r3, [r3]
 8016500:	60fb      	str	r3, [r7, #12]
   return(result);
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016508:	65fb      	str	r3, [r7, #92]	; 0x5c
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	3314      	adds	r3, #20
 8016510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016512:	61fa      	str	r2, [r7, #28]
 8016514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016516:	69b9      	ldr	r1, [r7, #24]
 8016518:	69fa      	ldr	r2, [r7, #28]
 801651a:	e841 2300 	strex	r3, r2, [r1]
 801651e:	617b      	str	r3, [r7, #20]
   return(result);
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d1e5      	bne.n	80164f2 <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2200      	movs	r2, #0
 801652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801652e:	2300      	movs	r3, #0
}
 8016530:	4618      	mov	r0, r3
 8016532:	3774      	adds	r7, #116	; 0x74
 8016534:	46bd      	mov	sp, r7
 8016536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653a:	4770      	bx	lr

0801653c <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 801653c:	b480      	push	{r7}
 801653e:	b09d      	sub	sp, #116	; 0x74
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801654a:	2b01      	cmp	r3, #1
 801654c:	d101      	bne.n	8016552 <HAL_UART_DMAResume+0x16>
 801654e:	2302      	movs	r3, #2
 8016550:	e087      	b.n	8016662 <HAL_UART_DMAResume+0x126>
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2201      	movs	r2, #1
 8016556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016560:	b2db      	uxtb	r3, r3
 8016562:	2b21      	cmp	r3, #33	; 0x21
 8016564:	d119      	bne.n	801659a <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	3314      	adds	r3, #20
 801656c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016570:	e853 3f00 	ldrex	r3, [r3]
 8016574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801657c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	3314      	adds	r3, #20
 8016584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016586:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016588:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801658a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801658c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801658e:	e841 2300 	strex	r3, r2, [r1]
 8016592:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016596:	2b00      	cmp	r3, #0
 8016598:	d1e5      	bne.n	8016566 <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80165a0:	b2db      	uxtb	r3, r3
 80165a2:	2b22      	cmp	r3, #34	; 0x22
 80165a4:	d158      	bne.n	8016658 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80165a6:	2300      	movs	r3, #0
 80165a8:	60fb      	str	r3, [r7, #12]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	60fb      	str	r3, [r7, #12]
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	685b      	ldr	r3, [r3, #4]
 80165b8:	60fb      	str	r3, [r7, #12]
 80165ba:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	330c      	adds	r3, #12
 80165c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165c6:	e853 3f00 	ldrex	r3, [r3]
 80165ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80165cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80165d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	330c      	adds	r3, #12
 80165da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80165dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80165de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80165e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80165e4:	e841 2300 	strex	r3, r2, [r1]
 80165e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80165ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d1e5      	bne.n	80165bc <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	3314      	adds	r3, #20
 80165f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fa:	e853 3f00 	ldrex	r3, [r3]
 80165fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016602:	f043 0301 	orr.w	r3, r3, #1
 8016606:	667b      	str	r3, [r7, #100]	; 0x64
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	3314      	adds	r3, #20
 801660e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016610:	637a      	str	r2, [r7, #52]	; 0x34
 8016612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016618:	e841 2300 	strex	r3, r2, [r1]
 801661c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016620:	2b00      	cmp	r3, #0
 8016622:	d1e5      	bne.n	80165f0 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	3314      	adds	r3, #20
 801662a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	e853 3f00 	ldrex	r3, [r3]
 8016632:	613b      	str	r3, [r7, #16]
   return(result);
 8016634:	693b      	ldr	r3, [r7, #16]
 8016636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801663a:	663b      	str	r3, [r7, #96]	; 0x60
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	3314      	adds	r3, #20
 8016642:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016644:	623a      	str	r2, [r7, #32]
 8016646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016648:	69f9      	ldr	r1, [r7, #28]
 801664a:	6a3a      	ldr	r2, [r7, #32]
 801664c:	e841 2300 	strex	r3, r2, [r1]
 8016650:	61bb      	str	r3, [r7, #24]
   return(result);
 8016652:	69bb      	ldr	r3, [r7, #24]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d1e5      	bne.n	8016624 <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2200      	movs	r2, #0
 801665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016660:	2300      	movs	r3, #0
}
 8016662:	4618      	mov	r0, r3
 8016664:	3774      	adds	r7, #116	; 0x74
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr

0801666e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801666e:	b580      	push	{r7, lr}
 8016670:	b090      	sub	sp, #64	; 0x40
 8016672:	af00      	add	r7, sp, #0
 8016674:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8016676:	2300      	movs	r3, #0
 8016678:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	695b      	ldr	r3, [r3, #20]
 8016680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016684:	2b80      	cmp	r3, #128	; 0x80
 8016686:	bf0c      	ite	eq
 8016688:	2301      	moveq	r3, #1
 801668a:	2300      	movne	r3, #0
 801668c:	b2db      	uxtb	r3, r3
 801668e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016696:	b2db      	uxtb	r3, r3
 8016698:	2b21      	cmp	r3, #33	; 0x21
 801669a:	d128      	bne.n	80166ee <HAL_UART_DMAStop+0x80>
 801669c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d025      	beq.n	80166ee <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	3314      	adds	r3, #20
 80166a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ac:	e853 3f00 	ldrex	r3, [r3]
 80166b0:	623b      	str	r3, [r7, #32]
   return(result);
 80166b2:	6a3b      	ldr	r3, [r7, #32]
 80166b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80166b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	3314      	adds	r3, #20
 80166c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166c2:	633a      	str	r2, [r7, #48]	; 0x30
 80166c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166ca:	e841 2300 	strex	r3, r2, [r1]
 80166ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80166d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d1e5      	bne.n	80166a2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d004      	beq.n	80166e8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7f1 fed7 	bl	8008496 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f001 fcd1 	bl	8018090 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	695b      	ldr	r3, [r3, #20]
 80166f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166f8:	2b40      	cmp	r3, #64	; 0x40
 80166fa:	bf0c      	ite	eq
 80166fc:	2301      	moveq	r3, #1
 80166fe:	2300      	movne	r3, #0
 8016700:	b2db      	uxtb	r3, r3
 8016702:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801670a:	b2db      	uxtb	r3, r3
 801670c:	2b22      	cmp	r3, #34	; 0x22
 801670e:	d128      	bne.n	8016762 <HAL_UART_DMAStop+0xf4>
 8016710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016712:	2b00      	cmp	r3, #0
 8016714:	d025      	beq.n	8016762 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	3314      	adds	r3, #20
 801671c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	e853 3f00 	ldrex	r3, [r3]
 8016724:	60fb      	str	r3, [r7, #12]
   return(result);
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801672c:	637b      	str	r3, [r7, #52]	; 0x34
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	3314      	adds	r3, #20
 8016734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016736:	61fa      	str	r2, [r7, #28]
 8016738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801673a:	69b9      	ldr	r1, [r7, #24]
 801673c:	69fa      	ldr	r2, [r7, #28]
 801673e:	e841 2300 	strex	r3, r2, [r1]
 8016742:	617b      	str	r3, [r7, #20]
   return(result);
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d1e5      	bne.n	8016716 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801674e:	2b00      	cmp	r3, #0
 8016750:	d004      	beq.n	801675c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016756:	4618      	mov	r0, r3
 8016758:	f7f1 fe9d 	bl	8008496 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f001 fcbf 	bl	80180e0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8016762:	2300      	movs	r3, #0
}
 8016764:	4618      	mov	r0, r3
 8016766:	3740      	adds	r7, #64	; 0x40
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}

0801676c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b088      	sub	sp, #32
 8016770:	af00      	add	r7, sp, #0
 8016772:	60f8      	str	r0, [r7, #12]
 8016774:	60b9      	str	r1, [r7, #8]
 8016776:	603b      	str	r3, [r7, #0]
 8016778:	4613      	mov	r3, r2
 801677a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016782:	b2db      	uxtb	r3, r3
 8016784:	2b20      	cmp	r3, #32
 8016786:	f040 80c9 	bne.w	801691c <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d002      	beq.n	8016796 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8016790:	88fb      	ldrh	r3, [r7, #6]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d101      	bne.n	801679a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8016796:	2301      	movs	r3, #1
 8016798:	e0c1      	b.n	801691e <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80167a0:	2b01      	cmp	r3, #1
 80167a2:	d101      	bne.n	80167a8 <HAL_UARTEx_ReceiveToIdle+0x3c>
 80167a4:	2302      	movs	r3, #2
 80167a6:	e0ba      	b.n	801691e <HAL_UARTEx_ReceiveToIdle+0x1b2>
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2201      	movs	r2, #1
 80167ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	2200      	movs	r2, #0
 80167b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2222      	movs	r2, #34	; 0x22
 80167ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2201      	movs	r2, #1
 80167c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80167c4:	f7f0 fba6 	bl	8006f14 <HAL_GetTick>
 80167c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	88fa      	ldrh	r2, [r7, #6]
 80167ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	88fa      	ldrh	r2, [r7, #6]
 80167d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	689b      	ldr	r3, [r3, #8]
 80167da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80167de:	d108      	bne.n	80167f2 <HAL_UARTEx_ReceiveToIdle+0x86>
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	691b      	ldr	r3, [r3, #16]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d104      	bne.n	80167f2 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80167e8:	2300      	movs	r3, #0
 80167ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	61bb      	str	r3, [r7, #24]
 80167f0:	e003      	b.n	80167fa <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80167f6:	2300      	movs	r3, #0
 80167f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	2200      	movs	r2, #0
 80167fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	2200      	movs	r2, #0
 8016806:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016808:	e074      	b.n	80168f4 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	f003 0310 	and.w	r3, r3, #16
 8016814:	2b10      	cmp	r3, #16
 8016816:	d114      	bne.n	8016842 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016818:	2300      	movs	r3, #0
 801681a:	613b      	str	r3, [r7, #16]
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	613b      	str	r3, [r7, #16]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	613b      	str	r3, [r7, #16]
 801682c:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	881b      	ldrh	r3, [r3, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d005      	beq.n	8016842 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2220      	movs	r2, #32
 801683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 801683e:	2300      	movs	r3, #0
 8016840:	e06d      	b.n	801691e <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	f003 0320 	and.w	r3, r3, #32
 801684c:	2b20      	cmp	r3, #32
 801684e:	d13c      	bne.n	80168ca <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8016850:	69fb      	ldr	r3, [r7, #28]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d10c      	bne.n	8016870 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	b29b      	uxth	r3, r3
 801685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016862:	b29a      	uxth	r2, r3
 8016864:	69bb      	ldr	r3, [r7, #24]
 8016866:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8016868:	69bb      	ldr	r3, [r7, #24]
 801686a:	3302      	adds	r3, #2
 801686c:	61bb      	str	r3, [r7, #24]
 801686e:	e01f      	b.n	80168b0 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016878:	d007      	beq.n	801688a <HAL_UARTEx_ReceiveToIdle+0x11e>
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	689b      	ldr	r3, [r3, #8]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d10a      	bne.n	8016898 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	691b      	ldr	r3, [r3, #16]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d106      	bne.n	8016898 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	b2da      	uxtb	r2, r3
 8016892:	69fb      	ldr	r3, [r7, #28]
 8016894:	701a      	strb	r2, [r3, #0]
 8016896:	e008      	b.n	80168aa <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168a4:	b2da      	uxtb	r2, r3
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80168aa:	69fb      	ldr	r3, [r7, #28]
 80168ac:	3301      	adds	r3, #1
 80168ae:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	881b      	ldrh	r3, [r3, #0]
 80168b4:	3301      	adds	r3, #1
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	3b01      	subs	r3, #1
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80168ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168d0:	d010      	beq.n	80168f4 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80168d2:	f7f0 fb1f 	bl	8006f14 <HAL_GetTick>
 80168d6:	4602      	mov	r2, r0
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	1ad3      	subs	r3, r2, r3
 80168dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168de:	429a      	cmp	r2, r3
 80168e0:	d302      	bcc.n	80168e8 <HAL_UARTEx_ReceiveToIdle+0x17c>
 80168e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d105      	bne.n	80168f4 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2220      	movs	r2, #32
 80168ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 80168f0:	2303      	movs	r3, #3
 80168f2:	e014      	b.n	801691e <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d185      	bne.n	801680a <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016906:	b29b      	uxth	r3, r3
 8016908:	1ad3      	subs	r3, r2, r3
 801690a:	b29a      	uxth	r2, r3
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	2220      	movs	r2, #32
 8016914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016918:	2300      	movs	r3, #0
 801691a:	e000      	b.n	801691e <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 801691c:	2302      	movs	r3, #2
  }
}
 801691e:	4618      	mov	r0, r3
 8016920:	3720      	adds	r7, #32
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}

08016926 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016926:	b580      	push	{r7, lr}
 8016928:	b08c      	sub	sp, #48	; 0x30
 801692a:	af00      	add	r7, sp, #0
 801692c:	60f8      	str	r0, [r7, #12]
 801692e:	60b9      	str	r1, [r7, #8]
 8016930:	4613      	mov	r3, r2
 8016932:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801693a:	b2db      	uxtb	r3, r3
 801693c:	2b20      	cmp	r3, #32
 801693e:	d152      	bne.n	80169e6 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d002      	beq.n	801694c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8016946:	88fb      	ldrh	r3, [r7, #6]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d101      	bne.n	8016950 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 801694c:	2301      	movs	r3, #1
 801694e:	e04b      	b.n	80169e8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016956:	2b01      	cmp	r3, #1
 8016958:	d101      	bne.n	801695e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 801695a:	2302      	movs	r3, #2
 801695c:	e044      	b.n	80169e8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2201      	movs	r2, #1
 8016962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	2201      	movs	r2, #1
 801696a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801696c:	88fb      	ldrh	r3, [r7, #6]
 801696e:	461a      	mov	r2, r3
 8016970:	68b9      	ldr	r1, [r7, #8]
 8016972:	68f8      	ldr	r0, [r7, #12]
 8016974:	f001 fab8 	bl	8017ee8 <UART_Start_Receive_IT>
 8016978:	4603      	mov	r3, r0
 801697a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801697e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016982:	2b00      	cmp	r3, #0
 8016984:	d12c      	bne.n	80169e0 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801698a:	2b01      	cmp	r3, #1
 801698c:	d125      	bne.n	80169da <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801698e:	2300      	movs	r3, #0
 8016990:	613b      	str	r3, [r7, #16]
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	613b      	str	r3, [r7, #16]
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	613b      	str	r3, [r7, #16]
 80169a2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	330c      	adds	r3, #12
 80169aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169ac:	69bb      	ldr	r3, [r7, #24]
 80169ae:	e853 3f00 	ldrex	r3, [r3]
 80169b2:	617b      	str	r3, [r7, #20]
   return(result);
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	f043 0310 	orr.w	r3, r3, #16
 80169ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	330c      	adds	r3, #12
 80169c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80169c4:	627a      	str	r2, [r7, #36]	; 0x24
 80169c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169c8:	6a39      	ldr	r1, [r7, #32]
 80169ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169cc:	e841 2300 	strex	r3, r2, [r1]
 80169d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80169d2:	69fb      	ldr	r3, [r7, #28]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d1e5      	bne.n	80169a4 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80169d8:	e002      	b.n	80169e0 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80169da:	2301      	movs	r3, #1
 80169dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80169e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80169e4:	e000      	b.n	80169e8 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80169e6:	2302      	movs	r3, #2
  }
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3730      	adds	r7, #48	; 0x30
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b08c      	sub	sp, #48	; 0x30
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	60f8      	str	r0, [r7, #12]
 80169f8:	60b9      	str	r1, [r7, #8]
 80169fa:	4613      	mov	r3, r2
 80169fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	2b20      	cmp	r3, #32
 8016a08:	d152      	bne.n	8016ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d002      	beq.n	8016a16 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016a10:	88fb      	ldrh	r3, [r7, #6]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d101      	bne.n	8016a1a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8016a16:	2301      	movs	r3, #1
 8016a18:	e04b      	b.n	8016ab2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d101      	bne.n	8016a28 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8016a24:	2302      	movs	r3, #2
 8016a26:	e044      	b.n	8016ab2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2201      	movs	r2, #1
 8016a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	2201      	movs	r2, #1
 8016a34:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8016a36:	88fb      	ldrh	r3, [r7, #6]
 8016a38:	461a      	mov	r2, r3
 8016a3a:	68b9      	ldr	r1, [r7, #8]
 8016a3c:	68f8      	ldr	r0, [r7, #12]
 8016a3e:	f001 fa8d 	bl	8017f5c <UART_Start_Receive_DMA>
 8016a42:	4603      	mov	r3, r0
 8016a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016a48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d12c      	bne.n	8016aaa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a54:	2b01      	cmp	r3, #1
 8016a56:	d125      	bne.n	8016aa4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016a58:	2300      	movs	r3, #0
 8016a5a:	613b      	str	r3, [r7, #16]
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	613b      	str	r3, [r7, #16]
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	613b      	str	r3, [r7, #16]
 8016a6c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	330c      	adds	r3, #12
 8016a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	e853 3f00 	ldrex	r3, [r3]
 8016a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	f043 0310 	orr.w	r3, r3, #16
 8016a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	330c      	adds	r3, #12
 8016a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8016a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a92:	6a39      	ldr	r1, [r7, #32]
 8016a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a96:	e841 2300 	strex	r3, r2, [r1]
 8016a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d1e5      	bne.n	8016a6e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8016aa2:	e002      	b.n	8016aaa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016aae:	e000      	b.n	8016ab2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8016ab0:	2302      	movs	r3, #2
  }
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	3730      	adds	r7, #48	; 0x30
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b0a0      	sub	sp, #128	; 0x80
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	330c      	adds	r3, #12
 8016ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016acc:	e853 3f00 	ldrex	r3, [r3]
 8016ad0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ad4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	330c      	adds	r3, #12
 8016ae0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016ae2:	66ba      	str	r2, [r7, #104]	; 0x68
 8016ae4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ae6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016aea:	e841 2300 	strex	r3, r2, [r1]
 8016aee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d1e5      	bne.n	8016ac2 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	3314      	adds	r3, #20
 8016afc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b00:	e853 3f00 	ldrex	r3, [r3]
 8016b04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b08:	f023 0301 	bic.w	r3, r3, #1
 8016b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	3314      	adds	r3, #20
 8016b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016b16:	657a      	str	r2, [r7, #84]	; 0x54
 8016b18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b1e:	e841 2300 	strex	r3, r2, [r1]
 8016b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d1e5      	bne.n	8016af6 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d119      	bne.n	8016b66 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	330c      	adds	r3, #12
 8016b38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b3c:	e853 3f00 	ldrex	r3, [r3]
 8016b40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b44:	f023 0310 	bic.w	r3, r3, #16
 8016b48:	677b      	str	r3, [r7, #116]	; 0x74
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	330c      	adds	r3, #12
 8016b50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016b52:	643a      	str	r2, [r7, #64]	; 0x40
 8016b54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016b58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b5a:	e841 2300 	strex	r3, r2, [r1]
 8016b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d1e5      	bne.n	8016b32 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	695b      	ldr	r3, [r3, #20]
 8016b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b70:	2b80      	cmp	r3, #128	; 0x80
 8016b72:	d136      	bne.n	8016be2 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	3314      	adds	r3, #20
 8016b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b7c:	6a3b      	ldr	r3, [r7, #32]
 8016b7e:	e853 3f00 	ldrex	r3, [r3]
 8016b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8016b84:	69fb      	ldr	r3, [r7, #28]
 8016b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b8a:	673b      	str	r3, [r7, #112]	; 0x70
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	3314      	adds	r3, #20
 8016b92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b9c:	e841 2300 	strex	r3, r2, [r1]
 8016ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d1e5      	bne.n	8016b74 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d018      	beq.n	8016be2 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7f1 fc6a 	bl	8008496 <HAL_DMA_Abort>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d00c      	beq.n	8016be2 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7f2 f826 	bl	8008c1e <HAL_DMA_GetError>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	2b20      	cmp	r3, #32
 8016bd6:	d104      	bne.n	8016be2 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	2210      	movs	r2, #16
 8016bdc:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016bde:	2303      	movs	r3, #3
 8016be0:	e052      	b.n	8016c88 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	695b      	ldr	r3, [r3, #20]
 8016be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bec:	2b40      	cmp	r3, #64	; 0x40
 8016bee:	d136      	bne.n	8016c5e <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	3314      	adds	r3, #20
 8016bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	e853 3f00 	ldrex	r3, [r3]
 8016bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	3314      	adds	r3, #20
 8016c0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016c10:	61ba      	str	r2, [r7, #24]
 8016c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c14:	6979      	ldr	r1, [r7, #20]
 8016c16:	69ba      	ldr	r2, [r7, #24]
 8016c18:	e841 2300 	strex	r3, r2, [r1]
 8016c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d1e5      	bne.n	8016bf0 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d018      	beq.n	8016c5e <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c30:	2200      	movs	r2, #0
 8016c32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7f1 fc2c 	bl	8008496 <HAL_DMA_Abort>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d00c      	beq.n	8016c5e <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7f1 ffe8 	bl	8008c1e <HAL_DMA_GetError>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	2b20      	cmp	r3, #32
 8016c52:	d104      	bne.n	8016c5e <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	2210      	movs	r2, #16
 8016c58:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016c5a:	2303      	movs	r3, #3
 8016c5c:	e014      	b.n	8016c88 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2200      	movs	r2, #0
 8016c62:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2200      	movs	r2, #0
 8016c68:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2220      	movs	r2, #32
 8016c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2220      	movs	r2, #32
 8016c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2200      	movs	r2, #0
 8016c84:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016c86:	2300      	movs	r3, #0
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3780      	adds	r7, #128	; 0x80
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b08e      	sub	sp, #56	; 0x38
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	330c      	adds	r3, #12
 8016c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ca0:	6a3b      	ldr	r3, [r7, #32]
 8016ca2:	e853 3f00 	ldrex	r3, [r3]
 8016ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8016ca8:	69fb      	ldr	r3, [r7, #28]
 8016caa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016cae:	637b      	str	r3, [r7, #52]	; 0x34
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	330c      	adds	r3, #12
 8016cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cc0:	e841 2300 	strex	r3, r2, [r1]
 8016cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d1e5      	bne.n	8016c98 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	695b      	ldr	r3, [r3, #20]
 8016cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016cd6:	2b80      	cmp	r3, #128	; 0x80
 8016cd8:	d136      	bne.n	8016d48 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	3314      	adds	r3, #20
 8016ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	e853 3f00 	ldrex	r3, [r3]
 8016ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	3314      	adds	r3, #20
 8016cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cfa:	61ba      	str	r2, [r7, #24]
 8016cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cfe:	6979      	ldr	r1, [r7, #20]
 8016d00:	69ba      	ldr	r2, [r7, #24]
 8016d02:	e841 2300 	strex	r3, r2, [r1]
 8016d06:	613b      	str	r3, [r7, #16]
   return(result);
 8016d08:	693b      	ldr	r3, [r7, #16]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d1e5      	bne.n	8016cda <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d018      	beq.n	8016d48 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7f1 fbb7 	bl	8008496 <HAL_DMA_Abort>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d00c      	beq.n	8016d48 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d32:	4618      	mov	r0, r3
 8016d34:	f7f1 ff73 	bl	8008c1e <HAL_DMA_GetError>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b20      	cmp	r3, #32
 8016d3c:	d104      	bne.n	8016d48 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	2210      	movs	r2, #16
 8016d42:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016d44:	2303      	movs	r3, #3
 8016d46:	e007      	b.n	8016d58 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2220      	movs	r2, #32
 8016d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016d56:	2300      	movs	r3, #0
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3738      	adds	r7, #56	; 0x38
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b09a      	sub	sp, #104	; 0x68
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	330c      	adds	r3, #12
 8016d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d72:	e853 3f00 	ldrex	r3, [r3]
 8016d76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	330c      	adds	r3, #12
 8016d86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016d88:	657a      	str	r2, [r7, #84]	; 0x54
 8016d8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016d8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016d90:	e841 2300 	strex	r3, r2, [r1]
 8016d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d1e5      	bne.n	8016d68 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	3314      	adds	r3, #20
 8016da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016da6:	e853 3f00 	ldrex	r3, [r3]
 8016daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dae:	f023 0301 	bic.w	r3, r3, #1
 8016db2:	663b      	str	r3, [r7, #96]	; 0x60
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	3314      	adds	r3, #20
 8016dba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8016dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016dc4:	e841 2300 	strex	r3, r2, [r1]
 8016dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d1e5      	bne.n	8016d9c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dd4:	2b01      	cmp	r3, #1
 8016dd6:	d119      	bne.n	8016e0c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	330c      	adds	r3, #12
 8016dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016de0:	6a3b      	ldr	r3, [r7, #32]
 8016de2:	e853 3f00 	ldrex	r3, [r3]
 8016de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	f023 0310 	bic.w	r3, r3, #16
 8016dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	330c      	adds	r3, #12
 8016df6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e00:	e841 2300 	strex	r3, r2, [r1]
 8016e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d1e5      	bne.n	8016dd8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	695b      	ldr	r3, [r3, #20]
 8016e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e16:	2b40      	cmp	r3, #64	; 0x40
 8016e18:	d136      	bne.n	8016e88 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	3314      	adds	r3, #20
 8016e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	e853 3f00 	ldrex	r3, [r3]
 8016e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	3314      	adds	r3, #20
 8016e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016e3a:	61ba      	str	r2, [r7, #24]
 8016e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e3e:	6979      	ldr	r1, [r7, #20]
 8016e40:	69ba      	ldr	r2, [r7, #24]
 8016e42:	e841 2300 	strex	r3, r2, [r1]
 8016e46:	613b      	str	r3, [r7, #16]
   return(result);
 8016e48:	693b      	ldr	r3, [r7, #16]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d1e5      	bne.n	8016e1a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d018      	beq.n	8016e88 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7f1 fb17 	bl	8008496 <HAL_DMA_Abort>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d00c      	beq.n	8016e88 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7f1 fed3 	bl	8008c1e <HAL_DMA_GetError>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b20      	cmp	r3, #32
 8016e7c:	d104      	bne.n	8016e88 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	2210      	movs	r2, #16
 8016e82:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016e84:	2303      	movs	r3, #3
 8016e86:	e00a      	b.n	8016e9e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2220      	movs	r2, #32
 8016e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2200      	movs	r2, #0
 8016e9a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016e9c:	2300      	movs	r3, #0
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3768      	adds	r7, #104	; 0x68
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}

08016ea6 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8016ea6:	b580      	push	{r7, lr}
 8016ea8:	b0a2      	sub	sp, #136	; 0x88
 8016eaa:	af00      	add	r7, sp, #0
 8016eac:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	330c      	adds	r3, #12
 8016eba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ebe:	e853 3f00 	ldrex	r3, [r3]
 8016ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ec6:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	330c      	adds	r3, #12
 8016ed4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016ed8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016eda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016edc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016ede:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016ee0:	e841 2300 	strex	r3, r2, [r1]
 8016ee4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d1e3      	bne.n	8016eb4 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	3314      	adds	r3, #20
 8016ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ef6:	e853 3f00 	ldrex	r3, [r3]
 8016efa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016efe:	f023 0301 	bic.w	r3, r3, #1
 8016f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	3314      	adds	r3, #20
 8016f0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016f0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8016f0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f14:	e841 2300 	strex	r3, r2, [r1]
 8016f18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d1e5      	bne.n	8016eec <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d119      	bne.n	8016f5c <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	330c      	adds	r3, #12
 8016f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f32:	e853 3f00 	ldrex	r3, [r3]
 8016f36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f3a:	f023 0310 	bic.w	r3, r3, #16
 8016f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	330c      	adds	r3, #12
 8016f46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016f48:	647a      	str	r2, [r7, #68]	; 0x44
 8016f4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f50:	e841 2300 	strex	r3, r2, [r1]
 8016f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d1e5      	bne.n	8016f28 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d00f      	beq.n	8016f84 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	695b      	ldr	r3, [r3, #20]
 8016f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f6e:	2b80      	cmp	r3, #128	; 0x80
 8016f70:	d104      	bne.n	8016f7c <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f76:	4a54      	ldr	r2, [pc, #336]	; (80170c8 <HAL_UART_Abort_IT+0x222>)
 8016f78:	651a      	str	r2, [r3, #80]	; 0x50
 8016f7a:	e003      	b.n	8016f84 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f80:	2200      	movs	r2, #0
 8016f82:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d00f      	beq.n	8016fac <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	695b      	ldr	r3, [r3, #20]
 8016f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f96:	2b40      	cmp	r3, #64	; 0x40
 8016f98:	d104      	bne.n	8016fa4 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f9e:	4a4b      	ldr	r2, [pc, #300]	; (80170cc <HAL_UART_Abort_IT+0x226>)
 8016fa0:	651a      	str	r2, [r3, #80]	; 0x50
 8016fa2:	e003      	b.n	8016fac <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fa8:	2200      	movs	r2, #0
 8016faa:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	695b      	ldr	r3, [r3, #20]
 8016fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fb6:	2b80      	cmp	r3, #128	; 0x80
 8016fb8:	d12d      	bne.n	8017016 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	3314      	adds	r3, #20
 8016fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc4:	e853 3f00 	ldrex	r3, [r3]
 8016fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8016fca:	6a3b      	ldr	r3, [r7, #32]
 8016fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016fd0:	677b      	str	r3, [r7, #116]	; 0x74
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	3314      	adds	r3, #20
 8016fd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016fda:	633a      	str	r2, [r7, #48]	; 0x30
 8016fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fe2:	e841 2300 	strex	r3, r2, [r1]
 8016fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d1e5      	bne.n	8016fba <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d00f      	beq.n	8017016 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7f1 fabb 	bl	8008576 <HAL_DMA_Abort_IT>
 8017000:	4603      	mov	r3, r0
 8017002:	2b00      	cmp	r3, #0
 8017004:	d004      	beq.n	8017010 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801700a:	2200      	movs	r2, #0
 801700c:	651a      	str	r2, [r3, #80]	; 0x50
 801700e:	e002      	b.n	8017016 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8017010:	2300      	movs	r3, #0
 8017012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	695b      	ldr	r3, [r3, #20]
 801701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017020:	2b40      	cmp	r3, #64	; 0x40
 8017022:	d130      	bne.n	8017086 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	3314      	adds	r3, #20
 801702a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	e853 3f00 	ldrex	r3, [r3]
 8017032:	60fb      	str	r3, [r7, #12]
   return(result);
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801703a:	673b      	str	r3, [r7, #112]	; 0x70
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	3314      	adds	r3, #20
 8017042:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017044:	61fa      	str	r2, [r7, #28]
 8017046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017048:	69b9      	ldr	r1, [r7, #24]
 801704a:	69fa      	ldr	r2, [r7, #28]
 801704c:	e841 2300 	strex	r3, r2, [r1]
 8017050:	617b      	str	r3, [r7, #20]
   return(result);
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d1e5      	bne.n	8017024 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801705c:	2b00      	cmp	r3, #0
 801705e:	d012      	beq.n	8017086 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017064:	4618      	mov	r0, r3
 8017066:	f7f1 fa86 	bl	8008576 <HAL_DMA_Abort_IT>
 801706a:	4603      	mov	r3, r0
 801706c:	2b00      	cmp	r3, #0
 801706e:	d007      	beq.n	8017080 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017074:	2200      	movs	r2, #0
 8017076:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8017078:	2301      	movs	r3, #1
 801707a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801707e:	e002      	b.n	8017086 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8017080:	2300      	movs	r3, #0
 8017082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8017086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801708a:	2b01      	cmp	r3, #1
 801708c:	d116      	bne.n	80170bc <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2200      	movs	r2, #0
 8017092:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2200      	movs	r2, #0
 8017098:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	2200      	movs	r2, #0
 801709e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2220      	movs	r2, #32
 80170a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2220      	movs	r2, #32
 80170ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2200      	movs	r2, #0
 80170b4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f000 fbe5 	bl	8017886 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80170bc:	2300      	movs	r3, #0
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3788      	adds	r7, #136	; 0x88
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	080181cf 	.word	0x080181cf
 80170cc:	0801822f 	.word	0x0801822f

080170d0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b08e      	sub	sp, #56	; 0x38
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	330c      	adds	r3, #12
 80170de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170e0:	6a3b      	ldr	r3, [r7, #32]
 80170e2:	e853 3f00 	ldrex	r3, [r3]
 80170e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80170ee:	637b      	str	r3, [r7, #52]	; 0x34
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	330c      	adds	r3, #12
 80170f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80170f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80170fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80170fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017100:	e841 2300 	strex	r3, r2, [r1]
 8017104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017108:	2b00      	cmp	r3, #0
 801710a:	d1e5      	bne.n	80170d8 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	695b      	ldr	r3, [r3, #20]
 8017112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017116:	2b80      	cmp	r3, #128	; 0x80
 8017118:	d13c      	bne.n	8017194 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	3314      	adds	r3, #20
 8017120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	e853 3f00 	ldrex	r3, [r3]
 8017128:	60bb      	str	r3, [r7, #8]
   return(result);
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017130:	633b      	str	r3, [r7, #48]	; 0x30
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	3314      	adds	r3, #20
 8017138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801713a:	61ba      	str	r2, [r7, #24]
 801713c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801713e:	6979      	ldr	r1, [r7, #20]
 8017140:	69ba      	ldr	r2, [r7, #24]
 8017142:	e841 2300 	strex	r3, r2, [r1]
 8017146:	613b      	str	r3, [r7, #16]
   return(result);
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d1e5      	bne.n	801711a <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017152:	2b00      	cmp	r3, #0
 8017154:	d013      	beq.n	801717e <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801715a:	4a16      	ldr	r2, [pc, #88]	; (80171b4 <HAL_UART_AbortTransmit_IT+0xe4>)
 801715c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017162:	4618      	mov	r0, r3
 8017164:	f7f1 fa07 	bl	8008576 <HAL_DMA_Abort_IT>
 8017168:	4603      	mov	r3, r0
 801716a:	2b00      	cmp	r3, #0
 801716c:	d01c      	beq.n	80171a8 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017174:	687a      	ldr	r2, [r7, #4]
 8017176:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017178:	4610      	mov	r0, r2
 801717a:	4798      	blx	r3
 801717c:	e014      	b.n	80171a8 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2200      	movs	r2, #0
 8017182:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2220      	movs	r2, #32
 8017188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f000 fb84 	bl	801789a <HAL_UART_AbortTransmitCpltCallback>
 8017192:	e009      	b.n	80171a8 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	2200      	movs	r2, #0
 8017198:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	2220      	movs	r2, #32
 801719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 fb79 	bl	801789a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80171a8:	2300      	movs	r3, #0
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3738      	adds	r7, #56	; 0x38
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	0801828f 	.word	0x0801828f

080171b8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b09a      	sub	sp, #104	; 0x68
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	330c      	adds	r3, #12
 80171c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171ca:	e853 3f00 	ldrex	r3, [r3]
 80171ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80171d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80171d6:	667b      	str	r3, [r7, #100]	; 0x64
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	330c      	adds	r3, #12
 80171de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80171e0:	657a      	str	r2, [r7, #84]	; 0x54
 80171e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80171e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80171e8:	e841 2300 	strex	r3, r2, [r1]
 80171ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80171ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d1e5      	bne.n	80171c0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	3314      	adds	r3, #20
 80171fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171fe:	e853 3f00 	ldrex	r3, [r3]
 8017202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017206:	f023 0301 	bic.w	r3, r3, #1
 801720a:	663b      	str	r3, [r7, #96]	; 0x60
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	3314      	adds	r3, #20
 8017212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017214:	643a      	str	r2, [r7, #64]	; 0x40
 8017216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801721a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801721c:	e841 2300 	strex	r3, r2, [r1]
 8017220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1e5      	bne.n	80171f4 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801722c:	2b01      	cmp	r3, #1
 801722e:	d119      	bne.n	8017264 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	330c      	adds	r3, #12
 8017236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017238:	6a3b      	ldr	r3, [r7, #32]
 801723a:	e853 3f00 	ldrex	r3, [r3]
 801723e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017240:	69fb      	ldr	r3, [r7, #28]
 8017242:	f023 0310 	bic.w	r3, r3, #16
 8017246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	330c      	adds	r3, #12
 801724e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017258:	e841 2300 	strex	r3, r2, [r1]
 801725c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017260:	2b00      	cmp	r3, #0
 8017262:	d1e5      	bne.n	8017230 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	695b      	ldr	r3, [r3, #20]
 801726a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801726e:	2b40      	cmp	r3, #64	; 0x40
 8017270:	d13f      	bne.n	80172f2 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	3314      	adds	r3, #20
 8017278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	e853 3f00 	ldrex	r3, [r3]
 8017280:	60bb      	str	r3, [r7, #8]
   return(result);
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017288:	65bb      	str	r3, [r7, #88]	; 0x58
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	3314      	adds	r3, #20
 8017290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017292:	61ba      	str	r2, [r7, #24]
 8017294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017296:	6979      	ldr	r1, [r7, #20]
 8017298:	69ba      	ldr	r2, [r7, #24]
 801729a:	e841 2300 	strex	r3, r2, [r1]
 801729e:	613b      	str	r3, [r7, #16]
   return(result);
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d1e5      	bne.n	8017272 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d013      	beq.n	80172d6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172b2:	4a19      	ldr	r2, [pc, #100]	; (8017318 <HAL_UART_AbortReceive_IT+0x160>)
 80172b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7f1 f95b 	bl	8008576 <HAL_DMA_Abort_IT>
 80172c0:	4603      	mov	r3, r0
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d022      	beq.n	801730c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80172d0:	4610      	mov	r0, r2
 80172d2:	4798      	blx	r3
 80172d4:	e01a      	b.n	801730c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2200      	movs	r2, #0
 80172da:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2220      	movs	r2, #32
 80172e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2200      	movs	r2, #0
 80172e8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f000 fadf 	bl	80178ae <HAL_UART_AbortReceiveCpltCallback>
 80172f0:	e00c      	b.n	801730c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2200      	movs	r2, #0
 80172f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2220      	movs	r2, #32
 80172fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2200      	movs	r2, #0
 8017304:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 fad1 	bl	80178ae <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801730c:	2300      	movs	r3, #0
}
 801730e:	4618      	mov	r0, r3
 8017310:	3768      	adds	r7, #104	; 0x68
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
 8017316:	bf00      	nop
 8017318:	080182b9 	.word	0x080182b9

0801731c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b0ba      	sub	sp, #232	; 0xe8
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	695b      	ldr	r3, [r3, #20]
 801733e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017342:	2300      	movs	r3, #0
 8017344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017348:	2300      	movs	r3, #0
 801734a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017352:	f003 030f 	and.w	r3, r3, #15
 8017356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801735a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801735e:	2b00      	cmp	r3, #0
 8017360:	d10f      	bne.n	8017382 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017366:	f003 0320 	and.w	r3, r3, #32
 801736a:	2b00      	cmp	r3, #0
 801736c:	d009      	beq.n	8017382 <HAL_UART_IRQHandler+0x66>
 801736e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017372:	f003 0320 	and.w	r3, r3, #32
 8017376:	2b00      	cmp	r3, #0
 8017378:	d003      	beq.n	8017382 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801737a:	6878      	ldr	r0, [r7, #4]
 801737c:	f001 f81c 	bl	80183b8 <UART_Receive_IT>
      return;
 8017380:	e256      	b.n	8017830 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8017382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017386:	2b00      	cmp	r3, #0
 8017388:	f000 80de 	beq.w	8017548 <HAL_UART_IRQHandler+0x22c>
 801738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017390:	f003 0301 	and.w	r3, r3, #1
 8017394:	2b00      	cmp	r3, #0
 8017396:	d106      	bne.n	80173a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8017398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801739c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	f000 80d1 	beq.w	8017548 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80173a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173aa:	f003 0301 	and.w	r3, r3, #1
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d00b      	beq.n	80173ca <HAL_UART_IRQHandler+0xae>
 80173b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80173b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d005      	beq.n	80173ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173c2:	f043 0201 	orr.w	r2, r3, #1
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80173ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173ce:	f003 0304 	and.w	r3, r3, #4
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d00b      	beq.n	80173ee <HAL_UART_IRQHandler+0xd2>
 80173d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80173da:	f003 0301 	and.w	r3, r3, #1
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d005      	beq.n	80173ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173e6:	f043 0202 	orr.w	r2, r3, #2
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80173ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173f2:	f003 0302 	and.w	r3, r3, #2
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d00b      	beq.n	8017412 <HAL_UART_IRQHandler+0xf6>
 80173fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80173fe:	f003 0301 	and.w	r3, r3, #1
 8017402:	2b00      	cmp	r3, #0
 8017404:	d005      	beq.n	8017412 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801740a:	f043 0204 	orr.w	r2, r3, #4
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017416:	f003 0308 	and.w	r3, r3, #8
 801741a:	2b00      	cmp	r3, #0
 801741c:	d011      	beq.n	8017442 <HAL_UART_IRQHandler+0x126>
 801741e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017422:	f003 0320 	and.w	r3, r3, #32
 8017426:	2b00      	cmp	r3, #0
 8017428:	d105      	bne.n	8017436 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801742a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801742e:	f003 0301 	and.w	r3, r3, #1
 8017432:	2b00      	cmp	r3, #0
 8017434:	d005      	beq.n	8017442 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801743a:	f043 0208 	orr.w	r2, r3, #8
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017446:	2b00      	cmp	r3, #0
 8017448:	f000 81ed 	beq.w	8017826 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801744c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017450:	f003 0320 	and.w	r3, r3, #32
 8017454:	2b00      	cmp	r3, #0
 8017456:	d008      	beq.n	801746a <HAL_UART_IRQHandler+0x14e>
 8017458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801745c:	f003 0320 	and.w	r3, r3, #32
 8017460:	2b00      	cmp	r3, #0
 8017462:	d002      	beq.n	801746a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f000 ffa7 	bl	80183b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	695b      	ldr	r3, [r3, #20]
 8017470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017474:	2b40      	cmp	r3, #64	; 0x40
 8017476:	bf0c      	ite	eq
 8017478:	2301      	moveq	r3, #1
 801747a:	2300      	movne	r3, #0
 801747c:	b2db      	uxtb	r3, r3
 801747e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017486:	f003 0308 	and.w	r3, r3, #8
 801748a:	2b00      	cmp	r3, #0
 801748c:	d103      	bne.n	8017496 <HAL_UART_IRQHandler+0x17a>
 801748e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017492:	2b00      	cmp	r3, #0
 8017494:	d04f      	beq.n	8017536 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f000 fe22 	bl	80180e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	695b      	ldr	r3, [r3, #20]
 80174a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174a6:	2b40      	cmp	r3, #64	; 0x40
 80174a8:	d141      	bne.n	801752e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	3314      	adds	r3, #20
 80174b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80174b8:	e853 3f00 	ldrex	r3, [r3]
 80174bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80174c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80174c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80174c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	3314      	adds	r3, #20
 80174d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80174d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80174da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80174e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80174e6:	e841 2300 	strex	r3, r2, [r1]
 80174ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80174ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d1d9      	bne.n	80174aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d013      	beq.n	8017526 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017502:	4a7d      	ldr	r2, [pc, #500]	; (80176f8 <HAL_UART_IRQHandler+0x3dc>)
 8017504:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801750a:	4618      	mov	r0, r3
 801750c:	f7f1 f833 	bl	8008576 <HAL_DMA_Abort_IT>
 8017510:	4603      	mov	r3, r0
 8017512:	2b00      	cmp	r3, #0
 8017514:	d016      	beq.n	8017544 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017520:	4610      	mov	r0, r2
 8017522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017524:	e00e      	b.n	8017544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f000 f9a3 	bl	8017872 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801752c:	e00a      	b.n	8017544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f000 f99f 	bl	8017872 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017534:	e006      	b.n	8017544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	f000 f99b 	bl	8017872 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2200      	movs	r2, #0
 8017540:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8017542:	e170      	b.n	8017826 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017544:	bf00      	nop
    return;
 8017546:	e16e      	b.n	8017826 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801754c:	2b01      	cmp	r3, #1
 801754e:	f040 814a 	bne.w	80177e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017556:	f003 0310 	and.w	r3, r3, #16
 801755a:	2b00      	cmp	r3, #0
 801755c:	f000 8143 	beq.w	80177e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017564:	f003 0310 	and.w	r3, r3, #16
 8017568:	2b00      	cmp	r3, #0
 801756a:	f000 813c 	beq.w	80177e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801756e:	2300      	movs	r3, #0
 8017570:	60bb      	str	r3, [r7, #8]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	60bb      	str	r3, [r7, #8]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	60bb      	str	r3, [r7, #8]
 8017582:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	695b      	ldr	r3, [r3, #20]
 801758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801758e:	2b40      	cmp	r3, #64	; 0x40
 8017590:	f040 80b4 	bne.w	80176fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	685b      	ldr	r3, [r3, #4]
 801759c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80175a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	f000 8140 	beq.w	801782a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80175ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80175b2:	429a      	cmp	r2, r3
 80175b4:	f080 8139 	bcs.w	801782a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80175be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175c4:	69db      	ldr	r3, [r3, #28]
 80175c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175ca:	f000 8088 	beq.w	80176de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	330c      	adds	r3, #12
 80175d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80175dc:	e853 3f00 	ldrex	r3, [r3]
 80175e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80175e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80175e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80175ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	330c      	adds	r3, #12
 80175f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80175fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80175fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801760a:	e841 2300 	strex	r3, r2, [r1]
 801760e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017616:	2b00      	cmp	r3, #0
 8017618:	d1d9      	bne.n	80175ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	3314      	adds	r3, #20
 8017620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017624:	e853 3f00 	ldrex	r3, [r3]
 8017628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801762a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801762c:	f023 0301 	bic.w	r3, r3, #1
 8017630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	3314      	adds	r3, #20
 801763a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801763e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801764a:	e841 2300 	strex	r3, r2, [r1]
 801764e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017652:	2b00      	cmp	r3, #0
 8017654:	d1e1      	bne.n	801761a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	3314      	adds	r3, #20
 801765c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801765e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017660:	e853 3f00 	ldrex	r3, [r3]
 8017664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801766c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	3314      	adds	r3, #20
 8017676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801767a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801767c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801767e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017682:	e841 2300 	strex	r3, r2, [r1]
 8017686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801768a:	2b00      	cmp	r3, #0
 801768c:	d1e3      	bne.n	8017656 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2220      	movs	r2, #32
 8017692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	2200      	movs	r2, #0
 801769a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	330c      	adds	r3, #12
 80176a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80176a6:	e853 3f00 	ldrex	r3, [r3]
 80176aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80176ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176ae:	f023 0310 	bic.w	r3, r3, #16
 80176b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	330c      	adds	r3, #12
 80176bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80176c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80176c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80176c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80176c8:	e841 2300 	strex	r3, r2, [r1]
 80176cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80176ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d1e3      	bne.n	801769c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176d8:	4618      	mov	r0, r3
 80176da:	f7f0 fedc 	bl	8008496 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	1ad3      	subs	r3, r2, r3
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	4619      	mov	r1, r3
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	f000 f8e7 	bl	80178c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80176f4:	e099      	b.n	801782a <HAL_UART_IRQHandler+0x50e>
 80176f6:	bf00      	nop
 80176f8:	080181a7 	.word	0x080181a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017704:	b29b      	uxth	r3, r3
 8017706:	1ad3      	subs	r3, r2, r3
 8017708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017710:	b29b      	uxth	r3, r3
 8017712:	2b00      	cmp	r3, #0
 8017714:	f000 808b 	beq.w	801782e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8017718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801771c:	2b00      	cmp	r3, #0
 801771e:	f000 8086 	beq.w	801782e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	330c      	adds	r3, #12
 8017728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801772c:	e853 3f00 	ldrex	r3, [r3]
 8017730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	330c      	adds	r3, #12
 8017742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017746:	647a      	str	r2, [r7, #68]	; 0x44
 8017748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801774a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801774c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801774e:	e841 2300 	strex	r3, r2, [r1]
 8017752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017756:	2b00      	cmp	r3, #0
 8017758:	d1e3      	bne.n	8017722 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	3314      	adds	r3, #20
 8017760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017764:	e853 3f00 	ldrex	r3, [r3]
 8017768:	623b      	str	r3, [r7, #32]
   return(result);
 801776a:	6a3b      	ldr	r3, [r7, #32]
 801776c:	f023 0301 	bic.w	r3, r3, #1
 8017770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	3314      	adds	r3, #20
 801777a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801777e:	633a      	str	r2, [r7, #48]	; 0x30
 8017780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017786:	e841 2300 	strex	r3, r2, [r1]
 801778a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801778e:	2b00      	cmp	r3, #0
 8017790:	d1e3      	bne.n	801775a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	2220      	movs	r2, #32
 8017796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2200      	movs	r2, #0
 801779e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	330c      	adds	r3, #12
 80177a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	e853 3f00 	ldrex	r3, [r3]
 80177ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	f023 0310 	bic.w	r3, r3, #16
 80177b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	330c      	adds	r3, #12
 80177c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80177c4:	61fa      	str	r2, [r7, #28]
 80177c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177c8:	69b9      	ldr	r1, [r7, #24]
 80177ca:	69fa      	ldr	r2, [r7, #28]
 80177cc:	e841 2300 	strex	r3, r2, [r1]
 80177d0:	617b      	str	r3, [r7, #20]
   return(result);
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d1e3      	bne.n	80177a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80177d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80177dc:	4619      	mov	r1, r3
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 f86f 	bl	80178c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80177e4:	e023      	b.n	801782e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80177e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80177ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d009      	beq.n	8017806 <HAL_UART_IRQHandler+0x4ea>
 80177f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d003      	beq.n	8017806 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f000 fd72 	bl	80182e8 <UART_Transmit_IT>
    return;
 8017804:	e014      	b.n	8017830 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801780e:	2b00      	cmp	r3, #0
 8017810:	d00e      	beq.n	8017830 <HAL_UART_IRQHandler+0x514>
 8017812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801781a:	2b00      	cmp	r3, #0
 801781c:	d008      	beq.n	8017830 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f000 fdb2 	bl	8018388 <UART_EndTransmit_IT>
    return;
 8017824:	e004      	b.n	8017830 <HAL_UART_IRQHandler+0x514>
    return;
 8017826:	bf00      	nop
 8017828:	e002      	b.n	8017830 <HAL_UART_IRQHandler+0x514>
      return;
 801782a:	bf00      	nop
 801782c:	e000      	b.n	8017830 <HAL_UART_IRQHandler+0x514>
      return;
 801782e:	bf00      	nop
  }
}
 8017830:	37e8      	adds	r7, #232	; 0xe8
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}

08017836 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017836:	b480      	push	{r7}
 8017838:	b083      	sub	sp, #12
 801783a:	af00      	add	r7, sp, #0
 801783c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801783e:	bf00      	nop
 8017840:	370c      	adds	r7, #12
 8017842:	46bd      	mov	sp, r7
 8017844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017848:	4770      	bx	lr

0801784a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801784a:	b480      	push	{r7}
 801784c:	b083      	sub	sp, #12
 801784e:	af00      	add	r7, sp, #0
 8017850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8017852:	bf00      	nop
 8017854:	370c      	adds	r7, #12
 8017856:	46bd      	mov	sp, r7
 8017858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785c:	4770      	bx	lr

0801785e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801785e:	b480      	push	{r7}
 8017860:	b083      	sub	sp, #12
 8017862:	af00      	add	r7, sp, #0
 8017864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8017866:	bf00      	nop
 8017868:	370c      	adds	r7, #12
 801786a:	46bd      	mov	sp, r7
 801786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017870:	4770      	bx	lr

08017872 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017872:	b480      	push	{r7}
 8017874:	b083      	sub	sp, #12
 8017876:	af00      	add	r7, sp, #0
 8017878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801787a:	bf00      	nop
 801787c:	370c      	adds	r7, #12
 801787e:	46bd      	mov	sp, r7
 8017880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017884:	4770      	bx	lr

08017886 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017886:	b480      	push	{r7}
 8017888:	b083      	sub	sp, #12
 801788a:	af00      	add	r7, sp, #0
 801788c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801788e:	bf00      	nop
 8017890:	370c      	adds	r7, #12
 8017892:	46bd      	mov	sp, r7
 8017894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017898:	4770      	bx	lr

0801789a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801789a:	b480      	push	{r7}
 801789c:	b083      	sub	sp, #12
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80178a2:	bf00      	nop
 80178a4:	370c      	adds	r7, #12
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr

080178ae <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80178ae:	b480      	push	{r7}
 80178b0:	b083      	sub	sp, #12
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80178b6:	bf00      	nop
 80178b8:	370c      	adds	r7, #12
 80178ba:	46bd      	mov	sp, r7
 80178bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c0:	4770      	bx	lr

080178c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80178c2:	b480      	push	{r7}
 80178c4:	b083      	sub	sp, #12
 80178c6:	af00      	add	r7, sp, #0
 80178c8:	6078      	str	r0, [r7, #4]
 80178ca:	460b      	mov	r3, r1
 80178cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80178ce:	bf00      	nop
 80178d0:	370c      	adds	r7, #12
 80178d2:	46bd      	mov	sp, r7
 80178d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d8:	4770      	bx	lr

080178da <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 80178da:	b480      	push	{r7}
 80178dc:	b089      	sub	sp, #36	; 0x24
 80178de:	af00      	add	r7, sp, #0
 80178e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d101      	bne.n	80178f0 <HAL_LIN_SendBreak+0x16>
 80178ec:	2302      	movs	r3, #2
 80178ee:	e02a      	b.n	8017946 <HAL_LIN_SendBreak+0x6c>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2201      	movs	r2, #1
 80178f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2224      	movs	r2, #36	; 0x24
 80178fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	330c      	adds	r3, #12
 8017906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	e853 3f00 	ldrex	r3, [r3]
 801790e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	f043 0301 	orr.w	r3, r3, #1
 8017916:	61fb      	str	r3, [r7, #28]
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	330c      	adds	r3, #12
 801791e:	69fa      	ldr	r2, [r7, #28]
 8017920:	61ba      	str	r2, [r7, #24]
 8017922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017924:	6979      	ldr	r1, [r7, #20]
 8017926:	69ba      	ldr	r2, [r7, #24]
 8017928:	e841 2300 	strex	r3, r2, [r1]
 801792c:	613b      	str	r3, [r7, #16]
   return(result);
 801792e:	693b      	ldr	r3, [r7, #16]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1e5      	bne.n	8017900 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2220      	movs	r2, #32
 8017938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	2200      	movs	r2, #0
 8017940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017944:	2300      	movs	r3, #0
}
 8017946:	4618      	mov	r0, r3
 8017948:	3724      	adds	r7, #36	; 0x24
 801794a:	46bd      	mov	sp, r7
 801794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017950:	4770      	bx	lr

08017952 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8017952:	b480      	push	{r7}
 8017954:	b089      	sub	sp, #36	; 0x24
 8017956:	af00      	add	r7, sp, #0
 8017958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017960:	2b01      	cmp	r3, #1
 8017962:	d101      	bne.n	8017968 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8017964:	2302      	movs	r3, #2
 8017966:	e02a      	b.n	80179be <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2201      	movs	r2, #1
 801796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	2224      	movs	r2, #36	; 0x24
 8017974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	330c      	adds	r3, #12
 801797e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	e853 3f00 	ldrex	r3, [r3]
 8017986:	60bb      	str	r3, [r7, #8]
   return(result);
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	f043 0302 	orr.w	r3, r3, #2
 801798e:	61fb      	str	r3, [r7, #28]
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	330c      	adds	r3, #12
 8017996:	69fa      	ldr	r2, [r7, #28]
 8017998:	61ba      	str	r2, [r7, #24]
 801799a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801799c:	6979      	ldr	r1, [r7, #20]
 801799e:	69ba      	ldr	r2, [r7, #24]
 80179a0:	e841 2300 	strex	r3, r2, [r1]
 80179a4:	613b      	str	r3, [r7, #16]
   return(result);
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d1e5      	bne.n	8017978 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2220      	movs	r2, #32
 80179b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2200      	movs	r2, #0
 80179b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80179bc:	2300      	movs	r3, #0
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3724      	adds	r7, #36	; 0x24
 80179c2:	46bd      	mov	sp, r7
 80179c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c8:	4770      	bx	lr

080179ca <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80179ca:	b480      	push	{r7}
 80179cc:	b089      	sub	sp, #36	; 0x24
 80179ce:	af00      	add	r7, sp, #0
 80179d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80179d8:	2b01      	cmp	r3, #1
 80179da:	d101      	bne.n	80179e0 <HAL_MultiProcessor_ExitMuteMode+0x16>
 80179dc:	2302      	movs	r3, #2
 80179de:	e02a      	b.n	8017a36 <HAL_MultiProcessor_ExitMuteMode+0x6c>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2201      	movs	r2, #1
 80179e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2224      	movs	r2, #36	; 0x24
 80179ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	330c      	adds	r3, #12
 80179f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	e853 3f00 	ldrex	r3, [r3]
 80179fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	f023 0302 	bic.w	r3, r3, #2
 8017a06:	61fb      	str	r3, [r7, #28]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	330c      	adds	r3, #12
 8017a0e:	69fa      	ldr	r2, [r7, #28]
 8017a10:	61ba      	str	r2, [r7, #24]
 8017a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a14:	6979      	ldr	r1, [r7, #20]
 8017a16:	69ba      	ldr	r2, [r7, #24]
 8017a18:	e841 2300 	strex	r3, r2, [r1]
 8017a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8017a1e:	693b      	ldr	r3, [r7, #16]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1e5      	bne.n	80179f0 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2220      	movs	r2, #32
 8017a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2200      	movs	r2, #0
 8017a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017a34:	2300      	movs	r3, #0
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	3724      	adds	r7, #36	; 0x24
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a40:	4770      	bx	lr

08017a42 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8017a42:	b480      	push	{r7}
 8017a44:	b085      	sub	sp, #20
 8017a46:	af00      	add	r7, sp, #0
 8017a48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a54:	2b01      	cmp	r3, #1
 8017a56:	d101      	bne.n	8017a5c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8017a58:	2302      	movs	r3, #2
 8017a5a:	e020      	b.n	8017a9e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2201      	movs	r2, #1
 8017a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2224      	movs	r2, #36	; 0x24
 8017a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	68db      	ldr	r3, [r3, #12]
 8017a72:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	f023 030c 	bic.w	r3, r3, #12
 8017a7a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	f043 0308 	orr.w	r3, r3, #8
 8017a82:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	68fa      	ldr	r2, [r7, #12]
 8017a8a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2220      	movs	r2, #32
 8017a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	2200      	movs	r2, #0
 8017a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017a9c:	2300      	movs	r3, #0
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3714      	adds	r7, #20
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa8:	4770      	bx	lr

08017aaa <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8017aaa:	b480      	push	{r7}
 8017aac:	b085      	sub	sp, #20
 8017aae:	af00      	add	r7, sp, #0
 8017ab0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017abc:	2b01      	cmp	r3, #1
 8017abe:	d101      	bne.n	8017ac4 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8017ac0:	2302      	movs	r3, #2
 8017ac2:	e020      	b.n	8017b06 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2201      	movs	r2, #1
 8017ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2224      	movs	r2, #36	; 0x24
 8017ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	f023 030c 	bic.w	r3, r3, #12
 8017ae2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	f043 0304 	orr.w	r3, r3, #4
 8017aea:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	68fa      	ldr	r2, [r7, #12]
 8017af2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2220      	movs	r2, #32
 8017af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2200      	movs	r2, #0
 8017b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017b04:	2300      	movs	r3, #0
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3714      	adds	r7, #20
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr

08017b12 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8017b12:	b480      	push	{r7}
 8017b14:	b085      	sub	sp, #20
 8017b16:	af00      	add	r7, sp, #0
 8017b18:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	60fb      	str	r3, [r7, #12]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017b28:	b2db      	uxtb	r3, r3
 8017b2a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017b32:	b2db      	uxtb	r3, r3
 8017b34:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	b2da      	uxtb	r2, r3
 8017b3a:	68bb      	ldr	r3, [r7, #8]
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	4313      	orrs	r3, r2
 8017b40:	b2db      	uxtb	r3, r3
}
 8017b42:	4618      	mov	r0, r3
 8017b44:	3714      	adds	r7, #20
 8017b46:	46bd      	mov	sp, r7
 8017b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4c:	4770      	bx	lr

08017b4e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8017b4e:	b480      	push	{r7}
 8017b50:	b083      	sub	sp, #12
 8017b52:	af00      	add	r7, sp, #0
 8017b54:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	370c      	adds	r7, #12
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr

08017b66 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b090      	sub	sp, #64	; 0x40
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d137      	bne.n	8017bf2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8017b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b84:	2200      	movs	r2, #0
 8017b86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	3314      	adds	r3, #20
 8017b8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b92:	e853 3f00 	ldrex	r3, [r3]
 8017b96:	623b      	str	r3, [r7, #32]
   return(result);
 8017b98:	6a3b      	ldr	r3, [r7, #32]
 8017b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	3314      	adds	r3, #20
 8017ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017ba8:	633a      	str	r2, [r7, #48]	; 0x30
 8017baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bb0:	e841 2300 	strex	r3, r2, [r1]
 8017bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d1e5      	bne.n	8017b88 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	330c      	adds	r3, #12
 8017bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bc4:	693b      	ldr	r3, [r7, #16]
 8017bc6:	e853 3f00 	ldrex	r3, [r3]
 8017bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8017bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	330c      	adds	r3, #12
 8017bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bdc:	61fa      	str	r2, [r7, #28]
 8017bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017be0:	69b9      	ldr	r1, [r7, #24]
 8017be2:	69fa      	ldr	r2, [r7, #28]
 8017be4:	e841 2300 	strex	r3, r2, [r1]
 8017be8:	617b      	str	r3, [r7, #20]
   return(result);
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d1e5      	bne.n	8017bbc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017bf0:	e002      	b.n	8017bf8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8017bf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017bf4:	f7ff fe1f 	bl	8017836 <HAL_UART_TxCpltCallback>
}
 8017bf8:	bf00      	nop
 8017bfa:	3740      	adds	r7, #64	; 0x40
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b084      	sub	sp, #16
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017c0e:	68f8      	ldr	r0, [r7, #12]
 8017c10:	f7ff fe1b 	bl	801784a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c14:	bf00      	nop
 8017c16:	3710      	adds	r7, #16
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}

08017c1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b09c      	sub	sp, #112	; 0x70
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c28:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d172      	bne.n	8017d1e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	330c      	adds	r3, #12
 8017c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c48:	e853 3f00 	ldrex	r3, [r3]
 8017c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8017c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	330c      	adds	r3, #12
 8017c5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8017c60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017c66:	e841 2300 	strex	r3, r2, [r1]
 8017c6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d1e5      	bne.n	8017c3e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	3314      	adds	r3, #20
 8017c78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c7c:	e853 3f00 	ldrex	r3, [r3]
 8017c80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c84:	f023 0301 	bic.w	r3, r3, #1
 8017c88:	667b      	str	r3, [r7, #100]	; 0x64
 8017c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	3314      	adds	r3, #20
 8017c90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017c92:	647a      	str	r2, [r7, #68]	; 0x44
 8017c94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c9a:	e841 2300 	strex	r3, r2, [r1]
 8017c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d1e5      	bne.n	8017c72 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	3314      	adds	r3, #20
 8017cac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb0:	e853 3f00 	ldrex	r3, [r3]
 8017cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8017cb6:	6a3b      	ldr	r3, [r7, #32]
 8017cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8017cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	3314      	adds	r3, #20
 8017cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017cc6:	633a      	str	r2, [r7, #48]	; 0x30
 8017cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cce:	e841 2300 	strex	r3, r2, [r1]
 8017cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d1e5      	bne.n	8017ca6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cdc:	2220      	movs	r2, #32
 8017cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d119      	bne.n	8017d1e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	330c      	adds	r3, #12
 8017cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	e853 3f00 	ldrex	r3, [r3]
 8017cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	f023 0310 	bic.w	r3, r3, #16
 8017d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	330c      	adds	r3, #12
 8017d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017d0a:	61fa      	str	r2, [r7, #28]
 8017d0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d0e:	69b9      	ldr	r1, [r7, #24]
 8017d10:	69fa      	ldr	r2, [r7, #28]
 8017d12:	e841 2300 	strex	r3, r2, [r1]
 8017d16:	617b      	str	r3, [r7, #20]
   return(result);
 8017d18:	697b      	ldr	r3, [r7, #20]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d1e5      	bne.n	8017cea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d106      	bne.n	8017d34 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017d2e:	f7ff fdc8 	bl	80178c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017d32:	e002      	b.n	8017d3a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8017d34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017d36:	f7e9 fde7 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8017d3a:	bf00      	nop
 8017d3c:	3770      	adds	r7, #112	; 0x70
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}

08017d42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017d42:	b580      	push	{r7, lr}
 8017d44:	b084      	sub	sp, #16
 8017d46:	af00      	add	r7, sp, #0
 8017d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d108      	bne.n	8017d6a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017d5c:	085b      	lsrs	r3, r3, #1
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	4619      	mov	r1, r3
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f7ff fdad 	bl	80178c2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017d68:	e002      	b.n	8017d70 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8017d6a:	68f8      	ldr	r0, [r7, #12]
 8017d6c:	f7ff fd77 	bl	801785e <HAL_UART_RxHalfCpltCallback>
}
 8017d70:	bf00      	nop
 8017d72:	3710      	adds	r7, #16
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b084      	sub	sp, #16
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8017d80:	2300      	movs	r3, #0
 8017d82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	695b      	ldr	r3, [r3, #20]
 8017d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017d94:	2b80      	cmp	r3, #128	; 0x80
 8017d96:	bf0c      	ite	eq
 8017d98:	2301      	moveq	r3, #1
 8017d9a:	2300      	movne	r3, #0
 8017d9c:	b2db      	uxtb	r3, r3
 8017d9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8017da0:	68bb      	ldr	r3, [r7, #8]
 8017da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017da6:	b2db      	uxtb	r3, r3
 8017da8:	2b21      	cmp	r3, #33	; 0x21
 8017daa:	d108      	bne.n	8017dbe <UART_DMAError+0x46>
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d005      	beq.n	8017dbe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	2200      	movs	r2, #0
 8017db6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8017db8:	68b8      	ldr	r0, [r7, #8]
 8017dba:	f000 f969 	bl	8018090 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	695b      	ldr	r3, [r3, #20]
 8017dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017dc8:	2b40      	cmp	r3, #64	; 0x40
 8017dca:	bf0c      	ite	eq
 8017dcc:	2301      	moveq	r3, #1
 8017dce:	2300      	movne	r3, #0
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	2b22      	cmp	r3, #34	; 0x22
 8017dde:	d108      	bne.n	8017df2 <UART_DMAError+0x7a>
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d005      	beq.n	8017df2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	2200      	movs	r2, #0
 8017dea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017dec:	68b8      	ldr	r0, [r7, #8]
 8017dee:	f000 f977 	bl	80180e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017df6:	f043 0210 	orr.w	r2, r3, #16
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017dfe:	68b8      	ldr	r0, [r7, #8]
 8017e00:	f7ff fd37 	bl	8017872 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e04:	bf00      	nop
 8017e06:	3710      	adds	r7, #16
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b090      	sub	sp, #64	; 0x40
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	603b      	str	r3, [r7, #0]
 8017e18:	4613      	mov	r3, r2
 8017e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017e1c:	e050      	b.n	8017ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e24:	d04c      	beq.n	8017ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8017e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d007      	beq.n	8017e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8017e2c:	f7ef f872 	bl	8006f14 <HAL_GetTick>
 8017e30:	4602      	mov	r2, r0
 8017e32:	683b      	ldr	r3, [r7, #0]
 8017e34:	1ad3      	subs	r3, r2, r3
 8017e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	d241      	bcs.n	8017ec0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	330c      	adds	r3, #12
 8017e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e46:	e853 3f00 	ldrex	r3, [r3]
 8017e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	330c      	adds	r3, #12
 8017e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017e5c:	637a      	str	r2, [r7, #52]	; 0x34
 8017e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e64:	e841 2300 	strex	r3, r2, [r1]
 8017e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d1e5      	bne.n	8017e3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	3314      	adds	r3, #20
 8017e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	e853 3f00 	ldrex	r3, [r3]
 8017e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8017e80:	693b      	ldr	r3, [r7, #16]
 8017e82:	f023 0301 	bic.w	r3, r3, #1
 8017e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	3314      	adds	r3, #20
 8017e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e90:	623a      	str	r2, [r7, #32]
 8017e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e94:	69f9      	ldr	r1, [r7, #28]
 8017e96:	6a3a      	ldr	r2, [r7, #32]
 8017e98:	e841 2300 	strex	r3, r2, [r1]
 8017e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8017e9e:	69bb      	ldr	r3, [r7, #24]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d1e5      	bne.n	8017e70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	2220      	movs	r2, #32
 8017ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	2220      	movs	r2, #32
 8017eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8017ebc:	2303      	movs	r3, #3
 8017ebe:	e00f      	b.n	8017ee0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	681a      	ldr	r2, [r3, #0]
 8017ec6:	68bb      	ldr	r3, [r7, #8]
 8017ec8:	4013      	ands	r3, r2
 8017eca:	68ba      	ldr	r2, [r7, #8]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	bf0c      	ite	eq
 8017ed0:	2301      	moveq	r3, #1
 8017ed2:	2300      	movne	r3, #0
 8017ed4:	b2db      	uxtb	r3, r3
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	79fb      	ldrb	r3, [r7, #7]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d09f      	beq.n	8017e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017ede:	2300      	movs	r3, #0
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3740      	adds	r7, #64	; 0x40
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}

08017ee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017ee8:	b480      	push	{r7}
 8017eea:	b085      	sub	sp, #20
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	4613      	mov	r3, r2
 8017ef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	68ba      	ldr	r2, [r7, #8]
 8017efa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	88fa      	ldrh	r2, [r7, #6]
 8017f00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	88fa      	ldrh	r2, [r7, #6]
 8017f06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2222      	movs	r2, #34	; 0x22
 8017f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	68da      	ldr	r2, [r3, #12]
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	695a      	ldr	r2, [r3, #20]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f042 0201 	orr.w	r2, r2, #1
 8017f3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	68da      	ldr	r2, [r3, #12]
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	f042 0220 	orr.w	r2, r2, #32
 8017f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017f4e:	2300      	movs	r3, #0
}
 8017f50:	4618      	mov	r0, r3
 8017f52:	3714      	adds	r7, #20
 8017f54:	46bd      	mov	sp, r7
 8017f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5a:	4770      	bx	lr

08017f5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b098      	sub	sp, #96	; 0x60
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	60f8      	str	r0, [r7, #12]
 8017f64:	60b9      	str	r1, [r7, #8]
 8017f66:	4613      	mov	r3, r2
 8017f68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8017f6a:	68ba      	ldr	r2, [r7, #8]
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	88fa      	ldrh	r2, [r7, #6]
 8017f74:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	2200      	movs	r2, #0
 8017f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	2222      	movs	r2, #34	; 0x22
 8017f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f88:	4a3e      	ldr	r2, [pc, #248]	; (8018084 <UART_Start_Receive_DMA+0x128>)
 8017f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f90:	4a3d      	ldr	r2, [pc, #244]	; (8018088 <UART_Start_Receive_DMA+0x12c>)
 8017f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f98:	4a3c      	ldr	r2, [pc, #240]	; (801808c <UART_Start_Receive_DMA+0x130>)
 8017f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8017fa4:	f107 0308 	add.w	r3, r7, #8
 8017fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	3304      	adds	r3, #4
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017fb8:	681a      	ldr	r2, [r3, #0]
 8017fba:	88fb      	ldrh	r3, [r7, #6]
 8017fbc:	f7f0 fa13 	bl	80083e6 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	613b      	str	r3, [r7, #16]
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	613b      	str	r3, [r7, #16]
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	685b      	ldr	r3, [r3, #4]
 8017fd2:	613b      	str	r3, [r7, #16]
 8017fd4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	330c      	adds	r3, #12
 8017fe4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fe8:	e853 3f00 	ldrex	r3, [r3]
 8017fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	330c      	adds	r3, #12
 8017ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017ffe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8018000:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018002:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018006:	e841 2300 	strex	r3, r2, [r1]
 801800a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801800c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801800e:	2b00      	cmp	r3, #0
 8018010:	d1e5      	bne.n	8017fde <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	3314      	adds	r3, #20
 8018018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801c:	e853 3f00 	ldrex	r3, [r3]
 8018020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018024:	f043 0301 	orr.w	r3, r3, #1
 8018028:	657b      	str	r3, [r7, #84]	; 0x54
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	3314      	adds	r3, #20
 8018030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018032:	63ba      	str	r2, [r7, #56]	; 0x38
 8018034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018036:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801803a:	e841 2300 	strex	r3, r2, [r1]
 801803e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018042:	2b00      	cmp	r3, #0
 8018044:	d1e5      	bne.n	8018012 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	3314      	adds	r3, #20
 801804c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801804e:	69bb      	ldr	r3, [r7, #24]
 8018050:	e853 3f00 	ldrex	r3, [r3]
 8018054:	617b      	str	r3, [r7, #20]
   return(result);
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801805c:	653b      	str	r3, [r7, #80]	; 0x50
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	3314      	adds	r3, #20
 8018064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018066:	627a      	str	r2, [r7, #36]	; 0x24
 8018068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801806a:	6a39      	ldr	r1, [r7, #32]
 801806c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801806e:	e841 2300 	strex	r3, r2, [r1]
 8018072:	61fb      	str	r3, [r7, #28]
   return(result);
 8018074:	69fb      	ldr	r3, [r7, #28]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d1e5      	bne.n	8018046 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801807a:	2300      	movs	r3, #0
}
 801807c:	4618      	mov	r0, r3
 801807e:	3760      	adds	r7, #96	; 0x60
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	08017c1d 	.word	0x08017c1d
 8018088:	08017d43 	.word	0x08017d43
 801808c:	08017d79 	.word	0x08017d79

08018090 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018090:	b480      	push	{r7}
 8018092:	b089      	sub	sp, #36	; 0x24
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	330c      	adds	r3, #12
 801809e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	e853 3f00 	ldrex	r3, [r3]
 80180a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80180ae:	61fb      	str	r3, [r7, #28]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	330c      	adds	r3, #12
 80180b6:	69fa      	ldr	r2, [r7, #28]
 80180b8:	61ba      	str	r2, [r7, #24]
 80180ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180bc:	6979      	ldr	r1, [r7, #20]
 80180be:	69ba      	ldr	r2, [r7, #24]
 80180c0:	e841 2300 	strex	r3, r2, [r1]
 80180c4:	613b      	str	r3, [r7, #16]
   return(result);
 80180c6:	693b      	ldr	r3, [r7, #16]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d1e5      	bne.n	8018098 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2220      	movs	r2, #32
 80180d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80180d4:	bf00      	nop
 80180d6:	3724      	adds	r7, #36	; 0x24
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr

080180e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80180e0:	b480      	push	{r7}
 80180e2:	b095      	sub	sp, #84	; 0x54
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	330c      	adds	r3, #12
 80180ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180f2:	e853 3f00 	ldrex	r3, [r3]
 80180f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80180f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80180fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	330c      	adds	r3, #12
 8018106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018108:	643a      	str	r2, [r7, #64]	; 0x40
 801810a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801810c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801810e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018110:	e841 2300 	strex	r3, r2, [r1]
 8018114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018118:	2b00      	cmp	r3, #0
 801811a:	d1e5      	bne.n	80180e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	3314      	adds	r3, #20
 8018122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018124:	6a3b      	ldr	r3, [r7, #32]
 8018126:	e853 3f00 	ldrex	r3, [r3]
 801812a:	61fb      	str	r3, [r7, #28]
   return(result);
 801812c:	69fb      	ldr	r3, [r7, #28]
 801812e:	f023 0301 	bic.w	r3, r3, #1
 8018132:	64bb      	str	r3, [r7, #72]	; 0x48
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	3314      	adds	r3, #20
 801813a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801813c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801813e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018144:	e841 2300 	strex	r3, r2, [r1]
 8018148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814c:	2b00      	cmp	r3, #0
 801814e:	d1e5      	bne.n	801811c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018154:	2b01      	cmp	r3, #1
 8018156:	d119      	bne.n	801818c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	330c      	adds	r3, #12
 801815e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	e853 3f00 	ldrex	r3, [r3]
 8018166:	60bb      	str	r3, [r7, #8]
   return(result);
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	f023 0310 	bic.w	r3, r3, #16
 801816e:	647b      	str	r3, [r7, #68]	; 0x44
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	330c      	adds	r3, #12
 8018176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018178:	61ba      	str	r2, [r7, #24]
 801817a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801817c:	6979      	ldr	r1, [r7, #20]
 801817e:	69ba      	ldr	r2, [r7, #24]
 8018180:	e841 2300 	strex	r3, r2, [r1]
 8018184:	613b      	str	r3, [r7, #16]
   return(result);
 8018186:	693b      	ldr	r3, [r7, #16]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d1e5      	bne.n	8018158 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2220      	movs	r2, #32
 8018190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2200      	movs	r2, #0
 8018198:	631a      	str	r2, [r3, #48]	; 0x30
}
 801819a:	bf00      	nop
 801819c:	3754      	adds	r7, #84	; 0x54
 801819e:	46bd      	mov	sp, r7
 80181a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a4:	4770      	bx	lr

080181a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b084      	sub	sp, #16
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2200      	movs	r2, #0
 80181b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	2200      	movs	r2, #0
 80181be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80181c0:	68f8      	ldr	r0, [r7, #12]
 80181c2:	f7ff fb56 	bl	8017872 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80181c6:	bf00      	nop
 80181c8:	3710      	adds	r7, #16
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bd80      	pop	{r7, pc}

080181ce <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80181ce:	b580      	push	{r7, lr}
 80181d0:	b084      	sub	sp, #16
 80181d2:	af00      	add	r7, sp, #0
 80181d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181da:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181e0:	2200      	movs	r2, #0
 80181e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d004      	beq.n	80181f6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d117      	bne.n	8018226 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	2200      	movs	r2, #0
 80181fa:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	2200      	movs	r2, #0
 8018200:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	2200      	movs	r2, #0
 8018206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	2220      	movs	r2, #32
 801820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	2220      	movs	r2, #32
 8018214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	2200      	movs	r2, #0
 801821c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801821e:	68f8      	ldr	r0, [r7, #12]
 8018220:	f7ff fb31 	bl	8017886 <HAL_UART_AbortCpltCallback>
 8018224:	e000      	b.n	8018228 <UART_DMATxAbortCallback+0x5a>
      return;
 8018226:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}

0801822e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801822e:	b580      	push	{r7, lr}
 8018230:	b084      	sub	sp, #16
 8018232:	af00      	add	r7, sp, #0
 8018234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801823a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018240:	2200      	movs	r2, #0
 8018242:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018248:	2b00      	cmp	r3, #0
 801824a:	d004      	beq.n	8018256 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018252:	2b00      	cmp	r3, #0
 8018254:	d117      	bne.n	8018286 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2200      	movs	r2, #0
 801825a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	2200      	movs	r2, #0
 8018260:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	2200      	movs	r2, #0
 8018266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	2220      	movs	r2, #32
 801826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	2220      	movs	r2, #32
 8018274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2200      	movs	r2, #0
 801827c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801827e:	68f8      	ldr	r0, [r7, #12]
 8018280:	f7ff fb01 	bl	8017886 <HAL_UART_AbortCpltCallback>
 8018284:	e000      	b.n	8018288 <UART_DMARxAbortCallback+0x5a>
      return;
 8018286:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018288:	3710      	adds	r7, #16
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}

0801828e <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 801828e:	b580      	push	{r7, lr}
 8018290:	b084      	sub	sp, #16
 8018292:	af00      	add	r7, sp, #0
 8018294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801829a:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	2200      	movs	r2, #0
 80182a0:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	2220      	movs	r2, #32
 80182a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80182aa:	68f8      	ldr	r0, [r7, #12]
 80182ac:	f7ff faf5 	bl	801789a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182b0:	bf00      	nop
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b084      	sub	sp, #16
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182c4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	2200      	movs	r2, #0
 80182ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2220      	movs	r2, #32
 80182d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	2200      	movs	r2, #0
 80182d8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80182da:	68f8      	ldr	r0, [r7, #12]
 80182dc:	f7ff fae7 	bl	80178ae <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182e0:	bf00      	nop
 80182e2:	3710      	adds	r7, #16
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bd80      	pop	{r7, pc}

080182e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b085      	sub	sp, #20
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	2b21      	cmp	r3, #33	; 0x21
 80182fa:	d13e      	bne.n	801837a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	689b      	ldr	r3, [r3, #8]
 8018300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018304:	d114      	bne.n	8018330 <UART_Transmit_IT+0x48>
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	691b      	ldr	r3, [r3, #16]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d110      	bne.n	8018330 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a1b      	ldr	r3, [r3, #32]
 8018312:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	881b      	ldrh	r3, [r3, #0]
 8018318:	461a      	mov	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018322:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6a1b      	ldr	r3, [r3, #32]
 8018328:	1c9a      	adds	r2, r3, #2
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	621a      	str	r2, [r3, #32]
 801832e:	e008      	b.n	8018342 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6a1b      	ldr	r3, [r3, #32]
 8018334:	1c59      	adds	r1, r3, #1
 8018336:	687a      	ldr	r2, [r7, #4]
 8018338:	6211      	str	r1, [r2, #32]
 801833a:	781a      	ldrb	r2, [r3, #0]
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018346:	b29b      	uxth	r3, r3
 8018348:	3b01      	subs	r3, #1
 801834a:	b29b      	uxth	r3, r3
 801834c:	687a      	ldr	r2, [r7, #4]
 801834e:	4619      	mov	r1, r3
 8018350:	84d1      	strh	r1, [r2, #38]	; 0x26
 8018352:	2b00      	cmp	r3, #0
 8018354:	d10f      	bne.n	8018376 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	68da      	ldr	r2, [r3, #12]
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018364:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	68da      	ldr	r2, [r3, #12]
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018374:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8018376:	2300      	movs	r3, #0
 8018378:	e000      	b.n	801837c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801837a:	2302      	movs	r3, #2
  }
}
 801837c:	4618      	mov	r0, r3
 801837e:	3714      	adds	r7, #20
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr

08018388 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b082      	sub	sp, #8
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	68da      	ldr	r2, [r3, #12]
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801839e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2220      	movs	r2, #32
 80183a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	f7ff fa44 	bl	8017836 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80183ae:	2300      	movs	r3, #0
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3708      	adds	r7, #8
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}

080183b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b08c      	sub	sp, #48	; 0x30
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	2b22      	cmp	r3, #34	; 0x22
 80183ca:	f040 80ab 	bne.w	8018524 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	689b      	ldr	r3, [r3, #8]
 80183d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80183d6:	d117      	bne.n	8018408 <UART_Receive_IT+0x50>
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	691b      	ldr	r3, [r3, #16]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d113      	bne.n	8018408 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80183e0:	2300      	movs	r3, #0
 80183e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	b29b      	uxth	r3, r3
 80183f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80183f6:	b29a      	uxth	r2, r3
 80183f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018400:	1c9a      	adds	r2, r3, #2
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	629a      	str	r2, [r3, #40]	; 0x28
 8018406:	e026      	b.n	8018456 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801840c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801840e:	2300      	movs	r3, #0
 8018410:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	689b      	ldr	r3, [r3, #8]
 8018416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801841a:	d007      	beq.n	801842c <UART_Receive_IT+0x74>
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	689b      	ldr	r3, [r3, #8]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d10a      	bne.n	801843a <UART_Receive_IT+0x82>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	691b      	ldr	r3, [r3, #16]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d106      	bne.n	801843a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	b2da      	uxtb	r2, r3
 8018434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018436:	701a      	strb	r2, [r3, #0]
 8018438:	e008      	b.n	801844c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	685b      	ldr	r3, [r3, #4]
 8018440:	b2db      	uxtb	r3, r3
 8018442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018446:	b2da      	uxtb	r2, r3
 8018448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018450:	1c5a      	adds	r2, r3, #1
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801845a:	b29b      	uxth	r3, r3
 801845c:	3b01      	subs	r3, #1
 801845e:	b29b      	uxth	r3, r3
 8018460:	687a      	ldr	r2, [r7, #4]
 8018462:	4619      	mov	r1, r3
 8018464:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8018466:	2b00      	cmp	r3, #0
 8018468:	d15a      	bne.n	8018520 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	68da      	ldr	r2, [r3, #12]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	f022 0220 	bic.w	r2, r2, #32
 8018478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	68da      	ldr	r2, [r3, #12]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	695a      	ldr	r2, [r3, #20]
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	f022 0201 	bic.w	r2, r2, #1
 8018498:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	2220      	movs	r2, #32
 801849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184a6:	2b01      	cmp	r3, #1
 80184a8:	d135      	bne.n	8018516 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	2200      	movs	r2, #0
 80184ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	330c      	adds	r3, #12
 80184b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	e853 3f00 	ldrex	r3, [r3]
 80184be:	613b      	str	r3, [r7, #16]
   return(result);
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	f023 0310 	bic.w	r3, r3, #16
 80184c6:	627b      	str	r3, [r7, #36]	; 0x24
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	330c      	adds	r3, #12
 80184ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184d0:	623a      	str	r2, [r7, #32]
 80184d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80184d4:	69f9      	ldr	r1, [r7, #28]
 80184d6:	6a3a      	ldr	r2, [r7, #32]
 80184d8:	e841 2300 	strex	r3, r2, [r1]
 80184dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80184de:	69bb      	ldr	r3, [r7, #24]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d1e5      	bne.n	80184b0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	f003 0310 	and.w	r3, r3, #16
 80184ee:	2b10      	cmp	r3, #16
 80184f0:	d10a      	bne.n	8018508 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80184f2:	2300      	movs	r3, #0
 80184f4:	60fb      	str	r3, [r7, #12]
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	60fb      	str	r3, [r7, #12]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	60fb      	str	r3, [r7, #12]
 8018506:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801850c:	4619      	mov	r1, r3
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f7ff f9d7 	bl	80178c2 <HAL_UARTEx_RxEventCallback>
 8018514:	e002      	b.n	801851c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f7e9 f9f6 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801851c:	2300      	movs	r3, #0
 801851e:	e002      	b.n	8018526 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8018520:	2300      	movs	r3, #0
 8018522:	e000      	b.n	8018526 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8018524:	2302      	movs	r3, #2
  }
}
 8018526:	4618      	mov	r0, r3
 8018528:	3730      	adds	r7, #48	; 0x30
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}

0801852e <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801852e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018532:	b0c0      	sub	sp, #256	; 0x100
 8018534:	af00      	add	r7, sp, #0
 8018536:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	691b      	ldr	r3, [r3, #16]
 8018542:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801854a:	68d9      	ldr	r1, [r3, #12]
 801854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	ea40 0301 	orr.w	r3, r0, r1
 8018556:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801855c:	689a      	ldr	r2, [r3, #8]
 801855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018562:	691b      	ldr	r3, [r3, #16]
 8018564:	431a      	orrs	r2, r3
 8018566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801856a:	695b      	ldr	r3, [r3, #20]
 801856c:	431a      	orrs	r2, r3
 801856e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018572:	69db      	ldr	r3, [r3, #28]
 8018574:	4313      	orrs	r3, r2
 8018576:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801857a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	68db      	ldr	r3, [r3, #12]
 8018582:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018586:	f021 010c 	bic.w	r1, r1, #12
 801858a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801858e:	681a      	ldr	r2, [r3, #0]
 8018590:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018594:	430b      	orrs	r3, r1
 8018596:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	695b      	ldr	r3, [r3, #20]
 80185a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80185a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185a8:	6999      	ldr	r1, [r3, #24]
 80185aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185ae:	681a      	ldr	r2, [r3, #0]
 80185b0:	ea40 0301 	orr.w	r3, r0, r1
 80185b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80185b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185ba:	681a      	ldr	r2, [r3, #0]
 80185bc:	4b8e      	ldr	r3, [pc, #568]	; (80187f8 <UART_SetConfig+0x2ca>)
 80185be:	429a      	cmp	r2, r3
 80185c0:	d005      	beq.n	80185ce <UART_SetConfig+0xa0>
 80185c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	4b8c      	ldr	r3, [pc, #560]	; (80187fc <UART_SetConfig+0x2ce>)
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d104      	bne.n	80185d8 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80185ce:	f7fa fa11 	bl	80129f4 <HAL_RCC_GetPCLK2Freq>
 80185d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80185d6:	e003      	b.n	80185e0 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80185d8:	f7fa f9f8 	bl	80129cc <HAL_RCC_GetPCLK1Freq>
 80185dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80185e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185e4:	69db      	ldr	r3, [r3, #28]
 80185e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80185ea:	f040 810b 	bne.w	8018804 <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80185ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80185f2:	2200      	movs	r2, #0
 80185f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80185f8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80185fc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8018600:	4622      	mov	r2, r4
 8018602:	462b      	mov	r3, r5
 8018604:	1891      	adds	r1, r2, r2
 8018606:	65b9      	str	r1, [r7, #88]	; 0x58
 8018608:	415b      	adcs	r3, r3
 801860a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801860c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018610:	4621      	mov	r1, r4
 8018612:	eb12 0801 	adds.w	r8, r2, r1
 8018616:	4629      	mov	r1, r5
 8018618:	eb43 0901 	adc.w	r9, r3, r1
 801861c:	f04f 0200 	mov.w	r2, #0
 8018620:	f04f 0300 	mov.w	r3, #0
 8018624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8018628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801862c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018630:	4690      	mov	r8, r2
 8018632:	4699      	mov	r9, r3
 8018634:	4623      	mov	r3, r4
 8018636:	eb18 0303 	adds.w	r3, r8, r3
 801863a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801863e:	462b      	mov	r3, r5
 8018640:	eb49 0303 	adc.w	r3, r9, r3
 8018644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801864c:	685b      	ldr	r3, [r3, #4]
 801864e:	2200      	movs	r2, #0
 8018650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8018654:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8018658:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801865c:	460b      	mov	r3, r1
 801865e:	18db      	adds	r3, r3, r3
 8018660:	653b      	str	r3, [r7, #80]	; 0x50
 8018662:	4613      	mov	r3, r2
 8018664:	eb42 0303 	adc.w	r3, r2, r3
 8018668:	657b      	str	r3, [r7, #84]	; 0x54
 801866a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801866e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8018672:	f001 fabf 	bl	8019bf4 <__aeabi_uldivmod>
 8018676:	4602      	mov	r2, r0
 8018678:	460b      	mov	r3, r1
 801867a:	4b61      	ldr	r3, [pc, #388]	; (8018800 <UART_SetConfig+0x2d2>)
 801867c:	fba3 2302 	umull	r2, r3, r3, r2
 8018680:	095b      	lsrs	r3, r3, #5
 8018682:	011c      	lsls	r4, r3, #4
 8018684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018688:	2200      	movs	r2, #0
 801868a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801868e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8018692:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8018696:	4642      	mov	r2, r8
 8018698:	464b      	mov	r3, r9
 801869a:	1891      	adds	r1, r2, r2
 801869c:	64b9      	str	r1, [r7, #72]	; 0x48
 801869e:	415b      	adcs	r3, r3
 80186a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80186a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80186a6:	4641      	mov	r1, r8
 80186a8:	eb12 0a01 	adds.w	sl, r2, r1
 80186ac:	4649      	mov	r1, r9
 80186ae:	eb43 0b01 	adc.w	fp, r3, r1
 80186b2:	f04f 0200 	mov.w	r2, #0
 80186b6:	f04f 0300 	mov.w	r3, #0
 80186ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80186be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80186c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80186c6:	4692      	mov	sl, r2
 80186c8:	469b      	mov	fp, r3
 80186ca:	4643      	mov	r3, r8
 80186cc:	eb1a 0303 	adds.w	r3, sl, r3
 80186d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80186d4:	464b      	mov	r3, r9
 80186d6:	eb4b 0303 	adc.w	r3, fp, r3
 80186da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80186de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	2200      	movs	r2, #0
 80186e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80186ea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80186ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80186f2:	460b      	mov	r3, r1
 80186f4:	18db      	adds	r3, r3, r3
 80186f6:	643b      	str	r3, [r7, #64]	; 0x40
 80186f8:	4613      	mov	r3, r2
 80186fa:	eb42 0303 	adc.w	r3, r2, r3
 80186fe:	647b      	str	r3, [r7, #68]	; 0x44
 8018700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018704:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018708:	f001 fa74 	bl	8019bf4 <__aeabi_uldivmod>
 801870c:	4602      	mov	r2, r0
 801870e:	460b      	mov	r3, r1
 8018710:	4611      	mov	r1, r2
 8018712:	4b3b      	ldr	r3, [pc, #236]	; (8018800 <UART_SetConfig+0x2d2>)
 8018714:	fba3 2301 	umull	r2, r3, r3, r1
 8018718:	095b      	lsrs	r3, r3, #5
 801871a:	2264      	movs	r2, #100	; 0x64
 801871c:	fb02 f303 	mul.w	r3, r2, r3
 8018720:	1acb      	subs	r3, r1, r3
 8018722:	00db      	lsls	r3, r3, #3
 8018724:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018728:	4b35      	ldr	r3, [pc, #212]	; (8018800 <UART_SetConfig+0x2d2>)
 801872a:	fba3 2302 	umull	r2, r3, r3, r2
 801872e:	095b      	lsrs	r3, r3, #5
 8018730:	005b      	lsls	r3, r3, #1
 8018732:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018736:	441c      	add	r4, r3
 8018738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801873c:	2200      	movs	r2, #0
 801873e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018742:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018746:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801874a:	4642      	mov	r2, r8
 801874c:	464b      	mov	r3, r9
 801874e:	1891      	adds	r1, r2, r2
 8018750:	63b9      	str	r1, [r7, #56]	; 0x38
 8018752:	415b      	adcs	r3, r3
 8018754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018756:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801875a:	4641      	mov	r1, r8
 801875c:	1851      	adds	r1, r2, r1
 801875e:	6339      	str	r1, [r7, #48]	; 0x30
 8018760:	4649      	mov	r1, r9
 8018762:	414b      	adcs	r3, r1
 8018764:	637b      	str	r3, [r7, #52]	; 0x34
 8018766:	f04f 0200 	mov.w	r2, #0
 801876a:	f04f 0300 	mov.w	r3, #0
 801876e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8018772:	4659      	mov	r1, fp
 8018774:	00cb      	lsls	r3, r1, #3
 8018776:	4651      	mov	r1, sl
 8018778:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801877c:	4651      	mov	r1, sl
 801877e:	00ca      	lsls	r2, r1, #3
 8018780:	4610      	mov	r0, r2
 8018782:	4619      	mov	r1, r3
 8018784:	4603      	mov	r3, r0
 8018786:	4642      	mov	r2, r8
 8018788:	189b      	adds	r3, r3, r2
 801878a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801878e:	464b      	mov	r3, r9
 8018790:	460a      	mov	r2, r1
 8018792:	eb42 0303 	adc.w	r3, r2, r3
 8018796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801879e:	685b      	ldr	r3, [r3, #4]
 80187a0:	2200      	movs	r2, #0
 80187a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80187a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80187aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80187ae:	460b      	mov	r3, r1
 80187b0:	18db      	adds	r3, r3, r3
 80187b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80187b4:	4613      	mov	r3, r2
 80187b6:	eb42 0303 	adc.w	r3, r2, r3
 80187ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80187c0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80187c4:	f001 fa16 	bl	8019bf4 <__aeabi_uldivmod>
 80187c8:	4602      	mov	r2, r0
 80187ca:	460b      	mov	r3, r1
 80187cc:	4b0c      	ldr	r3, [pc, #48]	; (8018800 <UART_SetConfig+0x2d2>)
 80187ce:	fba3 1302 	umull	r1, r3, r3, r2
 80187d2:	095b      	lsrs	r3, r3, #5
 80187d4:	2164      	movs	r1, #100	; 0x64
 80187d6:	fb01 f303 	mul.w	r3, r1, r3
 80187da:	1ad3      	subs	r3, r2, r3
 80187dc:	00db      	lsls	r3, r3, #3
 80187de:	3332      	adds	r3, #50	; 0x32
 80187e0:	4a07      	ldr	r2, [pc, #28]	; (8018800 <UART_SetConfig+0x2d2>)
 80187e2:	fba2 2303 	umull	r2, r3, r2, r3
 80187e6:	095b      	lsrs	r3, r3, #5
 80187e8:	f003 0207 	and.w	r2, r3, #7
 80187ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	4422      	add	r2, r4
 80187f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80187f6:	e104      	b.n	8018a02 <UART_SetConfig+0x4d4>
 80187f8:	40011000 	.word	0x40011000
 80187fc:	40011400 	.word	0x40011400
 8018800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018808:	2200      	movs	r2, #0
 801880a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801880e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8018816:	4642      	mov	r2, r8
 8018818:	464b      	mov	r3, r9
 801881a:	1891      	adds	r1, r2, r2
 801881c:	6239      	str	r1, [r7, #32]
 801881e:	415b      	adcs	r3, r3
 8018820:	627b      	str	r3, [r7, #36]	; 0x24
 8018822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018826:	4641      	mov	r1, r8
 8018828:	1854      	adds	r4, r2, r1
 801882a:	4649      	mov	r1, r9
 801882c:	eb43 0501 	adc.w	r5, r3, r1
 8018830:	f04f 0200 	mov.w	r2, #0
 8018834:	f04f 0300 	mov.w	r3, #0
 8018838:	00eb      	lsls	r3, r5, #3
 801883a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801883e:	00e2      	lsls	r2, r4, #3
 8018840:	4614      	mov	r4, r2
 8018842:	461d      	mov	r5, r3
 8018844:	4643      	mov	r3, r8
 8018846:	18e3      	adds	r3, r4, r3
 8018848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801884c:	464b      	mov	r3, r9
 801884e:	eb45 0303 	adc.w	r3, r5, r3
 8018852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801885a:	685b      	ldr	r3, [r3, #4]
 801885c:	2200      	movs	r2, #0
 801885e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018866:	f04f 0200 	mov.w	r2, #0
 801886a:	f04f 0300 	mov.w	r3, #0
 801886e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8018872:	4629      	mov	r1, r5
 8018874:	008b      	lsls	r3, r1, #2
 8018876:	4621      	mov	r1, r4
 8018878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801887c:	4621      	mov	r1, r4
 801887e:	008a      	lsls	r2, r1, #2
 8018880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8018884:	f001 f9b6 	bl	8019bf4 <__aeabi_uldivmod>
 8018888:	4602      	mov	r2, r0
 801888a:	460b      	mov	r3, r1
 801888c:	4b60      	ldr	r3, [pc, #384]	; (8018a10 <UART_SetConfig+0x4e2>)
 801888e:	fba3 2302 	umull	r2, r3, r3, r2
 8018892:	095b      	lsrs	r3, r3, #5
 8018894:	011c      	lsls	r4, r3, #4
 8018896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801889a:	2200      	movs	r2, #0
 801889c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80188a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80188a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80188a8:	4642      	mov	r2, r8
 80188aa:	464b      	mov	r3, r9
 80188ac:	1891      	adds	r1, r2, r2
 80188ae:	61b9      	str	r1, [r7, #24]
 80188b0:	415b      	adcs	r3, r3
 80188b2:	61fb      	str	r3, [r7, #28]
 80188b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80188b8:	4641      	mov	r1, r8
 80188ba:	1851      	adds	r1, r2, r1
 80188bc:	6139      	str	r1, [r7, #16]
 80188be:	4649      	mov	r1, r9
 80188c0:	414b      	adcs	r3, r1
 80188c2:	617b      	str	r3, [r7, #20]
 80188c4:	f04f 0200 	mov.w	r2, #0
 80188c8:	f04f 0300 	mov.w	r3, #0
 80188cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80188d0:	4659      	mov	r1, fp
 80188d2:	00cb      	lsls	r3, r1, #3
 80188d4:	4651      	mov	r1, sl
 80188d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80188da:	4651      	mov	r1, sl
 80188dc:	00ca      	lsls	r2, r1, #3
 80188de:	4610      	mov	r0, r2
 80188e0:	4619      	mov	r1, r3
 80188e2:	4603      	mov	r3, r0
 80188e4:	4642      	mov	r2, r8
 80188e6:	189b      	adds	r3, r3, r2
 80188e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80188ec:	464b      	mov	r3, r9
 80188ee:	460a      	mov	r2, r1
 80188f0:	eb42 0303 	adc.w	r3, r2, r3
 80188f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80188f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	2200      	movs	r2, #0
 8018900:	67bb      	str	r3, [r7, #120]	; 0x78
 8018902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018904:	f04f 0200 	mov.w	r2, #0
 8018908:	f04f 0300 	mov.w	r3, #0
 801890c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018910:	4649      	mov	r1, r9
 8018912:	008b      	lsls	r3, r1, #2
 8018914:	4641      	mov	r1, r8
 8018916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801891a:	4641      	mov	r1, r8
 801891c:	008a      	lsls	r2, r1, #2
 801891e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018922:	f001 f967 	bl	8019bf4 <__aeabi_uldivmod>
 8018926:	4602      	mov	r2, r0
 8018928:	460b      	mov	r3, r1
 801892a:	4b39      	ldr	r3, [pc, #228]	; (8018a10 <UART_SetConfig+0x4e2>)
 801892c:	fba3 1302 	umull	r1, r3, r3, r2
 8018930:	095b      	lsrs	r3, r3, #5
 8018932:	2164      	movs	r1, #100	; 0x64
 8018934:	fb01 f303 	mul.w	r3, r1, r3
 8018938:	1ad3      	subs	r3, r2, r3
 801893a:	011b      	lsls	r3, r3, #4
 801893c:	3332      	adds	r3, #50	; 0x32
 801893e:	4a34      	ldr	r2, [pc, #208]	; (8018a10 <UART_SetConfig+0x4e2>)
 8018940:	fba2 2303 	umull	r2, r3, r2, r3
 8018944:	095b      	lsrs	r3, r3, #5
 8018946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801894a:	441c      	add	r4, r3
 801894c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018950:	2200      	movs	r2, #0
 8018952:	673b      	str	r3, [r7, #112]	; 0x70
 8018954:	677a      	str	r2, [r7, #116]	; 0x74
 8018956:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801895a:	4642      	mov	r2, r8
 801895c:	464b      	mov	r3, r9
 801895e:	1891      	adds	r1, r2, r2
 8018960:	60b9      	str	r1, [r7, #8]
 8018962:	415b      	adcs	r3, r3
 8018964:	60fb      	str	r3, [r7, #12]
 8018966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801896a:	4641      	mov	r1, r8
 801896c:	1851      	adds	r1, r2, r1
 801896e:	6039      	str	r1, [r7, #0]
 8018970:	4649      	mov	r1, r9
 8018972:	414b      	adcs	r3, r1
 8018974:	607b      	str	r3, [r7, #4]
 8018976:	f04f 0200 	mov.w	r2, #0
 801897a:	f04f 0300 	mov.w	r3, #0
 801897e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018982:	4659      	mov	r1, fp
 8018984:	00cb      	lsls	r3, r1, #3
 8018986:	4651      	mov	r1, sl
 8018988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801898c:	4651      	mov	r1, sl
 801898e:	00ca      	lsls	r2, r1, #3
 8018990:	4610      	mov	r0, r2
 8018992:	4619      	mov	r1, r3
 8018994:	4603      	mov	r3, r0
 8018996:	4642      	mov	r2, r8
 8018998:	189b      	adds	r3, r3, r2
 801899a:	66bb      	str	r3, [r7, #104]	; 0x68
 801899c:	464b      	mov	r3, r9
 801899e:	460a      	mov	r2, r1
 80189a0:	eb42 0303 	adc.w	r3, r2, r3
 80189a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80189a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80189aa:	685b      	ldr	r3, [r3, #4]
 80189ac:	2200      	movs	r2, #0
 80189ae:	663b      	str	r3, [r7, #96]	; 0x60
 80189b0:	667a      	str	r2, [r7, #100]	; 0x64
 80189b2:	f04f 0200 	mov.w	r2, #0
 80189b6:	f04f 0300 	mov.w	r3, #0
 80189ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80189be:	4649      	mov	r1, r9
 80189c0:	008b      	lsls	r3, r1, #2
 80189c2:	4641      	mov	r1, r8
 80189c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80189c8:	4641      	mov	r1, r8
 80189ca:	008a      	lsls	r2, r1, #2
 80189cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80189d0:	f001 f910 	bl	8019bf4 <__aeabi_uldivmod>
 80189d4:	4602      	mov	r2, r0
 80189d6:	460b      	mov	r3, r1
 80189d8:	4b0d      	ldr	r3, [pc, #52]	; (8018a10 <UART_SetConfig+0x4e2>)
 80189da:	fba3 1302 	umull	r1, r3, r3, r2
 80189de:	095b      	lsrs	r3, r3, #5
 80189e0:	2164      	movs	r1, #100	; 0x64
 80189e2:	fb01 f303 	mul.w	r3, r1, r3
 80189e6:	1ad3      	subs	r3, r2, r3
 80189e8:	011b      	lsls	r3, r3, #4
 80189ea:	3332      	adds	r3, #50	; 0x32
 80189ec:	4a08      	ldr	r2, [pc, #32]	; (8018a10 <UART_SetConfig+0x4e2>)
 80189ee:	fba2 2303 	umull	r2, r3, r2, r3
 80189f2:	095b      	lsrs	r3, r3, #5
 80189f4:	f003 020f 	and.w	r2, r3, #15
 80189f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	4422      	add	r2, r4
 8018a00:	609a      	str	r2, [r3, #8]
}
 8018a02:	bf00      	nop
 8018a04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018a0e:	bf00      	nop
 8018a10:	51eb851f 	.word	0x51eb851f

08018a14 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8018a14:	b480      	push	{r7}
 8018a16:	b085      	sub	sp, #20
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
 8018a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	681a      	ldr	r2, [r3, #0]
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a2c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8018a2e:	68fa      	ldr	r2, [r7, #12]
 8018a30:	4b20      	ldr	r3, [pc, #128]	; (8018ab4 <FSMC_NORSRAM_Init+0xa0>)
 8018a32:	4013      	ands	r3, r2
 8018a34:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018a36:	683b      	ldr	r3, [r7, #0]
 8018a38:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018a3e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8018a44:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8018a4a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8018a50:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8018a56:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8018a58:	683b      	ldr	r3, [r7, #0]
 8018a5a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8018a5c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8018a62:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8018a64:	683b      	ldr	r3, [r7, #0]
 8018a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8018a68:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8018a6e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8018a74:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8018a76:	683b      	ldr	r3, [r7, #0]
 8018a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8018a7a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8018a7c:	683b      	ldr	r3, [r7, #0]
 8018a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8018a80:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018a82:	68fa      	ldr	r2, [r7, #12]
 8018a84:	4313      	orrs	r3, r2
 8018a86:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	689b      	ldr	r3, [r3, #8]
 8018a8c:	2b08      	cmp	r3, #8
 8018a8e:	d103      	bne.n	8018a98 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a96:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8018a98:	683b      	ldr	r3, [r7, #0]
 8018a9a:	681a      	ldr	r2, [r3, #0]
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	68f9      	ldr	r1, [r7, #12]
 8018aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8018aa4:	2300      	movs	r3, #0
}
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	3714      	adds	r7, #20
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab0:	4770      	bx	lr
 8018ab2:	bf00      	nop
 8018ab4:	fff00080 	.word	0xfff00080

08018ab8 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b085      	sub	sp, #20
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	60f8      	str	r0, [r7, #12]
 8018ac0:	60b9      	str	r1, [r7, #8]
 8018ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	687a      	ldr	r2, [r7, #4]
 8018ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018acc:	f023 0101 	bic.w	r1, r3, #1
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d106      	bne.n	8018aec <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	687a      	ldr	r2, [r7, #4]
 8018ae2:	f243 01db 	movw	r1, #12507	; 0x30db
 8018ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018aea:	e005      	b.n	8018af8 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	687a      	ldr	r2, [r7, #4]
 8018af0:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8018af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	1c5a      	adds	r2, r3, #1
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 8018b06:	68bb      	ldr	r3, [r7, #8]
 8018b08:	687a      	ldr	r2, [r7, #4]
 8018b0a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 8018b12:	2300      	movs	r3, #0
}
 8018b14:	4618      	mov	r0, r3
 8018b16:	3714      	adds	r7, #20
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr

08018b20 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018b20:	b480      	push	{r7}
 8018b22:	b087      	sub	sp, #28
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	60f8      	str	r0, [r7, #12]
 8018b28:	60b9      	str	r1, [r7, #8]
 8018b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	1c5a      	adds	r2, r3, #1
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b3a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8018b42:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	685b      	ldr	r3, [r3, #4]
 8018b4c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018b4e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8018b50:	68bb      	ldr	r3, [r7, #8]
 8018b52:	689b      	ldr	r3, [r3, #8]
 8018b54:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018b56:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	68db      	ldr	r3, [r3, #12]
 8018b5c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8018b5e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	691b      	ldr	r3, [r3, #16]
 8018b64:	3b01      	subs	r3, #1
 8018b66:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018b68:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	695b      	ldr	r3, [r3, #20]
 8018b6e:	3b02      	subs	r3, #2
 8018b70:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018b72:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8018b74:	68bb      	ldr	r3, [r7, #8]
 8018b76:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018b78:	4313      	orrs	r3, r2
 8018b7a:	697a      	ldr	r2, [r7, #20]
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	1c5a      	adds	r2, r3, #1
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	6979      	ldr	r1, [r7, #20]
 8018b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8018b8c:	2300      	movs	r3, #0
}
 8018b8e:	4618      	mov	r0, r3
 8018b90:	371c      	adds	r7, #28
 8018b92:	46bd      	mov	sp, r7
 8018b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b98:	4770      	bx	lr

08018b9a <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8018b9a:	b480      	push	{r7}
 8018b9c:	b087      	sub	sp, #28
 8018b9e:	af00      	add	r7, sp, #0
 8018ba0:	60f8      	str	r0, [r7, #12]
 8018ba2:	60b9      	str	r1, [r7, #8]
 8018ba4:	607a      	str	r2, [r7, #4]
 8018ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8018ba8:	2300      	movs	r3, #0
 8018baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018bb2:	d122      	bne.n	8018bfa <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bbc:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8018bbe:	697a      	ldr	r2, [r7, #20]
 8018bc0:	4b14      	ldr	r3, [pc, #80]	; (8018c14 <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 8018bc2:	4013      	ands	r3, r2
 8018bc4:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	685b      	ldr	r3, [r3, #4]
 8018bce:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018bd0:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8018bd2:	68bb      	ldr	r3, [r7, #8]
 8018bd4:	689b      	ldr	r3, [r3, #8]
 8018bd6:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018bd8:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018bda:	68bb      	ldr	r3, [r7, #8]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8018be0:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018be6:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018be8:	697a      	ldr	r2, [r7, #20]
 8018bea:	4313      	orrs	r3, r2
 8018bec:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	687a      	ldr	r2, [r7, #4]
 8018bf2:	6979      	ldr	r1, [r7, #20]
 8018bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018bf8:	e005      	b.n	8018c06 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	687a      	ldr	r2, [r7, #4]
 8018bfe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8018c06:	2300      	movs	r3, #0
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	371c      	adds	r7, #28
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c12:	4770      	bx	lr
 8018c14:	cff00000 	.word	0xcff00000

08018c18 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	683a      	ldr	r2, [r7, #0]
 8018c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c2a:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	683a      	ldr	r2, [r7, #0]
 8018c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018c36:	2300      	movs	r3, #0
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	370c      	adds	r7, #12
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c42:	4770      	bx	lr

08018c44 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018c44:	b480      	push	{r7}
 8018c46:	b083      	sub	sp, #12
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	683a      	ldr	r2, [r7, #0]
 8018c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	683a      	ldr	r2, [r7, #0]
 8018c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018c62:	2300      	movs	r3, #0
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	370c      	adds	r7, #12
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr

08018c70 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8018c70:	b480      	push	{r7}
 8018c72:	b085      	sub	sp, #20
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	2b10      	cmp	r3, #16
 8018c84:	d103      	bne.n	8018c8e <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	60fb      	str	r3, [r7, #12]
 8018c8c:	e002      	b.n	8018c94 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6a1b      	ldr	r3, [r3, #32]
 8018c92:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8018c94:	68fa      	ldr	r2, [r7, #12]
 8018c96:	4b16      	ldr	r3, [pc, #88]	; (8018cf0 <FSMC_NAND_Init+0x80>)
 8018c98:	4013      	ands	r3, r2
 8018c9a:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8018ca4:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8018ca6:	683b      	ldr	r3, [r7, #0]
 8018ca8:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8018caa:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8018cb0:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	695b      	ldr	r3, [r3, #20]
 8018cb6:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8018cb8:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	699b      	ldr	r3, [r3, #24]
 8018cbe:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018cc0:	431a      	orrs	r2, r3
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	4313      	orrs	r3, r2
 8018cc6:	f043 0308 	orr.w	r3, r3, #8
 8018cca:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	2b10      	cmp	r3, #16
 8018cd2:	d103      	bne.n	8018cdc <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	68fa      	ldr	r2, [r7, #12]
 8018cd8:	601a      	str	r2, [r3, #0]
 8018cda:	e002      	b.n	8018ce2 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	68fa      	ldr	r2, [r7, #12]
 8018ce0:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8018ce2:	2300      	movs	r3, #0
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3714      	adds	r7, #20
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cee:	4770      	bx	lr
 8018cf0:	fff00181 	.word	0xfff00181

08018cf4 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	b087      	sub	sp, #28
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	60f8      	str	r0, [r7, #12]
 8018cfc:	60b9      	str	r1, [r7, #8]
 8018cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018d00:	2300      	movs	r3, #0
 8018d02:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2b10      	cmp	r3, #16
 8018d08:	d103      	bne.n	8018d12 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	689b      	ldr	r3, [r3, #8]
 8018d0e:	617b      	str	r3, [r7, #20]
 8018d10:	e002      	b.n	8018d18 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d16:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018d18:	2300      	movs	r3, #0
 8018d1a:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018d1c:	68bb      	ldr	r3, [r7, #8]
 8018d1e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	685b      	ldr	r3, [r3, #4]
 8018d24:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018d26:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	689b      	ldr	r3, [r3, #8]
 8018d2c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018d2e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	68db      	ldr	r3, [r3, #12]
 8018d34:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018d36:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018d38:	697a      	ldr	r2, [r7, #20]
 8018d3a:	4313      	orrs	r3, r2
 8018d3c:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2b10      	cmp	r3, #16
 8018d42:	d103      	bne.n	8018d4c <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	697a      	ldr	r2, [r7, #20]
 8018d48:	609a      	str	r2, [r3, #8]
 8018d4a:	e002      	b.n	8018d52 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	697a      	ldr	r2, [r7, #20]
 8018d50:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8018d52:	2300      	movs	r3, #0
}
 8018d54:	4618      	mov	r0, r3
 8018d56:	371c      	adds	r7, #28
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr

08018d60 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018d60:	b480      	push	{r7}
 8018d62:	b087      	sub	sp, #28
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	60f8      	str	r0, [r7, #12]
 8018d68:	60b9      	str	r1, [r7, #8]
 8018d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2b10      	cmp	r3, #16
 8018d74:	d103      	bne.n	8018d7e <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	617b      	str	r3, [r7, #20]
 8018d7c:	e002      	b.n	8018d84 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d82:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8018d84:	2300      	movs	r3, #0
 8018d86:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018d8c:	68bb      	ldr	r3, [r7, #8]
 8018d8e:	685b      	ldr	r3, [r3, #4]
 8018d90:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018d92:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	689b      	ldr	r3, [r3, #8]
 8018d98:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018d9a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	68db      	ldr	r3, [r3, #12]
 8018da0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018da2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018da4:	697a      	ldr	r2, [r7, #20]
 8018da6:	4313      	orrs	r3, r2
 8018da8:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2b10      	cmp	r3, #16
 8018dae:	d103      	bne.n	8018db8 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	697a      	ldr	r2, [r7, #20]
 8018db4:	60da      	str	r2, [r3, #12]
 8018db6:	e002      	b.n	8018dbe <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	697a      	ldr	r2, [r7, #20]
 8018dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8018dbe:	2300      	movs	r3, #0
}
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	371c      	adds	r7, #28
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dca:	4770      	bx	lr

08018dcc <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
 8018dd4:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	2b10      	cmp	r3, #16
 8018dda:	d106      	bne.n	8018dea <FSMC_NAND_DeInit+0x1e>
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f023 0204 	bic.w	r2, r3, #4
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	601a      	str	r2, [r3, #0]
 8018de8:	e005      	b.n	8018df6 <FSMC_NAND_DeInit+0x2a>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6a1b      	ldr	r3, [r3, #32]
 8018dee:	f023 0204 	bic.w	r2, r3, #4
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	2b10      	cmp	r3, #16
 8018dfa:	d10e      	bne.n	8018e1a <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2218      	movs	r2, #24
 8018e00:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2240      	movs	r2, #64	; 0x40
 8018e06:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018e0e:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018e16:	60da      	str	r2, [r3, #12]
 8018e18:	e00d      	b.n	8018e36 <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2218      	movs	r2, #24
 8018e1e:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2240      	movs	r2, #64	; 0x40
 8018e24:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018e2c:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018e34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 8018e36:	2300      	movs	r3, #0
}
 8018e38:	4618      	mov	r0, r3
 8018e3a:	370c      	adds	r7, #12
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e42:	4770      	bx	lr

08018e44 <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018e44:	b480      	push	{r7}
 8018e46:	b083      	sub	sp, #12
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	2b10      	cmp	r3, #16
 8018e52:	d106      	bne.n	8018e62 <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	601a      	str	r2, [r3, #0]
 8018e60:	e005      	b.n	8018e6e <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	6a1b      	ldr	r3, [r3, #32]
 8018e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 8018e6e:	2300      	movs	r3, #0
}
 8018e70:	4618      	mov	r0, r3
 8018e72:	370c      	adds	r7, #12
 8018e74:	46bd      	mov	sp, r7
 8018e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7a:	4770      	bx	lr

08018e7c <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 8018e7c:	b480      	push	{r7}
 8018e7e:	b083      	sub	sp, #12
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	2b10      	cmp	r3, #16
 8018e8a:	d106      	bne.n	8018e9a <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	601a      	str	r2, [r3, #0]
 8018e98:	e005      	b.n	8018ea6 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6a1b      	ldr	r3, [r3, #32]
 8018e9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 8018ea6:	2300      	movs	r3, #0
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	370c      	adds	r7, #12
 8018eac:	46bd      	mov	sp, r7
 8018eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb2:	4770      	bx	lr

08018eb4 <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b086      	sub	sp, #24
 8018eb8:	af00      	add	r7, sp, #0
 8018eba:	60f8      	str	r0, [r7, #12]
 8018ebc:	60b9      	str	r1, [r7, #8]
 8018ebe:	607a      	str	r2, [r7, #4]
 8018ec0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8018ec6:	f7ee f825 	bl	8006f14 <HAL_GetTick>
 8018eca:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018ecc:	e010      	b.n	8018ef0 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ed4:	d00c      	beq.n	8018ef0 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d007      	beq.n	8018eec <FSMC_NAND_GetECC+0x38>
 8018edc:	f7ee f81a 	bl	8006f14 <HAL_GetTick>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	1ad3      	subs	r3, r2, r3
 8018ee6:	683a      	ldr	r2, [r7, #0]
 8018ee8:	429a      	cmp	r2, r3
 8018eea:	d201      	bcs.n	8018ef0 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018eec:	2303      	movs	r3, #3
 8018eee:	e024      	b.n	8018f3a <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2b10      	cmp	r3, #16
 8018ef4:	d109      	bne.n	8018f0a <FSMC_NAND_GetECC+0x56>
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018efe:	2b40      	cmp	r3, #64	; 0x40
 8018f00:	bf14      	ite	ne
 8018f02:	2301      	movne	r3, #1
 8018f04:	2300      	moveq	r3, #0
 8018f06:	b2db      	uxtb	r3, r3
 8018f08:	e008      	b.n	8018f1c <FSMC_NAND_GetECC+0x68>
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f12:	2b40      	cmp	r3, #64	; 0x40
 8018f14:	bf14      	ite	ne
 8018f16:	2301      	movne	r3, #1
 8018f18:	2300      	moveq	r3, #0
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d1d6      	bne.n	8018ece <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2b10      	cmp	r3, #16
 8018f24:	d104      	bne.n	8018f30 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	695a      	ldr	r2, [r3, #20]
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	601a      	str	r2, [r3, #0]
 8018f2e:	e003      	b.n	8018f38 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018f38:	2300      	movs	r3, #0
}
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	3718      	adds	r7, #24
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}

08018f42 <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 8018f42:	b480      	push	{r7}
 8018f44:	b085      	sub	sp, #20
 8018f46:	af00      	add	r7, sp, #0
 8018f48:	6078      	str	r0, [r7, #4]
 8018f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8018f5c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018f60:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 8018f66:	683b      	ldr	r3, [r7, #0]
 8018f68:	685b      	ldr	r3, [r3, #4]
 8018f6a:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 8018f6c:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	689b      	ldr	r3, [r3, #8]
 8018f72:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018f74:	431a      	orrs	r2, r3
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	4313      	orrs	r3, r2
 8018f7a:	f043 0310 	orr.w	r3, r3, #16
 8018f7e:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	68fa      	ldr	r2, [r7, #12]
 8018f84:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8018f86:	2300      	movs	r3, #0
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3714      	adds	r7, #20
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr

08018f94 <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018f94:	b480      	push	{r7}
 8018f96:	b085      	sub	sp, #20
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
 8018f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	689b      	ldr	r3, [r3, #8]
 8018fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 8018fa8:	2300      	movs	r3, #0
 8018faa:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	685b      	ldr	r3, [r3, #4]
 8018fb4:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018fb6:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	689b      	ldr	r3, [r3, #8]
 8018fbc:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018fbe:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	68db      	ldr	r3, [r3, #12]
 8018fc4:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 8018fc6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018fc8:	68fa      	ldr	r2, [r7, #12]
 8018fca:	4313      	orrs	r3, r2
 8018fcc:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	68fa      	ldr	r2, [r7, #12]
 8018fd2:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 8018fd4:	2300      	movs	r3, #0
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3714      	adds	r7, #20
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe0:	4770      	bx	lr

08018fe2 <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018fe2:	b480      	push	{r7}
 8018fe4:	b085      	sub	sp, #20
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
 8018fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018fec:	2300      	movs	r3, #0
 8018fee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	68db      	ldr	r3, [r3, #12]
 8018ff4:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	685b      	ldr	r3, [r3, #4]
 8019002:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8019004:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	689b      	ldr	r3, [r3, #8]
 801900a:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 801900c:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	68db      	ldr	r3, [r3, #12]
 8019012:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 8019014:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8019016:	68fa      	ldr	r2, [r7, #12]
 8019018:	4313      	orrs	r3, r2
 801901a:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	68fa      	ldr	r2, [r7, #12]
 8019020:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 8019022:	2300      	movs	r3, #0
}
 8019024:	4618      	mov	r0, r3
 8019026:	3714      	adds	r7, #20
 8019028:	46bd      	mov	sp, r7
 801902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902e:	4770      	bx	lr

08019030 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8019030:	b480      	push	{r7}
 8019032:	b085      	sub	sp, #20
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801903a:	2300      	movs	r3, #0
 801903c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	691b      	ldr	r3, [r3, #16]
 8019042:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 8019044:	2300      	movs	r3, #0
 8019046:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	685b      	ldr	r3, [r3, #4]
 8019050:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8019052:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	689b      	ldr	r3, [r3, #8]
 8019058:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 801905a:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	68db      	ldr	r3, [r3, #12]
 8019060:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 8019062:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8019064:	68fa      	ldr	r2, [r7, #12]
 8019066:	4313      	orrs	r3, r2
 8019068:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	68fa      	ldr	r2, [r7, #12]
 801906e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8019070:	2300      	movs	r3, #0
}
 8019072:	4618      	mov	r0, r3
 8019074:	3714      	adds	r7, #20
 8019076:	46bd      	mov	sp, r7
 8019078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907c:	4770      	bx	lr

0801907e <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 801907e:	b480      	push	{r7}
 8019080:	b083      	sub	sp, #12
 8019082:	af00      	add	r7, sp, #0
 8019084:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	f023 0204 	bic.w	r2, r3, #4
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2218      	movs	r2, #24
 8019096:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	2200      	movs	r2, #0
 801909c:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80190a4:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80190ac:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80190b4:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80190b6:	2300      	movs	r3, #0
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	370c      	adds	r7, #12
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr

080190c4 <strlen>:
 80190c4:	4603      	mov	r3, r0
 80190c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190ca:	2a00      	cmp	r2, #0
 80190cc:	d1fb      	bne.n	80190c6 <strlen+0x2>
 80190ce:	1a18      	subs	r0, r3, r0
 80190d0:	3801      	subs	r0, #1
 80190d2:	4770      	bx	lr
	...

080190e0 <memchr>:
 80190e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80190e4:	2a10      	cmp	r2, #16
 80190e6:	db2b      	blt.n	8019140 <memchr+0x60>
 80190e8:	f010 0f07 	tst.w	r0, #7
 80190ec:	d008      	beq.n	8019100 <memchr+0x20>
 80190ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80190f2:	3a01      	subs	r2, #1
 80190f4:	428b      	cmp	r3, r1
 80190f6:	d02d      	beq.n	8019154 <memchr+0x74>
 80190f8:	f010 0f07 	tst.w	r0, #7
 80190fc:	b342      	cbz	r2, 8019150 <memchr+0x70>
 80190fe:	d1f6      	bne.n	80190ee <memchr+0xe>
 8019100:	b4f0      	push	{r4, r5, r6, r7}
 8019102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8019106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801910a:	f022 0407 	bic.w	r4, r2, #7
 801910e:	f07f 0700 	mvns.w	r7, #0
 8019112:	2300      	movs	r3, #0
 8019114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8019118:	3c08      	subs	r4, #8
 801911a:	ea85 0501 	eor.w	r5, r5, r1
 801911e:	ea86 0601 	eor.w	r6, r6, r1
 8019122:	fa85 f547 	uadd8	r5, r5, r7
 8019126:	faa3 f587 	sel	r5, r3, r7
 801912a:	fa86 f647 	uadd8	r6, r6, r7
 801912e:	faa5 f687 	sel	r6, r5, r7
 8019132:	b98e      	cbnz	r6, 8019158 <memchr+0x78>
 8019134:	d1ee      	bne.n	8019114 <memchr+0x34>
 8019136:	bcf0      	pop	{r4, r5, r6, r7}
 8019138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801913c:	f002 0207 	and.w	r2, r2, #7
 8019140:	b132      	cbz	r2, 8019150 <memchr+0x70>
 8019142:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019146:	3a01      	subs	r2, #1
 8019148:	ea83 0301 	eor.w	r3, r3, r1
 801914c:	b113      	cbz	r3, 8019154 <memchr+0x74>
 801914e:	d1f8      	bne.n	8019142 <memchr+0x62>
 8019150:	2000      	movs	r0, #0
 8019152:	4770      	bx	lr
 8019154:	3801      	subs	r0, #1
 8019156:	4770      	bx	lr
 8019158:	2d00      	cmp	r5, #0
 801915a:	bf06      	itte	eq
 801915c:	4635      	moveq	r5, r6
 801915e:	3803      	subeq	r0, #3
 8019160:	3807      	subne	r0, #7
 8019162:	f015 0f01 	tst.w	r5, #1
 8019166:	d107      	bne.n	8019178 <memchr+0x98>
 8019168:	3001      	adds	r0, #1
 801916a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801916e:	bf02      	ittt	eq
 8019170:	3001      	addeq	r0, #1
 8019172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8019176:	3001      	addeq	r0, #1
 8019178:	bcf0      	pop	{r4, r5, r6, r7}
 801917a:	3801      	subs	r0, #1
 801917c:	4770      	bx	lr
 801917e:	bf00      	nop

08019180 <__aeabi_drsub>:
 8019180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8019184:	e002      	b.n	801918c <__adddf3>
 8019186:	bf00      	nop

08019188 <__aeabi_dsub>:
 8019188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801918c <__adddf3>:
 801918c:	b530      	push	{r4, r5, lr}
 801918e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8019192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8019196:	ea94 0f05 	teq	r4, r5
 801919a:	bf08      	it	eq
 801919c:	ea90 0f02 	teqeq	r0, r2
 80191a0:	bf1f      	itttt	ne
 80191a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80191a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80191aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80191ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80191b2:	f000 80e2 	beq.w	801937a <__adddf3+0x1ee>
 80191b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80191ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80191be:	bfb8      	it	lt
 80191c0:	426d      	neglt	r5, r5
 80191c2:	dd0c      	ble.n	80191de <__adddf3+0x52>
 80191c4:	442c      	add	r4, r5
 80191c6:	ea80 0202 	eor.w	r2, r0, r2
 80191ca:	ea81 0303 	eor.w	r3, r1, r3
 80191ce:	ea82 0000 	eor.w	r0, r2, r0
 80191d2:	ea83 0101 	eor.w	r1, r3, r1
 80191d6:	ea80 0202 	eor.w	r2, r0, r2
 80191da:	ea81 0303 	eor.w	r3, r1, r3
 80191de:	2d36      	cmp	r5, #54	; 0x36
 80191e0:	bf88      	it	hi
 80191e2:	bd30      	pophi	{r4, r5, pc}
 80191e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80191e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80191ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80191f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80191f4:	d002      	beq.n	80191fc <__adddf3+0x70>
 80191f6:	4240      	negs	r0, r0
 80191f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80191fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8019200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8019208:	d002      	beq.n	8019210 <__adddf3+0x84>
 801920a:	4252      	negs	r2, r2
 801920c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8019210:	ea94 0f05 	teq	r4, r5
 8019214:	f000 80a7 	beq.w	8019366 <__adddf3+0x1da>
 8019218:	f1a4 0401 	sub.w	r4, r4, #1
 801921c:	f1d5 0e20 	rsbs	lr, r5, #32
 8019220:	db0d      	blt.n	801923e <__adddf3+0xb2>
 8019222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8019226:	fa22 f205 	lsr.w	r2, r2, r5
 801922a:	1880      	adds	r0, r0, r2
 801922c:	f141 0100 	adc.w	r1, r1, #0
 8019230:	fa03 f20e 	lsl.w	r2, r3, lr
 8019234:	1880      	adds	r0, r0, r2
 8019236:	fa43 f305 	asr.w	r3, r3, r5
 801923a:	4159      	adcs	r1, r3
 801923c:	e00e      	b.n	801925c <__adddf3+0xd0>
 801923e:	f1a5 0520 	sub.w	r5, r5, #32
 8019242:	f10e 0e20 	add.w	lr, lr, #32
 8019246:	2a01      	cmp	r2, #1
 8019248:	fa03 fc0e 	lsl.w	ip, r3, lr
 801924c:	bf28      	it	cs
 801924e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8019252:	fa43 f305 	asr.w	r3, r3, r5
 8019256:	18c0      	adds	r0, r0, r3
 8019258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801925c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019260:	d507      	bpl.n	8019272 <__adddf3+0xe6>
 8019262:	f04f 0e00 	mov.w	lr, #0
 8019266:	f1dc 0c00 	rsbs	ip, ip, #0
 801926a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801926e:	eb6e 0101 	sbc.w	r1, lr, r1
 8019272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8019276:	d31b      	bcc.n	80192b0 <__adddf3+0x124>
 8019278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801927c:	d30c      	bcc.n	8019298 <__adddf3+0x10c>
 801927e:	0849      	lsrs	r1, r1, #1
 8019280:	ea5f 0030 	movs.w	r0, r0, rrx
 8019284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8019288:	f104 0401 	add.w	r4, r4, #1
 801928c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8019290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8019294:	f080 809a 	bcs.w	80193cc <__adddf3+0x240>
 8019298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801929c:	bf08      	it	eq
 801929e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80192a2:	f150 0000 	adcs.w	r0, r0, #0
 80192a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80192aa:	ea41 0105 	orr.w	r1, r1, r5
 80192ae:	bd30      	pop	{r4, r5, pc}
 80192b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80192b4:	4140      	adcs	r0, r0
 80192b6:	eb41 0101 	adc.w	r1, r1, r1
 80192ba:	3c01      	subs	r4, #1
 80192bc:	bf28      	it	cs
 80192be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80192c2:	d2e9      	bcs.n	8019298 <__adddf3+0x10c>
 80192c4:	f091 0f00 	teq	r1, #0
 80192c8:	bf04      	itt	eq
 80192ca:	4601      	moveq	r1, r0
 80192cc:	2000      	moveq	r0, #0
 80192ce:	fab1 f381 	clz	r3, r1
 80192d2:	bf08      	it	eq
 80192d4:	3320      	addeq	r3, #32
 80192d6:	f1a3 030b 	sub.w	r3, r3, #11
 80192da:	f1b3 0220 	subs.w	r2, r3, #32
 80192de:	da0c      	bge.n	80192fa <__adddf3+0x16e>
 80192e0:	320c      	adds	r2, #12
 80192e2:	dd08      	ble.n	80192f6 <__adddf3+0x16a>
 80192e4:	f102 0c14 	add.w	ip, r2, #20
 80192e8:	f1c2 020c 	rsb	r2, r2, #12
 80192ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80192f0:	fa21 f102 	lsr.w	r1, r1, r2
 80192f4:	e00c      	b.n	8019310 <__adddf3+0x184>
 80192f6:	f102 0214 	add.w	r2, r2, #20
 80192fa:	bfd8      	it	le
 80192fc:	f1c2 0c20 	rsble	ip, r2, #32
 8019300:	fa01 f102 	lsl.w	r1, r1, r2
 8019304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8019308:	bfdc      	itt	le
 801930a:	ea41 010c 	orrle.w	r1, r1, ip
 801930e:	4090      	lslle	r0, r2
 8019310:	1ae4      	subs	r4, r4, r3
 8019312:	bfa2      	ittt	ge
 8019314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8019318:	4329      	orrge	r1, r5
 801931a:	bd30      	popge	{r4, r5, pc}
 801931c:	ea6f 0404 	mvn.w	r4, r4
 8019320:	3c1f      	subs	r4, #31
 8019322:	da1c      	bge.n	801935e <__adddf3+0x1d2>
 8019324:	340c      	adds	r4, #12
 8019326:	dc0e      	bgt.n	8019346 <__adddf3+0x1ba>
 8019328:	f104 0414 	add.w	r4, r4, #20
 801932c:	f1c4 0220 	rsb	r2, r4, #32
 8019330:	fa20 f004 	lsr.w	r0, r0, r4
 8019334:	fa01 f302 	lsl.w	r3, r1, r2
 8019338:	ea40 0003 	orr.w	r0, r0, r3
 801933c:	fa21 f304 	lsr.w	r3, r1, r4
 8019340:	ea45 0103 	orr.w	r1, r5, r3
 8019344:	bd30      	pop	{r4, r5, pc}
 8019346:	f1c4 040c 	rsb	r4, r4, #12
 801934a:	f1c4 0220 	rsb	r2, r4, #32
 801934e:	fa20 f002 	lsr.w	r0, r0, r2
 8019352:	fa01 f304 	lsl.w	r3, r1, r4
 8019356:	ea40 0003 	orr.w	r0, r0, r3
 801935a:	4629      	mov	r1, r5
 801935c:	bd30      	pop	{r4, r5, pc}
 801935e:	fa21 f004 	lsr.w	r0, r1, r4
 8019362:	4629      	mov	r1, r5
 8019364:	bd30      	pop	{r4, r5, pc}
 8019366:	f094 0f00 	teq	r4, #0
 801936a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801936e:	bf06      	itte	eq
 8019370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8019374:	3401      	addeq	r4, #1
 8019376:	3d01      	subne	r5, #1
 8019378:	e74e      	b.n	8019218 <__adddf3+0x8c>
 801937a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801937e:	bf18      	it	ne
 8019380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019384:	d029      	beq.n	80193da <__adddf3+0x24e>
 8019386:	ea94 0f05 	teq	r4, r5
 801938a:	bf08      	it	eq
 801938c:	ea90 0f02 	teqeq	r0, r2
 8019390:	d005      	beq.n	801939e <__adddf3+0x212>
 8019392:	ea54 0c00 	orrs.w	ip, r4, r0
 8019396:	bf04      	itt	eq
 8019398:	4619      	moveq	r1, r3
 801939a:	4610      	moveq	r0, r2
 801939c:	bd30      	pop	{r4, r5, pc}
 801939e:	ea91 0f03 	teq	r1, r3
 80193a2:	bf1e      	ittt	ne
 80193a4:	2100      	movne	r1, #0
 80193a6:	2000      	movne	r0, #0
 80193a8:	bd30      	popne	{r4, r5, pc}
 80193aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80193ae:	d105      	bne.n	80193bc <__adddf3+0x230>
 80193b0:	0040      	lsls	r0, r0, #1
 80193b2:	4149      	adcs	r1, r1
 80193b4:	bf28      	it	cs
 80193b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80193ba:	bd30      	pop	{r4, r5, pc}
 80193bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80193c0:	bf3c      	itt	cc
 80193c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80193c6:	bd30      	popcc	{r4, r5, pc}
 80193c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80193cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80193d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80193d4:	f04f 0000 	mov.w	r0, #0
 80193d8:	bd30      	pop	{r4, r5, pc}
 80193da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80193de:	bf1a      	itte	ne
 80193e0:	4619      	movne	r1, r3
 80193e2:	4610      	movne	r0, r2
 80193e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80193e8:	bf1c      	itt	ne
 80193ea:	460b      	movne	r3, r1
 80193ec:	4602      	movne	r2, r0
 80193ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80193f2:	bf06      	itte	eq
 80193f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80193f8:	ea91 0f03 	teqeq	r1, r3
 80193fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8019400:	bd30      	pop	{r4, r5, pc}
 8019402:	bf00      	nop

08019404 <__aeabi_ui2d>:
 8019404:	f090 0f00 	teq	r0, #0
 8019408:	bf04      	itt	eq
 801940a:	2100      	moveq	r1, #0
 801940c:	4770      	bxeq	lr
 801940e:	b530      	push	{r4, r5, lr}
 8019410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019418:	f04f 0500 	mov.w	r5, #0
 801941c:	f04f 0100 	mov.w	r1, #0
 8019420:	e750      	b.n	80192c4 <__adddf3+0x138>
 8019422:	bf00      	nop

08019424 <__aeabi_i2d>:
 8019424:	f090 0f00 	teq	r0, #0
 8019428:	bf04      	itt	eq
 801942a:	2100      	moveq	r1, #0
 801942c:	4770      	bxeq	lr
 801942e:	b530      	push	{r4, r5, lr}
 8019430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801943c:	bf48      	it	mi
 801943e:	4240      	negmi	r0, r0
 8019440:	f04f 0100 	mov.w	r1, #0
 8019444:	e73e      	b.n	80192c4 <__adddf3+0x138>
 8019446:	bf00      	nop

08019448 <__aeabi_f2d>:
 8019448:	0042      	lsls	r2, r0, #1
 801944a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801944e:	ea4f 0131 	mov.w	r1, r1, rrx
 8019452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8019456:	bf1f      	itttt	ne
 8019458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801945c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8019460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8019464:	4770      	bxne	lr
 8019466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801946a:	bf08      	it	eq
 801946c:	4770      	bxeq	lr
 801946e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8019472:	bf04      	itt	eq
 8019474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8019478:	4770      	bxeq	lr
 801947a:	b530      	push	{r4, r5, lr}
 801947c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8019480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019488:	e71c      	b.n	80192c4 <__adddf3+0x138>
 801948a:	bf00      	nop

0801948c <__aeabi_ul2d>:
 801948c:	ea50 0201 	orrs.w	r2, r0, r1
 8019490:	bf08      	it	eq
 8019492:	4770      	bxeq	lr
 8019494:	b530      	push	{r4, r5, lr}
 8019496:	f04f 0500 	mov.w	r5, #0
 801949a:	e00a      	b.n	80194b2 <__aeabi_l2d+0x16>

0801949c <__aeabi_l2d>:
 801949c:	ea50 0201 	orrs.w	r2, r0, r1
 80194a0:	bf08      	it	eq
 80194a2:	4770      	bxeq	lr
 80194a4:	b530      	push	{r4, r5, lr}
 80194a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80194aa:	d502      	bpl.n	80194b2 <__aeabi_l2d+0x16>
 80194ac:	4240      	negs	r0, r0
 80194ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80194b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80194b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80194ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80194be:	f43f aed8 	beq.w	8019272 <__adddf3+0xe6>
 80194c2:	f04f 0203 	mov.w	r2, #3
 80194c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80194ca:	bf18      	it	ne
 80194cc:	3203      	addne	r2, #3
 80194ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80194d2:	bf18      	it	ne
 80194d4:	3203      	addne	r2, #3
 80194d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80194da:	f1c2 0320 	rsb	r3, r2, #32
 80194de:	fa00 fc03 	lsl.w	ip, r0, r3
 80194e2:	fa20 f002 	lsr.w	r0, r0, r2
 80194e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80194ea:	ea40 000e 	orr.w	r0, r0, lr
 80194ee:	fa21 f102 	lsr.w	r1, r1, r2
 80194f2:	4414      	add	r4, r2
 80194f4:	e6bd      	b.n	8019272 <__adddf3+0xe6>
 80194f6:	bf00      	nop

080194f8 <__aeabi_dmul>:
 80194f8:	b570      	push	{r4, r5, r6, lr}
 80194fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80194fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019506:	bf1d      	ittte	ne
 8019508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801950c:	ea94 0f0c 	teqne	r4, ip
 8019510:	ea95 0f0c 	teqne	r5, ip
 8019514:	f000 f8de 	bleq	80196d4 <__aeabi_dmul+0x1dc>
 8019518:	442c      	add	r4, r5
 801951a:	ea81 0603 	eor.w	r6, r1, r3
 801951e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8019522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8019526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801952a:	bf18      	it	ne
 801952c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8019530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019538:	d038      	beq.n	80195ac <__aeabi_dmul+0xb4>
 801953a:	fba0 ce02 	umull	ip, lr, r0, r2
 801953e:	f04f 0500 	mov.w	r5, #0
 8019542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8019546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801954a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801954e:	f04f 0600 	mov.w	r6, #0
 8019552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8019556:	f09c 0f00 	teq	ip, #0
 801955a:	bf18      	it	ne
 801955c:	f04e 0e01 	orrne.w	lr, lr, #1
 8019560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8019564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8019568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801956c:	d204      	bcs.n	8019578 <__aeabi_dmul+0x80>
 801956e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8019572:	416d      	adcs	r5, r5
 8019574:	eb46 0606 	adc.w	r6, r6, r6
 8019578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801957c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8019580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8019584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8019588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801958c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8019590:	bf88      	it	hi
 8019592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019596:	d81e      	bhi.n	80195d6 <__aeabi_dmul+0xde>
 8019598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801959c:	bf08      	it	eq
 801959e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80195a2:	f150 0000 	adcs.w	r0, r0, #0
 80195a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80195aa:	bd70      	pop	{r4, r5, r6, pc}
 80195ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80195b0:	ea46 0101 	orr.w	r1, r6, r1
 80195b4:	ea40 0002 	orr.w	r0, r0, r2
 80195b8:	ea81 0103 	eor.w	r1, r1, r3
 80195bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80195c0:	bfc2      	ittt	gt
 80195c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80195c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80195ca:	bd70      	popgt	{r4, r5, r6, pc}
 80195cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80195d0:	f04f 0e00 	mov.w	lr, #0
 80195d4:	3c01      	subs	r4, #1
 80195d6:	f300 80ab 	bgt.w	8019730 <__aeabi_dmul+0x238>
 80195da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80195de:	bfde      	ittt	le
 80195e0:	2000      	movle	r0, #0
 80195e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80195e6:	bd70      	pople	{r4, r5, r6, pc}
 80195e8:	f1c4 0400 	rsb	r4, r4, #0
 80195ec:	3c20      	subs	r4, #32
 80195ee:	da35      	bge.n	801965c <__aeabi_dmul+0x164>
 80195f0:	340c      	adds	r4, #12
 80195f2:	dc1b      	bgt.n	801962c <__aeabi_dmul+0x134>
 80195f4:	f104 0414 	add.w	r4, r4, #20
 80195f8:	f1c4 0520 	rsb	r5, r4, #32
 80195fc:	fa00 f305 	lsl.w	r3, r0, r5
 8019600:	fa20 f004 	lsr.w	r0, r0, r4
 8019604:	fa01 f205 	lsl.w	r2, r1, r5
 8019608:	ea40 0002 	orr.w	r0, r0, r2
 801960c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8019610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019618:	fa21 f604 	lsr.w	r6, r1, r4
 801961c:	eb42 0106 	adc.w	r1, r2, r6
 8019620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019624:	bf08      	it	eq
 8019626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801962a:	bd70      	pop	{r4, r5, r6, pc}
 801962c:	f1c4 040c 	rsb	r4, r4, #12
 8019630:	f1c4 0520 	rsb	r5, r4, #32
 8019634:	fa00 f304 	lsl.w	r3, r0, r4
 8019638:	fa20 f005 	lsr.w	r0, r0, r5
 801963c:	fa01 f204 	lsl.w	r2, r1, r4
 8019640:	ea40 0002 	orr.w	r0, r0, r2
 8019644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801964c:	f141 0100 	adc.w	r1, r1, #0
 8019650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019654:	bf08      	it	eq
 8019656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801965a:	bd70      	pop	{r4, r5, r6, pc}
 801965c:	f1c4 0520 	rsb	r5, r4, #32
 8019660:	fa00 f205 	lsl.w	r2, r0, r5
 8019664:	ea4e 0e02 	orr.w	lr, lr, r2
 8019668:	fa20 f304 	lsr.w	r3, r0, r4
 801966c:	fa01 f205 	lsl.w	r2, r1, r5
 8019670:	ea43 0302 	orr.w	r3, r3, r2
 8019674:	fa21 f004 	lsr.w	r0, r1, r4
 8019678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801967c:	fa21 f204 	lsr.w	r2, r1, r4
 8019680:	ea20 0002 	bic.w	r0, r0, r2
 8019684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8019688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801968c:	bf08      	it	eq
 801968e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	f094 0f00 	teq	r4, #0
 8019698:	d10f      	bne.n	80196ba <__aeabi_dmul+0x1c2>
 801969a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801969e:	0040      	lsls	r0, r0, #1
 80196a0:	eb41 0101 	adc.w	r1, r1, r1
 80196a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80196a8:	bf08      	it	eq
 80196aa:	3c01      	subeq	r4, #1
 80196ac:	d0f7      	beq.n	801969e <__aeabi_dmul+0x1a6>
 80196ae:	ea41 0106 	orr.w	r1, r1, r6
 80196b2:	f095 0f00 	teq	r5, #0
 80196b6:	bf18      	it	ne
 80196b8:	4770      	bxne	lr
 80196ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80196be:	0052      	lsls	r2, r2, #1
 80196c0:	eb43 0303 	adc.w	r3, r3, r3
 80196c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80196c8:	bf08      	it	eq
 80196ca:	3d01      	subeq	r5, #1
 80196cc:	d0f7      	beq.n	80196be <__aeabi_dmul+0x1c6>
 80196ce:	ea43 0306 	orr.w	r3, r3, r6
 80196d2:	4770      	bx	lr
 80196d4:	ea94 0f0c 	teq	r4, ip
 80196d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80196dc:	bf18      	it	ne
 80196de:	ea95 0f0c 	teqne	r5, ip
 80196e2:	d00c      	beq.n	80196fe <__aeabi_dmul+0x206>
 80196e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80196e8:	bf18      	it	ne
 80196ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80196ee:	d1d1      	bne.n	8019694 <__aeabi_dmul+0x19c>
 80196f0:	ea81 0103 	eor.w	r1, r1, r3
 80196f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80196f8:	f04f 0000 	mov.w	r0, #0
 80196fc:	bd70      	pop	{r4, r5, r6, pc}
 80196fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019702:	bf06      	itte	eq
 8019704:	4610      	moveq	r0, r2
 8019706:	4619      	moveq	r1, r3
 8019708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801970c:	d019      	beq.n	8019742 <__aeabi_dmul+0x24a>
 801970e:	ea94 0f0c 	teq	r4, ip
 8019712:	d102      	bne.n	801971a <__aeabi_dmul+0x222>
 8019714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019718:	d113      	bne.n	8019742 <__aeabi_dmul+0x24a>
 801971a:	ea95 0f0c 	teq	r5, ip
 801971e:	d105      	bne.n	801972c <__aeabi_dmul+0x234>
 8019720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019724:	bf1c      	itt	ne
 8019726:	4610      	movne	r0, r2
 8019728:	4619      	movne	r1, r3
 801972a:	d10a      	bne.n	8019742 <__aeabi_dmul+0x24a>
 801972c:	ea81 0103 	eor.w	r1, r1, r3
 8019730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801973c:	f04f 0000 	mov.w	r0, #0
 8019740:	bd70      	pop	{r4, r5, r6, pc}
 8019742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801974a:	bd70      	pop	{r4, r5, r6, pc}

0801974c <__aeabi_ddiv>:
 801974c:	b570      	push	{r4, r5, r6, lr}
 801974e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801975a:	bf1d      	ittte	ne
 801975c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019760:	ea94 0f0c 	teqne	r4, ip
 8019764:	ea95 0f0c 	teqne	r5, ip
 8019768:	f000 f8a7 	bleq	80198ba <__aeabi_ddiv+0x16e>
 801976c:	eba4 0405 	sub.w	r4, r4, r5
 8019770:	ea81 0e03 	eor.w	lr, r1, r3
 8019774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801977c:	f000 8088 	beq.w	8019890 <__aeabi_ddiv+0x144>
 8019780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801978c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801979c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80197a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80197a4:	429d      	cmp	r5, r3
 80197a6:	bf08      	it	eq
 80197a8:	4296      	cmpeq	r6, r2
 80197aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80197ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80197b2:	d202      	bcs.n	80197ba <__aeabi_ddiv+0x6e>
 80197b4:	085b      	lsrs	r3, r3, #1
 80197b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80197ba:	1ab6      	subs	r6, r6, r2
 80197bc:	eb65 0503 	sbc.w	r5, r5, r3
 80197c0:	085b      	lsrs	r3, r3, #1
 80197c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80197c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80197ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80197ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80197d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80197d6:	bf22      	ittt	cs
 80197d8:	1ab6      	subcs	r6, r6, r2
 80197da:	4675      	movcs	r5, lr
 80197dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80197e0:	085b      	lsrs	r3, r3, #1
 80197e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80197e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80197ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80197ee:	bf22      	ittt	cs
 80197f0:	1ab6      	subcs	r6, r6, r2
 80197f2:	4675      	movcs	r5, lr
 80197f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80197f8:	085b      	lsrs	r3, r3, #1
 80197fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80197fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8019802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019806:	bf22      	ittt	cs
 8019808:	1ab6      	subcs	r6, r6, r2
 801980a:	4675      	movcs	r5, lr
 801980c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019810:	085b      	lsrs	r3, r3, #1
 8019812:	ea4f 0232 	mov.w	r2, r2, rrx
 8019816:	ebb6 0e02 	subs.w	lr, r6, r2
 801981a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801981e:	bf22      	ittt	cs
 8019820:	1ab6      	subcs	r6, r6, r2
 8019822:	4675      	movcs	r5, lr
 8019824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019828:	ea55 0e06 	orrs.w	lr, r5, r6
 801982c:	d018      	beq.n	8019860 <__aeabi_ddiv+0x114>
 801982e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801983a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801983e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801984a:	d1c0      	bne.n	80197ce <__aeabi_ddiv+0x82>
 801984c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019850:	d10b      	bne.n	801986a <__aeabi_ddiv+0x11e>
 8019852:	ea41 0100 	orr.w	r1, r1, r0
 8019856:	f04f 0000 	mov.w	r0, #0
 801985a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801985e:	e7b6      	b.n	80197ce <__aeabi_ddiv+0x82>
 8019860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019864:	bf04      	itt	eq
 8019866:	4301      	orreq	r1, r0
 8019868:	2000      	moveq	r0, #0
 801986a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801986e:	bf88      	it	hi
 8019870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019874:	f63f aeaf 	bhi.w	80195d6 <__aeabi_dmul+0xde>
 8019878:	ebb5 0c03 	subs.w	ip, r5, r3
 801987c:	bf04      	itt	eq
 801987e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019886:	f150 0000 	adcs.w	r0, r0, #0
 801988a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801988e:	bd70      	pop	{r4, r5, r6, pc}
 8019890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8019894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801989c:	bfc2      	ittt	gt
 801989e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80198a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80198a6:	bd70      	popgt	{r4, r5, r6, pc}
 80198a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80198ac:	f04f 0e00 	mov.w	lr, #0
 80198b0:	3c01      	subs	r4, #1
 80198b2:	e690      	b.n	80195d6 <__aeabi_dmul+0xde>
 80198b4:	ea45 0e06 	orr.w	lr, r5, r6
 80198b8:	e68d      	b.n	80195d6 <__aeabi_dmul+0xde>
 80198ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80198be:	ea94 0f0c 	teq	r4, ip
 80198c2:	bf08      	it	eq
 80198c4:	ea95 0f0c 	teqeq	r5, ip
 80198c8:	f43f af3b 	beq.w	8019742 <__aeabi_dmul+0x24a>
 80198cc:	ea94 0f0c 	teq	r4, ip
 80198d0:	d10a      	bne.n	80198e8 <__aeabi_ddiv+0x19c>
 80198d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80198d6:	f47f af34 	bne.w	8019742 <__aeabi_dmul+0x24a>
 80198da:	ea95 0f0c 	teq	r5, ip
 80198de:	f47f af25 	bne.w	801972c <__aeabi_dmul+0x234>
 80198e2:	4610      	mov	r0, r2
 80198e4:	4619      	mov	r1, r3
 80198e6:	e72c      	b.n	8019742 <__aeabi_dmul+0x24a>
 80198e8:	ea95 0f0c 	teq	r5, ip
 80198ec:	d106      	bne.n	80198fc <__aeabi_ddiv+0x1b0>
 80198ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80198f2:	f43f aefd 	beq.w	80196f0 <__aeabi_dmul+0x1f8>
 80198f6:	4610      	mov	r0, r2
 80198f8:	4619      	mov	r1, r3
 80198fa:	e722      	b.n	8019742 <__aeabi_dmul+0x24a>
 80198fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019900:	bf18      	it	ne
 8019902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019906:	f47f aec5 	bne.w	8019694 <__aeabi_dmul+0x19c>
 801990a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801990e:	f47f af0d 	bne.w	801972c <__aeabi_dmul+0x234>
 8019912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019916:	f47f aeeb 	bne.w	80196f0 <__aeabi_dmul+0x1f8>
 801991a:	e712      	b.n	8019742 <__aeabi_dmul+0x24a>

0801991c <__gedf2>:
 801991c:	f04f 3cff 	mov.w	ip, #4294967295
 8019920:	e006      	b.n	8019930 <__cmpdf2+0x4>
 8019922:	bf00      	nop

08019924 <__ledf2>:
 8019924:	f04f 0c01 	mov.w	ip, #1
 8019928:	e002      	b.n	8019930 <__cmpdf2+0x4>
 801992a:	bf00      	nop

0801992c <__cmpdf2>:
 801992c:	f04f 0c01 	mov.w	ip, #1
 8019930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801993c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019940:	bf18      	it	ne
 8019942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019946:	d01b      	beq.n	8019980 <__cmpdf2+0x54>
 8019948:	b001      	add	sp, #4
 801994a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801994e:	bf0c      	ite	eq
 8019950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019954:	ea91 0f03 	teqne	r1, r3
 8019958:	bf02      	ittt	eq
 801995a:	ea90 0f02 	teqeq	r0, r2
 801995e:	2000      	moveq	r0, #0
 8019960:	4770      	bxeq	lr
 8019962:	f110 0f00 	cmn.w	r0, #0
 8019966:	ea91 0f03 	teq	r1, r3
 801996a:	bf58      	it	pl
 801996c:	4299      	cmppl	r1, r3
 801996e:	bf08      	it	eq
 8019970:	4290      	cmpeq	r0, r2
 8019972:	bf2c      	ite	cs
 8019974:	17d8      	asrcs	r0, r3, #31
 8019976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801997a:	f040 0001 	orr.w	r0, r0, #1
 801997e:	4770      	bx	lr
 8019980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019988:	d102      	bne.n	8019990 <__cmpdf2+0x64>
 801998a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801998e:	d107      	bne.n	80199a0 <__cmpdf2+0x74>
 8019990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019998:	d1d6      	bne.n	8019948 <__cmpdf2+0x1c>
 801999a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801999e:	d0d3      	beq.n	8019948 <__cmpdf2+0x1c>
 80199a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80199a4:	4770      	bx	lr
 80199a6:	bf00      	nop

080199a8 <__aeabi_cdrcmple>:
 80199a8:	4684      	mov	ip, r0
 80199aa:	4610      	mov	r0, r2
 80199ac:	4662      	mov	r2, ip
 80199ae:	468c      	mov	ip, r1
 80199b0:	4619      	mov	r1, r3
 80199b2:	4663      	mov	r3, ip
 80199b4:	e000      	b.n	80199b8 <__aeabi_cdcmpeq>
 80199b6:	bf00      	nop

080199b8 <__aeabi_cdcmpeq>:
 80199b8:	b501      	push	{r0, lr}
 80199ba:	f7ff ffb7 	bl	801992c <__cmpdf2>
 80199be:	2800      	cmp	r0, #0
 80199c0:	bf48      	it	mi
 80199c2:	f110 0f00 	cmnmi.w	r0, #0
 80199c6:	bd01      	pop	{r0, pc}

080199c8 <__aeabi_dcmpeq>:
 80199c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80199cc:	f7ff fff4 	bl	80199b8 <__aeabi_cdcmpeq>
 80199d0:	bf0c      	ite	eq
 80199d2:	2001      	moveq	r0, #1
 80199d4:	2000      	movne	r0, #0
 80199d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80199da:	bf00      	nop

080199dc <__aeabi_dcmplt>:
 80199dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80199e0:	f7ff ffea 	bl	80199b8 <__aeabi_cdcmpeq>
 80199e4:	bf34      	ite	cc
 80199e6:	2001      	movcc	r0, #1
 80199e8:	2000      	movcs	r0, #0
 80199ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80199ee:	bf00      	nop

080199f0 <__aeabi_dcmple>:
 80199f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80199f4:	f7ff ffe0 	bl	80199b8 <__aeabi_cdcmpeq>
 80199f8:	bf94      	ite	ls
 80199fa:	2001      	movls	r0, #1
 80199fc:	2000      	movhi	r0, #0
 80199fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a02:	bf00      	nop

08019a04 <__aeabi_dcmpge>:
 8019a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a08:	f7ff ffce 	bl	80199a8 <__aeabi_cdrcmple>
 8019a0c:	bf94      	ite	ls
 8019a0e:	2001      	movls	r0, #1
 8019a10:	2000      	movhi	r0, #0
 8019a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a16:	bf00      	nop

08019a18 <__aeabi_dcmpgt>:
 8019a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a1c:	f7ff ffc4 	bl	80199a8 <__aeabi_cdrcmple>
 8019a20:	bf34      	ite	cc
 8019a22:	2001      	movcc	r0, #1
 8019a24:	2000      	movcs	r0, #0
 8019a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a2a:	bf00      	nop

08019a2c <__aeabi_dcmpun>:
 8019a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a34:	d102      	bne.n	8019a3c <__aeabi_dcmpun+0x10>
 8019a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019a3a:	d10a      	bne.n	8019a52 <__aeabi_dcmpun+0x26>
 8019a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a44:	d102      	bne.n	8019a4c <__aeabi_dcmpun+0x20>
 8019a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019a4a:	d102      	bne.n	8019a52 <__aeabi_dcmpun+0x26>
 8019a4c:	f04f 0000 	mov.w	r0, #0
 8019a50:	4770      	bx	lr
 8019a52:	f04f 0001 	mov.w	r0, #1
 8019a56:	4770      	bx	lr

08019a58 <__aeabi_d2iz>:
 8019a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019a60:	d215      	bcs.n	8019a8e <__aeabi_d2iz+0x36>
 8019a62:	d511      	bpl.n	8019a88 <__aeabi_d2iz+0x30>
 8019a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019a6c:	d912      	bls.n	8019a94 <__aeabi_d2iz+0x3c>
 8019a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8019a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8019a82:	bf18      	it	ne
 8019a84:	4240      	negne	r0, r0
 8019a86:	4770      	bx	lr
 8019a88:	f04f 0000 	mov.w	r0, #0
 8019a8c:	4770      	bx	lr
 8019a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019a92:	d105      	bne.n	8019aa0 <__aeabi_d2iz+0x48>
 8019a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8019a98:	bf08      	it	eq
 8019a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8019a9e:	4770      	bx	lr
 8019aa0:	f04f 0000 	mov.w	r0, #0
 8019aa4:	4770      	bx	lr
 8019aa6:	bf00      	nop

08019aa8 <__aeabi_d2uiz>:
 8019aa8:	004a      	lsls	r2, r1, #1
 8019aaa:	d211      	bcs.n	8019ad0 <__aeabi_d2uiz+0x28>
 8019aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019ab0:	d211      	bcs.n	8019ad6 <__aeabi_d2uiz+0x2e>
 8019ab2:	d50d      	bpl.n	8019ad0 <__aeabi_d2uiz+0x28>
 8019ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019abc:	d40e      	bmi.n	8019adc <__aeabi_d2uiz+0x34>
 8019abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019aca:	fa23 f002 	lsr.w	r0, r3, r2
 8019ace:	4770      	bx	lr
 8019ad0:	f04f 0000 	mov.w	r0, #0
 8019ad4:	4770      	bx	lr
 8019ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019ada:	d102      	bne.n	8019ae2 <__aeabi_d2uiz+0x3a>
 8019adc:	f04f 30ff 	mov.w	r0, #4294967295
 8019ae0:	4770      	bx	lr
 8019ae2:	f04f 0000 	mov.w	r0, #0
 8019ae6:	4770      	bx	lr

08019ae8 <__aeabi_d2f>:
 8019ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019af0:	bf24      	itt	cs
 8019af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8019afa:	d90d      	bls.n	8019b18 <__aeabi_d2f+0x30>
 8019afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8019b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019b10:	bf08      	it	eq
 8019b12:	f020 0001 	biceq.w	r0, r0, #1
 8019b16:	4770      	bx	lr
 8019b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8019b1c:	d121      	bne.n	8019b62 <__aeabi_d2f+0x7a>
 8019b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019b22:	bfbc      	itt	lt
 8019b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019b28:	4770      	bxlt	lr
 8019b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019b32:	f1c2 0218 	rsb	r2, r2, #24
 8019b36:	f1c2 0c20 	rsb	ip, r2, #32
 8019b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8019b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8019b42:	bf18      	it	ne
 8019b44:	f040 0001 	orrne.w	r0, r0, #1
 8019b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019b54:	ea40 000c 	orr.w	r0, r0, ip
 8019b58:	fa23 f302 	lsr.w	r3, r3, r2
 8019b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019b60:	e7cc      	b.n	8019afc <__aeabi_d2f+0x14>
 8019b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019b66:	d107      	bne.n	8019b78 <__aeabi_d2f+0x90>
 8019b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8019b6c:	bf1e      	ittt	ne
 8019b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019b76:	4770      	bxne	lr
 8019b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8019b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019b84:	4770      	bx	lr
 8019b86:	bf00      	nop

08019b88 <__aeabi_d2lz>:
 8019b88:	b538      	push	{r3, r4, r5, lr}
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	4604      	mov	r4, r0
 8019b90:	460d      	mov	r5, r1
 8019b92:	f7ff ff23 	bl	80199dc <__aeabi_dcmplt>
 8019b96:	b928      	cbnz	r0, 8019ba4 <__aeabi_d2lz+0x1c>
 8019b98:	4620      	mov	r0, r4
 8019b9a:	4629      	mov	r1, r5
 8019b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ba0:	f000 b80a 	b.w	8019bb8 <__aeabi_d2ulz>
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8019baa:	f000 f805 	bl	8019bb8 <__aeabi_d2ulz>
 8019bae:	4240      	negs	r0, r0
 8019bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019bb4:	bd38      	pop	{r3, r4, r5, pc}
 8019bb6:	bf00      	nop

08019bb8 <__aeabi_d2ulz>:
 8019bb8:	b5d0      	push	{r4, r6, r7, lr}
 8019bba:	4b0c      	ldr	r3, [pc, #48]	; (8019bec <__aeabi_d2ulz+0x34>)
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	4606      	mov	r6, r0
 8019bc0:	460f      	mov	r7, r1
 8019bc2:	f7ff fc99 	bl	80194f8 <__aeabi_dmul>
 8019bc6:	f7ff ff6f 	bl	8019aa8 <__aeabi_d2uiz>
 8019bca:	4604      	mov	r4, r0
 8019bcc:	f7ff fc1a 	bl	8019404 <__aeabi_ui2d>
 8019bd0:	4b07      	ldr	r3, [pc, #28]	; (8019bf0 <__aeabi_d2ulz+0x38>)
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	f7ff fc90 	bl	80194f8 <__aeabi_dmul>
 8019bd8:	4602      	mov	r2, r0
 8019bda:	460b      	mov	r3, r1
 8019bdc:	4630      	mov	r0, r6
 8019bde:	4639      	mov	r1, r7
 8019be0:	f7ff fad2 	bl	8019188 <__aeabi_dsub>
 8019be4:	f7ff ff60 	bl	8019aa8 <__aeabi_d2uiz>
 8019be8:	4621      	mov	r1, r4
 8019bea:	bdd0      	pop	{r4, r6, r7, pc}
 8019bec:	3df00000 	.word	0x3df00000
 8019bf0:	41f00000 	.word	0x41f00000

08019bf4 <__aeabi_uldivmod>:
 8019bf4:	b953      	cbnz	r3, 8019c0c <__aeabi_uldivmod+0x18>
 8019bf6:	b94a      	cbnz	r2, 8019c0c <__aeabi_uldivmod+0x18>
 8019bf8:	2900      	cmp	r1, #0
 8019bfa:	bf08      	it	eq
 8019bfc:	2800      	cmpeq	r0, #0
 8019bfe:	bf1c      	itt	ne
 8019c00:	f04f 31ff 	movne.w	r1, #4294967295
 8019c04:	f04f 30ff 	movne.w	r0, #4294967295
 8019c08:	f000 b974 	b.w	8019ef4 <__aeabi_idiv0>
 8019c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019c14:	f000 f806 	bl	8019c24 <__udivmoddi4>
 8019c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019c20:	b004      	add	sp, #16
 8019c22:	4770      	bx	lr

08019c24 <__udivmoddi4>:
 8019c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c28:	9d08      	ldr	r5, [sp, #32]
 8019c2a:	4604      	mov	r4, r0
 8019c2c:	468e      	mov	lr, r1
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d14d      	bne.n	8019cce <__udivmoddi4+0xaa>
 8019c32:	428a      	cmp	r2, r1
 8019c34:	4694      	mov	ip, r2
 8019c36:	d969      	bls.n	8019d0c <__udivmoddi4+0xe8>
 8019c38:	fab2 f282 	clz	r2, r2
 8019c3c:	b152      	cbz	r2, 8019c54 <__udivmoddi4+0x30>
 8019c3e:	fa01 f302 	lsl.w	r3, r1, r2
 8019c42:	f1c2 0120 	rsb	r1, r2, #32
 8019c46:	fa20 f101 	lsr.w	r1, r0, r1
 8019c4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8019c4e:	ea41 0e03 	orr.w	lr, r1, r3
 8019c52:	4094      	lsls	r4, r2
 8019c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8019c58:	0c21      	lsrs	r1, r4, #16
 8019c5a:	fbbe f6f8 	udiv	r6, lr, r8
 8019c5e:	fa1f f78c 	uxth.w	r7, ip
 8019c62:	fb08 e316 	mls	r3, r8, r6, lr
 8019c66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019c6a:	fb06 f107 	mul.w	r1, r6, r7
 8019c6e:	4299      	cmp	r1, r3
 8019c70:	d90a      	bls.n	8019c88 <__udivmoddi4+0x64>
 8019c72:	eb1c 0303 	adds.w	r3, ip, r3
 8019c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8019c7a:	f080 811f 	bcs.w	8019ebc <__udivmoddi4+0x298>
 8019c7e:	4299      	cmp	r1, r3
 8019c80:	f240 811c 	bls.w	8019ebc <__udivmoddi4+0x298>
 8019c84:	3e02      	subs	r6, #2
 8019c86:	4463      	add	r3, ip
 8019c88:	1a5b      	subs	r3, r3, r1
 8019c8a:	b2a4      	uxth	r4, r4
 8019c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8019c90:	fb08 3310 	mls	r3, r8, r0, r3
 8019c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8019c98:	fb00 f707 	mul.w	r7, r0, r7
 8019c9c:	42a7      	cmp	r7, r4
 8019c9e:	d90a      	bls.n	8019cb6 <__udivmoddi4+0x92>
 8019ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8019ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8019ca8:	f080 810a 	bcs.w	8019ec0 <__udivmoddi4+0x29c>
 8019cac:	42a7      	cmp	r7, r4
 8019cae:	f240 8107 	bls.w	8019ec0 <__udivmoddi4+0x29c>
 8019cb2:	4464      	add	r4, ip
 8019cb4:	3802      	subs	r0, #2
 8019cb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8019cba:	1be4      	subs	r4, r4, r7
 8019cbc:	2600      	movs	r6, #0
 8019cbe:	b11d      	cbz	r5, 8019cc8 <__udivmoddi4+0xa4>
 8019cc0:	40d4      	lsrs	r4, r2
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8019cc8:	4631      	mov	r1, r6
 8019cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cce:	428b      	cmp	r3, r1
 8019cd0:	d909      	bls.n	8019ce6 <__udivmoddi4+0xc2>
 8019cd2:	2d00      	cmp	r5, #0
 8019cd4:	f000 80ef 	beq.w	8019eb6 <__udivmoddi4+0x292>
 8019cd8:	2600      	movs	r6, #0
 8019cda:	e9c5 0100 	strd	r0, r1, [r5]
 8019cde:	4630      	mov	r0, r6
 8019ce0:	4631      	mov	r1, r6
 8019ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ce6:	fab3 f683 	clz	r6, r3
 8019cea:	2e00      	cmp	r6, #0
 8019cec:	d14a      	bne.n	8019d84 <__udivmoddi4+0x160>
 8019cee:	428b      	cmp	r3, r1
 8019cf0:	d302      	bcc.n	8019cf8 <__udivmoddi4+0xd4>
 8019cf2:	4282      	cmp	r2, r0
 8019cf4:	f200 80f9 	bhi.w	8019eea <__udivmoddi4+0x2c6>
 8019cf8:	1a84      	subs	r4, r0, r2
 8019cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8019cfe:	2001      	movs	r0, #1
 8019d00:	469e      	mov	lr, r3
 8019d02:	2d00      	cmp	r5, #0
 8019d04:	d0e0      	beq.n	8019cc8 <__udivmoddi4+0xa4>
 8019d06:	e9c5 4e00 	strd	r4, lr, [r5]
 8019d0a:	e7dd      	b.n	8019cc8 <__udivmoddi4+0xa4>
 8019d0c:	b902      	cbnz	r2, 8019d10 <__udivmoddi4+0xec>
 8019d0e:	deff      	udf	#255	; 0xff
 8019d10:	fab2 f282 	clz	r2, r2
 8019d14:	2a00      	cmp	r2, #0
 8019d16:	f040 8092 	bne.w	8019e3e <__udivmoddi4+0x21a>
 8019d1a:	eba1 010c 	sub.w	r1, r1, ip
 8019d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019d22:	fa1f fe8c 	uxth.w	lr, ip
 8019d26:	2601      	movs	r6, #1
 8019d28:	0c20      	lsrs	r0, r4, #16
 8019d2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8019d2e:	fb07 1113 	mls	r1, r7, r3, r1
 8019d32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019d36:	fb0e f003 	mul.w	r0, lr, r3
 8019d3a:	4288      	cmp	r0, r1
 8019d3c:	d908      	bls.n	8019d50 <__udivmoddi4+0x12c>
 8019d3e:	eb1c 0101 	adds.w	r1, ip, r1
 8019d42:	f103 38ff 	add.w	r8, r3, #4294967295
 8019d46:	d202      	bcs.n	8019d4e <__udivmoddi4+0x12a>
 8019d48:	4288      	cmp	r0, r1
 8019d4a:	f200 80cb 	bhi.w	8019ee4 <__udivmoddi4+0x2c0>
 8019d4e:	4643      	mov	r3, r8
 8019d50:	1a09      	subs	r1, r1, r0
 8019d52:	b2a4      	uxth	r4, r4
 8019d54:	fbb1 f0f7 	udiv	r0, r1, r7
 8019d58:	fb07 1110 	mls	r1, r7, r0, r1
 8019d5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019d60:	fb0e fe00 	mul.w	lr, lr, r0
 8019d64:	45a6      	cmp	lr, r4
 8019d66:	d908      	bls.n	8019d7a <__udivmoddi4+0x156>
 8019d68:	eb1c 0404 	adds.w	r4, ip, r4
 8019d6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8019d70:	d202      	bcs.n	8019d78 <__udivmoddi4+0x154>
 8019d72:	45a6      	cmp	lr, r4
 8019d74:	f200 80bb 	bhi.w	8019eee <__udivmoddi4+0x2ca>
 8019d78:	4608      	mov	r0, r1
 8019d7a:	eba4 040e 	sub.w	r4, r4, lr
 8019d7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8019d82:	e79c      	b.n	8019cbe <__udivmoddi4+0x9a>
 8019d84:	f1c6 0720 	rsb	r7, r6, #32
 8019d88:	40b3      	lsls	r3, r6
 8019d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8019d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8019d92:	fa20 f407 	lsr.w	r4, r0, r7
 8019d96:	fa01 f306 	lsl.w	r3, r1, r6
 8019d9a:	431c      	orrs	r4, r3
 8019d9c:	40f9      	lsrs	r1, r7
 8019d9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8019da2:	fa00 f306 	lsl.w	r3, r0, r6
 8019da6:	fbb1 f8f9 	udiv	r8, r1, r9
 8019daa:	0c20      	lsrs	r0, r4, #16
 8019dac:	fa1f fe8c 	uxth.w	lr, ip
 8019db0:	fb09 1118 	mls	r1, r9, r8, r1
 8019db4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019db8:	fb08 f00e 	mul.w	r0, r8, lr
 8019dbc:	4288      	cmp	r0, r1
 8019dbe:	fa02 f206 	lsl.w	r2, r2, r6
 8019dc2:	d90b      	bls.n	8019ddc <__udivmoddi4+0x1b8>
 8019dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8019dc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8019dcc:	f080 8088 	bcs.w	8019ee0 <__udivmoddi4+0x2bc>
 8019dd0:	4288      	cmp	r0, r1
 8019dd2:	f240 8085 	bls.w	8019ee0 <__udivmoddi4+0x2bc>
 8019dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8019dda:	4461      	add	r1, ip
 8019ddc:	1a09      	subs	r1, r1, r0
 8019dde:	b2a4      	uxth	r4, r4
 8019de0:	fbb1 f0f9 	udiv	r0, r1, r9
 8019de4:	fb09 1110 	mls	r1, r9, r0, r1
 8019de8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8019dec:	fb00 fe0e 	mul.w	lr, r0, lr
 8019df0:	458e      	cmp	lr, r1
 8019df2:	d908      	bls.n	8019e06 <__udivmoddi4+0x1e2>
 8019df4:	eb1c 0101 	adds.w	r1, ip, r1
 8019df8:	f100 34ff 	add.w	r4, r0, #4294967295
 8019dfc:	d26c      	bcs.n	8019ed8 <__udivmoddi4+0x2b4>
 8019dfe:	458e      	cmp	lr, r1
 8019e00:	d96a      	bls.n	8019ed8 <__udivmoddi4+0x2b4>
 8019e02:	3802      	subs	r0, #2
 8019e04:	4461      	add	r1, ip
 8019e06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8019e0a:	fba0 9402 	umull	r9, r4, r0, r2
 8019e0e:	eba1 010e 	sub.w	r1, r1, lr
 8019e12:	42a1      	cmp	r1, r4
 8019e14:	46c8      	mov	r8, r9
 8019e16:	46a6      	mov	lr, r4
 8019e18:	d356      	bcc.n	8019ec8 <__udivmoddi4+0x2a4>
 8019e1a:	d053      	beq.n	8019ec4 <__udivmoddi4+0x2a0>
 8019e1c:	b15d      	cbz	r5, 8019e36 <__udivmoddi4+0x212>
 8019e1e:	ebb3 0208 	subs.w	r2, r3, r8
 8019e22:	eb61 010e 	sbc.w	r1, r1, lr
 8019e26:	fa01 f707 	lsl.w	r7, r1, r7
 8019e2a:	fa22 f306 	lsr.w	r3, r2, r6
 8019e2e:	40f1      	lsrs	r1, r6
 8019e30:	431f      	orrs	r7, r3
 8019e32:	e9c5 7100 	strd	r7, r1, [r5]
 8019e36:	2600      	movs	r6, #0
 8019e38:	4631      	mov	r1, r6
 8019e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e3e:	f1c2 0320 	rsb	r3, r2, #32
 8019e42:	40d8      	lsrs	r0, r3
 8019e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8019e48:	fa21 f303 	lsr.w	r3, r1, r3
 8019e4c:	4091      	lsls	r1, r2
 8019e4e:	4301      	orrs	r1, r0
 8019e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019e54:	fa1f fe8c 	uxth.w	lr, ip
 8019e58:	fbb3 f0f7 	udiv	r0, r3, r7
 8019e5c:	fb07 3610 	mls	r6, r7, r0, r3
 8019e60:	0c0b      	lsrs	r3, r1, #16
 8019e62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019e66:	fb00 f60e 	mul.w	r6, r0, lr
 8019e6a:	429e      	cmp	r6, r3
 8019e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8019e70:	d908      	bls.n	8019e84 <__udivmoddi4+0x260>
 8019e72:	eb1c 0303 	adds.w	r3, ip, r3
 8019e76:	f100 38ff 	add.w	r8, r0, #4294967295
 8019e7a:	d22f      	bcs.n	8019edc <__udivmoddi4+0x2b8>
 8019e7c:	429e      	cmp	r6, r3
 8019e7e:	d92d      	bls.n	8019edc <__udivmoddi4+0x2b8>
 8019e80:	3802      	subs	r0, #2
 8019e82:	4463      	add	r3, ip
 8019e84:	1b9b      	subs	r3, r3, r6
 8019e86:	b289      	uxth	r1, r1
 8019e88:	fbb3 f6f7 	udiv	r6, r3, r7
 8019e8c:	fb07 3316 	mls	r3, r7, r6, r3
 8019e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019e94:	fb06 f30e 	mul.w	r3, r6, lr
 8019e98:	428b      	cmp	r3, r1
 8019e9a:	d908      	bls.n	8019eae <__udivmoddi4+0x28a>
 8019e9c:	eb1c 0101 	adds.w	r1, ip, r1
 8019ea0:	f106 38ff 	add.w	r8, r6, #4294967295
 8019ea4:	d216      	bcs.n	8019ed4 <__udivmoddi4+0x2b0>
 8019ea6:	428b      	cmp	r3, r1
 8019ea8:	d914      	bls.n	8019ed4 <__udivmoddi4+0x2b0>
 8019eaa:	3e02      	subs	r6, #2
 8019eac:	4461      	add	r1, ip
 8019eae:	1ac9      	subs	r1, r1, r3
 8019eb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8019eb4:	e738      	b.n	8019d28 <__udivmoddi4+0x104>
 8019eb6:	462e      	mov	r6, r5
 8019eb8:	4628      	mov	r0, r5
 8019eba:	e705      	b.n	8019cc8 <__udivmoddi4+0xa4>
 8019ebc:	4606      	mov	r6, r0
 8019ebe:	e6e3      	b.n	8019c88 <__udivmoddi4+0x64>
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	e6f8      	b.n	8019cb6 <__udivmoddi4+0x92>
 8019ec4:	454b      	cmp	r3, r9
 8019ec6:	d2a9      	bcs.n	8019e1c <__udivmoddi4+0x1f8>
 8019ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8019ecc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8019ed0:	3801      	subs	r0, #1
 8019ed2:	e7a3      	b.n	8019e1c <__udivmoddi4+0x1f8>
 8019ed4:	4646      	mov	r6, r8
 8019ed6:	e7ea      	b.n	8019eae <__udivmoddi4+0x28a>
 8019ed8:	4620      	mov	r0, r4
 8019eda:	e794      	b.n	8019e06 <__udivmoddi4+0x1e2>
 8019edc:	4640      	mov	r0, r8
 8019ede:	e7d1      	b.n	8019e84 <__udivmoddi4+0x260>
 8019ee0:	46d0      	mov	r8, sl
 8019ee2:	e77b      	b.n	8019ddc <__udivmoddi4+0x1b8>
 8019ee4:	3b02      	subs	r3, #2
 8019ee6:	4461      	add	r1, ip
 8019ee8:	e732      	b.n	8019d50 <__udivmoddi4+0x12c>
 8019eea:	4630      	mov	r0, r6
 8019eec:	e709      	b.n	8019d02 <__udivmoddi4+0xde>
 8019eee:	4464      	add	r4, ip
 8019ef0:	3802      	subs	r0, #2
 8019ef2:	e742      	b.n	8019d7a <__udivmoddi4+0x156>

08019ef4 <__aeabi_idiv0>:
 8019ef4:	4770      	bx	lr
 8019ef6:	bf00      	nop

08019ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8019efc:	480d      	ldr	r0, [pc, #52]	; (8019f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8019efe:	490e      	ldr	r1, [pc, #56]	; (8019f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019f00:	4a0e      	ldr	r2, [pc, #56]	; (8019f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019f04:	e002      	b.n	8019f0c <LoopCopyDataInit>

08019f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019f0a:	3304      	adds	r3, #4

08019f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019f10:	d3f9      	bcc.n	8019f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019f12:	4a0b      	ldr	r2, [pc, #44]	; (8019f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019f14:	4c0b      	ldr	r4, [pc, #44]	; (8019f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019f18:	e001      	b.n	8019f1e <LoopFillZerobss>

08019f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019f1c:	3204      	adds	r2, #4

08019f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019f20:	d3fb      	bcc.n	8019f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019f22:	f7eb ffe5 	bl	8005ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019f26:	f000 f81b 	bl	8019f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019f2a:	f7e7 fd15 	bl	8001958 <main>
  bx  lr    
 8019f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019f38:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8019f3c:	08052d90 	.word	0x08052d90
  ldr r2, =_sbss
 8019f40:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019f44:	20000a0c 	.word	0x20000a0c

08019f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019f48:	e7fe      	b.n	8019f48 <ADC_IRQHandler>

08019f4a <atoi>:
 8019f4a:	220a      	movs	r2, #10
 8019f4c:	2100      	movs	r1, #0
 8019f4e:	f001 bd7f 	b.w	801ba50 <strtol>
	...

08019f54 <__errno>:
 8019f54:	4b01      	ldr	r3, [pc, #4]	; (8019f5c <__errno+0x8>)
 8019f56:	6818      	ldr	r0, [r3, #0]
 8019f58:	4770      	bx	lr
 8019f5a:	bf00      	nop
 8019f5c:	20000064 	.word	0x20000064

08019f60 <__libc_init_array>:
 8019f60:	b570      	push	{r4, r5, r6, lr}
 8019f62:	4d0d      	ldr	r5, [pc, #52]	; (8019f98 <__libc_init_array+0x38>)
 8019f64:	4c0d      	ldr	r4, [pc, #52]	; (8019f9c <__libc_init_array+0x3c>)
 8019f66:	1b64      	subs	r4, r4, r5
 8019f68:	10a4      	asrs	r4, r4, #2
 8019f6a:	2600      	movs	r6, #0
 8019f6c:	42a6      	cmp	r6, r4
 8019f6e:	d109      	bne.n	8019f84 <__libc_init_array+0x24>
 8019f70:	4d0b      	ldr	r5, [pc, #44]	; (8019fa0 <__libc_init_array+0x40>)
 8019f72:	4c0c      	ldr	r4, [pc, #48]	; (8019fa4 <__libc_init_array+0x44>)
 8019f74:	f005 fc56 	bl	801f824 <_init>
 8019f78:	1b64      	subs	r4, r4, r5
 8019f7a:	10a4      	asrs	r4, r4, #2
 8019f7c:	2600      	movs	r6, #0
 8019f7e:	42a6      	cmp	r6, r4
 8019f80:	d105      	bne.n	8019f8e <__libc_init_array+0x2e>
 8019f82:	bd70      	pop	{r4, r5, r6, pc}
 8019f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f88:	4798      	blx	r3
 8019f8a:	3601      	adds	r6, #1
 8019f8c:	e7ee      	b.n	8019f6c <__libc_init_array+0xc>
 8019f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f92:	4798      	blx	r3
 8019f94:	3601      	adds	r6, #1
 8019f96:	e7f2      	b.n	8019f7e <__libc_init_array+0x1e>
 8019f98:	08052d88 	.word	0x08052d88
 8019f9c:	08052d88 	.word	0x08052d88
 8019fa0:	08052d88 	.word	0x08052d88
 8019fa4:	08052d8c 	.word	0x08052d8c

08019fa8 <memset>:
 8019fa8:	4402      	add	r2, r0
 8019faa:	4603      	mov	r3, r0
 8019fac:	4293      	cmp	r3, r2
 8019fae:	d100      	bne.n	8019fb2 <memset+0xa>
 8019fb0:	4770      	bx	lr
 8019fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8019fb6:	e7f9      	b.n	8019fac <memset+0x4>

08019fb8 <__cvt>:
 8019fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019fbc:	ec55 4b10 	vmov	r4, r5, d0
 8019fc0:	2d00      	cmp	r5, #0
 8019fc2:	460e      	mov	r6, r1
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	462b      	mov	r3, r5
 8019fc8:	bfbb      	ittet	lt
 8019fca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019fce:	461d      	movlt	r5, r3
 8019fd0:	2300      	movge	r3, #0
 8019fd2:	232d      	movlt	r3, #45	; 0x2d
 8019fd4:	700b      	strb	r3, [r1, #0]
 8019fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019fdc:	4691      	mov	r9, r2
 8019fde:	f023 0820 	bic.w	r8, r3, #32
 8019fe2:	bfbc      	itt	lt
 8019fe4:	4622      	movlt	r2, r4
 8019fe6:	4614      	movlt	r4, r2
 8019fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019fec:	d005      	beq.n	8019ffa <__cvt+0x42>
 8019fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019ff2:	d100      	bne.n	8019ff6 <__cvt+0x3e>
 8019ff4:	3601      	adds	r6, #1
 8019ff6:	2102      	movs	r1, #2
 8019ff8:	e000      	b.n	8019ffc <__cvt+0x44>
 8019ffa:	2103      	movs	r1, #3
 8019ffc:	ab03      	add	r3, sp, #12
 8019ffe:	9301      	str	r3, [sp, #4]
 801a000:	ab02      	add	r3, sp, #8
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	ec45 4b10 	vmov	d0, r4, r5
 801a008:	4653      	mov	r3, sl
 801a00a:	4632      	mov	r2, r6
 801a00c:	f001 fdb8 	bl	801bb80 <_dtoa_r>
 801a010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a014:	4607      	mov	r7, r0
 801a016:	d102      	bne.n	801a01e <__cvt+0x66>
 801a018:	f019 0f01 	tst.w	r9, #1
 801a01c:	d022      	beq.n	801a064 <__cvt+0xac>
 801a01e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a022:	eb07 0906 	add.w	r9, r7, r6
 801a026:	d110      	bne.n	801a04a <__cvt+0x92>
 801a028:	783b      	ldrb	r3, [r7, #0]
 801a02a:	2b30      	cmp	r3, #48	; 0x30
 801a02c:	d10a      	bne.n	801a044 <__cvt+0x8c>
 801a02e:	2200      	movs	r2, #0
 801a030:	2300      	movs	r3, #0
 801a032:	4620      	mov	r0, r4
 801a034:	4629      	mov	r1, r5
 801a036:	f7ff fcc7 	bl	80199c8 <__aeabi_dcmpeq>
 801a03a:	b918      	cbnz	r0, 801a044 <__cvt+0x8c>
 801a03c:	f1c6 0601 	rsb	r6, r6, #1
 801a040:	f8ca 6000 	str.w	r6, [sl]
 801a044:	f8da 3000 	ldr.w	r3, [sl]
 801a048:	4499      	add	r9, r3
 801a04a:	2200      	movs	r2, #0
 801a04c:	2300      	movs	r3, #0
 801a04e:	4620      	mov	r0, r4
 801a050:	4629      	mov	r1, r5
 801a052:	f7ff fcb9 	bl	80199c8 <__aeabi_dcmpeq>
 801a056:	b108      	cbz	r0, 801a05c <__cvt+0xa4>
 801a058:	f8cd 900c 	str.w	r9, [sp, #12]
 801a05c:	2230      	movs	r2, #48	; 0x30
 801a05e:	9b03      	ldr	r3, [sp, #12]
 801a060:	454b      	cmp	r3, r9
 801a062:	d307      	bcc.n	801a074 <__cvt+0xbc>
 801a064:	9b03      	ldr	r3, [sp, #12]
 801a066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a068:	1bdb      	subs	r3, r3, r7
 801a06a:	4638      	mov	r0, r7
 801a06c:	6013      	str	r3, [r2, #0]
 801a06e:	b004      	add	sp, #16
 801a070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a074:	1c59      	adds	r1, r3, #1
 801a076:	9103      	str	r1, [sp, #12]
 801a078:	701a      	strb	r2, [r3, #0]
 801a07a:	e7f0      	b.n	801a05e <__cvt+0xa6>

0801a07c <__exponent>:
 801a07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a07e:	4603      	mov	r3, r0
 801a080:	2900      	cmp	r1, #0
 801a082:	bfb8      	it	lt
 801a084:	4249      	neglt	r1, r1
 801a086:	f803 2b02 	strb.w	r2, [r3], #2
 801a08a:	bfb4      	ite	lt
 801a08c:	222d      	movlt	r2, #45	; 0x2d
 801a08e:	222b      	movge	r2, #43	; 0x2b
 801a090:	2909      	cmp	r1, #9
 801a092:	7042      	strb	r2, [r0, #1]
 801a094:	dd2a      	ble.n	801a0ec <__exponent+0x70>
 801a096:	f10d 0407 	add.w	r4, sp, #7
 801a09a:	46a4      	mov	ip, r4
 801a09c:	270a      	movs	r7, #10
 801a09e:	46a6      	mov	lr, r4
 801a0a0:	460a      	mov	r2, r1
 801a0a2:	fb91 f6f7 	sdiv	r6, r1, r7
 801a0a6:	fb07 1516 	mls	r5, r7, r6, r1
 801a0aa:	3530      	adds	r5, #48	; 0x30
 801a0ac:	2a63      	cmp	r2, #99	; 0x63
 801a0ae:	f104 34ff 	add.w	r4, r4, #4294967295
 801a0b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a0b6:	4631      	mov	r1, r6
 801a0b8:	dcf1      	bgt.n	801a09e <__exponent+0x22>
 801a0ba:	3130      	adds	r1, #48	; 0x30
 801a0bc:	f1ae 0502 	sub.w	r5, lr, #2
 801a0c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a0c4:	1c44      	adds	r4, r0, #1
 801a0c6:	4629      	mov	r1, r5
 801a0c8:	4561      	cmp	r1, ip
 801a0ca:	d30a      	bcc.n	801a0e2 <__exponent+0x66>
 801a0cc:	f10d 0209 	add.w	r2, sp, #9
 801a0d0:	eba2 020e 	sub.w	r2, r2, lr
 801a0d4:	4565      	cmp	r5, ip
 801a0d6:	bf88      	it	hi
 801a0d8:	2200      	movhi	r2, #0
 801a0da:	4413      	add	r3, r2
 801a0dc:	1a18      	subs	r0, r3, r0
 801a0de:	b003      	add	sp, #12
 801a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a0ea:	e7ed      	b.n	801a0c8 <__exponent+0x4c>
 801a0ec:	2330      	movs	r3, #48	; 0x30
 801a0ee:	3130      	adds	r1, #48	; 0x30
 801a0f0:	7083      	strb	r3, [r0, #2]
 801a0f2:	70c1      	strb	r1, [r0, #3]
 801a0f4:	1d03      	adds	r3, r0, #4
 801a0f6:	e7f1      	b.n	801a0dc <__exponent+0x60>

0801a0f8 <_printf_float>:
 801a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0fc:	ed2d 8b02 	vpush	{d8}
 801a100:	b08d      	sub	sp, #52	; 0x34
 801a102:	460c      	mov	r4, r1
 801a104:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a108:	4616      	mov	r6, r2
 801a10a:	461f      	mov	r7, r3
 801a10c:	4605      	mov	r5, r0
 801a10e:	f002 fe95 	bl	801ce3c <_localeconv_r>
 801a112:	f8d0 a000 	ldr.w	sl, [r0]
 801a116:	4650      	mov	r0, sl
 801a118:	f7fe ffd4 	bl	80190c4 <strlen>
 801a11c:	2300      	movs	r3, #0
 801a11e:	930a      	str	r3, [sp, #40]	; 0x28
 801a120:	6823      	ldr	r3, [r4, #0]
 801a122:	9305      	str	r3, [sp, #20]
 801a124:	f8d8 3000 	ldr.w	r3, [r8]
 801a128:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a12c:	3307      	adds	r3, #7
 801a12e:	f023 0307 	bic.w	r3, r3, #7
 801a132:	f103 0208 	add.w	r2, r3, #8
 801a136:	f8c8 2000 	str.w	r2, [r8]
 801a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a13e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a142:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a14a:	9307      	str	r3, [sp, #28]
 801a14c:	f8cd 8018 	str.w	r8, [sp, #24]
 801a150:	ee08 0a10 	vmov	s16, r0
 801a154:	4b9f      	ldr	r3, [pc, #636]	; (801a3d4 <_printf_float+0x2dc>)
 801a156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a15a:	f04f 32ff 	mov.w	r2, #4294967295
 801a15e:	f7ff fc65 	bl	8019a2c <__aeabi_dcmpun>
 801a162:	bb88      	cbnz	r0, 801a1c8 <_printf_float+0xd0>
 801a164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a168:	4b9a      	ldr	r3, [pc, #616]	; (801a3d4 <_printf_float+0x2dc>)
 801a16a:	f04f 32ff 	mov.w	r2, #4294967295
 801a16e:	f7ff fc3f 	bl	80199f0 <__aeabi_dcmple>
 801a172:	bb48      	cbnz	r0, 801a1c8 <_printf_float+0xd0>
 801a174:	2200      	movs	r2, #0
 801a176:	2300      	movs	r3, #0
 801a178:	4640      	mov	r0, r8
 801a17a:	4649      	mov	r1, r9
 801a17c:	f7ff fc2e 	bl	80199dc <__aeabi_dcmplt>
 801a180:	b110      	cbz	r0, 801a188 <_printf_float+0x90>
 801a182:	232d      	movs	r3, #45	; 0x2d
 801a184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a188:	4b93      	ldr	r3, [pc, #588]	; (801a3d8 <_printf_float+0x2e0>)
 801a18a:	4894      	ldr	r0, [pc, #592]	; (801a3dc <_printf_float+0x2e4>)
 801a18c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a190:	bf94      	ite	ls
 801a192:	4698      	movls	r8, r3
 801a194:	4680      	movhi	r8, r0
 801a196:	2303      	movs	r3, #3
 801a198:	6123      	str	r3, [r4, #16]
 801a19a:	9b05      	ldr	r3, [sp, #20]
 801a19c:	f023 0204 	bic.w	r2, r3, #4
 801a1a0:	6022      	str	r2, [r4, #0]
 801a1a2:	f04f 0900 	mov.w	r9, #0
 801a1a6:	9700      	str	r7, [sp, #0]
 801a1a8:	4633      	mov	r3, r6
 801a1aa:	aa0b      	add	r2, sp, #44	; 0x2c
 801a1ac:	4621      	mov	r1, r4
 801a1ae:	4628      	mov	r0, r5
 801a1b0:	f000 f9d8 	bl	801a564 <_printf_common>
 801a1b4:	3001      	adds	r0, #1
 801a1b6:	f040 8090 	bne.w	801a2da <_printf_float+0x1e2>
 801a1ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a1be:	b00d      	add	sp, #52	; 0x34
 801a1c0:	ecbd 8b02 	vpop	{d8}
 801a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1c8:	4642      	mov	r2, r8
 801a1ca:	464b      	mov	r3, r9
 801a1cc:	4640      	mov	r0, r8
 801a1ce:	4649      	mov	r1, r9
 801a1d0:	f7ff fc2c 	bl	8019a2c <__aeabi_dcmpun>
 801a1d4:	b140      	cbz	r0, 801a1e8 <_printf_float+0xf0>
 801a1d6:	464b      	mov	r3, r9
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	bfbc      	itt	lt
 801a1dc:	232d      	movlt	r3, #45	; 0x2d
 801a1de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a1e2:	487f      	ldr	r0, [pc, #508]	; (801a3e0 <_printf_float+0x2e8>)
 801a1e4:	4b7f      	ldr	r3, [pc, #508]	; (801a3e4 <_printf_float+0x2ec>)
 801a1e6:	e7d1      	b.n	801a18c <_printf_float+0x94>
 801a1e8:	6863      	ldr	r3, [r4, #4]
 801a1ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a1ee:	9206      	str	r2, [sp, #24]
 801a1f0:	1c5a      	adds	r2, r3, #1
 801a1f2:	d13f      	bne.n	801a274 <_printf_float+0x17c>
 801a1f4:	2306      	movs	r3, #6
 801a1f6:	6063      	str	r3, [r4, #4]
 801a1f8:	9b05      	ldr	r3, [sp, #20]
 801a1fa:	6861      	ldr	r1, [r4, #4]
 801a1fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a200:	2300      	movs	r3, #0
 801a202:	9303      	str	r3, [sp, #12]
 801a204:	ab0a      	add	r3, sp, #40	; 0x28
 801a206:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a20a:	ab09      	add	r3, sp, #36	; 0x24
 801a20c:	ec49 8b10 	vmov	d0, r8, r9
 801a210:	9300      	str	r3, [sp, #0]
 801a212:	6022      	str	r2, [r4, #0]
 801a214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a218:	4628      	mov	r0, r5
 801a21a:	f7ff fecd 	bl	8019fb8 <__cvt>
 801a21e:	9b06      	ldr	r3, [sp, #24]
 801a220:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a222:	2b47      	cmp	r3, #71	; 0x47
 801a224:	4680      	mov	r8, r0
 801a226:	d108      	bne.n	801a23a <_printf_float+0x142>
 801a228:	1cc8      	adds	r0, r1, #3
 801a22a:	db02      	blt.n	801a232 <_printf_float+0x13a>
 801a22c:	6863      	ldr	r3, [r4, #4]
 801a22e:	4299      	cmp	r1, r3
 801a230:	dd41      	ble.n	801a2b6 <_printf_float+0x1be>
 801a232:	f1ab 0b02 	sub.w	fp, fp, #2
 801a236:	fa5f fb8b 	uxtb.w	fp, fp
 801a23a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a23e:	d820      	bhi.n	801a282 <_printf_float+0x18a>
 801a240:	3901      	subs	r1, #1
 801a242:	465a      	mov	r2, fp
 801a244:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a248:	9109      	str	r1, [sp, #36]	; 0x24
 801a24a:	f7ff ff17 	bl	801a07c <__exponent>
 801a24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a250:	1813      	adds	r3, r2, r0
 801a252:	2a01      	cmp	r2, #1
 801a254:	4681      	mov	r9, r0
 801a256:	6123      	str	r3, [r4, #16]
 801a258:	dc02      	bgt.n	801a260 <_printf_float+0x168>
 801a25a:	6822      	ldr	r2, [r4, #0]
 801a25c:	07d2      	lsls	r2, r2, #31
 801a25e:	d501      	bpl.n	801a264 <_printf_float+0x16c>
 801a260:	3301      	adds	r3, #1
 801a262:	6123      	str	r3, [r4, #16]
 801a264:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d09c      	beq.n	801a1a6 <_printf_float+0xae>
 801a26c:	232d      	movs	r3, #45	; 0x2d
 801a26e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a272:	e798      	b.n	801a1a6 <_printf_float+0xae>
 801a274:	9a06      	ldr	r2, [sp, #24]
 801a276:	2a47      	cmp	r2, #71	; 0x47
 801a278:	d1be      	bne.n	801a1f8 <_printf_float+0x100>
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d1bc      	bne.n	801a1f8 <_printf_float+0x100>
 801a27e:	2301      	movs	r3, #1
 801a280:	e7b9      	b.n	801a1f6 <_printf_float+0xfe>
 801a282:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a286:	d118      	bne.n	801a2ba <_printf_float+0x1c2>
 801a288:	2900      	cmp	r1, #0
 801a28a:	6863      	ldr	r3, [r4, #4]
 801a28c:	dd0b      	ble.n	801a2a6 <_printf_float+0x1ae>
 801a28e:	6121      	str	r1, [r4, #16]
 801a290:	b913      	cbnz	r3, 801a298 <_printf_float+0x1a0>
 801a292:	6822      	ldr	r2, [r4, #0]
 801a294:	07d0      	lsls	r0, r2, #31
 801a296:	d502      	bpl.n	801a29e <_printf_float+0x1a6>
 801a298:	3301      	adds	r3, #1
 801a29a:	440b      	add	r3, r1
 801a29c:	6123      	str	r3, [r4, #16]
 801a29e:	65a1      	str	r1, [r4, #88]	; 0x58
 801a2a0:	f04f 0900 	mov.w	r9, #0
 801a2a4:	e7de      	b.n	801a264 <_printf_float+0x16c>
 801a2a6:	b913      	cbnz	r3, 801a2ae <_printf_float+0x1b6>
 801a2a8:	6822      	ldr	r2, [r4, #0]
 801a2aa:	07d2      	lsls	r2, r2, #31
 801a2ac:	d501      	bpl.n	801a2b2 <_printf_float+0x1ba>
 801a2ae:	3302      	adds	r3, #2
 801a2b0:	e7f4      	b.n	801a29c <_printf_float+0x1a4>
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	e7f2      	b.n	801a29c <_printf_float+0x1a4>
 801a2b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2bc:	4299      	cmp	r1, r3
 801a2be:	db05      	blt.n	801a2cc <_printf_float+0x1d4>
 801a2c0:	6823      	ldr	r3, [r4, #0]
 801a2c2:	6121      	str	r1, [r4, #16]
 801a2c4:	07d8      	lsls	r0, r3, #31
 801a2c6:	d5ea      	bpl.n	801a29e <_printf_float+0x1a6>
 801a2c8:	1c4b      	adds	r3, r1, #1
 801a2ca:	e7e7      	b.n	801a29c <_printf_float+0x1a4>
 801a2cc:	2900      	cmp	r1, #0
 801a2ce:	bfd4      	ite	le
 801a2d0:	f1c1 0202 	rsble	r2, r1, #2
 801a2d4:	2201      	movgt	r2, #1
 801a2d6:	4413      	add	r3, r2
 801a2d8:	e7e0      	b.n	801a29c <_printf_float+0x1a4>
 801a2da:	6823      	ldr	r3, [r4, #0]
 801a2dc:	055a      	lsls	r2, r3, #21
 801a2de:	d407      	bmi.n	801a2f0 <_printf_float+0x1f8>
 801a2e0:	6923      	ldr	r3, [r4, #16]
 801a2e2:	4642      	mov	r2, r8
 801a2e4:	4631      	mov	r1, r6
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	47b8      	blx	r7
 801a2ea:	3001      	adds	r0, #1
 801a2ec:	d12c      	bne.n	801a348 <_printf_float+0x250>
 801a2ee:	e764      	b.n	801a1ba <_printf_float+0xc2>
 801a2f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a2f4:	f240 80e0 	bls.w	801a4b8 <_printf_float+0x3c0>
 801a2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	2300      	movs	r3, #0
 801a300:	f7ff fb62 	bl	80199c8 <__aeabi_dcmpeq>
 801a304:	2800      	cmp	r0, #0
 801a306:	d034      	beq.n	801a372 <_printf_float+0x27a>
 801a308:	4a37      	ldr	r2, [pc, #220]	; (801a3e8 <_printf_float+0x2f0>)
 801a30a:	2301      	movs	r3, #1
 801a30c:	4631      	mov	r1, r6
 801a30e:	4628      	mov	r0, r5
 801a310:	47b8      	blx	r7
 801a312:	3001      	adds	r0, #1
 801a314:	f43f af51 	beq.w	801a1ba <_printf_float+0xc2>
 801a318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a31c:	429a      	cmp	r2, r3
 801a31e:	db02      	blt.n	801a326 <_printf_float+0x22e>
 801a320:	6823      	ldr	r3, [r4, #0]
 801a322:	07d8      	lsls	r0, r3, #31
 801a324:	d510      	bpl.n	801a348 <_printf_float+0x250>
 801a326:	ee18 3a10 	vmov	r3, s16
 801a32a:	4652      	mov	r2, sl
 801a32c:	4631      	mov	r1, r6
 801a32e:	4628      	mov	r0, r5
 801a330:	47b8      	blx	r7
 801a332:	3001      	adds	r0, #1
 801a334:	f43f af41 	beq.w	801a1ba <_printf_float+0xc2>
 801a338:	f04f 0800 	mov.w	r8, #0
 801a33c:	f104 091a 	add.w	r9, r4, #26
 801a340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a342:	3b01      	subs	r3, #1
 801a344:	4543      	cmp	r3, r8
 801a346:	dc09      	bgt.n	801a35c <_printf_float+0x264>
 801a348:	6823      	ldr	r3, [r4, #0]
 801a34a:	079b      	lsls	r3, r3, #30
 801a34c:	f100 8105 	bmi.w	801a55a <_printf_float+0x462>
 801a350:	68e0      	ldr	r0, [r4, #12]
 801a352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a354:	4298      	cmp	r0, r3
 801a356:	bfb8      	it	lt
 801a358:	4618      	movlt	r0, r3
 801a35a:	e730      	b.n	801a1be <_printf_float+0xc6>
 801a35c:	2301      	movs	r3, #1
 801a35e:	464a      	mov	r2, r9
 801a360:	4631      	mov	r1, r6
 801a362:	4628      	mov	r0, r5
 801a364:	47b8      	blx	r7
 801a366:	3001      	adds	r0, #1
 801a368:	f43f af27 	beq.w	801a1ba <_printf_float+0xc2>
 801a36c:	f108 0801 	add.w	r8, r8, #1
 801a370:	e7e6      	b.n	801a340 <_printf_float+0x248>
 801a372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a374:	2b00      	cmp	r3, #0
 801a376:	dc39      	bgt.n	801a3ec <_printf_float+0x2f4>
 801a378:	4a1b      	ldr	r2, [pc, #108]	; (801a3e8 <_printf_float+0x2f0>)
 801a37a:	2301      	movs	r3, #1
 801a37c:	4631      	mov	r1, r6
 801a37e:	4628      	mov	r0, r5
 801a380:	47b8      	blx	r7
 801a382:	3001      	adds	r0, #1
 801a384:	f43f af19 	beq.w	801a1ba <_printf_float+0xc2>
 801a388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a38c:	4313      	orrs	r3, r2
 801a38e:	d102      	bne.n	801a396 <_printf_float+0x29e>
 801a390:	6823      	ldr	r3, [r4, #0]
 801a392:	07d9      	lsls	r1, r3, #31
 801a394:	d5d8      	bpl.n	801a348 <_printf_float+0x250>
 801a396:	ee18 3a10 	vmov	r3, s16
 801a39a:	4652      	mov	r2, sl
 801a39c:	4631      	mov	r1, r6
 801a39e:	4628      	mov	r0, r5
 801a3a0:	47b8      	blx	r7
 801a3a2:	3001      	adds	r0, #1
 801a3a4:	f43f af09 	beq.w	801a1ba <_printf_float+0xc2>
 801a3a8:	f04f 0900 	mov.w	r9, #0
 801a3ac:	f104 0a1a 	add.w	sl, r4, #26
 801a3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3b2:	425b      	negs	r3, r3
 801a3b4:	454b      	cmp	r3, r9
 801a3b6:	dc01      	bgt.n	801a3bc <_printf_float+0x2c4>
 801a3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3ba:	e792      	b.n	801a2e2 <_printf_float+0x1ea>
 801a3bc:	2301      	movs	r3, #1
 801a3be:	4652      	mov	r2, sl
 801a3c0:	4631      	mov	r1, r6
 801a3c2:	4628      	mov	r0, r5
 801a3c4:	47b8      	blx	r7
 801a3c6:	3001      	adds	r0, #1
 801a3c8:	f43f aef7 	beq.w	801a1ba <_printf_float+0xc2>
 801a3cc:	f109 0901 	add.w	r9, r9, #1
 801a3d0:	e7ee      	b.n	801a3b0 <_printf_float+0x2b8>
 801a3d2:	bf00      	nop
 801a3d4:	7fefffff 	.word	0x7fefffff
 801a3d8:	080528a8 	.word	0x080528a8
 801a3dc:	080528ac 	.word	0x080528ac
 801a3e0:	080528b4 	.word	0x080528b4
 801a3e4:	080528b0 	.word	0x080528b0
 801a3e8:	080528b8 	.word	0x080528b8
 801a3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	bfa8      	it	ge
 801a3f4:	461a      	movge	r2, r3
 801a3f6:	2a00      	cmp	r2, #0
 801a3f8:	4691      	mov	r9, r2
 801a3fa:	dc37      	bgt.n	801a46c <_printf_float+0x374>
 801a3fc:	f04f 0b00 	mov.w	fp, #0
 801a400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a404:	f104 021a 	add.w	r2, r4, #26
 801a408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a40a:	9305      	str	r3, [sp, #20]
 801a40c:	eba3 0309 	sub.w	r3, r3, r9
 801a410:	455b      	cmp	r3, fp
 801a412:	dc33      	bgt.n	801a47c <_printf_float+0x384>
 801a414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a418:	429a      	cmp	r2, r3
 801a41a:	db3b      	blt.n	801a494 <_printf_float+0x39c>
 801a41c:	6823      	ldr	r3, [r4, #0]
 801a41e:	07da      	lsls	r2, r3, #31
 801a420:	d438      	bmi.n	801a494 <_printf_float+0x39c>
 801a422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a424:	9a05      	ldr	r2, [sp, #20]
 801a426:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a428:	1a9a      	subs	r2, r3, r2
 801a42a:	eba3 0901 	sub.w	r9, r3, r1
 801a42e:	4591      	cmp	r9, r2
 801a430:	bfa8      	it	ge
 801a432:	4691      	movge	r9, r2
 801a434:	f1b9 0f00 	cmp.w	r9, #0
 801a438:	dc35      	bgt.n	801a4a6 <_printf_float+0x3ae>
 801a43a:	f04f 0800 	mov.w	r8, #0
 801a43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a442:	f104 0a1a 	add.w	sl, r4, #26
 801a446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a44a:	1a9b      	subs	r3, r3, r2
 801a44c:	eba3 0309 	sub.w	r3, r3, r9
 801a450:	4543      	cmp	r3, r8
 801a452:	f77f af79 	ble.w	801a348 <_printf_float+0x250>
 801a456:	2301      	movs	r3, #1
 801a458:	4652      	mov	r2, sl
 801a45a:	4631      	mov	r1, r6
 801a45c:	4628      	mov	r0, r5
 801a45e:	47b8      	blx	r7
 801a460:	3001      	adds	r0, #1
 801a462:	f43f aeaa 	beq.w	801a1ba <_printf_float+0xc2>
 801a466:	f108 0801 	add.w	r8, r8, #1
 801a46a:	e7ec      	b.n	801a446 <_printf_float+0x34e>
 801a46c:	4613      	mov	r3, r2
 801a46e:	4631      	mov	r1, r6
 801a470:	4642      	mov	r2, r8
 801a472:	4628      	mov	r0, r5
 801a474:	47b8      	blx	r7
 801a476:	3001      	adds	r0, #1
 801a478:	d1c0      	bne.n	801a3fc <_printf_float+0x304>
 801a47a:	e69e      	b.n	801a1ba <_printf_float+0xc2>
 801a47c:	2301      	movs	r3, #1
 801a47e:	4631      	mov	r1, r6
 801a480:	4628      	mov	r0, r5
 801a482:	9205      	str	r2, [sp, #20]
 801a484:	47b8      	blx	r7
 801a486:	3001      	adds	r0, #1
 801a488:	f43f ae97 	beq.w	801a1ba <_printf_float+0xc2>
 801a48c:	9a05      	ldr	r2, [sp, #20]
 801a48e:	f10b 0b01 	add.w	fp, fp, #1
 801a492:	e7b9      	b.n	801a408 <_printf_float+0x310>
 801a494:	ee18 3a10 	vmov	r3, s16
 801a498:	4652      	mov	r2, sl
 801a49a:	4631      	mov	r1, r6
 801a49c:	4628      	mov	r0, r5
 801a49e:	47b8      	blx	r7
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d1be      	bne.n	801a422 <_printf_float+0x32a>
 801a4a4:	e689      	b.n	801a1ba <_printf_float+0xc2>
 801a4a6:	9a05      	ldr	r2, [sp, #20]
 801a4a8:	464b      	mov	r3, r9
 801a4aa:	4442      	add	r2, r8
 801a4ac:	4631      	mov	r1, r6
 801a4ae:	4628      	mov	r0, r5
 801a4b0:	47b8      	blx	r7
 801a4b2:	3001      	adds	r0, #1
 801a4b4:	d1c1      	bne.n	801a43a <_printf_float+0x342>
 801a4b6:	e680      	b.n	801a1ba <_printf_float+0xc2>
 801a4b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4ba:	2a01      	cmp	r2, #1
 801a4bc:	dc01      	bgt.n	801a4c2 <_printf_float+0x3ca>
 801a4be:	07db      	lsls	r3, r3, #31
 801a4c0:	d538      	bpl.n	801a534 <_printf_float+0x43c>
 801a4c2:	2301      	movs	r3, #1
 801a4c4:	4642      	mov	r2, r8
 801a4c6:	4631      	mov	r1, r6
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	47b8      	blx	r7
 801a4cc:	3001      	adds	r0, #1
 801a4ce:	f43f ae74 	beq.w	801a1ba <_printf_float+0xc2>
 801a4d2:	ee18 3a10 	vmov	r3, s16
 801a4d6:	4652      	mov	r2, sl
 801a4d8:	4631      	mov	r1, r6
 801a4da:	4628      	mov	r0, r5
 801a4dc:	47b8      	blx	r7
 801a4de:	3001      	adds	r0, #1
 801a4e0:	f43f ae6b 	beq.w	801a1ba <_printf_float+0xc2>
 801a4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	f7ff fa6c 	bl	80199c8 <__aeabi_dcmpeq>
 801a4f0:	b9d8      	cbnz	r0, 801a52a <_printf_float+0x432>
 801a4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4f4:	f108 0201 	add.w	r2, r8, #1
 801a4f8:	3b01      	subs	r3, #1
 801a4fa:	4631      	mov	r1, r6
 801a4fc:	4628      	mov	r0, r5
 801a4fe:	47b8      	blx	r7
 801a500:	3001      	adds	r0, #1
 801a502:	d10e      	bne.n	801a522 <_printf_float+0x42a>
 801a504:	e659      	b.n	801a1ba <_printf_float+0xc2>
 801a506:	2301      	movs	r3, #1
 801a508:	4652      	mov	r2, sl
 801a50a:	4631      	mov	r1, r6
 801a50c:	4628      	mov	r0, r5
 801a50e:	47b8      	blx	r7
 801a510:	3001      	adds	r0, #1
 801a512:	f43f ae52 	beq.w	801a1ba <_printf_float+0xc2>
 801a516:	f108 0801 	add.w	r8, r8, #1
 801a51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a51c:	3b01      	subs	r3, #1
 801a51e:	4543      	cmp	r3, r8
 801a520:	dcf1      	bgt.n	801a506 <_printf_float+0x40e>
 801a522:	464b      	mov	r3, r9
 801a524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a528:	e6dc      	b.n	801a2e4 <_printf_float+0x1ec>
 801a52a:	f04f 0800 	mov.w	r8, #0
 801a52e:	f104 0a1a 	add.w	sl, r4, #26
 801a532:	e7f2      	b.n	801a51a <_printf_float+0x422>
 801a534:	2301      	movs	r3, #1
 801a536:	4642      	mov	r2, r8
 801a538:	e7df      	b.n	801a4fa <_printf_float+0x402>
 801a53a:	2301      	movs	r3, #1
 801a53c:	464a      	mov	r2, r9
 801a53e:	4631      	mov	r1, r6
 801a540:	4628      	mov	r0, r5
 801a542:	47b8      	blx	r7
 801a544:	3001      	adds	r0, #1
 801a546:	f43f ae38 	beq.w	801a1ba <_printf_float+0xc2>
 801a54a:	f108 0801 	add.w	r8, r8, #1
 801a54e:	68e3      	ldr	r3, [r4, #12]
 801a550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a552:	1a5b      	subs	r3, r3, r1
 801a554:	4543      	cmp	r3, r8
 801a556:	dcf0      	bgt.n	801a53a <_printf_float+0x442>
 801a558:	e6fa      	b.n	801a350 <_printf_float+0x258>
 801a55a:	f04f 0800 	mov.w	r8, #0
 801a55e:	f104 0919 	add.w	r9, r4, #25
 801a562:	e7f4      	b.n	801a54e <_printf_float+0x456>

0801a564 <_printf_common>:
 801a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a568:	4616      	mov	r6, r2
 801a56a:	4699      	mov	r9, r3
 801a56c:	688a      	ldr	r2, [r1, #8]
 801a56e:	690b      	ldr	r3, [r1, #16]
 801a570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a574:	4293      	cmp	r3, r2
 801a576:	bfb8      	it	lt
 801a578:	4613      	movlt	r3, r2
 801a57a:	6033      	str	r3, [r6, #0]
 801a57c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a580:	4607      	mov	r7, r0
 801a582:	460c      	mov	r4, r1
 801a584:	b10a      	cbz	r2, 801a58a <_printf_common+0x26>
 801a586:	3301      	adds	r3, #1
 801a588:	6033      	str	r3, [r6, #0]
 801a58a:	6823      	ldr	r3, [r4, #0]
 801a58c:	0699      	lsls	r1, r3, #26
 801a58e:	bf42      	ittt	mi
 801a590:	6833      	ldrmi	r3, [r6, #0]
 801a592:	3302      	addmi	r3, #2
 801a594:	6033      	strmi	r3, [r6, #0]
 801a596:	6825      	ldr	r5, [r4, #0]
 801a598:	f015 0506 	ands.w	r5, r5, #6
 801a59c:	d106      	bne.n	801a5ac <_printf_common+0x48>
 801a59e:	f104 0a19 	add.w	sl, r4, #25
 801a5a2:	68e3      	ldr	r3, [r4, #12]
 801a5a4:	6832      	ldr	r2, [r6, #0]
 801a5a6:	1a9b      	subs	r3, r3, r2
 801a5a8:	42ab      	cmp	r3, r5
 801a5aa:	dc26      	bgt.n	801a5fa <_printf_common+0x96>
 801a5ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a5b0:	1e13      	subs	r3, r2, #0
 801a5b2:	6822      	ldr	r2, [r4, #0]
 801a5b4:	bf18      	it	ne
 801a5b6:	2301      	movne	r3, #1
 801a5b8:	0692      	lsls	r2, r2, #26
 801a5ba:	d42b      	bmi.n	801a614 <_printf_common+0xb0>
 801a5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a5c0:	4649      	mov	r1, r9
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	47c0      	blx	r8
 801a5c6:	3001      	adds	r0, #1
 801a5c8:	d01e      	beq.n	801a608 <_printf_common+0xa4>
 801a5ca:	6823      	ldr	r3, [r4, #0]
 801a5cc:	68e5      	ldr	r5, [r4, #12]
 801a5ce:	6832      	ldr	r2, [r6, #0]
 801a5d0:	f003 0306 	and.w	r3, r3, #6
 801a5d4:	2b04      	cmp	r3, #4
 801a5d6:	bf08      	it	eq
 801a5d8:	1aad      	subeq	r5, r5, r2
 801a5da:	68a3      	ldr	r3, [r4, #8]
 801a5dc:	6922      	ldr	r2, [r4, #16]
 801a5de:	bf0c      	ite	eq
 801a5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a5e4:	2500      	movne	r5, #0
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	bfc4      	itt	gt
 801a5ea:	1a9b      	subgt	r3, r3, r2
 801a5ec:	18ed      	addgt	r5, r5, r3
 801a5ee:	2600      	movs	r6, #0
 801a5f0:	341a      	adds	r4, #26
 801a5f2:	42b5      	cmp	r5, r6
 801a5f4:	d11a      	bne.n	801a62c <_printf_common+0xc8>
 801a5f6:	2000      	movs	r0, #0
 801a5f8:	e008      	b.n	801a60c <_printf_common+0xa8>
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	4652      	mov	r2, sl
 801a5fe:	4649      	mov	r1, r9
 801a600:	4638      	mov	r0, r7
 801a602:	47c0      	blx	r8
 801a604:	3001      	adds	r0, #1
 801a606:	d103      	bne.n	801a610 <_printf_common+0xac>
 801a608:	f04f 30ff 	mov.w	r0, #4294967295
 801a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a610:	3501      	adds	r5, #1
 801a612:	e7c6      	b.n	801a5a2 <_printf_common+0x3e>
 801a614:	18e1      	adds	r1, r4, r3
 801a616:	1c5a      	adds	r2, r3, #1
 801a618:	2030      	movs	r0, #48	; 0x30
 801a61a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a61e:	4422      	add	r2, r4
 801a620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a628:	3302      	adds	r3, #2
 801a62a:	e7c7      	b.n	801a5bc <_printf_common+0x58>
 801a62c:	2301      	movs	r3, #1
 801a62e:	4622      	mov	r2, r4
 801a630:	4649      	mov	r1, r9
 801a632:	4638      	mov	r0, r7
 801a634:	47c0      	blx	r8
 801a636:	3001      	adds	r0, #1
 801a638:	d0e6      	beq.n	801a608 <_printf_common+0xa4>
 801a63a:	3601      	adds	r6, #1
 801a63c:	e7d9      	b.n	801a5f2 <_printf_common+0x8e>
	...

0801a640 <_printf_i>:
 801a640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a644:	7e0f      	ldrb	r7, [r1, #24]
 801a646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a648:	2f78      	cmp	r7, #120	; 0x78
 801a64a:	4691      	mov	r9, r2
 801a64c:	4680      	mov	r8, r0
 801a64e:	460c      	mov	r4, r1
 801a650:	469a      	mov	sl, r3
 801a652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a656:	d807      	bhi.n	801a668 <_printf_i+0x28>
 801a658:	2f62      	cmp	r7, #98	; 0x62
 801a65a:	d80a      	bhi.n	801a672 <_printf_i+0x32>
 801a65c:	2f00      	cmp	r7, #0
 801a65e:	f000 80d8 	beq.w	801a812 <_printf_i+0x1d2>
 801a662:	2f58      	cmp	r7, #88	; 0x58
 801a664:	f000 80a3 	beq.w	801a7ae <_printf_i+0x16e>
 801a668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a66c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a670:	e03a      	b.n	801a6e8 <_printf_i+0xa8>
 801a672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a676:	2b15      	cmp	r3, #21
 801a678:	d8f6      	bhi.n	801a668 <_printf_i+0x28>
 801a67a:	a101      	add	r1, pc, #4	; (adr r1, 801a680 <_printf_i+0x40>)
 801a67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a680:	0801a6d9 	.word	0x0801a6d9
 801a684:	0801a6ed 	.word	0x0801a6ed
 801a688:	0801a669 	.word	0x0801a669
 801a68c:	0801a669 	.word	0x0801a669
 801a690:	0801a669 	.word	0x0801a669
 801a694:	0801a669 	.word	0x0801a669
 801a698:	0801a6ed 	.word	0x0801a6ed
 801a69c:	0801a669 	.word	0x0801a669
 801a6a0:	0801a669 	.word	0x0801a669
 801a6a4:	0801a669 	.word	0x0801a669
 801a6a8:	0801a669 	.word	0x0801a669
 801a6ac:	0801a7f9 	.word	0x0801a7f9
 801a6b0:	0801a71d 	.word	0x0801a71d
 801a6b4:	0801a7db 	.word	0x0801a7db
 801a6b8:	0801a669 	.word	0x0801a669
 801a6bc:	0801a669 	.word	0x0801a669
 801a6c0:	0801a81b 	.word	0x0801a81b
 801a6c4:	0801a669 	.word	0x0801a669
 801a6c8:	0801a71d 	.word	0x0801a71d
 801a6cc:	0801a669 	.word	0x0801a669
 801a6d0:	0801a669 	.word	0x0801a669
 801a6d4:	0801a7e3 	.word	0x0801a7e3
 801a6d8:	682b      	ldr	r3, [r5, #0]
 801a6da:	1d1a      	adds	r2, r3, #4
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	602a      	str	r2, [r5, #0]
 801a6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a6e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a6e8:	2301      	movs	r3, #1
 801a6ea:	e0a3      	b.n	801a834 <_printf_i+0x1f4>
 801a6ec:	6820      	ldr	r0, [r4, #0]
 801a6ee:	6829      	ldr	r1, [r5, #0]
 801a6f0:	0606      	lsls	r6, r0, #24
 801a6f2:	f101 0304 	add.w	r3, r1, #4
 801a6f6:	d50a      	bpl.n	801a70e <_printf_i+0xce>
 801a6f8:	680e      	ldr	r6, [r1, #0]
 801a6fa:	602b      	str	r3, [r5, #0]
 801a6fc:	2e00      	cmp	r6, #0
 801a6fe:	da03      	bge.n	801a708 <_printf_i+0xc8>
 801a700:	232d      	movs	r3, #45	; 0x2d
 801a702:	4276      	negs	r6, r6
 801a704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a708:	485e      	ldr	r0, [pc, #376]	; (801a884 <_printf_i+0x244>)
 801a70a:	230a      	movs	r3, #10
 801a70c:	e019      	b.n	801a742 <_printf_i+0x102>
 801a70e:	680e      	ldr	r6, [r1, #0]
 801a710:	602b      	str	r3, [r5, #0]
 801a712:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a716:	bf18      	it	ne
 801a718:	b236      	sxthne	r6, r6
 801a71a:	e7ef      	b.n	801a6fc <_printf_i+0xbc>
 801a71c:	682b      	ldr	r3, [r5, #0]
 801a71e:	6820      	ldr	r0, [r4, #0]
 801a720:	1d19      	adds	r1, r3, #4
 801a722:	6029      	str	r1, [r5, #0]
 801a724:	0601      	lsls	r1, r0, #24
 801a726:	d501      	bpl.n	801a72c <_printf_i+0xec>
 801a728:	681e      	ldr	r6, [r3, #0]
 801a72a:	e002      	b.n	801a732 <_printf_i+0xf2>
 801a72c:	0646      	lsls	r6, r0, #25
 801a72e:	d5fb      	bpl.n	801a728 <_printf_i+0xe8>
 801a730:	881e      	ldrh	r6, [r3, #0]
 801a732:	4854      	ldr	r0, [pc, #336]	; (801a884 <_printf_i+0x244>)
 801a734:	2f6f      	cmp	r7, #111	; 0x6f
 801a736:	bf0c      	ite	eq
 801a738:	2308      	moveq	r3, #8
 801a73a:	230a      	movne	r3, #10
 801a73c:	2100      	movs	r1, #0
 801a73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a742:	6865      	ldr	r5, [r4, #4]
 801a744:	60a5      	str	r5, [r4, #8]
 801a746:	2d00      	cmp	r5, #0
 801a748:	bfa2      	ittt	ge
 801a74a:	6821      	ldrge	r1, [r4, #0]
 801a74c:	f021 0104 	bicge.w	r1, r1, #4
 801a750:	6021      	strge	r1, [r4, #0]
 801a752:	b90e      	cbnz	r6, 801a758 <_printf_i+0x118>
 801a754:	2d00      	cmp	r5, #0
 801a756:	d04d      	beq.n	801a7f4 <_printf_i+0x1b4>
 801a758:	4615      	mov	r5, r2
 801a75a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a75e:	fb03 6711 	mls	r7, r3, r1, r6
 801a762:	5dc7      	ldrb	r7, [r0, r7]
 801a764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a768:	4637      	mov	r7, r6
 801a76a:	42bb      	cmp	r3, r7
 801a76c:	460e      	mov	r6, r1
 801a76e:	d9f4      	bls.n	801a75a <_printf_i+0x11a>
 801a770:	2b08      	cmp	r3, #8
 801a772:	d10b      	bne.n	801a78c <_printf_i+0x14c>
 801a774:	6823      	ldr	r3, [r4, #0]
 801a776:	07de      	lsls	r6, r3, #31
 801a778:	d508      	bpl.n	801a78c <_printf_i+0x14c>
 801a77a:	6923      	ldr	r3, [r4, #16]
 801a77c:	6861      	ldr	r1, [r4, #4]
 801a77e:	4299      	cmp	r1, r3
 801a780:	bfde      	ittt	le
 801a782:	2330      	movle	r3, #48	; 0x30
 801a784:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a788:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a78c:	1b52      	subs	r2, r2, r5
 801a78e:	6122      	str	r2, [r4, #16]
 801a790:	f8cd a000 	str.w	sl, [sp]
 801a794:	464b      	mov	r3, r9
 801a796:	aa03      	add	r2, sp, #12
 801a798:	4621      	mov	r1, r4
 801a79a:	4640      	mov	r0, r8
 801a79c:	f7ff fee2 	bl	801a564 <_printf_common>
 801a7a0:	3001      	adds	r0, #1
 801a7a2:	d14c      	bne.n	801a83e <_printf_i+0x1fe>
 801a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7a8:	b004      	add	sp, #16
 801a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7ae:	4835      	ldr	r0, [pc, #212]	; (801a884 <_printf_i+0x244>)
 801a7b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a7b4:	6829      	ldr	r1, [r5, #0]
 801a7b6:	6823      	ldr	r3, [r4, #0]
 801a7b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801a7bc:	6029      	str	r1, [r5, #0]
 801a7be:	061d      	lsls	r5, r3, #24
 801a7c0:	d514      	bpl.n	801a7ec <_printf_i+0x1ac>
 801a7c2:	07df      	lsls	r7, r3, #31
 801a7c4:	bf44      	itt	mi
 801a7c6:	f043 0320 	orrmi.w	r3, r3, #32
 801a7ca:	6023      	strmi	r3, [r4, #0]
 801a7cc:	b91e      	cbnz	r6, 801a7d6 <_printf_i+0x196>
 801a7ce:	6823      	ldr	r3, [r4, #0]
 801a7d0:	f023 0320 	bic.w	r3, r3, #32
 801a7d4:	6023      	str	r3, [r4, #0]
 801a7d6:	2310      	movs	r3, #16
 801a7d8:	e7b0      	b.n	801a73c <_printf_i+0xfc>
 801a7da:	6823      	ldr	r3, [r4, #0]
 801a7dc:	f043 0320 	orr.w	r3, r3, #32
 801a7e0:	6023      	str	r3, [r4, #0]
 801a7e2:	2378      	movs	r3, #120	; 0x78
 801a7e4:	4828      	ldr	r0, [pc, #160]	; (801a888 <_printf_i+0x248>)
 801a7e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a7ea:	e7e3      	b.n	801a7b4 <_printf_i+0x174>
 801a7ec:	0659      	lsls	r1, r3, #25
 801a7ee:	bf48      	it	mi
 801a7f0:	b2b6      	uxthmi	r6, r6
 801a7f2:	e7e6      	b.n	801a7c2 <_printf_i+0x182>
 801a7f4:	4615      	mov	r5, r2
 801a7f6:	e7bb      	b.n	801a770 <_printf_i+0x130>
 801a7f8:	682b      	ldr	r3, [r5, #0]
 801a7fa:	6826      	ldr	r6, [r4, #0]
 801a7fc:	6961      	ldr	r1, [r4, #20]
 801a7fe:	1d18      	adds	r0, r3, #4
 801a800:	6028      	str	r0, [r5, #0]
 801a802:	0635      	lsls	r5, r6, #24
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	d501      	bpl.n	801a80c <_printf_i+0x1cc>
 801a808:	6019      	str	r1, [r3, #0]
 801a80a:	e002      	b.n	801a812 <_printf_i+0x1d2>
 801a80c:	0670      	lsls	r0, r6, #25
 801a80e:	d5fb      	bpl.n	801a808 <_printf_i+0x1c8>
 801a810:	8019      	strh	r1, [r3, #0]
 801a812:	2300      	movs	r3, #0
 801a814:	6123      	str	r3, [r4, #16]
 801a816:	4615      	mov	r5, r2
 801a818:	e7ba      	b.n	801a790 <_printf_i+0x150>
 801a81a:	682b      	ldr	r3, [r5, #0]
 801a81c:	1d1a      	adds	r2, r3, #4
 801a81e:	602a      	str	r2, [r5, #0]
 801a820:	681d      	ldr	r5, [r3, #0]
 801a822:	6862      	ldr	r2, [r4, #4]
 801a824:	2100      	movs	r1, #0
 801a826:	4628      	mov	r0, r5
 801a828:	f7fe fc5a 	bl	80190e0 <memchr>
 801a82c:	b108      	cbz	r0, 801a832 <_printf_i+0x1f2>
 801a82e:	1b40      	subs	r0, r0, r5
 801a830:	6060      	str	r0, [r4, #4]
 801a832:	6863      	ldr	r3, [r4, #4]
 801a834:	6123      	str	r3, [r4, #16]
 801a836:	2300      	movs	r3, #0
 801a838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a83c:	e7a8      	b.n	801a790 <_printf_i+0x150>
 801a83e:	6923      	ldr	r3, [r4, #16]
 801a840:	462a      	mov	r2, r5
 801a842:	4649      	mov	r1, r9
 801a844:	4640      	mov	r0, r8
 801a846:	47d0      	blx	sl
 801a848:	3001      	adds	r0, #1
 801a84a:	d0ab      	beq.n	801a7a4 <_printf_i+0x164>
 801a84c:	6823      	ldr	r3, [r4, #0]
 801a84e:	079b      	lsls	r3, r3, #30
 801a850:	d413      	bmi.n	801a87a <_printf_i+0x23a>
 801a852:	68e0      	ldr	r0, [r4, #12]
 801a854:	9b03      	ldr	r3, [sp, #12]
 801a856:	4298      	cmp	r0, r3
 801a858:	bfb8      	it	lt
 801a85a:	4618      	movlt	r0, r3
 801a85c:	e7a4      	b.n	801a7a8 <_printf_i+0x168>
 801a85e:	2301      	movs	r3, #1
 801a860:	4632      	mov	r2, r6
 801a862:	4649      	mov	r1, r9
 801a864:	4640      	mov	r0, r8
 801a866:	47d0      	blx	sl
 801a868:	3001      	adds	r0, #1
 801a86a:	d09b      	beq.n	801a7a4 <_printf_i+0x164>
 801a86c:	3501      	adds	r5, #1
 801a86e:	68e3      	ldr	r3, [r4, #12]
 801a870:	9903      	ldr	r1, [sp, #12]
 801a872:	1a5b      	subs	r3, r3, r1
 801a874:	42ab      	cmp	r3, r5
 801a876:	dcf2      	bgt.n	801a85e <_printf_i+0x21e>
 801a878:	e7eb      	b.n	801a852 <_printf_i+0x212>
 801a87a:	2500      	movs	r5, #0
 801a87c:	f104 0619 	add.w	r6, r4, #25
 801a880:	e7f5      	b.n	801a86e <_printf_i+0x22e>
 801a882:	bf00      	nop
 801a884:	080528ba 	.word	0x080528ba
 801a888:	080528cb 	.word	0x080528cb

0801a88c <_scanf_float>:
 801a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a890:	b087      	sub	sp, #28
 801a892:	4617      	mov	r7, r2
 801a894:	9303      	str	r3, [sp, #12]
 801a896:	688b      	ldr	r3, [r1, #8]
 801a898:	1e5a      	subs	r2, r3, #1
 801a89a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a89e:	bf83      	ittte	hi
 801a8a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a8a4:	195b      	addhi	r3, r3, r5
 801a8a6:	9302      	strhi	r3, [sp, #8]
 801a8a8:	2300      	movls	r3, #0
 801a8aa:	bf86      	itte	hi
 801a8ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a8b0:	608b      	strhi	r3, [r1, #8]
 801a8b2:	9302      	strls	r3, [sp, #8]
 801a8b4:	680b      	ldr	r3, [r1, #0]
 801a8b6:	468b      	mov	fp, r1
 801a8b8:	2500      	movs	r5, #0
 801a8ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a8be:	f84b 3b1c 	str.w	r3, [fp], #28
 801a8c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a8c6:	4680      	mov	r8, r0
 801a8c8:	460c      	mov	r4, r1
 801a8ca:	465e      	mov	r6, fp
 801a8cc:	46aa      	mov	sl, r5
 801a8ce:	46a9      	mov	r9, r5
 801a8d0:	9501      	str	r5, [sp, #4]
 801a8d2:	68a2      	ldr	r2, [r4, #8]
 801a8d4:	b152      	cbz	r2, 801a8ec <_scanf_float+0x60>
 801a8d6:	683b      	ldr	r3, [r7, #0]
 801a8d8:	781b      	ldrb	r3, [r3, #0]
 801a8da:	2b4e      	cmp	r3, #78	; 0x4e
 801a8dc:	d864      	bhi.n	801a9a8 <_scanf_float+0x11c>
 801a8de:	2b40      	cmp	r3, #64	; 0x40
 801a8e0:	d83c      	bhi.n	801a95c <_scanf_float+0xd0>
 801a8e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a8e6:	b2c8      	uxtb	r0, r1
 801a8e8:	280e      	cmp	r0, #14
 801a8ea:	d93a      	bls.n	801a962 <_scanf_float+0xd6>
 801a8ec:	f1b9 0f00 	cmp.w	r9, #0
 801a8f0:	d003      	beq.n	801a8fa <_scanf_float+0x6e>
 801a8f2:	6823      	ldr	r3, [r4, #0]
 801a8f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a8f8:	6023      	str	r3, [r4, #0]
 801a8fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8fe:	f1ba 0f01 	cmp.w	sl, #1
 801a902:	f200 8113 	bhi.w	801ab2c <_scanf_float+0x2a0>
 801a906:	455e      	cmp	r6, fp
 801a908:	f200 8105 	bhi.w	801ab16 <_scanf_float+0x28a>
 801a90c:	2501      	movs	r5, #1
 801a90e:	4628      	mov	r0, r5
 801a910:	b007      	add	sp, #28
 801a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a916:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a91a:	2a0d      	cmp	r2, #13
 801a91c:	d8e6      	bhi.n	801a8ec <_scanf_float+0x60>
 801a91e:	a101      	add	r1, pc, #4	; (adr r1, 801a924 <_scanf_float+0x98>)
 801a920:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a924:	0801aa63 	.word	0x0801aa63
 801a928:	0801a8ed 	.word	0x0801a8ed
 801a92c:	0801a8ed 	.word	0x0801a8ed
 801a930:	0801a8ed 	.word	0x0801a8ed
 801a934:	0801aac3 	.word	0x0801aac3
 801a938:	0801aa9b 	.word	0x0801aa9b
 801a93c:	0801a8ed 	.word	0x0801a8ed
 801a940:	0801a8ed 	.word	0x0801a8ed
 801a944:	0801aa71 	.word	0x0801aa71
 801a948:	0801a8ed 	.word	0x0801a8ed
 801a94c:	0801a8ed 	.word	0x0801a8ed
 801a950:	0801a8ed 	.word	0x0801a8ed
 801a954:	0801a8ed 	.word	0x0801a8ed
 801a958:	0801aa29 	.word	0x0801aa29
 801a95c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a960:	e7db      	b.n	801a91a <_scanf_float+0x8e>
 801a962:	290e      	cmp	r1, #14
 801a964:	d8c2      	bhi.n	801a8ec <_scanf_float+0x60>
 801a966:	a001      	add	r0, pc, #4	; (adr r0, 801a96c <_scanf_float+0xe0>)
 801a968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a96c:	0801aa1b 	.word	0x0801aa1b
 801a970:	0801a8ed 	.word	0x0801a8ed
 801a974:	0801aa1b 	.word	0x0801aa1b
 801a978:	0801aaaf 	.word	0x0801aaaf
 801a97c:	0801a8ed 	.word	0x0801a8ed
 801a980:	0801a9c9 	.word	0x0801a9c9
 801a984:	0801aa05 	.word	0x0801aa05
 801a988:	0801aa05 	.word	0x0801aa05
 801a98c:	0801aa05 	.word	0x0801aa05
 801a990:	0801aa05 	.word	0x0801aa05
 801a994:	0801aa05 	.word	0x0801aa05
 801a998:	0801aa05 	.word	0x0801aa05
 801a99c:	0801aa05 	.word	0x0801aa05
 801a9a0:	0801aa05 	.word	0x0801aa05
 801a9a4:	0801aa05 	.word	0x0801aa05
 801a9a8:	2b6e      	cmp	r3, #110	; 0x6e
 801a9aa:	d809      	bhi.n	801a9c0 <_scanf_float+0x134>
 801a9ac:	2b60      	cmp	r3, #96	; 0x60
 801a9ae:	d8b2      	bhi.n	801a916 <_scanf_float+0x8a>
 801a9b0:	2b54      	cmp	r3, #84	; 0x54
 801a9b2:	d077      	beq.n	801aaa4 <_scanf_float+0x218>
 801a9b4:	2b59      	cmp	r3, #89	; 0x59
 801a9b6:	d199      	bne.n	801a8ec <_scanf_float+0x60>
 801a9b8:	2d07      	cmp	r5, #7
 801a9ba:	d197      	bne.n	801a8ec <_scanf_float+0x60>
 801a9bc:	2508      	movs	r5, #8
 801a9be:	e029      	b.n	801aa14 <_scanf_float+0x188>
 801a9c0:	2b74      	cmp	r3, #116	; 0x74
 801a9c2:	d06f      	beq.n	801aaa4 <_scanf_float+0x218>
 801a9c4:	2b79      	cmp	r3, #121	; 0x79
 801a9c6:	e7f6      	b.n	801a9b6 <_scanf_float+0x12a>
 801a9c8:	6821      	ldr	r1, [r4, #0]
 801a9ca:	05c8      	lsls	r0, r1, #23
 801a9cc:	d51a      	bpl.n	801aa04 <_scanf_float+0x178>
 801a9ce:	9b02      	ldr	r3, [sp, #8]
 801a9d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a9d4:	6021      	str	r1, [r4, #0]
 801a9d6:	f109 0901 	add.w	r9, r9, #1
 801a9da:	b11b      	cbz	r3, 801a9e4 <_scanf_float+0x158>
 801a9dc:	3b01      	subs	r3, #1
 801a9de:	3201      	adds	r2, #1
 801a9e0:	9302      	str	r3, [sp, #8]
 801a9e2:	60a2      	str	r2, [r4, #8]
 801a9e4:	68a3      	ldr	r3, [r4, #8]
 801a9e6:	3b01      	subs	r3, #1
 801a9e8:	60a3      	str	r3, [r4, #8]
 801a9ea:	6923      	ldr	r3, [r4, #16]
 801a9ec:	3301      	adds	r3, #1
 801a9ee:	6123      	str	r3, [r4, #16]
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	3b01      	subs	r3, #1
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	607b      	str	r3, [r7, #4]
 801a9f8:	f340 8084 	ble.w	801ab04 <_scanf_float+0x278>
 801a9fc:	683b      	ldr	r3, [r7, #0]
 801a9fe:	3301      	adds	r3, #1
 801aa00:	603b      	str	r3, [r7, #0]
 801aa02:	e766      	b.n	801a8d2 <_scanf_float+0x46>
 801aa04:	eb1a 0f05 	cmn.w	sl, r5
 801aa08:	f47f af70 	bne.w	801a8ec <_scanf_float+0x60>
 801aa0c:	6822      	ldr	r2, [r4, #0]
 801aa0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801aa12:	6022      	str	r2, [r4, #0]
 801aa14:	f806 3b01 	strb.w	r3, [r6], #1
 801aa18:	e7e4      	b.n	801a9e4 <_scanf_float+0x158>
 801aa1a:	6822      	ldr	r2, [r4, #0]
 801aa1c:	0610      	lsls	r0, r2, #24
 801aa1e:	f57f af65 	bpl.w	801a8ec <_scanf_float+0x60>
 801aa22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801aa26:	e7f4      	b.n	801aa12 <_scanf_float+0x186>
 801aa28:	f1ba 0f00 	cmp.w	sl, #0
 801aa2c:	d10e      	bne.n	801aa4c <_scanf_float+0x1c0>
 801aa2e:	f1b9 0f00 	cmp.w	r9, #0
 801aa32:	d10e      	bne.n	801aa52 <_scanf_float+0x1c6>
 801aa34:	6822      	ldr	r2, [r4, #0]
 801aa36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aa3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aa3e:	d108      	bne.n	801aa52 <_scanf_float+0x1c6>
 801aa40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa44:	6022      	str	r2, [r4, #0]
 801aa46:	f04f 0a01 	mov.w	sl, #1
 801aa4a:	e7e3      	b.n	801aa14 <_scanf_float+0x188>
 801aa4c:	f1ba 0f02 	cmp.w	sl, #2
 801aa50:	d055      	beq.n	801aafe <_scanf_float+0x272>
 801aa52:	2d01      	cmp	r5, #1
 801aa54:	d002      	beq.n	801aa5c <_scanf_float+0x1d0>
 801aa56:	2d04      	cmp	r5, #4
 801aa58:	f47f af48 	bne.w	801a8ec <_scanf_float+0x60>
 801aa5c:	3501      	adds	r5, #1
 801aa5e:	b2ed      	uxtb	r5, r5
 801aa60:	e7d8      	b.n	801aa14 <_scanf_float+0x188>
 801aa62:	f1ba 0f01 	cmp.w	sl, #1
 801aa66:	f47f af41 	bne.w	801a8ec <_scanf_float+0x60>
 801aa6a:	f04f 0a02 	mov.w	sl, #2
 801aa6e:	e7d1      	b.n	801aa14 <_scanf_float+0x188>
 801aa70:	b97d      	cbnz	r5, 801aa92 <_scanf_float+0x206>
 801aa72:	f1b9 0f00 	cmp.w	r9, #0
 801aa76:	f47f af3c 	bne.w	801a8f2 <_scanf_float+0x66>
 801aa7a:	6822      	ldr	r2, [r4, #0]
 801aa7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aa80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aa84:	f47f af39 	bne.w	801a8fa <_scanf_float+0x6e>
 801aa88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa8c:	6022      	str	r2, [r4, #0]
 801aa8e:	2501      	movs	r5, #1
 801aa90:	e7c0      	b.n	801aa14 <_scanf_float+0x188>
 801aa92:	2d03      	cmp	r5, #3
 801aa94:	d0e2      	beq.n	801aa5c <_scanf_float+0x1d0>
 801aa96:	2d05      	cmp	r5, #5
 801aa98:	e7de      	b.n	801aa58 <_scanf_float+0x1cc>
 801aa9a:	2d02      	cmp	r5, #2
 801aa9c:	f47f af26 	bne.w	801a8ec <_scanf_float+0x60>
 801aaa0:	2503      	movs	r5, #3
 801aaa2:	e7b7      	b.n	801aa14 <_scanf_float+0x188>
 801aaa4:	2d06      	cmp	r5, #6
 801aaa6:	f47f af21 	bne.w	801a8ec <_scanf_float+0x60>
 801aaaa:	2507      	movs	r5, #7
 801aaac:	e7b2      	b.n	801aa14 <_scanf_float+0x188>
 801aaae:	6822      	ldr	r2, [r4, #0]
 801aab0:	0591      	lsls	r1, r2, #22
 801aab2:	f57f af1b 	bpl.w	801a8ec <_scanf_float+0x60>
 801aab6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801aaba:	6022      	str	r2, [r4, #0]
 801aabc:	f8cd 9004 	str.w	r9, [sp, #4]
 801aac0:	e7a8      	b.n	801aa14 <_scanf_float+0x188>
 801aac2:	6822      	ldr	r2, [r4, #0]
 801aac4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801aac8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801aacc:	d006      	beq.n	801aadc <_scanf_float+0x250>
 801aace:	0550      	lsls	r0, r2, #21
 801aad0:	f57f af0c 	bpl.w	801a8ec <_scanf_float+0x60>
 801aad4:	f1b9 0f00 	cmp.w	r9, #0
 801aad8:	f43f af0f 	beq.w	801a8fa <_scanf_float+0x6e>
 801aadc:	0591      	lsls	r1, r2, #22
 801aade:	bf58      	it	pl
 801aae0:	9901      	ldrpl	r1, [sp, #4]
 801aae2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aae6:	bf58      	it	pl
 801aae8:	eba9 0101 	subpl.w	r1, r9, r1
 801aaec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801aaf0:	bf58      	it	pl
 801aaf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aaf6:	6022      	str	r2, [r4, #0]
 801aaf8:	f04f 0900 	mov.w	r9, #0
 801aafc:	e78a      	b.n	801aa14 <_scanf_float+0x188>
 801aafe:	f04f 0a03 	mov.w	sl, #3
 801ab02:	e787      	b.n	801aa14 <_scanf_float+0x188>
 801ab04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ab08:	4639      	mov	r1, r7
 801ab0a:	4640      	mov	r0, r8
 801ab0c:	4798      	blx	r3
 801ab0e:	2800      	cmp	r0, #0
 801ab10:	f43f aedf 	beq.w	801a8d2 <_scanf_float+0x46>
 801ab14:	e6ea      	b.n	801a8ec <_scanf_float+0x60>
 801ab16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab1e:	463a      	mov	r2, r7
 801ab20:	4640      	mov	r0, r8
 801ab22:	4798      	blx	r3
 801ab24:	6923      	ldr	r3, [r4, #16]
 801ab26:	3b01      	subs	r3, #1
 801ab28:	6123      	str	r3, [r4, #16]
 801ab2a:	e6ec      	b.n	801a906 <_scanf_float+0x7a>
 801ab2c:	1e6b      	subs	r3, r5, #1
 801ab2e:	2b06      	cmp	r3, #6
 801ab30:	d825      	bhi.n	801ab7e <_scanf_float+0x2f2>
 801ab32:	2d02      	cmp	r5, #2
 801ab34:	d836      	bhi.n	801aba4 <_scanf_float+0x318>
 801ab36:	455e      	cmp	r6, fp
 801ab38:	f67f aee8 	bls.w	801a90c <_scanf_float+0x80>
 801ab3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab44:	463a      	mov	r2, r7
 801ab46:	4640      	mov	r0, r8
 801ab48:	4798      	blx	r3
 801ab4a:	6923      	ldr	r3, [r4, #16]
 801ab4c:	3b01      	subs	r3, #1
 801ab4e:	6123      	str	r3, [r4, #16]
 801ab50:	e7f1      	b.n	801ab36 <_scanf_float+0x2aa>
 801ab52:	9802      	ldr	r0, [sp, #8]
 801ab54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801ab5c:	9002      	str	r0, [sp, #8]
 801ab5e:	463a      	mov	r2, r7
 801ab60:	4640      	mov	r0, r8
 801ab62:	4798      	blx	r3
 801ab64:	6923      	ldr	r3, [r4, #16]
 801ab66:	3b01      	subs	r3, #1
 801ab68:	6123      	str	r3, [r4, #16]
 801ab6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ab6e:	fa5f fa8a 	uxtb.w	sl, sl
 801ab72:	f1ba 0f02 	cmp.w	sl, #2
 801ab76:	d1ec      	bne.n	801ab52 <_scanf_float+0x2c6>
 801ab78:	3d03      	subs	r5, #3
 801ab7a:	b2ed      	uxtb	r5, r5
 801ab7c:	1b76      	subs	r6, r6, r5
 801ab7e:	6823      	ldr	r3, [r4, #0]
 801ab80:	05da      	lsls	r2, r3, #23
 801ab82:	d52f      	bpl.n	801abe4 <_scanf_float+0x358>
 801ab84:	055b      	lsls	r3, r3, #21
 801ab86:	d510      	bpl.n	801abaa <_scanf_float+0x31e>
 801ab88:	455e      	cmp	r6, fp
 801ab8a:	f67f aebf 	bls.w	801a90c <_scanf_float+0x80>
 801ab8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab96:	463a      	mov	r2, r7
 801ab98:	4640      	mov	r0, r8
 801ab9a:	4798      	blx	r3
 801ab9c:	6923      	ldr	r3, [r4, #16]
 801ab9e:	3b01      	subs	r3, #1
 801aba0:	6123      	str	r3, [r4, #16]
 801aba2:	e7f1      	b.n	801ab88 <_scanf_float+0x2fc>
 801aba4:	46aa      	mov	sl, r5
 801aba6:	9602      	str	r6, [sp, #8]
 801aba8:	e7df      	b.n	801ab6a <_scanf_float+0x2de>
 801abaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801abae:	6923      	ldr	r3, [r4, #16]
 801abb0:	2965      	cmp	r1, #101	; 0x65
 801abb2:	f103 33ff 	add.w	r3, r3, #4294967295
 801abb6:	f106 35ff 	add.w	r5, r6, #4294967295
 801abba:	6123      	str	r3, [r4, #16]
 801abbc:	d00c      	beq.n	801abd8 <_scanf_float+0x34c>
 801abbe:	2945      	cmp	r1, #69	; 0x45
 801abc0:	d00a      	beq.n	801abd8 <_scanf_float+0x34c>
 801abc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801abc6:	463a      	mov	r2, r7
 801abc8:	4640      	mov	r0, r8
 801abca:	4798      	blx	r3
 801abcc:	6923      	ldr	r3, [r4, #16]
 801abce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801abd2:	3b01      	subs	r3, #1
 801abd4:	1eb5      	subs	r5, r6, #2
 801abd6:	6123      	str	r3, [r4, #16]
 801abd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801abdc:	463a      	mov	r2, r7
 801abde:	4640      	mov	r0, r8
 801abe0:	4798      	blx	r3
 801abe2:	462e      	mov	r6, r5
 801abe4:	6825      	ldr	r5, [r4, #0]
 801abe6:	f015 0510 	ands.w	r5, r5, #16
 801abea:	d159      	bne.n	801aca0 <_scanf_float+0x414>
 801abec:	7035      	strb	r5, [r6, #0]
 801abee:	6823      	ldr	r3, [r4, #0]
 801abf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801abf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801abf8:	d11b      	bne.n	801ac32 <_scanf_float+0x3a6>
 801abfa:	9b01      	ldr	r3, [sp, #4]
 801abfc:	454b      	cmp	r3, r9
 801abfe:	eba3 0209 	sub.w	r2, r3, r9
 801ac02:	d123      	bne.n	801ac4c <_scanf_float+0x3c0>
 801ac04:	2200      	movs	r2, #0
 801ac06:	4659      	mov	r1, fp
 801ac08:	4640      	mov	r0, r8
 801ac0a:	f000 fe97 	bl	801b93c <_strtod_r>
 801ac0e:	6822      	ldr	r2, [r4, #0]
 801ac10:	9b03      	ldr	r3, [sp, #12]
 801ac12:	f012 0f02 	tst.w	r2, #2
 801ac16:	ec57 6b10 	vmov	r6, r7, d0
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	d021      	beq.n	801ac62 <_scanf_float+0x3d6>
 801ac1e:	9903      	ldr	r1, [sp, #12]
 801ac20:	1d1a      	adds	r2, r3, #4
 801ac22:	600a      	str	r2, [r1, #0]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	e9c3 6700 	strd	r6, r7, [r3]
 801ac2a:	68e3      	ldr	r3, [r4, #12]
 801ac2c:	3301      	adds	r3, #1
 801ac2e:	60e3      	str	r3, [r4, #12]
 801ac30:	e66d      	b.n	801a90e <_scanf_float+0x82>
 801ac32:	9b04      	ldr	r3, [sp, #16]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d0e5      	beq.n	801ac04 <_scanf_float+0x378>
 801ac38:	9905      	ldr	r1, [sp, #20]
 801ac3a:	230a      	movs	r3, #10
 801ac3c:	462a      	mov	r2, r5
 801ac3e:	3101      	adds	r1, #1
 801ac40:	4640      	mov	r0, r8
 801ac42:	f000 ff03 	bl	801ba4c <_strtol_r>
 801ac46:	9b04      	ldr	r3, [sp, #16]
 801ac48:	9e05      	ldr	r6, [sp, #20]
 801ac4a:	1ac2      	subs	r2, r0, r3
 801ac4c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ac50:	429e      	cmp	r6, r3
 801ac52:	bf28      	it	cs
 801ac54:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ac58:	4912      	ldr	r1, [pc, #72]	; (801aca4 <_scanf_float+0x418>)
 801ac5a:	4630      	mov	r0, r6
 801ac5c:	f000 f82c 	bl	801acb8 <siprintf>
 801ac60:	e7d0      	b.n	801ac04 <_scanf_float+0x378>
 801ac62:	9903      	ldr	r1, [sp, #12]
 801ac64:	f012 0f04 	tst.w	r2, #4
 801ac68:	f103 0204 	add.w	r2, r3, #4
 801ac6c:	600a      	str	r2, [r1, #0]
 801ac6e:	d1d9      	bne.n	801ac24 <_scanf_float+0x398>
 801ac70:	f8d3 8000 	ldr.w	r8, [r3]
 801ac74:	ee10 2a10 	vmov	r2, s0
 801ac78:	ee10 0a10 	vmov	r0, s0
 801ac7c:	463b      	mov	r3, r7
 801ac7e:	4639      	mov	r1, r7
 801ac80:	f7fe fed4 	bl	8019a2c <__aeabi_dcmpun>
 801ac84:	b128      	cbz	r0, 801ac92 <_scanf_float+0x406>
 801ac86:	4808      	ldr	r0, [pc, #32]	; (801aca8 <_scanf_float+0x41c>)
 801ac88:	f000 f810 	bl	801acac <nanf>
 801ac8c:	ed88 0a00 	vstr	s0, [r8]
 801ac90:	e7cb      	b.n	801ac2a <_scanf_float+0x39e>
 801ac92:	4630      	mov	r0, r6
 801ac94:	4639      	mov	r1, r7
 801ac96:	f7fe ff27 	bl	8019ae8 <__aeabi_d2f>
 801ac9a:	f8c8 0000 	str.w	r0, [r8]
 801ac9e:	e7c4      	b.n	801ac2a <_scanf_float+0x39e>
 801aca0:	2500      	movs	r5, #0
 801aca2:	e634      	b.n	801a90e <_scanf_float+0x82>
 801aca4:	080528dc 	.word	0x080528dc
 801aca8:	08052ce8 	.word	0x08052ce8

0801acac <nanf>:
 801acac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801acb4 <nanf+0x8>
 801acb0:	4770      	bx	lr
 801acb2:	bf00      	nop
 801acb4:	7fc00000 	.word	0x7fc00000

0801acb8 <siprintf>:
 801acb8:	b40e      	push	{r1, r2, r3}
 801acba:	b500      	push	{lr}
 801acbc:	b09c      	sub	sp, #112	; 0x70
 801acbe:	ab1d      	add	r3, sp, #116	; 0x74
 801acc0:	9002      	str	r0, [sp, #8]
 801acc2:	9006      	str	r0, [sp, #24]
 801acc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801acc8:	4809      	ldr	r0, [pc, #36]	; (801acf0 <siprintf+0x38>)
 801acca:	9107      	str	r1, [sp, #28]
 801accc:	9104      	str	r1, [sp, #16]
 801acce:	4909      	ldr	r1, [pc, #36]	; (801acf4 <siprintf+0x3c>)
 801acd0:	f853 2b04 	ldr.w	r2, [r3], #4
 801acd4:	9105      	str	r1, [sp, #20]
 801acd6:	6800      	ldr	r0, [r0, #0]
 801acd8:	9301      	str	r3, [sp, #4]
 801acda:	a902      	add	r1, sp, #8
 801acdc:	f002 feee 	bl	801dabc <_svfiprintf_r>
 801ace0:	9b02      	ldr	r3, [sp, #8]
 801ace2:	2200      	movs	r2, #0
 801ace4:	701a      	strb	r2, [r3, #0]
 801ace6:	b01c      	add	sp, #112	; 0x70
 801ace8:	f85d eb04 	ldr.w	lr, [sp], #4
 801acec:	b003      	add	sp, #12
 801acee:	4770      	bx	lr
 801acf0:	20000064 	.word	0x20000064
 801acf4:	ffff0208 	.word	0xffff0208

0801acf8 <sulp>:
 801acf8:	b570      	push	{r4, r5, r6, lr}
 801acfa:	4604      	mov	r4, r0
 801acfc:	460d      	mov	r5, r1
 801acfe:	ec45 4b10 	vmov	d0, r4, r5
 801ad02:	4616      	mov	r6, r2
 801ad04:	f002 fc38 	bl	801d578 <__ulp>
 801ad08:	ec51 0b10 	vmov	r0, r1, d0
 801ad0c:	b17e      	cbz	r6, 801ad2e <sulp+0x36>
 801ad0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ad12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	dd09      	ble.n	801ad2e <sulp+0x36>
 801ad1a:	051b      	lsls	r3, r3, #20
 801ad1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ad20:	2400      	movs	r4, #0
 801ad22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ad26:	4622      	mov	r2, r4
 801ad28:	462b      	mov	r3, r5
 801ad2a:	f7fe fbe5 	bl	80194f8 <__aeabi_dmul>
 801ad2e:	bd70      	pop	{r4, r5, r6, pc}

0801ad30 <_strtod_l>:
 801ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad34:	ed2d 8b02 	vpush	{d8}
 801ad38:	b09d      	sub	sp, #116	; 0x74
 801ad3a:	461f      	mov	r7, r3
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	9318      	str	r3, [sp, #96]	; 0x60
 801ad40:	4ba2      	ldr	r3, [pc, #648]	; (801afcc <_strtod_l+0x29c>)
 801ad42:	9213      	str	r2, [sp, #76]	; 0x4c
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	9305      	str	r3, [sp, #20]
 801ad48:	4604      	mov	r4, r0
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	4688      	mov	r8, r1
 801ad4e:	f7fe f9b9 	bl	80190c4 <strlen>
 801ad52:	f04f 0a00 	mov.w	sl, #0
 801ad56:	4605      	mov	r5, r0
 801ad58:	f04f 0b00 	mov.w	fp, #0
 801ad5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ad60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ad62:	781a      	ldrb	r2, [r3, #0]
 801ad64:	2a2b      	cmp	r2, #43	; 0x2b
 801ad66:	d04e      	beq.n	801ae06 <_strtod_l+0xd6>
 801ad68:	d83b      	bhi.n	801ade2 <_strtod_l+0xb2>
 801ad6a:	2a0d      	cmp	r2, #13
 801ad6c:	d834      	bhi.n	801add8 <_strtod_l+0xa8>
 801ad6e:	2a08      	cmp	r2, #8
 801ad70:	d834      	bhi.n	801addc <_strtod_l+0xac>
 801ad72:	2a00      	cmp	r2, #0
 801ad74:	d03e      	beq.n	801adf4 <_strtod_l+0xc4>
 801ad76:	2300      	movs	r3, #0
 801ad78:	930a      	str	r3, [sp, #40]	; 0x28
 801ad7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ad7c:	7833      	ldrb	r3, [r6, #0]
 801ad7e:	2b30      	cmp	r3, #48	; 0x30
 801ad80:	f040 80b0 	bne.w	801aee4 <_strtod_l+0x1b4>
 801ad84:	7873      	ldrb	r3, [r6, #1]
 801ad86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ad8a:	2b58      	cmp	r3, #88	; 0x58
 801ad8c:	d168      	bne.n	801ae60 <_strtod_l+0x130>
 801ad8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad90:	9301      	str	r3, [sp, #4]
 801ad92:	ab18      	add	r3, sp, #96	; 0x60
 801ad94:	9702      	str	r7, [sp, #8]
 801ad96:	9300      	str	r3, [sp, #0]
 801ad98:	4a8d      	ldr	r2, [pc, #564]	; (801afd0 <_strtod_l+0x2a0>)
 801ad9a:	ab19      	add	r3, sp, #100	; 0x64
 801ad9c:	a917      	add	r1, sp, #92	; 0x5c
 801ad9e:	4620      	mov	r0, r4
 801ada0:	f001 fd44 	bl	801c82c <__gethex>
 801ada4:	f010 0707 	ands.w	r7, r0, #7
 801ada8:	4605      	mov	r5, r0
 801adaa:	d005      	beq.n	801adb8 <_strtod_l+0x88>
 801adac:	2f06      	cmp	r7, #6
 801adae:	d12c      	bne.n	801ae0a <_strtod_l+0xda>
 801adb0:	3601      	adds	r6, #1
 801adb2:	2300      	movs	r3, #0
 801adb4:	9617      	str	r6, [sp, #92]	; 0x5c
 801adb6:	930a      	str	r3, [sp, #40]	; 0x28
 801adb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801adba:	2b00      	cmp	r3, #0
 801adbc:	f040 8590 	bne.w	801b8e0 <_strtod_l+0xbb0>
 801adc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adc2:	b1eb      	cbz	r3, 801ae00 <_strtod_l+0xd0>
 801adc4:	4652      	mov	r2, sl
 801adc6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801adca:	ec43 2b10 	vmov	d0, r2, r3
 801adce:	b01d      	add	sp, #116	; 0x74
 801add0:	ecbd 8b02 	vpop	{d8}
 801add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801add8:	2a20      	cmp	r2, #32
 801adda:	d1cc      	bne.n	801ad76 <_strtod_l+0x46>
 801addc:	3301      	adds	r3, #1
 801adde:	9317      	str	r3, [sp, #92]	; 0x5c
 801ade0:	e7be      	b.n	801ad60 <_strtod_l+0x30>
 801ade2:	2a2d      	cmp	r2, #45	; 0x2d
 801ade4:	d1c7      	bne.n	801ad76 <_strtod_l+0x46>
 801ade6:	2201      	movs	r2, #1
 801ade8:	920a      	str	r2, [sp, #40]	; 0x28
 801adea:	1c5a      	adds	r2, r3, #1
 801adec:	9217      	str	r2, [sp, #92]	; 0x5c
 801adee:	785b      	ldrb	r3, [r3, #1]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d1c2      	bne.n	801ad7a <_strtod_l+0x4a>
 801adf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801adf6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	f040 856e 	bne.w	801b8dc <_strtod_l+0xbac>
 801ae00:	4652      	mov	r2, sl
 801ae02:	465b      	mov	r3, fp
 801ae04:	e7e1      	b.n	801adca <_strtod_l+0x9a>
 801ae06:	2200      	movs	r2, #0
 801ae08:	e7ee      	b.n	801ade8 <_strtod_l+0xb8>
 801ae0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ae0c:	b13a      	cbz	r2, 801ae1e <_strtod_l+0xee>
 801ae0e:	2135      	movs	r1, #53	; 0x35
 801ae10:	a81a      	add	r0, sp, #104	; 0x68
 801ae12:	f002 fcbc 	bl	801d78e <__copybits>
 801ae16:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f002 f87b 	bl	801cf14 <_Bfree>
 801ae1e:	3f01      	subs	r7, #1
 801ae20:	2f04      	cmp	r7, #4
 801ae22:	d806      	bhi.n	801ae32 <_strtod_l+0x102>
 801ae24:	e8df f007 	tbb	[pc, r7]
 801ae28:	1714030a 	.word	0x1714030a
 801ae2c:	0a          	.byte	0x0a
 801ae2d:	00          	.byte	0x00
 801ae2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801ae32:	0728      	lsls	r0, r5, #28
 801ae34:	d5c0      	bpl.n	801adb8 <_strtod_l+0x88>
 801ae36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ae3a:	e7bd      	b.n	801adb8 <_strtod_l+0x88>
 801ae3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801ae40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ae42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ae46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ae4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ae4e:	e7f0      	b.n	801ae32 <_strtod_l+0x102>
 801ae50:	f8df b180 	ldr.w	fp, [pc, #384]	; 801afd4 <_strtod_l+0x2a4>
 801ae54:	e7ed      	b.n	801ae32 <_strtod_l+0x102>
 801ae56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ae5a:	f04f 3aff 	mov.w	sl, #4294967295
 801ae5e:	e7e8      	b.n	801ae32 <_strtod_l+0x102>
 801ae60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ae62:	1c5a      	adds	r2, r3, #1
 801ae64:	9217      	str	r2, [sp, #92]	; 0x5c
 801ae66:	785b      	ldrb	r3, [r3, #1]
 801ae68:	2b30      	cmp	r3, #48	; 0x30
 801ae6a:	d0f9      	beq.n	801ae60 <_strtod_l+0x130>
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d0a3      	beq.n	801adb8 <_strtod_l+0x88>
 801ae70:	2301      	movs	r3, #1
 801ae72:	f04f 0900 	mov.w	r9, #0
 801ae76:	9304      	str	r3, [sp, #16]
 801ae78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ae7a:	9308      	str	r3, [sp, #32]
 801ae7c:	f8cd 901c 	str.w	r9, [sp, #28]
 801ae80:	464f      	mov	r7, r9
 801ae82:	220a      	movs	r2, #10
 801ae84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ae86:	7806      	ldrb	r6, [r0, #0]
 801ae88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ae8c:	b2d9      	uxtb	r1, r3
 801ae8e:	2909      	cmp	r1, #9
 801ae90:	d92a      	bls.n	801aee8 <_strtod_l+0x1b8>
 801ae92:	9905      	ldr	r1, [sp, #20]
 801ae94:	462a      	mov	r2, r5
 801ae96:	f002 ff2b 	bl	801dcf0 <strncmp>
 801ae9a:	b398      	cbz	r0, 801af04 <_strtod_l+0x1d4>
 801ae9c:	2000      	movs	r0, #0
 801ae9e:	4632      	mov	r2, r6
 801aea0:	463d      	mov	r5, r7
 801aea2:	9005      	str	r0, [sp, #20]
 801aea4:	4603      	mov	r3, r0
 801aea6:	2a65      	cmp	r2, #101	; 0x65
 801aea8:	d001      	beq.n	801aeae <_strtod_l+0x17e>
 801aeaa:	2a45      	cmp	r2, #69	; 0x45
 801aeac:	d118      	bne.n	801aee0 <_strtod_l+0x1b0>
 801aeae:	b91d      	cbnz	r5, 801aeb8 <_strtod_l+0x188>
 801aeb0:	9a04      	ldr	r2, [sp, #16]
 801aeb2:	4302      	orrs	r2, r0
 801aeb4:	d09e      	beq.n	801adf4 <_strtod_l+0xc4>
 801aeb6:	2500      	movs	r5, #0
 801aeb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801aebc:	f108 0201 	add.w	r2, r8, #1
 801aec0:	9217      	str	r2, [sp, #92]	; 0x5c
 801aec2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801aec6:	2a2b      	cmp	r2, #43	; 0x2b
 801aec8:	d075      	beq.n	801afb6 <_strtod_l+0x286>
 801aeca:	2a2d      	cmp	r2, #45	; 0x2d
 801aecc:	d07b      	beq.n	801afc6 <_strtod_l+0x296>
 801aece:	f04f 0c00 	mov.w	ip, #0
 801aed2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801aed6:	2909      	cmp	r1, #9
 801aed8:	f240 8082 	bls.w	801afe0 <_strtod_l+0x2b0>
 801aedc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801aee0:	2600      	movs	r6, #0
 801aee2:	e09d      	b.n	801b020 <_strtod_l+0x2f0>
 801aee4:	2300      	movs	r3, #0
 801aee6:	e7c4      	b.n	801ae72 <_strtod_l+0x142>
 801aee8:	2f08      	cmp	r7, #8
 801aeea:	bfd8      	it	le
 801aeec:	9907      	ldrle	r1, [sp, #28]
 801aeee:	f100 0001 	add.w	r0, r0, #1
 801aef2:	bfda      	itte	le
 801aef4:	fb02 3301 	mlale	r3, r2, r1, r3
 801aef8:	9307      	strle	r3, [sp, #28]
 801aefa:	fb02 3909 	mlagt	r9, r2, r9, r3
 801aefe:	3701      	adds	r7, #1
 801af00:	9017      	str	r0, [sp, #92]	; 0x5c
 801af02:	e7bf      	b.n	801ae84 <_strtod_l+0x154>
 801af04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801af06:	195a      	adds	r2, r3, r5
 801af08:	9217      	str	r2, [sp, #92]	; 0x5c
 801af0a:	5d5a      	ldrb	r2, [r3, r5]
 801af0c:	2f00      	cmp	r7, #0
 801af0e:	d037      	beq.n	801af80 <_strtod_l+0x250>
 801af10:	9005      	str	r0, [sp, #20]
 801af12:	463d      	mov	r5, r7
 801af14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801af18:	2b09      	cmp	r3, #9
 801af1a:	d912      	bls.n	801af42 <_strtod_l+0x212>
 801af1c:	2301      	movs	r3, #1
 801af1e:	e7c2      	b.n	801aea6 <_strtod_l+0x176>
 801af20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801af22:	1c5a      	adds	r2, r3, #1
 801af24:	9217      	str	r2, [sp, #92]	; 0x5c
 801af26:	785a      	ldrb	r2, [r3, #1]
 801af28:	3001      	adds	r0, #1
 801af2a:	2a30      	cmp	r2, #48	; 0x30
 801af2c:	d0f8      	beq.n	801af20 <_strtod_l+0x1f0>
 801af2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801af32:	2b08      	cmp	r3, #8
 801af34:	f200 84d9 	bhi.w	801b8ea <_strtod_l+0xbba>
 801af38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801af3a:	9005      	str	r0, [sp, #20]
 801af3c:	2000      	movs	r0, #0
 801af3e:	9308      	str	r3, [sp, #32]
 801af40:	4605      	mov	r5, r0
 801af42:	3a30      	subs	r2, #48	; 0x30
 801af44:	f100 0301 	add.w	r3, r0, #1
 801af48:	d014      	beq.n	801af74 <_strtod_l+0x244>
 801af4a:	9905      	ldr	r1, [sp, #20]
 801af4c:	4419      	add	r1, r3
 801af4e:	9105      	str	r1, [sp, #20]
 801af50:	462b      	mov	r3, r5
 801af52:	eb00 0e05 	add.w	lr, r0, r5
 801af56:	210a      	movs	r1, #10
 801af58:	4573      	cmp	r3, lr
 801af5a:	d113      	bne.n	801af84 <_strtod_l+0x254>
 801af5c:	182b      	adds	r3, r5, r0
 801af5e:	2b08      	cmp	r3, #8
 801af60:	f105 0501 	add.w	r5, r5, #1
 801af64:	4405      	add	r5, r0
 801af66:	dc1c      	bgt.n	801afa2 <_strtod_l+0x272>
 801af68:	9907      	ldr	r1, [sp, #28]
 801af6a:	230a      	movs	r3, #10
 801af6c:	fb03 2301 	mla	r3, r3, r1, r2
 801af70:	9307      	str	r3, [sp, #28]
 801af72:	2300      	movs	r3, #0
 801af74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801af76:	1c51      	adds	r1, r2, #1
 801af78:	9117      	str	r1, [sp, #92]	; 0x5c
 801af7a:	7852      	ldrb	r2, [r2, #1]
 801af7c:	4618      	mov	r0, r3
 801af7e:	e7c9      	b.n	801af14 <_strtod_l+0x1e4>
 801af80:	4638      	mov	r0, r7
 801af82:	e7d2      	b.n	801af2a <_strtod_l+0x1fa>
 801af84:	2b08      	cmp	r3, #8
 801af86:	dc04      	bgt.n	801af92 <_strtod_l+0x262>
 801af88:	9e07      	ldr	r6, [sp, #28]
 801af8a:	434e      	muls	r6, r1
 801af8c:	9607      	str	r6, [sp, #28]
 801af8e:	3301      	adds	r3, #1
 801af90:	e7e2      	b.n	801af58 <_strtod_l+0x228>
 801af92:	f103 0c01 	add.w	ip, r3, #1
 801af96:	f1bc 0f10 	cmp.w	ip, #16
 801af9a:	bfd8      	it	le
 801af9c:	fb01 f909 	mulle.w	r9, r1, r9
 801afa0:	e7f5      	b.n	801af8e <_strtod_l+0x25e>
 801afa2:	2d10      	cmp	r5, #16
 801afa4:	bfdc      	itt	le
 801afa6:	230a      	movle	r3, #10
 801afa8:	fb03 2909 	mlale	r9, r3, r9, r2
 801afac:	e7e1      	b.n	801af72 <_strtod_l+0x242>
 801afae:	2300      	movs	r3, #0
 801afb0:	9305      	str	r3, [sp, #20]
 801afb2:	2301      	movs	r3, #1
 801afb4:	e77c      	b.n	801aeb0 <_strtod_l+0x180>
 801afb6:	f04f 0c00 	mov.w	ip, #0
 801afba:	f108 0202 	add.w	r2, r8, #2
 801afbe:	9217      	str	r2, [sp, #92]	; 0x5c
 801afc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801afc4:	e785      	b.n	801aed2 <_strtod_l+0x1a2>
 801afc6:	f04f 0c01 	mov.w	ip, #1
 801afca:	e7f6      	b.n	801afba <_strtod_l+0x28a>
 801afcc:	08052b30 	.word	0x08052b30
 801afd0:	080528e4 	.word	0x080528e4
 801afd4:	7ff00000 	.word	0x7ff00000
 801afd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801afda:	1c51      	adds	r1, r2, #1
 801afdc:	9117      	str	r1, [sp, #92]	; 0x5c
 801afde:	7852      	ldrb	r2, [r2, #1]
 801afe0:	2a30      	cmp	r2, #48	; 0x30
 801afe2:	d0f9      	beq.n	801afd8 <_strtod_l+0x2a8>
 801afe4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801afe8:	2908      	cmp	r1, #8
 801afea:	f63f af79 	bhi.w	801aee0 <_strtod_l+0x1b0>
 801afee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801aff2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aff4:	9206      	str	r2, [sp, #24]
 801aff6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aff8:	1c51      	adds	r1, r2, #1
 801affa:	9117      	str	r1, [sp, #92]	; 0x5c
 801affc:	7852      	ldrb	r2, [r2, #1]
 801affe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801b002:	2e09      	cmp	r6, #9
 801b004:	d937      	bls.n	801b076 <_strtod_l+0x346>
 801b006:	9e06      	ldr	r6, [sp, #24]
 801b008:	1b89      	subs	r1, r1, r6
 801b00a:	2908      	cmp	r1, #8
 801b00c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b010:	dc02      	bgt.n	801b018 <_strtod_l+0x2e8>
 801b012:	4576      	cmp	r6, lr
 801b014:	bfa8      	it	ge
 801b016:	4676      	movge	r6, lr
 801b018:	f1bc 0f00 	cmp.w	ip, #0
 801b01c:	d000      	beq.n	801b020 <_strtod_l+0x2f0>
 801b01e:	4276      	negs	r6, r6
 801b020:	2d00      	cmp	r5, #0
 801b022:	d14d      	bne.n	801b0c0 <_strtod_l+0x390>
 801b024:	9904      	ldr	r1, [sp, #16]
 801b026:	4301      	orrs	r1, r0
 801b028:	f47f aec6 	bne.w	801adb8 <_strtod_l+0x88>
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	f47f aee1 	bne.w	801adf4 <_strtod_l+0xc4>
 801b032:	2a69      	cmp	r2, #105	; 0x69
 801b034:	d027      	beq.n	801b086 <_strtod_l+0x356>
 801b036:	dc24      	bgt.n	801b082 <_strtod_l+0x352>
 801b038:	2a49      	cmp	r2, #73	; 0x49
 801b03a:	d024      	beq.n	801b086 <_strtod_l+0x356>
 801b03c:	2a4e      	cmp	r2, #78	; 0x4e
 801b03e:	f47f aed9 	bne.w	801adf4 <_strtod_l+0xc4>
 801b042:	499f      	ldr	r1, [pc, #636]	; (801b2c0 <_strtod_l+0x590>)
 801b044:	a817      	add	r0, sp, #92	; 0x5c
 801b046:	f001 fe49 	bl	801ccdc <__match>
 801b04a:	2800      	cmp	r0, #0
 801b04c:	f43f aed2 	beq.w	801adf4 <_strtod_l+0xc4>
 801b050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b052:	781b      	ldrb	r3, [r3, #0]
 801b054:	2b28      	cmp	r3, #40	; 0x28
 801b056:	d12d      	bne.n	801b0b4 <_strtod_l+0x384>
 801b058:	499a      	ldr	r1, [pc, #616]	; (801b2c4 <_strtod_l+0x594>)
 801b05a:	aa1a      	add	r2, sp, #104	; 0x68
 801b05c:	a817      	add	r0, sp, #92	; 0x5c
 801b05e:	f001 fe51 	bl	801cd04 <__hexnan>
 801b062:	2805      	cmp	r0, #5
 801b064:	d126      	bne.n	801b0b4 <_strtod_l+0x384>
 801b066:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b068:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801b06c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b070:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b074:	e6a0      	b.n	801adb8 <_strtod_l+0x88>
 801b076:	210a      	movs	r1, #10
 801b078:	fb01 2e0e 	mla	lr, r1, lr, r2
 801b07c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b080:	e7b9      	b.n	801aff6 <_strtod_l+0x2c6>
 801b082:	2a6e      	cmp	r2, #110	; 0x6e
 801b084:	e7db      	b.n	801b03e <_strtod_l+0x30e>
 801b086:	4990      	ldr	r1, [pc, #576]	; (801b2c8 <_strtod_l+0x598>)
 801b088:	a817      	add	r0, sp, #92	; 0x5c
 801b08a:	f001 fe27 	bl	801ccdc <__match>
 801b08e:	2800      	cmp	r0, #0
 801b090:	f43f aeb0 	beq.w	801adf4 <_strtod_l+0xc4>
 801b094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b096:	498d      	ldr	r1, [pc, #564]	; (801b2cc <_strtod_l+0x59c>)
 801b098:	3b01      	subs	r3, #1
 801b09a:	a817      	add	r0, sp, #92	; 0x5c
 801b09c:	9317      	str	r3, [sp, #92]	; 0x5c
 801b09e:	f001 fe1d 	bl	801ccdc <__match>
 801b0a2:	b910      	cbnz	r0, 801b0aa <_strtod_l+0x37a>
 801b0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b0a6:	3301      	adds	r3, #1
 801b0a8:	9317      	str	r3, [sp, #92]	; 0x5c
 801b0aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 801b2dc <_strtod_l+0x5ac>
 801b0ae:	f04f 0a00 	mov.w	sl, #0
 801b0b2:	e681      	b.n	801adb8 <_strtod_l+0x88>
 801b0b4:	4886      	ldr	r0, [pc, #536]	; (801b2d0 <_strtod_l+0x5a0>)
 801b0b6:	f002 fe03 	bl	801dcc0 <nan>
 801b0ba:	ec5b ab10 	vmov	sl, fp, d0
 801b0be:	e67b      	b.n	801adb8 <_strtod_l+0x88>
 801b0c0:	9b05      	ldr	r3, [sp, #20]
 801b0c2:	9807      	ldr	r0, [sp, #28]
 801b0c4:	1af3      	subs	r3, r6, r3
 801b0c6:	2f00      	cmp	r7, #0
 801b0c8:	bf08      	it	eq
 801b0ca:	462f      	moveq	r7, r5
 801b0cc:	2d10      	cmp	r5, #16
 801b0ce:	9306      	str	r3, [sp, #24]
 801b0d0:	46a8      	mov	r8, r5
 801b0d2:	bfa8      	it	ge
 801b0d4:	f04f 0810 	movge.w	r8, #16
 801b0d8:	f7fe f994 	bl	8019404 <__aeabi_ui2d>
 801b0dc:	2d09      	cmp	r5, #9
 801b0de:	4682      	mov	sl, r0
 801b0e0:	468b      	mov	fp, r1
 801b0e2:	dd13      	ble.n	801b10c <_strtod_l+0x3dc>
 801b0e4:	4b7b      	ldr	r3, [pc, #492]	; (801b2d4 <_strtod_l+0x5a4>)
 801b0e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b0ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b0ee:	f7fe fa03 	bl	80194f8 <__aeabi_dmul>
 801b0f2:	4682      	mov	sl, r0
 801b0f4:	4648      	mov	r0, r9
 801b0f6:	468b      	mov	fp, r1
 801b0f8:	f7fe f984 	bl	8019404 <__aeabi_ui2d>
 801b0fc:	4602      	mov	r2, r0
 801b0fe:	460b      	mov	r3, r1
 801b100:	4650      	mov	r0, sl
 801b102:	4659      	mov	r1, fp
 801b104:	f7fe f842 	bl	801918c <__adddf3>
 801b108:	4682      	mov	sl, r0
 801b10a:	468b      	mov	fp, r1
 801b10c:	2d0f      	cmp	r5, #15
 801b10e:	dc38      	bgt.n	801b182 <_strtod_l+0x452>
 801b110:	9b06      	ldr	r3, [sp, #24]
 801b112:	2b00      	cmp	r3, #0
 801b114:	f43f ae50 	beq.w	801adb8 <_strtod_l+0x88>
 801b118:	dd24      	ble.n	801b164 <_strtod_l+0x434>
 801b11a:	2b16      	cmp	r3, #22
 801b11c:	dc0b      	bgt.n	801b136 <_strtod_l+0x406>
 801b11e:	496d      	ldr	r1, [pc, #436]	; (801b2d4 <_strtod_l+0x5a4>)
 801b120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b124:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b128:	4652      	mov	r2, sl
 801b12a:	465b      	mov	r3, fp
 801b12c:	f7fe f9e4 	bl	80194f8 <__aeabi_dmul>
 801b130:	4682      	mov	sl, r0
 801b132:	468b      	mov	fp, r1
 801b134:	e640      	b.n	801adb8 <_strtod_l+0x88>
 801b136:	9a06      	ldr	r2, [sp, #24]
 801b138:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b13c:	4293      	cmp	r3, r2
 801b13e:	db20      	blt.n	801b182 <_strtod_l+0x452>
 801b140:	4c64      	ldr	r4, [pc, #400]	; (801b2d4 <_strtod_l+0x5a4>)
 801b142:	f1c5 050f 	rsb	r5, r5, #15
 801b146:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b14a:	4652      	mov	r2, sl
 801b14c:	465b      	mov	r3, fp
 801b14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b152:	f7fe f9d1 	bl	80194f8 <__aeabi_dmul>
 801b156:	9b06      	ldr	r3, [sp, #24]
 801b158:	1b5d      	subs	r5, r3, r5
 801b15a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b15e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b162:	e7e3      	b.n	801b12c <_strtod_l+0x3fc>
 801b164:	9b06      	ldr	r3, [sp, #24]
 801b166:	3316      	adds	r3, #22
 801b168:	db0b      	blt.n	801b182 <_strtod_l+0x452>
 801b16a:	9b05      	ldr	r3, [sp, #20]
 801b16c:	1b9e      	subs	r6, r3, r6
 801b16e:	4b59      	ldr	r3, [pc, #356]	; (801b2d4 <_strtod_l+0x5a4>)
 801b170:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801b174:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b178:	4650      	mov	r0, sl
 801b17a:	4659      	mov	r1, fp
 801b17c:	f7fe fae6 	bl	801974c <__aeabi_ddiv>
 801b180:	e7d6      	b.n	801b130 <_strtod_l+0x400>
 801b182:	9b06      	ldr	r3, [sp, #24]
 801b184:	eba5 0808 	sub.w	r8, r5, r8
 801b188:	4498      	add	r8, r3
 801b18a:	f1b8 0f00 	cmp.w	r8, #0
 801b18e:	dd74      	ble.n	801b27a <_strtod_l+0x54a>
 801b190:	f018 030f 	ands.w	r3, r8, #15
 801b194:	d00a      	beq.n	801b1ac <_strtod_l+0x47c>
 801b196:	494f      	ldr	r1, [pc, #316]	; (801b2d4 <_strtod_l+0x5a4>)
 801b198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b19c:	4652      	mov	r2, sl
 801b19e:	465b      	mov	r3, fp
 801b1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1a4:	f7fe f9a8 	bl	80194f8 <__aeabi_dmul>
 801b1a8:	4682      	mov	sl, r0
 801b1aa:	468b      	mov	fp, r1
 801b1ac:	f038 080f 	bics.w	r8, r8, #15
 801b1b0:	d04f      	beq.n	801b252 <_strtod_l+0x522>
 801b1b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b1b6:	dd22      	ble.n	801b1fe <_strtod_l+0x4ce>
 801b1b8:	2500      	movs	r5, #0
 801b1ba:	462e      	mov	r6, r5
 801b1bc:	9507      	str	r5, [sp, #28]
 801b1be:	9505      	str	r5, [sp, #20]
 801b1c0:	2322      	movs	r3, #34	; 0x22
 801b1c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b2dc <_strtod_l+0x5ac>
 801b1c6:	6023      	str	r3, [r4, #0]
 801b1c8:	f04f 0a00 	mov.w	sl, #0
 801b1cc:	9b07      	ldr	r3, [sp, #28]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	f43f adf2 	beq.w	801adb8 <_strtod_l+0x88>
 801b1d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b1d6:	4620      	mov	r0, r4
 801b1d8:	f001 fe9c 	bl	801cf14 <_Bfree>
 801b1dc:	9905      	ldr	r1, [sp, #20]
 801b1de:	4620      	mov	r0, r4
 801b1e0:	f001 fe98 	bl	801cf14 <_Bfree>
 801b1e4:	4631      	mov	r1, r6
 801b1e6:	4620      	mov	r0, r4
 801b1e8:	f001 fe94 	bl	801cf14 <_Bfree>
 801b1ec:	9907      	ldr	r1, [sp, #28]
 801b1ee:	4620      	mov	r0, r4
 801b1f0:	f001 fe90 	bl	801cf14 <_Bfree>
 801b1f4:	4629      	mov	r1, r5
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	f001 fe8c 	bl	801cf14 <_Bfree>
 801b1fc:	e5dc      	b.n	801adb8 <_strtod_l+0x88>
 801b1fe:	4b36      	ldr	r3, [pc, #216]	; (801b2d8 <_strtod_l+0x5a8>)
 801b200:	9304      	str	r3, [sp, #16]
 801b202:	2300      	movs	r3, #0
 801b204:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b208:	4650      	mov	r0, sl
 801b20a:	4659      	mov	r1, fp
 801b20c:	4699      	mov	r9, r3
 801b20e:	f1b8 0f01 	cmp.w	r8, #1
 801b212:	dc21      	bgt.n	801b258 <_strtod_l+0x528>
 801b214:	b10b      	cbz	r3, 801b21a <_strtod_l+0x4ea>
 801b216:	4682      	mov	sl, r0
 801b218:	468b      	mov	fp, r1
 801b21a:	4b2f      	ldr	r3, [pc, #188]	; (801b2d8 <_strtod_l+0x5a8>)
 801b21c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b220:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b224:	4652      	mov	r2, sl
 801b226:	465b      	mov	r3, fp
 801b228:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b22c:	f7fe f964 	bl	80194f8 <__aeabi_dmul>
 801b230:	4b2a      	ldr	r3, [pc, #168]	; (801b2dc <_strtod_l+0x5ac>)
 801b232:	460a      	mov	r2, r1
 801b234:	400b      	ands	r3, r1
 801b236:	492a      	ldr	r1, [pc, #168]	; (801b2e0 <_strtod_l+0x5b0>)
 801b238:	428b      	cmp	r3, r1
 801b23a:	4682      	mov	sl, r0
 801b23c:	d8bc      	bhi.n	801b1b8 <_strtod_l+0x488>
 801b23e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b242:	428b      	cmp	r3, r1
 801b244:	bf86      	itte	hi
 801b246:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801b2e4 <_strtod_l+0x5b4>
 801b24a:	f04f 3aff 	movhi.w	sl, #4294967295
 801b24e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b252:	2300      	movs	r3, #0
 801b254:	9304      	str	r3, [sp, #16]
 801b256:	e084      	b.n	801b362 <_strtod_l+0x632>
 801b258:	f018 0f01 	tst.w	r8, #1
 801b25c:	d005      	beq.n	801b26a <_strtod_l+0x53a>
 801b25e:	9b04      	ldr	r3, [sp, #16]
 801b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b264:	f7fe f948 	bl	80194f8 <__aeabi_dmul>
 801b268:	2301      	movs	r3, #1
 801b26a:	9a04      	ldr	r2, [sp, #16]
 801b26c:	3208      	adds	r2, #8
 801b26e:	f109 0901 	add.w	r9, r9, #1
 801b272:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b276:	9204      	str	r2, [sp, #16]
 801b278:	e7c9      	b.n	801b20e <_strtod_l+0x4de>
 801b27a:	d0ea      	beq.n	801b252 <_strtod_l+0x522>
 801b27c:	f1c8 0800 	rsb	r8, r8, #0
 801b280:	f018 020f 	ands.w	r2, r8, #15
 801b284:	d00a      	beq.n	801b29c <_strtod_l+0x56c>
 801b286:	4b13      	ldr	r3, [pc, #76]	; (801b2d4 <_strtod_l+0x5a4>)
 801b288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b28c:	4650      	mov	r0, sl
 801b28e:	4659      	mov	r1, fp
 801b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b294:	f7fe fa5a 	bl	801974c <__aeabi_ddiv>
 801b298:	4682      	mov	sl, r0
 801b29a:	468b      	mov	fp, r1
 801b29c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b2a0:	d0d7      	beq.n	801b252 <_strtod_l+0x522>
 801b2a2:	f1b8 0f1f 	cmp.w	r8, #31
 801b2a6:	dd1f      	ble.n	801b2e8 <_strtod_l+0x5b8>
 801b2a8:	2500      	movs	r5, #0
 801b2aa:	462e      	mov	r6, r5
 801b2ac:	9507      	str	r5, [sp, #28]
 801b2ae:	9505      	str	r5, [sp, #20]
 801b2b0:	2322      	movs	r3, #34	; 0x22
 801b2b2:	f04f 0a00 	mov.w	sl, #0
 801b2b6:	f04f 0b00 	mov.w	fp, #0
 801b2ba:	6023      	str	r3, [r4, #0]
 801b2bc:	e786      	b.n	801b1cc <_strtod_l+0x49c>
 801b2be:	bf00      	nop
 801b2c0:	080528b5 	.word	0x080528b5
 801b2c4:	080528f8 	.word	0x080528f8
 801b2c8:	080528ad 	.word	0x080528ad
 801b2cc:	08052a3c 	.word	0x08052a3c
 801b2d0:	08052ce8 	.word	0x08052ce8
 801b2d4:	08052bc8 	.word	0x08052bc8
 801b2d8:	08052ba0 	.word	0x08052ba0
 801b2dc:	7ff00000 	.word	0x7ff00000
 801b2e0:	7ca00000 	.word	0x7ca00000
 801b2e4:	7fefffff 	.word	0x7fefffff
 801b2e8:	f018 0310 	ands.w	r3, r8, #16
 801b2ec:	bf18      	it	ne
 801b2ee:	236a      	movne	r3, #106	; 0x6a
 801b2f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b6a0 <_strtod_l+0x970>
 801b2f4:	9304      	str	r3, [sp, #16]
 801b2f6:	4650      	mov	r0, sl
 801b2f8:	4659      	mov	r1, fp
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	f018 0f01 	tst.w	r8, #1
 801b300:	d004      	beq.n	801b30c <_strtod_l+0x5dc>
 801b302:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b306:	f7fe f8f7 	bl	80194f8 <__aeabi_dmul>
 801b30a:	2301      	movs	r3, #1
 801b30c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b310:	f109 0908 	add.w	r9, r9, #8
 801b314:	d1f2      	bne.n	801b2fc <_strtod_l+0x5cc>
 801b316:	b10b      	cbz	r3, 801b31c <_strtod_l+0x5ec>
 801b318:	4682      	mov	sl, r0
 801b31a:	468b      	mov	fp, r1
 801b31c:	9b04      	ldr	r3, [sp, #16]
 801b31e:	b1c3      	cbz	r3, 801b352 <_strtod_l+0x622>
 801b320:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b324:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b328:	2b00      	cmp	r3, #0
 801b32a:	4659      	mov	r1, fp
 801b32c:	dd11      	ble.n	801b352 <_strtod_l+0x622>
 801b32e:	2b1f      	cmp	r3, #31
 801b330:	f340 8124 	ble.w	801b57c <_strtod_l+0x84c>
 801b334:	2b34      	cmp	r3, #52	; 0x34
 801b336:	bfde      	ittt	le
 801b338:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b33c:	f04f 33ff 	movle.w	r3, #4294967295
 801b340:	fa03 f202 	lslle.w	r2, r3, r2
 801b344:	f04f 0a00 	mov.w	sl, #0
 801b348:	bfcc      	ite	gt
 801b34a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b34e:	ea02 0b01 	andle.w	fp, r2, r1
 801b352:	2200      	movs	r2, #0
 801b354:	2300      	movs	r3, #0
 801b356:	4650      	mov	r0, sl
 801b358:	4659      	mov	r1, fp
 801b35a:	f7fe fb35 	bl	80199c8 <__aeabi_dcmpeq>
 801b35e:	2800      	cmp	r0, #0
 801b360:	d1a2      	bne.n	801b2a8 <_strtod_l+0x578>
 801b362:	9b07      	ldr	r3, [sp, #28]
 801b364:	9300      	str	r3, [sp, #0]
 801b366:	9908      	ldr	r1, [sp, #32]
 801b368:	462b      	mov	r3, r5
 801b36a:	463a      	mov	r2, r7
 801b36c:	4620      	mov	r0, r4
 801b36e:	f001 fe39 	bl	801cfe4 <__s2b>
 801b372:	9007      	str	r0, [sp, #28]
 801b374:	2800      	cmp	r0, #0
 801b376:	f43f af1f 	beq.w	801b1b8 <_strtod_l+0x488>
 801b37a:	9b05      	ldr	r3, [sp, #20]
 801b37c:	1b9e      	subs	r6, r3, r6
 801b37e:	9b06      	ldr	r3, [sp, #24]
 801b380:	2b00      	cmp	r3, #0
 801b382:	bfb4      	ite	lt
 801b384:	4633      	movlt	r3, r6
 801b386:	2300      	movge	r3, #0
 801b388:	930c      	str	r3, [sp, #48]	; 0x30
 801b38a:	9b06      	ldr	r3, [sp, #24]
 801b38c:	2500      	movs	r5, #0
 801b38e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b392:	9312      	str	r3, [sp, #72]	; 0x48
 801b394:	462e      	mov	r6, r5
 801b396:	9b07      	ldr	r3, [sp, #28]
 801b398:	4620      	mov	r0, r4
 801b39a:	6859      	ldr	r1, [r3, #4]
 801b39c:	f001 fd7a 	bl	801ce94 <_Balloc>
 801b3a0:	9005      	str	r0, [sp, #20]
 801b3a2:	2800      	cmp	r0, #0
 801b3a4:	f43f af0c 	beq.w	801b1c0 <_strtod_l+0x490>
 801b3a8:	9b07      	ldr	r3, [sp, #28]
 801b3aa:	691a      	ldr	r2, [r3, #16]
 801b3ac:	3202      	adds	r2, #2
 801b3ae:	f103 010c 	add.w	r1, r3, #12
 801b3b2:	0092      	lsls	r2, r2, #2
 801b3b4:	300c      	adds	r0, #12
 801b3b6:	f001 fd5f 	bl	801ce78 <memcpy>
 801b3ba:	ec4b ab10 	vmov	d0, sl, fp
 801b3be:	aa1a      	add	r2, sp, #104	; 0x68
 801b3c0:	a919      	add	r1, sp, #100	; 0x64
 801b3c2:	4620      	mov	r0, r4
 801b3c4:	f002 f954 	bl	801d670 <__d2b>
 801b3c8:	ec4b ab18 	vmov	d8, sl, fp
 801b3cc:	9018      	str	r0, [sp, #96]	; 0x60
 801b3ce:	2800      	cmp	r0, #0
 801b3d0:	f43f aef6 	beq.w	801b1c0 <_strtod_l+0x490>
 801b3d4:	2101      	movs	r1, #1
 801b3d6:	4620      	mov	r0, r4
 801b3d8:	f001 fe9e 	bl	801d118 <__i2b>
 801b3dc:	4606      	mov	r6, r0
 801b3de:	2800      	cmp	r0, #0
 801b3e0:	f43f aeee 	beq.w	801b1c0 <_strtod_l+0x490>
 801b3e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b3e6:	9904      	ldr	r1, [sp, #16]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	bfab      	itete	ge
 801b3ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b3ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b3f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b3f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801b3f6:	bfac      	ite	ge
 801b3f8:	eb03 0902 	addge.w	r9, r3, r2
 801b3fc:	1ad7      	sublt	r7, r2, r3
 801b3fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b400:	eba3 0801 	sub.w	r8, r3, r1
 801b404:	4490      	add	r8, r2
 801b406:	4ba1      	ldr	r3, [pc, #644]	; (801b68c <_strtod_l+0x95c>)
 801b408:	f108 38ff 	add.w	r8, r8, #4294967295
 801b40c:	4598      	cmp	r8, r3
 801b40e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b412:	f280 80c7 	bge.w	801b5a4 <_strtod_l+0x874>
 801b416:	eba3 0308 	sub.w	r3, r3, r8
 801b41a:	2b1f      	cmp	r3, #31
 801b41c:	eba2 0203 	sub.w	r2, r2, r3
 801b420:	f04f 0101 	mov.w	r1, #1
 801b424:	f300 80b1 	bgt.w	801b58a <_strtod_l+0x85a>
 801b428:	fa01 f303 	lsl.w	r3, r1, r3
 801b42c:	930d      	str	r3, [sp, #52]	; 0x34
 801b42e:	2300      	movs	r3, #0
 801b430:	9308      	str	r3, [sp, #32]
 801b432:	eb09 0802 	add.w	r8, r9, r2
 801b436:	9b04      	ldr	r3, [sp, #16]
 801b438:	45c1      	cmp	r9, r8
 801b43a:	4417      	add	r7, r2
 801b43c:	441f      	add	r7, r3
 801b43e:	464b      	mov	r3, r9
 801b440:	bfa8      	it	ge
 801b442:	4643      	movge	r3, r8
 801b444:	42bb      	cmp	r3, r7
 801b446:	bfa8      	it	ge
 801b448:	463b      	movge	r3, r7
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	bfc2      	ittt	gt
 801b44e:	eba8 0803 	subgt.w	r8, r8, r3
 801b452:	1aff      	subgt	r7, r7, r3
 801b454:	eba9 0903 	subgt.w	r9, r9, r3
 801b458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	dd17      	ble.n	801b48e <_strtod_l+0x75e>
 801b45e:	4631      	mov	r1, r6
 801b460:	461a      	mov	r2, r3
 801b462:	4620      	mov	r0, r4
 801b464:	f001 ff18 	bl	801d298 <__pow5mult>
 801b468:	4606      	mov	r6, r0
 801b46a:	2800      	cmp	r0, #0
 801b46c:	f43f aea8 	beq.w	801b1c0 <_strtod_l+0x490>
 801b470:	4601      	mov	r1, r0
 801b472:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b474:	4620      	mov	r0, r4
 801b476:	f001 fe65 	bl	801d144 <__multiply>
 801b47a:	900b      	str	r0, [sp, #44]	; 0x2c
 801b47c:	2800      	cmp	r0, #0
 801b47e:	f43f ae9f 	beq.w	801b1c0 <_strtod_l+0x490>
 801b482:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b484:	4620      	mov	r0, r4
 801b486:	f001 fd45 	bl	801cf14 <_Bfree>
 801b48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b48c:	9318      	str	r3, [sp, #96]	; 0x60
 801b48e:	f1b8 0f00 	cmp.w	r8, #0
 801b492:	f300 808c 	bgt.w	801b5ae <_strtod_l+0x87e>
 801b496:	9b06      	ldr	r3, [sp, #24]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	dd08      	ble.n	801b4ae <_strtod_l+0x77e>
 801b49c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b49e:	9905      	ldr	r1, [sp, #20]
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f001 fef9 	bl	801d298 <__pow5mult>
 801b4a6:	9005      	str	r0, [sp, #20]
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	f43f ae89 	beq.w	801b1c0 <_strtod_l+0x490>
 801b4ae:	2f00      	cmp	r7, #0
 801b4b0:	dd08      	ble.n	801b4c4 <_strtod_l+0x794>
 801b4b2:	9905      	ldr	r1, [sp, #20]
 801b4b4:	463a      	mov	r2, r7
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f001 ff48 	bl	801d34c <__lshift>
 801b4bc:	9005      	str	r0, [sp, #20]
 801b4be:	2800      	cmp	r0, #0
 801b4c0:	f43f ae7e 	beq.w	801b1c0 <_strtod_l+0x490>
 801b4c4:	f1b9 0f00 	cmp.w	r9, #0
 801b4c8:	dd08      	ble.n	801b4dc <_strtod_l+0x7ac>
 801b4ca:	4631      	mov	r1, r6
 801b4cc:	464a      	mov	r2, r9
 801b4ce:	4620      	mov	r0, r4
 801b4d0:	f001 ff3c 	bl	801d34c <__lshift>
 801b4d4:	4606      	mov	r6, r0
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	f43f ae72 	beq.w	801b1c0 <_strtod_l+0x490>
 801b4dc:	9a05      	ldr	r2, [sp, #20]
 801b4de:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b4e0:	4620      	mov	r0, r4
 801b4e2:	f001 ffbf 	bl	801d464 <__mdiff>
 801b4e6:	4605      	mov	r5, r0
 801b4e8:	2800      	cmp	r0, #0
 801b4ea:	f43f ae69 	beq.w	801b1c0 <_strtod_l+0x490>
 801b4ee:	68c3      	ldr	r3, [r0, #12]
 801b4f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	60c3      	str	r3, [r0, #12]
 801b4f6:	4631      	mov	r1, r6
 801b4f8:	f001 ff98 	bl	801d42c <__mcmp>
 801b4fc:	2800      	cmp	r0, #0
 801b4fe:	da60      	bge.n	801b5c2 <_strtod_l+0x892>
 801b500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b502:	ea53 030a 	orrs.w	r3, r3, sl
 801b506:	f040 8082 	bne.w	801b60e <_strtod_l+0x8de>
 801b50a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d17d      	bne.n	801b60e <_strtod_l+0x8de>
 801b512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b516:	0d1b      	lsrs	r3, r3, #20
 801b518:	051b      	lsls	r3, r3, #20
 801b51a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b51e:	d976      	bls.n	801b60e <_strtod_l+0x8de>
 801b520:	696b      	ldr	r3, [r5, #20]
 801b522:	b913      	cbnz	r3, 801b52a <_strtod_l+0x7fa>
 801b524:	692b      	ldr	r3, [r5, #16]
 801b526:	2b01      	cmp	r3, #1
 801b528:	dd71      	ble.n	801b60e <_strtod_l+0x8de>
 801b52a:	4629      	mov	r1, r5
 801b52c:	2201      	movs	r2, #1
 801b52e:	4620      	mov	r0, r4
 801b530:	f001 ff0c 	bl	801d34c <__lshift>
 801b534:	4631      	mov	r1, r6
 801b536:	4605      	mov	r5, r0
 801b538:	f001 ff78 	bl	801d42c <__mcmp>
 801b53c:	2800      	cmp	r0, #0
 801b53e:	dd66      	ble.n	801b60e <_strtod_l+0x8de>
 801b540:	9904      	ldr	r1, [sp, #16]
 801b542:	4a53      	ldr	r2, [pc, #332]	; (801b690 <_strtod_l+0x960>)
 801b544:	465b      	mov	r3, fp
 801b546:	2900      	cmp	r1, #0
 801b548:	f000 8081 	beq.w	801b64e <_strtod_l+0x91e>
 801b54c:	ea02 010b 	and.w	r1, r2, fp
 801b550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b554:	dc7b      	bgt.n	801b64e <_strtod_l+0x91e>
 801b556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b55a:	f77f aea9 	ble.w	801b2b0 <_strtod_l+0x580>
 801b55e:	4b4d      	ldr	r3, [pc, #308]	; (801b694 <_strtod_l+0x964>)
 801b560:	4650      	mov	r0, sl
 801b562:	4659      	mov	r1, fp
 801b564:	2200      	movs	r2, #0
 801b566:	f7fd ffc7 	bl	80194f8 <__aeabi_dmul>
 801b56a:	460b      	mov	r3, r1
 801b56c:	4303      	orrs	r3, r0
 801b56e:	bf08      	it	eq
 801b570:	2322      	moveq	r3, #34	; 0x22
 801b572:	4682      	mov	sl, r0
 801b574:	468b      	mov	fp, r1
 801b576:	bf08      	it	eq
 801b578:	6023      	streq	r3, [r4, #0]
 801b57a:	e62b      	b.n	801b1d4 <_strtod_l+0x4a4>
 801b57c:	f04f 32ff 	mov.w	r2, #4294967295
 801b580:	fa02 f303 	lsl.w	r3, r2, r3
 801b584:	ea03 0a0a 	and.w	sl, r3, sl
 801b588:	e6e3      	b.n	801b352 <_strtod_l+0x622>
 801b58a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b58e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b592:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b596:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b59a:	fa01 f308 	lsl.w	r3, r1, r8
 801b59e:	9308      	str	r3, [sp, #32]
 801b5a0:	910d      	str	r1, [sp, #52]	; 0x34
 801b5a2:	e746      	b.n	801b432 <_strtod_l+0x702>
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	9308      	str	r3, [sp, #32]
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	930d      	str	r3, [sp, #52]	; 0x34
 801b5ac:	e741      	b.n	801b432 <_strtod_l+0x702>
 801b5ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b5b0:	4642      	mov	r2, r8
 801b5b2:	4620      	mov	r0, r4
 801b5b4:	f001 feca 	bl	801d34c <__lshift>
 801b5b8:	9018      	str	r0, [sp, #96]	; 0x60
 801b5ba:	2800      	cmp	r0, #0
 801b5bc:	f47f af6b 	bne.w	801b496 <_strtod_l+0x766>
 801b5c0:	e5fe      	b.n	801b1c0 <_strtod_l+0x490>
 801b5c2:	465f      	mov	r7, fp
 801b5c4:	d16e      	bne.n	801b6a4 <_strtod_l+0x974>
 801b5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b5cc:	b342      	cbz	r2, 801b620 <_strtod_l+0x8f0>
 801b5ce:	4a32      	ldr	r2, [pc, #200]	; (801b698 <_strtod_l+0x968>)
 801b5d0:	4293      	cmp	r3, r2
 801b5d2:	d128      	bne.n	801b626 <_strtod_l+0x8f6>
 801b5d4:	9b04      	ldr	r3, [sp, #16]
 801b5d6:	4651      	mov	r1, sl
 801b5d8:	b1eb      	cbz	r3, 801b616 <_strtod_l+0x8e6>
 801b5da:	4b2d      	ldr	r3, [pc, #180]	; (801b690 <_strtod_l+0x960>)
 801b5dc:	403b      	ands	r3, r7
 801b5de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b5e2:	f04f 32ff 	mov.w	r2, #4294967295
 801b5e6:	d819      	bhi.n	801b61c <_strtod_l+0x8ec>
 801b5e8:	0d1b      	lsrs	r3, r3, #20
 801b5ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b5ee:	fa02 f303 	lsl.w	r3, r2, r3
 801b5f2:	4299      	cmp	r1, r3
 801b5f4:	d117      	bne.n	801b626 <_strtod_l+0x8f6>
 801b5f6:	4b29      	ldr	r3, [pc, #164]	; (801b69c <_strtod_l+0x96c>)
 801b5f8:	429f      	cmp	r7, r3
 801b5fa:	d102      	bne.n	801b602 <_strtod_l+0x8d2>
 801b5fc:	3101      	adds	r1, #1
 801b5fe:	f43f addf 	beq.w	801b1c0 <_strtod_l+0x490>
 801b602:	4b23      	ldr	r3, [pc, #140]	; (801b690 <_strtod_l+0x960>)
 801b604:	403b      	ands	r3, r7
 801b606:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b60a:	f04f 0a00 	mov.w	sl, #0
 801b60e:	9b04      	ldr	r3, [sp, #16]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d1a4      	bne.n	801b55e <_strtod_l+0x82e>
 801b614:	e5de      	b.n	801b1d4 <_strtod_l+0x4a4>
 801b616:	f04f 33ff 	mov.w	r3, #4294967295
 801b61a:	e7ea      	b.n	801b5f2 <_strtod_l+0x8c2>
 801b61c:	4613      	mov	r3, r2
 801b61e:	e7e8      	b.n	801b5f2 <_strtod_l+0x8c2>
 801b620:	ea53 030a 	orrs.w	r3, r3, sl
 801b624:	d08c      	beq.n	801b540 <_strtod_l+0x810>
 801b626:	9b08      	ldr	r3, [sp, #32]
 801b628:	b1db      	cbz	r3, 801b662 <_strtod_l+0x932>
 801b62a:	423b      	tst	r3, r7
 801b62c:	d0ef      	beq.n	801b60e <_strtod_l+0x8de>
 801b62e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b630:	9a04      	ldr	r2, [sp, #16]
 801b632:	4650      	mov	r0, sl
 801b634:	4659      	mov	r1, fp
 801b636:	b1c3      	cbz	r3, 801b66a <_strtod_l+0x93a>
 801b638:	f7ff fb5e 	bl	801acf8 <sulp>
 801b63c:	4602      	mov	r2, r0
 801b63e:	460b      	mov	r3, r1
 801b640:	ec51 0b18 	vmov	r0, r1, d8
 801b644:	f7fd fda2 	bl	801918c <__adddf3>
 801b648:	4682      	mov	sl, r0
 801b64a:	468b      	mov	fp, r1
 801b64c:	e7df      	b.n	801b60e <_strtod_l+0x8de>
 801b64e:	4013      	ands	r3, r2
 801b650:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b654:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b658:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b65c:	f04f 3aff 	mov.w	sl, #4294967295
 801b660:	e7d5      	b.n	801b60e <_strtod_l+0x8de>
 801b662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b664:	ea13 0f0a 	tst.w	r3, sl
 801b668:	e7e0      	b.n	801b62c <_strtod_l+0x8fc>
 801b66a:	f7ff fb45 	bl	801acf8 <sulp>
 801b66e:	4602      	mov	r2, r0
 801b670:	460b      	mov	r3, r1
 801b672:	ec51 0b18 	vmov	r0, r1, d8
 801b676:	f7fd fd87 	bl	8019188 <__aeabi_dsub>
 801b67a:	2200      	movs	r2, #0
 801b67c:	2300      	movs	r3, #0
 801b67e:	4682      	mov	sl, r0
 801b680:	468b      	mov	fp, r1
 801b682:	f7fe f9a1 	bl	80199c8 <__aeabi_dcmpeq>
 801b686:	2800      	cmp	r0, #0
 801b688:	d0c1      	beq.n	801b60e <_strtod_l+0x8de>
 801b68a:	e611      	b.n	801b2b0 <_strtod_l+0x580>
 801b68c:	fffffc02 	.word	0xfffffc02
 801b690:	7ff00000 	.word	0x7ff00000
 801b694:	39500000 	.word	0x39500000
 801b698:	000fffff 	.word	0x000fffff
 801b69c:	7fefffff 	.word	0x7fefffff
 801b6a0:	08052910 	.word	0x08052910
 801b6a4:	4631      	mov	r1, r6
 801b6a6:	4628      	mov	r0, r5
 801b6a8:	f002 f83e 	bl	801d728 <__ratio>
 801b6ac:	ec59 8b10 	vmov	r8, r9, d0
 801b6b0:	ee10 0a10 	vmov	r0, s0
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b6ba:	4649      	mov	r1, r9
 801b6bc:	f7fe f998 	bl	80199f0 <__aeabi_dcmple>
 801b6c0:	2800      	cmp	r0, #0
 801b6c2:	d07a      	beq.n	801b7ba <_strtod_l+0xa8a>
 801b6c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d04a      	beq.n	801b760 <_strtod_l+0xa30>
 801b6ca:	4b95      	ldr	r3, [pc, #596]	; (801b920 <_strtod_l+0xbf0>)
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b6d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b920 <_strtod_l+0xbf0>
 801b6d6:	f04f 0800 	mov.w	r8, #0
 801b6da:	4b92      	ldr	r3, [pc, #584]	; (801b924 <_strtod_l+0xbf4>)
 801b6dc:	403b      	ands	r3, r7
 801b6de:	930d      	str	r3, [sp, #52]	; 0x34
 801b6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6e2:	4b91      	ldr	r3, [pc, #580]	; (801b928 <_strtod_l+0xbf8>)
 801b6e4:	429a      	cmp	r2, r3
 801b6e6:	f040 80b0 	bne.w	801b84a <_strtod_l+0xb1a>
 801b6ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b6ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b6f2:	ec4b ab10 	vmov	d0, sl, fp
 801b6f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b6fa:	f001 ff3d 	bl	801d578 <__ulp>
 801b6fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b702:	ec53 2b10 	vmov	r2, r3, d0
 801b706:	f7fd fef7 	bl	80194f8 <__aeabi_dmul>
 801b70a:	4652      	mov	r2, sl
 801b70c:	465b      	mov	r3, fp
 801b70e:	f7fd fd3d 	bl	801918c <__adddf3>
 801b712:	460b      	mov	r3, r1
 801b714:	4983      	ldr	r1, [pc, #524]	; (801b924 <_strtod_l+0xbf4>)
 801b716:	4a85      	ldr	r2, [pc, #532]	; (801b92c <_strtod_l+0xbfc>)
 801b718:	4019      	ands	r1, r3
 801b71a:	4291      	cmp	r1, r2
 801b71c:	4682      	mov	sl, r0
 801b71e:	d960      	bls.n	801b7e2 <_strtod_l+0xab2>
 801b720:	ee18 3a90 	vmov	r3, s17
 801b724:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b728:	4293      	cmp	r3, r2
 801b72a:	d104      	bne.n	801b736 <_strtod_l+0xa06>
 801b72c:	ee18 3a10 	vmov	r3, s16
 801b730:	3301      	adds	r3, #1
 801b732:	f43f ad45 	beq.w	801b1c0 <_strtod_l+0x490>
 801b736:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b938 <_strtod_l+0xc08>
 801b73a:	f04f 3aff 	mov.w	sl, #4294967295
 801b73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b740:	4620      	mov	r0, r4
 801b742:	f001 fbe7 	bl	801cf14 <_Bfree>
 801b746:	9905      	ldr	r1, [sp, #20]
 801b748:	4620      	mov	r0, r4
 801b74a:	f001 fbe3 	bl	801cf14 <_Bfree>
 801b74e:	4631      	mov	r1, r6
 801b750:	4620      	mov	r0, r4
 801b752:	f001 fbdf 	bl	801cf14 <_Bfree>
 801b756:	4629      	mov	r1, r5
 801b758:	4620      	mov	r0, r4
 801b75a:	f001 fbdb 	bl	801cf14 <_Bfree>
 801b75e:	e61a      	b.n	801b396 <_strtod_l+0x666>
 801b760:	f1ba 0f00 	cmp.w	sl, #0
 801b764:	d11b      	bne.n	801b79e <_strtod_l+0xa6e>
 801b766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b76a:	b9f3      	cbnz	r3, 801b7aa <_strtod_l+0xa7a>
 801b76c:	4b6c      	ldr	r3, [pc, #432]	; (801b920 <_strtod_l+0xbf0>)
 801b76e:	2200      	movs	r2, #0
 801b770:	4640      	mov	r0, r8
 801b772:	4649      	mov	r1, r9
 801b774:	f7fe f932 	bl	80199dc <__aeabi_dcmplt>
 801b778:	b9d0      	cbnz	r0, 801b7b0 <_strtod_l+0xa80>
 801b77a:	4640      	mov	r0, r8
 801b77c:	4649      	mov	r1, r9
 801b77e:	4b6c      	ldr	r3, [pc, #432]	; (801b930 <_strtod_l+0xc00>)
 801b780:	2200      	movs	r2, #0
 801b782:	f7fd feb9 	bl	80194f8 <__aeabi_dmul>
 801b786:	4680      	mov	r8, r0
 801b788:	4689      	mov	r9, r1
 801b78a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b78e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b792:	9315      	str	r3, [sp, #84]	; 0x54
 801b794:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b79c:	e79d      	b.n	801b6da <_strtod_l+0x9aa>
 801b79e:	f1ba 0f01 	cmp.w	sl, #1
 801b7a2:	d102      	bne.n	801b7aa <_strtod_l+0xa7a>
 801b7a4:	2f00      	cmp	r7, #0
 801b7a6:	f43f ad83 	beq.w	801b2b0 <_strtod_l+0x580>
 801b7aa:	4b62      	ldr	r3, [pc, #392]	; (801b934 <_strtod_l+0xc04>)
 801b7ac:	2200      	movs	r2, #0
 801b7ae:	e78e      	b.n	801b6ce <_strtod_l+0x99e>
 801b7b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b930 <_strtod_l+0xc00>
 801b7b4:	f04f 0800 	mov.w	r8, #0
 801b7b8:	e7e7      	b.n	801b78a <_strtod_l+0xa5a>
 801b7ba:	4b5d      	ldr	r3, [pc, #372]	; (801b930 <_strtod_l+0xc00>)
 801b7bc:	4640      	mov	r0, r8
 801b7be:	4649      	mov	r1, r9
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	f7fd fe99 	bl	80194f8 <__aeabi_dmul>
 801b7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7c8:	4680      	mov	r8, r0
 801b7ca:	4689      	mov	r9, r1
 801b7cc:	b933      	cbnz	r3, 801b7dc <_strtod_l+0xaac>
 801b7ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7d2:	900e      	str	r0, [sp, #56]	; 0x38
 801b7d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b7d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b7da:	e7dd      	b.n	801b798 <_strtod_l+0xa68>
 801b7dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b7e0:	e7f9      	b.n	801b7d6 <_strtod_l+0xaa6>
 801b7e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b7e6:	9b04      	ldr	r3, [sp, #16]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d1a8      	bne.n	801b73e <_strtod_l+0xa0e>
 801b7ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b7f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b7f2:	0d1b      	lsrs	r3, r3, #20
 801b7f4:	051b      	lsls	r3, r3, #20
 801b7f6:	429a      	cmp	r2, r3
 801b7f8:	d1a1      	bne.n	801b73e <_strtod_l+0xa0e>
 801b7fa:	4640      	mov	r0, r8
 801b7fc:	4649      	mov	r1, r9
 801b7fe:	f7fe f9c3 	bl	8019b88 <__aeabi_d2lz>
 801b802:	f7fd fe4b 	bl	801949c <__aeabi_l2d>
 801b806:	4602      	mov	r2, r0
 801b808:	460b      	mov	r3, r1
 801b80a:	4640      	mov	r0, r8
 801b80c:	4649      	mov	r1, r9
 801b80e:	f7fd fcbb 	bl	8019188 <__aeabi_dsub>
 801b812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b818:	ea43 030a 	orr.w	r3, r3, sl
 801b81c:	4313      	orrs	r3, r2
 801b81e:	4680      	mov	r8, r0
 801b820:	4689      	mov	r9, r1
 801b822:	d055      	beq.n	801b8d0 <_strtod_l+0xba0>
 801b824:	a336      	add	r3, pc, #216	; (adr r3, 801b900 <_strtod_l+0xbd0>)
 801b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b82a:	f7fe f8d7 	bl	80199dc <__aeabi_dcmplt>
 801b82e:	2800      	cmp	r0, #0
 801b830:	f47f acd0 	bne.w	801b1d4 <_strtod_l+0x4a4>
 801b834:	a334      	add	r3, pc, #208	; (adr r3, 801b908 <_strtod_l+0xbd8>)
 801b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83a:	4640      	mov	r0, r8
 801b83c:	4649      	mov	r1, r9
 801b83e:	f7fe f8eb 	bl	8019a18 <__aeabi_dcmpgt>
 801b842:	2800      	cmp	r0, #0
 801b844:	f43f af7b 	beq.w	801b73e <_strtod_l+0xa0e>
 801b848:	e4c4      	b.n	801b1d4 <_strtod_l+0x4a4>
 801b84a:	9b04      	ldr	r3, [sp, #16]
 801b84c:	b333      	cbz	r3, 801b89c <_strtod_l+0xb6c>
 801b84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b850:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b854:	d822      	bhi.n	801b89c <_strtod_l+0xb6c>
 801b856:	a32e      	add	r3, pc, #184	; (adr r3, 801b910 <_strtod_l+0xbe0>)
 801b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b85c:	4640      	mov	r0, r8
 801b85e:	4649      	mov	r1, r9
 801b860:	f7fe f8c6 	bl	80199f0 <__aeabi_dcmple>
 801b864:	b1a0      	cbz	r0, 801b890 <_strtod_l+0xb60>
 801b866:	4649      	mov	r1, r9
 801b868:	4640      	mov	r0, r8
 801b86a:	f7fe f91d 	bl	8019aa8 <__aeabi_d2uiz>
 801b86e:	2801      	cmp	r0, #1
 801b870:	bf38      	it	cc
 801b872:	2001      	movcc	r0, #1
 801b874:	f7fd fdc6 	bl	8019404 <__aeabi_ui2d>
 801b878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b87a:	4680      	mov	r8, r0
 801b87c:	4689      	mov	r9, r1
 801b87e:	bb23      	cbnz	r3, 801b8ca <_strtod_l+0xb9a>
 801b880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b884:	9010      	str	r0, [sp, #64]	; 0x40
 801b886:	9311      	str	r3, [sp, #68]	; 0x44
 801b888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b88c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b894:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b898:	1a9b      	subs	r3, r3, r2
 801b89a:	9309      	str	r3, [sp, #36]	; 0x24
 801b89c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b8a0:	eeb0 0a48 	vmov.f32	s0, s16
 801b8a4:	eef0 0a68 	vmov.f32	s1, s17
 801b8a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b8ac:	f001 fe64 	bl	801d578 <__ulp>
 801b8b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b8b4:	ec53 2b10 	vmov	r2, r3, d0
 801b8b8:	f7fd fe1e 	bl	80194f8 <__aeabi_dmul>
 801b8bc:	ec53 2b18 	vmov	r2, r3, d8
 801b8c0:	f7fd fc64 	bl	801918c <__adddf3>
 801b8c4:	4682      	mov	sl, r0
 801b8c6:	468b      	mov	fp, r1
 801b8c8:	e78d      	b.n	801b7e6 <_strtod_l+0xab6>
 801b8ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b8ce:	e7db      	b.n	801b888 <_strtod_l+0xb58>
 801b8d0:	a311      	add	r3, pc, #68	; (adr r3, 801b918 <_strtod_l+0xbe8>)
 801b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d6:	f7fe f881 	bl	80199dc <__aeabi_dcmplt>
 801b8da:	e7b2      	b.n	801b842 <_strtod_l+0xb12>
 801b8dc:	2300      	movs	r3, #0
 801b8de:	930a      	str	r3, [sp, #40]	; 0x28
 801b8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b8e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b8e4:	6013      	str	r3, [r2, #0]
 801b8e6:	f7ff ba6b 	b.w	801adc0 <_strtod_l+0x90>
 801b8ea:	2a65      	cmp	r2, #101	; 0x65
 801b8ec:	f43f ab5f 	beq.w	801afae <_strtod_l+0x27e>
 801b8f0:	2a45      	cmp	r2, #69	; 0x45
 801b8f2:	f43f ab5c 	beq.w	801afae <_strtod_l+0x27e>
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	f7ff bb94 	b.w	801b024 <_strtod_l+0x2f4>
 801b8fc:	f3af 8000 	nop.w
 801b900:	94a03595 	.word	0x94a03595
 801b904:	3fdfffff 	.word	0x3fdfffff
 801b908:	35afe535 	.word	0x35afe535
 801b90c:	3fe00000 	.word	0x3fe00000
 801b910:	ffc00000 	.word	0xffc00000
 801b914:	41dfffff 	.word	0x41dfffff
 801b918:	94a03595 	.word	0x94a03595
 801b91c:	3fcfffff 	.word	0x3fcfffff
 801b920:	3ff00000 	.word	0x3ff00000
 801b924:	7ff00000 	.word	0x7ff00000
 801b928:	7fe00000 	.word	0x7fe00000
 801b92c:	7c9fffff 	.word	0x7c9fffff
 801b930:	3fe00000 	.word	0x3fe00000
 801b934:	bff00000 	.word	0xbff00000
 801b938:	7fefffff 	.word	0x7fefffff

0801b93c <_strtod_r>:
 801b93c:	4b01      	ldr	r3, [pc, #4]	; (801b944 <_strtod_r+0x8>)
 801b93e:	f7ff b9f7 	b.w	801ad30 <_strtod_l>
 801b942:	bf00      	nop
 801b944:	200000cc 	.word	0x200000cc

0801b948 <_strtol_l.constprop.0>:
 801b948:	2b01      	cmp	r3, #1
 801b94a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b94e:	d001      	beq.n	801b954 <_strtol_l.constprop.0+0xc>
 801b950:	2b24      	cmp	r3, #36	; 0x24
 801b952:	d906      	bls.n	801b962 <_strtol_l.constprop.0+0x1a>
 801b954:	f7fe fafe 	bl	8019f54 <__errno>
 801b958:	2316      	movs	r3, #22
 801b95a:	6003      	str	r3, [r0, #0]
 801b95c:	2000      	movs	r0, #0
 801b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b962:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ba48 <_strtol_l.constprop.0+0x100>
 801b966:	460d      	mov	r5, r1
 801b968:	462e      	mov	r6, r5
 801b96a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b96e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b972:	f017 0708 	ands.w	r7, r7, #8
 801b976:	d1f7      	bne.n	801b968 <_strtol_l.constprop.0+0x20>
 801b978:	2c2d      	cmp	r4, #45	; 0x2d
 801b97a:	d132      	bne.n	801b9e2 <_strtol_l.constprop.0+0x9a>
 801b97c:	782c      	ldrb	r4, [r5, #0]
 801b97e:	2701      	movs	r7, #1
 801b980:	1cb5      	adds	r5, r6, #2
 801b982:	2b00      	cmp	r3, #0
 801b984:	d05b      	beq.n	801ba3e <_strtol_l.constprop.0+0xf6>
 801b986:	2b10      	cmp	r3, #16
 801b988:	d109      	bne.n	801b99e <_strtol_l.constprop.0+0x56>
 801b98a:	2c30      	cmp	r4, #48	; 0x30
 801b98c:	d107      	bne.n	801b99e <_strtol_l.constprop.0+0x56>
 801b98e:	782c      	ldrb	r4, [r5, #0]
 801b990:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b994:	2c58      	cmp	r4, #88	; 0x58
 801b996:	d14d      	bne.n	801ba34 <_strtol_l.constprop.0+0xec>
 801b998:	786c      	ldrb	r4, [r5, #1]
 801b99a:	2310      	movs	r3, #16
 801b99c:	3502      	adds	r5, #2
 801b99e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b9a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b9a6:	f04f 0c00 	mov.w	ip, #0
 801b9aa:	fbb8 f9f3 	udiv	r9, r8, r3
 801b9ae:	4666      	mov	r6, ip
 801b9b0:	fb03 8a19 	mls	sl, r3, r9, r8
 801b9b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b9b8:	f1be 0f09 	cmp.w	lr, #9
 801b9bc:	d816      	bhi.n	801b9ec <_strtol_l.constprop.0+0xa4>
 801b9be:	4674      	mov	r4, lr
 801b9c0:	42a3      	cmp	r3, r4
 801b9c2:	dd24      	ble.n	801ba0e <_strtol_l.constprop.0+0xc6>
 801b9c4:	f1bc 0f00 	cmp.w	ip, #0
 801b9c8:	db1e      	blt.n	801ba08 <_strtol_l.constprop.0+0xc0>
 801b9ca:	45b1      	cmp	r9, r6
 801b9cc:	d31c      	bcc.n	801ba08 <_strtol_l.constprop.0+0xc0>
 801b9ce:	d101      	bne.n	801b9d4 <_strtol_l.constprop.0+0x8c>
 801b9d0:	45a2      	cmp	sl, r4
 801b9d2:	db19      	blt.n	801ba08 <_strtol_l.constprop.0+0xc0>
 801b9d4:	fb06 4603 	mla	r6, r6, r3, r4
 801b9d8:	f04f 0c01 	mov.w	ip, #1
 801b9dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b9e0:	e7e8      	b.n	801b9b4 <_strtol_l.constprop.0+0x6c>
 801b9e2:	2c2b      	cmp	r4, #43	; 0x2b
 801b9e4:	bf04      	itt	eq
 801b9e6:	782c      	ldrbeq	r4, [r5, #0]
 801b9e8:	1cb5      	addeq	r5, r6, #2
 801b9ea:	e7ca      	b.n	801b982 <_strtol_l.constprop.0+0x3a>
 801b9ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b9f0:	f1be 0f19 	cmp.w	lr, #25
 801b9f4:	d801      	bhi.n	801b9fa <_strtol_l.constprop.0+0xb2>
 801b9f6:	3c37      	subs	r4, #55	; 0x37
 801b9f8:	e7e2      	b.n	801b9c0 <_strtol_l.constprop.0+0x78>
 801b9fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b9fe:	f1be 0f19 	cmp.w	lr, #25
 801ba02:	d804      	bhi.n	801ba0e <_strtol_l.constprop.0+0xc6>
 801ba04:	3c57      	subs	r4, #87	; 0x57
 801ba06:	e7db      	b.n	801b9c0 <_strtol_l.constprop.0+0x78>
 801ba08:	f04f 3cff 	mov.w	ip, #4294967295
 801ba0c:	e7e6      	b.n	801b9dc <_strtol_l.constprop.0+0x94>
 801ba0e:	f1bc 0f00 	cmp.w	ip, #0
 801ba12:	da05      	bge.n	801ba20 <_strtol_l.constprop.0+0xd8>
 801ba14:	2322      	movs	r3, #34	; 0x22
 801ba16:	6003      	str	r3, [r0, #0]
 801ba18:	4646      	mov	r6, r8
 801ba1a:	b942      	cbnz	r2, 801ba2e <_strtol_l.constprop.0+0xe6>
 801ba1c:	4630      	mov	r0, r6
 801ba1e:	e79e      	b.n	801b95e <_strtol_l.constprop.0+0x16>
 801ba20:	b107      	cbz	r7, 801ba24 <_strtol_l.constprop.0+0xdc>
 801ba22:	4276      	negs	r6, r6
 801ba24:	2a00      	cmp	r2, #0
 801ba26:	d0f9      	beq.n	801ba1c <_strtol_l.constprop.0+0xd4>
 801ba28:	f1bc 0f00 	cmp.w	ip, #0
 801ba2c:	d000      	beq.n	801ba30 <_strtol_l.constprop.0+0xe8>
 801ba2e:	1e69      	subs	r1, r5, #1
 801ba30:	6011      	str	r1, [r2, #0]
 801ba32:	e7f3      	b.n	801ba1c <_strtol_l.constprop.0+0xd4>
 801ba34:	2430      	movs	r4, #48	; 0x30
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d1b1      	bne.n	801b99e <_strtol_l.constprop.0+0x56>
 801ba3a:	2308      	movs	r3, #8
 801ba3c:	e7af      	b.n	801b99e <_strtol_l.constprop.0+0x56>
 801ba3e:	2c30      	cmp	r4, #48	; 0x30
 801ba40:	d0a5      	beq.n	801b98e <_strtol_l.constprop.0+0x46>
 801ba42:	230a      	movs	r3, #10
 801ba44:	e7ab      	b.n	801b99e <_strtol_l.constprop.0+0x56>
 801ba46:	bf00      	nop
 801ba48:	08052939 	.word	0x08052939

0801ba4c <_strtol_r>:
 801ba4c:	f7ff bf7c 	b.w	801b948 <_strtol_l.constprop.0>

0801ba50 <strtol>:
 801ba50:	4613      	mov	r3, r2
 801ba52:	460a      	mov	r2, r1
 801ba54:	4601      	mov	r1, r0
 801ba56:	4802      	ldr	r0, [pc, #8]	; (801ba60 <strtol+0x10>)
 801ba58:	6800      	ldr	r0, [r0, #0]
 801ba5a:	f7ff bf75 	b.w	801b948 <_strtol_l.constprop.0>
 801ba5e:	bf00      	nop
 801ba60:	20000064 	.word	0x20000064

0801ba64 <quorem>:
 801ba64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba68:	6903      	ldr	r3, [r0, #16]
 801ba6a:	690c      	ldr	r4, [r1, #16]
 801ba6c:	42a3      	cmp	r3, r4
 801ba6e:	4607      	mov	r7, r0
 801ba70:	f2c0 8081 	blt.w	801bb76 <quorem+0x112>
 801ba74:	3c01      	subs	r4, #1
 801ba76:	f101 0814 	add.w	r8, r1, #20
 801ba7a:	f100 0514 	add.w	r5, r0, #20
 801ba7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba82:	9301      	str	r3, [sp, #4]
 801ba84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ba88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba8c:	3301      	adds	r3, #1
 801ba8e:	429a      	cmp	r2, r3
 801ba90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ba94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ba98:	fbb2 f6f3 	udiv	r6, r2, r3
 801ba9c:	d331      	bcc.n	801bb02 <quorem+0x9e>
 801ba9e:	f04f 0e00 	mov.w	lr, #0
 801baa2:	4640      	mov	r0, r8
 801baa4:	46ac      	mov	ip, r5
 801baa6:	46f2      	mov	sl, lr
 801baa8:	f850 2b04 	ldr.w	r2, [r0], #4
 801baac:	b293      	uxth	r3, r2
 801baae:	fb06 e303 	mla	r3, r6, r3, lr
 801bab2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801bab6:	b29b      	uxth	r3, r3
 801bab8:	ebaa 0303 	sub.w	r3, sl, r3
 801babc:	f8dc a000 	ldr.w	sl, [ip]
 801bac0:	0c12      	lsrs	r2, r2, #16
 801bac2:	fa13 f38a 	uxtah	r3, r3, sl
 801bac6:	fb06 e202 	mla	r2, r6, r2, lr
 801baca:	9300      	str	r3, [sp, #0]
 801bacc:	9b00      	ldr	r3, [sp, #0]
 801bace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bad2:	b292      	uxth	r2, r2
 801bad4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801badc:	f8bd 3000 	ldrh.w	r3, [sp]
 801bae0:	4581      	cmp	r9, r0
 801bae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bae6:	f84c 3b04 	str.w	r3, [ip], #4
 801baea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801baee:	d2db      	bcs.n	801baa8 <quorem+0x44>
 801baf0:	f855 300b 	ldr.w	r3, [r5, fp]
 801baf4:	b92b      	cbnz	r3, 801bb02 <quorem+0x9e>
 801baf6:	9b01      	ldr	r3, [sp, #4]
 801baf8:	3b04      	subs	r3, #4
 801bafa:	429d      	cmp	r5, r3
 801bafc:	461a      	mov	r2, r3
 801bafe:	d32e      	bcc.n	801bb5e <quorem+0xfa>
 801bb00:	613c      	str	r4, [r7, #16]
 801bb02:	4638      	mov	r0, r7
 801bb04:	f001 fc92 	bl	801d42c <__mcmp>
 801bb08:	2800      	cmp	r0, #0
 801bb0a:	db24      	blt.n	801bb56 <quorem+0xf2>
 801bb0c:	3601      	adds	r6, #1
 801bb0e:	4628      	mov	r0, r5
 801bb10:	f04f 0c00 	mov.w	ip, #0
 801bb14:	f858 2b04 	ldr.w	r2, [r8], #4
 801bb18:	f8d0 e000 	ldr.w	lr, [r0]
 801bb1c:	b293      	uxth	r3, r2
 801bb1e:	ebac 0303 	sub.w	r3, ip, r3
 801bb22:	0c12      	lsrs	r2, r2, #16
 801bb24:	fa13 f38e 	uxtah	r3, r3, lr
 801bb28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801bb2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb36:	45c1      	cmp	r9, r8
 801bb38:	f840 3b04 	str.w	r3, [r0], #4
 801bb3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bb40:	d2e8      	bcs.n	801bb14 <quorem+0xb0>
 801bb42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb4a:	b922      	cbnz	r2, 801bb56 <quorem+0xf2>
 801bb4c:	3b04      	subs	r3, #4
 801bb4e:	429d      	cmp	r5, r3
 801bb50:	461a      	mov	r2, r3
 801bb52:	d30a      	bcc.n	801bb6a <quorem+0x106>
 801bb54:	613c      	str	r4, [r7, #16]
 801bb56:	4630      	mov	r0, r6
 801bb58:	b003      	add	sp, #12
 801bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb5e:	6812      	ldr	r2, [r2, #0]
 801bb60:	3b04      	subs	r3, #4
 801bb62:	2a00      	cmp	r2, #0
 801bb64:	d1cc      	bne.n	801bb00 <quorem+0x9c>
 801bb66:	3c01      	subs	r4, #1
 801bb68:	e7c7      	b.n	801bafa <quorem+0x96>
 801bb6a:	6812      	ldr	r2, [r2, #0]
 801bb6c:	3b04      	subs	r3, #4
 801bb6e:	2a00      	cmp	r2, #0
 801bb70:	d1f0      	bne.n	801bb54 <quorem+0xf0>
 801bb72:	3c01      	subs	r4, #1
 801bb74:	e7eb      	b.n	801bb4e <quorem+0xea>
 801bb76:	2000      	movs	r0, #0
 801bb78:	e7ee      	b.n	801bb58 <quorem+0xf4>
 801bb7a:	0000      	movs	r0, r0
 801bb7c:	0000      	movs	r0, r0
	...

0801bb80 <_dtoa_r>:
 801bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb84:	ed2d 8b04 	vpush	{d8-d9}
 801bb88:	ec57 6b10 	vmov	r6, r7, d0
 801bb8c:	b093      	sub	sp, #76	; 0x4c
 801bb8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bb90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bb94:	9106      	str	r1, [sp, #24]
 801bb96:	ee10 aa10 	vmov	sl, s0
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	9209      	str	r2, [sp, #36]	; 0x24
 801bb9e:	930c      	str	r3, [sp, #48]	; 0x30
 801bba0:	46bb      	mov	fp, r7
 801bba2:	b975      	cbnz	r5, 801bbc2 <_dtoa_r+0x42>
 801bba4:	2010      	movs	r0, #16
 801bba6:	f001 f94d 	bl	801ce44 <malloc>
 801bbaa:	4602      	mov	r2, r0
 801bbac:	6260      	str	r0, [r4, #36]	; 0x24
 801bbae:	b920      	cbnz	r0, 801bbba <_dtoa_r+0x3a>
 801bbb0:	4ba7      	ldr	r3, [pc, #668]	; (801be50 <_dtoa_r+0x2d0>)
 801bbb2:	21ea      	movs	r1, #234	; 0xea
 801bbb4:	48a7      	ldr	r0, [pc, #668]	; (801be54 <_dtoa_r+0x2d4>)
 801bbb6:	f002 f8bd 	bl	801dd34 <__assert_func>
 801bbba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bbbe:	6005      	str	r5, [r0, #0]
 801bbc0:	60c5      	str	r5, [r0, #12]
 801bbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbc4:	6819      	ldr	r1, [r3, #0]
 801bbc6:	b151      	cbz	r1, 801bbde <_dtoa_r+0x5e>
 801bbc8:	685a      	ldr	r2, [r3, #4]
 801bbca:	604a      	str	r2, [r1, #4]
 801bbcc:	2301      	movs	r3, #1
 801bbce:	4093      	lsls	r3, r2
 801bbd0:	608b      	str	r3, [r1, #8]
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	f001 f99e 	bl	801cf14 <_Bfree>
 801bbd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbda:	2200      	movs	r2, #0
 801bbdc:	601a      	str	r2, [r3, #0]
 801bbde:	1e3b      	subs	r3, r7, #0
 801bbe0:	bfaa      	itet	ge
 801bbe2:	2300      	movge	r3, #0
 801bbe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801bbe8:	f8c8 3000 	strge.w	r3, [r8]
 801bbec:	4b9a      	ldr	r3, [pc, #616]	; (801be58 <_dtoa_r+0x2d8>)
 801bbee:	bfbc      	itt	lt
 801bbf0:	2201      	movlt	r2, #1
 801bbf2:	f8c8 2000 	strlt.w	r2, [r8]
 801bbf6:	ea33 030b 	bics.w	r3, r3, fp
 801bbfa:	d11b      	bne.n	801bc34 <_dtoa_r+0xb4>
 801bbfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bbfe:	f242 730f 	movw	r3, #9999	; 0x270f
 801bc02:	6013      	str	r3, [r2, #0]
 801bc04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc08:	4333      	orrs	r3, r6
 801bc0a:	f000 8592 	beq.w	801c732 <_dtoa_r+0xbb2>
 801bc0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc10:	b963      	cbnz	r3, 801bc2c <_dtoa_r+0xac>
 801bc12:	4b92      	ldr	r3, [pc, #584]	; (801be5c <_dtoa_r+0x2dc>)
 801bc14:	e022      	b.n	801bc5c <_dtoa_r+0xdc>
 801bc16:	4b92      	ldr	r3, [pc, #584]	; (801be60 <_dtoa_r+0x2e0>)
 801bc18:	9301      	str	r3, [sp, #4]
 801bc1a:	3308      	adds	r3, #8
 801bc1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bc1e:	6013      	str	r3, [r2, #0]
 801bc20:	9801      	ldr	r0, [sp, #4]
 801bc22:	b013      	add	sp, #76	; 0x4c
 801bc24:	ecbd 8b04 	vpop	{d8-d9}
 801bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc2c:	4b8b      	ldr	r3, [pc, #556]	; (801be5c <_dtoa_r+0x2dc>)
 801bc2e:	9301      	str	r3, [sp, #4]
 801bc30:	3303      	adds	r3, #3
 801bc32:	e7f3      	b.n	801bc1c <_dtoa_r+0x9c>
 801bc34:	2200      	movs	r2, #0
 801bc36:	2300      	movs	r3, #0
 801bc38:	4650      	mov	r0, sl
 801bc3a:	4659      	mov	r1, fp
 801bc3c:	f7fd fec4 	bl	80199c8 <__aeabi_dcmpeq>
 801bc40:	ec4b ab19 	vmov	d9, sl, fp
 801bc44:	4680      	mov	r8, r0
 801bc46:	b158      	cbz	r0, 801bc60 <_dtoa_r+0xe0>
 801bc48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	6013      	str	r3, [r2, #0]
 801bc4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	f000 856b 	beq.w	801c72c <_dtoa_r+0xbac>
 801bc56:	4883      	ldr	r0, [pc, #524]	; (801be64 <_dtoa_r+0x2e4>)
 801bc58:	6018      	str	r0, [r3, #0]
 801bc5a:	1e43      	subs	r3, r0, #1
 801bc5c:	9301      	str	r3, [sp, #4]
 801bc5e:	e7df      	b.n	801bc20 <_dtoa_r+0xa0>
 801bc60:	ec4b ab10 	vmov	d0, sl, fp
 801bc64:	aa10      	add	r2, sp, #64	; 0x40
 801bc66:	a911      	add	r1, sp, #68	; 0x44
 801bc68:	4620      	mov	r0, r4
 801bc6a:	f001 fd01 	bl	801d670 <__d2b>
 801bc6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801bc72:	ee08 0a10 	vmov	s16, r0
 801bc76:	2d00      	cmp	r5, #0
 801bc78:	f000 8084 	beq.w	801bd84 <_dtoa_r+0x204>
 801bc7c:	ee19 3a90 	vmov	r3, s19
 801bc80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bc84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bc88:	4656      	mov	r6, sl
 801bc8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bc8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bc92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bc96:	4b74      	ldr	r3, [pc, #464]	; (801be68 <_dtoa_r+0x2e8>)
 801bc98:	2200      	movs	r2, #0
 801bc9a:	4630      	mov	r0, r6
 801bc9c:	4639      	mov	r1, r7
 801bc9e:	f7fd fa73 	bl	8019188 <__aeabi_dsub>
 801bca2:	a365      	add	r3, pc, #404	; (adr r3, 801be38 <_dtoa_r+0x2b8>)
 801bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca8:	f7fd fc26 	bl	80194f8 <__aeabi_dmul>
 801bcac:	a364      	add	r3, pc, #400	; (adr r3, 801be40 <_dtoa_r+0x2c0>)
 801bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb2:	f7fd fa6b 	bl	801918c <__adddf3>
 801bcb6:	4606      	mov	r6, r0
 801bcb8:	4628      	mov	r0, r5
 801bcba:	460f      	mov	r7, r1
 801bcbc:	f7fd fbb2 	bl	8019424 <__aeabi_i2d>
 801bcc0:	a361      	add	r3, pc, #388	; (adr r3, 801be48 <_dtoa_r+0x2c8>)
 801bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc6:	f7fd fc17 	bl	80194f8 <__aeabi_dmul>
 801bcca:	4602      	mov	r2, r0
 801bccc:	460b      	mov	r3, r1
 801bcce:	4630      	mov	r0, r6
 801bcd0:	4639      	mov	r1, r7
 801bcd2:	f7fd fa5b 	bl	801918c <__adddf3>
 801bcd6:	4606      	mov	r6, r0
 801bcd8:	460f      	mov	r7, r1
 801bcda:	f7fd febd 	bl	8019a58 <__aeabi_d2iz>
 801bcde:	2200      	movs	r2, #0
 801bce0:	9000      	str	r0, [sp, #0]
 801bce2:	2300      	movs	r3, #0
 801bce4:	4630      	mov	r0, r6
 801bce6:	4639      	mov	r1, r7
 801bce8:	f7fd fe78 	bl	80199dc <__aeabi_dcmplt>
 801bcec:	b150      	cbz	r0, 801bd04 <_dtoa_r+0x184>
 801bcee:	9800      	ldr	r0, [sp, #0]
 801bcf0:	f7fd fb98 	bl	8019424 <__aeabi_i2d>
 801bcf4:	4632      	mov	r2, r6
 801bcf6:	463b      	mov	r3, r7
 801bcf8:	f7fd fe66 	bl	80199c8 <__aeabi_dcmpeq>
 801bcfc:	b910      	cbnz	r0, 801bd04 <_dtoa_r+0x184>
 801bcfe:	9b00      	ldr	r3, [sp, #0]
 801bd00:	3b01      	subs	r3, #1
 801bd02:	9300      	str	r3, [sp, #0]
 801bd04:	9b00      	ldr	r3, [sp, #0]
 801bd06:	2b16      	cmp	r3, #22
 801bd08:	d85a      	bhi.n	801bdc0 <_dtoa_r+0x240>
 801bd0a:	9a00      	ldr	r2, [sp, #0]
 801bd0c:	4b57      	ldr	r3, [pc, #348]	; (801be6c <_dtoa_r+0x2ec>)
 801bd0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd16:	ec51 0b19 	vmov	r0, r1, d9
 801bd1a:	f7fd fe5f 	bl	80199dc <__aeabi_dcmplt>
 801bd1e:	2800      	cmp	r0, #0
 801bd20:	d050      	beq.n	801bdc4 <_dtoa_r+0x244>
 801bd22:	9b00      	ldr	r3, [sp, #0]
 801bd24:	3b01      	subs	r3, #1
 801bd26:	9300      	str	r3, [sp, #0]
 801bd28:	2300      	movs	r3, #0
 801bd2a:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd2e:	1b5d      	subs	r5, r3, r5
 801bd30:	1e6b      	subs	r3, r5, #1
 801bd32:	9305      	str	r3, [sp, #20]
 801bd34:	bf45      	ittet	mi
 801bd36:	f1c5 0301 	rsbmi	r3, r5, #1
 801bd3a:	9304      	strmi	r3, [sp, #16]
 801bd3c:	2300      	movpl	r3, #0
 801bd3e:	2300      	movmi	r3, #0
 801bd40:	bf4c      	ite	mi
 801bd42:	9305      	strmi	r3, [sp, #20]
 801bd44:	9304      	strpl	r3, [sp, #16]
 801bd46:	9b00      	ldr	r3, [sp, #0]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	db3d      	blt.n	801bdc8 <_dtoa_r+0x248>
 801bd4c:	9b05      	ldr	r3, [sp, #20]
 801bd4e:	9a00      	ldr	r2, [sp, #0]
 801bd50:	920a      	str	r2, [sp, #40]	; 0x28
 801bd52:	4413      	add	r3, r2
 801bd54:	9305      	str	r3, [sp, #20]
 801bd56:	2300      	movs	r3, #0
 801bd58:	9307      	str	r3, [sp, #28]
 801bd5a:	9b06      	ldr	r3, [sp, #24]
 801bd5c:	2b09      	cmp	r3, #9
 801bd5e:	f200 8089 	bhi.w	801be74 <_dtoa_r+0x2f4>
 801bd62:	2b05      	cmp	r3, #5
 801bd64:	bfc4      	itt	gt
 801bd66:	3b04      	subgt	r3, #4
 801bd68:	9306      	strgt	r3, [sp, #24]
 801bd6a:	9b06      	ldr	r3, [sp, #24]
 801bd6c:	f1a3 0302 	sub.w	r3, r3, #2
 801bd70:	bfcc      	ite	gt
 801bd72:	2500      	movgt	r5, #0
 801bd74:	2501      	movle	r5, #1
 801bd76:	2b03      	cmp	r3, #3
 801bd78:	f200 8087 	bhi.w	801be8a <_dtoa_r+0x30a>
 801bd7c:	e8df f003 	tbb	[pc, r3]
 801bd80:	59383a2d 	.word	0x59383a2d
 801bd84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bd88:	441d      	add	r5, r3
 801bd8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bd8e:	2b20      	cmp	r3, #32
 801bd90:	bfc1      	itttt	gt
 801bd92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bd96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bd9a:	fa0b f303 	lslgt.w	r3, fp, r3
 801bd9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bda2:	bfda      	itte	le
 801bda4:	f1c3 0320 	rsble	r3, r3, #32
 801bda8:	fa06 f003 	lslle.w	r0, r6, r3
 801bdac:	4318      	orrgt	r0, r3
 801bdae:	f7fd fb29 	bl	8019404 <__aeabi_ui2d>
 801bdb2:	2301      	movs	r3, #1
 801bdb4:	4606      	mov	r6, r0
 801bdb6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bdba:	3d01      	subs	r5, #1
 801bdbc:	930e      	str	r3, [sp, #56]	; 0x38
 801bdbe:	e76a      	b.n	801bc96 <_dtoa_r+0x116>
 801bdc0:	2301      	movs	r3, #1
 801bdc2:	e7b2      	b.n	801bd2a <_dtoa_r+0x1aa>
 801bdc4:	900b      	str	r0, [sp, #44]	; 0x2c
 801bdc6:	e7b1      	b.n	801bd2c <_dtoa_r+0x1ac>
 801bdc8:	9b04      	ldr	r3, [sp, #16]
 801bdca:	9a00      	ldr	r2, [sp, #0]
 801bdcc:	1a9b      	subs	r3, r3, r2
 801bdce:	9304      	str	r3, [sp, #16]
 801bdd0:	4253      	negs	r3, r2
 801bdd2:	9307      	str	r3, [sp, #28]
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	930a      	str	r3, [sp, #40]	; 0x28
 801bdd8:	e7bf      	b.n	801bd5a <_dtoa_r+0x1da>
 801bdda:	2300      	movs	r3, #0
 801bddc:	9308      	str	r3, [sp, #32]
 801bdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	dc55      	bgt.n	801be90 <_dtoa_r+0x310>
 801bde4:	2301      	movs	r3, #1
 801bde6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bdea:	461a      	mov	r2, r3
 801bdec:	9209      	str	r2, [sp, #36]	; 0x24
 801bdee:	e00c      	b.n	801be0a <_dtoa_r+0x28a>
 801bdf0:	2301      	movs	r3, #1
 801bdf2:	e7f3      	b.n	801bddc <_dtoa_r+0x25c>
 801bdf4:	2300      	movs	r3, #0
 801bdf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bdf8:	9308      	str	r3, [sp, #32]
 801bdfa:	9b00      	ldr	r3, [sp, #0]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	9302      	str	r3, [sp, #8]
 801be00:	3301      	adds	r3, #1
 801be02:	2b01      	cmp	r3, #1
 801be04:	9303      	str	r3, [sp, #12]
 801be06:	bfb8      	it	lt
 801be08:	2301      	movlt	r3, #1
 801be0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be0c:	2200      	movs	r2, #0
 801be0e:	6042      	str	r2, [r0, #4]
 801be10:	2204      	movs	r2, #4
 801be12:	f102 0614 	add.w	r6, r2, #20
 801be16:	429e      	cmp	r6, r3
 801be18:	6841      	ldr	r1, [r0, #4]
 801be1a:	d93d      	bls.n	801be98 <_dtoa_r+0x318>
 801be1c:	4620      	mov	r0, r4
 801be1e:	f001 f839 	bl	801ce94 <_Balloc>
 801be22:	9001      	str	r0, [sp, #4]
 801be24:	2800      	cmp	r0, #0
 801be26:	d13b      	bne.n	801bea0 <_dtoa_r+0x320>
 801be28:	4b11      	ldr	r3, [pc, #68]	; (801be70 <_dtoa_r+0x2f0>)
 801be2a:	4602      	mov	r2, r0
 801be2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801be30:	e6c0      	b.n	801bbb4 <_dtoa_r+0x34>
 801be32:	2301      	movs	r3, #1
 801be34:	e7df      	b.n	801bdf6 <_dtoa_r+0x276>
 801be36:	bf00      	nop
 801be38:	636f4361 	.word	0x636f4361
 801be3c:	3fd287a7 	.word	0x3fd287a7
 801be40:	8b60c8b3 	.word	0x8b60c8b3
 801be44:	3fc68a28 	.word	0x3fc68a28
 801be48:	509f79fb 	.word	0x509f79fb
 801be4c:	3fd34413 	.word	0x3fd34413
 801be50:	08052a46 	.word	0x08052a46
 801be54:	08052a5d 	.word	0x08052a5d
 801be58:	7ff00000 	.word	0x7ff00000
 801be5c:	08052a42 	.word	0x08052a42
 801be60:	08052a39 	.word	0x08052a39
 801be64:	080528b9 	.word	0x080528b9
 801be68:	3ff80000 	.word	0x3ff80000
 801be6c:	08052bc8 	.word	0x08052bc8
 801be70:	08052ab8 	.word	0x08052ab8
 801be74:	2501      	movs	r5, #1
 801be76:	2300      	movs	r3, #0
 801be78:	9306      	str	r3, [sp, #24]
 801be7a:	9508      	str	r5, [sp, #32]
 801be7c:	f04f 33ff 	mov.w	r3, #4294967295
 801be80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801be84:	2200      	movs	r2, #0
 801be86:	2312      	movs	r3, #18
 801be88:	e7b0      	b.n	801bdec <_dtoa_r+0x26c>
 801be8a:	2301      	movs	r3, #1
 801be8c:	9308      	str	r3, [sp, #32]
 801be8e:	e7f5      	b.n	801be7c <_dtoa_r+0x2fc>
 801be90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801be96:	e7b8      	b.n	801be0a <_dtoa_r+0x28a>
 801be98:	3101      	adds	r1, #1
 801be9a:	6041      	str	r1, [r0, #4]
 801be9c:	0052      	lsls	r2, r2, #1
 801be9e:	e7b8      	b.n	801be12 <_dtoa_r+0x292>
 801bea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bea2:	9a01      	ldr	r2, [sp, #4]
 801bea4:	601a      	str	r2, [r3, #0]
 801bea6:	9b03      	ldr	r3, [sp, #12]
 801bea8:	2b0e      	cmp	r3, #14
 801beaa:	f200 809d 	bhi.w	801bfe8 <_dtoa_r+0x468>
 801beae:	2d00      	cmp	r5, #0
 801beb0:	f000 809a 	beq.w	801bfe8 <_dtoa_r+0x468>
 801beb4:	9b00      	ldr	r3, [sp, #0]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	dd32      	ble.n	801bf20 <_dtoa_r+0x3a0>
 801beba:	4ab7      	ldr	r2, [pc, #732]	; (801c198 <_dtoa_r+0x618>)
 801bebc:	f003 030f 	and.w	r3, r3, #15
 801bec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bec8:	9b00      	ldr	r3, [sp, #0]
 801beca:	05d8      	lsls	r0, r3, #23
 801becc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bed0:	d516      	bpl.n	801bf00 <_dtoa_r+0x380>
 801bed2:	4bb2      	ldr	r3, [pc, #712]	; (801c19c <_dtoa_r+0x61c>)
 801bed4:	ec51 0b19 	vmov	r0, r1, d9
 801bed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bedc:	f7fd fc36 	bl	801974c <__aeabi_ddiv>
 801bee0:	f007 070f 	and.w	r7, r7, #15
 801bee4:	4682      	mov	sl, r0
 801bee6:	468b      	mov	fp, r1
 801bee8:	2503      	movs	r5, #3
 801beea:	4eac      	ldr	r6, [pc, #688]	; (801c19c <_dtoa_r+0x61c>)
 801beec:	b957      	cbnz	r7, 801bf04 <_dtoa_r+0x384>
 801beee:	4642      	mov	r2, r8
 801bef0:	464b      	mov	r3, r9
 801bef2:	4650      	mov	r0, sl
 801bef4:	4659      	mov	r1, fp
 801bef6:	f7fd fc29 	bl	801974c <__aeabi_ddiv>
 801befa:	4682      	mov	sl, r0
 801befc:	468b      	mov	fp, r1
 801befe:	e028      	b.n	801bf52 <_dtoa_r+0x3d2>
 801bf00:	2502      	movs	r5, #2
 801bf02:	e7f2      	b.n	801beea <_dtoa_r+0x36a>
 801bf04:	07f9      	lsls	r1, r7, #31
 801bf06:	d508      	bpl.n	801bf1a <_dtoa_r+0x39a>
 801bf08:	4640      	mov	r0, r8
 801bf0a:	4649      	mov	r1, r9
 801bf0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bf10:	f7fd faf2 	bl	80194f8 <__aeabi_dmul>
 801bf14:	3501      	adds	r5, #1
 801bf16:	4680      	mov	r8, r0
 801bf18:	4689      	mov	r9, r1
 801bf1a:	107f      	asrs	r7, r7, #1
 801bf1c:	3608      	adds	r6, #8
 801bf1e:	e7e5      	b.n	801beec <_dtoa_r+0x36c>
 801bf20:	f000 809b 	beq.w	801c05a <_dtoa_r+0x4da>
 801bf24:	9b00      	ldr	r3, [sp, #0]
 801bf26:	4f9d      	ldr	r7, [pc, #628]	; (801c19c <_dtoa_r+0x61c>)
 801bf28:	425e      	negs	r6, r3
 801bf2a:	4b9b      	ldr	r3, [pc, #620]	; (801c198 <_dtoa_r+0x618>)
 801bf2c:	f006 020f 	and.w	r2, r6, #15
 801bf30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf38:	ec51 0b19 	vmov	r0, r1, d9
 801bf3c:	f7fd fadc 	bl	80194f8 <__aeabi_dmul>
 801bf40:	1136      	asrs	r6, r6, #4
 801bf42:	4682      	mov	sl, r0
 801bf44:	468b      	mov	fp, r1
 801bf46:	2300      	movs	r3, #0
 801bf48:	2502      	movs	r5, #2
 801bf4a:	2e00      	cmp	r6, #0
 801bf4c:	d17a      	bne.n	801c044 <_dtoa_r+0x4c4>
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d1d3      	bne.n	801befa <_dtoa_r+0x37a>
 801bf52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	f000 8082 	beq.w	801c05e <_dtoa_r+0x4de>
 801bf5a:	4b91      	ldr	r3, [pc, #580]	; (801c1a0 <_dtoa_r+0x620>)
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	4650      	mov	r0, sl
 801bf60:	4659      	mov	r1, fp
 801bf62:	f7fd fd3b 	bl	80199dc <__aeabi_dcmplt>
 801bf66:	2800      	cmp	r0, #0
 801bf68:	d079      	beq.n	801c05e <_dtoa_r+0x4de>
 801bf6a:	9b03      	ldr	r3, [sp, #12]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d076      	beq.n	801c05e <_dtoa_r+0x4de>
 801bf70:	9b02      	ldr	r3, [sp, #8]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	dd36      	ble.n	801bfe4 <_dtoa_r+0x464>
 801bf76:	9b00      	ldr	r3, [sp, #0]
 801bf78:	4650      	mov	r0, sl
 801bf7a:	4659      	mov	r1, fp
 801bf7c:	1e5f      	subs	r7, r3, #1
 801bf7e:	2200      	movs	r2, #0
 801bf80:	4b88      	ldr	r3, [pc, #544]	; (801c1a4 <_dtoa_r+0x624>)
 801bf82:	f7fd fab9 	bl	80194f8 <__aeabi_dmul>
 801bf86:	9e02      	ldr	r6, [sp, #8]
 801bf88:	4682      	mov	sl, r0
 801bf8a:	468b      	mov	fp, r1
 801bf8c:	3501      	adds	r5, #1
 801bf8e:	4628      	mov	r0, r5
 801bf90:	f7fd fa48 	bl	8019424 <__aeabi_i2d>
 801bf94:	4652      	mov	r2, sl
 801bf96:	465b      	mov	r3, fp
 801bf98:	f7fd faae 	bl	80194f8 <__aeabi_dmul>
 801bf9c:	4b82      	ldr	r3, [pc, #520]	; (801c1a8 <_dtoa_r+0x628>)
 801bf9e:	2200      	movs	r2, #0
 801bfa0:	f7fd f8f4 	bl	801918c <__adddf3>
 801bfa4:	46d0      	mov	r8, sl
 801bfa6:	46d9      	mov	r9, fp
 801bfa8:	4682      	mov	sl, r0
 801bfaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bfae:	2e00      	cmp	r6, #0
 801bfb0:	d158      	bne.n	801c064 <_dtoa_r+0x4e4>
 801bfb2:	4b7e      	ldr	r3, [pc, #504]	; (801c1ac <_dtoa_r+0x62c>)
 801bfb4:	2200      	movs	r2, #0
 801bfb6:	4640      	mov	r0, r8
 801bfb8:	4649      	mov	r1, r9
 801bfba:	f7fd f8e5 	bl	8019188 <__aeabi_dsub>
 801bfbe:	4652      	mov	r2, sl
 801bfc0:	465b      	mov	r3, fp
 801bfc2:	4680      	mov	r8, r0
 801bfc4:	4689      	mov	r9, r1
 801bfc6:	f7fd fd27 	bl	8019a18 <__aeabi_dcmpgt>
 801bfca:	2800      	cmp	r0, #0
 801bfcc:	f040 8295 	bne.w	801c4fa <_dtoa_r+0x97a>
 801bfd0:	4652      	mov	r2, sl
 801bfd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bfd6:	4640      	mov	r0, r8
 801bfd8:	4649      	mov	r1, r9
 801bfda:	f7fd fcff 	bl	80199dc <__aeabi_dcmplt>
 801bfde:	2800      	cmp	r0, #0
 801bfe0:	f040 8289 	bne.w	801c4f6 <_dtoa_r+0x976>
 801bfe4:	ec5b ab19 	vmov	sl, fp, d9
 801bfe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	f2c0 8148 	blt.w	801c280 <_dtoa_r+0x700>
 801bff0:	9a00      	ldr	r2, [sp, #0]
 801bff2:	2a0e      	cmp	r2, #14
 801bff4:	f300 8144 	bgt.w	801c280 <_dtoa_r+0x700>
 801bff8:	4b67      	ldr	r3, [pc, #412]	; (801c198 <_dtoa_r+0x618>)
 801bffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c004:	2b00      	cmp	r3, #0
 801c006:	f280 80d5 	bge.w	801c1b4 <_dtoa_r+0x634>
 801c00a:	9b03      	ldr	r3, [sp, #12]
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	f300 80d1 	bgt.w	801c1b4 <_dtoa_r+0x634>
 801c012:	f040 826f 	bne.w	801c4f4 <_dtoa_r+0x974>
 801c016:	4b65      	ldr	r3, [pc, #404]	; (801c1ac <_dtoa_r+0x62c>)
 801c018:	2200      	movs	r2, #0
 801c01a:	4640      	mov	r0, r8
 801c01c:	4649      	mov	r1, r9
 801c01e:	f7fd fa6b 	bl	80194f8 <__aeabi_dmul>
 801c022:	4652      	mov	r2, sl
 801c024:	465b      	mov	r3, fp
 801c026:	f7fd fced 	bl	8019a04 <__aeabi_dcmpge>
 801c02a:	9e03      	ldr	r6, [sp, #12]
 801c02c:	4637      	mov	r7, r6
 801c02e:	2800      	cmp	r0, #0
 801c030:	f040 8245 	bne.w	801c4be <_dtoa_r+0x93e>
 801c034:	9d01      	ldr	r5, [sp, #4]
 801c036:	2331      	movs	r3, #49	; 0x31
 801c038:	f805 3b01 	strb.w	r3, [r5], #1
 801c03c:	9b00      	ldr	r3, [sp, #0]
 801c03e:	3301      	adds	r3, #1
 801c040:	9300      	str	r3, [sp, #0]
 801c042:	e240      	b.n	801c4c6 <_dtoa_r+0x946>
 801c044:	07f2      	lsls	r2, r6, #31
 801c046:	d505      	bpl.n	801c054 <_dtoa_r+0x4d4>
 801c048:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c04c:	f7fd fa54 	bl	80194f8 <__aeabi_dmul>
 801c050:	3501      	adds	r5, #1
 801c052:	2301      	movs	r3, #1
 801c054:	1076      	asrs	r6, r6, #1
 801c056:	3708      	adds	r7, #8
 801c058:	e777      	b.n	801bf4a <_dtoa_r+0x3ca>
 801c05a:	2502      	movs	r5, #2
 801c05c:	e779      	b.n	801bf52 <_dtoa_r+0x3d2>
 801c05e:	9f00      	ldr	r7, [sp, #0]
 801c060:	9e03      	ldr	r6, [sp, #12]
 801c062:	e794      	b.n	801bf8e <_dtoa_r+0x40e>
 801c064:	9901      	ldr	r1, [sp, #4]
 801c066:	4b4c      	ldr	r3, [pc, #304]	; (801c198 <_dtoa_r+0x618>)
 801c068:	4431      	add	r1, r6
 801c06a:	910d      	str	r1, [sp, #52]	; 0x34
 801c06c:	9908      	ldr	r1, [sp, #32]
 801c06e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c072:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c076:	2900      	cmp	r1, #0
 801c078:	d043      	beq.n	801c102 <_dtoa_r+0x582>
 801c07a:	494d      	ldr	r1, [pc, #308]	; (801c1b0 <_dtoa_r+0x630>)
 801c07c:	2000      	movs	r0, #0
 801c07e:	f7fd fb65 	bl	801974c <__aeabi_ddiv>
 801c082:	4652      	mov	r2, sl
 801c084:	465b      	mov	r3, fp
 801c086:	f7fd f87f 	bl	8019188 <__aeabi_dsub>
 801c08a:	9d01      	ldr	r5, [sp, #4]
 801c08c:	4682      	mov	sl, r0
 801c08e:	468b      	mov	fp, r1
 801c090:	4649      	mov	r1, r9
 801c092:	4640      	mov	r0, r8
 801c094:	f7fd fce0 	bl	8019a58 <__aeabi_d2iz>
 801c098:	4606      	mov	r6, r0
 801c09a:	f7fd f9c3 	bl	8019424 <__aeabi_i2d>
 801c09e:	4602      	mov	r2, r0
 801c0a0:	460b      	mov	r3, r1
 801c0a2:	4640      	mov	r0, r8
 801c0a4:	4649      	mov	r1, r9
 801c0a6:	f7fd f86f 	bl	8019188 <__aeabi_dsub>
 801c0aa:	3630      	adds	r6, #48	; 0x30
 801c0ac:	f805 6b01 	strb.w	r6, [r5], #1
 801c0b0:	4652      	mov	r2, sl
 801c0b2:	465b      	mov	r3, fp
 801c0b4:	4680      	mov	r8, r0
 801c0b6:	4689      	mov	r9, r1
 801c0b8:	f7fd fc90 	bl	80199dc <__aeabi_dcmplt>
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	d163      	bne.n	801c188 <_dtoa_r+0x608>
 801c0c0:	4642      	mov	r2, r8
 801c0c2:	464b      	mov	r3, r9
 801c0c4:	4936      	ldr	r1, [pc, #216]	; (801c1a0 <_dtoa_r+0x620>)
 801c0c6:	2000      	movs	r0, #0
 801c0c8:	f7fd f85e 	bl	8019188 <__aeabi_dsub>
 801c0cc:	4652      	mov	r2, sl
 801c0ce:	465b      	mov	r3, fp
 801c0d0:	f7fd fc84 	bl	80199dc <__aeabi_dcmplt>
 801c0d4:	2800      	cmp	r0, #0
 801c0d6:	f040 80b5 	bne.w	801c244 <_dtoa_r+0x6c4>
 801c0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0dc:	429d      	cmp	r5, r3
 801c0de:	d081      	beq.n	801bfe4 <_dtoa_r+0x464>
 801c0e0:	4b30      	ldr	r3, [pc, #192]	; (801c1a4 <_dtoa_r+0x624>)
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	4650      	mov	r0, sl
 801c0e6:	4659      	mov	r1, fp
 801c0e8:	f7fd fa06 	bl	80194f8 <__aeabi_dmul>
 801c0ec:	4b2d      	ldr	r3, [pc, #180]	; (801c1a4 <_dtoa_r+0x624>)
 801c0ee:	4682      	mov	sl, r0
 801c0f0:	468b      	mov	fp, r1
 801c0f2:	4640      	mov	r0, r8
 801c0f4:	4649      	mov	r1, r9
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	f7fd f9fe 	bl	80194f8 <__aeabi_dmul>
 801c0fc:	4680      	mov	r8, r0
 801c0fe:	4689      	mov	r9, r1
 801c100:	e7c6      	b.n	801c090 <_dtoa_r+0x510>
 801c102:	4650      	mov	r0, sl
 801c104:	4659      	mov	r1, fp
 801c106:	f7fd f9f7 	bl	80194f8 <__aeabi_dmul>
 801c10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c10c:	9d01      	ldr	r5, [sp, #4]
 801c10e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c110:	4682      	mov	sl, r0
 801c112:	468b      	mov	fp, r1
 801c114:	4649      	mov	r1, r9
 801c116:	4640      	mov	r0, r8
 801c118:	f7fd fc9e 	bl	8019a58 <__aeabi_d2iz>
 801c11c:	4606      	mov	r6, r0
 801c11e:	f7fd f981 	bl	8019424 <__aeabi_i2d>
 801c122:	3630      	adds	r6, #48	; 0x30
 801c124:	4602      	mov	r2, r0
 801c126:	460b      	mov	r3, r1
 801c128:	4640      	mov	r0, r8
 801c12a:	4649      	mov	r1, r9
 801c12c:	f7fd f82c 	bl	8019188 <__aeabi_dsub>
 801c130:	f805 6b01 	strb.w	r6, [r5], #1
 801c134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c136:	429d      	cmp	r5, r3
 801c138:	4680      	mov	r8, r0
 801c13a:	4689      	mov	r9, r1
 801c13c:	f04f 0200 	mov.w	r2, #0
 801c140:	d124      	bne.n	801c18c <_dtoa_r+0x60c>
 801c142:	4b1b      	ldr	r3, [pc, #108]	; (801c1b0 <_dtoa_r+0x630>)
 801c144:	4650      	mov	r0, sl
 801c146:	4659      	mov	r1, fp
 801c148:	f7fd f820 	bl	801918c <__adddf3>
 801c14c:	4602      	mov	r2, r0
 801c14e:	460b      	mov	r3, r1
 801c150:	4640      	mov	r0, r8
 801c152:	4649      	mov	r1, r9
 801c154:	f7fd fc60 	bl	8019a18 <__aeabi_dcmpgt>
 801c158:	2800      	cmp	r0, #0
 801c15a:	d173      	bne.n	801c244 <_dtoa_r+0x6c4>
 801c15c:	4652      	mov	r2, sl
 801c15e:	465b      	mov	r3, fp
 801c160:	4913      	ldr	r1, [pc, #76]	; (801c1b0 <_dtoa_r+0x630>)
 801c162:	2000      	movs	r0, #0
 801c164:	f7fd f810 	bl	8019188 <__aeabi_dsub>
 801c168:	4602      	mov	r2, r0
 801c16a:	460b      	mov	r3, r1
 801c16c:	4640      	mov	r0, r8
 801c16e:	4649      	mov	r1, r9
 801c170:	f7fd fc34 	bl	80199dc <__aeabi_dcmplt>
 801c174:	2800      	cmp	r0, #0
 801c176:	f43f af35 	beq.w	801bfe4 <_dtoa_r+0x464>
 801c17a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c17c:	1e6b      	subs	r3, r5, #1
 801c17e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c180:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c184:	2b30      	cmp	r3, #48	; 0x30
 801c186:	d0f8      	beq.n	801c17a <_dtoa_r+0x5fa>
 801c188:	9700      	str	r7, [sp, #0]
 801c18a:	e049      	b.n	801c220 <_dtoa_r+0x6a0>
 801c18c:	4b05      	ldr	r3, [pc, #20]	; (801c1a4 <_dtoa_r+0x624>)
 801c18e:	f7fd f9b3 	bl	80194f8 <__aeabi_dmul>
 801c192:	4680      	mov	r8, r0
 801c194:	4689      	mov	r9, r1
 801c196:	e7bd      	b.n	801c114 <_dtoa_r+0x594>
 801c198:	08052bc8 	.word	0x08052bc8
 801c19c:	08052ba0 	.word	0x08052ba0
 801c1a0:	3ff00000 	.word	0x3ff00000
 801c1a4:	40240000 	.word	0x40240000
 801c1a8:	401c0000 	.word	0x401c0000
 801c1ac:	40140000 	.word	0x40140000
 801c1b0:	3fe00000 	.word	0x3fe00000
 801c1b4:	9d01      	ldr	r5, [sp, #4]
 801c1b6:	4656      	mov	r6, sl
 801c1b8:	465f      	mov	r7, fp
 801c1ba:	4642      	mov	r2, r8
 801c1bc:	464b      	mov	r3, r9
 801c1be:	4630      	mov	r0, r6
 801c1c0:	4639      	mov	r1, r7
 801c1c2:	f7fd fac3 	bl	801974c <__aeabi_ddiv>
 801c1c6:	f7fd fc47 	bl	8019a58 <__aeabi_d2iz>
 801c1ca:	4682      	mov	sl, r0
 801c1cc:	f7fd f92a 	bl	8019424 <__aeabi_i2d>
 801c1d0:	4642      	mov	r2, r8
 801c1d2:	464b      	mov	r3, r9
 801c1d4:	f7fd f990 	bl	80194f8 <__aeabi_dmul>
 801c1d8:	4602      	mov	r2, r0
 801c1da:	460b      	mov	r3, r1
 801c1dc:	4630      	mov	r0, r6
 801c1de:	4639      	mov	r1, r7
 801c1e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801c1e4:	f7fc ffd0 	bl	8019188 <__aeabi_dsub>
 801c1e8:	f805 6b01 	strb.w	r6, [r5], #1
 801c1ec:	9e01      	ldr	r6, [sp, #4]
 801c1ee:	9f03      	ldr	r7, [sp, #12]
 801c1f0:	1bae      	subs	r6, r5, r6
 801c1f2:	42b7      	cmp	r7, r6
 801c1f4:	4602      	mov	r2, r0
 801c1f6:	460b      	mov	r3, r1
 801c1f8:	d135      	bne.n	801c266 <_dtoa_r+0x6e6>
 801c1fa:	f7fc ffc7 	bl	801918c <__adddf3>
 801c1fe:	4642      	mov	r2, r8
 801c200:	464b      	mov	r3, r9
 801c202:	4606      	mov	r6, r0
 801c204:	460f      	mov	r7, r1
 801c206:	f7fd fc07 	bl	8019a18 <__aeabi_dcmpgt>
 801c20a:	b9d0      	cbnz	r0, 801c242 <_dtoa_r+0x6c2>
 801c20c:	4642      	mov	r2, r8
 801c20e:	464b      	mov	r3, r9
 801c210:	4630      	mov	r0, r6
 801c212:	4639      	mov	r1, r7
 801c214:	f7fd fbd8 	bl	80199c8 <__aeabi_dcmpeq>
 801c218:	b110      	cbz	r0, 801c220 <_dtoa_r+0x6a0>
 801c21a:	f01a 0f01 	tst.w	sl, #1
 801c21e:	d110      	bne.n	801c242 <_dtoa_r+0x6c2>
 801c220:	4620      	mov	r0, r4
 801c222:	ee18 1a10 	vmov	r1, s16
 801c226:	f000 fe75 	bl	801cf14 <_Bfree>
 801c22a:	2300      	movs	r3, #0
 801c22c:	9800      	ldr	r0, [sp, #0]
 801c22e:	702b      	strb	r3, [r5, #0]
 801c230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c232:	3001      	adds	r0, #1
 801c234:	6018      	str	r0, [r3, #0]
 801c236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c238:	2b00      	cmp	r3, #0
 801c23a:	f43f acf1 	beq.w	801bc20 <_dtoa_r+0xa0>
 801c23e:	601d      	str	r5, [r3, #0]
 801c240:	e4ee      	b.n	801bc20 <_dtoa_r+0xa0>
 801c242:	9f00      	ldr	r7, [sp, #0]
 801c244:	462b      	mov	r3, r5
 801c246:	461d      	mov	r5, r3
 801c248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c24c:	2a39      	cmp	r2, #57	; 0x39
 801c24e:	d106      	bne.n	801c25e <_dtoa_r+0x6de>
 801c250:	9a01      	ldr	r2, [sp, #4]
 801c252:	429a      	cmp	r2, r3
 801c254:	d1f7      	bne.n	801c246 <_dtoa_r+0x6c6>
 801c256:	9901      	ldr	r1, [sp, #4]
 801c258:	2230      	movs	r2, #48	; 0x30
 801c25a:	3701      	adds	r7, #1
 801c25c:	700a      	strb	r2, [r1, #0]
 801c25e:	781a      	ldrb	r2, [r3, #0]
 801c260:	3201      	adds	r2, #1
 801c262:	701a      	strb	r2, [r3, #0]
 801c264:	e790      	b.n	801c188 <_dtoa_r+0x608>
 801c266:	4ba6      	ldr	r3, [pc, #664]	; (801c500 <_dtoa_r+0x980>)
 801c268:	2200      	movs	r2, #0
 801c26a:	f7fd f945 	bl	80194f8 <__aeabi_dmul>
 801c26e:	2200      	movs	r2, #0
 801c270:	2300      	movs	r3, #0
 801c272:	4606      	mov	r6, r0
 801c274:	460f      	mov	r7, r1
 801c276:	f7fd fba7 	bl	80199c8 <__aeabi_dcmpeq>
 801c27a:	2800      	cmp	r0, #0
 801c27c:	d09d      	beq.n	801c1ba <_dtoa_r+0x63a>
 801c27e:	e7cf      	b.n	801c220 <_dtoa_r+0x6a0>
 801c280:	9a08      	ldr	r2, [sp, #32]
 801c282:	2a00      	cmp	r2, #0
 801c284:	f000 80d7 	beq.w	801c436 <_dtoa_r+0x8b6>
 801c288:	9a06      	ldr	r2, [sp, #24]
 801c28a:	2a01      	cmp	r2, #1
 801c28c:	f300 80ba 	bgt.w	801c404 <_dtoa_r+0x884>
 801c290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c292:	2a00      	cmp	r2, #0
 801c294:	f000 80b2 	beq.w	801c3fc <_dtoa_r+0x87c>
 801c298:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c29c:	9e07      	ldr	r6, [sp, #28]
 801c29e:	9d04      	ldr	r5, [sp, #16]
 801c2a0:	9a04      	ldr	r2, [sp, #16]
 801c2a2:	441a      	add	r2, r3
 801c2a4:	9204      	str	r2, [sp, #16]
 801c2a6:	9a05      	ldr	r2, [sp, #20]
 801c2a8:	2101      	movs	r1, #1
 801c2aa:	441a      	add	r2, r3
 801c2ac:	4620      	mov	r0, r4
 801c2ae:	9205      	str	r2, [sp, #20]
 801c2b0:	f000 ff32 	bl	801d118 <__i2b>
 801c2b4:	4607      	mov	r7, r0
 801c2b6:	2d00      	cmp	r5, #0
 801c2b8:	dd0c      	ble.n	801c2d4 <_dtoa_r+0x754>
 801c2ba:	9b05      	ldr	r3, [sp, #20]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	dd09      	ble.n	801c2d4 <_dtoa_r+0x754>
 801c2c0:	42ab      	cmp	r3, r5
 801c2c2:	9a04      	ldr	r2, [sp, #16]
 801c2c4:	bfa8      	it	ge
 801c2c6:	462b      	movge	r3, r5
 801c2c8:	1ad2      	subs	r2, r2, r3
 801c2ca:	9204      	str	r2, [sp, #16]
 801c2cc:	9a05      	ldr	r2, [sp, #20]
 801c2ce:	1aed      	subs	r5, r5, r3
 801c2d0:	1ad3      	subs	r3, r2, r3
 801c2d2:	9305      	str	r3, [sp, #20]
 801c2d4:	9b07      	ldr	r3, [sp, #28]
 801c2d6:	b31b      	cbz	r3, 801c320 <_dtoa_r+0x7a0>
 801c2d8:	9b08      	ldr	r3, [sp, #32]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	f000 80af 	beq.w	801c43e <_dtoa_r+0x8be>
 801c2e0:	2e00      	cmp	r6, #0
 801c2e2:	dd13      	ble.n	801c30c <_dtoa_r+0x78c>
 801c2e4:	4639      	mov	r1, r7
 801c2e6:	4632      	mov	r2, r6
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	f000 ffd5 	bl	801d298 <__pow5mult>
 801c2ee:	ee18 2a10 	vmov	r2, s16
 801c2f2:	4601      	mov	r1, r0
 801c2f4:	4607      	mov	r7, r0
 801c2f6:	4620      	mov	r0, r4
 801c2f8:	f000 ff24 	bl	801d144 <__multiply>
 801c2fc:	ee18 1a10 	vmov	r1, s16
 801c300:	4680      	mov	r8, r0
 801c302:	4620      	mov	r0, r4
 801c304:	f000 fe06 	bl	801cf14 <_Bfree>
 801c308:	ee08 8a10 	vmov	s16, r8
 801c30c:	9b07      	ldr	r3, [sp, #28]
 801c30e:	1b9a      	subs	r2, r3, r6
 801c310:	d006      	beq.n	801c320 <_dtoa_r+0x7a0>
 801c312:	ee18 1a10 	vmov	r1, s16
 801c316:	4620      	mov	r0, r4
 801c318:	f000 ffbe 	bl	801d298 <__pow5mult>
 801c31c:	ee08 0a10 	vmov	s16, r0
 801c320:	2101      	movs	r1, #1
 801c322:	4620      	mov	r0, r4
 801c324:	f000 fef8 	bl	801d118 <__i2b>
 801c328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	4606      	mov	r6, r0
 801c32e:	f340 8088 	ble.w	801c442 <_dtoa_r+0x8c2>
 801c332:	461a      	mov	r2, r3
 801c334:	4601      	mov	r1, r0
 801c336:	4620      	mov	r0, r4
 801c338:	f000 ffae 	bl	801d298 <__pow5mult>
 801c33c:	9b06      	ldr	r3, [sp, #24]
 801c33e:	2b01      	cmp	r3, #1
 801c340:	4606      	mov	r6, r0
 801c342:	f340 8081 	ble.w	801c448 <_dtoa_r+0x8c8>
 801c346:	f04f 0800 	mov.w	r8, #0
 801c34a:	6933      	ldr	r3, [r6, #16]
 801c34c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c350:	6918      	ldr	r0, [r3, #16]
 801c352:	f000 fe91 	bl	801d078 <__hi0bits>
 801c356:	f1c0 0020 	rsb	r0, r0, #32
 801c35a:	9b05      	ldr	r3, [sp, #20]
 801c35c:	4418      	add	r0, r3
 801c35e:	f010 001f 	ands.w	r0, r0, #31
 801c362:	f000 8092 	beq.w	801c48a <_dtoa_r+0x90a>
 801c366:	f1c0 0320 	rsb	r3, r0, #32
 801c36a:	2b04      	cmp	r3, #4
 801c36c:	f340 808a 	ble.w	801c484 <_dtoa_r+0x904>
 801c370:	f1c0 001c 	rsb	r0, r0, #28
 801c374:	9b04      	ldr	r3, [sp, #16]
 801c376:	4403      	add	r3, r0
 801c378:	9304      	str	r3, [sp, #16]
 801c37a:	9b05      	ldr	r3, [sp, #20]
 801c37c:	4403      	add	r3, r0
 801c37e:	4405      	add	r5, r0
 801c380:	9305      	str	r3, [sp, #20]
 801c382:	9b04      	ldr	r3, [sp, #16]
 801c384:	2b00      	cmp	r3, #0
 801c386:	dd07      	ble.n	801c398 <_dtoa_r+0x818>
 801c388:	ee18 1a10 	vmov	r1, s16
 801c38c:	461a      	mov	r2, r3
 801c38e:	4620      	mov	r0, r4
 801c390:	f000 ffdc 	bl	801d34c <__lshift>
 801c394:	ee08 0a10 	vmov	s16, r0
 801c398:	9b05      	ldr	r3, [sp, #20]
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	dd05      	ble.n	801c3aa <_dtoa_r+0x82a>
 801c39e:	4631      	mov	r1, r6
 801c3a0:	461a      	mov	r2, r3
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	f000 ffd2 	bl	801d34c <__lshift>
 801c3a8:	4606      	mov	r6, r0
 801c3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d06e      	beq.n	801c48e <_dtoa_r+0x90e>
 801c3b0:	ee18 0a10 	vmov	r0, s16
 801c3b4:	4631      	mov	r1, r6
 801c3b6:	f001 f839 	bl	801d42c <__mcmp>
 801c3ba:	2800      	cmp	r0, #0
 801c3bc:	da67      	bge.n	801c48e <_dtoa_r+0x90e>
 801c3be:	9b00      	ldr	r3, [sp, #0]
 801c3c0:	3b01      	subs	r3, #1
 801c3c2:	ee18 1a10 	vmov	r1, s16
 801c3c6:	9300      	str	r3, [sp, #0]
 801c3c8:	220a      	movs	r2, #10
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	f000 fdc3 	bl	801cf58 <__multadd>
 801c3d2:	9b08      	ldr	r3, [sp, #32]
 801c3d4:	ee08 0a10 	vmov	s16, r0
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	f000 81b1 	beq.w	801c740 <_dtoa_r+0xbc0>
 801c3de:	2300      	movs	r3, #0
 801c3e0:	4639      	mov	r1, r7
 801c3e2:	220a      	movs	r2, #10
 801c3e4:	4620      	mov	r0, r4
 801c3e6:	f000 fdb7 	bl	801cf58 <__multadd>
 801c3ea:	9b02      	ldr	r3, [sp, #8]
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	4607      	mov	r7, r0
 801c3f0:	f300 808e 	bgt.w	801c510 <_dtoa_r+0x990>
 801c3f4:	9b06      	ldr	r3, [sp, #24]
 801c3f6:	2b02      	cmp	r3, #2
 801c3f8:	dc51      	bgt.n	801c49e <_dtoa_r+0x91e>
 801c3fa:	e089      	b.n	801c510 <_dtoa_r+0x990>
 801c3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c402:	e74b      	b.n	801c29c <_dtoa_r+0x71c>
 801c404:	9b03      	ldr	r3, [sp, #12]
 801c406:	1e5e      	subs	r6, r3, #1
 801c408:	9b07      	ldr	r3, [sp, #28]
 801c40a:	42b3      	cmp	r3, r6
 801c40c:	bfbf      	itttt	lt
 801c40e:	9b07      	ldrlt	r3, [sp, #28]
 801c410:	9607      	strlt	r6, [sp, #28]
 801c412:	1af2      	sublt	r2, r6, r3
 801c414:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c416:	bfb6      	itet	lt
 801c418:	189b      	addlt	r3, r3, r2
 801c41a:	1b9e      	subge	r6, r3, r6
 801c41c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c41e:	9b03      	ldr	r3, [sp, #12]
 801c420:	bfb8      	it	lt
 801c422:	2600      	movlt	r6, #0
 801c424:	2b00      	cmp	r3, #0
 801c426:	bfb7      	itett	lt
 801c428:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c42c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c430:	1a9d      	sublt	r5, r3, r2
 801c432:	2300      	movlt	r3, #0
 801c434:	e734      	b.n	801c2a0 <_dtoa_r+0x720>
 801c436:	9e07      	ldr	r6, [sp, #28]
 801c438:	9d04      	ldr	r5, [sp, #16]
 801c43a:	9f08      	ldr	r7, [sp, #32]
 801c43c:	e73b      	b.n	801c2b6 <_dtoa_r+0x736>
 801c43e:	9a07      	ldr	r2, [sp, #28]
 801c440:	e767      	b.n	801c312 <_dtoa_r+0x792>
 801c442:	9b06      	ldr	r3, [sp, #24]
 801c444:	2b01      	cmp	r3, #1
 801c446:	dc18      	bgt.n	801c47a <_dtoa_r+0x8fa>
 801c448:	f1ba 0f00 	cmp.w	sl, #0
 801c44c:	d115      	bne.n	801c47a <_dtoa_r+0x8fa>
 801c44e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c452:	b993      	cbnz	r3, 801c47a <_dtoa_r+0x8fa>
 801c454:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c458:	0d1b      	lsrs	r3, r3, #20
 801c45a:	051b      	lsls	r3, r3, #20
 801c45c:	b183      	cbz	r3, 801c480 <_dtoa_r+0x900>
 801c45e:	9b04      	ldr	r3, [sp, #16]
 801c460:	3301      	adds	r3, #1
 801c462:	9304      	str	r3, [sp, #16]
 801c464:	9b05      	ldr	r3, [sp, #20]
 801c466:	3301      	adds	r3, #1
 801c468:	9305      	str	r3, [sp, #20]
 801c46a:	f04f 0801 	mov.w	r8, #1
 801c46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c470:	2b00      	cmp	r3, #0
 801c472:	f47f af6a 	bne.w	801c34a <_dtoa_r+0x7ca>
 801c476:	2001      	movs	r0, #1
 801c478:	e76f      	b.n	801c35a <_dtoa_r+0x7da>
 801c47a:	f04f 0800 	mov.w	r8, #0
 801c47e:	e7f6      	b.n	801c46e <_dtoa_r+0x8ee>
 801c480:	4698      	mov	r8, r3
 801c482:	e7f4      	b.n	801c46e <_dtoa_r+0x8ee>
 801c484:	f43f af7d 	beq.w	801c382 <_dtoa_r+0x802>
 801c488:	4618      	mov	r0, r3
 801c48a:	301c      	adds	r0, #28
 801c48c:	e772      	b.n	801c374 <_dtoa_r+0x7f4>
 801c48e:	9b03      	ldr	r3, [sp, #12]
 801c490:	2b00      	cmp	r3, #0
 801c492:	dc37      	bgt.n	801c504 <_dtoa_r+0x984>
 801c494:	9b06      	ldr	r3, [sp, #24]
 801c496:	2b02      	cmp	r3, #2
 801c498:	dd34      	ble.n	801c504 <_dtoa_r+0x984>
 801c49a:	9b03      	ldr	r3, [sp, #12]
 801c49c:	9302      	str	r3, [sp, #8]
 801c49e:	9b02      	ldr	r3, [sp, #8]
 801c4a0:	b96b      	cbnz	r3, 801c4be <_dtoa_r+0x93e>
 801c4a2:	4631      	mov	r1, r6
 801c4a4:	2205      	movs	r2, #5
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f000 fd56 	bl	801cf58 <__multadd>
 801c4ac:	4601      	mov	r1, r0
 801c4ae:	4606      	mov	r6, r0
 801c4b0:	ee18 0a10 	vmov	r0, s16
 801c4b4:	f000 ffba 	bl	801d42c <__mcmp>
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	f73f adbb 	bgt.w	801c034 <_dtoa_r+0x4b4>
 801c4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4c0:	9d01      	ldr	r5, [sp, #4]
 801c4c2:	43db      	mvns	r3, r3
 801c4c4:	9300      	str	r3, [sp, #0]
 801c4c6:	f04f 0800 	mov.w	r8, #0
 801c4ca:	4631      	mov	r1, r6
 801c4cc:	4620      	mov	r0, r4
 801c4ce:	f000 fd21 	bl	801cf14 <_Bfree>
 801c4d2:	2f00      	cmp	r7, #0
 801c4d4:	f43f aea4 	beq.w	801c220 <_dtoa_r+0x6a0>
 801c4d8:	f1b8 0f00 	cmp.w	r8, #0
 801c4dc:	d005      	beq.n	801c4ea <_dtoa_r+0x96a>
 801c4de:	45b8      	cmp	r8, r7
 801c4e0:	d003      	beq.n	801c4ea <_dtoa_r+0x96a>
 801c4e2:	4641      	mov	r1, r8
 801c4e4:	4620      	mov	r0, r4
 801c4e6:	f000 fd15 	bl	801cf14 <_Bfree>
 801c4ea:	4639      	mov	r1, r7
 801c4ec:	4620      	mov	r0, r4
 801c4ee:	f000 fd11 	bl	801cf14 <_Bfree>
 801c4f2:	e695      	b.n	801c220 <_dtoa_r+0x6a0>
 801c4f4:	2600      	movs	r6, #0
 801c4f6:	4637      	mov	r7, r6
 801c4f8:	e7e1      	b.n	801c4be <_dtoa_r+0x93e>
 801c4fa:	9700      	str	r7, [sp, #0]
 801c4fc:	4637      	mov	r7, r6
 801c4fe:	e599      	b.n	801c034 <_dtoa_r+0x4b4>
 801c500:	40240000 	.word	0x40240000
 801c504:	9b08      	ldr	r3, [sp, #32]
 801c506:	2b00      	cmp	r3, #0
 801c508:	f000 80ca 	beq.w	801c6a0 <_dtoa_r+0xb20>
 801c50c:	9b03      	ldr	r3, [sp, #12]
 801c50e:	9302      	str	r3, [sp, #8]
 801c510:	2d00      	cmp	r5, #0
 801c512:	dd05      	ble.n	801c520 <_dtoa_r+0x9a0>
 801c514:	4639      	mov	r1, r7
 801c516:	462a      	mov	r2, r5
 801c518:	4620      	mov	r0, r4
 801c51a:	f000 ff17 	bl	801d34c <__lshift>
 801c51e:	4607      	mov	r7, r0
 801c520:	f1b8 0f00 	cmp.w	r8, #0
 801c524:	d05b      	beq.n	801c5de <_dtoa_r+0xa5e>
 801c526:	6879      	ldr	r1, [r7, #4]
 801c528:	4620      	mov	r0, r4
 801c52a:	f000 fcb3 	bl	801ce94 <_Balloc>
 801c52e:	4605      	mov	r5, r0
 801c530:	b928      	cbnz	r0, 801c53e <_dtoa_r+0x9be>
 801c532:	4b87      	ldr	r3, [pc, #540]	; (801c750 <_dtoa_r+0xbd0>)
 801c534:	4602      	mov	r2, r0
 801c536:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c53a:	f7ff bb3b 	b.w	801bbb4 <_dtoa_r+0x34>
 801c53e:	693a      	ldr	r2, [r7, #16]
 801c540:	3202      	adds	r2, #2
 801c542:	0092      	lsls	r2, r2, #2
 801c544:	f107 010c 	add.w	r1, r7, #12
 801c548:	300c      	adds	r0, #12
 801c54a:	f000 fc95 	bl	801ce78 <memcpy>
 801c54e:	2201      	movs	r2, #1
 801c550:	4629      	mov	r1, r5
 801c552:	4620      	mov	r0, r4
 801c554:	f000 fefa 	bl	801d34c <__lshift>
 801c558:	9b01      	ldr	r3, [sp, #4]
 801c55a:	f103 0901 	add.w	r9, r3, #1
 801c55e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c562:	4413      	add	r3, r2
 801c564:	9305      	str	r3, [sp, #20]
 801c566:	f00a 0301 	and.w	r3, sl, #1
 801c56a:	46b8      	mov	r8, r7
 801c56c:	9304      	str	r3, [sp, #16]
 801c56e:	4607      	mov	r7, r0
 801c570:	4631      	mov	r1, r6
 801c572:	ee18 0a10 	vmov	r0, s16
 801c576:	f7ff fa75 	bl	801ba64 <quorem>
 801c57a:	4641      	mov	r1, r8
 801c57c:	9002      	str	r0, [sp, #8]
 801c57e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c582:	ee18 0a10 	vmov	r0, s16
 801c586:	f000 ff51 	bl	801d42c <__mcmp>
 801c58a:	463a      	mov	r2, r7
 801c58c:	9003      	str	r0, [sp, #12]
 801c58e:	4631      	mov	r1, r6
 801c590:	4620      	mov	r0, r4
 801c592:	f000 ff67 	bl	801d464 <__mdiff>
 801c596:	68c2      	ldr	r2, [r0, #12]
 801c598:	f109 3bff 	add.w	fp, r9, #4294967295
 801c59c:	4605      	mov	r5, r0
 801c59e:	bb02      	cbnz	r2, 801c5e2 <_dtoa_r+0xa62>
 801c5a0:	4601      	mov	r1, r0
 801c5a2:	ee18 0a10 	vmov	r0, s16
 801c5a6:	f000 ff41 	bl	801d42c <__mcmp>
 801c5aa:	4602      	mov	r2, r0
 801c5ac:	4629      	mov	r1, r5
 801c5ae:	4620      	mov	r0, r4
 801c5b0:	9207      	str	r2, [sp, #28]
 801c5b2:	f000 fcaf 	bl	801cf14 <_Bfree>
 801c5b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c5ba:	ea43 0102 	orr.w	r1, r3, r2
 801c5be:	9b04      	ldr	r3, [sp, #16]
 801c5c0:	430b      	orrs	r3, r1
 801c5c2:	464d      	mov	r5, r9
 801c5c4:	d10f      	bne.n	801c5e6 <_dtoa_r+0xa66>
 801c5c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c5ca:	d02a      	beq.n	801c622 <_dtoa_r+0xaa2>
 801c5cc:	9b03      	ldr	r3, [sp, #12]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	dd02      	ble.n	801c5d8 <_dtoa_r+0xa58>
 801c5d2:	9b02      	ldr	r3, [sp, #8]
 801c5d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c5d8:	f88b a000 	strb.w	sl, [fp]
 801c5dc:	e775      	b.n	801c4ca <_dtoa_r+0x94a>
 801c5de:	4638      	mov	r0, r7
 801c5e0:	e7ba      	b.n	801c558 <_dtoa_r+0x9d8>
 801c5e2:	2201      	movs	r2, #1
 801c5e4:	e7e2      	b.n	801c5ac <_dtoa_r+0xa2c>
 801c5e6:	9b03      	ldr	r3, [sp, #12]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	db04      	blt.n	801c5f6 <_dtoa_r+0xa76>
 801c5ec:	9906      	ldr	r1, [sp, #24]
 801c5ee:	430b      	orrs	r3, r1
 801c5f0:	9904      	ldr	r1, [sp, #16]
 801c5f2:	430b      	orrs	r3, r1
 801c5f4:	d122      	bne.n	801c63c <_dtoa_r+0xabc>
 801c5f6:	2a00      	cmp	r2, #0
 801c5f8:	ddee      	ble.n	801c5d8 <_dtoa_r+0xa58>
 801c5fa:	ee18 1a10 	vmov	r1, s16
 801c5fe:	2201      	movs	r2, #1
 801c600:	4620      	mov	r0, r4
 801c602:	f000 fea3 	bl	801d34c <__lshift>
 801c606:	4631      	mov	r1, r6
 801c608:	ee08 0a10 	vmov	s16, r0
 801c60c:	f000 ff0e 	bl	801d42c <__mcmp>
 801c610:	2800      	cmp	r0, #0
 801c612:	dc03      	bgt.n	801c61c <_dtoa_r+0xa9c>
 801c614:	d1e0      	bne.n	801c5d8 <_dtoa_r+0xa58>
 801c616:	f01a 0f01 	tst.w	sl, #1
 801c61a:	d0dd      	beq.n	801c5d8 <_dtoa_r+0xa58>
 801c61c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c620:	d1d7      	bne.n	801c5d2 <_dtoa_r+0xa52>
 801c622:	2339      	movs	r3, #57	; 0x39
 801c624:	f88b 3000 	strb.w	r3, [fp]
 801c628:	462b      	mov	r3, r5
 801c62a:	461d      	mov	r5, r3
 801c62c:	3b01      	subs	r3, #1
 801c62e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c632:	2a39      	cmp	r2, #57	; 0x39
 801c634:	d071      	beq.n	801c71a <_dtoa_r+0xb9a>
 801c636:	3201      	adds	r2, #1
 801c638:	701a      	strb	r2, [r3, #0]
 801c63a:	e746      	b.n	801c4ca <_dtoa_r+0x94a>
 801c63c:	2a00      	cmp	r2, #0
 801c63e:	dd07      	ble.n	801c650 <_dtoa_r+0xad0>
 801c640:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c644:	d0ed      	beq.n	801c622 <_dtoa_r+0xaa2>
 801c646:	f10a 0301 	add.w	r3, sl, #1
 801c64a:	f88b 3000 	strb.w	r3, [fp]
 801c64e:	e73c      	b.n	801c4ca <_dtoa_r+0x94a>
 801c650:	9b05      	ldr	r3, [sp, #20]
 801c652:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c656:	4599      	cmp	r9, r3
 801c658:	d047      	beq.n	801c6ea <_dtoa_r+0xb6a>
 801c65a:	ee18 1a10 	vmov	r1, s16
 801c65e:	2300      	movs	r3, #0
 801c660:	220a      	movs	r2, #10
 801c662:	4620      	mov	r0, r4
 801c664:	f000 fc78 	bl	801cf58 <__multadd>
 801c668:	45b8      	cmp	r8, r7
 801c66a:	ee08 0a10 	vmov	s16, r0
 801c66e:	f04f 0300 	mov.w	r3, #0
 801c672:	f04f 020a 	mov.w	r2, #10
 801c676:	4641      	mov	r1, r8
 801c678:	4620      	mov	r0, r4
 801c67a:	d106      	bne.n	801c68a <_dtoa_r+0xb0a>
 801c67c:	f000 fc6c 	bl	801cf58 <__multadd>
 801c680:	4680      	mov	r8, r0
 801c682:	4607      	mov	r7, r0
 801c684:	f109 0901 	add.w	r9, r9, #1
 801c688:	e772      	b.n	801c570 <_dtoa_r+0x9f0>
 801c68a:	f000 fc65 	bl	801cf58 <__multadd>
 801c68e:	4639      	mov	r1, r7
 801c690:	4680      	mov	r8, r0
 801c692:	2300      	movs	r3, #0
 801c694:	220a      	movs	r2, #10
 801c696:	4620      	mov	r0, r4
 801c698:	f000 fc5e 	bl	801cf58 <__multadd>
 801c69c:	4607      	mov	r7, r0
 801c69e:	e7f1      	b.n	801c684 <_dtoa_r+0xb04>
 801c6a0:	9b03      	ldr	r3, [sp, #12]
 801c6a2:	9302      	str	r3, [sp, #8]
 801c6a4:	9d01      	ldr	r5, [sp, #4]
 801c6a6:	ee18 0a10 	vmov	r0, s16
 801c6aa:	4631      	mov	r1, r6
 801c6ac:	f7ff f9da 	bl	801ba64 <quorem>
 801c6b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c6b4:	9b01      	ldr	r3, [sp, #4]
 801c6b6:	f805 ab01 	strb.w	sl, [r5], #1
 801c6ba:	1aea      	subs	r2, r5, r3
 801c6bc:	9b02      	ldr	r3, [sp, #8]
 801c6be:	4293      	cmp	r3, r2
 801c6c0:	dd09      	ble.n	801c6d6 <_dtoa_r+0xb56>
 801c6c2:	ee18 1a10 	vmov	r1, s16
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	220a      	movs	r2, #10
 801c6ca:	4620      	mov	r0, r4
 801c6cc:	f000 fc44 	bl	801cf58 <__multadd>
 801c6d0:	ee08 0a10 	vmov	s16, r0
 801c6d4:	e7e7      	b.n	801c6a6 <_dtoa_r+0xb26>
 801c6d6:	9b02      	ldr	r3, [sp, #8]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	bfc8      	it	gt
 801c6dc:	461d      	movgt	r5, r3
 801c6de:	9b01      	ldr	r3, [sp, #4]
 801c6e0:	bfd8      	it	le
 801c6e2:	2501      	movle	r5, #1
 801c6e4:	441d      	add	r5, r3
 801c6e6:	f04f 0800 	mov.w	r8, #0
 801c6ea:	ee18 1a10 	vmov	r1, s16
 801c6ee:	2201      	movs	r2, #1
 801c6f0:	4620      	mov	r0, r4
 801c6f2:	f000 fe2b 	bl	801d34c <__lshift>
 801c6f6:	4631      	mov	r1, r6
 801c6f8:	ee08 0a10 	vmov	s16, r0
 801c6fc:	f000 fe96 	bl	801d42c <__mcmp>
 801c700:	2800      	cmp	r0, #0
 801c702:	dc91      	bgt.n	801c628 <_dtoa_r+0xaa8>
 801c704:	d102      	bne.n	801c70c <_dtoa_r+0xb8c>
 801c706:	f01a 0f01 	tst.w	sl, #1
 801c70a:	d18d      	bne.n	801c628 <_dtoa_r+0xaa8>
 801c70c:	462b      	mov	r3, r5
 801c70e:	461d      	mov	r5, r3
 801c710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c714:	2a30      	cmp	r2, #48	; 0x30
 801c716:	d0fa      	beq.n	801c70e <_dtoa_r+0xb8e>
 801c718:	e6d7      	b.n	801c4ca <_dtoa_r+0x94a>
 801c71a:	9a01      	ldr	r2, [sp, #4]
 801c71c:	429a      	cmp	r2, r3
 801c71e:	d184      	bne.n	801c62a <_dtoa_r+0xaaa>
 801c720:	9b00      	ldr	r3, [sp, #0]
 801c722:	3301      	adds	r3, #1
 801c724:	9300      	str	r3, [sp, #0]
 801c726:	2331      	movs	r3, #49	; 0x31
 801c728:	7013      	strb	r3, [r2, #0]
 801c72a:	e6ce      	b.n	801c4ca <_dtoa_r+0x94a>
 801c72c:	4b09      	ldr	r3, [pc, #36]	; (801c754 <_dtoa_r+0xbd4>)
 801c72e:	f7ff ba95 	b.w	801bc5c <_dtoa_r+0xdc>
 801c732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c734:	2b00      	cmp	r3, #0
 801c736:	f47f aa6e 	bne.w	801bc16 <_dtoa_r+0x96>
 801c73a:	4b07      	ldr	r3, [pc, #28]	; (801c758 <_dtoa_r+0xbd8>)
 801c73c:	f7ff ba8e 	b.w	801bc5c <_dtoa_r+0xdc>
 801c740:	9b02      	ldr	r3, [sp, #8]
 801c742:	2b00      	cmp	r3, #0
 801c744:	dcae      	bgt.n	801c6a4 <_dtoa_r+0xb24>
 801c746:	9b06      	ldr	r3, [sp, #24]
 801c748:	2b02      	cmp	r3, #2
 801c74a:	f73f aea8 	bgt.w	801c49e <_dtoa_r+0x91e>
 801c74e:	e7a9      	b.n	801c6a4 <_dtoa_r+0xb24>
 801c750:	08052ab8 	.word	0x08052ab8
 801c754:	080528b8 	.word	0x080528b8
 801c758:	08052a39 	.word	0x08052a39

0801c75c <rshift>:
 801c75c:	6903      	ldr	r3, [r0, #16]
 801c75e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c766:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c76a:	f100 0414 	add.w	r4, r0, #20
 801c76e:	dd45      	ble.n	801c7fc <rshift+0xa0>
 801c770:	f011 011f 	ands.w	r1, r1, #31
 801c774:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c778:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c77c:	d10c      	bne.n	801c798 <rshift+0x3c>
 801c77e:	f100 0710 	add.w	r7, r0, #16
 801c782:	4629      	mov	r1, r5
 801c784:	42b1      	cmp	r1, r6
 801c786:	d334      	bcc.n	801c7f2 <rshift+0x96>
 801c788:	1a9b      	subs	r3, r3, r2
 801c78a:	009b      	lsls	r3, r3, #2
 801c78c:	1eea      	subs	r2, r5, #3
 801c78e:	4296      	cmp	r6, r2
 801c790:	bf38      	it	cc
 801c792:	2300      	movcc	r3, #0
 801c794:	4423      	add	r3, r4
 801c796:	e015      	b.n	801c7c4 <rshift+0x68>
 801c798:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c79c:	f1c1 0820 	rsb	r8, r1, #32
 801c7a0:	40cf      	lsrs	r7, r1
 801c7a2:	f105 0e04 	add.w	lr, r5, #4
 801c7a6:	46a1      	mov	r9, r4
 801c7a8:	4576      	cmp	r6, lr
 801c7aa:	46f4      	mov	ip, lr
 801c7ac:	d815      	bhi.n	801c7da <rshift+0x7e>
 801c7ae:	1a9a      	subs	r2, r3, r2
 801c7b0:	0092      	lsls	r2, r2, #2
 801c7b2:	3a04      	subs	r2, #4
 801c7b4:	3501      	adds	r5, #1
 801c7b6:	42ae      	cmp	r6, r5
 801c7b8:	bf38      	it	cc
 801c7ba:	2200      	movcc	r2, #0
 801c7bc:	18a3      	adds	r3, r4, r2
 801c7be:	50a7      	str	r7, [r4, r2]
 801c7c0:	b107      	cbz	r7, 801c7c4 <rshift+0x68>
 801c7c2:	3304      	adds	r3, #4
 801c7c4:	1b1a      	subs	r2, r3, r4
 801c7c6:	42a3      	cmp	r3, r4
 801c7c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c7cc:	bf08      	it	eq
 801c7ce:	2300      	moveq	r3, #0
 801c7d0:	6102      	str	r2, [r0, #16]
 801c7d2:	bf08      	it	eq
 801c7d4:	6143      	streq	r3, [r0, #20]
 801c7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7da:	f8dc c000 	ldr.w	ip, [ip]
 801c7de:	fa0c fc08 	lsl.w	ip, ip, r8
 801c7e2:	ea4c 0707 	orr.w	r7, ip, r7
 801c7e6:	f849 7b04 	str.w	r7, [r9], #4
 801c7ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c7ee:	40cf      	lsrs	r7, r1
 801c7f0:	e7da      	b.n	801c7a8 <rshift+0x4c>
 801c7f2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c7f6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c7fa:	e7c3      	b.n	801c784 <rshift+0x28>
 801c7fc:	4623      	mov	r3, r4
 801c7fe:	e7e1      	b.n	801c7c4 <rshift+0x68>

0801c800 <__hexdig_fun>:
 801c800:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c804:	2b09      	cmp	r3, #9
 801c806:	d802      	bhi.n	801c80e <__hexdig_fun+0xe>
 801c808:	3820      	subs	r0, #32
 801c80a:	b2c0      	uxtb	r0, r0
 801c80c:	4770      	bx	lr
 801c80e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c812:	2b05      	cmp	r3, #5
 801c814:	d801      	bhi.n	801c81a <__hexdig_fun+0x1a>
 801c816:	3847      	subs	r0, #71	; 0x47
 801c818:	e7f7      	b.n	801c80a <__hexdig_fun+0xa>
 801c81a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c81e:	2b05      	cmp	r3, #5
 801c820:	d801      	bhi.n	801c826 <__hexdig_fun+0x26>
 801c822:	3827      	subs	r0, #39	; 0x27
 801c824:	e7f1      	b.n	801c80a <__hexdig_fun+0xa>
 801c826:	2000      	movs	r0, #0
 801c828:	4770      	bx	lr
	...

0801c82c <__gethex>:
 801c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c830:	ed2d 8b02 	vpush	{d8}
 801c834:	b089      	sub	sp, #36	; 0x24
 801c836:	ee08 0a10 	vmov	s16, r0
 801c83a:	9304      	str	r3, [sp, #16]
 801c83c:	4bb4      	ldr	r3, [pc, #720]	; (801cb10 <__gethex+0x2e4>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	9301      	str	r3, [sp, #4]
 801c842:	4618      	mov	r0, r3
 801c844:	468b      	mov	fp, r1
 801c846:	4690      	mov	r8, r2
 801c848:	f7fc fc3c 	bl	80190c4 <strlen>
 801c84c:	9b01      	ldr	r3, [sp, #4]
 801c84e:	f8db 2000 	ldr.w	r2, [fp]
 801c852:	4403      	add	r3, r0
 801c854:	4682      	mov	sl, r0
 801c856:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c85a:	9305      	str	r3, [sp, #20]
 801c85c:	1c93      	adds	r3, r2, #2
 801c85e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c862:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c866:	32fe      	adds	r2, #254	; 0xfe
 801c868:	18d1      	adds	r1, r2, r3
 801c86a:	461f      	mov	r7, r3
 801c86c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c870:	9100      	str	r1, [sp, #0]
 801c872:	2830      	cmp	r0, #48	; 0x30
 801c874:	d0f8      	beq.n	801c868 <__gethex+0x3c>
 801c876:	f7ff ffc3 	bl	801c800 <__hexdig_fun>
 801c87a:	4604      	mov	r4, r0
 801c87c:	2800      	cmp	r0, #0
 801c87e:	d13a      	bne.n	801c8f6 <__gethex+0xca>
 801c880:	9901      	ldr	r1, [sp, #4]
 801c882:	4652      	mov	r2, sl
 801c884:	4638      	mov	r0, r7
 801c886:	f001 fa33 	bl	801dcf0 <strncmp>
 801c88a:	4605      	mov	r5, r0
 801c88c:	2800      	cmp	r0, #0
 801c88e:	d168      	bne.n	801c962 <__gethex+0x136>
 801c890:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c894:	eb07 060a 	add.w	r6, r7, sl
 801c898:	f7ff ffb2 	bl	801c800 <__hexdig_fun>
 801c89c:	2800      	cmp	r0, #0
 801c89e:	d062      	beq.n	801c966 <__gethex+0x13a>
 801c8a0:	4633      	mov	r3, r6
 801c8a2:	7818      	ldrb	r0, [r3, #0]
 801c8a4:	2830      	cmp	r0, #48	; 0x30
 801c8a6:	461f      	mov	r7, r3
 801c8a8:	f103 0301 	add.w	r3, r3, #1
 801c8ac:	d0f9      	beq.n	801c8a2 <__gethex+0x76>
 801c8ae:	f7ff ffa7 	bl	801c800 <__hexdig_fun>
 801c8b2:	2301      	movs	r3, #1
 801c8b4:	fab0 f480 	clz	r4, r0
 801c8b8:	0964      	lsrs	r4, r4, #5
 801c8ba:	4635      	mov	r5, r6
 801c8bc:	9300      	str	r3, [sp, #0]
 801c8be:	463a      	mov	r2, r7
 801c8c0:	4616      	mov	r6, r2
 801c8c2:	3201      	adds	r2, #1
 801c8c4:	7830      	ldrb	r0, [r6, #0]
 801c8c6:	f7ff ff9b 	bl	801c800 <__hexdig_fun>
 801c8ca:	2800      	cmp	r0, #0
 801c8cc:	d1f8      	bne.n	801c8c0 <__gethex+0x94>
 801c8ce:	9901      	ldr	r1, [sp, #4]
 801c8d0:	4652      	mov	r2, sl
 801c8d2:	4630      	mov	r0, r6
 801c8d4:	f001 fa0c 	bl	801dcf0 <strncmp>
 801c8d8:	b980      	cbnz	r0, 801c8fc <__gethex+0xd0>
 801c8da:	b94d      	cbnz	r5, 801c8f0 <__gethex+0xc4>
 801c8dc:	eb06 050a 	add.w	r5, r6, sl
 801c8e0:	462a      	mov	r2, r5
 801c8e2:	4616      	mov	r6, r2
 801c8e4:	3201      	adds	r2, #1
 801c8e6:	7830      	ldrb	r0, [r6, #0]
 801c8e8:	f7ff ff8a 	bl	801c800 <__hexdig_fun>
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	d1f8      	bne.n	801c8e2 <__gethex+0xb6>
 801c8f0:	1bad      	subs	r5, r5, r6
 801c8f2:	00ad      	lsls	r5, r5, #2
 801c8f4:	e004      	b.n	801c900 <__gethex+0xd4>
 801c8f6:	2400      	movs	r4, #0
 801c8f8:	4625      	mov	r5, r4
 801c8fa:	e7e0      	b.n	801c8be <__gethex+0x92>
 801c8fc:	2d00      	cmp	r5, #0
 801c8fe:	d1f7      	bne.n	801c8f0 <__gethex+0xc4>
 801c900:	7833      	ldrb	r3, [r6, #0]
 801c902:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c906:	2b50      	cmp	r3, #80	; 0x50
 801c908:	d13b      	bne.n	801c982 <__gethex+0x156>
 801c90a:	7873      	ldrb	r3, [r6, #1]
 801c90c:	2b2b      	cmp	r3, #43	; 0x2b
 801c90e:	d02c      	beq.n	801c96a <__gethex+0x13e>
 801c910:	2b2d      	cmp	r3, #45	; 0x2d
 801c912:	d02e      	beq.n	801c972 <__gethex+0x146>
 801c914:	1c71      	adds	r1, r6, #1
 801c916:	f04f 0900 	mov.w	r9, #0
 801c91a:	7808      	ldrb	r0, [r1, #0]
 801c91c:	f7ff ff70 	bl	801c800 <__hexdig_fun>
 801c920:	1e43      	subs	r3, r0, #1
 801c922:	b2db      	uxtb	r3, r3
 801c924:	2b18      	cmp	r3, #24
 801c926:	d82c      	bhi.n	801c982 <__gethex+0x156>
 801c928:	f1a0 0210 	sub.w	r2, r0, #16
 801c92c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c930:	f7ff ff66 	bl	801c800 <__hexdig_fun>
 801c934:	1e43      	subs	r3, r0, #1
 801c936:	b2db      	uxtb	r3, r3
 801c938:	2b18      	cmp	r3, #24
 801c93a:	d91d      	bls.n	801c978 <__gethex+0x14c>
 801c93c:	f1b9 0f00 	cmp.w	r9, #0
 801c940:	d000      	beq.n	801c944 <__gethex+0x118>
 801c942:	4252      	negs	r2, r2
 801c944:	4415      	add	r5, r2
 801c946:	f8cb 1000 	str.w	r1, [fp]
 801c94a:	b1e4      	cbz	r4, 801c986 <__gethex+0x15a>
 801c94c:	9b00      	ldr	r3, [sp, #0]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	bf14      	ite	ne
 801c952:	2700      	movne	r7, #0
 801c954:	2706      	moveq	r7, #6
 801c956:	4638      	mov	r0, r7
 801c958:	b009      	add	sp, #36	; 0x24
 801c95a:	ecbd 8b02 	vpop	{d8}
 801c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c962:	463e      	mov	r6, r7
 801c964:	4625      	mov	r5, r4
 801c966:	2401      	movs	r4, #1
 801c968:	e7ca      	b.n	801c900 <__gethex+0xd4>
 801c96a:	f04f 0900 	mov.w	r9, #0
 801c96e:	1cb1      	adds	r1, r6, #2
 801c970:	e7d3      	b.n	801c91a <__gethex+0xee>
 801c972:	f04f 0901 	mov.w	r9, #1
 801c976:	e7fa      	b.n	801c96e <__gethex+0x142>
 801c978:	230a      	movs	r3, #10
 801c97a:	fb03 0202 	mla	r2, r3, r2, r0
 801c97e:	3a10      	subs	r2, #16
 801c980:	e7d4      	b.n	801c92c <__gethex+0x100>
 801c982:	4631      	mov	r1, r6
 801c984:	e7df      	b.n	801c946 <__gethex+0x11a>
 801c986:	1bf3      	subs	r3, r6, r7
 801c988:	3b01      	subs	r3, #1
 801c98a:	4621      	mov	r1, r4
 801c98c:	2b07      	cmp	r3, #7
 801c98e:	dc0b      	bgt.n	801c9a8 <__gethex+0x17c>
 801c990:	ee18 0a10 	vmov	r0, s16
 801c994:	f000 fa7e 	bl	801ce94 <_Balloc>
 801c998:	4604      	mov	r4, r0
 801c99a:	b940      	cbnz	r0, 801c9ae <__gethex+0x182>
 801c99c:	4b5d      	ldr	r3, [pc, #372]	; (801cb14 <__gethex+0x2e8>)
 801c99e:	4602      	mov	r2, r0
 801c9a0:	21de      	movs	r1, #222	; 0xde
 801c9a2:	485d      	ldr	r0, [pc, #372]	; (801cb18 <__gethex+0x2ec>)
 801c9a4:	f001 f9c6 	bl	801dd34 <__assert_func>
 801c9a8:	3101      	adds	r1, #1
 801c9aa:	105b      	asrs	r3, r3, #1
 801c9ac:	e7ee      	b.n	801c98c <__gethex+0x160>
 801c9ae:	f100 0914 	add.w	r9, r0, #20
 801c9b2:	f04f 0b00 	mov.w	fp, #0
 801c9b6:	f1ca 0301 	rsb	r3, sl, #1
 801c9ba:	f8cd 9008 	str.w	r9, [sp, #8]
 801c9be:	f8cd b000 	str.w	fp, [sp]
 801c9c2:	9306      	str	r3, [sp, #24]
 801c9c4:	42b7      	cmp	r7, r6
 801c9c6:	d340      	bcc.n	801ca4a <__gethex+0x21e>
 801c9c8:	9802      	ldr	r0, [sp, #8]
 801c9ca:	9b00      	ldr	r3, [sp, #0]
 801c9cc:	f840 3b04 	str.w	r3, [r0], #4
 801c9d0:	eba0 0009 	sub.w	r0, r0, r9
 801c9d4:	1080      	asrs	r0, r0, #2
 801c9d6:	0146      	lsls	r6, r0, #5
 801c9d8:	6120      	str	r0, [r4, #16]
 801c9da:	4618      	mov	r0, r3
 801c9dc:	f000 fb4c 	bl	801d078 <__hi0bits>
 801c9e0:	1a30      	subs	r0, r6, r0
 801c9e2:	f8d8 6000 	ldr.w	r6, [r8]
 801c9e6:	42b0      	cmp	r0, r6
 801c9e8:	dd63      	ble.n	801cab2 <__gethex+0x286>
 801c9ea:	1b87      	subs	r7, r0, r6
 801c9ec:	4639      	mov	r1, r7
 801c9ee:	4620      	mov	r0, r4
 801c9f0:	f000 fef0 	bl	801d7d4 <__any_on>
 801c9f4:	4682      	mov	sl, r0
 801c9f6:	b1a8      	cbz	r0, 801ca24 <__gethex+0x1f8>
 801c9f8:	1e7b      	subs	r3, r7, #1
 801c9fa:	1159      	asrs	r1, r3, #5
 801c9fc:	f003 021f 	and.w	r2, r3, #31
 801ca00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ca04:	f04f 0a01 	mov.w	sl, #1
 801ca08:	fa0a f202 	lsl.w	r2, sl, r2
 801ca0c:	420a      	tst	r2, r1
 801ca0e:	d009      	beq.n	801ca24 <__gethex+0x1f8>
 801ca10:	4553      	cmp	r3, sl
 801ca12:	dd05      	ble.n	801ca20 <__gethex+0x1f4>
 801ca14:	1eb9      	subs	r1, r7, #2
 801ca16:	4620      	mov	r0, r4
 801ca18:	f000 fedc 	bl	801d7d4 <__any_on>
 801ca1c:	2800      	cmp	r0, #0
 801ca1e:	d145      	bne.n	801caac <__gethex+0x280>
 801ca20:	f04f 0a02 	mov.w	sl, #2
 801ca24:	4639      	mov	r1, r7
 801ca26:	4620      	mov	r0, r4
 801ca28:	f7ff fe98 	bl	801c75c <rshift>
 801ca2c:	443d      	add	r5, r7
 801ca2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ca32:	42ab      	cmp	r3, r5
 801ca34:	da4c      	bge.n	801cad0 <__gethex+0x2a4>
 801ca36:	ee18 0a10 	vmov	r0, s16
 801ca3a:	4621      	mov	r1, r4
 801ca3c:	f000 fa6a 	bl	801cf14 <_Bfree>
 801ca40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca42:	2300      	movs	r3, #0
 801ca44:	6013      	str	r3, [r2, #0]
 801ca46:	27a3      	movs	r7, #163	; 0xa3
 801ca48:	e785      	b.n	801c956 <__gethex+0x12a>
 801ca4a:	1e73      	subs	r3, r6, #1
 801ca4c:	9a05      	ldr	r2, [sp, #20]
 801ca4e:	9303      	str	r3, [sp, #12]
 801ca50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ca54:	4293      	cmp	r3, r2
 801ca56:	d019      	beq.n	801ca8c <__gethex+0x260>
 801ca58:	f1bb 0f20 	cmp.w	fp, #32
 801ca5c:	d107      	bne.n	801ca6e <__gethex+0x242>
 801ca5e:	9b02      	ldr	r3, [sp, #8]
 801ca60:	9a00      	ldr	r2, [sp, #0]
 801ca62:	f843 2b04 	str.w	r2, [r3], #4
 801ca66:	9302      	str	r3, [sp, #8]
 801ca68:	2300      	movs	r3, #0
 801ca6a:	9300      	str	r3, [sp, #0]
 801ca6c:	469b      	mov	fp, r3
 801ca6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ca72:	f7ff fec5 	bl	801c800 <__hexdig_fun>
 801ca76:	9b00      	ldr	r3, [sp, #0]
 801ca78:	f000 000f 	and.w	r0, r0, #15
 801ca7c:	fa00 f00b 	lsl.w	r0, r0, fp
 801ca80:	4303      	orrs	r3, r0
 801ca82:	9300      	str	r3, [sp, #0]
 801ca84:	f10b 0b04 	add.w	fp, fp, #4
 801ca88:	9b03      	ldr	r3, [sp, #12]
 801ca8a:	e00d      	b.n	801caa8 <__gethex+0x27c>
 801ca8c:	9b03      	ldr	r3, [sp, #12]
 801ca8e:	9a06      	ldr	r2, [sp, #24]
 801ca90:	4413      	add	r3, r2
 801ca92:	42bb      	cmp	r3, r7
 801ca94:	d3e0      	bcc.n	801ca58 <__gethex+0x22c>
 801ca96:	4618      	mov	r0, r3
 801ca98:	9901      	ldr	r1, [sp, #4]
 801ca9a:	9307      	str	r3, [sp, #28]
 801ca9c:	4652      	mov	r2, sl
 801ca9e:	f001 f927 	bl	801dcf0 <strncmp>
 801caa2:	9b07      	ldr	r3, [sp, #28]
 801caa4:	2800      	cmp	r0, #0
 801caa6:	d1d7      	bne.n	801ca58 <__gethex+0x22c>
 801caa8:	461e      	mov	r6, r3
 801caaa:	e78b      	b.n	801c9c4 <__gethex+0x198>
 801caac:	f04f 0a03 	mov.w	sl, #3
 801cab0:	e7b8      	b.n	801ca24 <__gethex+0x1f8>
 801cab2:	da0a      	bge.n	801caca <__gethex+0x29e>
 801cab4:	1a37      	subs	r7, r6, r0
 801cab6:	4621      	mov	r1, r4
 801cab8:	ee18 0a10 	vmov	r0, s16
 801cabc:	463a      	mov	r2, r7
 801cabe:	f000 fc45 	bl	801d34c <__lshift>
 801cac2:	1bed      	subs	r5, r5, r7
 801cac4:	4604      	mov	r4, r0
 801cac6:	f100 0914 	add.w	r9, r0, #20
 801caca:	f04f 0a00 	mov.w	sl, #0
 801cace:	e7ae      	b.n	801ca2e <__gethex+0x202>
 801cad0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cad4:	42a8      	cmp	r0, r5
 801cad6:	dd72      	ble.n	801cbbe <__gethex+0x392>
 801cad8:	1b45      	subs	r5, r0, r5
 801cada:	42ae      	cmp	r6, r5
 801cadc:	dc36      	bgt.n	801cb4c <__gethex+0x320>
 801cade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cae2:	2b02      	cmp	r3, #2
 801cae4:	d02a      	beq.n	801cb3c <__gethex+0x310>
 801cae6:	2b03      	cmp	r3, #3
 801cae8:	d02c      	beq.n	801cb44 <__gethex+0x318>
 801caea:	2b01      	cmp	r3, #1
 801caec:	d11c      	bne.n	801cb28 <__gethex+0x2fc>
 801caee:	42ae      	cmp	r6, r5
 801caf0:	d11a      	bne.n	801cb28 <__gethex+0x2fc>
 801caf2:	2e01      	cmp	r6, #1
 801caf4:	d112      	bne.n	801cb1c <__gethex+0x2f0>
 801caf6:	9a04      	ldr	r2, [sp, #16]
 801caf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cafc:	6013      	str	r3, [r2, #0]
 801cafe:	2301      	movs	r3, #1
 801cb00:	6123      	str	r3, [r4, #16]
 801cb02:	f8c9 3000 	str.w	r3, [r9]
 801cb06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cb08:	2762      	movs	r7, #98	; 0x62
 801cb0a:	601c      	str	r4, [r3, #0]
 801cb0c:	e723      	b.n	801c956 <__gethex+0x12a>
 801cb0e:	bf00      	nop
 801cb10:	08052b30 	.word	0x08052b30
 801cb14:	08052ab8 	.word	0x08052ab8
 801cb18:	08052ac9 	.word	0x08052ac9
 801cb1c:	1e71      	subs	r1, r6, #1
 801cb1e:	4620      	mov	r0, r4
 801cb20:	f000 fe58 	bl	801d7d4 <__any_on>
 801cb24:	2800      	cmp	r0, #0
 801cb26:	d1e6      	bne.n	801caf6 <__gethex+0x2ca>
 801cb28:	ee18 0a10 	vmov	r0, s16
 801cb2c:	4621      	mov	r1, r4
 801cb2e:	f000 f9f1 	bl	801cf14 <_Bfree>
 801cb32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb34:	2300      	movs	r3, #0
 801cb36:	6013      	str	r3, [r2, #0]
 801cb38:	2750      	movs	r7, #80	; 0x50
 801cb3a:	e70c      	b.n	801c956 <__gethex+0x12a>
 801cb3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d1f2      	bne.n	801cb28 <__gethex+0x2fc>
 801cb42:	e7d8      	b.n	801caf6 <__gethex+0x2ca>
 801cb44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d1d5      	bne.n	801caf6 <__gethex+0x2ca>
 801cb4a:	e7ed      	b.n	801cb28 <__gethex+0x2fc>
 801cb4c:	1e6f      	subs	r7, r5, #1
 801cb4e:	f1ba 0f00 	cmp.w	sl, #0
 801cb52:	d131      	bne.n	801cbb8 <__gethex+0x38c>
 801cb54:	b127      	cbz	r7, 801cb60 <__gethex+0x334>
 801cb56:	4639      	mov	r1, r7
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f000 fe3b 	bl	801d7d4 <__any_on>
 801cb5e:	4682      	mov	sl, r0
 801cb60:	117b      	asrs	r3, r7, #5
 801cb62:	2101      	movs	r1, #1
 801cb64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cb68:	f007 071f 	and.w	r7, r7, #31
 801cb6c:	fa01 f707 	lsl.w	r7, r1, r7
 801cb70:	421f      	tst	r7, r3
 801cb72:	4629      	mov	r1, r5
 801cb74:	4620      	mov	r0, r4
 801cb76:	bf18      	it	ne
 801cb78:	f04a 0a02 	orrne.w	sl, sl, #2
 801cb7c:	1b76      	subs	r6, r6, r5
 801cb7e:	f7ff fded 	bl	801c75c <rshift>
 801cb82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cb86:	2702      	movs	r7, #2
 801cb88:	f1ba 0f00 	cmp.w	sl, #0
 801cb8c:	d048      	beq.n	801cc20 <__gethex+0x3f4>
 801cb8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb92:	2b02      	cmp	r3, #2
 801cb94:	d015      	beq.n	801cbc2 <__gethex+0x396>
 801cb96:	2b03      	cmp	r3, #3
 801cb98:	d017      	beq.n	801cbca <__gethex+0x39e>
 801cb9a:	2b01      	cmp	r3, #1
 801cb9c:	d109      	bne.n	801cbb2 <__gethex+0x386>
 801cb9e:	f01a 0f02 	tst.w	sl, #2
 801cba2:	d006      	beq.n	801cbb2 <__gethex+0x386>
 801cba4:	f8d9 0000 	ldr.w	r0, [r9]
 801cba8:	ea4a 0a00 	orr.w	sl, sl, r0
 801cbac:	f01a 0f01 	tst.w	sl, #1
 801cbb0:	d10e      	bne.n	801cbd0 <__gethex+0x3a4>
 801cbb2:	f047 0710 	orr.w	r7, r7, #16
 801cbb6:	e033      	b.n	801cc20 <__gethex+0x3f4>
 801cbb8:	f04f 0a01 	mov.w	sl, #1
 801cbbc:	e7d0      	b.n	801cb60 <__gethex+0x334>
 801cbbe:	2701      	movs	r7, #1
 801cbc0:	e7e2      	b.n	801cb88 <__gethex+0x35c>
 801cbc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbc4:	f1c3 0301 	rsb	r3, r3, #1
 801cbc8:	9315      	str	r3, [sp, #84]	; 0x54
 801cbca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d0f0      	beq.n	801cbb2 <__gethex+0x386>
 801cbd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cbd4:	f104 0314 	add.w	r3, r4, #20
 801cbd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cbdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cbe0:	f04f 0c00 	mov.w	ip, #0
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbea:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cbee:	d01c      	beq.n	801cc2a <__gethex+0x3fe>
 801cbf0:	3201      	adds	r2, #1
 801cbf2:	6002      	str	r2, [r0, #0]
 801cbf4:	2f02      	cmp	r7, #2
 801cbf6:	f104 0314 	add.w	r3, r4, #20
 801cbfa:	d13f      	bne.n	801cc7c <__gethex+0x450>
 801cbfc:	f8d8 2000 	ldr.w	r2, [r8]
 801cc00:	3a01      	subs	r2, #1
 801cc02:	42b2      	cmp	r2, r6
 801cc04:	d10a      	bne.n	801cc1c <__gethex+0x3f0>
 801cc06:	1171      	asrs	r1, r6, #5
 801cc08:	2201      	movs	r2, #1
 801cc0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cc0e:	f006 061f 	and.w	r6, r6, #31
 801cc12:	fa02 f606 	lsl.w	r6, r2, r6
 801cc16:	421e      	tst	r6, r3
 801cc18:	bf18      	it	ne
 801cc1a:	4617      	movne	r7, r2
 801cc1c:	f047 0720 	orr.w	r7, r7, #32
 801cc20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cc22:	601c      	str	r4, [r3, #0]
 801cc24:	9b04      	ldr	r3, [sp, #16]
 801cc26:	601d      	str	r5, [r3, #0]
 801cc28:	e695      	b.n	801c956 <__gethex+0x12a>
 801cc2a:	4299      	cmp	r1, r3
 801cc2c:	f843 cc04 	str.w	ip, [r3, #-4]
 801cc30:	d8d8      	bhi.n	801cbe4 <__gethex+0x3b8>
 801cc32:	68a3      	ldr	r3, [r4, #8]
 801cc34:	459b      	cmp	fp, r3
 801cc36:	db19      	blt.n	801cc6c <__gethex+0x440>
 801cc38:	6861      	ldr	r1, [r4, #4]
 801cc3a:	ee18 0a10 	vmov	r0, s16
 801cc3e:	3101      	adds	r1, #1
 801cc40:	f000 f928 	bl	801ce94 <_Balloc>
 801cc44:	4681      	mov	r9, r0
 801cc46:	b918      	cbnz	r0, 801cc50 <__gethex+0x424>
 801cc48:	4b1a      	ldr	r3, [pc, #104]	; (801ccb4 <__gethex+0x488>)
 801cc4a:	4602      	mov	r2, r0
 801cc4c:	2184      	movs	r1, #132	; 0x84
 801cc4e:	e6a8      	b.n	801c9a2 <__gethex+0x176>
 801cc50:	6922      	ldr	r2, [r4, #16]
 801cc52:	3202      	adds	r2, #2
 801cc54:	f104 010c 	add.w	r1, r4, #12
 801cc58:	0092      	lsls	r2, r2, #2
 801cc5a:	300c      	adds	r0, #12
 801cc5c:	f000 f90c 	bl	801ce78 <memcpy>
 801cc60:	4621      	mov	r1, r4
 801cc62:	ee18 0a10 	vmov	r0, s16
 801cc66:	f000 f955 	bl	801cf14 <_Bfree>
 801cc6a:	464c      	mov	r4, r9
 801cc6c:	6923      	ldr	r3, [r4, #16]
 801cc6e:	1c5a      	adds	r2, r3, #1
 801cc70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cc74:	6122      	str	r2, [r4, #16]
 801cc76:	2201      	movs	r2, #1
 801cc78:	615a      	str	r2, [r3, #20]
 801cc7a:	e7bb      	b.n	801cbf4 <__gethex+0x3c8>
 801cc7c:	6922      	ldr	r2, [r4, #16]
 801cc7e:	455a      	cmp	r2, fp
 801cc80:	dd0b      	ble.n	801cc9a <__gethex+0x46e>
 801cc82:	2101      	movs	r1, #1
 801cc84:	4620      	mov	r0, r4
 801cc86:	f7ff fd69 	bl	801c75c <rshift>
 801cc8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cc8e:	3501      	adds	r5, #1
 801cc90:	42ab      	cmp	r3, r5
 801cc92:	f6ff aed0 	blt.w	801ca36 <__gethex+0x20a>
 801cc96:	2701      	movs	r7, #1
 801cc98:	e7c0      	b.n	801cc1c <__gethex+0x3f0>
 801cc9a:	f016 061f 	ands.w	r6, r6, #31
 801cc9e:	d0fa      	beq.n	801cc96 <__gethex+0x46a>
 801cca0:	4453      	add	r3, sl
 801cca2:	f1c6 0620 	rsb	r6, r6, #32
 801cca6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ccaa:	f000 f9e5 	bl	801d078 <__hi0bits>
 801ccae:	42b0      	cmp	r0, r6
 801ccb0:	dbe7      	blt.n	801cc82 <__gethex+0x456>
 801ccb2:	e7f0      	b.n	801cc96 <__gethex+0x46a>
 801ccb4:	08052ab8 	.word	0x08052ab8

0801ccb8 <L_shift>:
 801ccb8:	f1c2 0208 	rsb	r2, r2, #8
 801ccbc:	0092      	lsls	r2, r2, #2
 801ccbe:	b570      	push	{r4, r5, r6, lr}
 801ccc0:	f1c2 0620 	rsb	r6, r2, #32
 801ccc4:	6843      	ldr	r3, [r0, #4]
 801ccc6:	6804      	ldr	r4, [r0, #0]
 801ccc8:	fa03 f506 	lsl.w	r5, r3, r6
 801cccc:	432c      	orrs	r4, r5
 801ccce:	40d3      	lsrs	r3, r2
 801ccd0:	6004      	str	r4, [r0, #0]
 801ccd2:	f840 3f04 	str.w	r3, [r0, #4]!
 801ccd6:	4288      	cmp	r0, r1
 801ccd8:	d3f4      	bcc.n	801ccc4 <L_shift+0xc>
 801ccda:	bd70      	pop	{r4, r5, r6, pc}

0801ccdc <__match>:
 801ccdc:	b530      	push	{r4, r5, lr}
 801ccde:	6803      	ldr	r3, [r0, #0]
 801cce0:	3301      	adds	r3, #1
 801cce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cce6:	b914      	cbnz	r4, 801ccee <__match+0x12>
 801cce8:	6003      	str	r3, [r0, #0]
 801ccea:	2001      	movs	r0, #1
 801ccec:	bd30      	pop	{r4, r5, pc}
 801ccee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ccf6:	2d19      	cmp	r5, #25
 801ccf8:	bf98      	it	ls
 801ccfa:	3220      	addls	r2, #32
 801ccfc:	42a2      	cmp	r2, r4
 801ccfe:	d0f0      	beq.n	801cce2 <__match+0x6>
 801cd00:	2000      	movs	r0, #0
 801cd02:	e7f3      	b.n	801ccec <__match+0x10>

0801cd04 <__hexnan>:
 801cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd08:	680b      	ldr	r3, [r1, #0]
 801cd0a:	115e      	asrs	r6, r3, #5
 801cd0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cd10:	f013 031f 	ands.w	r3, r3, #31
 801cd14:	b087      	sub	sp, #28
 801cd16:	bf18      	it	ne
 801cd18:	3604      	addne	r6, #4
 801cd1a:	2500      	movs	r5, #0
 801cd1c:	1f37      	subs	r7, r6, #4
 801cd1e:	4690      	mov	r8, r2
 801cd20:	6802      	ldr	r2, [r0, #0]
 801cd22:	9301      	str	r3, [sp, #4]
 801cd24:	4682      	mov	sl, r0
 801cd26:	f846 5c04 	str.w	r5, [r6, #-4]
 801cd2a:	46b9      	mov	r9, r7
 801cd2c:	463c      	mov	r4, r7
 801cd2e:	9502      	str	r5, [sp, #8]
 801cd30:	46ab      	mov	fp, r5
 801cd32:	7851      	ldrb	r1, [r2, #1]
 801cd34:	1c53      	adds	r3, r2, #1
 801cd36:	9303      	str	r3, [sp, #12]
 801cd38:	b341      	cbz	r1, 801cd8c <__hexnan+0x88>
 801cd3a:	4608      	mov	r0, r1
 801cd3c:	9205      	str	r2, [sp, #20]
 801cd3e:	9104      	str	r1, [sp, #16]
 801cd40:	f7ff fd5e 	bl	801c800 <__hexdig_fun>
 801cd44:	2800      	cmp	r0, #0
 801cd46:	d14f      	bne.n	801cde8 <__hexnan+0xe4>
 801cd48:	9904      	ldr	r1, [sp, #16]
 801cd4a:	9a05      	ldr	r2, [sp, #20]
 801cd4c:	2920      	cmp	r1, #32
 801cd4e:	d818      	bhi.n	801cd82 <__hexnan+0x7e>
 801cd50:	9b02      	ldr	r3, [sp, #8]
 801cd52:	459b      	cmp	fp, r3
 801cd54:	dd13      	ble.n	801cd7e <__hexnan+0x7a>
 801cd56:	454c      	cmp	r4, r9
 801cd58:	d206      	bcs.n	801cd68 <__hexnan+0x64>
 801cd5a:	2d07      	cmp	r5, #7
 801cd5c:	dc04      	bgt.n	801cd68 <__hexnan+0x64>
 801cd5e:	462a      	mov	r2, r5
 801cd60:	4649      	mov	r1, r9
 801cd62:	4620      	mov	r0, r4
 801cd64:	f7ff ffa8 	bl	801ccb8 <L_shift>
 801cd68:	4544      	cmp	r4, r8
 801cd6a:	d950      	bls.n	801ce0e <__hexnan+0x10a>
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	f1a4 0904 	sub.w	r9, r4, #4
 801cd72:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd76:	f8cd b008 	str.w	fp, [sp, #8]
 801cd7a:	464c      	mov	r4, r9
 801cd7c:	461d      	mov	r5, r3
 801cd7e:	9a03      	ldr	r2, [sp, #12]
 801cd80:	e7d7      	b.n	801cd32 <__hexnan+0x2e>
 801cd82:	2929      	cmp	r1, #41	; 0x29
 801cd84:	d156      	bne.n	801ce34 <__hexnan+0x130>
 801cd86:	3202      	adds	r2, #2
 801cd88:	f8ca 2000 	str.w	r2, [sl]
 801cd8c:	f1bb 0f00 	cmp.w	fp, #0
 801cd90:	d050      	beq.n	801ce34 <__hexnan+0x130>
 801cd92:	454c      	cmp	r4, r9
 801cd94:	d206      	bcs.n	801cda4 <__hexnan+0xa0>
 801cd96:	2d07      	cmp	r5, #7
 801cd98:	dc04      	bgt.n	801cda4 <__hexnan+0xa0>
 801cd9a:	462a      	mov	r2, r5
 801cd9c:	4649      	mov	r1, r9
 801cd9e:	4620      	mov	r0, r4
 801cda0:	f7ff ff8a 	bl	801ccb8 <L_shift>
 801cda4:	4544      	cmp	r4, r8
 801cda6:	d934      	bls.n	801ce12 <__hexnan+0x10e>
 801cda8:	f1a8 0204 	sub.w	r2, r8, #4
 801cdac:	4623      	mov	r3, r4
 801cdae:	f853 1b04 	ldr.w	r1, [r3], #4
 801cdb2:	f842 1f04 	str.w	r1, [r2, #4]!
 801cdb6:	429f      	cmp	r7, r3
 801cdb8:	d2f9      	bcs.n	801cdae <__hexnan+0xaa>
 801cdba:	1b3b      	subs	r3, r7, r4
 801cdbc:	f023 0303 	bic.w	r3, r3, #3
 801cdc0:	3304      	adds	r3, #4
 801cdc2:	3401      	adds	r4, #1
 801cdc4:	3e03      	subs	r6, #3
 801cdc6:	42b4      	cmp	r4, r6
 801cdc8:	bf88      	it	hi
 801cdca:	2304      	movhi	r3, #4
 801cdcc:	4443      	add	r3, r8
 801cdce:	2200      	movs	r2, #0
 801cdd0:	f843 2b04 	str.w	r2, [r3], #4
 801cdd4:	429f      	cmp	r7, r3
 801cdd6:	d2fb      	bcs.n	801cdd0 <__hexnan+0xcc>
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	b91b      	cbnz	r3, 801cde4 <__hexnan+0xe0>
 801cddc:	4547      	cmp	r7, r8
 801cdde:	d127      	bne.n	801ce30 <__hexnan+0x12c>
 801cde0:	2301      	movs	r3, #1
 801cde2:	603b      	str	r3, [r7, #0]
 801cde4:	2005      	movs	r0, #5
 801cde6:	e026      	b.n	801ce36 <__hexnan+0x132>
 801cde8:	3501      	adds	r5, #1
 801cdea:	2d08      	cmp	r5, #8
 801cdec:	f10b 0b01 	add.w	fp, fp, #1
 801cdf0:	dd06      	ble.n	801ce00 <__hexnan+0xfc>
 801cdf2:	4544      	cmp	r4, r8
 801cdf4:	d9c3      	bls.n	801cd7e <__hexnan+0x7a>
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	f844 3c04 	str.w	r3, [r4, #-4]
 801cdfc:	2501      	movs	r5, #1
 801cdfe:	3c04      	subs	r4, #4
 801ce00:	6822      	ldr	r2, [r4, #0]
 801ce02:	f000 000f 	and.w	r0, r0, #15
 801ce06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ce0a:	6022      	str	r2, [r4, #0]
 801ce0c:	e7b7      	b.n	801cd7e <__hexnan+0x7a>
 801ce0e:	2508      	movs	r5, #8
 801ce10:	e7b5      	b.n	801cd7e <__hexnan+0x7a>
 801ce12:	9b01      	ldr	r3, [sp, #4]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d0df      	beq.n	801cdd8 <__hexnan+0xd4>
 801ce18:	f04f 32ff 	mov.w	r2, #4294967295
 801ce1c:	f1c3 0320 	rsb	r3, r3, #32
 801ce20:	fa22 f303 	lsr.w	r3, r2, r3
 801ce24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ce28:	401a      	ands	r2, r3
 801ce2a:	f846 2c04 	str.w	r2, [r6, #-4]
 801ce2e:	e7d3      	b.n	801cdd8 <__hexnan+0xd4>
 801ce30:	3f04      	subs	r7, #4
 801ce32:	e7d1      	b.n	801cdd8 <__hexnan+0xd4>
 801ce34:	2004      	movs	r0, #4
 801ce36:	b007      	add	sp, #28
 801ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce3c <_localeconv_r>:
 801ce3c:	4800      	ldr	r0, [pc, #0]	; (801ce40 <_localeconv_r+0x4>)
 801ce3e:	4770      	bx	lr
 801ce40:	200001bc 	.word	0x200001bc

0801ce44 <malloc>:
 801ce44:	4b02      	ldr	r3, [pc, #8]	; (801ce50 <malloc+0xc>)
 801ce46:	4601      	mov	r1, r0
 801ce48:	6818      	ldr	r0, [r3, #0]
 801ce4a:	f000 bd67 	b.w	801d91c <_malloc_r>
 801ce4e:	bf00      	nop
 801ce50:	20000064 	.word	0x20000064

0801ce54 <__ascii_mbtowc>:
 801ce54:	b082      	sub	sp, #8
 801ce56:	b901      	cbnz	r1, 801ce5a <__ascii_mbtowc+0x6>
 801ce58:	a901      	add	r1, sp, #4
 801ce5a:	b142      	cbz	r2, 801ce6e <__ascii_mbtowc+0x1a>
 801ce5c:	b14b      	cbz	r3, 801ce72 <__ascii_mbtowc+0x1e>
 801ce5e:	7813      	ldrb	r3, [r2, #0]
 801ce60:	600b      	str	r3, [r1, #0]
 801ce62:	7812      	ldrb	r2, [r2, #0]
 801ce64:	1e10      	subs	r0, r2, #0
 801ce66:	bf18      	it	ne
 801ce68:	2001      	movne	r0, #1
 801ce6a:	b002      	add	sp, #8
 801ce6c:	4770      	bx	lr
 801ce6e:	4610      	mov	r0, r2
 801ce70:	e7fb      	b.n	801ce6a <__ascii_mbtowc+0x16>
 801ce72:	f06f 0001 	mvn.w	r0, #1
 801ce76:	e7f8      	b.n	801ce6a <__ascii_mbtowc+0x16>

0801ce78 <memcpy>:
 801ce78:	440a      	add	r2, r1
 801ce7a:	4291      	cmp	r1, r2
 801ce7c:	f100 33ff 	add.w	r3, r0, #4294967295
 801ce80:	d100      	bne.n	801ce84 <memcpy+0xc>
 801ce82:	4770      	bx	lr
 801ce84:	b510      	push	{r4, lr}
 801ce86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ce8e:	4291      	cmp	r1, r2
 801ce90:	d1f9      	bne.n	801ce86 <memcpy+0xe>
 801ce92:	bd10      	pop	{r4, pc}

0801ce94 <_Balloc>:
 801ce94:	b570      	push	{r4, r5, r6, lr}
 801ce96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ce98:	4604      	mov	r4, r0
 801ce9a:	460d      	mov	r5, r1
 801ce9c:	b976      	cbnz	r6, 801cebc <_Balloc+0x28>
 801ce9e:	2010      	movs	r0, #16
 801cea0:	f7ff ffd0 	bl	801ce44 <malloc>
 801cea4:	4602      	mov	r2, r0
 801cea6:	6260      	str	r0, [r4, #36]	; 0x24
 801cea8:	b920      	cbnz	r0, 801ceb4 <_Balloc+0x20>
 801ceaa:	4b18      	ldr	r3, [pc, #96]	; (801cf0c <_Balloc+0x78>)
 801ceac:	4818      	ldr	r0, [pc, #96]	; (801cf10 <_Balloc+0x7c>)
 801ceae:	2166      	movs	r1, #102	; 0x66
 801ceb0:	f000 ff40 	bl	801dd34 <__assert_func>
 801ceb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ceb8:	6006      	str	r6, [r0, #0]
 801ceba:	60c6      	str	r6, [r0, #12]
 801cebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cebe:	68f3      	ldr	r3, [r6, #12]
 801cec0:	b183      	cbz	r3, 801cee4 <_Balloc+0x50>
 801cec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cec4:	68db      	ldr	r3, [r3, #12]
 801cec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ceca:	b9b8      	cbnz	r0, 801cefc <_Balloc+0x68>
 801cecc:	2101      	movs	r1, #1
 801cece:	fa01 f605 	lsl.w	r6, r1, r5
 801ced2:	1d72      	adds	r2, r6, #5
 801ced4:	0092      	lsls	r2, r2, #2
 801ced6:	4620      	mov	r0, r4
 801ced8:	f000 fc9d 	bl	801d816 <_calloc_r>
 801cedc:	b160      	cbz	r0, 801cef8 <_Balloc+0x64>
 801cede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cee2:	e00e      	b.n	801cf02 <_Balloc+0x6e>
 801cee4:	2221      	movs	r2, #33	; 0x21
 801cee6:	2104      	movs	r1, #4
 801cee8:	4620      	mov	r0, r4
 801ceea:	f000 fc94 	bl	801d816 <_calloc_r>
 801ceee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cef0:	60f0      	str	r0, [r6, #12]
 801cef2:	68db      	ldr	r3, [r3, #12]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d1e4      	bne.n	801cec2 <_Balloc+0x2e>
 801cef8:	2000      	movs	r0, #0
 801cefa:	bd70      	pop	{r4, r5, r6, pc}
 801cefc:	6802      	ldr	r2, [r0, #0]
 801cefe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cf02:	2300      	movs	r3, #0
 801cf04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cf08:	e7f7      	b.n	801cefa <_Balloc+0x66>
 801cf0a:	bf00      	nop
 801cf0c:	08052a46 	.word	0x08052a46
 801cf10:	08052b44 	.word	0x08052b44

0801cf14 <_Bfree>:
 801cf14:	b570      	push	{r4, r5, r6, lr}
 801cf16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cf18:	4605      	mov	r5, r0
 801cf1a:	460c      	mov	r4, r1
 801cf1c:	b976      	cbnz	r6, 801cf3c <_Bfree+0x28>
 801cf1e:	2010      	movs	r0, #16
 801cf20:	f7ff ff90 	bl	801ce44 <malloc>
 801cf24:	4602      	mov	r2, r0
 801cf26:	6268      	str	r0, [r5, #36]	; 0x24
 801cf28:	b920      	cbnz	r0, 801cf34 <_Bfree+0x20>
 801cf2a:	4b09      	ldr	r3, [pc, #36]	; (801cf50 <_Bfree+0x3c>)
 801cf2c:	4809      	ldr	r0, [pc, #36]	; (801cf54 <_Bfree+0x40>)
 801cf2e:	218a      	movs	r1, #138	; 0x8a
 801cf30:	f000 ff00 	bl	801dd34 <__assert_func>
 801cf34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cf38:	6006      	str	r6, [r0, #0]
 801cf3a:	60c6      	str	r6, [r0, #12]
 801cf3c:	b13c      	cbz	r4, 801cf4e <_Bfree+0x3a>
 801cf3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cf40:	6862      	ldr	r2, [r4, #4]
 801cf42:	68db      	ldr	r3, [r3, #12]
 801cf44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cf48:	6021      	str	r1, [r4, #0]
 801cf4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cf4e:	bd70      	pop	{r4, r5, r6, pc}
 801cf50:	08052a46 	.word	0x08052a46
 801cf54:	08052b44 	.word	0x08052b44

0801cf58 <__multadd>:
 801cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf5c:	690d      	ldr	r5, [r1, #16]
 801cf5e:	4607      	mov	r7, r0
 801cf60:	460c      	mov	r4, r1
 801cf62:	461e      	mov	r6, r3
 801cf64:	f101 0c14 	add.w	ip, r1, #20
 801cf68:	2000      	movs	r0, #0
 801cf6a:	f8dc 3000 	ldr.w	r3, [ip]
 801cf6e:	b299      	uxth	r1, r3
 801cf70:	fb02 6101 	mla	r1, r2, r1, r6
 801cf74:	0c1e      	lsrs	r6, r3, #16
 801cf76:	0c0b      	lsrs	r3, r1, #16
 801cf78:	fb02 3306 	mla	r3, r2, r6, r3
 801cf7c:	b289      	uxth	r1, r1
 801cf7e:	3001      	adds	r0, #1
 801cf80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cf84:	4285      	cmp	r5, r0
 801cf86:	f84c 1b04 	str.w	r1, [ip], #4
 801cf8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cf8e:	dcec      	bgt.n	801cf6a <__multadd+0x12>
 801cf90:	b30e      	cbz	r6, 801cfd6 <__multadd+0x7e>
 801cf92:	68a3      	ldr	r3, [r4, #8]
 801cf94:	42ab      	cmp	r3, r5
 801cf96:	dc19      	bgt.n	801cfcc <__multadd+0x74>
 801cf98:	6861      	ldr	r1, [r4, #4]
 801cf9a:	4638      	mov	r0, r7
 801cf9c:	3101      	adds	r1, #1
 801cf9e:	f7ff ff79 	bl	801ce94 <_Balloc>
 801cfa2:	4680      	mov	r8, r0
 801cfa4:	b928      	cbnz	r0, 801cfb2 <__multadd+0x5a>
 801cfa6:	4602      	mov	r2, r0
 801cfa8:	4b0c      	ldr	r3, [pc, #48]	; (801cfdc <__multadd+0x84>)
 801cfaa:	480d      	ldr	r0, [pc, #52]	; (801cfe0 <__multadd+0x88>)
 801cfac:	21b5      	movs	r1, #181	; 0xb5
 801cfae:	f000 fec1 	bl	801dd34 <__assert_func>
 801cfb2:	6922      	ldr	r2, [r4, #16]
 801cfb4:	3202      	adds	r2, #2
 801cfb6:	f104 010c 	add.w	r1, r4, #12
 801cfba:	0092      	lsls	r2, r2, #2
 801cfbc:	300c      	adds	r0, #12
 801cfbe:	f7ff ff5b 	bl	801ce78 <memcpy>
 801cfc2:	4621      	mov	r1, r4
 801cfc4:	4638      	mov	r0, r7
 801cfc6:	f7ff ffa5 	bl	801cf14 <_Bfree>
 801cfca:	4644      	mov	r4, r8
 801cfcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cfd0:	3501      	adds	r5, #1
 801cfd2:	615e      	str	r6, [r3, #20]
 801cfd4:	6125      	str	r5, [r4, #16]
 801cfd6:	4620      	mov	r0, r4
 801cfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfdc:	08052ab8 	.word	0x08052ab8
 801cfe0:	08052b44 	.word	0x08052b44

0801cfe4 <__s2b>:
 801cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfe8:	460c      	mov	r4, r1
 801cfea:	4615      	mov	r5, r2
 801cfec:	461f      	mov	r7, r3
 801cfee:	2209      	movs	r2, #9
 801cff0:	3308      	adds	r3, #8
 801cff2:	4606      	mov	r6, r0
 801cff4:	fb93 f3f2 	sdiv	r3, r3, r2
 801cff8:	2100      	movs	r1, #0
 801cffa:	2201      	movs	r2, #1
 801cffc:	429a      	cmp	r2, r3
 801cffe:	db09      	blt.n	801d014 <__s2b+0x30>
 801d000:	4630      	mov	r0, r6
 801d002:	f7ff ff47 	bl	801ce94 <_Balloc>
 801d006:	b940      	cbnz	r0, 801d01a <__s2b+0x36>
 801d008:	4602      	mov	r2, r0
 801d00a:	4b19      	ldr	r3, [pc, #100]	; (801d070 <__s2b+0x8c>)
 801d00c:	4819      	ldr	r0, [pc, #100]	; (801d074 <__s2b+0x90>)
 801d00e:	21ce      	movs	r1, #206	; 0xce
 801d010:	f000 fe90 	bl	801dd34 <__assert_func>
 801d014:	0052      	lsls	r2, r2, #1
 801d016:	3101      	adds	r1, #1
 801d018:	e7f0      	b.n	801cffc <__s2b+0x18>
 801d01a:	9b08      	ldr	r3, [sp, #32]
 801d01c:	6143      	str	r3, [r0, #20]
 801d01e:	2d09      	cmp	r5, #9
 801d020:	f04f 0301 	mov.w	r3, #1
 801d024:	6103      	str	r3, [r0, #16]
 801d026:	dd16      	ble.n	801d056 <__s2b+0x72>
 801d028:	f104 0909 	add.w	r9, r4, #9
 801d02c:	46c8      	mov	r8, r9
 801d02e:	442c      	add	r4, r5
 801d030:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d034:	4601      	mov	r1, r0
 801d036:	3b30      	subs	r3, #48	; 0x30
 801d038:	220a      	movs	r2, #10
 801d03a:	4630      	mov	r0, r6
 801d03c:	f7ff ff8c 	bl	801cf58 <__multadd>
 801d040:	45a0      	cmp	r8, r4
 801d042:	d1f5      	bne.n	801d030 <__s2b+0x4c>
 801d044:	f1a5 0408 	sub.w	r4, r5, #8
 801d048:	444c      	add	r4, r9
 801d04a:	1b2d      	subs	r5, r5, r4
 801d04c:	1963      	adds	r3, r4, r5
 801d04e:	42bb      	cmp	r3, r7
 801d050:	db04      	blt.n	801d05c <__s2b+0x78>
 801d052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d056:	340a      	adds	r4, #10
 801d058:	2509      	movs	r5, #9
 801d05a:	e7f6      	b.n	801d04a <__s2b+0x66>
 801d05c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d060:	4601      	mov	r1, r0
 801d062:	3b30      	subs	r3, #48	; 0x30
 801d064:	220a      	movs	r2, #10
 801d066:	4630      	mov	r0, r6
 801d068:	f7ff ff76 	bl	801cf58 <__multadd>
 801d06c:	e7ee      	b.n	801d04c <__s2b+0x68>
 801d06e:	bf00      	nop
 801d070:	08052ab8 	.word	0x08052ab8
 801d074:	08052b44 	.word	0x08052b44

0801d078 <__hi0bits>:
 801d078:	0c03      	lsrs	r3, r0, #16
 801d07a:	041b      	lsls	r3, r3, #16
 801d07c:	b9d3      	cbnz	r3, 801d0b4 <__hi0bits+0x3c>
 801d07e:	0400      	lsls	r0, r0, #16
 801d080:	2310      	movs	r3, #16
 801d082:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d086:	bf04      	itt	eq
 801d088:	0200      	lsleq	r0, r0, #8
 801d08a:	3308      	addeq	r3, #8
 801d08c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d090:	bf04      	itt	eq
 801d092:	0100      	lsleq	r0, r0, #4
 801d094:	3304      	addeq	r3, #4
 801d096:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d09a:	bf04      	itt	eq
 801d09c:	0080      	lsleq	r0, r0, #2
 801d09e:	3302      	addeq	r3, #2
 801d0a0:	2800      	cmp	r0, #0
 801d0a2:	db05      	blt.n	801d0b0 <__hi0bits+0x38>
 801d0a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d0a8:	f103 0301 	add.w	r3, r3, #1
 801d0ac:	bf08      	it	eq
 801d0ae:	2320      	moveq	r3, #32
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	4770      	bx	lr
 801d0b4:	2300      	movs	r3, #0
 801d0b6:	e7e4      	b.n	801d082 <__hi0bits+0xa>

0801d0b8 <__lo0bits>:
 801d0b8:	6803      	ldr	r3, [r0, #0]
 801d0ba:	f013 0207 	ands.w	r2, r3, #7
 801d0be:	4601      	mov	r1, r0
 801d0c0:	d00b      	beq.n	801d0da <__lo0bits+0x22>
 801d0c2:	07da      	lsls	r2, r3, #31
 801d0c4:	d423      	bmi.n	801d10e <__lo0bits+0x56>
 801d0c6:	0798      	lsls	r0, r3, #30
 801d0c8:	bf49      	itett	mi
 801d0ca:	085b      	lsrmi	r3, r3, #1
 801d0cc:	089b      	lsrpl	r3, r3, #2
 801d0ce:	2001      	movmi	r0, #1
 801d0d0:	600b      	strmi	r3, [r1, #0]
 801d0d2:	bf5c      	itt	pl
 801d0d4:	600b      	strpl	r3, [r1, #0]
 801d0d6:	2002      	movpl	r0, #2
 801d0d8:	4770      	bx	lr
 801d0da:	b298      	uxth	r0, r3
 801d0dc:	b9a8      	cbnz	r0, 801d10a <__lo0bits+0x52>
 801d0de:	0c1b      	lsrs	r3, r3, #16
 801d0e0:	2010      	movs	r0, #16
 801d0e2:	b2da      	uxtb	r2, r3
 801d0e4:	b90a      	cbnz	r2, 801d0ea <__lo0bits+0x32>
 801d0e6:	3008      	adds	r0, #8
 801d0e8:	0a1b      	lsrs	r3, r3, #8
 801d0ea:	071a      	lsls	r2, r3, #28
 801d0ec:	bf04      	itt	eq
 801d0ee:	091b      	lsreq	r3, r3, #4
 801d0f0:	3004      	addeq	r0, #4
 801d0f2:	079a      	lsls	r2, r3, #30
 801d0f4:	bf04      	itt	eq
 801d0f6:	089b      	lsreq	r3, r3, #2
 801d0f8:	3002      	addeq	r0, #2
 801d0fa:	07da      	lsls	r2, r3, #31
 801d0fc:	d403      	bmi.n	801d106 <__lo0bits+0x4e>
 801d0fe:	085b      	lsrs	r3, r3, #1
 801d100:	f100 0001 	add.w	r0, r0, #1
 801d104:	d005      	beq.n	801d112 <__lo0bits+0x5a>
 801d106:	600b      	str	r3, [r1, #0]
 801d108:	4770      	bx	lr
 801d10a:	4610      	mov	r0, r2
 801d10c:	e7e9      	b.n	801d0e2 <__lo0bits+0x2a>
 801d10e:	2000      	movs	r0, #0
 801d110:	4770      	bx	lr
 801d112:	2020      	movs	r0, #32
 801d114:	4770      	bx	lr
	...

0801d118 <__i2b>:
 801d118:	b510      	push	{r4, lr}
 801d11a:	460c      	mov	r4, r1
 801d11c:	2101      	movs	r1, #1
 801d11e:	f7ff feb9 	bl	801ce94 <_Balloc>
 801d122:	4602      	mov	r2, r0
 801d124:	b928      	cbnz	r0, 801d132 <__i2b+0x1a>
 801d126:	4b05      	ldr	r3, [pc, #20]	; (801d13c <__i2b+0x24>)
 801d128:	4805      	ldr	r0, [pc, #20]	; (801d140 <__i2b+0x28>)
 801d12a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d12e:	f000 fe01 	bl	801dd34 <__assert_func>
 801d132:	2301      	movs	r3, #1
 801d134:	6144      	str	r4, [r0, #20]
 801d136:	6103      	str	r3, [r0, #16]
 801d138:	bd10      	pop	{r4, pc}
 801d13a:	bf00      	nop
 801d13c:	08052ab8 	.word	0x08052ab8
 801d140:	08052b44 	.word	0x08052b44

0801d144 <__multiply>:
 801d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d148:	4691      	mov	r9, r2
 801d14a:	690a      	ldr	r2, [r1, #16]
 801d14c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d150:	429a      	cmp	r2, r3
 801d152:	bfb8      	it	lt
 801d154:	460b      	movlt	r3, r1
 801d156:	460c      	mov	r4, r1
 801d158:	bfbc      	itt	lt
 801d15a:	464c      	movlt	r4, r9
 801d15c:	4699      	movlt	r9, r3
 801d15e:	6927      	ldr	r7, [r4, #16]
 801d160:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d164:	68a3      	ldr	r3, [r4, #8]
 801d166:	6861      	ldr	r1, [r4, #4]
 801d168:	eb07 060a 	add.w	r6, r7, sl
 801d16c:	42b3      	cmp	r3, r6
 801d16e:	b085      	sub	sp, #20
 801d170:	bfb8      	it	lt
 801d172:	3101      	addlt	r1, #1
 801d174:	f7ff fe8e 	bl	801ce94 <_Balloc>
 801d178:	b930      	cbnz	r0, 801d188 <__multiply+0x44>
 801d17a:	4602      	mov	r2, r0
 801d17c:	4b44      	ldr	r3, [pc, #272]	; (801d290 <__multiply+0x14c>)
 801d17e:	4845      	ldr	r0, [pc, #276]	; (801d294 <__multiply+0x150>)
 801d180:	f240 115d 	movw	r1, #349	; 0x15d
 801d184:	f000 fdd6 	bl	801dd34 <__assert_func>
 801d188:	f100 0514 	add.w	r5, r0, #20
 801d18c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d190:	462b      	mov	r3, r5
 801d192:	2200      	movs	r2, #0
 801d194:	4543      	cmp	r3, r8
 801d196:	d321      	bcc.n	801d1dc <__multiply+0x98>
 801d198:	f104 0314 	add.w	r3, r4, #20
 801d19c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d1a0:	f109 0314 	add.w	r3, r9, #20
 801d1a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d1a8:	9202      	str	r2, [sp, #8]
 801d1aa:	1b3a      	subs	r2, r7, r4
 801d1ac:	3a15      	subs	r2, #21
 801d1ae:	f022 0203 	bic.w	r2, r2, #3
 801d1b2:	3204      	adds	r2, #4
 801d1b4:	f104 0115 	add.w	r1, r4, #21
 801d1b8:	428f      	cmp	r7, r1
 801d1ba:	bf38      	it	cc
 801d1bc:	2204      	movcc	r2, #4
 801d1be:	9201      	str	r2, [sp, #4]
 801d1c0:	9a02      	ldr	r2, [sp, #8]
 801d1c2:	9303      	str	r3, [sp, #12]
 801d1c4:	429a      	cmp	r2, r3
 801d1c6:	d80c      	bhi.n	801d1e2 <__multiply+0x9e>
 801d1c8:	2e00      	cmp	r6, #0
 801d1ca:	dd03      	ble.n	801d1d4 <__multiply+0x90>
 801d1cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d05a      	beq.n	801d28a <__multiply+0x146>
 801d1d4:	6106      	str	r6, [r0, #16]
 801d1d6:	b005      	add	sp, #20
 801d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1dc:	f843 2b04 	str.w	r2, [r3], #4
 801d1e0:	e7d8      	b.n	801d194 <__multiply+0x50>
 801d1e2:	f8b3 a000 	ldrh.w	sl, [r3]
 801d1e6:	f1ba 0f00 	cmp.w	sl, #0
 801d1ea:	d024      	beq.n	801d236 <__multiply+0xf2>
 801d1ec:	f104 0e14 	add.w	lr, r4, #20
 801d1f0:	46a9      	mov	r9, r5
 801d1f2:	f04f 0c00 	mov.w	ip, #0
 801d1f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d1fa:	f8d9 1000 	ldr.w	r1, [r9]
 801d1fe:	fa1f fb82 	uxth.w	fp, r2
 801d202:	b289      	uxth	r1, r1
 801d204:	fb0a 110b 	mla	r1, sl, fp, r1
 801d208:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d20c:	f8d9 2000 	ldr.w	r2, [r9]
 801d210:	4461      	add	r1, ip
 801d212:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d216:	fb0a c20b 	mla	r2, sl, fp, ip
 801d21a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d21e:	b289      	uxth	r1, r1
 801d220:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d224:	4577      	cmp	r7, lr
 801d226:	f849 1b04 	str.w	r1, [r9], #4
 801d22a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d22e:	d8e2      	bhi.n	801d1f6 <__multiply+0xb2>
 801d230:	9a01      	ldr	r2, [sp, #4]
 801d232:	f845 c002 	str.w	ip, [r5, r2]
 801d236:	9a03      	ldr	r2, [sp, #12]
 801d238:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d23c:	3304      	adds	r3, #4
 801d23e:	f1b9 0f00 	cmp.w	r9, #0
 801d242:	d020      	beq.n	801d286 <__multiply+0x142>
 801d244:	6829      	ldr	r1, [r5, #0]
 801d246:	f104 0c14 	add.w	ip, r4, #20
 801d24a:	46ae      	mov	lr, r5
 801d24c:	f04f 0a00 	mov.w	sl, #0
 801d250:	f8bc b000 	ldrh.w	fp, [ip]
 801d254:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d258:	fb09 220b 	mla	r2, r9, fp, r2
 801d25c:	4492      	add	sl, r2
 801d25e:	b289      	uxth	r1, r1
 801d260:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801d264:	f84e 1b04 	str.w	r1, [lr], #4
 801d268:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d26c:	f8be 1000 	ldrh.w	r1, [lr]
 801d270:	0c12      	lsrs	r2, r2, #16
 801d272:	fb09 1102 	mla	r1, r9, r2, r1
 801d276:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801d27a:	4567      	cmp	r7, ip
 801d27c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d280:	d8e6      	bhi.n	801d250 <__multiply+0x10c>
 801d282:	9a01      	ldr	r2, [sp, #4]
 801d284:	50a9      	str	r1, [r5, r2]
 801d286:	3504      	adds	r5, #4
 801d288:	e79a      	b.n	801d1c0 <__multiply+0x7c>
 801d28a:	3e01      	subs	r6, #1
 801d28c:	e79c      	b.n	801d1c8 <__multiply+0x84>
 801d28e:	bf00      	nop
 801d290:	08052ab8 	.word	0x08052ab8
 801d294:	08052b44 	.word	0x08052b44

0801d298 <__pow5mult>:
 801d298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d29c:	4615      	mov	r5, r2
 801d29e:	f012 0203 	ands.w	r2, r2, #3
 801d2a2:	4606      	mov	r6, r0
 801d2a4:	460f      	mov	r7, r1
 801d2a6:	d007      	beq.n	801d2b8 <__pow5mult+0x20>
 801d2a8:	4c25      	ldr	r4, [pc, #148]	; (801d340 <__pow5mult+0xa8>)
 801d2aa:	3a01      	subs	r2, #1
 801d2ac:	2300      	movs	r3, #0
 801d2ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d2b2:	f7ff fe51 	bl	801cf58 <__multadd>
 801d2b6:	4607      	mov	r7, r0
 801d2b8:	10ad      	asrs	r5, r5, #2
 801d2ba:	d03d      	beq.n	801d338 <__pow5mult+0xa0>
 801d2bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d2be:	b97c      	cbnz	r4, 801d2e0 <__pow5mult+0x48>
 801d2c0:	2010      	movs	r0, #16
 801d2c2:	f7ff fdbf 	bl	801ce44 <malloc>
 801d2c6:	4602      	mov	r2, r0
 801d2c8:	6270      	str	r0, [r6, #36]	; 0x24
 801d2ca:	b928      	cbnz	r0, 801d2d8 <__pow5mult+0x40>
 801d2cc:	4b1d      	ldr	r3, [pc, #116]	; (801d344 <__pow5mult+0xac>)
 801d2ce:	481e      	ldr	r0, [pc, #120]	; (801d348 <__pow5mult+0xb0>)
 801d2d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d2d4:	f000 fd2e 	bl	801dd34 <__assert_func>
 801d2d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d2dc:	6004      	str	r4, [r0, #0]
 801d2de:	60c4      	str	r4, [r0, #12]
 801d2e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d2e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d2e8:	b94c      	cbnz	r4, 801d2fe <__pow5mult+0x66>
 801d2ea:	f240 2171 	movw	r1, #625	; 0x271
 801d2ee:	4630      	mov	r0, r6
 801d2f0:	f7ff ff12 	bl	801d118 <__i2b>
 801d2f4:	2300      	movs	r3, #0
 801d2f6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2fa:	4604      	mov	r4, r0
 801d2fc:	6003      	str	r3, [r0, #0]
 801d2fe:	f04f 0900 	mov.w	r9, #0
 801d302:	07eb      	lsls	r3, r5, #31
 801d304:	d50a      	bpl.n	801d31c <__pow5mult+0x84>
 801d306:	4639      	mov	r1, r7
 801d308:	4622      	mov	r2, r4
 801d30a:	4630      	mov	r0, r6
 801d30c:	f7ff ff1a 	bl	801d144 <__multiply>
 801d310:	4639      	mov	r1, r7
 801d312:	4680      	mov	r8, r0
 801d314:	4630      	mov	r0, r6
 801d316:	f7ff fdfd 	bl	801cf14 <_Bfree>
 801d31a:	4647      	mov	r7, r8
 801d31c:	106d      	asrs	r5, r5, #1
 801d31e:	d00b      	beq.n	801d338 <__pow5mult+0xa0>
 801d320:	6820      	ldr	r0, [r4, #0]
 801d322:	b938      	cbnz	r0, 801d334 <__pow5mult+0x9c>
 801d324:	4622      	mov	r2, r4
 801d326:	4621      	mov	r1, r4
 801d328:	4630      	mov	r0, r6
 801d32a:	f7ff ff0b 	bl	801d144 <__multiply>
 801d32e:	6020      	str	r0, [r4, #0]
 801d330:	f8c0 9000 	str.w	r9, [r0]
 801d334:	4604      	mov	r4, r0
 801d336:	e7e4      	b.n	801d302 <__pow5mult+0x6a>
 801d338:	4638      	mov	r0, r7
 801d33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d33e:	bf00      	nop
 801d340:	08052c90 	.word	0x08052c90
 801d344:	08052a46 	.word	0x08052a46
 801d348:	08052b44 	.word	0x08052b44

0801d34c <__lshift>:
 801d34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d350:	460c      	mov	r4, r1
 801d352:	6849      	ldr	r1, [r1, #4]
 801d354:	6923      	ldr	r3, [r4, #16]
 801d356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d35a:	68a3      	ldr	r3, [r4, #8]
 801d35c:	4607      	mov	r7, r0
 801d35e:	4691      	mov	r9, r2
 801d360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d364:	f108 0601 	add.w	r6, r8, #1
 801d368:	42b3      	cmp	r3, r6
 801d36a:	db0b      	blt.n	801d384 <__lshift+0x38>
 801d36c:	4638      	mov	r0, r7
 801d36e:	f7ff fd91 	bl	801ce94 <_Balloc>
 801d372:	4605      	mov	r5, r0
 801d374:	b948      	cbnz	r0, 801d38a <__lshift+0x3e>
 801d376:	4602      	mov	r2, r0
 801d378:	4b2a      	ldr	r3, [pc, #168]	; (801d424 <__lshift+0xd8>)
 801d37a:	482b      	ldr	r0, [pc, #172]	; (801d428 <__lshift+0xdc>)
 801d37c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d380:	f000 fcd8 	bl	801dd34 <__assert_func>
 801d384:	3101      	adds	r1, #1
 801d386:	005b      	lsls	r3, r3, #1
 801d388:	e7ee      	b.n	801d368 <__lshift+0x1c>
 801d38a:	2300      	movs	r3, #0
 801d38c:	f100 0114 	add.w	r1, r0, #20
 801d390:	f100 0210 	add.w	r2, r0, #16
 801d394:	4618      	mov	r0, r3
 801d396:	4553      	cmp	r3, sl
 801d398:	db37      	blt.n	801d40a <__lshift+0xbe>
 801d39a:	6920      	ldr	r0, [r4, #16]
 801d39c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d3a0:	f104 0314 	add.w	r3, r4, #20
 801d3a4:	f019 091f 	ands.w	r9, r9, #31
 801d3a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d3ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d3b0:	d02f      	beq.n	801d412 <__lshift+0xc6>
 801d3b2:	f1c9 0e20 	rsb	lr, r9, #32
 801d3b6:	468a      	mov	sl, r1
 801d3b8:	f04f 0c00 	mov.w	ip, #0
 801d3bc:	681a      	ldr	r2, [r3, #0]
 801d3be:	fa02 f209 	lsl.w	r2, r2, r9
 801d3c2:	ea42 020c 	orr.w	r2, r2, ip
 801d3c6:	f84a 2b04 	str.w	r2, [sl], #4
 801d3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3ce:	4298      	cmp	r0, r3
 801d3d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d3d4:	d8f2      	bhi.n	801d3bc <__lshift+0x70>
 801d3d6:	1b03      	subs	r3, r0, r4
 801d3d8:	3b15      	subs	r3, #21
 801d3da:	f023 0303 	bic.w	r3, r3, #3
 801d3de:	3304      	adds	r3, #4
 801d3e0:	f104 0215 	add.w	r2, r4, #21
 801d3e4:	4290      	cmp	r0, r2
 801d3e6:	bf38      	it	cc
 801d3e8:	2304      	movcc	r3, #4
 801d3ea:	f841 c003 	str.w	ip, [r1, r3]
 801d3ee:	f1bc 0f00 	cmp.w	ip, #0
 801d3f2:	d001      	beq.n	801d3f8 <__lshift+0xac>
 801d3f4:	f108 0602 	add.w	r6, r8, #2
 801d3f8:	3e01      	subs	r6, #1
 801d3fa:	4638      	mov	r0, r7
 801d3fc:	612e      	str	r6, [r5, #16]
 801d3fe:	4621      	mov	r1, r4
 801d400:	f7ff fd88 	bl	801cf14 <_Bfree>
 801d404:	4628      	mov	r0, r5
 801d406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d40a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d40e:	3301      	adds	r3, #1
 801d410:	e7c1      	b.n	801d396 <__lshift+0x4a>
 801d412:	3904      	subs	r1, #4
 801d414:	f853 2b04 	ldr.w	r2, [r3], #4
 801d418:	f841 2f04 	str.w	r2, [r1, #4]!
 801d41c:	4298      	cmp	r0, r3
 801d41e:	d8f9      	bhi.n	801d414 <__lshift+0xc8>
 801d420:	e7ea      	b.n	801d3f8 <__lshift+0xac>
 801d422:	bf00      	nop
 801d424:	08052ab8 	.word	0x08052ab8
 801d428:	08052b44 	.word	0x08052b44

0801d42c <__mcmp>:
 801d42c:	b530      	push	{r4, r5, lr}
 801d42e:	6902      	ldr	r2, [r0, #16]
 801d430:	690c      	ldr	r4, [r1, #16]
 801d432:	1b12      	subs	r2, r2, r4
 801d434:	d10e      	bne.n	801d454 <__mcmp+0x28>
 801d436:	f100 0314 	add.w	r3, r0, #20
 801d43a:	3114      	adds	r1, #20
 801d43c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d44c:	42a5      	cmp	r5, r4
 801d44e:	d003      	beq.n	801d458 <__mcmp+0x2c>
 801d450:	d305      	bcc.n	801d45e <__mcmp+0x32>
 801d452:	2201      	movs	r2, #1
 801d454:	4610      	mov	r0, r2
 801d456:	bd30      	pop	{r4, r5, pc}
 801d458:	4283      	cmp	r3, r0
 801d45a:	d3f3      	bcc.n	801d444 <__mcmp+0x18>
 801d45c:	e7fa      	b.n	801d454 <__mcmp+0x28>
 801d45e:	f04f 32ff 	mov.w	r2, #4294967295
 801d462:	e7f7      	b.n	801d454 <__mcmp+0x28>

0801d464 <__mdiff>:
 801d464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d468:	460c      	mov	r4, r1
 801d46a:	4606      	mov	r6, r0
 801d46c:	4611      	mov	r1, r2
 801d46e:	4620      	mov	r0, r4
 801d470:	4690      	mov	r8, r2
 801d472:	f7ff ffdb 	bl	801d42c <__mcmp>
 801d476:	1e05      	subs	r5, r0, #0
 801d478:	d110      	bne.n	801d49c <__mdiff+0x38>
 801d47a:	4629      	mov	r1, r5
 801d47c:	4630      	mov	r0, r6
 801d47e:	f7ff fd09 	bl	801ce94 <_Balloc>
 801d482:	b930      	cbnz	r0, 801d492 <__mdiff+0x2e>
 801d484:	4b3a      	ldr	r3, [pc, #232]	; (801d570 <__mdiff+0x10c>)
 801d486:	4602      	mov	r2, r0
 801d488:	f240 2132 	movw	r1, #562	; 0x232
 801d48c:	4839      	ldr	r0, [pc, #228]	; (801d574 <__mdiff+0x110>)
 801d48e:	f000 fc51 	bl	801dd34 <__assert_func>
 801d492:	2301      	movs	r3, #1
 801d494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d49c:	bfa4      	itt	ge
 801d49e:	4643      	movge	r3, r8
 801d4a0:	46a0      	movge	r8, r4
 801d4a2:	4630      	mov	r0, r6
 801d4a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d4a8:	bfa6      	itte	ge
 801d4aa:	461c      	movge	r4, r3
 801d4ac:	2500      	movge	r5, #0
 801d4ae:	2501      	movlt	r5, #1
 801d4b0:	f7ff fcf0 	bl	801ce94 <_Balloc>
 801d4b4:	b920      	cbnz	r0, 801d4c0 <__mdiff+0x5c>
 801d4b6:	4b2e      	ldr	r3, [pc, #184]	; (801d570 <__mdiff+0x10c>)
 801d4b8:	4602      	mov	r2, r0
 801d4ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d4be:	e7e5      	b.n	801d48c <__mdiff+0x28>
 801d4c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d4c4:	6926      	ldr	r6, [r4, #16]
 801d4c6:	60c5      	str	r5, [r0, #12]
 801d4c8:	f104 0914 	add.w	r9, r4, #20
 801d4cc:	f108 0514 	add.w	r5, r8, #20
 801d4d0:	f100 0e14 	add.w	lr, r0, #20
 801d4d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d4d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d4dc:	f108 0210 	add.w	r2, r8, #16
 801d4e0:	46f2      	mov	sl, lr
 801d4e2:	2100      	movs	r1, #0
 801d4e4:	f859 3b04 	ldr.w	r3, [r9], #4
 801d4e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d4ec:	fa1f f883 	uxth.w	r8, r3
 801d4f0:	fa11 f18b 	uxtah	r1, r1, fp
 801d4f4:	0c1b      	lsrs	r3, r3, #16
 801d4f6:	eba1 0808 	sub.w	r8, r1, r8
 801d4fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d4fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d502:	fa1f f888 	uxth.w	r8, r8
 801d506:	1419      	asrs	r1, r3, #16
 801d508:	454e      	cmp	r6, r9
 801d50a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d50e:	f84a 3b04 	str.w	r3, [sl], #4
 801d512:	d8e7      	bhi.n	801d4e4 <__mdiff+0x80>
 801d514:	1b33      	subs	r3, r6, r4
 801d516:	3b15      	subs	r3, #21
 801d518:	f023 0303 	bic.w	r3, r3, #3
 801d51c:	3304      	adds	r3, #4
 801d51e:	3415      	adds	r4, #21
 801d520:	42a6      	cmp	r6, r4
 801d522:	bf38      	it	cc
 801d524:	2304      	movcc	r3, #4
 801d526:	441d      	add	r5, r3
 801d528:	4473      	add	r3, lr
 801d52a:	469e      	mov	lr, r3
 801d52c:	462e      	mov	r6, r5
 801d52e:	4566      	cmp	r6, ip
 801d530:	d30e      	bcc.n	801d550 <__mdiff+0xec>
 801d532:	f10c 0203 	add.w	r2, ip, #3
 801d536:	1b52      	subs	r2, r2, r5
 801d538:	f022 0203 	bic.w	r2, r2, #3
 801d53c:	3d03      	subs	r5, #3
 801d53e:	45ac      	cmp	ip, r5
 801d540:	bf38      	it	cc
 801d542:	2200      	movcc	r2, #0
 801d544:	441a      	add	r2, r3
 801d546:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d54a:	b17b      	cbz	r3, 801d56c <__mdiff+0x108>
 801d54c:	6107      	str	r7, [r0, #16]
 801d54e:	e7a3      	b.n	801d498 <__mdiff+0x34>
 801d550:	f856 8b04 	ldr.w	r8, [r6], #4
 801d554:	fa11 f288 	uxtah	r2, r1, r8
 801d558:	1414      	asrs	r4, r2, #16
 801d55a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d55e:	b292      	uxth	r2, r2
 801d560:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d564:	f84e 2b04 	str.w	r2, [lr], #4
 801d568:	1421      	asrs	r1, r4, #16
 801d56a:	e7e0      	b.n	801d52e <__mdiff+0xca>
 801d56c:	3f01      	subs	r7, #1
 801d56e:	e7ea      	b.n	801d546 <__mdiff+0xe2>
 801d570:	08052ab8 	.word	0x08052ab8
 801d574:	08052b44 	.word	0x08052b44

0801d578 <__ulp>:
 801d578:	b082      	sub	sp, #8
 801d57a:	ed8d 0b00 	vstr	d0, [sp]
 801d57e:	9b01      	ldr	r3, [sp, #4]
 801d580:	4912      	ldr	r1, [pc, #72]	; (801d5cc <__ulp+0x54>)
 801d582:	4019      	ands	r1, r3
 801d584:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d588:	2900      	cmp	r1, #0
 801d58a:	dd05      	ble.n	801d598 <__ulp+0x20>
 801d58c:	2200      	movs	r2, #0
 801d58e:	460b      	mov	r3, r1
 801d590:	ec43 2b10 	vmov	d0, r2, r3
 801d594:	b002      	add	sp, #8
 801d596:	4770      	bx	lr
 801d598:	4249      	negs	r1, r1
 801d59a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d59e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d5a2:	f04f 0200 	mov.w	r2, #0
 801d5a6:	f04f 0300 	mov.w	r3, #0
 801d5aa:	da04      	bge.n	801d5b6 <__ulp+0x3e>
 801d5ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d5b0:	fa41 f300 	asr.w	r3, r1, r0
 801d5b4:	e7ec      	b.n	801d590 <__ulp+0x18>
 801d5b6:	f1a0 0114 	sub.w	r1, r0, #20
 801d5ba:	291e      	cmp	r1, #30
 801d5bc:	bfda      	itte	le
 801d5be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d5c2:	fa20 f101 	lsrle.w	r1, r0, r1
 801d5c6:	2101      	movgt	r1, #1
 801d5c8:	460a      	mov	r2, r1
 801d5ca:	e7e1      	b.n	801d590 <__ulp+0x18>
 801d5cc:	7ff00000 	.word	0x7ff00000

0801d5d0 <__b2d>:
 801d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5d2:	6905      	ldr	r5, [r0, #16]
 801d5d4:	f100 0714 	add.w	r7, r0, #20
 801d5d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d5dc:	1f2e      	subs	r6, r5, #4
 801d5de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	f7ff fd48 	bl	801d078 <__hi0bits>
 801d5e8:	f1c0 0320 	rsb	r3, r0, #32
 801d5ec:	280a      	cmp	r0, #10
 801d5ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d66c <__b2d+0x9c>
 801d5f2:	600b      	str	r3, [r1, #0]
 801d5f4:	dc14      	bgt.n	801d620 <__b2d+0x50>
 801d5f6:	f1c0 0e0b 	rsb	lr, r0, #11
 801d5fa:	fa24 f10e 	lsr.w	r1, r4, lr
 801d5fe:	42b7      	cmp	r7, r6
 801d600:	ea41 030c 	orr.w	r3, r1, ip
 801d604:	bf34      	ite	cc
 801d606:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d60a:	2100      	movcs	r1, #0
 801d60c:	3015      	adds	r0, #21
 801d60e:	fa04 f000 	lsl.w	r0, r4, r0
 801d612:	fa21 f10e 	lsr.w	r1, r1, lr
 801d616:	ea40 0201 	orr.w	r2, r0, r1
 801d61a:	ec43 2b10 	vmov	d0, r2, r3
 801d61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d620:	42b7      	cmp	r7, r6
 801d622:	bf3a      	itte	cc
 801d624:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d628:	f1a5 0608 	subcc.w	r6, r5, #8
 801d62c:	2100      	movcs	r1, #0
 801d62e:	380b      	subs	r0, #11
 801d630:	d017      	beq.n	801d662 <__b2d+0x92>
 801d632:	f1c0 0c20 	rsb	ip, r0, #32
 801d636:	fa04 f500 	lsl.w	r5, r4, r0
 801d63a:	42be      	cmp	r6, r7
 801d63c:	fa21 f40c 	lsr.w	r4, r1, ip
 801d640:	ea45 0504 	orr.w	r5, r5, r4
 801d644:	bf8c      	ite	hi
 801d646:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d64a:	2400      	movls	r4, #0
 801d64c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d650:	fa01 f000 	lsl.w	r0, r1, r0
 801d654:	fa24 f40c 	lsr.w	r4, r4, ip
 801d658:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d65c:	ea40 0204 	orr.w	r2, r0, r4
 801d660:	e7db      	b.n	801d61a <__b2d+0x4a>
 801d662:	ea44 030c 	orr.w	r3, r4, ip
 801d666:	460a      	mov	r2, r1
 801d668:	e7d7      	b.n	801d61a <__b2d+0x4a>
 801d66a:	bf00      	nop
 801d66c:	3ff00000 	.word	0x3ff00000

0801d670 <__d2b>:
 801d670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d674:	4689      	mov	r9, r1
 801d676:	2101      	movs	r1, #1
 801d678:	ec57 6b10 	vmov	r6, r7, d0
 801d67c:	4690      	mov	r8, r2
 801d67e:	f7ff fc09 	bl	801ce94 <_Balloc>
 801d682:	4604      	mov	r4, r0
 801d684:	b930      	cbnz	r0, 801d694 <__d2b+0x24>
 801d686:	4602      	mov	r2, r0
 801d688:	4b25      	ldr	r3, [pc, #148]	; (801d720 <__d2b+0xb0>)
 801d68a:	4826      	ldr	r0, [pc, #152]	; (801d724 <__d2b+0xb4>)
 801d68c:	f240 310a 	movw	r1, #778	; 0x30a
 801d690:	f000 fb50 	bl	801dd34 <__assert_func>
 801d694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d69c:	bb35      	cbnz	r5, 801d6ec <__d2b+0x7c>
 801d69e:	2e00      	cmp	r6, #0
 801d6a0:	9301      	str	r3, [sp, #4]
 801d6a2:	d028      	beq.n	801d6f6 <__d2b+0x86>
 801d6a4:	4668      	mov	r0, sp
 801d6a6:	9600      	str	r6, [sp, #0]
 801d6a8:	f7ff fd06 	bl	801d0b8 <__lo0bits>
 801d6ac:	9900      	ldr	r1, [sp, #0]
 801d6ae:	b300      	cbz	r0, 801d6f2 <__d2b+0x82>
 801d6b0:	9a01      	ldr	r2, [sp, #4]
 801d6b2:	f1c0 0320 	rsb	r3, r0, #32
 801d6b6:	fa02 f303 	lsl.w	r3, r2, r3
 801d6ba:	430b      	orrs	r3, r1
 801d6bc:	40c2      	lsrs	r2, r0
 801d6be:	6163      	str	r3, [r4, #20]
 801d6c0:	9201      	str	r2, [sp, #4]
 801d6c2:	9b01      	ldr	r3, [sp, #4]
 801d6c4:	61a3      	str	r3, [r4, #24]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	bf14      	ite	ne
 801d6ca:	2202      	movne	r2, #2
 801d6cc:	2201      	moveq	r2, #1
 801d6ce:	6122      	str	r2, [r4, #16]
 801d6d0:	b1d5      	cbz	r5, 801d708 <__d2b+0x98>
 801d6d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d6d6:	4405      	add	r5, r0
 801d6d8:	f8c9 5000 	str.w	r5, [r9]
 801d6dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d6e0:	f8c8 0000 	str.w	r0, [r8]
 801d6e4:	4620      	mov	r0, r4
 801d6e6:	b003      	add	sp, #12
 801d6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d6f0:	e7d5      	b.n	801d69e <__d2b+0x2e>
 801d6f2:	6161      	str	r1, [r4, #20]
 801d6f4:	e7e5      	b.n	801d6c2 <__d2b+0x52>
 801d6f6:	a801      	add	r0, sp, #4
 801d6f8:	f7ff fcde 	bl	801d0b8 <__lo0bits>
 801d6fc:	9b01      	ldr	r3, [sp, #4]
 801d6fe:	6163      	str	r3, [r4, #20]
 801d700:	2201      	movs	r2, #1
 801d702:	6122      	str	r2, [r4, #16]
 801d704:	3020      	adds	r0, #32
 801d706:	e7e3      	b.n	801d6d0 <__d2b+0x60>
 801d708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d70c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d710:	f8c9 0000 	str.w	r0, [r9]
 801d714:	6918      	ldr	r0, [r3, #16]
 801d716:	f7ff fcaf 	bl	801d078 <__hi0bits>
 801d71a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d71e:	e7df      	b.n	801d6e0 <__d2b+0x70>
 801d720:	08052ab8 	.word	0x08052ab8
 801d724:	08052b44 	.word	0x08052b44

0801d728 <__ratio>:
 801d728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d72c:	4688      	mov	r8, r1
 801d72e:	4669      	mov	r1, sp
 801d730:	4681      	mov	r9, r0
 801d732:	f7ff ff4d 	bl	801d5d0 <__b2d>
 801d736:	a901      	add	r1, sp, #4
 801d738:	4640      	mov	r0, r8
 801d73a:	ec55 4b10 	vmov	r4, r5, d0
 801d73e:	f7ff ff47 	bl	801d5d0 <__b2d>
 801d742:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d746:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d74a:	eba3 0c02 	sub.w	ip, r3, r2
 801d74e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d752:	1a9b      	subs	r3, r3, r2
 801d754:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d758:	ec51 0b10 	vmov	r0, r1, d0
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	bfd6      	itet	le
 801d760:	460a      	movle	r2, r1
 801d762:	462a      	movgt	r2, r5
 801d764:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d768:	468b      	mov	fp, r1
 801d76a:	462f      	mov	r7, r5
 801d76c:	bfd4      	ite	le
 801d76e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d772:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d776:	4620      	mov	r0, r4
 801d778:	ee10 2a10 	vmov	r2, s0
 801d77c:	465b      	mov	r3, fp
 801d77e:	4639      	mov	r1, r7
 801d780:	f7fb ffe4 	bl	801974c <__aeabi_ddiv>
 801d784:	ec41 0b10 	vmov	d0, r0, r1
 801d788:	b003      	add	sp, #12
 801d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d78e <__copybits>:
 801d78e:	3901      	subs	r1, #1
 801d790:	b570      	push	{r4, r5, r6, lr}
 801d792:	1149      	asrs	r1, r1, #5
 801d794:	6914      	ldr	r4, [r2, #16]
 801d796:	3101      	adds	r1, #1
 801d798:	f102 0314 	add.w	r3, r2, #20
 801d79c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d7a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d7a4:	1f05      	subs	r5, r0, #4
 801d7a6:	42a3      	cmp	r3, r4
 801d7a8:	d30c      	bcc.n	801d7c4 <__copybits+0x36>
 801d7aa:	1aa3      	subs	r3, r4, r2
 801d7ac:	3b11      	subs	r3, #17
 801d7ae:	f023 0303 	bic.w	r3, r3, #3
 801d7b2:	3211      	adds	r2, #17
 801d7b4:	42a2      	cmp	r2, r4
 801d7b6:	bf88      	it	hi
 801d7b8:	2300      	movhi	r3, #0
 801d7ba:	4418      	add	r0, r3
 801d7bc:	2300      	movs	r3, #0
 801d7be:	4288      	cmp	r0, r1
 801d7c0:	d305      	bcc.n	801d7ce <__copybits+0x40>
 801d7c2:	bd70      	pop	{r4, r5, r6, pc}
 801d7c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801d7c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801d7cc:	e7eb      	b.n	801d7a6 <__copybits+0x18>
 801d7ce:	f840 3b04 	str.w	r3, [r0], #4
 801d7d2:	e7f4      	b.n	801d7be <__copybits+0x30>

0801d7d4 <__any_on>:
 801d7d4:	f100 0214 	add.w	r2, r0, #20
 801d7d8:	6900      	ldr	r0, [r0, #16]
 801d7da:	114b      	asrs	r3, r1, #5
 801d7dc:	4298      	cmp	r0, r3
 801d7de:	b510      	push	{r4, lr}
 801d7e0:	db11      	blt.n	801d806 <__any_on+0x32>
 801d7e2:	dd0a      	ble.n	801d7fa <__any_on+0x26>
 801d7e4:	f011 011f 	ands.w	r1, r1, #31
 801d7e8:	d007      	beq.n	801d7fa <__any_on+0x26>
 801d7ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d7ee:	fa24 f001 	lsr.w	r0, r4, r1
 801d7f2:	fa00 f101 	lsl.w	r1, r0, r1
 801d7f6:	428c      	cmp	r4, r1
 801d7f8:	d10b      	bne.n	801d812 <__any_on+0x3e>
 801d7fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d7fe:	4293      	cmp	r3, r2
 801d800:	d803      	bhi.n	801d80a <__any_on+0x36>
 801d802:	2000      	movs	r0, #0
 801d804:	bd10      	pop	{r4, pc}
 801d806:	4603      	mov	r3, r0
 801d808:	e7f7      	b.n	801d7fa <__any_on+0x26>
 801d80a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d80e:	2900      	cmp	r1, #0
 801d810:	d0f5      	beq.n	801d7fe <__any_on+0x2a>
 801d812:	2001      	movs	r0, #1
 801d814:	e7f6      	b.n	801d804 <__any_on+0x30>

0801d816 <_calloc_r>:
 801d816:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d818:	fba1 2402 	umull	r2, r4, r1, r2
 801d81c:	b94c      	cbnz	r4, 801d832 <_calloc_r+0x1c>
 801d81e:	4611      	mov	r1, r2
 801d820:	9201      	str	r2, [sp, #4]
 801d822:	f000 f87b 	bl	801d91c <_malloc_r>
 801d826:	9a01      	ldr	r2, [sp, #4]
 801d828:	4605      	mov	r5, r0
 801d82a:	b930      	cbnz	r0, 801d83a <_calloc_r+0x24>
 801d82c:	4628      	mov	r0, r5
 801d82e:	b003      	add	sp, #12
 801d830:	bd30      	pop	{r4, r5, pc}
 801d832:	220c      	movs	r2, #12
 801d834:	6002      	str	r2, [r0, #0]
 801d836:	2500      	movs	r5, #0
 801d838:	e7f8      	b.n	801d82c <_calloc_r+0x16>
 801d83a:	4621      	mov	r1, r4
 801d83c:	f7fc fbb4 	bl	8019fa8 <memset>
 801d840:	e7f4      	b.n	801d82c <_calloc_r+0x16>
	...

0801d844 <_free_r>:
 801d844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d846:	2900      	cmp	r1, #0
 801d848:	d044      	beq.n	801d8d4 <_free_r+0x90>
 801d84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d84e:	9001      	str	r0, [sp, #4]
 801d850:	2b00      	cmp	r3, #0
 801d852:	f1a1 0404 	sub.w	r4, r1, #4
 801d856:	bfb8      	it	lt
 801d858:	18e4      	addlt	r4, r4, r3
 801d85a:	f000 fab5 	bl	801ddc8 <__malloc_lock>
 801d85e:	4a1e      	ldr	r2, [pc, #120]	; (801d8d8 <_free_r+0x94>)
 801d860:	9801      	ldr	r0, [sp, #4]
 801d862:	6813      	ldr	r3, [r2, #0]
 801d864:	b933      	cbnz	r3, 801d874 <_free_r+0x30>
 801d866:	6063      	str	r3, [r4, #4]
 801d868:	6014      	str	r4, [r2, #0]
 801d86a:	b003      	add	sp, #12
 801d86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d870:	f000 bab0 	b.w	801ddd4 <__malloc_unlock>
 801d874:	42a3      	cmp	r3, r4
 801d876:	d908      	bls.n	801d88a <_free_r+0x46>
 801d878:	6825      	ldr	r5, [r4, #0]
 801d87a:	1961      	adds	r1, r4, r5
 801d87c:	428b      	cmp	r3, r1
 801d87e:	bf01      	itttt	eq
 801d880:	6819      	ldreq	r1, [r3, #0]
 801d882:	685b      	ldreq	r3, [r3, #4]
 801d884:	1949      	addeq	r1, r1, r5
 801d886:	6021      	streq	r1, [r4, #0]
 801d888:	e7ed      	b.n	801d866 <_free_r+0x22>
 801d88a:	461a      	mov	r2, r3
 801d88c:	685b      	ldr	r3, [r3, #4]
 801d88e:	b10b      	cbz	r3, 801d894 <_free_r+0x50>
 801d890:	42a3      	cmp	r3, r4
 801d892:	d9fa      	bls.n	801d88a <_free_r+0x46>
 801d894:	6811      	ldr	r1, [r2, #0]
 801d896:	1855      	adds	r5, r2, r1
 801d898:	42a5      	cmp	r5, r4
 801d89a:	d10b      	bne.n	801d8b4 <_free_r+0x70>
 801d89c:	6824      	ldr	r4, [r4, #0]
 801d89e:	4421      	add	r1, r4
 801d8a0:	1854      	adds	r4, r2, r1
 801d8a2:	42a3      	cmp	r3, r4
 801d8a4:	6011      	str	r1, [r2, #0]
 801d8a6:	d1e0      	bne.n	801d86a <_free_r+0x26>
 801d8a8:	681c      	ldr	r4, [r3, #0]
 801d8aa:	685b      	ldr	r3, [r3, #4]
 801d8ac:	6053      	str	r3, [r2, #4]
 801d8ae:	4421      	add	r1, r4
 801d8b0:	6011      	str	r1, [r2, #0]
 801d8b2:	e7da      	b.n	801d86a <_free_r+0x26>
 801d8b4:	d902      	bls.n	801d8bc <_free_r+0x78>
 801d8b6:	230c      	movs	r3, #12
 801d8b8:	6003      	str	r3, [r0, #0]
 801d8ba:	e7d6      	b.n	801d86a <_free_r+0x26>
 801d8bc:	6825      	ldr	r5, [r4, #0]
 801d8be:	1961      	adds	r1, r4, r5
 801d8c0:	428b      	cmp	r3, r1
 801d8c2:	bf04      	itt	eq
 801d8c4:	6819      	ldreq	r1, [r3, #0]
 801d8c6:	685b      	ldreq	r3, [r3, #4]
 801d8c8:	6063      	str	r3, [r4, #4]
 801d8ca:	bf04      	itt	eq
 801d8cc:	1949      	addeq	r1, r1, r5
 801d8ce:	6021      	streq	r1, [r4, #0]
 801d8d0:	6054      	str	r4, [r2, #4]
 801d8d2:	e7ca      	b.n	801d86a <_free_r+0x26>
 801d8d4:	b003      	add	sp, #12
 801d8d6:	bd30      	pop	{r4, r5, pc}
 801d8d8:	200009fc 	.word	0x200009fc

0801d8dc <sbrk_aligned>:
 801d8dc:	b570      	push	{r4, r5, r6, lr}
 801d8de:	4e0e      	ldr	r6, [pc, #56]	; (801d918 <sbrk_aligned+0x3c>)
 801d8e0:	460c      	mov	r4, r1
 801d8e2:	6831      	ldr	r1, [r6, #0]
 801d8e4:	4605      	mov	r5, r0
 801d8e6:	b911      	cbnz	r1, 801d8ee <sbrk_aligned+0x12>
 801d8e8:	f000 f9f2 	bl	801dcd0 <_sbrk_r>
 801d8ec:	6030      	str	r0, [r6, #0]
 801d8ee:	4621      	mov	r1, r4
 801d8f0:	4628      	mov	r0, r5
 801d8f2:	f000 f9ed 	bl	801dcd0 <_sbrk_r>
 801d8f6:	1c43      	adds	r3, r0, #1
 801d8f8:	d00a      	beq.n	801d910 <sbrk_aligned+0x34>
 801d8fa:	1cc4      	adds	r4, r0, #3
 801d8fc:	f024 0403 	bic.w	r4, r4, #3
 801d900:	42a0      	cmp	r0, r4
 801d902:	d007      	beq.n	801d914 <sbrk_aligned+0x38>
 801d904:	1a21      	subs	r1, r4, r0
 801d906:	4628      	mov	r0, r5
 801d908:	f000 f9e2 	bl	801dcd0 <_sbrk_r>
 801d90c:	3001      	adds	r0, #1
 801d90e:	d101      	bne.n	801d914 <sbrk_aligned+0x38>
 801d910:	f04f 34ff 	mov.w	r4, #4294967295
 801d914:	4620      	mov	r0, r4
 801d916:	bd70      	pop	{r4, r5, r6, pc}
 801d918:	20000a00 	.word	0x20000a00

0801d91c <_malloc_r>:
 801d91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d920:	1ccd      	adds	r5, r1, #3
 801d922:	f025 0503 	bic.w	r5, r5, #3
 801d926:	3508      	adds	r5, #8
 801d928:	2d0c      	cmp	r5, #12
 801d92a:	bf38      	it	cc
 801d92c:	250c      	movcc	r5, #12
 801d92e:	2d00      	cmp	r5, #0
 801d930:	4607      	mov	r7, r0
 801d932:	db01      	blt.n	801d938 <_malloc_r+0x1c>
 801d934:	42a9      	cmp	r1, r5
 801d936:	d905      	bls.n	801d944 <_malloc_r+0x28>
 801d938:	230c      	movs	r3, #12
 801d93a:	603b      	str	r3, [r7, #0]
 801d93c:	2600      	movs	r6, #0
 801d93e:	4630      	mov	r0, r6
 801d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d944:	4e2e      	ldr	r6, [pc, #184]	; (801da00 <_malloc_r+0xe4>)
 801d946:	f000 fa3f 	bl	801ddc8 <__malloc_lock>
 801d94a:	6833      	ldr	r3, [r6, #0]
 801d94c:	461c      	mov	r4, r3
 801d94e:	bb34      	cbnz	r4, 801d99e <_malloc_r+0x82>
 801d950:	4629      	mov	r1, r5
 801d952:	4638      	mov	r0, r7
 801d954:	f7ff ffc2 	bl	801d8dc <sbrk_aligned>
 801d958:	1c43      	adds	r3, r0, #1
 801d95a:	4604      	mov	r4, r0
 801d95c:	d14d      	bne.n	801d9fa <_malloc_r+0xde>
 801d95e:	6834      	ldr	r4, [r6, #0]
 801d960:	4626      	mov	r6, r4
 801d962:	2e00      	cmp	r6, #0
 801d964:	d140      	bne.n	801d9e8 <_malloc_r+0xcc>
 801d966:	6823      	ldr	r3, [r4, #0]
 801d968:	4631      	mov	r1, r6
 801d96a:	4638      	mov	r0, r7
 801d96c:	eb04 0803 	add.w	r8, r4, r3
 801d970:	f000 f9ae 	bl	801dcd0 <_sbrk_r>
 801d974:	4580      	cmp	r8, r0
 801d976:	d13a      	bne.n	801d9ee <_malloc_r+0xd2>
 801d978:	6821      	ldr	r1, [r4, #0]
 801d97a:	3503      	adds	r5, #3
 801d97c:	1a6d      	subs	r5, r5, r1
 801d97e:	f025 0503 	bic.w	r5, r5, #3
 801d982:	3508      	adds	r5, #8
 801d984:	2d0c      	cmp	r5, #12
 801d986:	bf38      	it	cc
 801d988:	250c      	movcc	r5, #12
 801d98a:	4629      	mov	r1, r5
 801d98c:	4638      	mov	r0, r7
 801d98e:	f7ff ffa5 	bl	801d8dc <sbrk_aligned>
 801d992:	3001      	adds	r0, #1
 801d994:	d02b      	beq.n	801d9ee <_malloc_r+0xd2>
 801d996:	6823      	ldr	r3, [r4, #0]
 801d998:	442b      	add	r3, r5
 801d99a:	6023      	str	r3, [r4, #0]
 801d99c:	e00e      	b.n	801d9bc <_malloc_r+0xa0>
 801d99e:	6822      	ldr	r2, [r4, #0]
 801d9a0:	1b52      	subs	r2, r2, r5
 801d9a2:	d41e      	bmi.n	801d9e2 <_malloc_r+0xc6>
 801d9a4:	2a0b      	cmp	r2, #11
 801d9a6:	d916      	bls.n	801d9d6 <_malloc_r+0xba>
 801d9a8:	1961      	adds	r1, r4, r5
 801d9aa:	42a3      	cmp	r3, r4
 801d9ac:	6025      	str	r5, [r4, #0]
 801d9ae:	bf18      	it	ne
 801d9b0:	6059      	strne	r1, [r3, #4]
 801d9b2:	6863      	ldr	r3, [r4, #4]
 801d9b4:	bf08      	it	eq
 801d9b6:	6031      	streq	r1, [r6, #0]
 801d9b8:	5162      	str	r2, [r4, r5]
 801d9ba:	604b      	str	r3, [r1, #4]
 801d9bc:	4638      	mov	r0, r7
 801d9be:	f104 060b 	add.w	r6, r4, #11
 801d9c2:	f000 fa07 	bl	801ddd4 <__malloc_unlock>
 801d9c6:	f026 0607 	bic.w	r6, r6, #7
 801d9ca:	1d23      	adds	r3, r4, #4
 801d9cc:	1af2      	subs	r2, r6, r3
 801d9ce:	d0b6      	beq.n	801d93e <_malloc_r+0x22>
 801d9d0:	1b9b      	subs	r3, r3, r6
 801d9d2:	50a3      	str	r3, [r4, r2]
 801d9d4:	e7b3      	b.n	801d93e <_malloc_r+0x22>
 801d9d6:	6862      	ldr	r2, [r4, #4]
 801d9d8:	42a3      	cmp	r3, r4
 801d9da:	bf0c      	ite	eq
 801d9dc:	6032      	streq	r2, [r6, #0]
 801d9de:	605a      	strne	r2, [r3, #4]
 801d9e0:	e7ec      	b.n	801d9bc <_malloc_r+0xa0>
 801d9e2:	4623      	mov	r3, r4
 801d9e4:	6864      	ldr	r4, [r4, #4]
 801d9e6:	e7b2      	b.n	801d94e <_malloc_r+0x32>
 801d9e8:	4634      	mov	r4, r6
 801d9ea:	6876      	ldr	r6, [r6, #4]
 801d9ec:	e7b9      	b.n	801d962 <_malloc_r+0x46>
 801d9ee:	230c      	movs	r3, #12
 801d9f0:	603b      	str	r3, [r7, #0]
 801d9f2:	4638      	mov	r0, r7
 801d9f4:	f000 f9ee 	bl	801ddd4 <__malloc_unlock>
 801d9f8:	e7a1      	b.n	801d93e <_malloc_r+0x22>
 801d9fa:	6025      	str	r5, [r4, #0]
 801d9fc:	e7de      	b.n	801d9bc <_malloc_r+0xa0>
 801d9fe:	bf00      	nop
 801da00:	200009fc 	.word	0x200009fc

0801da04 <__ssputs_r>:
 801da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da08:	688e      	ldr	r6, [r1, #8]
 801da0a:	429e      	cmp	r6, r3
 801da0c:	4682      	mov	sl, r0
 801da0e:	460c      	mov	r4, r1
 801da10:	4690      	mov	r8, r2
 801da12:	461f      	mov	r7, r3
 801da14:	d838      	bhi.n	801da88 <__ssputs_r+0x84>
 801da16:	898a      	ldrh	r2, [r1, #12]
 801da18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801da1c:	d032      	beq.n	801da84 <__ssputs_r+0x80>
 801da1e:	6825      	ldr	r5, [r4, #0]
 801da20:	6909      	ldr	r1, [r1, #16]
 801da22:	eba5 0901 	sub.w	r9, r5, r1
 801da26:	6965      	ldr	r5, [r4, #20]
 801da28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801da30:	3301      	adds	r3, #1
 801da32:	444b      	add	r3, r9
 801da34:	106d      	asrs	r5, r5, #1
 801da36:	429d      	cmp	r5, r3
 801da38:	bf38      	it	cc
 801da3a:	461d      	movcc	r5, r3
 801da3c:	0553      	lsls	r3, r2, #21
 801da3e:	d531      	bpl.n	801daa4 <__ssputs_r+0xa0>
 801da40:	4629      	mov	r1, r5
 801da42:	f7ff ff6b 	bl	801d91c <_malloc_r>
 801da46:	4606      	mov	r6, r0
 801da48:	b950      	cbnz	r0, 801da60 <__ssputs_r+0x5c>
 801da4a:	230c      	movs	r3, #12
 801da4c:	f8ca 3000 	str.w	r3, [sl]
 801da50:	89a3      	ldrh	r3, [r4, #12]
 801da52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da56:	81a3      	strh	r3, [r4, #12]
 801da58:	f04f 30ff 	mov.w	r0, #4294967295
 801da5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da60:	6921      	ldr	r1, [r4, #16]
 801da62:	464a      	mov	r2, r9
 801da64:	f7ff fa08 	bl	801ce78 <memcpy>
 801da68:	89a3      	ldrh	r3, [r4, #12]
 801da6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801da6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da72:	81a3      	strh	r3, [r4, #12]
 801da74:	6126      	str	r6, [r4, #16]
 801da76:	6165      	str	r5, [r4, #20]
 801da78:	444e      	add	r6, r9
 801da7a:	eba5 0509 	sub.w	r5, r5, r9
 801da7e:	6026      	str	r6, [r4, #0]
 801da80:	60a5      	str	r5, [r4, #8]
 801da82:	463e      	mov	r6, r7
 801da84:	42be      	cmp	r6, r7
 801da86:	d900      	bls.n	801da8a <__ssputs_r+0x86>
 801da88:	463e      	mov	r6, r7
 801da8a:	6820      	ldr	r0, [r4, #0]
 801da8c:	4632      	mov	r2, r6
 801da8e:	4641      	mov	r1, r8
 801da90:	f000 f980 	bl	801dd94 <memmove>
 801da94:	68a3      	ldr	r3, [r4, #8]
 801da96:	1b9b      	subs	r3, r3, r6
 801da98:	60a3      	str	r3, [r4, #8]
 801da9a:	6823      	ldr	r3, [r4, #0]
 801da9c:	4433      	add	r3, r6
 801da9e:	6023      	str	r3, [r4, #0]
 801daa0:	2000      	movs	r0, #0
 801daa2:	e7db      	b.n	801da5c <__ssputs_r+0x58>
 801daa4:	462a      	mov	r2, r5
 801daa6:	f000 f99b 	bl	801dde0 <_realloc_r>
 801daaa:	4606      	mov	r6, r0
 801daac:	2800      	cmp	r0, #0
 801daae:	d1e1      	bne.n	801da74 <__ssputs_r+0x70>
 801dab0:	6921      	ldr	r1, [r4, #16]
 801dab2:	4650      	mov	r0, sl
 801dab4:	f7ff fec6 	bl	801d844 <_free_r>
 801dab8:	e7c7      	b.n	801da4a <__ssputs_r+0x46>
	...

0801dabc <_svfiprintf_r>:
 801dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac0:	4698      	mov	r8, r3
 801dac2:	898b      	ldrh	r3, [r1, #12]
 801dac4:	061b      	lsls	r3, r3, #24
 801dac6:	b09d      	sub	sp, #116	; 0x74
 801dac8:	4607      	mov	r7, r0
 801daca:	460d      	mov	r5, r1
 801dacc:	4614      	mov	r4, r2
 801dace:	d50e      	bpl.n	801daee <_svfiprintf_r+0x32>
 801dad0:	690b      	ldr	r3, [r1, #16]
 801dad2:	b963      	cbnz	r3, 801daee <_svfiprintf_r+0x32>
 801dad4:	2140      	movs	r1, #64	; 0x40
 801dad6:	f7ff ff21 	bl	801d91c <_malloc_r>
 801dada:	6028      	str	r0, [r5, #0]
 801dadc:	6128      	str	r0, [r5, #16]
 801dade:	b920      	cbnz	r0, 801daea <_svfiprintf_r+0x2e>
 801dae0:	230c      	movs	r3, #12
 801dae2:	603b      	str	r3, [r7, #0]
 801dae4:	f04f 30ff 	mov.w	r0, #4294967295
 801dae8:	e0d1      	b.n	801dc8e <_svfiprintf_r+0x1d2>
 801daea:	2340      	movs	r3, #64	; 0x40
 801daec:	616b      	str	r3, [r5, #20]
 801daee:	2300      	movs	r3, #0
 801daf0:	9309      	str	r3, [sp, #36]	; 0x24
 801daf2:	2320      	movs	r3, #32
 801daf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801daf8:	f8cd 800c 	str.w	r8, [sp, #12]
 801dafc:	2330      	movs	r3, #48	; 0x30
 801dafe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dca8 <_svfiprintf_r+0x1ec>
 801db02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db06:	f04f 0901 	mov.w	r9, #1
 801db0a:	4623      	mov	r3, r4
 801db0c:	469a      	mov	sl, r3
 801db0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db12:	b10a      	cbz	r2, 801db18 <_svfiprintf_r+0x5c>
 801db14:	2a25      	cmp	r2, #37	; 0x25
 801db16:	d1f9      	bne.n	801db0c <_svfiprintf_r+0x50>
 801db18:	ebba 0b04 	subs.w	fp, sl, r4
 801db1c:	d00b      	beq.n	801db36 <_svfiprintf_r+0x7a>
 801db1e:	465b      	mov	r3, fp
 801db20:	4622      	mov	r2, r4
 801db22:	4629      	mov	r1, r5
 801db24:	4638      	mov	r0, r7
 801db26:	f7ff ff6d 	bl	801da04 <__ssputs_r>
 801db2a:	3001      	adds	r0, #1
 801db2c:	f000 80aa 	beq.w	801dc84 <_svfiprintf_r+0x1c8>
 801db30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db32:	445a      	add	r2, fp
 801db34:	9209      	str	r2, [sp, #36]	; 0x24
 801db36:	f89a 3000 	ldrb.w	r3, [sl]
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	f000 80a2 	beq.w	801dc84 <_svfiprintf_r+0x1c8>
 801db40:	2300      	movs	r3, #0
 801db42:	f04f 32ff 	mov.w	r2, #4294967295
 801db46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db4a:	f10a 0a01 	add.w	sl, sl, #1
 801db4e:	9304      	str	r3, [sp, #16]
 801db50:	9307      	str	r3, [sp, #28]
 801db52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801db56:	931a      	str	r3, [sp, #104]	; 0x68
 801db58:	4654      	mov	r4, sl
 801db5a:	2205      	movs	r2, #5
 801db5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db60:	4851      	ldr	r0, [pc, #324]	; (801dca8 <_svfiprintf_r+0x1ec>)
 801db62:	f7fb fabd 	bl	80190e0 <memchr>
 801db66:	9a04      	ldr	r2, [sp, #16]
 801db68:	b9d8      	cbnz	r0, 801dba2 <_svfiprintf_r+0xe6>
 801db6a:	06d0      	lsls	r0, r2, #27
 801db6c:	bf44      	itt	mi
 801db6e:	2320      	movmi	r3, #32
 801db70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801db74:	0711      	lsls	r1, r2, #28
 801db76:	bf44      	itt	mi
 801db78:	232b      	movmi	r3, #43	; 0x2b
 801db7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801db7e:	f89a 3000 	ldrb.w	r3, [sl]
 801db82:	2b2a      	cmp	r3, #42	; 0x2a
 801db84:	d015      	beq.n	801dbb2 <_svfiprintf_r+0xf6>
 801db86:	9a07      	ldr	r2, [sp, #28]
 801db88:	4654      	mov	r4, sl
 801db8a:	2000      	movs	r0, #0
 801db8c:	f04f 0c0a 	mov.w	ip, #10
 801db90:	4621      	mov	r1, r4
 801db92:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db96:	3b30      	subs	r3, #48	; 0x30
 801db98:	2b09      	cmp	r3, #9
 801db9a:	d94e      	bls.n	801dc3a <_svfiprintf_r+0x17e>
 801db9c:	b1b0      	cbz	r0, 801dbcc <_svfiprintf_r+0x110>
 801db9e:	9207      	str	r2, [sp, #28]
 801dba0:	e014      	b.n	801dbcc <_svfiprintf_r+0x110>
 801dba2:	eba0 0308 	sub.w	r3, r0, r8
 801dba6:	fa09 f303 	lsl.w	r3, r9, r3
 801dbaa:	4313      	orrs	r3, r2
 801dbac:	9304      	str	r3, [sp, #16]
 801dbae:	46a2      	mov	sl, r4
 801dbb0:	e7d2      	b.n	801db58 <_svfiprintf_r+0x9c>
 801dbb2:	9b03      	ldr	r3, [sp, #12]
 801dbb4:	1d19      	adds	r1, r3, #4
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	9103      	str	r1, [sp, #12]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	bfbb      	ittet	lt
 801dbbe:	425b      	neglt	r3, r3
 801dbc0:	f042 0202 	orrlt.w	r2, r2, #2
 801dbc4:	9307      	strge	r3, [sp, #28]
 801dbc6:	9307      	strlt	r3, [sp, #28]
 801dbc8:	bfb8      	it	lt
 801dbca:	9204      	strlt	r2, [sp, #16]
 801dbcc:	7823      	ldrb	r3, [r4, #0]
 801dbce:	2b2e      	cmp	r3, #46	; 0x2e
 801dbd0:	d10c      	bne.n	801dbec <_svfiprintf_r+0x130>
 801dbd2:	7863      	ldrb	r3, [r4, #1]
 801dbd4:	2b2a      	cmp	r3, #42	; 0x2a
 801dbd6:	d135      	bne.n	801dc44 <_svfiprintf_r+0x188>
 801dbd8:	9b03      	ldr	r3, [sp, #12]
 801dbda:	1d1a      	adds	r2, r3, #4
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	9203      	str	r2, [sp, #12]
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	bfb8      	it	lt
 801dbe4:	f04f 33ff 	movlt.w	r3, #4294967295
 801dbe8:	3402      	adds	r4, #2
 801dbea:	9305      	str	r3, [sp, #20]
 801dbec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801dcb8 <_svfiprintf_r+0x1fc>
 801dbf0:	7821      	ldrb	r1, [r4, #0]
 801dbf2:	2203      	movs	r2, #3
 801dbf4:	4650      	mov	r0, sl
 801dbf6:	f7fb fa73 	bl	80190e0 <memchr>
 801dbfa:	b140      	cbz	r0, 801dc0e <_svfiprintf_r+0x152>
 801dbfc:	2340      	movs	r3, #64	; 0x40
 801dbfe:	eba0 000a 	sub.w	r0, r0, sl
 801dc02:	fa03 f000 	lsl.w	r0, r3, r0
 801dc06:	9b04      	ldr	r3, [sp, #16]
 801dc08:	4303      	orrs	r3, r0
 801dc0a:	3401      	adds	r4, #1
 801dc0c:	9304      	str	r3, [sp, #16]
 801dc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc12:	4826      	ldr	r0, [pc, #152]	; (801dcac <_svfiprintf_r+0x1f0>)
 801dc14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc18:	2206      	movs	r2, #6
 801dc1a:	f7fb fa61 	bl	80190e0 <memchr>
 801dc1e:	2800      	cmp	r0, #0
 801dc20:	d038      	beq.n	801dc94 <_svfiprintf_r+0x1d8>
 801dc22:	4b23      	ldr	r3, [pc, #140]	; (801dcb0 <_svfiprintf_r+0x1f4>)
 801dc24:	bb1b      	cbnz	r3, 801dc6e <_svfiprintf_r+0x1b2>
 801dc26:	9b03      	ldr	r3, [sp, #12]
 801dc28:	3307      	adds	r3, #7
 801dc2a:	f023 0307 	bic.w	r3, r3, #7
 801dc2e:	3308      	adds	r3, #8
 801dc30:	9303      	str	r3, [sp, #12]
 801dc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc34:	4433      	add	r3, r6
 801dc36:	9309      	str	r3, [sp, #36]	; 0x24
 801dc38:	e767      	b.n	801db0a <_svfiprintf_r+0x4e>
 801dc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc3e:	460c      	mov	r4, r1
 801dc40:	2001      	movs	r0, #1
 801dc42:	e7a5      	b.n	801db90 <_svfiprintf_r+0xd4>
 801dc44:	2300      	movs	r3, #0
 801dc46:	3401      	adds	r4, #1
 801dc48:	9305      	str	r3, [sp, #20]
 801dc4a:	4619      	mov	r1, r3
 801dc4c:	f04f 0c0a 	mov.w	ip, #10
 801dc50:	4620      	mov	r0, r4
 801dc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc56:	3a30      	subs	r2, #48	; 0x30
 801dc58:	2a09      	cmp	r2, #9
 801dc5a:	d903      	bls.n	801dc64 <_svfiprintf_r+0x1a8>
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d0c5      	beq.n	801dbec <_svfiprintf_r+0x130>
 801dc60:	9105      	str	r1, [sp, #20]
 801dc62:	e7c3      	b.n	801dbec <_svfiprintf_r+0x130>
 801dc64:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc68:	4604      	mov	r4, r0
 801dc6a:	2301      	movs	r3, #1
 801dc6c:	e7f0      	b.n	801dc50 <_svfiprintf_r+0x194>
 801dc6e:	ab03      	add	r3, sp, #12
 801dc70:	9300      	str	r3, [sp, #0]
 801dc72:	462a      	mov	r2, r5
 801dc74:	4b0f      	ldr	r3, [pc, #60]	; (801dcb4 <_svfiprintf_r+0x1f8>)
 801dc76:	a904      	add	r1, sp, #16
 801dc78:	4638      	mov	r0, r7
 801dc7a:	f7fc fa3d 	bl	801a0f8 <_printf_float>
 801dc7e:	1c42      	adds	r2, r0, #1
 801dc80:	4606      	mov	r6, r0
 801dc82:	d1d6      	bne.n	801dc32 <_svfiprintf_r+0x176>
 801dc84:	89ab      	ldrh	r3, [r5, #12]
 801dc86:	065b      	lsls	r3, r3, #25
 801dc88:	f53f af2c 	bmi.w	801dae4 <_svfiprintf_r+0x28>
 801dc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dc8e:	b01d      	add	sp, #116	; 0x74
 801dc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc94:	ab03      	add	r3, sp, #12
 801dc96:	9300      	str	r3, [sp, #0]
 801dc98:	462a      	mov	r2, r5
 801dc9a:	4b06      	ldr	r3, [pc, #24]	; (801dcb4 <_svfiprintf_r+0x1f8>)
 801dc9c:	a904      	add	r1, sp, #16
 801dc9e:	4638      	mov	r0, r7
 801dca0:	f7fc fcce 	bl	801a640 <_printf_i>
 801dca4:	e7eb      	b.n	801dc7e <_svfiprintf_r+0x1c2>
 801dca6:	bf00      	nop
 801dca8:	08052c9c 	.word	0x08052c9c
 801dcac:	08052ca6 	.word	0x08052ca6
 801dcb0:	0801a0f9 	.word	0x0801a0f9
 801dcb4:	0801da05 	.word	0x0801da05
 801dcb8:	08052ca2 	.word	0x08052ca2
 801dcbc:	00000000 	.word	0x00000000

0801dcc0 <nan>:
 801dcc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801dcc8 <nan+0x8>
 801dcc4:	4770      	bx	lr
 801dcc6:	bf00      	nop
 801dcc8:	00000000 	.word	0x00000000
 801dccc:	7ff80000 	.word	0x7ff80000

0801dcd0 <_sbrk_r>:
 801dcd0:	b538      	push	{r3, r4, r5, lr}
 801dcd2:	4d06      	ldr	r5, [pc, #24]	; (801dcec <_sbrk_r+0x1c>)
 801dcd4:	2300      	movs	r3, #0
 801dcd6:	4604      	mov	r4, r0
 801dcd8:	4608      	mov	r0, r1
 801dcda:	602b      	str	r3, [r5, #0]
 801dcdc:	f7e8 f8d2 	bl	8005e84 <_sbrk>
 801dce0:	1c43      	adds	r3, r0, #1
 801dce2:	d102      	bne.n	801dcea <_sbrk_r+0x1a>
 801dce4:	682b      	ldr	r3, [r5, #0]
 801dce6:	b103      	cbz	r3, 801dcea <_sbrk_r+0x1a>
 801dce8:	6023      	str	r3, [r4, #0]
 801dcea:	bd38      	pop	{r3, r4, r5, pc}
 801dcec:	20000a04 	.word	0x20000a04

0801dcf0 <strncmp>:
 801dcf0:	b510      	push	{r4, lr}
 801dcf2:	b17a      	cbz	r2, 801dd14 <strncmp+0x24>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	3901      	subs	r1, #1
 801dcf8:	1884      	adds	r4, r0, r2
 801dcfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dcfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dd02:	4290      	cmp	r0, r2
 801dd04:	d101      	bne.n	801dd0a <strncmp+0x1a>
 801dd06:	42a3      	cmp	r3, r4
 801dd08:	d101      	bne.n	801dd0e <strncmp+0x1e>
 801dd0a:	1a80      	subs	r0, r0, r2
 801dd0c:	bd10      	pop	{r4, pc}
 801dd0e:	2800      	cmp	r0, #0
 801dd10:	d1f3      	bne.n	801dcfa <strncmp+0xa>
 801dd12:	e7fa      	b.n	801dd0a <strncmp+0x1a>
 801dd14:	4610      	mov	r0, r2
 801dd16:	e7f9      	b.n	801dd0c <strncmp+0x1c>

0801dd18 <__ascii_wctomb>:
 801dd18:	b149      	cbz	r1, 801dd2e <__ascii_wctomb+0x16>
 801dd1a:	2aff      	cmp	r2, #255	; 0xff
 801dd1c:	bf85      	ittet	hi
 801dd1e:	238a      	movhi	r3, #138	; 0x8a
 801dd20:	6003      	strhi	r3, [r0, #0]
 801dd22:	700a      	strbls	r2, [r1, #0]
 801dd24:	f04f 30ff 	movhi.w	r0, #4294967295
 801dd28:	bf98      	it	ls
 801dd2a:	2001      	movls	r0, #1
 801dd2c:	4770      	bx	lr
 801dd2e:	4608      	mov	r0, r1
 801dd30:	4770      	bx	lr
	...

0801dd34 <__assert_func>:
 801dd34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd36:	4614      	mov	r4, r2
 801dd38:	461a      	mov	r2, r3
 801dd3a:	4b09      	ldr	r3, [pc, #36]	; (801dd60 <__assert_func+0x2c>)
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	4605      	mov	r5, r0
 801dd40:	68d8      	ldr	r0, [r3, #12]
 801dd42:	b14c      	cbz	r4, 801dd58 <__assert_func+0x24>
 801dd44:	4b07      	ldr	r3, [pc, #28]	; (801dd64 <__assert_func+0x30>)
 801dd46:	9100      	str	r1, [sp, #0]
 801dd48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dd4c:	4906      	ldr	r1, [pc, #24]	; (801dd68 <__assert_func+0x34>)
 801dd4e:	462b      	mov	r3, r5
 801dd50:	f000 f80e 	bl	801dd70 <fiprintf>
 801dd54:	f000 fa8c 	bl	801e270 <abort>
 801dd58:	4b04      	ldr	r3, [pc, #16]	; (801dd6c <__assert_func+0x38>)
 801dd5a:	461c      	mov	r4, r3
 801dd5c:	e7f3      	b.n	801dd46 <__assert_func+0x12>
 801dd5e:	bf00      	nop
 801dd60:	20000064 	.word	0x20000064
 801dd64:	08052cad 	.word	0x08052cad
 801dd68:	08052cba 	.word	0x08052cba
 801dd6c:	08052ce8 	.word	0x08052ce8

0801dd70 <fiprintf>:
 801dd70:	b40e      	push	{r1, r2, r3}
 801dd72:	b503      	push	{r0, r1, lr}
 801dd74:	4601      	mov	r1, r0
 801dd76:	ab03      	add	r3, sp, #12
 801dd78:	4805      	ldr	r0, [pc, #20]	; (801dd90 <fiprintf+0x20>)
 801dd7a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd7e:	6800      	ldr	r0, [r0, #0]
 801dd80:	9301      	str	r3, [sp, #4]
 801dd82:	f000 f885 	bl	801de90 <_vfiprintf_r>
 801dd86:	b002      	add	sp, #8
 801dd88:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd8c:	b003      	add	sp, #12
 801dd8e:	4770      	bx	lr
 801dd90:	20000064 	.word	0x20000064

0801dd94 <memmove>:
 801dd94:	4288      	cmp	r0, r1
 801dd96:	b510      	push	{r4, lr}
 801dd98:	eb01 0402 	add.w	r4, r1, r2
 801dd9c:	d902      	bls.n	801dda4 <memmove+0x10>
 801dd9e:	4284      	cmp	r4, r0
 801dda0:	4623      	mov	r3, r4
 801dda2:	d807      	bhi.n	801ddb4 <memmove+0x20>
 801dda4:	1e43      	subs	r3, r0, #1
 801dda6:	42a1      	cmp	r1, r4
 801dda8:	d008      	beq.n	801ddbc <memmove+0x28>
 801ddaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ddae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ddb2:	e7f8      	b.n	801dda6 <memmove+0x12>
 801ddb4:	4402      	add	r2, r0
 801ddb6:	4601      	mov	r1, r0
 801ddb8:	428a      	cmp	r2, r1
 801ddba:	d100      	bne.n	801ddbe <memmove+0x2a>
 801ddbc:	bd10      	pop	{r4, pc}
 801ddbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ddc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ddc6:	e7f7      	b.n	801ddb8 <memmove+0x24>

0801ddc8 <__malloc_lock>:
 801ddc8:	4801      	ldr	r0, [pc, #4]	; (801ddd0 <__malloc_lock+0x8>)
 801ddca:	f000 bc11 	b.w	801e5f0 <__retarget_lock_acquire_recursive>
 801ddce:	bf00      	nop
 801ddd0:	20000a08 	.word	0x20000a08

0801ddd4 <__malloc_unlock>:
 801ddd4:	4801      	ldr	r0, [pc, #4]	; (801dddc <__malloc_unlock+0x8>)
 801ddd6:	f000 bc0c 	b.w	801e5f2 <__retarget_lock_release_recursive>
 801ddda:	bf00      	nop
 801dddc:	20000a08 	.word	0x20000a08

0801dde0 <_realloc_r>:
 801dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dde4:	4680      	mov	r8, r0
 801dde6:	4614      	mov	r4, r2
 801dde8:	460e      	mov	r6, r1
 801ddea:	b921      	cbnz	r1, 801ddf6 <_realloc_r+0x16>
 801ddec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddf0:	4611      	mov	r1, r2
 801ddf2:	f7ff bd93 	b.w	801d91c <_malloc_r>
 801ddf6:	b92a      	cbnz	r2, 801de04 <_realloc_r+0x24>
 801ddf8:	f7ff fd24 	bl	801d844 <_free_r>
 801ddfc:	4625      	mov	r5, r4
 801ddfe:	4628      	mov	r0, r5
 801de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de04:	f000 fc5c 	bl	801e6c0 <_malloc_usable_size_r>
 801de08:	4284      	cmp	r4, r0
 801de0a:	4607      	mov	r7, r0
 801de0c:	d802      	bhi.n	801de14 <_realloc_r+0x34>
 801de0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801de12:	d812      	bhi.n	801de3a <_realloc_r+0x5a>
 801de14:	4621      	mov	r1, r4
 801de16:	4640      	mov	r0, r8
 801de18:	f7ff fd80 	bl	801d91c <_malloc_r>
 801de1c:	4605      	mov	r5, r0
 801de1e:	2800      	cmp	r0, #0
 801de20:	d0ed      	beq.n	801ddfe <_realloc_r+0x1e>
 801de22:	42bc      	cmp	r4, r7
 801de24:	4622      	mov	r2, r4
 801de26:	4631      	mov	r1, r6
 801de28:	bf28      	it	cs
 801de2a:	463a      	movcs	r2, r7
 801de2c:	f7ff f824 	bl	801ce78 <memcpy>
 801de30:	4631      	mov	r1, r6
 801de32:	4640      	mov	r0, r8
 801de34:	f7ff fd06 	bl	801d844 <_free_r>
 801de38:	e7e1      	b.n	801ddfe <_realloc_r+0x1e>
 801de3a:	4635      	mov	r5, r6
 801de3c:	e7df      	b.n	801ddfe <_realloc_r+0x1e>

0801de3e <__sfputc_r>:
 801de3e:	6893      	ldr	r3, [r2, #8]
 801de40:	3b01      	subs	r3, #1
 801de42:	2b00      	cmp	r3, #0
 801de44:	b410      	push	{r4}
 801de46:	6093      	str	r3, [r2, #8]
 801de48:	da08      	bge.n	801de5c <__sfputc_r+0x1e>
 801de4a:	6994      	ldr	r4, [r2, #24]
 801de4c:	42a3      	cmp	r3, r4
 801de4e:	db01      	blt.n	801de54 <__sfputc_r+0x16>
 801de50:	290a      	cmp	r1, #10
 801de52:	d103      	bne.n	801de5c <__sfputc_r+0x1e>
 801de54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de58:	f000 b94a 	b.w	801e0f0 <__swbuf_r>
 801de5c:	6813      	ldr	r3, [r2, #0]
 801de5e:	1c58      	adds	r0, r3, #1
 801de60:	6010      	str	r0, [r2, #0]
 801de62:	7019      	strb	r1, [r3, #0]
 801de64:	4608      	mov	r0, r1
 801de66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801de6a:	4770      	bx	lr

0801de6c <__sfputs_r>:
 801de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de6e:	4606      	mov	r6, r0
 801de70:	460f      	mov	r7, r1
 801de72:	4614      	mov	r4, r2
 801de74:	18d5      	adds	r5, r2, r3
 801de76:	42ac      	cmp	r4, r5
 801de78:	d101      	bne.n	801de7e <__sfputs_r+0x12>
 801de7a:	2000      	movs	r0, #0
 801de7c:	e007      	b.n	801de8e <__sfputs_r+0x22>
 801de7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de82:	463a      	mov	r2, r7
 801de84:	4630      	mov	r0, r6
 801de86:	f7ff ffda 	bl	801de3e <__sfputc_r>
 801de8a:	1c43      	adds	r3, r0, #1
 801de8c:	d1f3      	bne.n	801de76 <__sfputs_r+0xa>
 801de8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801de90 <_vfiprintf_r>:
 801de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de94:	460d      	mov	r5, r1
 801de96:	b09d      	sub	sp, #116	; 0x74
 801de98:	4614      	mov	r4, r2
 801de9a:	4698      	mov	r8, r3
 801de9c:	4606      	mov	r6, r0
 801de9e:	b118      	cbz	r0, 801dea8 <_vfiprintf_r+0x18>
 801dea0:	6983      	ldr	r3, [r0, #24]
 801dea2:	b90b      	cbnz	r3, 801dea8 <_vfiprintf_r+0x18>
 801dea4:	f000 fb06 	bl	801e4b4 <__sinit>
 801dea8:	4b89      	ldr	r3, [pc, #548]	; (801e0d0 <_vfiprintf_r+0x240>)
 801deaa:	429d      	cmp	r5, r3
 801deac:	d11b      	bne.n	801dee6 <_vfiprintf_r+0x56>
 801deae:	6875      	ldr	r5, [r6, #4]
 801deb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801deb2:	07d9      	lsls	r1, r3, #31
 801deb4:	d405      	bmi.n	801dec2 <_vfiprintf_r+0x32>
 801deb6:	89ab      	ldrh	r3, [r5, #12]
 801deb8:	059a      	lsls	r2, r3, #22
 801deba:	d402      	bmi.n	801dec2 <_vfiprintf_r+0x32>
 801debc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801debe:	f000 fb97 	bl	801e5f0 <__retarget_lock_acquire_recursive>
 801dec2:	89ab      	ldrh	r3, [r5, #12]
 801dec4:	071b      	lsls	r3, r3, #28
 801dec6:	d501      	bpl.n	801decc <_vfiprintf_r+0x3c>
 801dec8:	692b      	ldr	r3, [r5, #16]
 801deca:	b9eb      	cbnz	r3, 801df08 <_vfiprintf_r+0x78>
 801decc:	4629      	mov	r1, r5
 801dece:	4630      	mov	r0, r6
 801ded0:	f000 f960 	bl	801e194 <__swsetup_r>
 801ded4:	b1c0      	cbz	r0, 801df08 <_vfiprintf_r+0x78>
 801ded6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ded8:	07dc      	lsls	r4, r3, #31
 801deda:	d50e      	bpl.n	801defa <_vfiprintf_r+0x6a>
 801dedc:	f04f 30ff 	mov.w	r0, #4294967295
 801dee0:	b01d      	add	sp, #116	; 0x74
 801dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dee6:	4b7b      	ldr	r3, [pc, #492]	; (801e0d4 <_vfiprintf_r+0x244>)
 801dee8:	429d      	cmp	r5, r3
 801deea:	d101      	bne.n	801def0 <_vfiprintf_r+0x60>
 801deec:	68b5      	ldr	r5, [r6, #8]
 801deee:	e7df      	b.n	801deb0 <_vfiprintf_r+0x20>
 801def0:	4b79      	ldr	r3, [pc, #484]	; (801e0d8 <_vfiprintf_r+0x248>)
 801def2:	429d      	cmp	r5, r3
 801def4:	bf08      	it	eq
 801def6:	68f5      	ldreq	r5, [r6, #12]
 801def8:	e7da      	b.n	801deb0 <_vfiprintf_r+0x20>
 801defa:	89ab      	ldrh	r3, [r5, #12]
 801defc:	0598      	lsls	r0, r3, #22
 801defe:	d4ed      	bmi.n	801dedc <_vfiprintf_r+0x4c>
 801df00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df02:	f000 fb76 	bl	801e5f2 <__retarget_lock_release_recursive>
 801df06:	e7e9      	b.n	801dedc <_vfiprintf_r+0x4c>
 801df08:	2300      	movs	r3, #0
 801df0a:	9309      	str	r3, [sp, #36]	; 0x24
 801df0c:	2320      	movs	r3, #32
 801df0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801df12:	f8cd 800c 	str.w	r8, [sp, #12]
 801df16:	2330      	movs	r3, #48	; 0x30
 801df18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e0dc <_vfiprintf_r+0x24c>
 801df1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801df20:	f04f 0901 	mov.w	r9, #1
 801df24:	4623      	mov	r3, r4
 801df26:	469a      	mov	sl, r3
 801df28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df2c:	b10a      	cbz	r2, 801df32 <_vfiprintf_r+0xa2>
 801df2e:	2a25      	cmp	r2, #37	; 0x25
 801df30:	d1f9      	bne.n	801df26 <_vfiprintf_r+0x96>
 801df32:	ebba 0b04 	subs.w	fp, sl, r4
 801df36:	d00b      	beq.n	801df50 <_vfiprintf_r+0xc0>
 801df38:	465b      	mov	r3, fp
 801df3a:	4622      	mov	r2, r4
 801df3c:	4629      	mov	r1, r5
 801df3e:	4630      	mov	r0, r6
 801df40:	f7ff ff94 	bl	801de6c <__sfputs_r>
 801df44:	3001      	adds	r0, #1
 801df46:	f000 80aa 	beq.w	801e09e <_vfiprintf_r+0x20e>
 801df4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df4c:	445a      	add	r2, fp
 801df4e:	9209      	str	r2, [sp, #36]	; 0x24
 801df50:	f89a 3000 	ldrb.w	r3, [sl]
 801df54:	2b00      	cmp	r3, #0
 801df56:	f000 80a2 	beq.w	801e09e <_vfiprintf_r+0x20e>
 801df5a:	2300      	movs	r3, #0
 801df5c:	f04f 32ff 	mov.w	r2, #4294967295
 801df60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801df64:	f10a 0a01 	add.w	sl, sl, #1
 801df68:	9304      	str	r3, [sp, #16]
 801df6a:	9307      	str	r3, [sp, #28]
 801df6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801df70:	931a      	str	r3, [sp, #104]	; 0x68
 801df72:	4654      	mov	r4, sl
 801df74:	2205      	movs	r2, #5
 801df76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df7a:	4858      	ldr	r0, [pc, #352]	; (801e0dc <_vfiprintf_r+0x24c>)
 801df7c:	f7fb f8b0 	bl	80190e0 <memchr>
 801df80:	9a04      	ldr	r2, [sp, #16]
 801df82:	b9d8      	cbnz	r0, 801dfbc <_vfiprintf_r+0x12c>
 801df84:	06d1      	lsls	r1, r2, #27
 801df86:	bf44      	itt	mi
 801df88:	2320      	movmi	r3, #32
 801df8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df8e:	0713      	lsls	r3, r2, #28
 801df90:	bf44      	itt	mi
 801df92:	232b      	movmi	r3, #43	; 0x2b
 801df94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801df98:	f89a 3000 	ldrb.w	r3, [sl]
 801df9c:	2b2a      	cmp	r3, #42	; 0x2a
 801df9e:	d015      	beq.n	801dfcc <_vfiprintf_r+0x13c>
 801dfa0:	9a07      	ldr	r2, [sp, #28]
 801dfa2:	4654      	mov	r4, sl
 801dfa4:	2000      	movs	r0, #0
 801dfa6:	f04f 0c0a 	mov.w	ip, #10
 801dfaa:	4621      	mov	r1, r4
 801dfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dfb0:	3b30      	subs	r3, #48	; 0x30
 801dfb2:	2b09      	cmp	r3, #9
 801dfb4:	d94e      	bls.n	801e054 <_vfiprintf_r+0x1c4>
 801dfb6:	b1b0      	cbz	r0, 801dfe6 <_vfiprintf_r+0x156>
 801dfb8:	9207      	str	r2, [sp, #28]
 801dfba:	e014      	b.n	801dfe6 <_vfiprintf_r+0x156>
 801dfbc:	eba0 0308 	sub.w	r3, r0, r8
 801dfc0:	fa09 f303 	lsl.w	r3, r9, r3
 801dfc4:	4313      	orrs	r3, r2
 801dfc6:	9304      	str	r3, [sp, #16]
 801dfc8:	46a2      	mov	sl, r4
 801dfca:	e7d2      	b.n	801df72 <_vfiprintf_r+0xe2>
 801dfcc:	9b03      	ldr	r3, [sp, #12]
 801dfce:	1d19      	adds	r1, r3, #4
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	9103      	str	r1, [sp, #12]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	bfbb      	ittet	lt
 801dfd8:	425b      	neglt	r3, r3
 801dfda:	f042 0202 	orrlt.w	r2, r2, #2
 801dfde:	9307      	strge	r3, [sp, #28]
 801dfe0:	9307      	strlt	r3, [sp, #28]
 801dfe2:	bfb8      	it	lt
 801dfe4:	9204      	strlt	r2, [sp, #16]
 801dfe6:	7823      	ldrb	r3, [r4, #0]
 801dfe8:	2b2e      	cmp	r3, #46	; 0x2e
 801dfea:	d10c      	bne.n	801e006 <_vfiprintf_r+0x176>
 801dfec:	7863      	ldrb	r3, [r4, #1]
 801dfee:	2b2a      	cmp	r3, #42	; 0x2a
 801dff0:	d135      	bne.n	801e05e <_vfiprintf_r+0x1ce>
 801dff2:	9b03      	ldr	r3, [sp, #12]
 801dff4:	1d1a      	adds	r2, r3, #4
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	9203      	str	r2, [sp, #12]
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	bfb8      	it	lt
 801dffe:	f04f 33ff 	movlt.w	r3, #4294967295
 801e002:	3402      	adds	r4, #2
 801e004:	9305      	str	r3, [sp, #20]
 801e006:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e0ec <_vfiprintf_r+0x25c>
 801e00a:	7821      	ldrb	r1, [r4, #0]
 801e00c:	2203      	movs	r2, #3
 801e00e:	4650      	mov	r0, sl
 801e010:	f7fb f866 	bl	80190e0 <memchr>
 801e014:	b140      	cbz	r0, 801e028 <_vfiprintf_r+0x198>
 801e016:	2340      	movs	r3, #64	; 0x40
 801e018:	eba0 000a 	sub.w	r0, r0, sl
 801e01c:	fa03 f000 	lsl.w	r0, r3, r0
 801e020:	9b04      	ldr	r3, [sp, #16]
 801e022:	4303      	orrs	r3, r0
 801e024:	3401      	adds	r4, #1
 801e026:	9304      	str	r3, [sp, #16]
 801e028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e02c:	482c      	ldr	r0, [pc, #176]	; (801e0e0 <_vfiprintf_r+0x250>)
 801e02e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e032:	2206      	movs	r2, #6
 801e034:	f7fb f854 	bl	80190e0 <memchr>
 801e038:	2800      	cmp	r0, #0
 801e03a:	d03f      	beq.n	801e0bc <_vfiprintf_r+0x22c>
 801e03c:	4b29      	ldr	r3, [pc, #164]	; (801e0e4 <_vfiprintf_r+0x254>)
 801e03e:	bb1b      	cbnz	r3, 801e088 <_vfiprintf_r+0x1f8>
 801e040:	9b03      	ldr	r3, [sp, #12]
 801e042:	3307      	adds	r3, #7
 801e044:	f023 0307 	bic.w	r3, r3, #7
 801e048:	3308      	adds	r3, #8
 801e04a:	9303      	str	r3, [sp, #12]
 801e04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e04e:	443b      	add	r3, r7
 801e050:	9309      	str	r3, [sp, #36]	; 0x24
 801e052:	e767      	b.n	801df24 <_vfiprintf_r+0x94>
 801e054:	fb0c 3202 	mla	r2, ip, r2, r3
 801e058:	460c      	mov	r4, r1
 801e05a:	2001      	movs	r0, #1
 801e05c:	e7a5      	b.n	801dfaa <_vfiprintf_r+0x11a>
 801e05e:	2300      	movs	r3, #0
 801e060:	3401      	adds	r4, #1
 801e062:	9305      	str	r3, [sp, #20]
 801e064:	4619      	mov	r1, r3
 801e066:	f04f 0c0a 	mov.w	ip, #10
 801e06a:	4620      	mov	r0, r4
 801e06c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e070:	3a30      	subs	r2, #48	; 0x30
 801e072:	2a09      	cmp	r2, #9
 801e074:	d903      	bls.n	801e07e <_vfiprintf_r+0x1ee>
 801e076:	2b00      	cmp	r3, #0
 801e078:	d0c5      	beq.n	801e006 <_vfiprintf_r+0x176>
 801e07a:	9105      	str	r1, [sp, #20]
 801e07c:	e7c3      	b.n	801e006 <_vfiprintf_r+0x176>
 801e07e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e082:	4604      	mov	r4, r0
 801e084:	2301      	movs	r3, #1
 801e086:	e7f0      	b.n	801e06a <_vfiprintf_r+0x1da>
 801e088:	ab03      	add	r3, sp, #12
 801e08a:	9300      	str	r3, [sp, #0]
 801e08c:	462a      	mov	r2, r5
 801e08e:	4b16      	ldr	r3, [pc, #88]	; (801e0e8 <_vfiprintf_r+0x258>)
 801e090:	a904      	add	r1, sp, #16
 801e092:	4630      	mov	r0, r6
 801e094:	f7fc f830 	bl	801a0f8 <_printf_float>
 801e098:	4607      	mov	r7, r0
 801e09a:	1c78      	adds	r0, r7, #1
 801e09c:	d1d6      	bne.n	801e04c <_vfiprintf_r+0x1bc>
 801e09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e0a0:	07d9      	lsls	r1, r3, #31
 801e0a2:	d405      	bmi.n	801e0b0 <_vfiprintf_r+0x220>
 801e0a4:	89ab      	ldrh	r3, [r5, #12]
 801e0a6:	059a      	lsls	r2, r3, #22
 801e0a8:	d402      	bmi.n	801e0b0 <_vfiprintf_r+0x220>
 801e0aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0ac:	f000 faa1 	bl	801e5f2 <__retarget_lock_release_recursive>
 801e0b0:	89ab      	ldrh	r3, [r5, #12]
 801e0b2:	065b      	lsls	r3, r3, #25
 801e0b4:	f53f af12 	bmi.w	801dedc <_vfiprintf_r+0x4c>
 801e0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e0ba:	e711      	b.n	801dee0 <_vfiprintf_r+0x50>
 801e0bc:	ab03      	add	r3, sp, #12
 801e0be:	9300      	str	r3, [sp, #0]
 801e0c0:	462a      	mov	r2, r5
 801e0c2:	4b09      	ldr	r3, [pc, #36]	; (801e0e8 <_vfiprintf_r+0x258>)
 801e0c4:	a904      	add	r1, sp, #16
 801e0c6:	4630      	mov	r0, r6
 801e0c8:	f7fc faba 	bl	801a640 <_printf_i>
 801e0cc:	e7e4      	b.n	801e098 <_vfiprintf_r+0x208>
 801e0ce:	bf00      	nop
 801e0d0:	08052d0c 	.word	0x08052d0c
 801e0d4:	08052d2c 	.word	0x08052d2c
 801e0d8:	08052cec 	.word	0x08052cec
 801e0dc:	08052c9c 	.word	0x08052c9c
 801e0e0:	08052ca6 	.word	0x08052ca6
 801e0e4:	0801a0f9 	.word	0x0801a0f9
 801e0e8:	0801de6d 	.word	0x0801de6d
 801e0ec:	08052ca2 	.word	0x08052ca2

0801e0f0 <__swbuf_r>:
 801e0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0f2:	460e      	mov	r6, r1
 801e0f4:	4614      	mov	r4, r2
 801e0f6:	4605      	mov	r5, r0
 801e0f8:	b118      	cbz	r0, 801e102 <__swbuf_r+0x12>
 801e0fa:	6983      	ldr	r3, [r0, #24]
 801e0fc:	b90b      	cbnz	r3, 801e102 <__swbuf_r+0x12>
 801e0fe:	f000 f9d9 	bl	801e4b4 <__sinit>
 801e102:	4b21      	ldr	r3, [pc, #132]	; (801e188 <__swbuf_r+0x98>)
 801e104:	429c      	cmp	r4, r3
 801e106:	d12b      	bne.n	801e160 <__swbuf_r+0x70>
 801e108:	686c      	ldr	r4, [r5, #4]
 801e10a:	69a3      	ldr	r3, [r4, #24]
 801e10c:	60a3      	str	r3, [r4, #8]
 801e10e:	89a3      	ldrh	r3, [r4, #12]
 801e110:	071a      	lsls	r2, r3, #28
 801e112:	d52f      	bpl.n	801e174 <__swbuf_r+0x84>
 801e114:	6923      	ldr	r3, [r4, #16]
 801e116:	b36b      	cbz	r3, 801e174 <__swbuf_r+0x84>
 801e118:	6923      	ldr	r3, [r4, #16]
 801e11a:	6820      	ldr	r0, [r4, #0]
 801e11c:	1ac0      	subs	r0, r0, r3
 801e11e:	6963      	ldr	r3, [r4, #20]
 801e120:	b2f6      	uxtb	r6, r6
 801e122:	4283      	cmp	r3, r0
 801e124:	4637      	mov	r7, r6
 801e126:	dc04      	bgt.n	801e132 <__swbuf_r+0x42>
 801e128:	4621      	mov	r1, r4
 801e12a:	4628      	mov	r0, r5
 801e12c:	f000 f92e 	bl	801e38c <_fflush_r>
 801e130:	bb30      	cbnz	r0, 801e180 <__swbuf_r+0x90>
 801e132:	68a3      	ldr	r3, [r4, #8]
 801e134:	3b01      	subs	r3, #1
 801e136:	60a3      	str	r3, [r4, #8]
 801e138:	6823      	ldr	r3, [r4, #0]
 801e13a:	1c5a      	adds	r2, r3, #1
 801e13c:	6022      	str	r2, [r4, #0]
 801e13e:	701e      	strb	r6, [r3, #0]
 801e140:	6963      	ldr	r3, [r4, #20]
 801e142:	3001      	adds	r0, #1
 801e144:	4283      	cmp	r3, r0
 801e146:	d004      	beq.n	801e152 <__swbuf_r+0x62>
 801e148:	89a3      	ldrh	r3, [r4, #12]
 801e14a:	07db      	lsls	r3, r3, #31
 801e14c:	d506      	bpl.n	801e15c <__swbuf_r+0x6c>
 801e14e:	2e0a      	cmp	r6, #10
 801e150:	d104      	bne.n	801e15c <__swbuf_r+0x6c>
 801e152:	4621      	mov	r1, r4
 801e154:	4628      	mov	r0, r5
 801e156:	f000 f919 	bl	801e38c <_fflush_r>
 801e15a:	b988      	cbnz	r0, 801e180 <__swbuf_r+0x90>
 801e15c:	4638      	mov	r0, r7
 801e15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e160:	4b0a      	ldr	r3, [pc, #40]	; (801e18c <__swbuf_r+0x9c>)
 801e162:	429c      	cmp	r4, r3
 801e164:	d101      	bne.n	801e16a <__swbuf_r+0x7a>
 801e166:	68ac      	ldr	r4, [r5, #8]
 801e168:	e7cf      	b.n	801e10a <__swbuf_r+0x1a>
 801e16a:	4b09      	ldr	r3, [pc, #36]	; (801e190 <__swbuf_r+0xa0>)
 801e16c:	429c      	cmp	r4, r3
 801e16e:	bf08      	it	eq
 801e170:	68ec      	ldreq	r4, [r5, #12]
 801e172:	e7ca      	b.n	801e10a <__swbuf_r+0x1a>
 801e174:	4621      	mov	r1, r4
 801e176:	4628      	mov	r0, r5
 801e178:	f000 f80c 	bl	801e194 <__swsetup_r>
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d0cb      	beq.n	801e118 <__swbuf_r+0x28>
 801e180:	f04f 37ff 	mov.w	r7, #4294967295
 801e184:	e7ea      	b.n	801e15c <__swbuf_r+0x6c>
 801e186:	bf00      	nop
 801e188:	08052d0c 	.word	0x08052d0c
 801e18c:	08052d2c 	.word	0x08052d2c
 801e190:	08052cec 	.word	0x08052cec

0801e194 <__swsetup_r>:
 801e194:	4b32      	ldr	r3, [pc, #200]	; (801e260 <__swsetup_r+0xcc>)
 801e196:	b570      	push	{r4, r5, r6, lr}
 801e198:	681d      	ldr	r5, [r3, #0]
 801e19a:	4606      	mov	r6, r0
 801e19c:	460c      	mov	r4, r1
 801e19e:	b125      	cbz	r5, 801e1aa <__swsetup_r+0x16>
 801e1a0:	69ab      	ldr	r3, [r5, #24]
 801e1a2:	b913      	cbnz	r3, 801e1aa <__swsetup_r+0x16>
 801e1a4:	4628      	mov	r0, r5
 801e1a6:	f000 f985 	bl	801e4b4 <__sinit>
 801e1aa:	4b2e      	ldr	r3, [pc, #184]	; (801e264 <__swsetup_r+0xd0>)
 801e1ac:	429c      	cmp	r4, r3
 801e1ae:	d10f      	bne.n	801e1d0 <__swsetup_r+0x3c>
 801e1b0:	686c      	ldr	r4, [r5, #4]
 801e1b2:	89a3      	ldrh	r3, [r4, #12]
 801e1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e1b8:	0719      	lsls	r1, r3, #28
 801e1ba:	d42c      	bmi.n	801e216 <__swsetup_r+0x82>
 801e1bc:	06dd      	lsls	r5, r3, #27
 801e1be:	d411      	bmi.n	801e1e4 <__swsetup_r+0x50>
 801e1c0:	2309      	movs	r3, #9
 801e1c2:	6033      	str	r3, [r6, #0]
 801e1c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e1c8:	81a3      	strh	r3, [r4, #12]
 801e1ca:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ce:	e03e      	b.n	801e24e <__swsetup_r+0xba>
 801e1d0:	4b25      	ldr	r3, [pc, #148]	; (801e268 <__swsetup_r+0xd4>)
 801e1d2:	429c      	cmp	r4, r3
 801e1d4:	d101      	bne.n	801e1da <__swsetup_r+0x46>
 801e1d6:	68ac      	ldr	r4, [r5, #8]
 801e1d8:	e7eb      	b.n	801e1b2 <__swsetup_r+0x1e>
 801e1da:	4b24      	ldr	r3, [pc, #144]	; (801e26c <__swsetup_r+0xd8>)
 801e1dc:	429c      	cmp	r4, r3
 801e1de:	bf08      	it	eq
 801e1e0:	68ec      	ldreq	r4, [r5, #12]
 801e1e2:	e7e6      	b.n	801e1b2 <__swsetup_r+0x1e>
 801e1e4:	0758      	lsls	r0, r3, #29
 801e1e6:	d512      	bpl.n	801e20e <__swsetup_r+0x7a>
 801e1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1ea:	b141      	cbz	r1, 801e1fe <__swsetup_r+0x6a>
 801e1ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1f0:	4299      	cmp	r1, r3
 801e1f2:	d002      	beq.n	801e1fa <__swsetup_r+0x66>
 801e1f4:	4630      	mov	r0, r6
 801e1f6:	f7ff fb25 	bl	801d844 <_free_r>
 801e1fa:	2300      	movs	r3, #0
 801e1fc:	6363      	str	r3, [r4, #52]	; 0x34
 801e1fe:	89a3      	ldrh	r3, [r4, #12]
 801e200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e204:	81a3      	strh	r3, [r4, #12]
 801e206:	2300      	movs	r3, #0
 801e208:	6063      	str	r3, [r4, #4]
 801e20a:	6923      	ldr	r3, [r4, #16]
 801e20c:	6023      	str	r3, [r4, #0]
 801e20e:	89a3      	ldrh	r3, [r4, #12]
 801e210:	f043 0308 	orr.w	r3, r3, #8
 801e214:	81a3      	strh	r3, [r4, #12]
 801e216:	6923      	ldr	r3, [r4, #16]
 801e218:	b94b      	cbnz	r3, 801e22e <__swsetup_r+0x9a>
 801e21a:	89a3      	ldrh	r3, [r4, #12]
 801e21c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e224:	d003      	beq.n	801e22e <__swsetup_r+0x9a>
 801e226:	4621      	mov	r1, r4
 801e228:	4630      	mov	r0, r6
 801e22a:	f000 fa09 	bl	801e640 <__smakebuf_r>
 801e22e:	89a0      	ldrh	r0, [r4, #12]
 801e230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e234:	f010 0301 	ands.w	r3, r0, #1
 801e238:	d00a      	beq.n	801e250 <__swsetup_r+0xbc>
 801e23a:	2300      	movs	r3, #0
 801e23c:	60a3      	str	r3, [r4, #8]
 801e23e:	6963      	ldr	r3, [r4, #20]
 801e240:	425b      	negs	r3, r3
 801e242:	61a3      	str	r3, [r4, #24]
 801e244:	6923      	ldr	r3, [r4, #16]
 801e246:	b943      	cbnz	r3, 801e25a <__swsetup_r+0xc6>
 801e248:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e24c:	d1ba      	bne.n	801e1c4 <__swsetup_r+0x30>
 801e24e:	bd70      	pop	{r4, r5, r6, pc}
 801e250:	0781      	lsls	r1, r0, #30
 801e252:	bf58      	it	pl
 801e254:	6963      	ldrpl	r3, [r4, #20]
 801e256:	60a3      	str	r3, [r4, #8]
 801e258:	e7f4      	b.n	801e244 <__swsetup_r+0xb0>
 801e25a:	2000      	movs	r0, #0
 801e25c:	e7f7      	b.n	801e24e <__swsetup_r+0xba>
 801e25e:	bf00      	nop
 801e260:	20000064 	.word	0x20000064
 801e264:	08052d0c 	.word	0x08052d0c
 801e268:	08052d2c 	.word	0x08052d2c
 801e26c:	08052cec 	.word	0x08052cec

0801e270 <abort>:
 801e270:	b508      	push	{r3, lr}
 801e272:	2006      	movs	r0, #6
 801e274:	f000 fa54 	bl	801e720 <raise>
 801e278:	2001      	movs	r0, #1
 801e27a:	f7e7 fd18 	bl	8005cae <_exit>
	...

0801e280 <__sflush_r>:
 801e280:	898a      	ldrh	r2, [r1, #12]
 801e282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e286:	4605      	mov	r5, r0
 801e288:	0710      	lsls	r0, r2, #28
 801e28a:	460c      	mov	r4, r1
 801e28c:	d458      	bmi.n	801e340 <__sflush_r+0xc0>
 801e28e:	684b      	ldr	r3, [r1, #4]
 801e290:	2b00      	cmp	r3, #0
 801e292:	dc05      	bgt.n	801e2a0 <__sflush_r+0x20>
 801e294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e296:	2b00      	cmp	r3, #0
 801e298:	dc02      	bgt.n	801e2a0 <__sflush_r+0x20>
 801e29a:	2000      	movs	r0, #0
 801e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2a2:	2e00      	cmp	r6, #0
 801e2a4:	d0f9      	beq.n	801e29a <__sflush_r+0x1a>
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e2ac:	682f      	ldr	r7, [r5, #0]
 801e2ae:	602b      	str	r3, [r5, #0]
 801e2b0:	d032      	beq.n	801e318 <__sflush_r+0x98>
 801e2b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e2b4:	89a3      	ldrh	r3, [r4, #12]
 801e2b6:	075a      	lsls	r2, r3, #29
 801e2b8:	d505      	bpl.n	801e2c6 <__sflush_r+0x46>
 801e2ba:	6863      	ldr	r3, [r4, #4]
 801e2bc:	1ac0      	subs	r0, r0, r3
 801e2be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e2c0:	b10b      	cbz	r3, 801e2c6 <__sflush_r+0x46>
 801e2c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e2c4:	1ac0      	subs	r0, r0, r3
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	4602      	mov	r2, r0
 801e2ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e2cc:	6a21      	ldr	r1, [r4, #32]
 801e2ce:	4628      	mov	r0, r5
 801e2d0:	47b0      	blx	r6
 801e2d2:	1c43      	adds	r3, r0, #1
 801e2d4:	89a3      	ldrh	r3, [r4, #12]
 801e2d6:	d106      	bne.n	801e2e6 <__sflush_r+0x66>
 801e2d8:	6829      	ldr	r1, [r5, #0]
 801e2da:	291d      	cmp	r1, #29
 801e2dc:	d82c      	bhi.n	801e338 <__sflush_r+0xb8>
 801e2de:	4a2a      	ldr	r2, [pc, #168]	; (801e388 <__sflush_r+0x108>)
 801e2e0:	40ca      	lsrs	r2, r1
 801e2e2:	07d6      	lsls	r6, r2, #31
 801e2e4:	d528      	bpl.n	801e338 <__sflush_r+0xb8>
 801e2e6:	2200      	movs	r2, #0
 801e2e8:	6062      	str	r2, [r4, #4]
 801e2ea:	04d9      	lsls	r1, r3, #19
 801e2ec:	6922      	ldr	r2, [r4, #16]
 801e2ee:	6022      	str	r2, [r4, #0]
 801e2f0:	d504      	bpl.n	801e2fc <__sflush_r+0x7c>
 801e2f2:	1c42      	adds	r2, r0, #1
 801e2f4:	d101      	bne.n	801e2fa <__sflush_r+0x7a>
 801e2f6:	682b      	ldr	r3, [r5, #0]
 801e2f8:	b903      	cbnz	r3, 801e2fc <__sflush_r+0x7c>
 801e2fa:	6560      	str	r0, [r4, #84]	; 0x54
 801e2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2fe:	602f      	str	r7, [r5, #0]
 801e300:	2900      	cmp	r1, #0
 801e302:	d0ca      	beq.n	801e29a <__sflush_r+0x1a>
 801e304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e308:	4299      	cmp	r1, r3
 801e30a:	d002      	beq.n	801e312 <__sflush_r+0x92>
 801e30c:	4628      	mov	r0, r5
 801e30e:	f7ff fa99 	bl	801d844 <_free_r>
 801e312:	2000      	movs	r0, #0
 801e314:	6360      	str	r0, [r4, #52]	; 0x34
 801e316:	e7c1      	b.n	801e29c <__sflush_r+0x1c>
 801e318:	6a21      	ldr	r1, [r4, #32]
 801e31a:	2301      	movs	r3, #1
 801e31c:	4628      	mov	r0, r5
 801e31e:	47b0      	blx	r6
 801e320:	1c41      	adds	r1, r0, #1
 801e322:	d1c7      	bne.n	801e2b4 <__sflush_r+0x34>
 801e324:	682b      	ldr	r3, [r5, #0]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d0c4      	beq.n	801e2b4 <__sflush_r+0x34>
 801e32a:	2b1d      	cmp	r3, #29
 801e32c:	d001      	beq.n	801e332 <__sflush_r+0xb2>
 801e32e:	2b16      	cmp	r3, #22
 801e330:	d101      	bne.n	801e336 <__sflush_r+0xb6>
 801e332:	602f      	str	r7, [r5, #0]
 801e334:	e7b1      	b.n	801e29a <__sflush_r+0x1a>
 801e336:	89a3      	ldrh	r3, [r4, #12]
 801e338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e33c:	81a3      	strh	r3, [r4, #12]
 801e33e:	e7ad      	b.n	801e29c <__sflush_r+0x1c>
 801e340:	690f      	ldr	r7, [r1, #16]
 801e342:	2f00      	cmp	r7, #0
 801e344:	d0a9      	beq.n	801e29a <__sflush_r+0x1a>
 801e346:	0793      	lsls	r3, r2, #30
 801e348:	680e      	ldr	r6, [r1, #0]
 801e34a:	bf08      	it	eq
 801e34c:	694b      	ldreq	r3, [r1, #20]
 801e34e:	600f      	str	r7, [r1, #0]
 801e350:	bf18      	it	ne
 801e352:	2300      	movne	r3, #0
 801e354:	eba6 0807 	sub.w	r8, r6, r7
 801e358:	608b      	str	r3, [r1, #8]
 801e35a:	f1b8 0f00 	cmp.w	r8, #0
 801e35e:	dd9c      	ble.n	801e29a <__sflush_r+0x1a>
 801e360:	6a21      	ldr	r1, [r4, #32]
 801e362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e364:	4643      	mov	r3, r8
 801e366:	463a      	mov	r2, r7
 801e368:	4628      	mov	r0, r5
 801e36a:	47b0      	blx	r6
 801e36c:	2800      	cmp	r0, #0
 801e36e:	dc06      	bgt.n	801e37e <__sflush_r+0xfe>
 801e370:	89a3      	ldrh	r3, [r4, #12]
 801e372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e376:	81a3      	strh	r3, [r4, #12]
 801e378:	f04f 30ff 	mov.w	r0, #4294967295
 801e37c:	e78e      	b.n	801e29c <__sflush_r+0x1c>
 801e37e:	4407      	add	r7, r0
 801e380:	eba8 0800 	sub.w	r8, r8, r0
 801e384:	e7e9      	b.n	801e35a <__sflush_r+0xda>
 801e386:	bf00      	nop
 801e388:	20400001 	.word	0x20400001

0801e38c <_fflush_r>:
 801e38c:	b538      	push	{r3, r4, r5, lr}
 801e38e:	690b      	ldr	r3, [r1, #16]
 801e390:	4605      	mov	r5, r0
 801e392:	460c      	mov	r4, r1
 801e394:	b913      	cbnz	r3, 801e39c <_fflush_r+0x10>
 801e396:	2500      	movs	r5, #0
 801e398:	4628      	mov	r0, r5
 801e39a:	bd38      	pop	{r3, r4, r5, pc}
 801e39c:	b118      	cbz	r0, 801e3a6 <_fflush_r+0x1a>
 801e39e:	6983      	ldr	r3, [r0, #24]
 801e3a0:	b90b      	cbnz	r3, 801e3a6 <_fflush_r+0x1a>
 801e3a2:	f000 f887 	bl	801e4b4 <__sinit>
 801e3a6:	4b14      	ldr	r3, [pc, #80]	; (801e3f8 <_fflush_r+0x6c>)
 801e3a8:	429c      	cmp	r4, r3
 801e3aa:	d11b      	bne.n	801e3e4 <_fflush_r+0x58>
 801e3ac:	686c      	ldr	r4, [r5, #4]
 801e3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d0ef      	beq.n	801e396 <_fflush_r+0xa>
 801e3b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e3b8:	07d0      	lsls	r0, r2, #31
 801e3ba:	d404      	bmi.n	801e3c6 <_fflush_r+0x3a>
 801e3bc:	0599      	lsls	r1, r3, #22
 801e3be:	d402      	bmi.n	801e3c6 <_fflush_r+0x3a>
 801e3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3c2:	f000 f915 	bl	801e5f0 <__retarget_lock_acquire_recursive>
 801e3c6:	4628      	mov	r0, r5
 801e3c8:	4621      	mov	r1, r4
 801e3ca:	f7ff ff59 	bl	801e280 <__sflush_r>
 801e3ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3d0:	07da      	lsls	r2, r3, #31
 801e3d2:	4605      	mov	r5, r0
 801e3d4:	d4e0      	bmi.n	801e398 <_fflush_r+0xc>
 801e3d6:	89a3      	ldrh	r3, [r4, #12]
 801e3d8:	059b      	lsls	r3, r3, #22
 801e3da:	d4dd      	bmi.n	801e398 <_fflush_r+0xc>
 801e3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3de:	f000 f908 	bl	801e5f2 <__retarget_lock_release_recursive>
 801e3e2:	e7d9      	b.n	801e398 <_fflush_r+0xc>
 801e3e4:	4b05      	ldr	r3, [pc, #20]	; (801e3fc <_fflush_r+0x70>)
 801e3e6:	429c      	cmp	r4, r3
 801e3e8:	d101      	bne.n	801e3ee <_fflush_r+0x62>
 801e3ea:	68ac      	ldr	r4, [r5, #8]
 801e3ec:	e7df      	b.n	801e3ae <_fflush_r+0x22>
 801e3ee:	4b04      	ldr	r3, [pc, #16]	; (801e400 <_fflush_r+0x74>)
 801e3f0:	429c      	cmp	r4, r3
 801e3f2:	bf08      	it	eq
 801e3f4:	68ec      	ldreq	r4, [r5, #12]
 801e3f6:	e7da      	b.n	801e3ae <_fflush_r+0x22>
 801e3f8:	08052d0c 	.word	0x08052d0c
 801e3fc:	08052d2c 	.word	0x08052d2c
 801e400:	08052cec 	.word	0x08052cec

0801e404 <std>:
 801e404:	2300      	movs	r3, #0
 801e406:	b510      	push	{r4, lr}
 801e408:	4604      	mov	r4, r0
 801e40a:	e9c0 3300 	strd	r3, r3, [r0]
 801e40e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e412:	6083      	str	r3, [r0, #8]
 801e414:	8181      	strh	r1, [r0, #12]
 801e416:	6643      	str	r3, [r0, #100]	; 0x64
 801e418:	81c2      	strh	r2, [r0, #14]
 801e41a:	6183      	str	r3, [r0, #24]
 801e41c:	4619      	mov	r1, r3
 801e41e:	2208      	movs	r2, #8
 801e420:	305c      	adds	r0, #92	; 0x5c
 801e422:	f7fb fdc1 	bl	8019fa8 <memset>
 801e426:	4b05      	ldr	r3, [pc, #20]	; (801e43c <std+0x38>)
 801e428:	6263      	str	r3, [r4, #36]	; 0x24
 801e42a:	4b05      	ldr	r3, [pc, #20]	; (801e440 <std+0x3c>)
 801e42c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e42e:	4b05      	ldr	r3, [pc, #20]	; (801e444 <std+0x40>)
 801e430:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e432:	4b05      	ldr	r3, [pc, #20]	; (801e448 <std+0x44>)
 801e434:	6224      	str	r4, [r4, #32]
 801e436:	6323      	str	r3, [r4, #48]	; 0x30
 801e438:	bd10      	pop	{r4, pc}
 801e43a:	bf00      	nop
 801e43c:	0801e759 	.word	0x0801e759
 801e440:	0801e77b 	.word	0x0801e77b
 801e444:	0801e7b3 	.word	0x0801e7b3
 801e448:	0801e7d7 	.word	0x0801e7d7

0801e44c <_cleanup_r>:
 801e44c:	4901      	ldr	r1, [pc, #4]	; (801e454 <_cleanup_r+0x8>)
 801e44e:	f000 b8af 	b.w	801e5b0 <_fwalk_reent>
 801e452:	bf00      	nop
 801e454:	0801e38d 	.word	0x0801e38d

0801e458 <__sfmoreglue>:
 801e458:	b570      	push	{r4, r5, r6, lr}
 801e45a:	2268      	movs	r2, #104	; 0x68
 801e45c:	1e4d      	subs	r5, r1, #1
 801e45e:	4355      	muls	r5, r2
 801e460:	460e      	mov	r6, r1
 801e462:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e466:	f7ff fa59 	bl	801d91c <_malloc_r>
 801e46a:	4604      	mov	r4, r0
 801e46c:	b140      	cbz	r0, 801e480 <__sfmoreglue+0x28>
 801e46e:	2100      	movs	r1, #0
 801e470:	e9c0 1600 	strd	r1, r6, [r0]
 801e474:	300c      	adds	r0, #12
 801e476:	60a0      	str	r0, [r4, #8]
 801e478:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e47c:	f7fb fd94 	bl	8019fa8 <memset>
 801e480:	4620      	mov	r0, r4
 801e482:	bd70      	pop	{r4, r5, r6, pc}

0801e484 <__sfp_lock_acquire>:
 801e484:	4801      	ldr	r0, [pc, #4]	; (801e48c <__sfp_lock_acquire+0x8>)
 801e486:	f000 b8b3 	b.w	801e5f0 <__retarget_lock_acquire_recursive>
 801e48a:	bf00      	nop
 801e48c:	20000a09 	.word	0x20000a09

0801e490 <__sfp_lock_release>:
 801e490:	4801      	ldr	r0, [pc, #4]	; (801e498 <__sfp_lock_release+0x8>)
 801e492:	f000 b8ae 	b.w	801e5f2 <__retarget_lock_release_recursive>
 801e496:	bf00      	nop
 801e498:	20000a09 	.word	0x20000a09

0801e49c <__sinit_lock_acquire>:
 801e49c:	4801      	ldr	r0, [pc, #4]	; (801e4a4 <__sinit_lock_acquire+0x8>)
 801e49e:	f000 b8a7 	b.w	801e5f0 <__retarget_lock_acquire_recursive>
 801e4a2:	bf00      	nop
 801e4a4:	20000a0a 	.word	0x20000a0a

0801e4a8 <__sinit_lock_release>:
 801e4a8:	4801      	ldr	r0, [pc, #4]	; (801e4b0 <__sinit_lock_release+0x8>)
 801e4aa:	f000 b8a2 	b.w	801e5f2 <__retarget_lock_release_recursive>
 801e4ae:	bf00      	nop
 801e4b0:	20000a0a 	.word	0x20000a0a

0801e4b4 <__sinit>:
 801e4b4:	b510      	push	{r4, lr}
 801e4b6:	4604      	mov	r4, r0
 801e4b8:	f7ff fff0 	bl	801e49c <__sinit_lock_acquire>
 801e4bc:	69a3      	ldr	r3, [r4, #24]
 801e4be:	b11b      	cbz	r3, 801e4c8 <__sinit+0x14>
 801e4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4c4:	f7ff bff0 	b.w	801e4a8 <__sinit_lock_release>
 801e4c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e4cc:	6523      	str	r3, [r4, #80]	; 0x50
 801e4ce:	4b13      	ldr	r3, [pc, #76]	; (801e51c <__sinit+0x68>)
 801e4d0:	4a13      	ldr	r2, [pc, #76]	; (801e520 <__sinit+0x6c>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801e4d6:	42a3      	cmp	r3, r4
 801e4d8:	bf04      	itt	eq
 801e4da:	2301      	moveq	r3, #1
 801e4dc:	61a3      	streq	r3, [r4, #24]
 801e4de:	4620      	mov	r0, r4
 801e4e0:	f000 f820 	bl	801e524 <__sfp>
 801e4e4:	6060      	str	r0, [r4, #4]
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	f000 f81c 	bl	801e524 <__sfp>
 801e4ec:	60a0      	str	r0, [r4, #8]
 801e4ee:	4620      	mov	r0, r4
 801e4f0:	f000 f818 	bl	801e524 <__sfp>
 801e4f4:	2200      	movs	r2, #0
 801e4f6:	60e0      	str	r0, [r4, #12]
 801e4f8:	2104      	movs	r1, #4
 801e4fa:	6860      	ldr	r0, [r4, #4]
 801e4fc:	f7ff ff82 	bl	801e404 <std>
 801e500:	68a0      	ldr	r0, [r4, #8]
 801e502:	2201      	movs	r2, #1
 801e504:	2109      	movs	r1, #9
 801e506:	f7ff ff7d 	bl	801e404 <std>
 801e50a:	68e0      	ldr	r0, [r4, #12]
 801e50c:	2202      	movs	r2, #2
 801e50e:	2112      	movs	r1, #18
 801e510:	f7ff ff78 	bl	801e404 <std>
 801e514:	2301      	movs	r3, #1
 801e516:	61a3      	str	r3, [r4, #24]
 801e518:	e7d2      	b.n	801e4c0 <__sinit+0xc>
 801e51a:	bf00      	nop
 801e51c:	080528a4 	.word	0x080528a4
 801e520:	0801e44d 	.word	0x0801e44d

0801e524 <__sfp>:
 801e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e526:	4607      	mov	r7, r0
 801e528:	f7ff ffac 	bl	801e484 <__sfp_lock_acquire>
 801e52c:	4b1e      	ldr	r3, [pc, #120]	; (801e5a8 <__sfp+0x84>)
 801e52e:	681e      	ldr	r6, [r3, #0]
 801e530:	69b3      	ldr	r3, [r6, #24]
 801e532:	b913      	cbnz	r3, 801e53a <__sfp+0x16>
 801e534:	4630      	mov	r0, r6
 801e536:	f7ff ffbd 	bl	801e4b4 <__sinit>
 801e53a:	3648      	adds	r6, #72	; 0x48
 801e53c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e540:	3b01      	subs	r3, #1
 801e542:	d503      	bpl.n	801e54c <__sfp+0x28>
 801e544:	6833      	ldr	r3, [r6, #0]
 801e546:	b30b      	cbz	r3, 801e58c <__sfp+0x68>
 801e548:	6836      	ldr	r6, [r6, #0]
 801e54a:	e7f7      	b.n	801e53c <__sfp+0x18>
 801e54c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e550:	b9d5      	cbnz	r5, 801e588 <__sfp+0x64>
 801e552:	4b16      	ldr	r3, [pc, #88]	; (801e5ac <__sfp+0x88>)
 801e554:	60e3      	str	r3, [r4, #12]
 801e556:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e55a:	6665      	str	r5, [r4, #100]	; 0x64
 801e55c:	f000 f847 	bl	801e5ee <__retarget_lock_init_recursive>
 801e560:	f7ff ff96 	bl	801e490 <__sfp_lock_release>
 801e564:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e568:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e56c:	6025      	str	r5, [r4, #0]
 801e56e:	61a5      	str	r5, [r4, #24]
 801e570:	2208      	movs	r2, #8
 801e572:	4629      	mov	r1, r5
 801e574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e578:	f7fb fd16 	bl	8019fa8 <memset>
 801e57c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e584:	4620      	mov	r0, r4
 801e586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e588:	3468      	adds	r4, #104	; 0x68
 801e58a:	e7d9      	b.n	801e540 <__sfp+0x1c>
 801e58c:	2104      	movs	r1, #4
 801e58e:	4638      	mov	r0, r7
 801e590:	f7ff ff62 	bl	801e458 <__sfmoreglue>
 801e594:	4604      	mov	r4, r0
 801e596:	6030      	str	r0, [r6, #0]
 801e598:	2800      	cmp	r0, #0
 801e59a:	d1d5      	bne.n	801e548 <__sfp+0x24>
 801e59c:	f7ff ff78 	bl	801e490 <__sfp_lock_release>
 801e5a0:	230c      	movs	r3, #12
 801e5a2:	603b      	str	r3, [r7, #0]
 801e5a4:	e7ee      	b.n	801e584 <__sfp+0x60>
 801e5a6:	bf00      	nop
 801e5a8:	080528a4 	.word	0x080528a4
 801e5ac:	ffff0001 	.word	0xffff0001

0801e5b0 <_fwalk_reent>:
 801e5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5b4:	4606      	mov	r6, r0
 801e5b6:	4688      	mov	r8, r1
 801e5b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e5bc:	2700      	movs	r7, #0
 801e5be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e5c2:	f1b9 0901 	subs.w	r9, r9, #1
 801e5c6:	d505      	bpl.n	801e5d4 <_fwalk_reent+0x24>
 801e5c8:	6824      	ldr	r4, [r4, #0]
 801e5ca:	2c00      	cmp	r4, #0
 801e5cc:	d1f7      	bne.n	801e5be <_fwalk_reent+0xe>
 801e5ce:	4638      	mov	r0, r7
 801e5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5d4:	89ab      	ldrh	r3, [r5, #12]
 801e5d6:	2b01      	cmp	r3, #1
 801e5d8:	d907      	bls.n	801e5ea <_fwalk_reent+0x3a>
 801e5da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e5de:	3301      	adds	r3, #1
 801e5e0:	d003      	beq.n	801e5ea <_fwalk_reent+0x3a>
 801e5e2:	4629      	mov	r1, r5
 801e5e4:	4630      	mov	r0, r6
 801e5e6:	47c0      	blx	r8
 801e5e8:	4307      	orrs	r7, r0
 801e5ea:	3568      	adds	r5, #104	; 0x68
 801e5ec:	e7e9      	b.n	801e5c2 <_fwalk_reent+0x12>

0801e5ee <__retarget_lock_init_recursive>:
 801e5ee:	4770      	bx	lr

0801e5f0 <__retarget_lock_acquire_recursive>:
 801e5f0:	4770      	bx	lr

0801e5f2 <__retarget_lock_release_recursive>:
 801e5f2:	4770      	bx	lr

0801e5f4 <__swhatbuf_r>:
 801e5f4:	b570      	push	{r4, r5, r6, lr}
 801e5f6:	460e      	mov	r6, r1
 801e5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5fc:	2900      	cmp	r1, #0
 801e5fe:	b096      	sub	sp, #88	; 0x58
 801e600:	4614      	mov	r4, r2
 801e602:	461d      	mov	r5, r3
 801e604:	da08      	bge.n	801e618 <__swhatbuf_r+0x24>
 801e606:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e60a:	2200      	movs	r2, #0
 801e60c:	602a      	str	r2, [r5, #0]
 801e60e:	061a      	lsls	r2, r3, #24
 801e610:	d410      	bmi.n	801e634 <__swhatbuf_r+0x40>
 801e612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e616:	e00e      	b.n	801e636 <__swhatbuf_r+0x42>
 801e618:	466a      	mov	r2, sp
 801e61a:	f000 f903 	bl	801e824 <_fstat_r>
 801e61e:	2800      	cmp	r0, #0
 801e620:	dbf1      	blt.n	801e606 <__swhatbuf_r+0x12>
 801e622:	9a01      	ldr	r2, [sp, #4]
 801e624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e62c:	425a      	negs	r2, r3
 801e62e:	415a      	adcs	r2, r3
 801e630:	602a      	str	r2, [r5, #0]
 801e632:	e7ee      	b.n	801e612 <__swhatbuf_r+0x1e>
 801e634:	2340      	movs	r3, #64	; 0x40
 801e636:	2000      	movs	r0, #0
 801e638:	6023      	str	r3, [r4, #0]
 801e63a:	b016      	add	sp, #88	; 0x58
 801e63c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e640 <__smakebuf_r>:
 801e640:	898b      	ldrh	r3, [r1, #12]
 801e642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e644:	079d      	lsls	r5, r3, #30
 801e646:	4606      	mov	r6, r0
 801e648:	460c      	mov	r4, r1
 801e64a:	d507      	bpl.n	801e65c <__smakebuf_r+0x1c>
 801e64c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e650:	6023      	str	r3, [r4, #0]
 801e652:	6123      	str	r3, [r4, #16]
 801e654:	2301      	movs	r3, #1
 801e656:	6163      	str	r3, [r4, #20]
 801e658:	b002      	add	sp, #8
 801e65a:	bd70      	pop	{r4, r5, r6, pc}
 801e65c:	ab01      	add	r3, sp, #4
 801e65e:	466a      	mov	r2, sp
 801e660:	f7ff ffc8 	bl	801e5f4 <__swhatbuf_r>
 801e664:	9900      	ldr	r1, [sp, #0]
 801e666:	4605      	mov	r5, r0
 801e668:	4630      	mov	r0, r6
 801e66a:	f7ff f957 	bl	801d91c <_malloc_r>
 801e66e:	b948      	cbnz	r0, 801e684 <__smakebuf_r+0x44>
 801e670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e674:	059a      	lsls	r2, r3, #22
 801e676:	d4ef      	bmi.n	801e658 <__smakebuf_r+0x18>
 801e678:	f023 0303 	bic.w	r3, r3, #3
 801e67c:	f043 0302 	orr.w	r3, r3, #2
 801e680:	81a3      	strh	r3, [r4, #12]
 801e682:	e7e3      	b.n	801e64c <__smakebuf_r+0xc>
 801e684:	4b0d      	ldr	r3, [pc, #52]	; (801e6bc <__smakebuf_r+0x7c>)
 801e686:	62b3      	str	r3, [r6, #40]	; 0x28
 801e688:	89a3      	ldrh	r3, [r4, #12]
 801e68a:	6020      	str	r0, [r4, #0]
 801e68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e690:	81a3      	strh	r3, [r4, #12]
 801e692:	9b00      	ldr	r3, [sp, #0]
 801e694:	6163      	str	r3, [r4, #20]
 801e696:	9b01      	ldr	r3, [sp, #4]
 801e698:	6120      	str	r0, [r4, #16]
 801e69a:	b15b      	cbz	r3, 801e6b4 <__smakebuf_r+0x74>
 801e69c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6a0:	4630      	mov	r0, r6
 801e6a2:	f000 f8d1 	bl	801e848 <_isatty_r>
 801e6a6:	b128      	cbz	r0, 801e6b4 <__smakebuf_r+0x74>
 801e6a8:	89a3      	ldrh	r3, [r4, #12]
 801e6aa:	f023 0303 	bic.w	r3, r3, #3
 801e6ae:	f043 0301 	orr.w	r3, r3, #1
 801e6b2:	81a3      	strh	r3, [r4, #12]
 801e6b4:	89a0      	ldrh	r0, [r4, #12]
 801e6b6:	4305      	orrs	r5, r0
 801e6b8:	81a5      	strh	r5, [r4, #12]
 801e6ba:	e7cd      	b.n	801e658 <__smakebuf_r+0x18>
 801e6bc:	0801e44d 	.word	0x0801e44d

0801e6c0 <_malloc_usable_size_r>:
 801e6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e6c4:	1f18      	subs	r0, r3, #4
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	bfbc      	itt	lt
 801e6ca:	580b      	ldrlt	r3, [r1, r0]
 801e6cc:	18c0      	addlt	r0, r0, r3
 801e6ce:	4770      	bx	lr

0801e6d0 <_raise_r>:
 801e6d0:	291f      	cmp	r1, #31
 801e6d2:	b538      	push	{r3, r4, r5, lr}
 801e6d4:	4604      	mov	r4, r0
 801e6d6:	460d      	mov	r5, r1
 801e6d8:	d904      	bls.n	801e6e4 <_raise_r+0x14>
 801e6da:	2316      	movs	r3, #22
 801e6dc:	6003      	str	r3, [r0, #0]
 801e6de:	f04f 30ff 	mov.w	r0, #4294967295
 801e6e2:	bd38      	pop	{r3, r4, r5, pc}
 801e6e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e6e6:	b112      	cbz	r2, 801e6ee <_raise_r+0x1e>
 801e6e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e6ec:	b94b      	cbnz	r3, 801e702 <_raise_r+0x32>
 801e6ee:	4620      	mov	r0, r4
 801e6f0:	f000 f830 	bl	801e754 <_getpid_r>
 801e6f4:	462a      	mov	r2, r5
 801e6f6:	4601      	mov	r1, r0
 801e6f8:	4620      	mov	r0, r4
 801e6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6fe:	f000 b817 	b.w	801e730 <_kill_r>
 801e702:	2b01      	cmp	r3, #1
 801e704:	d00a      	beq.n	801e71c <_raise_r+0x4c>
 801e706:	1c59      	adds	r1, r3, #1
 801e708:	d103      	bne.n	801e712 <_raise_r+0x42>
 801e70a:	2316      	movs	r3, #22
 801e70c:	6003      	str	r3, [r0, #0]
 801e70e:	2001      	movs	r0, #1
 801e710:	e7e7      	b.n	801e6e2 <_raise_r+0x12>
 801e712:	2400      	movs	r4, #0
 801e714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e718:	4628      	mov	r0, r5
 801e71a:	4798      	blx	r3
 801e71c:	2000      	movs	r0, #0
 801e71e:	e7e0      	b.n	801e6e2 <_raise_r+0x12>

0801e720 <raise>:
 801e720:	4b02      	ldr	r3, [pc, #8]	; (801e72c <raise+0xc>)
 801e722:	4601      	mov	r1, r0
 801e724:	6818      	ldr	r0, [r3, #0]
 801e726:	f7ff bfd3 	b.w	801e6d0 <_raise_r>
 801e72a:	bf00      	nop
 801e72c:	20000064 	.word	0x20000064

0801e730 <_kill_r>:
 801e730:	b538      	push	{r3, r4, r5, lr}
 801e732:	4d07      	ldr	r5, [pc, #28]	; (801e750 <_kill_r+0x20>)
 801e734:	2300      	movs	r3, #0
 801e736:	4604      	mov	r4, r0
 801e738:	4608      	mov	r0, r1
 801e73a:	4611      	mov	r1, r2
 801e73c:	602b      	str	r3, [r5, #0]
 801e73e:	f7e7 faa6 	bl	8005c8e <_kill>
 801e742:	1c43      	adds	r3, r0, #1
 801e744:	d102      	bne.n	801e74c <_kill_r+0x1c>
 801e746:	682b      	ldr	r3, [r5, #0]
 801e748:	b103      	cbz	r3, 801e74c <_kill_r+0x1c>
 801e74a:	6023      	str	r3, [r4, #0]
 801e74c:	bd38      	pop	{r3, r4, r5, pc}
 801e74e:	bf00      	nop
 801e750:	20000a04 	.word	0x20000a04

0801e754 <_getpid_r>:
 801e754:	f7e7 ba93 	b.w	8005c7e <_getpid>

0801e758 <__sread>:
 801e758:	b510      	push	{r4, lr}
 801e75a:	460c      	mov	r4, r1
 801e75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e760:	f000 f894 	bl	801e88c <_read_r>
 801e764:	2800      	cmp	r0, #0
 801e766:	bfab      	itete	ge
 801e768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e76a:	89a3      	ldrhlt	r3, [r4, #12]
 801e76c:	181b      	addge	r3, r3, r0
 801e76e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e772:	bfac      	ite	ge
 801e774:	6563      	strge	r3, [r4, #84]	; 0x54
 801e776:	81a3      	strhlt	r3, [r4, #12]
 801e778:	bd10      	pop	{r4, pc}

0801e77a <__swrite>:
 801e77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e77e:	461f      	mov	r7, r3
 801e780:	898b      	ldrh	r3, [r1, #12]
 801e782:	05db      	lsls	r3, r3, #23
 801e784:	4605      	mov	r5, r0
 801e786:	460c      	mov	r4, r1
 801e788:	4616      	mov	r6, r2
 801e78a:	d505      	bpl.n	801e798 <__swrite+0x1e>
 801e78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e790:	2302      	movs	r3, #2
 801e792:	2200      	movs	r2, #0
 801e794:	f000 f868 	bl	801e868 <_lseek_r>
 801e798:	89a3      	ldrh	r3, [r4, #12]
 801e79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e79e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e7a2:	81a3      	strh	r3, [r4, #12]
 801e7a4:	4632      	mov	r2, r6
 801e7a6:	463b      	mov	r3, r7
 801e7a8:	4628      	mov	r0, r5
 801e7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e7ae:	f000 b817 	b.w	801e7e0 <_write_r>

0801e7b2 <__sseek>:
 801e7b2:	b510      	push	{r4, lr}
 801e7b4:	460c      	mov	r4, r1
 801e7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7ba:	f000 f855 	bl	801e868 <_lseek_r>
 801e7be:	1c43      	adds	r3, r0, #1
 801e7c0:	89a3      	ldrh	r3, [r4, #12]
 801e7c2:	bf15      	itete	ne
 801e7c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e7c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e7ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e7ce:	81a3      	strheq	r3, [r4, #12]
 801e7d0:	bf18      	it	ne
 801e7d2:	81a3      	strhne	r3, [r4, #12]
 801e7d4:	bd10      	pop	{r4, pc}

0801e7d6 <__sclose>:
 801e7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7da:	f000 b813 	b.w	801e804 <_close_r>
	...

0801e7e0 <_write_r>:
 801e7e0:	b538      	push	{r3, r4, r5, lr}
 801e7e2:	4d07      	ldr	r5, [pc, #28]	; (801e800 <_write_r+0x20>)
 801e7e4:	4604      	mov	r4, r0
 801e7e6:	4608      	mov	r0, r1
 801e7e8:	4611      	mov	r1, r2
 801e7ea:	2200      	movs	r2, #0
 801e7ec:	602a      	str	r2, [r5, #0]
 801e7ee:	461a      	mov	r2, r3
 801e7f0:	f7e7 fa84 	bl	8005cfc <_write>
 801e7f4:	1c43      	adds	r3, r0, #1
 801e7f6:	d102      	bne.n	801e7fe <_write_r+0x1e>
 801e7f8:	682b      	ldr	r3, [r5, #0]
 801e7fa:	b103      	cbz	r3, 801e7fe <_write_r+0x1e>
 801e7fc:	6023      	str	r3, [r4, #0]
 801e7fe:	bd38      	pop	{r3, r4, r5, pc}
 801e800:	20000a04 	.word	0x20000a04

0801e804 <_close_r>:
 801e804:	b538      	push	{r3, r4, r5, lr}
 801e806:	4d06      	ldr	r5, [pc, #24]	; (801e820 <_close_r+0x1c>)
 801e808:	2300      	movs	r3, #0
 801e80a:	4604      	mov	r4, r0
 801e80c:	4608      	mov	r0, r1
 801e80e:	602b      	str	r3, [r5, #0]
 801e810:	f7e7 fa90 	bl	8005d34 <_close>
 801e814:	1c43      	adds	r3, r0, #1
 801e816:	d102      	bne.n	801e81e <_close_r+0x1a>
 801e818:	682b      	ldr	r3, [r5, #0]
 801e81a:	b103      	cbz	r3, 801e81e <_close_r+0x1a>
 801e81c:	6023      	str	r3, [r4, #0]
 801e81e:	bd38      	pop	{r3, r4, r5, pc}
 801e820:	20000a04 	.word	0x20000a04

0801e824 <_fstat_r>:
 801e824:	b538      	push	{r3, r4, r5, lr}
 801e826:	4d07      	ldr	r5, [pc, #28]	; (801e844 <_fstat_r+0x20>)
 801e828:	2300      	movs	r3, #0
 801e82a:	4604      	mov	r4, r0
 801e82c:	4608      	mov	r0, r1
 801e82e:	4611      	mov	r1, r2
 801e830:	602b      	str	r3, [r5, #0]
 801e832:	f7e7 fa8b 	bl	8005d4c <_fstat>
 801e836:	1c43      	adds	r3, r0, #1
 801e838:	d102      	bne.n	801e840 <_fstat_r+0x1c>
 801e83a:	682b      	ldr	r3, [r5, #0]
 801e83c:	b103      	cbz	r3, 801e840 <_fstat_r+0x1c>
 801e83e:	6023      	str	r3, [r4, #0]
 801e840:	bd38      	pop	{r3, r4, r5, pc}
 801e842:	bf00      	nop
 801e844:	20000a04 	.word	0x20000a04

0801e848 <_isatty_r>:
 801e848:	b538      	push	{r3, r4, r5, lr}
 801e84a:	4d06      	ldr	r5, [pc, #24]	; (801e864 <_isatty_r+0x1c>)
 801e84c:	2300      	movs	r3, #0
 801e84e:	4604      	mov	r4, r0
 801e850:	4608      	mov	r0, r1
 801e852:	602b      	str	r3, [r5, #0]
 801e854:	f7e7 fa8a 	bl	8005d6c <_isatty>
 801e858:	1c43      	adds	r3, r0, #1
 801e85a:	d102      	bne.n	801e862 <_isatty_r+0x1a>
 801e85c:	682b      	ldr	r3, [r5, #0]
 801e85e:	b103      	cbz	r3, 801e862 <_isatty_r+0x1a>
 801e860:	6023      	str	r3, [r4, #0]
 801e862:	bd38      	pop	{r3, r4, r5, pc}
 801e864:	20000a04 	.word	0x20000a04

0801e868 <_lseek_r>:
 801e868:	b538      	push	{r3, r4, r5, lr}
 801e86a:	4d07      	ldr	r5, [pc, #28]	; (801e888 <_lseek_r+0x20>)
 801e86c:	4604      	mov	r4, r0
 801e86e:	4608      	mov	r0, r1
 801e870:	4611      	mov	r1, r2
 801e872:	2200      	movs	r2, #0
 801e874:	602a      	str	r2, [r5, #0]
 801e876:	461a      	mov	r2, r3
 801e878:	f7e7 fa83 	bl	8005d82 <_lseek>
 801e87c:	1c43      	adds	r3, r0, #1
 801e87e:	d102      	bne.n	801e886 <_lseek_r+0x1e>
 801e880:	682b      	ldr	r3, [r5, #0]
 801e882:	b103      	cbz	r3, 801e886 <_lseek_r+0x1e>
 801e884:	6023      	str	r3, [r4, #0]
 801e886:	bd38      	pop	{r3, r4, r5, pc}
 801e888:	20000a04 	.word	0x20000a04

0801e88c <_read_r>:
 801e88c:	b538      	push	{r3, r4, r5, lr}
 801e88e:	4d07      	ldr	r5, [pc, #28]	; (801e8ac <_read_r+0x20>)
 801e890:	4604      	mov	r4, r0
 801e892:	4608      	mov	r0, r1
 801e894:	4611      	mov	r1, r2
 801e896:	2200      	movs	r2, #0
 801e898:	602a      	str	r2, [r5, #0]
 801e89a:	461a      	mov	r2, r3
 801e89c:	f7e7 fa11 	bl	8005cc2 <_read>
 801e8a0:	1c43      	adds	r3, r0, #1
 801e8a2:	d102      	bne.n	801e8aa <_read_r+0x1e>
 801e8a4:	682b      	ldr	r3, [r5, #0]
 801e8a6:	b103      	cbz	r3, 801e8aa <_read_r+0x1e>
 801e8a8:	6023      	str	r3, [r4, #0]
 801e8aa:	bd38      	pop	{r3, r4, r5, pc}
 801e8ac:	20000a04 	.word	0x20000a04

0801e8b0 <memcmp>:
 801e8b0:	b510      	push	{r4, lr}
 801e8b2:	3901      	subs	r1, #1
 801e8b4:	4402      	add	r2, r0
 801e8b6:	4290      	cmp	r0, r2
 801e8b8:	d101      	bne.n	801e8be <memcmp+0xe>
 801e8ba:	2000      	movs	r0, #0
 801e8bc:	e005      	b.n	801e8ca <memcmp+0x1a>
 801e8be:	7803      	ldrb	r3, [r0, #0]
 801e8c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e8c4:	42a3      	cmp	r3, r4
 801e8c6:	d001      	beq.n	801e8cc <memcmp+0x1c>
 801e8c8:	1b18      	subs	r0, r3, r4
 801e8ca:	bd10      	pop	{r4, pc}
 801e8cc:	3001      	adds	r0, #1
 801e8ce:	e7f2      	b.n	801e8b6 <memcmp+0x6>

0801e8d0 <strcat>:
 801e8d0:	b510      	push	{r4, lr}
 801e8d2:	4602      	mov	r2, r0
 801e8d4:	7814      	ldrb	r4, [r2, #0]
 801e8d6:	4613      	mov	r3, r2
 801e8d8:	3201      	adds	r2, #1
 801e8da:	2c00      	cmp	r4, #0
 801e8dc:	d1fa      	bne.n	801e8d4 <strcat+0x4>
 801e8de:	3b01      	subs	r3, #1
 801e8e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e8e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e8e8:	2a00      	cmp	r2, #0
 801e8ea:	d1f9      	bne.n	801e8e0 <strcat+0x10>
 801e8ec:	bd10      	pop	{r4, pc}
	...

0801e8f0 <floor>:
 801e8f0:	ec51 0b10 	vmov	r0, r1, d0
 801e8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e8fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e900:	2e13      	cmp	r6, #19
 801e902:	ee10 5a10 	vmov	r5, s0
 801e906:	ee10 8a10 	vmov	r8, s0
 801e90a:	460c      	mov	r4, r1
 801e90c:	dc32      	bgt.n	801e974 <floor+0x84>
 801e90e:	2e00      	cmp	r6, #0
 801e910:	da14      	bge.n	801e93c <floor+0x4c>
 801e912:	a333      	add	r3, pc, #204	; (adr r3, 801e9e0 <floor+0xf0>)
 801e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e918:	f7fa fc38 	bl	801918c <__adddf3>
 801e91c:	2200      	movs	r2, #0
 801e91e:	2300      	movs	r3, #0
 801e920:	f7fb f87a 	bl	8019a18 <__aeabi_dcmpgt>
 801e924:	b138      	cbz	r0, 801e936 <floor+0x46>
 801e926:	2c00      	cmp	r4, #0
 801e928:	da57      	bge.n	801e9da <floor+0xea>
 801e92a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e92e:	431d      	orrs	r5, r3
 801e930:	d001      	beq.n	801e936 <floor+0x46>
 801e932:	4c2d      	ldr	r4, [pc, #180]	; (801e9e8 <floor+0xf8>)
 801e934:	2500      	movs	r5, #0
 801e936:	4621      	mov	r1, r4
 801e938:	4628      	mov	r0, r5
 801e93a:	e025      	b.n	801e988 <floor+0x98>
 801e93c:	4f2b      	ldr	r7, [pc, #172]	; (801e9ec <floor+0xfc>)
 801e93e:	4137      	asrs	r7, r6
 801e940:	ea01 0307 	and.w	r3, r1, r7
 801e944:	4303      	orrs	r3, r0
 801e946:	d01f      	beq.n	801e988 <floor+0x98>
 801e948:	a325      	add	r3, pc, #148	; (adr r3, 801e9e0 <floor+0xf0>)
 801e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e94e:	f7fa fc1d 	bl	801918c <__adddf3>
 801e952:	2200      	movs	r2, #0
 801e954:	2300      	movs	r3, #0
 801e956:	f7fb f85f 	bl	8019a18 <__aeabi_dcmpgt>
 801e95a:	2800      	cmp	r0, #0
 801e95c:	d0eb      	beq.n	801e936 <floor+0x46>
 801e95e:	2c00      	cmp	r4, #0
 801e960:	bfbe      	ittt	lt
 801e962:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e966:	fa43 f606 	asrlt.w	r6, r3, r6
 801e96a:	19a4      	addlt	r4, r4, r6
 801e96c:	ea24 0407 	bic.w	r4, r4, r7
 801e970:	2500      	movs	r5, #0
 801e972:	e7e0      	b.n	801e936 <floor+0x46>
 801e974:	2e33      	cmp	r6, #51	; 0x33
 801e976:	dd0b      	ble.n	801e990 <floor+0xa0>
 801e978:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e97c:	d104      	bne.n	801e988 <floor+0x98>
 801e97e:	ee10 2a10 	vmov	r2, s0
 801e982:	460b      	mov	r3, r1
 801e984:	f7fa fc02 	bl	801918c <__adddf3>
 801e988:	ec41 0b10 	vmov	d0, r0, r1
 801e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e990:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e994:	f04f 33ff 	mov.w	r3, #4294967295
 801e998:	fa23 f707 	lsr.w	r7, r3, r7
 801e99c:	4207      	tst	r7, r0
 801e99e:	d0f3      	beq.n	801e988 <floor+0x98>
 801e9a0:	a30f      	add	r3, pc, #60	; (adr r3, 801e9e0 <floor+0xf0>)
 801e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9a6:	f7fa fbf1 	bl	801918c <__adddf3>
 801e9aa:	2200      	movs	r2, #0
 801e9ac:	2300      	movs	r3, #0
 801e9ae:	f7fb f833 	bl	8019a18 <__aeabi_dcmpgt>
 801e9b2:	2800      	cmp	r0, #0
 801e9b4:	d0bf      	beq.n	801e936 <floor+0x46>
 801e9b6:	2c00      	cmp	r4, #0
 801e9b8:	da02      	bge.n	801e9c0 <floor+0xd0>
 801e9ba:	2e14      	cmp	r6, #20
 801e9bc:	d103      	bne.n	801e9c6 <floor+0xd6>
 801e9be:	3401      	adds	r4, #1
 801e9c0:	ea25 0507 	bic.w	r5, r5, r7
 801e9c4:	e7b7      	b.n	801e936 <floor+0x46>
 801e9c6:	2301      	movs	r3, #1
 801e9c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e9cc:	fa03 f606 	lsl.w	r6, r3, r6
 801e9d0:	4435      	add	r5, r6
 801e9d2:	4545      	cmp	r5, r8
 801e9d4:	bf38      	it	cc
 801e9d6:	18e4      	addcc	r4, r4, r3
 801e9d8:	e7f2      	b.n	801e9c0 <floor+0xd0>
 801e9da:	2500      	movs	r5, #0
 801e9dc:	462c      	mov	r4, r5
 801e9de:	e7aa      	b.n	801e936 <floor+0x46>
 801e9e0:	8800759c 	.word	0x8800759c
 801e9e4:	7e37e43c 	.word	0x7e37e43c
 801e9e8:	bff00000 	.word	0xbff00000
 801e9ec:	000fffff 	.word	0x000fffff

0801e9f0 <pow>:
 801e9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9f2:	ed2d 8b02 	vpush	{d8}
 801e9f6:	eeb0 8a40 	vmov.f32	s16, s0
 801e9fa:	eef0 8a60 	vmov.f32	s17, s1
 801e9fe:	ec55 4b11 	vmov	r4, r5, d1
 801ea02:	f000 f865 	bl	801ead0 <__ieee754_pow>
 801ea06:	4622      	mov	r2, r4
 801ea08:	462b      	mov	r3, r5
 801ea0a:	4620      	mov	r0, r4
 801ea0c:	4629      	mov	r1, r5
 801ea0e:	ec57 6b10 	vmov	r6, r7, d0
 801ea12:	f7fb f80b 	bl	8019a2c <__aeabi_dcmpun>
 801ea16:	2800      	cmp	r0, #0
 801ea18:	d13b      	bne.n	801ea92 <pow+0xa2>
 801ea1a:	ec51 0b18 	vmov	r0, r1, d8
 801ea1e:	2200      	movs	r2, #0
 801ea20:	2300      	movs	r3, #0
 801ea22:	f7fa ffd1 	bl	80199c8 <__aeabi_dcmpeq>
 801ea26:	b1b8      	cbz	r0, 801ea58 <pow+0x68>
 801ea28:	2200      	movs	r2, #0
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	4629      	mov	r1, r5
 801ea30:	f7fa ffca 	bl	80199c8 <__aeabi_dcmpeq>
 801ea34:	2800      	cmp	r0, #0
 801ea36:	d146      	bne.n	801eac6 <pow+0xd6>
 801ea38:	ec45 4b10 	vmov	d0, r4, r5
 801ea3c:	f000 fe61 	bl	801f702 <finite>
 801ea40:	b338      	cbz	r0, 801ea92 <pow+0xa2>
 801ea42:	2200      	movs	r2, #0
 801ea44:	2300      	movs	r3, #0
 801ea46:	4620      	mov	r0, r4
 801ea48:	4629      	mov	r1, r5
 801ea4a:	f7fa ffc7 	bl	80199dc <__aeabi_dcmplt>
 801ea4e:	b300      	cbz	r0, 801ea92 <pow+0xa2>
 801ea50:	f7fb fa80 	bl	8019f54 <__errno>
 801ea54:	2322      	movs	r3, #34	; 0x22
 801ea56:	e01b      	b.n	801ea90 <pow+0xa0>
 801ea58:	ec47 6b10 	vmov	d0, r6, r7
 801ea5c:	f000 fe51 	bl	801f702 <finite>
 801ea60:	b9e0      	cbnz	r0, 801ea9c <pow+0xac>
 801ea62:	eeb0 0a48 	vmov.f32	s0, s16
 801ea66:	eef0 0a68 	vmov.f32	s1, s17
 801ea6a:	f000 fe4a 	bl	801f702 <finite>
 801ea6e:	b1a8      	cbz	r0, 801ea9c <pow+0xac>
 801ea70:	ec45 4b10 	vmov	d0, r4, r5
 801ea74:	f000 fe45 	bl	801f702 <finite>
 801ea78:	b180      	cbz	r0, 801ea9c <pow+0xac>
 801ea7a:	4632      	mov	r2, r6
 801ea7c:	463b      	mov	r3, r7
 801ea7e:	4630      	mov	r0, r6
 801ea80:	4639      	mov	r1, r7
 801ea82:	f7fa ffd3 	bl	8019a2c <__aeabi_dcmpun>
 801ea86:	2800      	cmp	r0, #0
 801ea88:	d0e2      	beq.n	801ea50 <pow+0x60>
 801ea8a:	f7fb fa63 	bl	8019f54 <__errno>
 801ea8e:	2321      	movs	r3, #33	; 0x21
 801ea90:	6003      	str	r3, [r0, #0]
 801ea92:	ecbd 8b02 	vpop	{d8}
 801ea96:	ec47 6b10 	vmov	d0, r6, r7
 801ea9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea9c:	2200      	movs	r2, #0
 801ea9e:	2300      	movs	r3, #0
 801eaa0:	4630      	mov	r0, r6
 801eaa2:	4639      	mov	r1, r7
 801eaa4:	f7fa ff90 	bl	80199c8 <__aeabi_dcmpeq>
 801eaa8:	2800      	cmp	r0, #0
 801eaaa:	d0f2      	beq.n	801ea92 <pow+0xa2>
 801eaac:	eeb0 0a48 	vmov.f32	s0, s16
 801eab0:	eef0 0a68 	vmov.f32	s1, s17
 801eab4:	f000 fe25 	bl	801f702 <finite>
 801eab8:	2800      	cmp	r0, #0
 801eaba:	d0ea      	beq.n	801ea92 <pow+0xa2>
 801eabc:	ec45 4b10 	vmov	d0, r4, r5
 801eac0:	f000 fe1f 	bl	801f702 <finite>
 801eac4:	e7c3      	b.n	801ea4e <pow+0x5e>
 801eac6:	4f01      	ldr	r7, [pc, #4]	; (801eacc <pow+0xdc>)
 801eac8:	2600      	movs	r6, #0
 801eaca:	e7e2      	b.n	801ea92 <pow+0xa2>
 801eacc:	3ff00000 	.word	0x3ff00000

0801ead0 <__ieee754_pow>:
 801ead0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ead4:	ed2d 8b06 	vpush	{d8-d10}
 801ead8:	b089      	sub	sp, #36	; 0x24
 801eada:	ed8d 1b00 	vstr	d1, [sp]
 801eade:	e9dd 2900 	ldrd	r2, r9, [sp]
 801eae2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801eae6:	ea58 0102 	orrs.w	r1, r8, r2
 801eaea:	ec57 6b10 	vmov	r6, r7, d0
 801eaee:	d115      	bne.n	801eb1c <__ieee754_pow+0x4c>
 801eaf0:	19b3      	adds	r3, r6, r6
 801eaf2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801eaf6:	4152      	adcs	r2, r2
 801eaf8:	4299      	cmp	r1, r3
 801eafa:	4b89      	ldr	r3, [pc, #548]	; (801ed20 <__ieee754_pow+0x250>)
 801eafc:	4193      	sbcs	r3, r2
 801eafe:	f080 84d2 	bcs.w	801f4a6 <__ieee754_pow+0x9d6>
 801eb02:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eb06:	4630      	mov	r0, r6
 801eb08:	4639      	mov	r1, r7
 801eb0a:	f7fa fb3f 	bl	801918c <__adddf3>
 801eb0e:	ec41 0b10 	vmov	d0, r0, r1
 801eb12:	b009      	add	sp, #36	; 0x24
 801eb14:	ecbd 8b06 	vpop	{d8-d10}
 801eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb1c:	4b81      	ldr	r3, [pc, #516]	; (801ed24 <__ieee754_pow+0x254>)
 801eb1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801eb22:	429c      	cmp	r4, r3
 801eb24:	ee10 aa10 	vmov	sl, s0
 801eb28:	463d      	mov	r5, r7
 801eb2a:	dc06      	bgt.n	801eb3a <__ieee754_pow+0x6a>
 801eb2c:	d101      	bne.n	801eb32 <__ieee754_pow+0x62>
 801eb2e:	2e00      	cmp	r6, #0
 801eb30:	d1e7      	bne.n	801eb02 <__ieee754_pow+0x32>
 801eb32:	4598      	cmp	r8, r3
 801eb34:	dc01      	bgt.n	801eb3a <__ieee754_pow+0x6a>
 801eb36:	d10f      	bne.n	801eb58 <__ieee754_pow+0x88>
 801eb38:	b172      	cbz	r2, 801eb58 <__ieee754_pow+0x88>
 801eb3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801eb3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801eb42:	ea55 050a 	orrs.w	r5, r5, sl
 801eb46:	d1dc      	bne.n	801eb02 <__ieee754_pow+0x32>
 801eb48:	e9dd 3200 	ldrd	r3, r2, [sp]
 801eb4c:	18db      	adds	r3, r3, r3
 801eb4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801eb52:	4152      	adcs	r2, r2
 801eb54:	429d      	cmp	r5, r3
 801eb56:	e7d0      	b.n	801eafa <__ieee754_pow+0x2a>
 801eb58:	2d00      	cmp	r5, #0
 801eb5a:	da3b      	bge.n	801ebd4 <__ieee754_pow+0x104>
 801eb5c:	4b72      	ldr	r3, [pc, #456]	; (801ed28 <__ieee754_pow+0x258>)
 801eb5e:	4598      	cmp	r8, r3
 801eb60:	dc51      	bgt.n	801ec06 <__ieee754_pow+0x136>
 801eb62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801eb66:	4598      	cmp	r8, r3
 801eb68:	f340 84ac 	ble.w	801f4c4 <__ieee754_pow+0x9f4>
 801eb6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801eb70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801eb74:	2b14      	cmp	r3, #20
 801eb76:	dd0f      	ble.n	801eb98 <__ieee754_pow+0xc8>
 801eb78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801eb7c:	fa22 f103 	lsr.w	r1, r2, r3
 801eb80:	fa01 f303 	lsl.w	r3, r1, r3
 801eb84:	4293      	cmp	r3, r2
 801eb86:	f040 849d 	bne.w	801f4c4 <__ieee754_pow+0x9f4>
 801eb8a:	f001 0101 	and.w	r1, r1, #1
 801eb8e:	f1c1 0302 	rsb	r3, r1, #2
 801eb92:	9304      	str	r3, [sp, #16]
 801eb94:	b182      	cbz	r2, 801ebb8 <__ieee754_pow+0xe8>
 801eb96:	e05f      	b.n	801ec58 <__ieee754_pow+0x188>
 801eb98:	2a00      	cmp	r2, #0
 801eb9a:	d15b      	bne.n	801ec54 <__ieee754_pow+0x184>
 801eb9c:	f1c3 0314 	rsb	r3, r3, #20
 801eba0:	fa48 f103 	asr.w	r1, r8, r3
 801eba4:	fa01 f303 	lsl.w	r3, r1, r3
 801eba8:	4543      	cmp	r3, r8
 801ebaa:	f040 8488 	bne.w	801f4be <__ieee754_pow+0x9ee>
 801ebae:	f001 0101 	and.w	r1, r1, #1
 801ebb2:	f1c1 0302 	rsb	r3, r1, #2
 801ebb6:	9304      	str	r3, [sp, #16]
 801ebb8:	4b5c      	ldr	r3, [pc, #368]	; (801ed2c <__ieee754_pow+0x25c>)
 801ebba:	4598      	cmp	r8, r3
 801ebbc:	d132      	bne.n	801ec24 <__ieee754_pow+0x154>
 801ebbe:	f1b9 0f00 	cmp.w	r9, #0
 801ebc2:	f280 8478 	bge.w	801f4b6 <__ieee754_pow+0x9e6>
 801ebc6:	4959      	ldr	r1, [pc, #356]	; (801ed2c <__ieee754_pow+0x25c>)
 801ebc8:	4632      	mov	r2, r6
 801ebca:	463b      	mov	r3, r7
 801ebcc:	2000      	movs	r0, #0
 801ebce:	f7fa fdbd 	bl	801974c <__aeabi_ddiv>
 801ebd2:	e79c      	b.n	801eb0e <__ieee754_pow+0x3e>
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	9304      	str	r3, [sp, #16]
 801ebd8:	2a00      	cmp	r2, #0
 801ebda:	d13d      	bne.n	801ec58 <__ieee754_pow+0x188>
 801ebdc:	4b51      	ldr	r3, [pc, #324]	; (801ed24 <__ieee754_pow+0x254>)
 801ebde:	4598      	cmp	r8, r3
 801ebe0:	d1ea      	bne.n	801ebb8 <__ieee754_pow+0xe8>
 801ebe2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ebe6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ebea:	ea53 030a 	orrs.w	r3, r3, sl
 801ebee:	f000 845a 	beq.w	801f4a6 <__ieee754_pow+0x9d6>
 801ebf2:	4b4f      	ldr	r3, [pc, #316]	; (801ed30 <__ieee754_pow+0x260>)
 801ebf4:	429c      	cmp	r4, r3
 801ebf6:	dd08      	ble.n	801ec0a <__ieee754_pow+0x13a>
 801ebf8:	f1b9 0f00 	cmp.w	r9, #0
 801ebfc:	f2c0 8457 	blt.w	801f4ae <__ieee754_pow+0x9de>
 801ec00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec04:	e783      	b.n	801eb0e <__ieee754_pow+0x3e>
 801ec06:	2302      	movs	r3, #2
 801ec08:	e7e5      	b.n	801ebd6 <__ieee754_pow+0x106>
 801ec0a:	f1b9 0f00 	cmp.w	r9, #0
 801ec0e:	f04f 0000 	mov.w	r0, #0
 801ec12:	f04f 0100 	mov.w	r1, #0
 801ec16:	f6bf af7a 	bge.w	801eb0e <__ieee754_pow+0x3e>
 801ec1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ec1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ec22:	e774      	b.n	801eb0e <__ieee754_pow+0x3e>
 801ec24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ec28:	d106      	bne.n	801ec38 <__ieee754_pow+0x168>
 801ec2a:	4632      	mov	r2, r6
 801ec2c:	463b      	mov	r3, r7
 801ec2e:	4630      	mov	r0, r6
 801ec30:	4639      	mov	r1, r7
 801ec32:	f7fa fc61 	bl	80194f8 <__aeabi_dmul>
 801ec36:	e76a      	b.n	801eb0e <__ieee754_pow+0x3e>
 801ec38:	4b3e      	ldr	r3, [pc, #248]	; (801ed34 <__ieee754_pow+0x264>)
 801ec3a:	4599      	cmp	r9, r3
 801ec3c:	d10c      	bne.n	801ec58 <__ieee754_pow+0x188>
 801ec3e:	2d00      	cmp	r5, #0
 801ec40:	db0a      	blt.n	801ec58 <__ieee754_pow+0x188>
 801ec42:	ec47 6b10 	vmov	d0, r6, r7
 801ec46:	b009      	add	sp, #36	; 0x24
 801ec48:	ecbd 8b06 	vpop	{d8-d10}
 801ec4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec50:	f000 bc6c 	b.w	801f52c <__ieee754_sqrt>
 801ec54:	2300      	movs	r3, #0
 801ec56:	9304      	str	r3, [sp, #16]
 801ec58:	ec47 6b10 	vmov	d0, r6, r7
 801ec5c:	f000 fd48 	bl	801f6f0 <fabs>
 801ec60:	ec51 0b10 	vmov	r0, r1, d0
 801ec64:	f1ba 0f00 	cmp.w	sl, #0
 801ec68:	d129      	bne.n	801ecbe <__ieee754_pow+0x1ee>
 801ec6a:	b124      	cbz	r4, 801ec76 <__ieee754_pow+0x1a6>
 801ec6c:	4b2f      	ldr	r3, [pc, #188]	; (801ed2c <__ieee754_pow+0x25c>)
 801ec6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ec72:	429a      	cmp	r2, r3
 801ec74:	d123      	bne.n	801ecbe <__ieee754_pow+0x1ee>
 801ec76:	f1b9 0f00 	cmp.w	r9, #0
 801ec7a:	da05      	bge.n	801ec88 <__ieee754_pow+0x1b8>
 801ec7c:	4602      	mov	r2, r0
 801ec7e:	460b      	mov	r3, r1
 801ec80:	2000      	movs	r0, #0
 801ec82:	492a      	ldr	r1, [pc, #168]	; (801ed2c <__ieee754_pow+0x25c>)
 801ec84:	f7fa fd62 	bl	801974c <__aeabi_ddiv>
 801ec88:	2d00      	cmp	r5, #0
 801ec8a:	f6bf af40 	bge.w	801eb0e <__ieee754_pow+0x3e>
 801ec8e:	9b04      	ldr	r3, [sp, #16]
 801ec90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ec94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ec98:	4323      	orrs	r3, r4
 801ec9a:	d108      	bne.n	801ecae <__ieee754_pow+0x1de>
 801ec9c:	4602      	mov	r2, r0
 801ec9e:	460b      	mov	r3, r1
 801eca0:	4610      	mov	r0, r2
 801eca2:	4619      	mov	r1, r3
 801eca4:	f7fa fa70 	bl	8019188 <__aeabi_dsub>
 801eca8:	4602      	mov	r2, r0
 801ecaa:	460b      	mov	r3, r1
 801ecac:	e78f      	b.n	801ebce <__ieee754_pow+0xfe>
 801ecae:	9b04      	ldr	r3, [sp, #16]
 801ecb0:	2b01      	cmp	r3, #1
 801ecb2:	f47f af2c 	bne.w	801eb0e <__ieee754_pow+0x3e>
 801ecb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ecba:	4619      	mov	r1, r3
 801ecbc:	e727      	b.n	801eb0e <__ieee754_pow+0x3e>
 801ecbe:	0feb      	lsrs	r3, r5, #31
 801ecc0:	3b01      	subs	r3, #1
 801ecc2:	9306      	str	r3, [sp, #24]
 801ecc4:	9a06      	ldr	r2, [sp, #24]
 801ecc6:	9b04      	ldr	r3, [sp, #16]
 801ecc8:	4313      	orrs	r3, r2
 801ecca:	d102      	bne.n	801ecd2 <__ieee754_pow+0x202>
 801eccc:	4632      	mov	r2, r6
 801ecce:	463b      	mov	r3, r7
 801ecd0:	e7e6      	b.n	801eca0 <__ieee754_pow+0x1d0>
 801ecd2:	4b19      	ldr	r3, [pc, #100]	; (801ed38 <__ieee754_pow+0x268>)
 801ecd4:	4598      	cmp	r8, r3
 801ecd6:	f340 80fb 	ble.w	801eed0 <__ieee754_pow+0x400>
 801ecda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ecde:	4598      	cmp	r8, r3
 801ece0:	4b13      	ldr	r3, [pc, #76]	; (801ed30 <__ieee754_pow+0x260>)
 801ece2:	dd0c      	ble.n	801ecfe <__ieee754_pow+0x22e>
 801ece4:	429c      	cmp	r4, r3
 801ece6:	dc0f      	bgt.n	801ed08 <__ieee754_pow+0x238>
 801ece8:	f1b9 0f00 	cmp.w	r9, #0
 801ecec:	da0f      	bge.n	801ed0e <__ieee754_pow+0x23e>
 801ecee:	2000      	movs	r0, #0
 801ecf0:	b009      	add	sp, #36	; 0x24
 801ecf2:	ecbd 8b06 	vpop	{d8-d10}
 801ecf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecfa:	f000 bcf0 	b.w	801f6de <__math_oflow>
 801ecfe:	429c      	cmp	r4, r3
 801ed00:	dbf2      	blt.n	801ece8 <__ieee754_pow+0x218>
 801ed02:	4b0a      	ldr	r3, [pc, #40]	; (801ed2c <__ieee754_pow+0x25c>)
 801ed04:	429c      	cmp	r4, r3
 801ed06:	dd19      	ble.n	801ed3c <__ieee754_pow+0x26c>
 801ed08:	f1b9 0f00 	cmp.w	r9, #0
 801ed0c:	dcef      	bgt.n	801ecee <__ieee754_pow+0x21e>
 801ed0e:	2000      	movs	r0, #0
 801ed10:	b009      	add	sp, #36	; 0x24
 801ed12:	ecbd 8b06 	vpop	{d8-d10}
 801ed16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed1a:	f000 bcd7 	b.w	801f6cc <__math_uflow>
 801ed1e:	bf00      	nop
 801ed20:	fff00000 	.word	0xfff00000
 801ed24:	7ff00000 	.word	0x7ff00000
 801ed28:	433fffff 	.word	0x433fffff
 801ed2c:	3ff00000 	.word	0x3ff00000
 801ed30:	3fefffff 	.word	0x3fefffff
 801ed34:	3fe00000 	.word	0x3fe00000
 801ed38:	41e00000 	.word	0x41e00000
 801ed3c:	4b60      	ldr	r3, [pc, #384]	; (801eec0 <__ieee754_pow+0x3f0>)
 801ed3e:	2200      	movs	r2, #0
 801ed40:	f7fa fa22 	bl	8019188 <__aeabi_dsub>
 801ed44:	a354      	add	r3, pc, #336	; (adr r3, 801ee98 <__ieee754_pow+0x3c8>)
 801ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed4a:	4604      	mov	r4, r0
 801ed4c:	460d      	mov	r5, r1
 801ed4e:	f7fa fbd3 	bl	80194f8 <__aeabi_dmul>
 801ed52:	a353      	add	r3, pc, #332	; (adr r3, 801eea0 <__ieee754_pow+0x3d0>)
 801ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed58:	4606      	mov	r6, r0
 801ed5a:	460f      	mov	r7, r1
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	4629      	mov	r1, r5
 801ed60:	f7fa fbca 	bl	80194f8 <__aeabi_dmul>
 801ed64:	4b57      	ldr	r3, [pc, #348]	; (801eec4 <__ieee754_pow+0x3f4>)
 801ed66:	4682      	mov	sl, r0
 801ed68:	468b      	mov	fp, r1
 801ed6a:	2200      	movs	r2, #0
 801ed6c:	4620      	mov	r0, r4
 801ed6e:	4629      	mov	r1, r5
 801ed70:	f7fa fbc2 	bl	80194f8 <__aeabi_dmul>
 801ed74:	4602      	mov	r2, r0
 801ed76:	460b      	mov	r3, r1
 801ed78:	a14b      	add	r1, pc, #300	; (adr r1, 801eea8 <__ieee754_pow+0x3d8>)
 801ed7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ed7e:	f7fa fa03 	bl	8019188 <__aeabi_dsub>
 801ed82:	4622      	mov	r2, r4
 801ed84:	462b      	mov	r3, r5
 801ed86:	f7fa fbb7 	bl	80194f8 <__aeabi_dmul>
 801ed8a:	4602      	mov	r2, r0
 801ed8c:	460b      	mov	r3, r1
 801ed8e:	2000      	movs	r0, #0
 801ed90:	494d      	ldr	r1, [pc, #308]	; (801eec8 <__ieee754_pow+0x3f8>)
 801ed92:	f7fa f9f9 	bl	8019188 <__aeabi_dsub>
 801ed96:	4622      	mov	r2, r4
 801ed98:	4680      	mov	r8, r0
 801ed9a:	4689      	mov	r9, r1
 801ed9c:	462b      	mov	r3, r5
 801ed9e:	4620      	mov	r0, r4
 801eda0:	4629      	mov	r1, r5
 801eda2:	f7fa fba9 	bl	80194f8 <__aeabi_dmul>
 801eda6:	4602      	mov	r2, r0
 801eda8:	460b      	mov	r3, r1
 801edaa:	4640      	mov	r0, r8
 801edac:	4649      	mov	r1, r9
 801edae:	f7fa fba3 	bl	80194f8 <__aeabi_dmul>
 801edb2:	a33f      	add	r3, pc, #252	; (adr r3, 801eeb0 <__ieee754_pow+0x3e0>)
 801edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edb8:	f7fa fb9e 	bl	80194f8 <__aeabi_dmul>
 801edbc:	4602      	mov	r2, r0
 801edbe:	460b      	mov	r3, r1
 801edc0:	4650      	mov	r0, sl
 801edc2:	4659      	mov	r1, fp
 801edc4:	f7fa f9e0 	bl	8019188 <__aeabi_dsub>
 801edc8:	4602      	mov	r2, r0
 801edca:	460b      	mov	r3, r1
 801edcc:	4680      	mov	r8, r0
 801edce:	4689      	mov	r9, r1
 801edd0:	4630      	mov	r0, r6
 801edd2:	4639      	mov	r1, r7
 801edd4:	f7fa f9da 	bl	801918c <__adddf3>
 801edd8:	2000      	movs	r0, #0
 801edda:	4632      	mov	r2, r6
 801eddc:	463b      	mov	r3, r7
 801edde:	4604      	mov	r4, r0
 801ede0:	460d      	mov	r5, r1
 801ede2:	f7fa f9d1 	bl	8019188 <__aeabi_dsub>
 801ede6:	4602      	mov	r2, r0
 801ede8:	460b      	mov	r3, r1
 801edea:	4640      	mov	r0, r8
 801edec:	4649      	mov	r1, r9
 801edee:	f7fa f9cb 	bl	8019188 <__aeabi_dsub>
 801edf2:	9b04      	ldr	r3, [sp, #16]
 801edf4:	9a06      	ldr	r2, [sp, #24]
 801edf6:	3b01      	subs	r3, #1
 801edf8:	4313      	orrs	r3, r2
 801edfa:	4682      	mov	sl, r0
 801edfc:	468b      	mov	fp, r1
 801edfe:	f040 81e7 	bne.w	801f1d0 <__ieee754_pow+0x700>
 801ee02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801eeb8 <__ieee754_pow+0x3e8>
 801ee06:	eeb0 8a47 	vmov.f32	s16, s14
 801ee0a:	eef0 8a67 	vmov.f32	s17, s15
 801ee0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ee12:	2600      	movs	r6, #0
 801ee14:	4632      	mov	r2, r6
 801ee16:	463b      	mov	r3, r7
 801ee18:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ee1c:	f7fa f9b4 	bl	8019188 <__aeabi_dsub>
 801ee20:	4622      	mov	r2, r4
 801ee22:	462b      	mov	r3, r5
 801ee24:	f7fa fb68 	bl	80194f8 <__aeabi_dmul>
 801ee28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee2c:	4680      	mov	r8, r0
 801ee2e:	4689      	mov	r9, r1
 801ee30:	4650      	mov	r0, sl
 801ee32:	4659      	mov	r1, fp
 801ee34:	f7fa fb60 	bl	80194f8 <__aeabi_dmul>
 801ee38:	4602      	mov	r2, r0
 801ee3a:	460b      	mov	r3, r1
 801ee3c:	4640      	mov	r0, r8
 801ee3e:	4649      	mov	r1, r9
 801ee40:	f7fa f9a4 	bl	801918c <__adddf3>
 801ee44:	4632      	mov	r2, r6
 801ee46:	463b      	mov	r3, r7
 801ee48:	4680      	mov	r8, r0
 801ee4a:	4689      	mov	r9, r1
 801ee4c:	4620      	mov	r0, r4
 801ee4e:	4629      	mov	r1, r5
 801ee50:	f7fa fb52 	bl	80194f8 <__aeabi_dmul>
 801ee54:	460b      	mov	r3, r1
 801ee56:	4604      	mov	r4, r0
 801ee58:	460d      	mov	r5, r1
 801ee5a:	4602      	mov	r2, r0
 801ee5c:	4649      	mov	r1, r9
 801ee5e:	4640      	mov	r0, r8
 801ee60:	f7fa f994 	bl	801918c <__adddf3>
 801ee64:	4b19      	ldr	r3, [pc, #100]	; (801eecc <__ieee754_pow+0x3fc>)
 801ee66:	4299      	cmp	r1, r3
 801ee68:	ec45 4b19 	vmov	d9, r4, r5
 801ee6c:	4606      	mov	r6, r0
 801ee6e:	460f      	mov	r7, r1
 801ee70:	468b      	mov	fp, r1
 801ee72:	f340 82f1 	ble.w	801f458 <__ieee754_pow+0x988>
 801ee76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ee7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ee7e:	4303      	orrs	r3, r0
 801ee80:	f000 81e4 	beq.w	801f24c <__ieee754_pow+0x77c>
 801ee84:	ec51 0b18 	vmov	r0, r1, d8
 801ee88:	2200      	movs	r2, #0
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	f7fa fda6 	bl	80199dc <__aeabi_dcmplt>
 801ee90:	3800      	subs	r0, #0
 801ee92:	bf18      	it	ne
 801ee94:	2001      	movne	r0, #1
 801ee96:	e72b      	b.n	801ecf0 <__ieee754_pow+0x220>
 801ee98:	60000000 	.word	0x60000000
 801ee9c:	3ff71547 	.word	0x3ff71547
 801eea0:	f85ddf44 	.word	0xf85ddf44
 801eea4:	3e54ae0b 	.word	0x3e54ae0b
 801eea8:	55555555 	.word	0x55555555
 801eeac:	3fd55555 	.word	0x3fd55555
 801eeb0:	652b82fe 	.word	0x652b82fe
 801eeb4:	3ff71547 	.word	0x3ff71547
 801eeb8:	00000000 	.word	0x00000000
 801eebc:	bff00000 	.word	0xbff00000
 801eec0:	3ff00000 	.word	0x3ff00000
 801eec4:	3fd00000 	.word	0x3fd00000
 801eec8:	3fe00000 	.word	0x3fe00000
 801eecc:	408fffff 	.word	0x408fffff
 801eed0:	4bd5      	ldr	r3, [pc, #852]	; (801f228 <__ieee754_pow+0x758>)
 801eed2:	402b      	ands	r3, r5
 801eed4:	2200      	movs	r2, #0
 801eed6:	b92b      	cbnz	r3, 801eee4 <__ieee754_pow+0x414>
 801eed8:	4bd4      	ldr	r3, [pc, #848]	; (801f22c <__ieee754_pow+0x75c>)
 801eeda:	f7fa fb0d 	bl	80194f8 <__aeabi_dmul>
 801eede:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801eee2:	460c      	mov	r4, r1
 801eee4:	1523      	asrs	r3, r4, #20
 801eee6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801eeea:	4413      	add	r3, r2
 801eeec:	9305      	str	r3, [sp, #20]
 801eeee:	4bd0      	ldr	r3, [pc, #832]	; (801f230 <__ieee754_pow+0x760>)
 801eef0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801eef4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801eef8:	429c      	cmp	r4, r3
 801eefa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801eefe:	dd08      	ble.n	801ef12 <__ieee754_pow+0x442>
 801ef00:	4bcc      	ldr	r3, [pc, #816]	; (801f234 <__ieee754_pow+0x764>)
 801ef02:	429c      	cmp	r4, r3
 801ef04:	f340 8162 	ble.w	801f1cc <__ieee754_pow+0x6fc>
 801ef08:	9b05      	ldr	r3, [sp, #20]
 801ef0a:	3301      	adds	r3, #1
 801ef0c:	9305      	str	r3, [sp, #20]
 801ef0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ef12:	2400      	movs	r4, #0
 801ef14:	00e3      	lsls	r3, r4, #3
 801ef16:	9307      	str	r3, [sp, #28]
 801ef18:	4bc7      	ldr	r3, [pc, #796]	; (801f238 <__ieee754_pow+0x768>)
 801ef1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ef1e:	ed93 7b00 	vldr	d7, [r3]
 801ef22:	4629      	mov	r1, r5
 801ef24:	ec53 2b17 	vmov	r2, r3, d7
 801ef28:	eeb0 9a47 	vmov.f32	s18, s14
 801ef2c:	eef0 9a67 	vmov.f32	s19, s15
 801ef30:	4682      	mov	sl, r0
 801ef32:	f7fa f929 	bl	8019188 <__aeabi_dsub>
 801ef36:	4652      	mov	r2, sl
 801ef38:	4606      	mov	r6, r0
 801ef3a:	460f      	mov	r7, r1
 801ef3c:	462b      	mov	r3, r5
 801ef3e:	ec51 0b19 	vmov	r0, r1, d9
 801ef42:	f7fa f923 	bl	801918c <__adddf3>
 801ef46:	4602      	mov	r2, r0
 801ef48:	460b      	mov	r3, r1
 801ef4a:	2000      	movs	r0, #0
 801ef4c:	49bb      	ldr	r1, [pc, #748]	; (801f23c <__ieee754_pow+0x76c>)
 801ef4e:	f7fa fbfd 	bl	801974c <__aeabi_ddiv>
 801ef52:	ec41 0b1a 	vmov	d10, r0, r1
 801ef56:	4602      	mov	r2, r0
 801ef58:	460b      	mov	r3, r1
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	4639      	mov	r1, r7
 801ef5e:	f7fa facb 	bl	80194f8 <__aeabi_dmul>
 801ef62:	2300      	movs	r3, #0
 801ef64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef68:	9302      	str	r3, [sp, #8]
 801ef6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ef6e:	46ab      	mov	fp, r5
 801ef70:	106d      	asrs	r5, r5, #1
 801ef72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ef76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ef7a:	ec41 0b18 	vmov	d8, r0, r1
 801ef7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801ef82:	2200      	movs	r2, #0
 801ef84:	4640      	mov	r0, r8
 801ef86:	4649      	mov	r1, r9
 801ef88:	4614      	mov	r4, r2
 801ef8a:	461d      	mov	r5, r3
 801ef8c:	f7fa fab4 	bl	80194f8 <__aeabi_dmul>
 801ef90:	4602      	mov	r2, r0
 801ef92:	460b      	mov	r3, r1
 801ef94:	4630      	mov	r0, r6
 801ef96:	4639      	mov	r1, r7
 801ef98:	f7fa f8f6 	bl	8019188 <__aeabi_dsub>
 801ef9c:	ec53 2b19 	vmov	r2, r3, d9
 801efa0:	4606      	mov	r6, r0
 801efa2:	460f      	mov	r7, r1
 801efa4:	4620      	mov	r0, r4
 801efa6:	4629      	mov	r1, r5
 801efa8:	f7fa f8ee 	bl	8019188 <__aeabi_dsub>
 801efac:	4602      	mov	r2, r0
 801efae:	460b      	mov	r3, r1
 801efb0:	4650      	mov	r0, sl
 801efb2:	4659      	mov	r1, fp
 801efb4:	f7fa f8e8 	bl	8019188 <__aeabi_dsub>
 801efb8:	4642      	mov	r2, r8
 801efba:	464b      	mov	r3, r9
 801efbc:	f7fa fa9c 	bl	80194f8 <__aeabi_dmul>
 801efc0:	4602      	mov	r2, r0
 801efc2:	460b      	mov	r3, r1
 801efc4:	4630      	mov	r0, r6
 801efc6:	4639      	mov	r1, r7
 801efc8:	f7fa f8de 	bl	8019188 <__aeabi_dsub>
 801efcc:	ec53 2b1a 	vmov	r2, r3, d10
 801efd0:	f7fa fa92 	bl	80194f8 <__aeabi_dmul>
 801efd4:	ec53 2b18 	vmov	r2, r3, d8
 801efd8:	ec41 0b19 	vmov	d9, r0, r1
 801efdc:	ec51 0b18 	vmov	r0, r1, d8
 801efe0:	f7fa fa8a 	bl	80194f8 <__aeabi_dmul>
 801efe4:	a37c      	add	r3, pc, #496	; (adr r3, 801f1d8 <__ieee754_pow+0x708>)
 801efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efea:	4604      	mov	r4, r0
 801efec:	460d      	mov	r5, r1
 801efee:	f7fa fa83 	bl	80194f8 <__aeabi_dmul>
 801eff2:	a37b      	add	r3, pc, #492	; (adr r3, 801f1e0 <__ieee754_pow+0x710>)
 801eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eff8:	f7fa f8c8 	bl	801918c <__adddf3>
 801effc:	4622      	mov	r2, r4
 801effe:	462b      	mov	r3, r5
 801f000:	f7fa fa7a 	bl	80194f8 <__aeabi_dmul>
 801f004:	a378      	add	r3, pc, #480	; (adr r3, 801f1e8 <__ieee754_pow+0x718>)
 801f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f00a:	f7fa f8bf 	bl	801918c <__adddf3>
 801f00e:	4622      	mov	r2, r4
 801f010:	462b      	mov	r3, r5
 801f012:	f7fa fa71 	bl	80194f8 <__aeabi_dmul>
 801f016:	a376      	add	r3, pc, #472	; (adr r3, 801f1f0 <__ieee754_pow+0x720>)
 801f018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f01c:	f7fa f8b6 	bl	801918c <__adddf3>
 801f020:	4622      	mov	r2, r4
 801f022:	462b      	mov	r3, r5
 801f024:	f7fa fa68 	bl	80194f8 <__aeabi_dmul>
 801f028:	a373      	add	r3, pc, #460	; (adr r3, 801f1f8 <__ieee754_pow+0x728>)
 801f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f02e:	f7fa f8ad 	bl	801918c <__adddf3>
 801f032:	4622      	mov	r2, r4
 801f034:	462b      	mov	r3, r5
 801f036:	f7fa fa5f 	bl	80194f8 <__aeabi_dmul>
 801f03a:	a371      	add	r3, pc, #452	; (adr r3, 801f200 <__ieee754_pow+0x730>)
 801f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f040:	f7fa f8a4 	bl	801918c <__adddf3>
 801f044:	4622      	mov	r2, r4
 801f046:	4606      	mov	r6, r0
 801f048:	460f      	mov	r7, r1
 801f04a:	462b      	mov	r3, r5
 801f04c:	4620      	mov	r0, r4
 801f04e:	4629      	mov	r1, r5
 801f050:	f7fa fa52 	bl	80194f8 <__aeabi_dmul>
 801f054:	4602      	mov	r2, r0
 801f056:	460b      	mov	r3, r1
 801f058:	4630      	mov	r0, r6
 801f05a:	4639      	mov	r1, r7
 801f05c:	f7fa fa4c 	bl	80194f8 <__aeabi_dmul>
 801f060:	4642      	mov	r2, r8
 801f062:	4604      	mov	r4, r0
 801f064:	460d      	mov	r5, r1
 801f066:	464b      	mov	r3, r9
 801f068:	ec51 0b18 	vmov	r0, r1, d8
 801f06c:	f7fa f88e 	bl	801918c <__adddf3>
 801f070:	ec53 2b19 	vmov	r2, r3, d9
 801f074:	f7fa fa40 	bl	80194f8 <__aeabi_dmul>
 801f078:	4622      	mov	r2, r4
 801f07a:	462b      	mov	r3, r5
 801f07c:	f7fa f886 	bl	801918c <__adddf3>
 801f080:	4642      	mov	r2, r8
 801f082:	4682      	mov	sl, r0
 801f084:	468b      	mov	fp, r1
 801f086:	464b      	mov	r3, r9
 801f088:	4640      	mov	r0, r8
 801f08a:	4649      	mov	r1, r9
 801f08c:	f7fa fa34 	bl	80194f8 <__aeabi_dmul>
 801f090:	4b6b      	ldr	r3, [pc, #428]	; (801f240 <__ieee754_pow+0x770>)
 801f092:	2200      	movs	r2, #0
 801f094:	4606      	mov	r6, r0
 801f096:	460f      	mov	r7, r1
 801f098:	f7fa f878 	bl	801918c <__adddf3>
 801f09c:	4652      	mov	r2, sl
 801f09e:	465b      	mov	r3, fp
 801f0a0:	f7fa f874 	bl	801918c <__adddf3>
 801f0a4:	2000      	movs	r0, #0
 801f0a6:	4604      	mov	r4, r0
 801f0a8:	460d      	mov	r5, r1
 801f0aa:	4602      	mov	r2, r0
 801f0ac:	460b      	mov	r3, r1
 801f0ae:	4640      	mov	r0, r8
 801f0b0:	4649      	mov	r1, r9
 801f0b2:	f7fa fa21 	bl	80194f8 <__aeabi_dmul>
 801f0b6:	4b62      	ldr	r3, [pc, #392]	; (801f240 <__ieee754_pow+0x770>)
 801f0b8:	4680      	mov	r8, r0
 801f0ba:	4689      	mov	r9, r1
 801f0bc:	2200      	movs	r2, #0
 801f0be:	4620      	mov	r0, r4
 801f0c0:	4629      	mov	r1, r5
 801f0c2:	f7fa f861 	bl	8019188 <__aeabi_dsub>
 801f0c6:	4632      	mov	r2, r6
 801f0c8:	463b      	mov	r3, r7
 801f0ca:	f7fa f85d 	bl	8019188 <__aeabi_dsub>
 801f0ce:	4602      	mov	r2, r0
 801f0d0:	460b      	mov	r3, r1
 801f0d2:	4650      	mov	r0, sl
 801f0d4:	4659      	mov	r1, fp
 801f0d6:	f7fa f857 	bl	8019188 <__aeabi_dsub>
 801f0da:	ec53 2b18 	vmov	r2, r3, d8
 801f0de:	f7fa fa0b 	bl	80194f8 <__aeabi_dmul>
 801f0e2:	4622      	mov	r2, r4
 801f0e4:	4606      	mov	r6, r0
 801f0e6:	460f      	mov	r7, r1
 801f0e8:	462b      	mov	r3, r5
 801f0ea:	ec51 0b19 	vmov	r0, r1, d9
 801f0ee:	f7fa fa03 	bl	80194f8 <__aeabi_dmul>
 801f0f2:	4602      	mov	r2, r0
 801f0f4:	460b      	mov	r3, r1
 801f0f6:	4630      	mov	r0, r6
 801f0f8:	4639      	mov	r1, r7
 801f0fa:	f7fa f847 	bl	801918c <__adddf3>
 801f0fe:	4606      	mov	r6, r0
 801f100:	460f      	mov	r7, r1
 801f102:	4602      	mov	r2, r0
 801f104:	460b      	mov	r3, r1
 801f106:	4640      	mov	r0, r8
 801f108:	4649      	mov	r1, r9
 801f10a:	f7fa f83f 	bl	801918c <__adddf3>
 801f10e:	a33e      	add	r3, pc, #248	; (adr r3, 801f208 <__ieee754_pow+0x738>)
 801f110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f114:	2000      	movs	r0, #0
 801f116:	4604      	mov	r4, r0
 801f118:	460d      	mov	r5, r1
 801f11a:	f7fa f9ed 	bl	80194f8 <__aeabi_dmul>
 801f11e:	4642      	mov	r2, r8
 801f120:	ec41 0b18 	vmov	d8, r0, r1
 801f124:	464b      	mov	r3, r9
 801f126:	4620      	mov	r0, r4
 801f128:	4629      	mov	r1, r5
 801f12a:	f7fa f82d 	bl	8019188 <__aeabi_dsub>
 801f12e:	4602      	mov	r2, r0
 801f130:	460b      	mov	r3, r1
 801f132:	4630      	mov	r0, r6
 801f134:	4639      	mov	r1, r7
 801f136:	f7fa f827 	bl	8019188 <__aeabi_dsub>
 801f13a:	a335      	add	r3, pc, #212	; (adr r3, 801f210 <__ieee754_pow+0x740>)
 801f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f140:	f7fa f9da 	bl	80194f8 <__aeabi_dmul>
 801f144:	a334      	add	r3, pc, #208	; (adr r3, 801f218 <__ieee754_pow+0x748>)
 801f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f14a:	4606      	mov	r6, r0
 801f14c:	460f      	mov	r7, r1
 801f14e:	4620      	mov	r0, r4
 801f150:	4629      	mov	r1, r5
 801f152:	f7fa f9d1 	bl	80194f8 <__aeabi_dmul>
 801f156:	4602      	mov	r2, r0
 801f158:	460b      	mov	r3, r1
 801f15a:	4630      	mov	r0, r6
 801f15c:	4639      	mov	r1, r7
 801f15e:	f7fa f815 	bl	801918c <__adddf3>
 801f162:	9a07      	ldr	r2, [sp, #28]
 801f164:	4b37      	ldr	r3, [pc, #220]	; (801f244 <__ieee754_pow+0x774>)
 801f166:	4413      	add	r3, r2
 801f168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f16c:	f7fa f80e 	bl	801918c <__adddf3>
 801f170:	4682      	mov	sl, r0
 801f172:	9805      	ldr	r0, [sp, #20]
 801f174:	468b      	mov	fp, r1
 801f176:	f7fa f955 	bl	8019424 <__aeabi_i2d>
 801f17a:	9a07      	ldr	r2, [sp, #28]
 801f17c:	4b32      	ldr	r3, [pc, #200]	; (801f248 <__ieee754_pow+0x778>)
 801f17e:	4413      	add	r3, r2
 801f180:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f184:	4606      	mov	r6, r0
 801f186:	460f      	mov	r7, r1
 801f188:	4652      	mov	r2, sl
 801f18a:	465b      	mov	r3, fp
 801f18c:	ec51 0b18 	vmov	r0, r1, d8
 801f190:	f7f9 fffc 	bl	801918c <__adddf3>
 801f194:	4642      	mov	r2, r8
 801f196:	464b      	mov	r3, r9
 801f198:	f7f9 fff8 	bl	801918c <__adddf3>
 801f19c:	4632      	mov	r2, r6
 801f19e:	463b      	mov	r3, r7
 801f1a0:	f7f9 fff4 	bl	801918c <__adddf3>
 801f1a4:	2000      	movs	r0, #0
 801f1a6:	4632      	mov	r2, r6
 801f1a8:	463b      	mov	r3, r7
 801f1aa:	4604      	mov	r4, r0
 801f1ac:	460d      	mov	r5, r1
 801f1ae:	f7f9 ffeb 	bl	8019188 <__aeabi_dsub>
 801f1b2:	4642      	mov	r2, r8
 801f1b4:	464b      	mov	r3, r9
 801f1b6:	f7f9 ffe7 	bl	8019188 <__aeabi_dsub>
 801f1ba:	ec53 2b18 	vmov	r2, r3, d8
 801f1be:	f7f9 ffe3 	bl	8019188 <__aeabi_dsub>
 801f1c2:	4602      	mov	r2, r0
 801f1c4:	460b      	mov	r3, r1
 801f1c6:	4650      	mov	r0, sl
 801f1c8:	4659      	mov	r1, fp
 801f1ca:	e610      	b.n	801edee <__ieee754_pow+0x31e>
 801f1cc:	2401      	movs	r4, #1
 801f1ce:	e6a1      	b.n	801ef14 <__ieee754_pow+0x444>
 801f1d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801f220 <__ieee754_pow+0x750>
 801f1d4:	e617      	b.n	801ee06 <__ieee754_pow+0x336>
 801f1d6:	bf00      	nop
 801f1d8:	4a454eef 	.word	0x4a454eef
 801f1dc:	3fca7e28 	.word	0x3fca7e28
 801f1e0:	93c9db65 	.word	0x93c9db65
 801f1e4:	3fcd864a 	.word	0x3fcd864a
 801f1e8:	a91d4101 	.word	0xa91d4101
 801f1ec:	3fd17460 	.word	0x3fd17460
 801f1f0:	518f264d 	.word	0x518f264d
 801f1f4:	3fd55555 	.word	0x3fd55555
 801f1f8:	db6fabff 	.word	0xdb6fabff
 801f1fc:	3fdb6db6 	.word	0x3fdb6db6
 801f200:	33333303 	.word	0x33333303
 801f204:	3fe33333 	.word	0x3fe33333
 801f208:	e0000000 	.word	0xe0000000
 801f20c:	3feec709 	.word	0x3feec709
 801f210:	dc3a03fd 	.word	0xdc3a03fd
 801f214:	3feec709 	.word	0x3feec709
 801f218:	145b01f5 	.word	0x145b01f5
 801f21c:	be3e2fe0 	.word	0xbe3e2fe0
 801f220:	00000000 	.word	0x00000000
 801f224:	3ff00000 	.word	0x3ff00000
 801f228:	7ff00000 	.word	0x7ff00000
 801f22c:	43400000 	.word	0x43400000
 801f230:	0003988e 	.word	0x0003988e
 801f234:	000bb679 	.word	0x000bb679
 801f238:	08052d50 	.word	0x08052d50
 801f23c:	3ff00000 	.word	0x3ff00000
 801f240:	40080000 	.word	0x40080000
 801f244:	08052d70 	.word	0x08052d70
 801f248:	08052d60 	.word	0x08052d60
 801f24c:	a3b5      	add	r3, pc, #724	; (adr r3, 801f524 <__ieee754_pow+0xa54>)
 801f24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f252:	4640      	mov	r0, r8
 801f254:	4649      	mov	r1, r9
 801f256:	f7f9 ff99 	bl	801918c <__adddf3>
 801f25a:	4622      	mov	r2, r4
 801f25c:	ec41 0b1a 	vmov	d10, r0, r1
 801f260:	462b      	mov	r3, r5
 801f262:	4630      	mov	r0, r6
 801f264:	4639      	mov	r1, r7
 801f266:	f7f9 ff8f 	bl	8019188 <__aeabi_dsub>
 801f26a:	4602      	mov	r2, r0
 801f26c:	460b      	mov	r3, r1
 801f26e:	ec51 0b1a 	vmov	r0, r1, d10
 801f272:	f7fa fbd1 	bl	8019a18 <__aeabi_dcmpgt>
 801f276:	2800      	cmp	r0, #0
 801f278:	f47f ae04 	bne.w	801ee84 <__ieee754_pow+0x3b4>
 801f27c:	4aa4      	ldr	r2, [pc, #656]	; (801f510 <__ieee754_pow+0xa40>)
 801f27e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f282:	4293      	cmp	r3, r2
 801f284:	f340 8108 	ble.w	801f498 <__ieee754_pow+0x9c8>
 801f288:	151b      	asrs	r3, r3, #20
 801f28a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f28e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f292:	fa4a f303 	asr.w	r3, sl, r3
 801f296:	445b      	add	r3, fp
 801f298:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f29c:	4e9d      	ldr	r6, [pc, #628]	; (801f514 <__ieee754_pow+0xa44>)
 801f29e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f2a2:	4116      	asrs	r6, r2
 801f2a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801f2a8:	2000      	movs	r0, #0
 801f2aa:	ea23 0106 	bic.w	r1, r3, r6
 801f2ae:	f1c2 0214 	rsb	r2, r2, #20
 801f2b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f2b6:	fa4a fa02 	asr.w	sl, sl, r2
 801f2ba:	f1bb 0f00 	cmp.w	fp, #0
 801f2be:	4602      	mov	r2, r0
 801f2c0:	460b      	mov	r3, r1
 801f2c2:	4620      	mov	r0, r4
 801f2c4:	4629      	mov	r1, r5
 801f2c6:	bfb8      	it	lt
 801f2c8:	f1ca 0a00 	rsblt	sl, sl, #0
 801f2cc:	f7f9 ff5c 	bl	8019188 <__aeabi_dsub>
 801f2d0:	ec41 0b19 	vmov	d9, r0, r1
 801f2d4:	4642      	mov	r2, r8
 801f2d6:	464b      	mov	r3, r9
 801f2d8:	ec51 0b19 	vmov	r0, r1, d9
 801f2dc:	f7f9 ff56 	bl	801918c <__adddf3>
 801f2e0:	a37b      	add	r3, pc, #492	; (adr r3, 801f4d0 <__ieee754_pow+0xa00>)
 801f2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2e6:	2000      	movs	r0, #0
 801f2e8:	4604      	mov	r4, r0
 801f2ea:	460d      	mov	r5, r1
 801f2ec:	f7fa f904 	bl	80194f8 <__aeabi_dmul>
 801f2f0:	ec53 2b19 	vmov	r2, r3, d9
 801f2f4:	4606      	mov	r6, r0
 801f2f6:	460f      	mov	r7, r1
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	4629      	mov	r1, r5
 801f2fc:	f7f9 ff44 	bl	8019188 <__aeabi_dsub>
 801f300:	4602      	mov	r2, r0
 801f302:	460b      	mov	r3, r1
 801f304:	4640      	mov	r0, r8
 801f306:	4649      	mov	r1, r9
 801f308:	f7f9 ff3e 	bl	8019188 <__aeabi_dsub>
 801f30c:	a372      	add	r3, pc, #456	; (adr r3, 801f4d8 <__ieee754_pow+0xa08>)
 801f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f312:	f7fa f8f1 	bl	80194f8 <__aeabi_dmul>
 801f316:	a372      	add	r3, pc, #456	; (adr r3, 801f4e0 <__ieee754_pow+0xa10>)
 801f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f31c:	4680      	mov	r8, r0
 801f31e:	4689      	mov	r9, r1
 801f320:	4620      	mov	r0, r4
 801f322:	4629      	mov	r1, r5
 801f324:	f7fa f8e8 	bl	80194f8 <__aeabi_dmul>
 801f328:	4602      	mov	r2, r0
 801f32a:	460b      	mov	r3, r1
 801f32c:	4640      	mov	r0, r8
 801f32e:	4649      	mov	r1, r9
 801f330:	f7f9 ff2c 	bl	801918c <__adddf3>
 801f334:	4604      	mov	r4, r0
 801f336:	460d      	mov	r5, r1
 801f338:	4602      	mov	r2, r0
 801f33a:	460b      	mov	r3, r1
 801f33c:	4630      	mov	r0, r6
 801f33e:	4639      	mov	r1, r7
 801f340:	f7f9 ff24 	bl	801918c <__adddf3>
 801f344:	4632      	mov	r2, r6
 801f346:	463b      	mov	r3, r7
 801f348:	4680      	mov	r8, r0
 801f34a:	4689      	mov	r9, r1
 801f34c:	f7f9 ff1c 	bl	8019188 <__aeabi_dsub>
 801f350:	4602      	mov	r2, r0
 801f352:	460b      	mov	r3, r1
 801f354:	4620      	mov	r0, r4
 801f356:	4629      	mov	r1, r5
 801f358:	f7f9 ff16 	bl	8019188 <__aeabi_dsub>
 801f35c:	4642      	mov	r2, r8
 801f35e:	4606      	mov	r6, r0
 801f360:	460f      	mov	r7, r1
 801f362:	464b      	mov	r3, r9
 801f364:	4640      	mov	r0, r8
 801f366:	4649      	mov	r1, r9
 801f368:	f7fa f8c6 	bl	80194f8 <__aeabi_dmul>
 801f36c:	a35e      	add	r3, pc, #376	; (adr r3, 801f4e8 <__ieee754_pow+0xa18>)
 801f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f372:	4604      	mov	r4, r0
 801f374:	460d      	mov	r5, r1
 801f376:	f7fa f8bf 	bl	80194f8 <__aeabi_dmul>
 801f37a:	a35d      	add	r3, pc, #372	; (adr r3, 801f4f0 <__ieee754_pow+0xa20>)
 801f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f380:	f7f9 ff02 	bl	8019188 <__aeabi_dsub>
 801f384:	4622      	mov	r2, r4
 801f386:	462b      	mov	r3, r5
 801f388:	f7fa f8b6 	bl	80194f8 <__aeabi_dmul>
 801f38c:	a35a      	add	r3, pc, #360	; (adr r3, 801f4f8 <__ieee754_pow+0xa28>)
 801f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f392:	f7f9 fefb 	bl	801918c <__adddf3>
 801f396:	4622      	mov	r2, r4
 801f398:	462b      	mov	r3, r5
 801f39a:	f7fa f8ad 	bl	80194f8 <__aeabi_dmul>
 801f39e:	a358      	add	r3, pc, #352	; (adr r3, 801f500 <__ieee754_pow+0xa30>)
 801f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3a4:	f7f9 fef0 	bl	8019188 <__aeabi_dsub>
 801f3a8:	4622      	mov	r2, r4
 801f3aa:	462b      	mov	r3, r5
 801f3ac:	f7fa f8a4 	bl	80194f8 <__aeabi_dmul>
 801f3b0:	a355      	add	r3, pc, #340	; (adr r3, 801f508 <__ieee754_pow+0xa38>)
 801f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3b6:	f7f9 fee9 	bl	801918c <__adddf3>
 801f3ba:	4622      	mov	r2, r4
 801f3bc:	462b      	mov	r3, r5
 801f3be:	f7fa f89b 	bl	80194f8 <__aeabi_dmul>
 801f3c2:	4602      	mov	r2, r0
 801f3c4:	460b      	mov	r3, r1
 801f3c6:	4640      	mov	r0, r8
 801f3c8:	4649      	mov	r1, r9
 801f3ca:	f7f9 fedd 	bl	8019188 <__aeabi_dsub>
 801f3ce:	4604      	mov	r4, r0
 801f3d0:	460d      	mov	r5, r1
 801f3d2:	4602      	mov	r2, r0
 801f3d4:	460b      	mov	r3, r1
 801f3d6:	4640      	mov	r0, r8
 801f3d8:	4649      	mov	r1, r9
 801f3da:	f7fa f88d 	bl	80194f8 <__aeabi_dmul>
 801f3de:	2200      	movs	r2, #0
 801f3e0:	ec41 0b19 	vmov	d9, r0, r1
 801f3e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f3e8:	4620      	mov	r0, r4
 801f3ea:	4629      	mov	r1, r5
 801f3ec:	f7f9 fecc 	bl	8019188 <__aeabi_dsub>
 801f3f0:	4602      	mov	r2, r0
 801f3f2:	460b      	mov	r3, r1
 801f3f4:	ec51 0b19 	vmov	r0, r1, d9
 801f3f8:	f7fa f9a8 	bl	801974c <__aeabi_ddiv>
 801f3fc:	4632      	mov	r2, r6
 801f3fe:	4604      	mov	r4, r0
 801f400:	460d      	mov	r5, r1
 801f402:	463b      	mov	r3, r7
 801f404:	4640      	mov	r0, r8
 801f406:	4649      	mov	r1, r9
 801f408:	f7fa f876 	bl	80194f8 <__aeabi_dmul>
 801f40c:	4632      	mov	r2, r6
 801f40e:	463b      	mov	r3, r7
 801f410:	f7f9 febc 	bl	801918c <__adddf3>
 801f414:	4602      	mov	r2, r0
 801f416:	460b      	mov	r3, r1
 801f418:	4620      	mov	r0, r4
 801f41a:	4629      	mov	r1, r5
 801f41c:	f7f9 feb4 	bl	8019188 <__aeabi_dsub>
 801f420:	4642      	mov	r2, r8
 801f422:	464b      	mov	r3, r9
 801f424:	f7f9 feb0 	bl	8019188 <__aeabi_dsub>
 801f428:	460b      	mov	r3, r1
 801f42a:	4602      	mov	r2, r0
 801f42c:	493a      	ldr	r1, [pc, #232]	; (801f518 <__ieee754_pow+0xa48>)
 801f42e:	2000      	movs	r0, #0
 801f430:	f7f9 feaa 	bl	8019188 <__aeabi_dsub>
 801f434:	ec41 0b10 	vmov	d0, r0, r1
 801f438:	ee10 3a90 	vmov	r3, s1
 801f43c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f444:	da2b      	bge.n	801f49e <__ieee754_pow+0x9ce>
 801f446:	4650      	mov	r0, sl
 801f448:	f000 f966 	bl	801f718 <scalbn>
 801f44c:	ec51 0b10 	vmov	r0, r1, d0
 801f450:	ec53 2b18 	vmov	r2, r3, d8
 801f454:	f7ff bbed 	b.w	801ec32 <__ieee754_pow+0x162>
 801f458:	4b30      	ldr	r3, [pc, #192]	; (801f51c <__ieee754_pow+0xa4c>)
 801f45a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801f45e:	429e      	cmp	r6, r3
 801f460:	f77f af0c 	ble.w	801f27c <__ieee754_pow+0x7ac>
 801f464:	4b2e      	ldr	r3, [pc, #184]	; (801f520 <__ieee754_pow+0xa50>)
 801f466:	440b      	add	r3, r1
 801f468:	4303      	orrs	r3, r0
 801f46a:	d009      	beq.n	801f480 <__ieee754_pow+0x9b0>
 801f46c:	ec51 0b18 	vmov	r0, r1, d8
 801f470:	2200      	movs	r2, #0
 801f472:	2300      	movs	r3, #0
 801f474:	f7fa fab2 	bl	80199dc <__aeabi_dcmplt>
 801f478:	3800      	subs	r0, #0
 801f47a:	bf18      	it	ne
 801f47c:	2001      	movne	r0, #1
 801f47e:	e447      	b.n	801ed10 <__ieee754_pow+0x240>
 801f480:	4622      	mov	r2, r4
 801f482:	462b      	mov	r3, r5
 801f484:	f7f9 fe80 	bl	8019188 <__aeabi_dsub>
 801f488:	4642      	mov	r2, r8
 801f48a:	464b      	mov	r3, r9
 801f48c:	f7fa faba 	bl	8019a04 <__aeabi_dcmpge>
 801f490:	2800      	cmp	r0, #0
 801f492:	f43f aef3 	beq.w	801f27c <__ieee754_pow+0x7ac>
 801f496:	e7e9      	b.n	801f46c <__ieee754_pow+0x99c>
 801f498:	f04f 0a00 	mov.w	sl, #0
 801f49c:	e71a      	b.n	801f2d4 <__ieee754_pow+0x804>
 801f49e:	ec51 0b10 	vmov	r0, r1, d0
 801f4a2:	4619      	mov	r1, r3
 801f4a4:	e7d4      	b.n	801f450 <__ieee754_pow+0x980>
 801f4a6:	491c      	ldr	r1, [pc, #112]	; (801f518 <__ieee754_pow+0xa48>)
 801f4a8:	2000      	movs	r0, #0
 801f4aa:	f7ff bb30 	b.w	801eb0e <__ieee754_pow+0x3e>
 801f4ae:	2000      	movs	r0, #0
 801f4b0:	2100      	movs	r1, #0
 801f4b2:	f7ff bb2c 	b.w	801eb0e <__ieee754_pow+0x3e>
 801f4b6:	4630      	mov	r0, r6
 801f4b8:	4639      	mov	r1, r7
 801f4ba:	f7ff bb28 	b.w	801eb0e <__ieee754_pow+0x3e>
 801f4be:	9204      	str	r2, [sp, #16]
 801f4c0:	f7ff bb7a 	b.w	801ebb8 <__ieee754_pow+0xe8>
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	f7ff bb64 	b.w	801eb92 <__ieee754_pow+0xc2>
 801f4ca:	bf00      	nop
 801f4cc:	f3af 8000 	nop.w
 801f4d0:	00000000 	.word	0x00000000
 801f4d4:	3fe62e43 	.word	0x3fe62e43
 801f4d8:	fefa39ef 	.word	0xfefa39ef
 801f4dc:	3fe62e42 	.word	0x3fe62e42
 801f4e0:	0ca86c39 	.word	0x0ca86c39
 801f4e4:	be205c61 	.word	0xbe205c61
 801f4e8:	72bea4d0 	.word	0x72bea4d0
 801f4ec:	3e663769 	.word	0x3e663769
 801f4f0:	c5d26bf1 	.word	0xc5d26bf1
 801f4f4:	3ebbbd41 	.word	0x3ebbbd41
 801f4f8:	af25de2c 	.word	0xaf25de2c
 801f4fc:	3f11566a 	.word	0x3f11566a
 801f500:	16bebd93 	.word	0x16bebd93
 801f504:	3f66c16c 	.word	0x3f66c16c
 801f508:	5555553e 	.word	0x5555553e
 801f50c:	3fc55555 	.word	0x3fc55555
 801f510:	3fe00000 	.word	0x3fe00000
 801f514:	000fffff 	.word	0x000fffff
 801f518:	3ff00000 	.word	0x3ff00000
 801f51c:	4090cbff 	.word	0x4090cbff
 801f520:	3f6f3400 	.word	0x3f6f3400
 801f524:	652b82fe 	.word	0x652b82fe
 801f528:	3c971547 	.word	0x3c971547

0801f52c <__ieee754_sqrt>:
 801f52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f530:	ec55 4b10 	vmov	r4, r5, d0
 801f534:	4e55      	ldr	r6, [pc, #340]	; (801f68c <__ieee754_sqrt+0x160>)
 801f536:	43ae      	bics	r6, r5
 801f538:	ee10 0a10 	vmov	r0, s0
 801f53c:	ee10 3a10 	vmov	r3, s0
 801f540:	462a      	mov	r2, r5
 801f542:	4629      	mov	r1, r5
 801f544:	d110      	bne.n	801f568 <__ieee754_sqrt+0x3c>
 801f546:	ee10 2a10 	vmov	r2, s0
 801f54a:	462b      	mov	r3, r5
 801f54c:	f7f9 ffd4 	bl	80194f8 <__aeabi_dmul>
 801f550:	4602      	mov	r2, r0
 801f552:	460b      	mov	r3, r1
 801f554:	4620      	mov	r0, r4
 801f556:	4629      	mov	r1, r5
 801f558:	f7f9 fe18 	bl	801918c <__adddf3>
 801f55c:	4604      	mov	r4, r0
 801f55e:	460d      	mov	r5, r1
 801f560:	ec45 4b10 	vmov	d0, r4, r5
 801f564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f568:	2d00      	cmp	r5, #0
 801f56a:	dc10      	bgt.n	801f58e <__ieee754_sqrt+0x62>
 801f56c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f570:	4330      	orrs	r0, r6
 801f572:	d0f5      	beq.n	801f560 <__ieee754_sqrt+0x34>
 801f574:	b15d      	cbz	r5, 801f58e <__ieee754_sqrt+0x62>
 801f576:	ee10 2a10 	vmov	r2, s0
 801f57a:	462b      	mov	r3, r5
 801f57c:	ee10 0a10 	vmov	r0, s0
 801f580:	f7f9 fe02 	bl	8019188 <__aeabi_dsub>
 801f584:	4602      	mov	r2, r0
 801f586:	460b      	mov	r3, r1
 801f588:	f7fa f8e0 	bl	801974c <__aeabi_ddiv>
 801f58c:	e7e6      	b.n	801f55c <__ieee754_sqrt+0x30>
 801f58e:	1512      	asrs	r2, r2, #20
 801f590:	d074      	beq.n	801f67c <__ieee754_sqrt+0x150>
 801f592:	07d4      	lsls	r4, r2, #31
 801f594:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801f598:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801f59c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801f5a0:	bf5e      	ittt	pl
 801f5a2:	0fda      	lsrpl	r2, r3, #31
 801f5a4:	005b      	lslpl	r3, r3, #1
 801f5a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801f5aa:	2400      	movs	r4, #0
 801f5ac:	0fda      	lsrs	r2, r3, #31
 801f5ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f5b2:	107f      	asrs	r7, r7, #1
 801f5b4:	005b      	lsls	r3, r3, #1
 801f5b6:	2516      	movs	r5, #22
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f5be:	1886      	adds	r6, r0, r2
 801f5c0:	428e      	cmp	r6, r1
 801f5c2:	bfde      	ittt	le
 801f5c4:	1b89      	suble	r1, r1, r6
 801f5c6:	18b0      	addle	r0, r6, r2
 801f5c8:	18a4      	addle	r4, r4, r2
 801f5ca:	0049      	lsls	r1, r1, #1
 801f5cc:	3d01      	subs	r5, #1
 801f5ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801f5d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801f5d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f5da:	d1f0      	bne.n	801f5be <__ieee754_sqrt+0x92>
 801f5dc:	462a      	mov	r2, r5
 801f5de:	f04f 0e20 	mov.w	lr, #32
 801f5e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f5e6:	4281      	cmp	r1, r0
 801f5e8:	eb06 0c05 	add.w	ip, r6, r5
 801f5ec:	dc02      	bgt.n	801f5f4 <__ieee754_sqrt+0xc8>
 801f5ee:	d113      	bne.n	801f618 <__ieee754_sqrt+0xec>
 801f5f0:	459c      	cmp	ip, r3
 801f5f2:	d811      	bhi.n	801f618 <__ieee754_sqrt+0xec>
 801f5f4:	f1bc 0f00 	cmp.w	ip, #0
 801f5f8:	eb0c 0506 	add.w	r5, ip, r6
 801f5fc:	da43      	bge.n	801f686 <__ieee754_sqrt+0x15a>
 801f5fe:	2d00      	cmp	r5, #0
 801f600:	db41      	blt.n	801f686 <__ieee754_sqrt+0x15a>
 801f602:	f100 0801 	add.w	r8, r0, #1
 801f606:	1a09      	subs	r1, r1, r0
 801f608:	459c      	cmp	ip, r3
 801f60a:	bf88      	it	hi
 801f60c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801f610:	eba3 030c 	sub.w	r3, r3, ip
 801f614:	4432      	add	r2, r6
 801f616:	4640      	mov	r0, r8
 801f618:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801f61c:	f1be 0e01 	subs.w	lr, lr, #1
 801f620:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801f624:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f628:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f62c:	d1db      	bne.n	801f5e6 <__ieee754_sqrt+0xba>
 801f62e:	430b      	orrs	r3, r1
 801f630:	d006      	beq.n	801f640 <__ieee754_sqrt+0x114>
 801f632:	1c50      	adds	r0, r2, #1
 801f634:	bf13      	iteet	ne
 801f636:	3201      	addne	r2, #1
 801f638:	3401      	addeq	r4, #1
 801f63a:	4672      	moveq	r2, lr
 801f63c:	f022 0201 	bicne.w	r2, r2, #1
 801f640:	1063      	asrs	r3, r4, #1
 801f642:	0852      	lsrs	r2, r2, #1
 801f644:	07e1      	lsls	r1, r4, #31
 801f646:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f64a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f64e:	bf48      	it	mi
 801f650:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801f654:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801f658:	4614      	mov	r4, r2
 801f65a:	e781      	b.n	801f560 <__ieee754_sqrt+0x34>
 801f65c:	0ad9      	lsrs	r1, r3, #11
 801f65e:	3815      	subs	r0, #21
 801f660:	055b      	lsls	r3, r3, #21
 801f662:	2900      	cmp	r1, #0
 801f664:	d0fa      	beq.n	801f65c <__ieee754_sqrt+0x130>
 801f666:	02cd      	lsls	r5, r1, #11
 801f668:	d50a      	bpl.n	801f680 <__ieee754_sqrt+0x154>
 801f66a:	f1c2 0420 	rsb	r4, r2, #32
 801f66e:	fa23 f404 	lsr.w	r4, r3, r4
 801f672:	1e55      	subs	r5, r2, #1
 801f674:	4093      	lsls	r3, r2
 801f676:	4321      	orrs	r1, r4
 801f678:	1b42      	subs	r2, r0, r5
 801f67a:	e78a      	b.n	801f592 <__ieee754_sqrt+0x66>
 801f67c:	4610      	mov	r0, r2
 801f67e:	e7f0      	b.n	801f662 <__ieee754_sqrt+0x136>
 801f680:	0049      	lsls	r1, r1, #1
 801f682:	3201      	adds	r2, #1
 801f684:	e7ef      	b.n	801f666 <__ieee754_sqrt+0x13a>
 801f686:	4680      	mov	r8, r0
 801f688:	e7bd      	b.n	801f606 <__ieee754_sqrt+0xda>
 801f68a:	bf00      	nop
 801f68c:	7ff00000 	.word	0x7ff00000

0801f690 <with_errno>:
 801f690:	b570      	push	{r4, r5, r6, lr}
 801f692:	4604      	mov	r4, r0
 801f694:	460d      	mov	r5, r1
 801f696:	4616      	mov	r6, r2
 801f698:	f7fa fc5c 	bl	8019f54 <__errno>
 801f69c:	4629      	mov	r1, r5
 801f69e:	6006      	str	r6, [r0, #0]
 801f6a0:	4620      	mov	r0, r4
 801f6a2:	bd70      	pop	{r4, r5, r6, pc}

0801f6a4 <xflow>:
 801f6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f6a6:	4614      	mov	r4, r2
 801f6a8:	461d      	mov	r5, r3
 801f6aa:	b108      	cbz	r0, 801f6b0 <xflow+0xc>
 801f6ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f6b0:	e9cd 2300 	strd	r2, r3, [sp]
 801f6b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6b8:	4620      	mov	r0, r4
 801f6ba:	4629      	mov	r1, r5
 801f6bc:	f7f9 ff1c 	bl	80194f8 <__aeabi_dmul>
 801f6c0:	2222      	movs	r2, #34	; 0x22
 801f6c2:	b003      	add	sp, #12
 801f6c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f6c8:	f7ff bfe2 	b.w	801f690 <with_errno>

0801f6cc <__math_uflow>:
 801f6cc:	b508      	push	{r3, lr}
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f6d4:	f7ff ffe6 	bl	801f6a4 <xflow>
 801f6d8:	ec41 0b10 	vmov	d0, r0, r1
 801f6dc:	bd08      	pop	{r3, pc}

0801f6de <__math_oflow>:
 801f6de:	b508      	push	{r3, lr}
 801f6e0:	2200      	movs	r2, #0
 801f6e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f6e6:	f7ff ffdd 	bl	801f6a4 <xflow>
 801f6ea:	ec41 0b10 	vmov	d0, r0, r1
 801f6ee:	bd08      	pop	{r3, pc}

0801f6f0 <fabs>:
 801f6f0:	ec51 0b10 	vmov	r0, r1, d0
 801f6f4:	ee10 2a10 	vmov	r2, s0
 801f6f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f6fc:	ec43 2b10 	vmov	d0, r2, r3
 801f700:	4770      	bx	lr

0801f702 <finite>:
 801f702:	b082      	sub	sp, #8
 801f704:	ed8d 0b00 	vstr	d0, [sp]
 801f708:	9801      	ldr	r0, [sp, #4]
 801f70a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f70e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f712:	0fc0      	lsrs	r0, r0, #31
 801f714:	b002      	add	sp, #8
 801f716:	4770      	bx	lr

0801f718 <scalbn>:
 801f718:	b570      	push	{r4, r5, r6, lr}
 801f71a:	ec55 4b10 	vmov	r4, r5, d0
 801f71e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f722:	4606      	mov	r6, r0
 801f724:	462b      	mov	r3, r5
 801f726:	b99a      	cbnz	r2, 801f750 <scalbn+0x38>
 801f728:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f72c:	4323      	orrs	r3, r4
 801f72e:	d036      	beq.n	801f79e <scalbn+0x86>
 801f730:	4b39      	ldr	r3, [pc, #228]	; (801f818 <scalbn+0x100>)
 801f732:	4629      	mov	r1, r5
 801f734:	ee10 0a10 	vmov	r0, s0
 801f738:	2200      	movs	r2, #0
 801f73a:	f7f9 fedd 	bl	80194f8 <__aeabi_dmul>
 801f73e:	4b37      	ldr	r3, [pc, #220]	; (801f81c <scalbn+0x104>)
 801f740:	429e      	cmp	r6, r3
 801f742:	4604      	mov	r4, r0
 801f744:	460d      	mov	r5, r1
 801f746:	da10      	bge.n	801f76a <scalbn+0x52>
 801f748:	a32b      	add	r3, pc, #172	; (adr r3, 801f7f8 <scalbn+0xe0>)
 801f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74e:	e03a      	b.n	801f7c6 <scalbn+0xae>
 801f750:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f754:	428a      	cmp	r2, r1
 801f756:	d10c      	bne.n	801f772 <scalbn+0x5a>
 801f758:	ee10 2a10 	vmov	r2, s0
 801f75c:	4620      	mov	r0, r4
 801f75e:	4629      	mov	r1, r5
 801f760:	f7f9 fd14 	bl	801918c <__adddf3>
 801f764:	4604      	mov	r4, r0
 801f766:	460d      	mov	r5, r1
 801f768:	e019      	b.n	801f79e <scalbn+0x86>
 801f76a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f76e:	460b      	mov	r3, r1
 801f770:	3a36      	subs	r2, #54	; 0x36
 801f772:	4432      	add	r2, r6
 801f774:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f778:	428a      	cmp	r2, r1
 801f77a:	dd08      	ble.n	801f78e <scalbn+0x76>
 801f77c:	2d00      	cmp	r5, #0
 801f77e:	a120      	add	r1, pc, #128	; (adr r1, 801f800 <scalbn+0xe8>)
 801f780:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f784:	da1c      	bge.n	801f7c0 <scalbn+0xa8>
 801f786:	a120      	add	r1, pc, #128	; (adr r1, 801f808 <scalbn+0xf0>)
 801f788:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f78c:	e018      	b.n	801f7c0 <scalbn+0xa8>
 801f78e:	2a00      	cmp	r2, #0
 801f790:	dd08      	ble.n	801f7a4 <scalbn+0x8c>
 801f792:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f796:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f79a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f79e:	ec45 4b10 	vmov	d0, r4, r5
 801f7a2:	bd70      	pop	{r4, r5, r6, pc}
 801f7a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f7a8:	da19      	bge.n	801f7de <scalbn+0xc6>
 801f7aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f7ae:	429e      	cmp	r6, r3
 801f7b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f7b4:	dd0a      	ble.n	801f7cc <scalbn+0xb4>
 801f7b6:	a112      	add	r1, pc, #72	; (adr r1, 801f800 <scalbn+0xe8>)
 801f7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d1e2      	bne.n	801f786 <scalbn+0x6e>
 801f7c0:	a30f      	add	r3, pc, #60	; (adr r3, 801f800 <scalbn+0xe8>)
 801f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7c6:	f7f9 fe97 	bl	80194f8 <__aeabi_dmul>
 801f7ca:	e7cb      	b.n	801f764 <scalbn+0x4c>
 801f7cc:	a10a      	add	r1, pc, #40	; (adr r1, 801f7f8 <scalbn+0xe0>)
 801f7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d0b8      	beq.n	801f748 <scalbn+0x30>
 801f7d6:	a10e      	add	r1, pc, #56	; (adr r1, 801f810 <scalbn+0xf8>)
 801f7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7dc:	e7b4      	b.n	801f748 <scalbn+0x30>
 801f7de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f7e2:	3236      	adds	r2, #54	; 0x36
 801f7e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f7e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f7ec:	4620      	mov	r0, r4
 801f7ee:	4b0c      	ldr	r3, [pc, #48]	; (801f820 <scalbn+0x108>)
 801f7f0:	2200      	movs	r2, #0
 801f7f2:	e7e8      	b.n	801f7c6 <scalbn+0xae>
 801f7f4:	f3af 8000 	nop.w
 801f7f8:	c2f8f359 	.word	0xc2f8f359
 801f7fc:	01a56e1f 	.word	0x01a56e1f
 801f800:	8800759c 	.word	0x8800759c
 801f804:	7e37e43c 	.word	0x7e37e43c
 801f808:	8800759c 	.word	0x8800759c
 801f80c:	fe37e43c 	.word	0xfe37e43c
 801f810:	c2f8f359 	.word	0xc2f8f359
 801f814:	81a56e1f 	.word	0x81a56e1f
 801f818:	43500000 	.word	0x43500000
 801f81c:	ffff3cb0 	.word	0xffff3cb0
 801f820:	3c900000 	.word	0x3c900000

0801f824 <_init>:
 801f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f826:	bf00      	nop
 801f828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f82a:	bc08      	pop	{r3}
 801f82c:	469e      	mov	lr, r3
 801f82e:	4770      	bx	lr

0801f830 <_fini>:
 801f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f832:	bf00      	nop
 801f834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f836:	bc08      	pop	{r3}
 801f838:	469e      	mov	lr, r3
 801f83a:	4770      	bx	lr
