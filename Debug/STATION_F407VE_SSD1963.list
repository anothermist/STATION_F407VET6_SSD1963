
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f38c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000333c0  0801f520  0801f520  0002f520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080528e0  080528e0  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  080528e0  080528e0  000628e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080528e8  080528e8  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080528e8  080528e8  000628e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080528ec  080528ec  000628ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080528f0  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          000007e8  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20000a20  20000a20  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cadb  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347c  00000000  00000000  0008cd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000901c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00090208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3be  00000000  00000000  00090280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd36  00000000  00000000  000aa63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db8  00000000  00000000  0017a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00025050  00000000  00000000  0018117c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f504 	.word	0x0801f504

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f504 	.word	0x0801f504

080001d0 <AT24XX_IsConnected>:
#include "at24.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d fe29 	bl	800de34 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fe7e 	bl	800cf28 <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fd40 	bl	8006cb8 <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00c ff53 	bl	800d11c <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f019 f88c 	bl	801944c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 fda3 	bl	8018e8c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01e f93b 	bl	801e5d0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 ff49 	bl	80191f8 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 fa3b 	bl	80197e8 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 fed6 	bl	8019148 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 febd 	bl	8019124 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01e f98b 	bl	801e6d0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b fa15 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b fb08 	bl	800ba2c <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00b f99d 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b fa90 	bl	800ba2c <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00b f900 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00b f9f4 	bl	800ba2c <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00b f81c 	bl	800b832 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00b f810 	bl	800b832 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00b f804 	bl	800b832 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fffa 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00b f8ef 	bl	800ba2c <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a ffcc 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00b f8c1 	bl	800ba2c <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a ff68 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00b f85d 	bl	800ba2c <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a ff55 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00b f849 	bl	800ba2c <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 fbac 	bl	80191f8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f018 f9eb 	bl	8018e8c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 fcc5 	bl	801944c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d fdfb 	bl	801e6d0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 fb88 	bl	80191f8 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 fb80 	bl	80191f8 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 fca1 	bl	801944c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f018 f9b4 	bl	8018e88 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 fb63 	bl	80191f8 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f018 f9a7 	bl	8018e8c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 fb28 	bl	80191f8 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f018 f967 	bl	8018e8c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fc41 	bl	801944c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 fb0f 	bl	80191f8 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 fb06 	bl	80191f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fd66 	bl	801e6d0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 faf3 	bl	80191f8 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f018 f932 	bl	8018e8c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fc0c 	bl	801944c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a fd90 	bl	800b832 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fe84 	bl	800ba2c <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f018 f8aa 	bl	8019104 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f018 f919 	bl	80191f8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f018 f8a7 	bl	8019124 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f017 ff55 	bl	8018e8c <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a fbfd 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a fbdd 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a fbbd 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a fb9d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a fb7d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a fb5d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a fb3d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a fb1d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a fafd 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a fadd 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a fabd 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a fa9d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a fa7d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a fa5d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a fa3d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a fa1d 	bl	800b832 <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	0805231c 	.word	0x0805231c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01d f84d 	bl	801e5d0 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 fca3 	bl	8018e88 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f018 f8c1 	bl	80196dc <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fc8f 	bl	8018e8c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 fdaf 	bl	8019124 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 fda0 	bl	8019124 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fc4c 	bl	8018e88 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f018 f95e 	bl	80198b8 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 fd9b 	bl	801918c <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 fdcc 	bl	80191f8 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01c ffae 	bl	801e5d0 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f018 f91c 	bl	80198b8 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fd7e 	bl	801918c <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 fdaf 	bl	80191f8 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 fbf0 	bl	8018e8c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01c ff88 	bl	801e5d0 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f018 f8f6 	bl	80198b8 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f018 f908 	bl	80198f4 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fd48 	bl	801918c <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fd79 	bl	80191f8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01c ff5b 	bl	801e5d0 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 fbb0 	bl	8018e88 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f018 f8c2 	bl	80198b8 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 fcf1 	bl	801918c <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 fb6a 	bl	8018e88 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 fe43 	bl	801944c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fd06 	bl	80191f8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f017 fff8 	bl	80197e8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fc4b 	bl	8019124 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 fafd 	bl	8015f34 <HAL_UART_Receive_IT>
		//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0b3      	sub	sp, #204	; 0xcc
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f005 f8c5 	bl	8006aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f001 ff2d 	bl	80037c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 f8eb 	bl	8003b40 <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 f9c3 	bl	8003cf4 <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f001 ffc5 	bl	80038fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 f893 	bl	8003a9c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 f85b 	bl	8003a30 <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f823 	bl	80039c4 <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 f8b7 	bl	8003af0 <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f001 ff87 	bl	8003894 <MX_DAC_Init>
  MX_SPI1_Init();
 8001986:	f001 ffe7 	bl	8003958 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fccf 	bl	800532c <LCD_Init>
	XPT2046_Init();
 800198e:	f004 ffb7 	bl	8006900 <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25Q_Init();
 8001996:	f004 fef3 	bl	8006780 <W25Q_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 faeb 	bl	8003f84 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 fae1 	bl	8003f84 <LCD_Rect_Fill>
/*	W25Q_Erase_Sector(2);

	uint8_t flashIN[] = "FLASH OK \r\n";
	W25Q_Write_Data(8192, flashIN, 10);
*/
	uint8_t flashOUT[9] = {0};
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	711a      	strb	r2, [r3, #4]
	W25Q_Read_Data(8192, flashOUT, 9);
 80019d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019d6:	2209      	movs	r2, #9
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019de:	f004 fddf 	bl	80065a0 <W25Q_Read_Data>
	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);
 80019e2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2209      	movs	r2, #9
 80019ea:	489a      	ldr	r0, [pc, #616]	; (8001c54 <main+0x2fc>)
 80019ec:	f014 f929 	bl	8015c42 <HAL_UART_Transmit>


	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80019f6:	e027      	b.n	8001a48 <main+0xf0>
 80019f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80019fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fc42 	bl	8000290 <AT24XX_Read>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461c      	mov	r4, r3
 8001a10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fc36 	bl	8000290 <AT24XX_Read>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff ff57 	bl	80018dc <byteS>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a36:	b211      	sxth	r1, r2
 8001a38:	4a87      	ldr	r2, [pc, #540]	; (8001c58 <main+0x300>)
 8001a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8001a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a4c:	2b9a      	cmp	r3, #154	; 0x9a
 8001a4e:	d9d3      	bls.n	80019f8 <main+0xa0>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001a56:	e027      	b.n	8001aa8 <main+0x150>
 8001a58:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a5c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc12 	bl	8000290 <AT24XX_Read>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461c      	mov	r4, r3
 8001a70:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fc06 	bl	8000290 <AT24XX_Read>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4619      	mov	r1, r3
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ff27 	bl	80018dc <byteS>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a96:	b211      	sxth	r1, r2
 8001a98:	4a70      	ldr	r2, [pc, #448]	; (8001c5c <main+0x304>)
 8001a9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a9e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001aa8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001aac:	2b9a      	cmp	r3, #154	; 0x9a
 8001aae:	d9d3      	bls.n	8001a58 <main+0x100>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8001ab6:	e027      	b.n	8001b08 <main+0x1b0>
 8001ab8:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001abc:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fbe2 	bl	8000290 <AT24XX_Read>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461c      	mov	r4, r3
 8001ad0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fbd6 	bl	8000290 <AT24XX_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff fef7 	bl	80018dc <byteS>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001af6:	b211      	sxth	r1, r2
 8001af8:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <main+0x308>)
 8001afa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001afe:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001b02:	3301      	adds	r3, #1
 8001b04:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8001b08:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001b0c:	2b9a      	cmp	r3, #154	; 0x9a
 8001b0e:	d9d3      	bls.n	8001ab8 <main+0x160>


	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001b10:	4a54      	ldr	r2, [pc, #336]	; (8001c64 <main+0x30c>)
 8001b12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b18:	c303      	stmia	r3!, {r0, r1}
 8001b1a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001b1c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	220a      	movs	r2, #10
 8001b24:	484b      	ldr	r0, [pc, #300]	; (8001c54 <main+0x2fc>)
 8001b26:	f014 f88c 	bl	8015c42 <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <main+0x310>)
 8001b2c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001b30:	461d      	mov	r5, r3
 8001b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001b3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b3e:	2214      	movs	r2, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4844      	ldr	r0, [pc, #272]	; (8001c54 <main+0x2fc>)
 8001b44:	f014 f9b1 	bl	8015eaa <HAL_UART_Transmit_IT>

	//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
	//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001b48:	2210      	movs	r2, #16
 8001b4a:	4948      	ldr	r1, [pc, #288]	; (8001c6c <main+0x314>)
 8001b4c:	4841      	ldr	r0, [pc, #260]	; (8001c54 <main+0x2fc>)
 8001b4e:	f014 f9f1 	bl	8015f34 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001b52:	2120      	movs	r1, #32
 8001b54:	4846      	ldr	r0, [pc, #280]	; (8001c70 <main+0x318>)
 8001b56:	f009 fc63 	bl	800b420 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d12c      	bne.n	8001bba <main+0x262>

			uint16_t touchX = getX();
 8001b60:	f004 ff90 	bl	8006a84 <getX>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			uint16_t touchY = getY();
 8001b6a:	f004 ffa5 	bl	8006ab8 <getY>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			if (touchX && touchY && touchX != 0x0DB)
 8001b74:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d012      	beq.n	8001ba2 <main+0x24a>
 8001b7c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00e      	beq.n	8001ba2 <main+0x24a>
 8001b84:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8001b88:	2bdb      	cmp	r3, #219	; 0xdb
 8001b8a:	d00a      	beq.n	8001ba2 <main+0x24a>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001b8c:	f8b7 108e 	ldrh.w	r1, [r7, #142]	; 0x8e
 8001b90:	f8b7 0090 	ldrh.w	r0, [r7, #144]	; 0x90
 8001b94:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f002 f9f1 	bl	8003f84 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	4833      	ldr	r0, [pc, #204]	; (8001c74 <main+0x31c>)
 8001ba8:	f009 fc52 	bl	800b450 <HAL_GPIO_WritePin>
			touchX = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			touchY = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001bb8:	e004      	b.n	8001bc4 <main+0x26c>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	482d      	ldr	r0, [pc, #180]	; (8001c74 <main+0x31c>)
 8001bc0:	f009 fc46 	bl	800b450 <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001bc4:	f7ff f8f8 	bl	8000db8 <DS3231_getSec>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <main+0x320>)
 8001bce:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <main+0x324>)
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <main+0x320>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d0ba      	beq.n	8001b52 <main+0x1fa>

			rtcMin = DS3231_getMin();
 8001bdc:	f7ff f8fa 	bl	8000dd4 <DS3231_getMin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <main+0x328>)
 8001be6:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <main+0x32c>)
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	2123      	movs	r1, #35	; 0x23
 8001bf6:	20aa      	movs	r0, #170	; 0xaa
 8001bf8:	f002 fe08 	bl	800480c <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <main+0x32c>)
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2301      	movs	r3, #1
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	2208      	movs	r2, #8
 8001c08:	214b      	movs	r1, #75	; 0x4b
 8001c0a:	20aa      	movs	r0, #170	; 0xaa
 8001c0c:	f002 fdfe 	bl	800480c <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <main+0x320>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d034      	beq.n	8001c88 <main+0x330>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <main+0x32c>)
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	2301      	movs	r3, #1
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2301      	movs	r3, #1
 8001c28:	2207      	movs	r2, #7
 8001c2a:	2123      	movs	r1, #35	; 0x23
 8001c2c:	20aa      	movs	r0, #170	; 0xaa
 8001c2e:	f002 fded 	bl	800480c <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <main+0x32c>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2301      	movs	r3, #1
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	214b      	movs	r1, #75	; 0x4b
 8001c40:	20aa      	movs	r0, #170	; 0xaa
 8001c42:	f002 fde3 	bl	800480c <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <main+0x318>)
 8001c4e:	f009 fbff 	bl	800b450 <HAL_GPIO_WritePin>
 8001c52:	e033      	b.n	8001cbc <main+0x364>
 8001c54:	200004d8 	.word	0x200004d8
 8001c58:	200005bc 	.word	0x200005bc
 8001c5c:	200006f4 	.word	0x200006f4
 8001c60:	2000082c 	.word	0x2000082c
 8001c64:	08052388 	.word	0x08052388
 8001c68:	08052394 	.word	0x08052394
 8001c6c:	20000975 	.word	0x20000975
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	2000056d 	.word	0x2000056d
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	2000056e 	.word	0x2000056e
 8001c84:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	2207      	movs	r2, #7
 8001c94:	2123      	movs	r1, #35	; 0x23
 8001c96:	20aa      	movs	r0, #170	; 0xaa
 8001c98:	f002 fdb8 	bl	800480c <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	214b      	movs	r1, #75	; 0x4b
 8001caa:	20aa      	movs	r0, #170	; 0xaa
 8001cac:	f002 fdae 	bl	800480c <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	48bb      	ldr	r0, [pc, #748]	; (8001fa4 <main+0x64c>)
 8001cb8:	f009 fbca 	bl	800b450 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001cbc:	4bba      	ldr	r3, [pc, #744]	; (8001fa8 <main+0x650>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4bba      	ldr	r3, [pc, #744]	; (8001fac <main+0x654>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f001 808c 	beq.w	8002de2 <main+0x148a>

				rtcHrs = DS3231_getHrs();
 8001cca:	f7ff f891 	bl	8000df0 <DS3231_getHrs>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4bb7      	ldr	r3, [pc, #732]	; (8001fb0 <main+0x658>)
 8001cd4:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8001cd6:	4bb4      	ldr	r3, [pc, #720]	; (8001fa8 <main+0x650>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ce0:	49b4      	ldr	r1, [pc, #720]	; (8001fb4 <main+0x65c>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f018 fe68 	bl	801a9b8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001ce8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4bb0      	ldr	r3, [pc, #704]	; (8001fb8 <main+0x660>)
 8001cf6:	2164      	movs	r1, #100	; 0x64
 8001cf8:	20b2      	movs	r0, #178	; 0xb2
 8001cfa:	f003 fa9d 	bl	8005238 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8001cfe:	4bab      	ldr	r3, [pc, #684]	; (8001fac <main+0x654>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d08:	49aa      	ldr	r1, [pc, #680]	; (8001fb4 <main+0x65c>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f018 fe54 	bl	801a9b8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d10:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d14:	4ba9      	ldr	r3, [pc, #676]	; (8001fbc <main+0x664>)
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4ba6      	ldr	r3, [pc, #664]	; (8001fb8 <main+0x660>)
 8001d1e:	2164      	movs	r1, #100	; 0x64
 8001d20:	20b2      	movs	r0, #178	; 0xb2
 8001d22:	f003 fa89 	bl	8005238 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8001d26:	4ba6      	ldr	r3, [pc, #664]	; (8001fc0 <main+0x668>)
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4ba1      	ldr	r3, [pc, #644]	; (8001fb0 <main+0x658>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	f000 80fb 	beq.w	8001f2a <main+0x5d2>

					rtcDay = DS3231_getDay();
 8001d34:	f7ff f86a 	bl	8000e0c <DS3231_getDay>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4ba1      	ldr	r3, [pc, #644]	; (8001fc4 <main+0x66c>)
 8001d3e:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8001d40:	f7ff f872 	bl	8000e28 <DS3231_getDate>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b9f      	ldr	r3, [pc, #636]	; (8001fc8 <main+0x670>)
 8001d4a:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8001d4c:	f7ff f87a 	bl	8000e44 <DS3231_getMonth>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b9d      	ldr	r3, [pc, #628]	; (8001fcc <main+0x674>)
 8001d56:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8001d58:	f7ff f882 	bl	8000e60 <DS3231_getYear>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b9b      	ldr	r3, [pc, #620]	; (8001fd0 <main+0x678>)
 8001d62:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8001d64:	4b96      	ldr	r3, [pc, #600]	; (8001fc0 <main+0x668>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d6e:	4991      	ldr	r1, [pc, #580]	; (8001fb4 <main+0x65c>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f018 fe21 	bl	801a9b8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d76:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4b8d      	ldr	r3, [pc, #564]	; (8001fb8 <main+0x660>)
 8001d84:	2164      	movs	r1, #100	; 0x64
 8001d86:	2000      	movs	r0, #0
 8001d88:	f003 fa56 	bl	8005238 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8001d8c:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <main+0x658>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d96:	4987      	ldr	r1, [pc, #540]	; (8001fb4 <main+0x65c>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f018 fe0d 	bl	801a9b8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d9e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001da2:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <main+0x664>)
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2301      	movs	r3, #1
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <main+0x660>)
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	2000      	movs	r0, #0
 8001db0:	f003 fa42 	bl	8005238 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8001db4:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <main+0x67c>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <main+0x66c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f000 80a8 	beq.w	8001f12 <main+0x5ba>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8001dc2:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <main+0x66c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	1d5a      	adds	r2, r3, #5
 8001dc8:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <main+0x680>)
 8001dca:	fb83 1302 	smull	r1, r3, r3, r2
 8001dce:	4413      	add	r3, r2
 8001dd0:	1099      	asrs	r1, r3, #2
 8001dd2:	17d3      	asrs	r3, r2, #31
 8001dd4:	1ac9      	subs	r1, r1, r3
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	1a5b      	subs	r3, r3, r1
 8001ddc:	1ad1      	subs	r1, r2, r3
 8001dde:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <main+0x684>)
 8001de0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2301      	movs	r3, #1
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <main+0x688>)
 8001dee:	218c      	movs	r1, #140	; 0x8c
 8001df0:	2005      	movs	r0, #5
 8001df2:	f003 fa21 	bl	8005238 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <main+0x66c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	1d9a      	adds	r2, r3, #6
 8001dfc:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <main+0x680>)
 8001dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001e02:	4413      	add	r3, r2
 8001e04:	1099      	asrs	r1, r3, #2
 8001e06:	17d3      	asrs	r3, r2, #31
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	1ad1      	subs	r1, r2, r3
 8001e12:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <main+0x684>)
 8001e14:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e18:	23ff      	movs	r3, #255	; 0xff
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <main+0x688>)
 8001e22:	218c      	movs	r1, #140	; 0x8c
 8001e24:	2005      	movs	r0, #5
 8001e26:	f003 fa07 	bl	8005238 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8001e2a:	4b68      	ldr	r3, [pc, #416]	; (8001fcc <main+0x674>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f103 010a 	add.w	r1, r3, #10
 8001e32:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <main+0x68c>)
 8001e34:	fb83 2301 	smull	r2, r3, r3, r1
 8001e38:	105a      	asrs	r2, r3, #1
 8001e3a:	17cb      	asrs	r3, r1, #31
 8001e3c:	1ad2      	subs	r2, r2, r3
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	1aca      	subs	r2, r1, r3
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <main+0x690>)
 8001e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2301      	movs	r3, #1
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <main+0x688>)
 8001e58:	218c      	movs	r1, #140	; 0x8c
 8001e5a:	2096      	movs	r0, #150	; 0x96
 8001e5c:	f003 f9ec 	bl	8005238 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <main+0x674>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f103 010b 	add.w	r1, r3, #11
 8001e68:	4b5e      	ldr	r3, [pc, #376]	; (8001fe4 <main+0x68c>)
 8001e6a:	fb83 2301 	smull	r2, r3, r3, r1
 8001e6e:	105a      	asrs	r2, r3, #1
 8001e70:	17cb      	asrs	r3, r1, #31
 8001e72:	1ad2      	subs	r2, r2, r3
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	1aca      	subs	r2, r1, r3
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <main+0x690>)
 8001e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <main+0x688>)
 8001e90:	218c      	movs	r1, #140	; 0x8c
 8001e92:	2096      	movs	r0, #150	; 0x96
 8001e94:	f003 f9d0 	bl	8005238 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8001e98:	4b54      	ldr	r3, [pc, #336]	; (8001fec <main+0x694>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b54      	ldr	r3, [pc, #336]	; (8001ff0 <main+0x698>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <main+0x69c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4951      	ldr	r1, [pc, #324]	; (8001ff8 <main+0x6a0>)
 8001eb2:	f018 fd81 	bl	801a9b8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8001eb6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <main+0x688>)
 8001ec4:	218c      	movs	r1, #140	; 0x8c
 8001ec6:	20fa      	movs	r0, #250	; 0xfa
 8001ec8:	f003 f9b6 	bl	8005238 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8001ecc:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <main+0x670>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <main+0x674>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <main+0x678>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4944      	ldr	r1, [pc, #272]	; (8001ff8 <main+0x6a0>)
 8001ee6:	f018 fd67 	bl	801a9b8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8001eea:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <main+0x688>)
 8001efa:	218c      	movs	r1, #140	; 0x8c
 8001efc:	20fa      	movs	r0, #250	; 0xfa
 8001efe:	f003 f99b 	bl	8005238 <LCD_Font>

						rtcDayLast = rtcDay;
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <main+0x66c>)
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <main+0x67c>)
 8001f08:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <main+0x670>)
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <main+0x694>)
 8001f10:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <main+0x674>)
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <main+0x698>)
 8001f18:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <main+0x678>)
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <main+0x69c>)
 8001f20:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <main+0x658>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <main+0x668>)
 8001f28:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <main+0x654>)
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <main+0x650>)
 8001f30:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8001f32:	f04f 30ff 	mov.w	r0, #4294967295
 8001f36:	f7fe fa57 	bl	80003e8 <BME280_getTemperature>
 8001f3a:	ee10 3a10 	vmov	r3, s0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f017 f902 	bl	8019148 <__aeabi_f2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	492c      	ldr	r1, [pc, #176]	; (8001ffc <main+0x6a4>)
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f52:	f7fe fac1 	bl	80004d8 <BME280_getHumidity>
 8001f56:	ee10 3a10 	vmov	r3, s0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f017 f8f4 	bl	8019148 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4926      	ldr	r1, [pc, #152]	; (8002000 <main+0x6a8>)
 8001f66:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8001f6a:	f7fe fb55 	bl	8000618 <BME280_getPressure>
 8001f6e:	eef0 7a40 	vmov.f32	s15, s0
 8001f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f76:	ee17 3a90 	vmov	r3, s15
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <main+0x6ac>)
 8001f7e:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <main+0x6ac>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f88:	f240 872b 	bls.w	8002de2 <main+0x148a>
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <main+0x6ac>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	f240 424b 	movw	r2, #1099	; 0x44b
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f200 8724 	bhi.w	8002de2 <main+0x148a>
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <main+0x6a4>)
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	e032      	b.n	8002008 <main+0x6b0>
 8001fa2:	bf00      	nop
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	20000001 	.word	0x20000001
 8001fac:	2000056e 	.word	0x2000056e
 8001fb0:	2000056f 	.word	0x2000056f
 8001fb4:	0805232c 	.word	0x0805232c
 8001fb8:	080522e8 	.word	0x080522e8
 8001fbc:	00ffa500 	.word	0x00ffa500
 8001fc0:	20000002 	.word	0x20000002
 8001fc4:	20000570 	.word	0x20000570
 8001fc8:	20000571 	.word	0x20000571
 8001fcc:	20000572 	.word	0x20000572
 8001fd0:	20000573 	.word	0x20000573
 8001fd4:	20000574 	.word	0x20000574
 8001fd8:	92492493 	.word	0x92492493
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	08029c50 	.word	0x08029c50
 8001fe4:	2aaaaaab 	.word	0x2aaaaaab
 8001fe8:	20000024 	.word	0x20000024
 8001fec:	20000575 	.word	0x20000575
 8001ff0:	20000576 	.word	0x20000576
 8001ff4:	20000577 	.word	0x20000577
 8001ff8:	08052334 	.word	0x08052334
 8001ffc:	20000578 	.word	0x20000578
 8002000:	20000588 	.word	0x20000588
 8002004:	200005b8 	.word	0x200005b8
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b8a      	ldr	r3, [pc, #552]	; (8002238 <main+0x8e0>)
 800200e:	f017 fb65 	bl	80196dc <__aeabi_dcmplt>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 86e4 	beq.w	8002de2 <main+0x148a>
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <main+0x8e4>)
 800201c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b86      	ldr	r3, [pc, #536]	; (8002240 <main+0x8e8>)
 8002026:	f017 fb77 	bl	8019718 <__aeabi_dcmpgt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 86d8 	beq.w	8002de2 <main+0x148a>
 8002032:	4b84      	ldr	r3, [pc, #528]	; (8002244 <main+0x8ec>)
 8002034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	f017 fb6a 	bl	8019718 <__aeabi_dcmpgt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 86cb 	beq.w	8002de2 <main+0x148a>
 800204c:	4b7d      	ldr	r3, [pc, #500]	; (8002244 <main+0x8ec>)
 800204e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <main+0x8f0>)
 8002058:	f017 fb40 	bl	80196dc <__aeabi_dcmplt>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 86bf 	beq.w	8002de2 <main+0x148a>

					if (temperature != temperatureLast) {
 8002064:	4b75      	ldr	r3, [pc, #468]	; (800223c <main+0x8e4>)
 8002066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206a:	4b78      	ldr	r3, [pc, #480]	; (800224c <main+0x8f4>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f017 fb2a 	bl	80196c8 <__aeabi_dcmpeq>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 8120 	bne.w	80022bc <main+0x964>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 800207c:	4b73      	ldr	r3, [pc, #460]	; (800224c <main+0x8f4>)
 800207e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <main+0x8f8>)
 8002088:	f017 fb3c 	bl	8019704 <__aeabi_dcmpge>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <main+0x768>
 8002092:	4b6e      	ldr	r3, [pc, #440]	; (800224c <main+0x8f4>)
 8002094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	f017 fb1c 	bl	80196dc <__aeabi_dcmplt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01c      	beq.n	80020e4 <main+0x78c>
 80020aa:	4b68      	ldr	r3, [pc, #416]	; (800224c <main+0x8f4>)
 80020ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b67      	ldr	r3, [pc, #412]	; (8002254 <main+0x8fc>)
 80020b6:	f017 fb2f 	bl	8019718 <__aeabi_dcmpgt>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d011      	beq.n	80020e4 <main+0x78c>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <main+0x8f4>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	4638      	mov	r0, r7
 80020c8:	4963      	ldr	r1, [pc, #396]	; (8002258 <main+0x900>)
 80020ca:	f018 fc75 	bl	801a9b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80020ce:	463a      	mov	r2, r7
 80020d0:	2300      	movs	r3, #0
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	2301      	movs	r3, #1
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4b60      	ldr	r3, [pc, #384]	; (800225c <main+0x904>)
 80020da:	21bb      	movs	r1, #187	; 0xbb
 80020dc:	2001      	movs	r0, #1
 80020de:	f003 f8ab 	bl	8005238 <LCD_Font>
 80020e2:	e04c      	b.n	800217e <main+0x826>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <main+0x8f4>)
 80020e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <main+0x8f8>)
 80020f0:	f017 faf4 	bl	80196dc <__aeabi_dcmplt>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01d      	beq.n	8002136 <main+0x7de>
 80020fa:	4b54      	ldr	r3, [pc, #336]	; (800224c <main+0x8f4>)
 80020fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f017 fb06 	bl	8019718 <__aeabi_dcmpgt>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d011      	beq.n	8002136 <main+0x7de>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002112:	4b4e      	ldr	r3, [pc, #312]	; (800224c <main+0x8f4>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	4638      	mov	r0, r7
 800211a:	494f      	ldr	r1, [pc, #316]	; (8002258 <main+0x900>)
 800211c:	f018 fc4c 	bl	801a9b8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002120:	463a      	mov	r2, r7
 8002122:	2300      	movs	r3, #0
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2301      	movs	r3, #1
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <main+0x904>)
 800212c:	21bb      	movs	r1, #187	; 0xbb
 800212e:	201b      	movs	r0, #27
 8002130:	f003 f882 	bl	8005238 <LCD_Font>
 8002134:	e023      	b.n	800217e <main+0x826>
						}
						else if (temperatureLast <= -10) {
 8002136:	4b45      	ldr	r3, [pc, #276]	; (800224c <main+0x8f4>)
 8002138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	4b44      	ldr	r3, [pc, #272]	; (8002254 <main+0x8fc>)
 8002142:	f017 fad5 	bl	80196f0 <__aeabi_dcmple>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d018      	beq.n	800217e <main+0x826>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <main+0x8f4>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f017 faff 	bl	8019758 <__aeabi_d2iz>
 800215a:	4603      	mov	r3, r0
 800215c:	b25b      	sxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	463b      	mov	r3, r7
 8002162:	493f      	ldr	r1, [pc, #252]	; (8002260 <main+0x908>)
 8002164:	4618      	mov	r0, r3
 8002166:	f018 fc27 	bl	801a9b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800216a:	463a      	mov	r2, r7
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	2301      	movs	r3, #1
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <main+0x904>)
 8002176:	21bb      	movs	r1, #187	; 0xbb
 8002178:	2001      	movs	r0, #1
 800217a:	f003 f85d 	bl	8005238 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <main+0x8e4>)
 8002180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <main+0x8f8>)
 800218a:	f017 fabb 	bl	8019704 <__aeabi_dcmpge>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d116      	bne.n	80021c2 <main+0x86a>
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <main+0x8e4>)
 8002196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f017 fa9b 	bl	80196dc <__aeabi_dcmplt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <main+0x88e>
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <main+0x8e4>)
 80021ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <main+0x8fc>)
 80021b8:	f017 faae 	bl	8019718 <__aeabi_dcmpgt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d011      	beq.n	80021e6 <main+0x88e>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <main+0x8e4>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	4638      	mov	r0, r7
 80021ca:	4923      	ldr	r1, [pc, #140]	; (8002258 <main+0x900>)
 80021cc:	f018 fbf4 	bl	801a9b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80021d0:	463a      	mov	r2, r7
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <main+0x90c>)
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2301      	movs	r3, #1
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <main+0x904>)
 80021dc:	21bb      	movs	r1, #187	; 0xbb
 80021de:	2001      	movs	r0, #1
 80021e0:	f003 f82a 	bl	8005238 <LCD_Font>
 80021e4:	e064      	b.n	80022b0 <main+0x958>
						}
						else if (temperature < 10 && temperature > 0) {
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <main+0x8e4>)
 80021e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <main+0x8f8>)
 80021f2:	f017 fa73 	bl	80196dc <__aeabi_dcmplt>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d035      	beq.n	8002268 <main+0x910>
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <main+0x8e4>)
 80021fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f017 fa85 	bl	8019718 <__aeabi_dcmpgt>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d029      	beq.n	8002268 <main+0x910>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <main+0x8e4>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	4638      	mov	r0, r7
 800221c:	490e      	ldr	r1, [pc, #56]	; (8002258 <main+0x900>)
 800221e:	f018 fbcb 	bl	801a9b8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002222:	463a      	mov	r2, r7
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <main+0x90c>)
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2301      	movs	r3, #1
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <main+0x904>)
 800222e:	21bb      	movs	r1, #187	; 0xbb
 8002230:	201b      	movs	r0, #27
 8002232:	f003 f801 	bl	8005238 <LCD_Font>
 8002236:	e03b      	b.n	80022b0 <main+0x958>
 8002238:	40554000 	.word	0x40554000
 800223c:	20000578 	.word	0x20000578
 8002240:	c0440000 	.word	0xc0440000
 8002244:	20000588 	.word	0x20000588
 8002248:	40590000 	.word	0x40590000
 800224c:	20000580 	.word	0x20000580
 8002250:	40240000 	.word	0x40240000
 8002254:	c0240000 	.word	0xc0240000
 8002258:	08052344 	.word	0x08052344
 800225c:	08029c50 	.word	0x08029c50
 8002260:	0805234c 	.word	0x0805234c
 8002264:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 8002268:	4bb5      	ldr	r3, [pc, #724]	; (8002540 <main+0xbe8>)
 800226a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4bb4      	ldr	r3, [pc, #720]	; (8002544 <main+0xbec>)
 8002274:	f017 fa3c 	bl	80196f0 <__aeabi_dcmple>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <main+0x958>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 800227e:	4bb0      	ldr	r3, [pc, #704]	; (8002540 <main+0xbe8>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f017 fa66 	bl	8019758 <__aeabi_d2iz>
 800228c:	4603      	mov	r3, r0
 800228e:	b25b      	sxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	463b      	mov	r3, r7
 8002294:	49ac      	ldr	r1, [pc, #688]	; (8002548 <main+0xbf0>)
 8002296:	4618      	mov	r0, r3
 8002298:	f018 fb8e 	bl	801a9b8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800229c:	463a      	mov	r2, r7
 800229e:	4bab      	ldr	r3, [pc, #684]	; (800254c <main+0xbf4>)
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2301      	movs	r3, #1
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	4baa      	ldr	r3, [pc, #680]	; (8002550 <main+0xbf8>)
 80022a8:	21bb      	movs	r1, #187	; 0xbb
 80022aa:	2001      	movs	r0, #1
 80022ac:	f002 ffc4 	bl	8005238 <LCD_Font>
						}

						temperatureLast = temperature;
 80022b0:	4ba3      	ldr	r3, [pc, #652]	; (8002540 <main+0xbe8>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	49a7      	ldr	r1, [pc, #668]	; (8002554 <main+0xbfc>)
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80022bc:	4ba6      	ldr	r3, [pc, #664]	; (8002558 <main+0xc00>)
 80022be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c2:	4ba6      	ldr	r3, [pc, #664]	; (800255c <main+0xc04>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f017 f9fe 	bl	80196c8 <__aeabi_dcmpeq>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d15b      	bne.n	800238a <main+0xa32>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80022d2:	4ba2      	ldr	r3, [pc, #648]	; (800255c <main+0xc04>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f107 0008 	add.w	r0, r7, #8
 80022dc:	49a0      	ldr	r1, [pc, #640]	; (8002560 <main+0xc08>)
 80022de:	f018 fb6b 	bl	801a9b8 <siprintf>
						if (humidityLast >= 10)
 80022e2:	4b9e      	ldr	r3, [pc, #632]	; (800255c <main+0xc04>)
 80022e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	4b9d      	ldr	r3, [pc, #628]	; (8002564 <main+0xc0c>)
 80022ee:	f017 fa09 	bl	8019704 <__aeabi_dcmpge>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <main+0x9b8>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80022f8:	f107 0208 	add.w	r2, r7, #8
 80022fc:	2300      	movs	r3, #0
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	2301      	movs	r3, #1
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4b92      	ldr	r3, [pc, #584]	; (8002550 <main+0xbf8>)
 8002306:	21bb      	movs	r1, #187	; 0xbb
 8002308:	20a0      	movs	r0, #160	; 0xa0
 800230a:	f002 ff95 	bl	8005238 <LCD_Font>
 800230e:	e00a      	b.n	8002326 <main+0x9ce>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002310:	f107 0208 	add.w	r2, r7, #8
 8002314:	2300      	movs	r3, #0
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2301      	movs	r3, #1
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4b8c      	ldr	r3, [pc, #560]	; (8002550 <main+0xbf8>)
 800231e:	21bb      	movs	r1, #187	; 0xbb
 8002320:	20ba      	movs	r0, #186	; 0xba
 8002322:	f002 ff89 	bl	8005238 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <main+0xc00>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f107 0008 	add.w	r0, r7, #8
 8002330:	498b      	ldr	r1, [pc, #556]	; (8002560 <main+0xc08>)
 8002332:	f018 fb41 	bl	801a9b8 <siprintf>
						if (humidity >= 10)
 8002336:	4b88      	ldr	r3, [pc, #544]	; (8002558 <main+0xc00>)
 8002338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	4b88      	ldr	r3, [pc, #544]	; (8002564 <main+0xc0c>)
 8002342:	f017 f9df 	bl	8019704 <__aeabi_dcmpge>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00c      	beq.n	8002366 <main+0xa0e>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800234c:	f107 0208 	add.w	r2, r7, #8
 8002350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	2301      	movs	r3, #1
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <main+0xbf8>)
 800235c:	21bb      	movs	r1, #187	; 0xbb
 800235e:	20a0      	movs	r0, #160	; 0xa0
 8002360:	f002 ff6a 	bl	8005238 <LCD_Font>
 8002364:	e00b      	b.n	800237e <main+0xa26>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002366:	f107 0208 	add.w	r2, r7, #8
 800236a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2301      	movs	r3, #1
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4b76      	ldr	r3, [pc, #472]	; (8002550 <main+0xbf8>)
 8002376:	21bb      	movs	r1, #187	; 0xbb
 8002378:	20ba      	movs	r0, #186	; 0xba
 800237a:	f002 ff5d 	bl	8005238 <LCD_Font>

						humidityLast = humidity;
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <main+0xc00>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	4975      	ldr	r1, [pc, #468]	; (800255c <main+0xc04>)
 8002386:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 800238a:	4b77      	ldr	r3, [pc, #476]	; (8002568 <main+0xc10>)
 800238c:	881a      	ldrh	r2, [r3, #0]
 800238e:	4b77      	ldr	r3, [pc, #476]	; (800256c <main+0xc14>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d065      	beq.n	8002462 <main+0xb0a>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 8002396:	4b74      	ldr	r3, [pc, #464]	; (8002568 <main+0xc10>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239e:	d315      	bcc.n	80023cc <main+0xa74>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 80023a0:	4b71      	ldr	r3, [pc, #452]	; (8002568 <main+0xc10>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	f107 0310 	add.w	r3, r7, #16
 80023aa:	4971      	ldr	r1, [pc, #452]	; (8002570 <main+0xc18>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f018 fb03 	bl	801a9b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023b2:	f107 0210 	add.w	r2, r7, #16
 80023b6:	2300      	movs	r3, #0
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	2301      	movs	r3, #1
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <main+0xbf8>)
 80023c0:	21bb      	movs	r1, #187	; 0xbb
 80023c2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023c6:	f002 ff37 	bl	8005238 <LCD_Font>
 80023ca:	e014      	b.n	80023f6 <main+0xa9e>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <main+0xc10>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	4967      	ldr	r1, [pc, #412]	; (8002574 <main+0xc1c>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f018 faed 	bl	801a9b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023de:	f107 0210 	add.w	r2, r7, #16
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2301      	movs	r3, #1
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4b59      	ldr	r3, [pc, #356]	; (8002550 <main+0xbf8>)
 80023ec:	21bb      	movs	r1, #187	; 0xbb
 80023ee:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023f2:	f002 ff21 	bl	8005238 <LCD_Font>
						}

						pressureLast = pressure;
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <main+0xc14>)
 80023f8:	881a      	ldrh	r2, [r3, #0]
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <main+0xc10>)
 80023fc:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <main+0xc10>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002406:	d316      	bcc.n	8002436 <main+0xade>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 8002408:	4b57      	ldr	r3, [pc, #348]	; (8002568 <main+0xc10>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4957      	ldr	r1, [pc, #348]	; (8002570 <main+0xc18>)
 8002414:	4618      	mov	r0, r3
 8002416:	f018 facf 	bl	801a9b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800241a:	f107 0210 	add.w	r2, r7, #16
 800241e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2301      	movs	r3, #1
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4b49      	ldr	r3, [pc, #292]	; (8002550 <main+0xbf8>)
 800242a:	21bb      	movs	r1, #187	; 0xbb
 800242c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002430:	f002 ff02 	bl	8005238 <LCD_Font>
 8002434:	e015      	b.n	8002462 <main+0xb0a>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 8002436:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <main+0xc10>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	494c      	ldr	r1, [pc, #304]	; (8002574 <main+0xc1c>)
 8002442:	4618      	mov	r0, r3
 8002444:	f018 fab8 	bl	801a9b8 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002448:	f107 0210 	add.w	r2, r7, #16
 800244c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2301      	movs	r3, #1
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <main+0xbf8>)
 8002458:	21bb      	movs	r1, #187	; 0xbb
 800245a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800245e:	f002 feeb 	bl	8005238 <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 8002462:	2000      	movs	r0, #0
 8002464:	f7fd ff14 	bl	8000290 <AT24XX_Read>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <main+0xc20>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	f000 81dd 	beq.w	8002830 <main+0xed8>

						AT24XX_Update(0, rtcHrs);
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <main+0xc20>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	2000      	movs	r0, #0
 800247e:	f7fd ff31 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002482:	2300      	movs	r3, #0
 8002484:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8002488:	e027      	b.n	80024da <main+0xb82>
 800248a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800248e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002492:	b29b      	uxth	r3, r3
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	b29b      	uxth	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd fef9 	bl	8000290 <AT24XX_Read>
 800249e:	4603      	mov	r3, r0
 80024a0:	461c      	mov	r4, r3
 80024a2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fd feed 	bl	8000290 <AT24XX_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff fa0e 	bl	80018dc <byteS>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024c8:	b211      	sxth	r1, r2
 80024ca:	4a2c      	ldr	r2, [pc, #176]	; (800257c <main+0xc24>)
 80024cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024d0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024d4:	3301      	adds	r3, #1
 80024d6:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80024da:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80024de:	2b9a      	cmp	r3, #154	; 0x9a
 80024e0:	d9d3      	bls.n	800248a <main+0xb32>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 80024e2:	239a      	movs	r3, #154	; 0x9a
 80024e4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80024e8:	e00f      	b.n	800250a <main+0xbb2>
 80024ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80024f4:	4921      	ldr	r1, [pc, #132]	; (800257c <main+0xc24>)
 80024f6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <main+0xc24>)
 80024fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002500:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002504:	3b01      	subs	r3, #1
 8002506:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800250a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1eb      	bne.n	80024ea <main+0xb92>
						hT[0] = (uint16_t) (temperature * 10);
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <main+0xbe8>)
 8002514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <main+0xc0c>)
 800251e:	f016 fe6b 	bl	80191f8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f017 f93d 	bl	80197a8 <__aeabi_d2uiz>
 800252e:	4603      	mov	r3, r0
 8002530:	b29b      	uxth	r3, r3
 8002532:	b21a      	sxth	r2, r3
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <main+0xc24>)
 8002536:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800253e:	e04e      	b.n	80025de <main+0xc86>
 8002540:	20000578 	.word	0x20000578
 8002544:	c0240000 	.word	0xc0240000
 8002548:	0805234c 	.word	0x0805234c
 800254c:	00ffa500 	.word	0x00ffa500
 8002550:	08029c50 	.word	0x08029c50
 8002554:	20000580 	.word	0x20000580
 8002558:	20000588 	.word	0x20000588
 800255c:	20000590 	.word	0x20000590
 8002560:	08052354 	.word	0x08052354
 8002564:	40240000 	.word	0x40240000
 8002568:	200005ba 	.word	0x200005ba
 800256c:	200005b8 	.word	0x200005b8
 8002570:	0805235c 	.word	0x0805235c
 8002574:	08052364 	.word	0x08052364
 8002578:	2000056f 	.word	0x2000056f
 800257c:	200005bc 	.word	0x200005bc
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8002580:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002584:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002588:	b29b      	uxth	r3, r3
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	b29c      	uxth	r4, r3
 800258e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002592:	4a86      	ldr	r2, [pc, #536]	; (80027ac <main+0xe54>)
 8002594:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002598:	b29b      	uxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f982 	bl	80018a4 <byteL>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7fd fe9d 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80025aa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80025b6:	b29c      	uxth	r4, r3
 80025b8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025bc:	4a7b      	ldr	r2, [pc, #492]	; (80027ac <main+0xe54>)
 80025be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f97a 	bl	80018be <byteH>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4619      	mov	r1, r3
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7fd fe88 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80025d4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025d8:	3301      	adds	r3, #1
 80025da:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80025de:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80025e2:	2b9a      	cmp	r3, #154	; 0x9a
 80025e4:	d9cc      	bls.n	8002580 <main+0xc28>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80025ec:	e027      	b.n	800263e <main+0xce6>
 80025ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80025f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd fe47 	bl	8000290 <AT24XX_Read>
 8002602:	4603      	mov	r3, r0
 8002604:	461c      	mov	r4, r3
 8002606:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	b29b      	uxth	r3, r3
 800260e:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002612:	b29b      	uxth	r3, r3
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd fe3b 	bl	8000290 <AT24XX_Read>
 800261a:	4603      	mov	r3, r0
 800261c:	4619      	mov	r1, r3
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff f95c 	bl	80018dc <byteS>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800262c:	b211      	sxth	r1, r2
 800262e:	4a60      	ldr	r2, [pc, #384]	; (80027b0 <main+0xe58>)
 8002630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002634:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002638:	3301      	adds	r3, #1
 800263a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800263e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002642:	2b9a      	cmp	r3, #154	; 0x9a
 8002644:	d9d3      	bls.n	80025ee <main+0xc96>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8002646:	239a      	movs	r3, #154	; 0x9a
 8002648:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800264c:	e00f      	b.n	800266e <main+0xd16>
 800264e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002658:	4955      	ldr	r1, [pc, #340]	; (80027b0 <main+0xe58>)
 800265a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800265e:	4a54      	ldr	r2, [pc, #336]	; (80027b0 <main+0xe58>)
 8002660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002664:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002668:	3b01      	subs	r3, #1
 800266a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800266e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1eb      	bne.n	800264e <main+0xcf6>
						hH[0] = (uint16_t) (humidity * 10);
 8002676:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <main+0xe5c>)
 8002678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <main+0xe60>)
 8002682:	f016 fdb9 	bl	80191f8 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f017 f88b 	bl	80197a8 <__aeabi_d2uiz>
 8002692:	4603      	mov	r3, r0
 8002694:	b29b      	uxth	r3, r3
 8002696:	b21a      	sxth	r2, r3
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <main+0xe58>)
 800269a:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 800269c:	2300      	movs	r3, #0
 800269e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80026a2:	e02e      	b.n	8002702 <main+0xdaa>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80026a4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	b29c      	uxth	r4, r3
 80026b2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026b6:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <main+0xe58>)
 80026b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f8f0 	bl	80018a4 <byteL>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4619      	mov	r1, r3
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7fd fe0b 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80026ce:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 80026da:	b29c      	uxth	r4, r3
 80026dc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026e0:	4a33      	ldr	r2, [pc, #204]	; (80027b0 <main+0xe58>)
 80026e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f8e8 	bl	80018be <byteH>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4619      	mov	r1, r3
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7fd fdf6 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80026f8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80026fc:	3301      	adds	r3, #1
 80026fe:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8002702:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002706:	2b9a      	cmp	r3, #154	; 0x9a
 8002708:	d9cc      	bls.n	80026a4 <main+0xd4c>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800270a:	2300      	movs	r3, #0
 800270c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002710:	e027      	b.n	8002762 <main+0xe0a>
 8002712:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002716:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800271a:	b29b      	uxth	r3, r3
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fdb5 	bl	8000290 <AT24XX_Read>
 8002726:	4603      	mov	r3, r0
 8002728:	461c      	mov	r4, r3
 800272a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	b29b      	uxth	r3, r3
 8002732:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002736:	b29b      	uxth	r3, r3
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd fda9 	bl	8000290 <AT24XX_Read>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff f8ca 	bl	80018dc <byteS>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002750:	b211      	sxth	r1, r2
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <main+0xe64>)
 8002754:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002758:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800275c:	3301      	adds	r3, #1
 800275e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002762:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002766:	2b9a      	cmp	r3, #154	; 0x9a
 8002768:	d9d3      	bls.n	8002712 <main+0xdba>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 800276a:	239a      	movs	r3, #154	; 0x9a
 800276c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002770:	e00f      	b.n	8002792 <main+0xe3a>
 8002772:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800277c:	490f      	ldr	r1, [pc, #60]	; (80027bc <main+0xe64>)
 800277e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <main+0xe64>)
 8002784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002788:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800278c:	3b01      	subs	r3, #1
 800278e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002792:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1eb      	bne.n	8002772 <main+0xe1a>
						hP[0] = (uint16_t)pressure;
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <main+0xe68>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <main+0xe64>)
 80027a2:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80027aa:	e03a      	b.n	8002822 <main+0xeca>
 80027ac:	200005bc 	.word	0x200005bc
 80027b0:	200006f4 	.word	0x200006f4
 80027b4:	20000588 	.word	0x20000588
 80027b8:	40240000 	.word	0x40240000
 80027bc:	2000082c 	.word	0x2000082c
 80027c0:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80027c4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027c8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	b29c      	uxth	r4, r3
 80027d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027d6:	4abc      	ldr	r2, [pc, #752]	; (8002ac8 <main+0x1170>)
 80027d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff f860 	bl	80018a4 <byteL>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7fd fd7b 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80027ee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 80027fa:	b29c      	uxth	r4, r3
 80027fc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002800:	4ab1      	ldr	r2, [pc, #708]	; (8002ac8 <main+0x1170>)
 8002802:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f858 	bl	80018be <byteH>
 800280e:	4603      	mov	r3, r0
 8002810:	4619      	mov	r1, r3
 8002812:	4620      	mov	r0, r4
 8002814:	f7fd fd66 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002818:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800281c:	3301      	adds	r3, #1
 800281e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8002822:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002826:	2b9a      	cmp	r3, #154	; 0x9a
 8002828:	d9cc      	bls.n	80027c4 <main+0xe6c>
						}

						viewGraphs = 0;
 800282a:	4ba8      	ldr	r3, [pc, #672]	; (8002acc <main+0x1174>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002830:	23ff      	movs	r3, #255	; 0xff
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2301      	movs	r3, #1
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2381      	movs	r3, #129	; 0x81
 800283a:	229d      	movs	r2, #157	; 0x9d
 800283c:	21bd      	movs	r1, #189	; 0xbd
 800283e:	2002      	movs	r0, #2
 8002840:	f001 fd46 	bl	80042d0 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002844:	4ba2      	ldr	r3, [pc, #648]	; (8002ad0 <main+0x1178>)
 8002846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	4ba1      	ldr	r3, [pc, #644]	; (8002ad4 <main+0x117c>)
 8002850:	f016 fcd2 	bl	80191f8 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f016 ff7c 	bl	8019758 <__aeabi_d2iz>
 8002860:	4603      	mov	r3, r0
 8002862:	b21b      	sxth	r3, r3
 8002864:	b298      	uxth	r0, r3
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2300      	movs	r3, #0
 800286c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002870:	21e2      	movs	r1, #226	; 0xe2
 8002872:	f7fe ffeb 	bl	800184c <map>
 8002876:	ec53 2b10 	vmov	r2, r3, d0
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f016 ff6b 	bl	8019758 <__aeabi_d2iz>
 8002882:	4603      	mov	r3, r0
 8002884:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap < 0) valMap = 0;
 8002888:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800288c:	2b00      	cmp	r3, #0
 800288e:	da02      	bge.n	8002896 <main+0xf3e>
 8002890:	2300      	movs	r3, #0
 8002892:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap > 127) valMap = 127;
 8002896:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800289a:	2b7f      	cmp	r3, #127	; 0x7f
 800289c:	dd02      	ble.n	80028a4 <main+0xf4c>
 800289e:	237f      	movs	r3, #127	; 0x7f
 80028a0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80028a4:	2300      	movs	r3, #0
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2301      	movs	r3, #1
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f240 133d 	movw	r3, #317	; 0x13d
 80028b0:	229e      	movs	r2, #158	; 0x9e
 80028b2:	21bf      	movs	r1, #191	; 0xbf
 80028b4:	209e      	movs	r0, #158	; 0x9e
 80028b6:	f001 fba3 	bl	8004000 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028ba:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d023      	beq.n	800290a <main+0xfb2>
 80028c2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80028c6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028ca:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028cc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80028d0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028de:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80028e2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	2100      	movs	r1, #0
 80028f0:	f001 fa65 	bl	8003dbe <RGB>
 80028f4:	4603      	mov	r3, r0
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	2301      	movs	r3, #1
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f240 133d 	movw	r3, #317	; 0x13d
 8002900:	229e      	movs	r2, #158	; 0x9e
 8002902:	4621      	mov	r1, r4
 8002904:	209e      	movs	r0, #158	; 0x9e
 8002906:	f001 fb7b 	bl	8004000 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 800290a:	23ff      	movs	r3, #255	; 0xff
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	2301      	movs	r3, #1
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2381      	movs	r3, #129	; 0x81
 8002914:	229d      	movs	r2, #157	; 0x9d
 8002916:	21bd      	movs	r1, #189	; 0xbd
 8002918:	20a1      	movs	r0, #161	; 0xa1
 800291a:	f001 fcd9 	bl	80042d0 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 800291e:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <main+0x1180>)
 8002920:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <main+0x117c>)
 800292a:	f016 fc65 	bl	80191f8 <__aeabi_dmul>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f016 ff0f 	bl	8019758 <__aeabi_d2iz>
 800293a:	4603      	mov	r3, r0
 800293c:	b21b      	sxth	r3, r3
 800293e:	b298      	uxth	r0, r3
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800294a:	2150      	movs	r1, #80	; 0x50
 800294c:	f7fe ff7e 	bl	800184c <map>
 8002950:	ec53 2b10 	vmov	r2, r3, d0
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f016 fefe 	bl	8019758 <__aeabi_d2iz>
 800295c:	4603      	mov	r3, r0
 800295e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap < 0) valMap = 0;
 8002962:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002966:	2b00      	cmp	r3, #0
 8002968:	da02      	bge.n	8002970 <main+0x1018>
 800296a:	2300      	movs	r3, #0
 800296c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap > 127) valMap = 127;
 8002970:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002974:	2b7f      	cmp	r3, #127	; 0x7f
 8002976:	dd02      	ble.n	800297e <main+0x1026>
 8002978:	237f      	movs	r3, #127	; 0x7f
 800297a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800297e:	2300      	movs	r3, #0
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2301      	movs	r3, #1
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f240 133d 	movw	r3, #317	; 0x13d
 800298a:	f240 123d 	movw	r2, #317	; 0x13d
 800298e:	21bf      	movs	r1, #191	; 0xbf
 8002990:	f240 103d 	movw	r0, #317	; 0x13d
 8002994:	f001 fb34 	bl	8004000 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002998:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800299c:	2b00      	cmp	r3, #0
 800299e:	d025      	beq.n	80029ec <main+0x1094>
 80029a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80029a4:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80029a8:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029aa:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80029ae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029bc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80029c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	2100      	movs	r1, #0
 80029ce:	f001 f9f6 	bl	8003dbe <RGB>
 80029d2:	4603      	mov	r3, r0
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	2301      	movs	r3, #1
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f240 133d 	movw	r3, #317	; 0x13d
 80029de:	f240 123d 	movw	r2, #317	; 0x13d
 80029e2:	4621      	mov	r1, r4
 80029e4:	f240 103d 	movw	r0, #317	; 0x13d
 80029e8:	f001 fb0a 	bl	8004000 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80029ec:	23ff      	movs	r3, #255	; 0xff
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2301      	movs	r3, #1
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2381      	movs	r3, #129	; 0x81
 80029f6:	229d      	movs	r2, #157	; 0x9d
 80029f8:	21bd      	movs	r1, #189	; 0xbd
 80029fa:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80029fe:	f001 fc67 	bl	80042d0 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <main+0x1184>)
 8002a04:	8818      	ldrh	r0, [r3, #0]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f240 4229 	movw	r2, #1065	; 0x429
 8002a10:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002a14:	f7fe ff1a 	bl	800184c <map>
 8002a18:	ec53 2b10 	vmov	r2, r3, d0
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f016 fe9a 	bl	8019758 <__aeabi_d2iz>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap < 0) valMap = 0;
 8002a2a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da02      	bge.n	8002a38 <main+0x10e0>
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					if (valMap > 127) valMap = 127;
 8002a38:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3e:	dd02      	ble.n	8002a46 <main+0x10ee>
 8002a40:	237f      	movs	r3, #127	; 0x7f
 8002a42:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002a46:	2300      	movs	r3, #0
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	f240 133d 	movw	r3, #317	; 0x13d
 8002a52:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002a56:	21bf      	movs	r1, #191	; 0xbf
 8002a58:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002a5c:	f001 fad0 	bl	8004000 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a60:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d025      	beq.n	8002ab4 <main+0x115c>
 8002a68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002a6c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002a70:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a72:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a76:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a84:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002a88:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	2100      	movs	r1, #0
 8002a96:	f001 f992 	bl	8003dbe <RGB>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	f240 133d 	movw	r3, #317	; 0x13d
 8002aa6:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002aaa:	4621      	mov	r1, r4
 8002aac:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002ab0:	f001 faa6 	bl	8004000 <LCD_Line>

					if (!viewGraphs) {
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <main+0x1174>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 8192 	bne.w	8002de2 <main+0x148a>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002ac4:	e07b      	b.n	8002bbe <main+0x1266>
 8002ac6:	bf00      	nop
 8002ac8:	2000082c 	.word	0x2000082c
 8002acc:	2000056c 	.word	0x2000056c
 8002ad0:	20000578 	.word	0x20000578
 8002ad4:	40240000 	.word	0x40240000
 8002ad8:	20000588 	.word	0x20000588
 8002adc:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002ae0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002ae4:	4ab3      	ldr	r2, [pc, #716]	; (8002db4 <main+0x145c>)
 8002ae6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002aea:	b298      	uxth	r0, r3
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2300      	movs	r3, #0
 8002af2:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002af6:	21e2      	movs	r1, #226	; 0xe2
 8002af8:	f7fe fea8 	bl	800184c <map>
 8002afc:	ec53 2b10 	vmov	r2, r3, d0
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f016 fe28 	bl	8019758 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap < 0) valMap = 0;
 8002b0e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da02      	bge.n	8002b1c <main+0x11c4>
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap > 127) valMap = 127;
 8002b1c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b20:	2b7f      	cmp	r3, #127	; 0x7f
 8002b22:	dd02      	ble.n	8002b2a <main+0x11d2>
 8002b24:	237f      	movs	r3, #127	; 0x7f
 8002b26:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002b2a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b2e:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b32:	b298      	uxth	r0, r3
 8002b34:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b38:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2301      	movs	r3, #1
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f240 133d 	movw	r3, #317	; 0x13d
 8002b4a:	21bf      	movs	r1, #191	; 0xbf
 8002b4c:	f001 fa58 	bl	8004000 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b50:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02d      	beq.n	8002bb4 <main+0x125c>
 8002b58:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b5c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b60:	b29c      	uxth	r4, r3
 8002b62:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002b66:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b6a:	b29d      	uxth	r5, r3
 8002b6c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002b70:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b74:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b76:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b7a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b88:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002b8c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f001 f910 	bl	8003dbe <RGB>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f240 133d 	movw	r3, #317	; 0x13d
 8002baa:	4632      	mov	r2, r6
 8002bac:	4629      	mov	r1, r5
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f001 fa26 	bl	8004000 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002bb4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002bbe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002bc2:	2b9a      	cmp	r3, #154	; 0x9a
 8002bc4:	d98c      	bls.n	8002ae0 <main+0x1188>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002bcc:	e06e      	b.n	8002cac <main+0x1354>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002bce:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002bd2:	4a79      	ldr	r2, [pc, #484]	; (8002db8 <main+0x1460>)
 8002bd4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bd8:	b298      	uxth	r0, r3
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002be4:	2150      	movs	r1, #80	; 0x50
 8002be6:	f7fe fe31 	bl	800184c <map>
 8002bea:	ec53 2b10 	vmov	r2, r3, d0
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f016 fdb1 	bl	8019758 <__aeabi_d2iz>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap < 0) valMap = 0;
 8002bfc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da02      	bge.n	8002c0a <main+0x12b2>
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap > 127) valMap = 127;
 8002c0a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c10:	dd02      	ble.n	8002c18 <main+0x12c0>
 8002c12:	237f      	movs	r3, #127	; 0x7f
 8002c14:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002c18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c1c:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c20:	b298      	uxth	r0, r3
 8002c22:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c26:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	2301      	movs	r3, #1
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f240 133d 	movw	r3, #317	; 0x13d
 8002c38:	21bf      	movs	r1, #191	; 0xbf
 8002c3a:	f001 f9e1 	bl	8004000 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c3e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02d      	beq.n	8002ca2 <main+0x134a>
 8002c46:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c4a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c4e:	b29c      	uxth	r4, r3
 8002c50:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002c54:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c58:	b29d      	uxth	r5, r3
 8002c5a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c5e:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c62:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c64:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c68:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c76:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002c7a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	2100      	movs	r1, #0
 8002c88:	f001 f899 	bl	8003dbe <RGB>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	2301      	movs	r3, #1
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f240 133d 	movw	r3, #317	; 0x13d
 8002c98:	4632      	mov	r2, r6
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f001 f9af 	bl	8004000 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002ca2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002cac:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002cb0:	2b9a      	cmp	r3, #154	; 0x9a
 8002cb2:	d98c      	bls.n	8002bce <main+0x1276>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002cba:	e073      	b.n	8002da4 <main+0x144c>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002cbc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002cc0:	4a3e      	ldr	r2, [pc, #248]	; (8002dbc <main+0x1464>)
 8002cc2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cc6:	b298      	uxth	r0, r3
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f240 4229 	movw	r2, #1065	; 0x429
 8002cd2:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002cd6:	f7fe fdb9 	bl	800184c <map>
 8002cda:	ec53 2b10 	vmov	r2, r3, d0
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f016 fd39 	bl	8019758 <__aeabi_d2iz>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap < 0) valMap = 0;
 8002cec:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da02      	bge.n	8002cfa <main+0x13a2>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							if (valMap > 127) valMap = 127;
 8002cfa:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002d00:	dd02      	ble.n	8002d08 <main+0x13b0>
 8002d02:	237f      	movs	r3, #127	; 0x7f
 8002d04:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8002d08:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d0c:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d10:	3301      	adds	r3, #1
 8002d12:	b298      	uxth	r0, r3
 8002d14:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d18:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2301      	movs	r3, #1
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f240 133d 	movw	r3, #317	; 0x13d
 8002d2c:	21bf      	movs	r1, #191	; 0xbf
 8002d2e:	f001 f967 	bl	8004000 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d32:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d02f      	beq.n	8002d9a <main+0x1442>
 8002d3a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d3e:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d42:	3301      	adds	r3, #1
 8002d44:	b29c      	uxth	r4, r3
 8002d46:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002d4a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d4e:	b29d      	uxth	r5, r3
 8002d50:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d54:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d5c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002d60:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d6e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8002d72:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f001 f81d 	bl	8003dbe <RGB>
 8002d84:	4603      	mov	r3, r0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f240 133d 	movw	r3, #317	; 0x13d
 8002d90:	4632      	mov	r2, r6
 8002d92:	4629      	mov	r1, r5
 8002d94:	4620      	mov	r0, r4
 8002d96:	f001 f933 	bl	8004000 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002d9a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002da4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002da8:	2b9a      	cmp	r3, #154	; 0x9a
 8002daa:	d987      	bls.n	8002cbc <main+0x1364>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002db2:	e00e      	b.n	8002dd2 <main+0x147a>
 8002db4:	200005bc 	.word	0x200005bc
 8002db8:	200006f4 	.word	0x200006f4
 8002dbc:	2000082c 	.word	0x2000082c
 8002dc0:	4a87      	ldr	r2, [pc, #540]	; (8002fe0 <main+0x1688>)
 8002dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc6:	6353      	str	r3, [r2, #52]	; 0x34
 8002dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dda:	d9f1      	bls.n	8002dc0 <main+0x1468>
						viewGraphs = 1;
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <main+0x168c>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8002de2:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <main+0x1690>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8385 	beq.w	80034f6 <main+0x1b9e>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8002dec:	2202      	movs	r2, #2
 8002dee:	497f      	ldr	r1, [pc, #508]	; (8002fec <main+0x1694>)
 8002df0:	487f      	ldr	r0, [pc, #508]	; (8002ff0 <main+0x1698>)
 8002df2:	f01b fbdd 	bl	801e5b0 <memcmp>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d17c      	bne.n	8002ef6 <main+0x159e>

					char val[2];

					val[0] = rx_buffer[2];
 8002dfc:	4b7c      	ldr	r3, [pc, #496]	; (8002ff0 <main+0x1698>)
 8002dfe:	789b      	ldrb	r3, [r3, #2]
 8002e00:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[3];
 8002e02:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <main+0x1698>)
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	777b      	strb	r3, [r7, #29]
					DS3231_setHrs(atoi(val));
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f016 ff1c 	bl	8019c4a <atoi>
 8002e12:	4603      	mov	r3, r0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f936 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8002e1c:	4b74      	ldr	r3, [pc, #464]	; (8002ff0 <main+0x1698>)
 8002e1e:	791b      	ldrb	r3, [r3, #4]
 8002e20:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[5];
 8002e22:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <main+0x1698>)
 8002e24:	795b      	ldrb	r3, [r3, #5]
 8002e26:	777b      	strb	r3, [r7, #29]
					DS3231_setMin(atoi(val));
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f016 ff0c 	bl	8019c4a <atoi>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f906 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	773b      	strb	r3, [r7, #28]
					val[1] = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	777b      	strb	r3, [r7, #29]
					DS3231_setSec(atoi(val));
 8002e44:	f107 031c 	add.w	r3, r7, #28
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f016 fefe 	bl	8019c4a <atoi>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe f8d8 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 8002e58:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <main+0x1698>)
 8002e5a:	799b      	ldrb	r3, [r3, #6]
 8002e5c:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[7];
 8002e5e:	4b64      	ldr	r3, [pc, #400]	; (8002ff0 <main+0x1698>)
 8002e60:	79db      	ldrb	r3, [r3, #7]
 8002e62:	777b      	strb	r3, [r7, #29]
					DS3231_setDate(atoi(val));
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f016 feee 	bl	8019c4a <atoi>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe f948 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8002e78:	4b5d      	ldr	r3, [pc, #372]	; (8002ff0 <main+0x1698>)
 8002e7a:	7a1b      	ldrb	r3, [r3, #8]
 8002e7c:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[9];
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <main+0x1698>)
 8002e80:	7a5b      	ldrb	r3, [r3, #9]
 8002e82:	777b      	strb	r3, [r7, #29]
					DS3231_setMonth(atoi(val));
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f016 fede 	bl	8019c4a <atoi>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f958 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8002e98:	4b55      	ldr	r3, [pc, #340]	; (8002ff0 <main+0x1698>)
 8002e9a:	7a9b      	ldrb	r3, [r3, #10]
 8002e9c:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[11];
 8002e9e:	4b54      	ldr	r3, [pc, #336]	; (8002ff0 <main+0x1698>)
 8002ea0:	7adb      	ldrb	r3, [r3, #11]
 8002ea2:	777b      	strb	r3, [r7, #29]
					DS3231_setYear(atoi(val));
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f016 fece 	bl	8019c4a <atoi>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f968 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <main+0x1698>)
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
 8002ebc:	777b      	strb	r3, [r7, #29]
					DS3231_setDay(atoi(val));
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f016 fec1 	bl	8019c4a <atoi>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe f8fb 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ed8:	e008      	b.n	8002eec <main+0x1594>
 8002eda:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <main+0x1688>)
 8002edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d9f1      	bls.n	8002eda <main+0x1582>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	493e      	ldr	r1, [pc, #248]	; (8002ff4 <main+0x169c>)
 8002efa:	483d      	ldr	r0, [pc, #244]	; (8002ff0 <main+0x1698>)
 8002efc:	f01b fb58 	bl	801e5b0 <memcmp>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d122      	bne.n	8002f4c <main+0x15f4>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002f0c:	e00a      	b.n	8002f24 <main+0x15cc>
 8002f0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd f9e5 	bl	80002e4 <AT24XX_Update>
 8002f1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002f24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2c:	d3ef      	bcc.n	8002f0e <main+0x15b6>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <main+0x16a0>)
 8002f30:	f107 0420 	add.w	r4, r7, #32
 8002f34:	461d      	mov	r5, r3
 8002f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f3a:	682b      	ldr	r3, [r5, #0]
 8002f3c:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002f3e:	f107 0120 	add.w	r1, r7, #32
 8002f42:	2364      	movs	r3, #100	; 0x64
 8002f44:	2214      	movs	r2, #20
 8002f46:	482d      	ldr	r0, [pc, #180]	; (8002ffc <main+0x16a4>)
 8002f48:	f012 fe7b 	bl	8015c42 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	492c      	ldr	r1, [pc, #176]	; (8003000 <main+0x16a8>)
 8002f50:	4827      	ldr	r0, [pc, #156]	; (8002ff0 <main+0x1698>)
 8002f52:	f01b fb2d 	bl	801e5b0 <memcmp>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 82b7 	bne.w	80034cc <main+0x1b74>

					char valT[4] = { 0 };
 8002f5e:	2300      	movs	r3, #0
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002f68:	e00f      	b.n	8002f8a <main+0x1632>
 8002f6a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f74:	491e      	ldr	r1, [pc, #120]	; (8002ff0 <main+0x1698>)
 8002f76:	5c8a      	ldrb	r2, [r1, r2]
 8002f78:	33c0      	adds	r3, #192	; 0xc0
 8002f7a:	443b      	add	r3, r7
 8002f7c:	f803 2c7c 	strb.w	r2, [r3, #-124]
 8002f80:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f84:	3301      	adds	r3, #1
 8002f86:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002f8a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d9eb      	bls.n	8002f6a <main+0x1612>

					temperatureRemote = atoi(valT);
 8002f92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f96:	4618      	mov	r0, r3
 8002f98:	f016 fe57 	bl	8019c4a <atoi>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f016 f8c0 	bl	8019124 <__aeabi_i2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4916      	ldr	r1, [pc, #88]	; (8003004 <main+0x16ac>)
 8002faa:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <main+0x16ac>)
 8002fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <main+0x16b0>)
 8002fba:	f016 fa47 	bl	801944c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4910      	ldr	r1, [pc, #64]	; (8003004 <main+0x16ac>)
 8002fc4:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <main+0x16b4>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8002fdc:	e028      	b.n	8003030 <main+0x16d8>
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	2000056c 	.word	0x2000056c
 8002fe8:	20000974 	.word	0x20000974
 8002fec:	0805236c 	.word	0x0805236c
 8002ff0:	20000964 	.word	0x20000964
 8002ff4:	08052370 	.word	0x08052370
 8002ff8:	080523a8 	.word	0x080523a8
 8002ffc:	200004d8 	.word	0x200004d8
 8003000:	08052374 	.word	0x08052374
 8003004:	20000598 	.word	0x20000598
 8003008:	40240000 	.word	0x40240000
 800300c:	080522f4 	.word	0x080522f4
 8003010:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003014:	1d9a      	adds	r2, r3, #6
 8003016:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800301a:	499d      	ldr	r1, [pc, #628]	; (8003290 <main+0x1938>)
 800301c:	5c8a      	ldrb	r2, [r1, r2]
 800301e:	33c0      	adds	r3, #192	; 0xc0
 8003020:	443b      	add	r3, r7
 8003022:	f803 2c80 	strb.w	r2, [r3, #-128]
 8003026:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800302a:	3301      	adds	r3, #1
 800302c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8003030:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003034:	2b02      	cmp	r3, #2
 8003036:	d9eb      	bls.n	8003010 <main+0x16b8>

					humidityRemote = atoi(valH);
 8003038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800303c:	4618      	mov	r0, r3
 800303e:	f016 fe04 	bl	8019c4a <atoi>
 8003042:	4603      	mov	r3, r0
 8003044:	4618      	mov	r0, r3
 8003046:	f016 f86d 	bl	8019124 <__aeabi_i2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4991      	ldr	r1, [pc, #580]	; (8003294 <main+0x193c>)
 8003050:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 8003054:	4b8f      	ldr	r3, [pc, #572]	; (8003294 <main+0x193c>)
 8003056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	4b8e      	ldr	r3, [pc, #568]	; (8003298 <main+0x1940>)
 8003060:	f016 f9f4 	bl	801944c <__aeabi_ddiv>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	498a      	ldr	r1, [pc, #552]	; (8003294 <main+0x193c>)
 800306a:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800306e:	4b8b      	ldr	r3, [pc, #556]	; (800329c <main+0x1944>)
 8003070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003074:	4b8a      	ldr	r3, [pc, #552]	; (80032a0 <main+0x1948>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f016 fb25 	bl	80196c8 <__aeabi_dcmpeq>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d115      	bne.n	80030b0 <main+0x1758>
 8003084:	4b85      	ldr	r3, [pc, #532]	; (800329c <main+0x1944>)
 8003086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <main+0x194c>)
 8003090:	f016 fb24 	bl	80196dc <__aeabi_dcmplt>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <main+0x1758>
 800309a:	4b80      	ldr	r3, [pc, #512]	; (800329c <main+0x1944>)
 800309c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <main+0x1950>)
 80030a6:	f016 fb37 	bl	8019718 <__aeabi_dcmpgt>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d118      	bne.n	80030e2 <main+0x178a>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030b0:	4b78      	ldr	r3, [pc, #480]	; (8003294 <main+0x193c>)
 80030b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b6:	4b7d      	ldr	r3, [pc, #500]	; (80032ac <main+0x1954>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80030bc:	f016 fb04 	bl	80196c8 <__aeabi_dcmpeq>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 8202 	bne.w	80034cc <main+0x1b74>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030c8:	4b72      	ldr	r3, [pc, #456]	; (8003294 <main+0x193c>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	f016 fb1f 	bl	8019718 <__aeabi_dcmpgt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 81f5 	beq.w	80034cc <main+0x1b74>

						remoteSensorLastUpdate = 0;
 80030e2:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <main+0x1958>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 80030e8:	4b72      	ldr	r3, [pc, #456]	; (80032b4 <main+0x195c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030f2:	4971      	ldr	r1, [pc, #452]	; (80032b8 <main+0x1960>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f017 fc5f 	bl	801a9b8 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80030fa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80030fe:	2300      	movs	r3, #0
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2301      	movs	r3, #1
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <main+0x1964>)
 8003108:	2128      	movs	r1, #40	; 0x28
 800310a:	f240 1077 	movw	r0, #375	; 0x177
 800310e:	f002 f893 	bl	8005238 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <main+0x1948>)
 8003114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <main+0x1968>)
 800311e:	f016 fae7 	bl	80196f0 <__aeabi_dcmple>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d014      	beq.n	8003152 <main+0x17fa>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <main+0x1948>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003132:	4964      	ldr	r1, [pc, #400]	; (80032c4 <main+0x196c>)
 8003134:	f017 fc40 	bl	801a9b8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003138:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800313c:	2300      	movs	r3, #0
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	2301      	movs	r3, #1
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4b5d      	ldr	r3, [pc, #372]	; (80032bc <main+0x1964>)
 8003146:	215a      	movs	r1, #90	; 0x5a
 8003148:	f240 1061 	movw	r0, #353	; 0x161
 800314c:	f002 f874 	bl	8005238 <LCD_Font>
 8003150:	e076      	b.n	8003240 <main+0x18e8>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003152:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <main+0x1948>)
 8003154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f016 fabc 	bl	80196dc <__aeabi_dcmplt>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01f      	beq.n	80031aa <main+0x1852>
 800316a:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <main+0x1948>)
 800316c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	4b52      	ldr	r3, [pc, #328]	; (80032c0 <main+0x1968>)
 8003176:	f016 facf 	bl	8019718 <__aeabi_dcmpgt>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d014      	beq.n	80031aa <main+0x1852>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <main+0x1948>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800318a:	494e      	ldr	r1, [pc, #312]	; (80032c4 <main+0x196c>)
 800318c:	f017 fc14 	bl	801a9b8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003190:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003194:	2300      	movs	r3, #0
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	2301      	movs	r3, #1
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4b47      	ldr	r3, [pc, #284]	; (80032bc <main+0x1964>)
 800319e:	215a      	movs	r1, #90	; 0x5a
 80031a0:	f240 1081 	movw	r0, #385	; 0x181
 80031a4:	f002 f848 	bl	8005238 <LCD_Font>
 80031a8:	e04a      	b.n	8003240 <main+0x18e8>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <main+0x1948>)
 80031ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	f016 faae 	bl	8019718 <__aeabi_dcmpgt>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01f      	beq.n	8003202 <main+0x18aa>
 80031c2:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <main+0x1948>)
 80031c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <main+0x1940>)
 80031ce:	f016 fa85 	bl	80196dc <__aeabi_dcmplt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d014      	beq.n	8003202 <main+0x18aa>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <main+0x1948>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80031e2:	4939      	ldr	r1, [pc, #228]	; (80032c8 <main+0x1970>)
 80031e4:	f017 fbe8 	bl	801a9b8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80031e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031ec:	2300      	movs	r3, #0
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	2301      	movs	r3, #1
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <main+0x1964>)
 80031f6:	215a      	movs	r1, #90	; 0x5a
 80031f8:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80031fc:	f002 f81c 	bl	8005238 <LCD_Font>
 8003200:	e01e      	b.n	8003240 <main+0x18e8>
						}
						else if (temperatureRemoteLast >= 10) {
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <main+0x1948>)
 8003204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <main+0x1940>)
 800320e:	f016 fa79 	bl	8019704 <__aeabi_dcmpge>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <main+0x18e8>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <main+0x1948>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003222:	4929      	ldr	r1, [pc, #164]	; (80032c8 <main+0x1970>)
 8003224:	f017 fbc8 	bl	801a9b8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800322c:	2300      	movs	r3, #0
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	2301      	movs	r3, #1
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4b21      	ldr	r3, [pc, #132]	; (80032bc <main+0x1964>)
 8003236:	215a      	movs	r1, #90	; 0x5a
 8003238:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800323c:	f001 fffc 	bl	8005238 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <main+0x1944>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	4916      	ldr	r1, [pc, #88]	; (80032a0 <main+0x1948>)
 8003248:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <main+0x1948>)
 800324e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <main+0x1968>)
 8003258:	f016 fa4a 	bl	80196f0 <__aeabi_dcmple>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d034      	beq.n	80032cc <main+0x1974>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <main+0x1948>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800326c:	4915      	ldr	r1, [pc, #84]	; (80032c4 <main+0x196c>)
 800326e:	f017 fba3 	bl	801a9b8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003272:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	2301      	movs	r3, #1
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <main+0x1964>)
 8003282:	215a      	movs	r1, #90	; 0x5a
 8003284:	f240 1061 	movw	r0, #353	; 0x161
 8003288:	f001 ffd6 	bl	8005238 <LCD_Font>
 800328c:	e098      	b.n	80033c0 <main+0x1a68>
 800328e:	bf00      	nop
 8003290:	20000964 	.word	0x20000964
 8003294:	200005a8 	.word	0x200005a8
 8003298:	40240000 	.word	0x40240000
 800329c:	20000598 	.word	0x20000598
 80032a0:	200005a0 	.word	0x200005a0
 80032a4:	40554000 	.word	0x40554000
 80032a8:	c0440000 	.word	0xc0440000
 80032ac:	200005b0 	.word	0x200005b0
 80032b0:	20000004 	.word	0x20000004
 80032b4:	20000000 	.word	0x20000000
 80032b8:	0805232c 	.word	0x0805232c
 80032bc:	08029c50 	.word	0x08029c50
 80032c0:	c0240000 	.word	0xc0240000
 80032c4:	08052378 	.word	0x08052378
 80032c8:	08052380 	.word	0x08052380
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80032cc:	4bac      	ldr	r3, [pc, #688]	; (8003580 <main+0x1c28>)
 80032ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	f016 f9ff 	bl	80196dc <__aeabi_dcmplt>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <main+0x19ce>
 80032e4:	4ba6      	ldr	r3, [pc, #664]	; (8003580 <main+0x1c28>)
 80032e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	4ba5      	ldr	r3, [pc, #660]	; (8003584 <main+0x1c2c>)
 80032f0:	f016 fa12 	bl	8019718 <__aeabi_dcmpgt>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d015      	beq.n	8003326 <main+0x19ce>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80032fa:	4ba1      	ldr	r3, [pc, #644]	; (8003580 <main+0x1c28>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003304:	49a0      	ldr	r1, [pc, #640]	; (8003588 <main+0x1c30>)
 8003306:	f017 fb57 	bl	801a9b8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800330a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800330e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2301      	movs	r3, #1
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4b9c      	ldr	r3, [pc, #624]	; (800358c <main+0x1c34>)
 800331a:	215a      	movs	r1, #90	; 0x5a
 800331c:	f240 1081 	movw	r0, #385	; 0x181
 8003320:	f001 ff8a 	bl	8005238 <LCD_Font>
 8003324:	e04c      	b.n	80033c0 <main+0x1a68>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003326:	4b96      	ldr	r3, [pc, #600]	; (8003580 <main+0x1c28>)
 8003328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	f016 f9f0 	bl	8019718 <__aeabi_dcmpgt>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <main+0x1a28>
 800333e:	4b90      	ldr	r3, [pc, #576]	; (8003580 <main+0x1c28>)
 8003340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	4b91      	ldr	r3, [pc, #580]	; (8003590 <main+0x1c38>)
 800334a:	f016 f9c7 	bl	80196dc <__aeabi_dcmplt>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <main+0x1a28>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003354:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <main+0x1c28>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800335e:	498d      	ldr	r1, [pc, #564]	; (8003594 <main+0x1c3c>)
 8003360:	f017 fb2a 	bl	801a9b8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003364:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	2301      	movs	r3, #1
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4b86      	ldr	r3, [pc, #536]	; (800358c <main+0x1c34>)
 8003374:	215a      	movs	r1, #90	; 0x5a
 8003376:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800337a:	f001 ff5d 	bl	8005238 <LCD_Font>
 800337e:	e01f      	b.n	80033c0 <main+0x1a68>
						}
						else if (temperatureRemoteLast >= 10) {
 8003380:	4b7f      	ldr	r3, [pc, #508]	; (8003580 <main+0x1c28>)
 8003382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	4b81      	ldr	r3, [pc, #516]	; (8003590 <main+0x1c38>)
 800338c:	f016 f9ba 	bl	8019704 <__aeabi_dcmpge>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d014      	beq.n	80033c0 <main+0x1a68>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003396:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <main+0x1c28>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80033a0:	497c      	ldr	r1, [pc, #496]	; (8003594 <main+0x1c3c>)
 80033a2:	f017 fb09 	bl	801a9b8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80033a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4b75      	ldr	r3, [pc, #468]	; (800358c <main+0x1c34>)
 80033b6:	215a      	movs	r1, #90	; 0x5a
 80033b8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80033bc:	f001 ff3c 	bl	8005238 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <main+0x1c40>)
 80033c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	4b71      	ldr	r3, [pc, #452]	; (8003590 <main+0x1c38>)
 80033cc:	f016 f99a 	bl	8019704 <__aeabi_dcmpge>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d014      	beq.n	8003400 <main+0x1aa8>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80033d6:	4b70      	ldr	r3, [pc, #448]	; (8003598 <main+0x1c40>)
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80033e0:	4969      	ldr	r1, [pc, #420]	; (8003588 <main+0x1c30>)
 80033e2:	f017 fae9 	bl	801a9b8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80033e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80033ea:	2300      	movs	r3, #0
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2301      	movs	r3, #1
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4b66      	ldr	r3, [pc, #408]	; (800358c <main+0x1c34>)
 80033f4:	2128      	movs	r1, #40	; 0x28
 80033f6:	f240 1073 	movw	r0, #371	; 0x173
 80033fa:	f001 ff1d 	bl	8005238 <LCD_Font>
 80033fe:	e01e      	b.n	800343e <main+0x1ae6>
						}
						else if (humidityRemoteLast < 10) {
 8003400:	4b65      	ldr	r3, [pc, #404]	; (8003598 <main+0x1c40>)
 8003402:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	4b61      	ldr	r3, [pc, #388]	; (8003590 <main+0x1c38>)
 800340c:	f016 f966 	bl	80196dc <__aeabi_dcmplt>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d013      	beq.n	800343e <main+0x1ae6>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003416:	4b60      	ldr	r3, [pc, #384]	; (8003598 <main+0x1c40>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003420:	4959      	ldr	r1, [pc, #356]	; (8003588 <main+0x1c30>)
 8003422:	f017 fac9 	bl	801a9b8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003426:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800342a:	2300      	movs	r3, #0
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	2301      	movs	r3, #1
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4b56      	ldr	r3, [pc, #344]	; (800358c <main+0x1c34>)
 8003434:	2128      	movs	r1, #40	; 0x28
 8003436:	f240 1093 	movw	r0, #403	; 0x193
 800343a:	f001 fefd 	bl	8005238 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 800343e:	4b57      	ldr	r3, [pc, #348]	; (800359c <main+0x1c44>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	4954      	ldr	r1, [pc, #336]	; (8003598 <main+0x1c40>)
 8003446:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 800344a:	4b53      	ldr	r3, [pc, #332]	; (8003598 <main+0x1c40>)
 800344c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	4b4e      	ldr	r3, [pc, #312]	; (8003590 <main+0x1c38>)
 8003456:	f016 f955 	bl	8019704 <__aeabi_dcmpge>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <main+0x1b34>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <main+0x1c40>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800346a:	4947      	ldr	r1, [pc, #284]	; (8003588 <main+0x1c30>)
 800346c:	f017 faa4 	bl	801a9b8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003470:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	2301      	movs	r3, #1
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <main+0x1c34>)
 8003480:	2128      	movs	r1, #40	; 0x28
 8003482:	f240 1073 	movw	r0, #371	; 0x173
 8003486:	f001 fed7 	bl	8005238 <LCD_Font>
 800348a:	e01f      	b.n	80034cc <main+0x1b74>
						}
						else if (humidityRemoteLast < 10) {
 800348c:	4b42      	ldr	r3, [pc, #264]	; (8003598 <main+0x1c40>)
 800348e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <main+0x1c38>)
 8003498:	f016 f920 	bl	80196dc <__aeabi_dcmplt>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d014      	beq.n	80034cc <main+0x1b74>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <main+0x1c40>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80034ac:	4936      	ldr	r1, [pc, #216]	; (8003588 <main+0x1c30>)
 80034ae:	f017 fa83 	bl	801a9b8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80034b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80034b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2301      	movs	r3, #1
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <main+0x1c34>)
 80034c2:	2128      	movs	r1, #40	; 0x28
 80034c4:	f240 1093 	movw	r0, #403	; 0x193
 80034c8:	f001 feb6 	bl	8005238 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <main+0x1c48>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80034d8:	e009      	b.n	80034ee <main+0x1b96>
 80034da:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034de:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <main+0x1c4c>)
 80034e0:	2100      	movs	r1, #0
 80034e2:	54d1      	strb	r1, [r2, r3]
 80034e4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034e8:	3301      	adds	r3, #1
 80034ea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80034ee:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	d9f1      	bls.n	80034da <main+0x1b82>
			}

			remoteSensorLastUpdate++;
 80034f6:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <main+0x1c50>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <main+0x1c50>)
 8003500:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <main+0x1c50>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	f240 813e 	bls.w	8003788 <main+0x1e30>

				if (temperatureRemoteLast && humidityRemoteLast) {
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <main+0x1c28>)
 800350e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	f016 f8d5 	bl	80196c8 <__aeabi_dcmpeq>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 8107 	bne.w	8003734 <main+0x1ddc>
 8003526:	4b1c      	ldr	r3, [pc, #112]	; (8003598 <main+0x1c40>)
 8003528:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	f016 f8c8 	bl	80196c8 <__aeabi_dcmpeq>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 80fa 	bne.w	8003734 <main+0x1ddc>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <main+0x1c28>)
 8003542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <main+0x1c2c>)
 800354c:	f016 f8d0 	bl	80196f0 <__aeabi_dcmple>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d02a      	beq.n	80035ac <main+0x1c54>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <main+0x1c28>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003560:	4909      	ldr	r1, [pc, #36]	; (8003588 <main+0x1c30>)
 8003562:	f017 fa29 	bl	801a9b8 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003566:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800356a:	2300      	movs	r3, #0
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	2301      	movs	r3, #1
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <main+0x1c34>)
 8003574:	215a      	movs	r1, #90	; 0x5a
 8003576:	f240 1061 	movw	r0, #353	; 0x161
 800357a:	f001 fe5d 	bl	8005238 <LCD_Font>
 800357e:	e08c      	b.n	800369a <main+0x1d42>
 8003580:	200005a0 	.word	0x200005a0
 8003584:	c0240000 	.word	0xc0240000
 8003588:	08052378 	.word	0x08052378
 800358c:	08029c50 	.word	0x08029c50
 8003590:	40240000 	.word	0x40240000
 8003594:	08052380 	.word	0x08052380
 8003598:	200005b0 	.word	0x200005b0
 800359c:	200005a8 	.word	0x200005a8
 80035a0:	20000974 	.word	0x20000974
 80035a4:	20000964 	.word	0x20000964
 80035a8:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80035ac:	4b79      	ldr	r3, [pc, #484]	; (8003794 <main+0x1e3c>)
 80035ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	f016 f88f 	bl	80196dc <__aeabi_dcmplt>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01f      	beq.n	8003604 <main+0x1cac>
 80035c4:	4b73      	ldr	r3, [pc, #460]	; (8003794 <main+0x1e3c>)
 80035c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <main+0x1e40>)
 80035d0:	f016 f8a2 	bl	8019718 <__aeabi_dcmpgt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d014      	beq.n	8003604 <main+0x1cac>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035da:	4b6e      	ldr	r3, [pc, #440]	; (8003794 <main+0x1e3c>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80035e4:	496d      	ldr	r1, [pc, #436]	; (800379c <main+0x1e44>)
 80035e6:	f017 f9e7 	bl	801a9b8 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035ea:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80035ee:	2300      	movs	r3, #0
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	2301      	movs	r3, #1
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <main+0x1e48>)
 80035f8:	215a      	movs	r1, #90	; 0x5a
 80035fa:	f240 1081 	movw	r0, #385	; 0x181
 80035fe:	f001 fe1b 	bl	8005238 <LCD_Font>
 8003602:	e04a      	b.n	800369a <main+0x1d42>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003604:	4b63      	ldr	r3, [pc, #396]	; (8003794 <main+0x1e3c>)
 8003606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	f016 f881 	bl	8019718 <__aeabi_dcmpgt>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01f      	beq.n	800365c <main+0x1d04>
 800361c:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <main+0x1e3c>)
 800361e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <main+0x1e4c>)
 8003628:	f016 f858 	bl	80196dc <__aeabi_dcmplt>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d014      	beq.n	800365c <main+0x1d04>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003632:	4b58      	ldr	r3, [pc, #352]	; (8003794 <main+0x1e3c>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800363c:	495a      	ldr	r1, [pc, #360]	; (80037a8 <main+0x1e50>)
 800363e:	f017 f9bb 	bl	801a9b8 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003642:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003646:	2300      	movs	r3, #0
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2301      	movs	r3, #1
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4b54      	ldr	r3, [pc, #336]	; (80037a0 <main+0x1e48>)
 8003650:	215a      	movs	r1, #90	; 0x5a
 8003652:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003656:	f001 fdef 	bl	8005238 <LCD_Font>
 800365a:	e01e      	b.n	800369a <main+0x1d42>
					}
					else if (temperatureRemoteLast >= 10) {
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <main+0x1e3c>)
 800365e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <main+0x1e4c>)
 8003668:	f016 f84c 	bl	8019704 <__aeabi_dcmpge>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <main+0x1d42>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <main+0x1e3c>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800367c:	494a      	ldr	r1, [pc, #296]	; (80037a8 <main+0x1e50>)
 800367e:	f017 f99b 	bl	801a9b8 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003682:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003686:	2300      	movs	r3, #0
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2301      	movs	r3, #1
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <main+0x1e48>)
 8003690:	215a      	movs	r1, #90	; 0x5a
 8003692:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003696:	f001 fdcf 	bl	8005238 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 800369a:	4b44      	ldr	r3, [pc, #272]	; (80037ac <main+0x1e54>)
 800369c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <main+0x1e4c>)
 80036a6:	f016 f82d 	bl	8019704 <__aeabi_dcmpge>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d014      	beq.n	80036da <main+0x1d82>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036b0:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <main+0x1e54>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80036ba:	4938      	ldr	r1, [pc, #224]	; (800379c <main+0x1e44>)
 80036bc:	f017 f97c 	bl	801a9b8 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036c4:	2300      	movs	r3, #0
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	2301      	movs	r3, #1
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <main+0x1e48>)
 80036ce:	2128      	movs	r1, #40	; 0x28
 80036d0:	f240 1073 	movw	r0, #371	; 0x173
 80036d4:	f001 fdb0 	bl	8005238 <LCD_Font>
 80036d8:	e01e      	b.n	8003718 <main+0x1dc0>
					}
					else if (humidityRemoteLast < 10) {
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <main+0x1e54>)
 80036dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <main+0x1e4c>)
 80036e6:	f015 fff9 	bl	80196dc <__aeabi_dcmplt>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <main+0x1dc0>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036f0:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <main+0x1e54>)
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80036fa:	4928      	ldr	r1, [pc, #160]	; (800379c <main+0x1e44>)
 80036fc:	f017 f95c 	bl	801a9b8 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003700:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003704:	2300      	movs	r3, #0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2301      	movs	r3, #1
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <main+0x1e48>)
 800370e:	2128      	movs	r1, #40	; 0x28
 8003710:	f240 1093 	movw	r0, #403	; 0x193
 8003714:	f001 fd90 	bl	8005238 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003718:	491e      	ldr	r1, [pc, #120]	; (8003794 <main+0x1e3c>)
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003726:	4921      	ldr	r1, [pc, #132]	; (80037ac <main+0x1e54>)
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003734:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <main+0x1e58>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800373e:	491d      	ldr	r1, [pc, #116]	; (80037b4 <main+0x1e5c>)
 8003740:	4618      	mov	r0, r3
 8003742:	f017 f939 	bl	801a9b8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003746:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800374a:	2300      	movs	r3, #0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <main+0x1e48>)
 8003754:	2128      	movs	r1, #40	; 0x28
 8003756:	f240 1077 	movw	r0, #375	; 0x177
 800375a:	f001 fd6d 	bl	8005238 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <main+0x1e60>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003768:	4912      	ldr	r1, [pc, #72]	; (80037b4 <main+0x1e5c>)
 800376a:	4618      	mov	r0, r3
 800376c:	f017 f924 	bl	801a9b8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003770:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <main+0x1e64>)
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2301      	movs	r3, #1
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <main+0x1e48>)
 800377e:	2128      	movs	r1, #40	; 0x28
 8003780:	f240 1077 	movw	r0, #375	; 0x177
 8003784:	f001 fd58 	bl	8005238 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <main+0x1e60>)
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <main+0x1e58>)
 800378e:	701a      	strb	r2, [r3, #0]
	{
 8003790:	f7fe b9df 	b.w	8001b52 <main+0x1fa>
 8003794:	200005a0 	.word	0x200005a0
 8003798:	c0240000 	.word	0xc0240000
 800379c:	08052378 	.word	0x08052378
 80037a0:	08029c50 	.word	0x08029c50
 80037a4:	40240000 	.word	0x40240000
 80037a8:	08052380 	.word	0x08052380
 80037ac:	200005b0 	.word	0x200005b0
 80037b0:	20000000 	.word	0x20000000
 80037b4:	0805232c 	.word	0x0805232c
 80037b8:	2000056d 	.word	0x2000056d
 80037bc:	00ffa500 	.word	0x00ffa500

080037c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b094      	sub	sp, #80	; 0x50
 80037c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037c6:	f107 0320 	add.w	r3, r7, #32
 80037ca:	2230      	movs	r2, #48	; 0x30
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f016 fa6a 	bl	8019ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <SystemClock_Config+0xcc>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <SystemClock_Config+0xcc>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6413      	str	r3, [r2, #64]	; 0x40
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <SystemClock_Config+0xcc>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <SystemClock_Config+0xd0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a21      	ldr	r2, [pc, #132]	; (8003890 <SystemClock_Config+0xd0>)
 800380a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <SystemClock_Config+0xd0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800381c:	2301      	movs	r3, #1
 800381e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003826:	2302      	movs	r3, #2
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800382a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003830:	2304      	movs	r3, #4
 8003832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003834:	23a8      	movs	r3, #168	; 0xa8
 8003836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003838:	2302      	movs	r3, #2
 800383a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800383c:	2307      	movs	r3, #7
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003840:	f107 0320 	add.w	r3, r7, #32
 8003844:	4618      	mov	r0, r3
 8003846:	f00e fa57 	bl	8011cf8 <HAL_RCC_OscConfig>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003850:	f000 fab0 	bl	8003db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003854:	230f      	movs	r3, #15
 8003856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003858:	2302      	movs	r3, #2
 800385a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800386a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	2105      	movs	r1, #5
 8003872:	4618      	mov	r0, r3
 8003874:	f00e fcb8 	bl	80121e8 <HAL_RCC_ClockConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800387e:	f000 fa99 	bl	8003db4 <Error_Handler>
  }
}
 8003882:	bf00      	nop
 8003884:	3750      	adds	r7, #80	; 0x50
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40007000 	.word	0x40007000

08003894 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800389a:	463b      	mov	r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <MX_DAC_Init+0x60>)
 80038a4:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <MX_DAC_Init+0x64>)
 80038a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038a8:	4812      	ldr	r0, [pc, #72]	; (80038f4 <MX_DAC_Init+0x60>)
 80038aa:	f003 fe40 	bl	800752e <HAL_DAC_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038b4:	f000 fa7e 	bl	8003db4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038c0:	463b      	mov	r3, r7
 80038c2:	2200      	movs	r2, #0
 80038c4:	4619      	mov	r1, r3
 80038c6:	480b      	ldr	r0, [pc, #44]	; (80038f4 <MX_DAC_Init+0x60>)
 80038c8:	f004 f8b5 	bl	8007a36 <HAL_DAC_ConfigChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038d2:	f000 fa6f 	bl	8003db4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80038d6:	463b      	mov	r3, r7
 80038d8:	2210      	movs	r2, #16
 80038da:	4619      	mov	r1, r3
 80038dc:	4805      	ldr	r0, [pc, #20]	; (80038f4 <MX_DAC_Init+0x60>)
 80038de:	f004 f8aa 	bl	8007a36 <HAL_DAC_ConfigChannel>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80038e8:	f000 fa64 	bl	8003db4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200002a8 	.word	0x200002a8
 80038f8:	40007400 	.word	0x40007400

080038fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <MX_I2C1_Init+0x50>)
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <MX_I2C1_Init+0x54>)
 8003904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <MX_I2C1_Init+0x50>)
 8003908:	4a12      	ldr	r2, [pc, #72]	; (8003954 <MX_I2C1_Init+0x58>)
 800390a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <MX_I2C1_Init+0x50>)
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <MX_I2C1_Init+0x50>)
 8003914:	2200      	movs	r2, #0
 8003916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MX_I2C1_Init+0x50>)
 800391a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800391e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <MX_I2C1_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <MX_I2C1_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <MX_I2C1_Init+0x50>)
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <MX_I2C1_Init+0x50>)
 8003934:	2200      	movs	r2, #0
 8003936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_I2C1_Init+0x50>)
 800393a:	f007 fe08 	bl	800b54e <HAL_I2C_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003944:	f000 fa36 	bl	8003db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200002bc 	.word	0x200002bc
 8003950:	40005400 	.word	0x40005400
 8003954:	000186a0 	.word	0x000186a0

08003958 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <MX_SPI1_Init+0x64>)
 800395e:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <MX_SPI1_Init+0x68>)
 8003960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <MX_SPI1_Init+0x64>)
 8003964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_SPI1_Init+0x64>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <MX_SPI1_Init+0x64>)
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_SPI1_Init+0x64>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MX_SPI1_Init+0x64>)
 800397e:	2200      	movs	r2, #0
 8003980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <MX_SPI1_Init+0x64>)
 8003984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <MX_SPI1_Init+0x64>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <MX_SPI1_Init+0x64>)
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_SPI1_Init+0x64>)
 8003998:	2200      	movs	r2, #0
 800399a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <MX_SPI1_Init+0x64>)
 800399e:	2200      	movs	r2, #0
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_SPI1_Init+0x64>)
 80039a4:	220a      	movs	r2, #10
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <MX_SPI1_Init+0x64>)
 80039aa:	f00f fa3d 	bl	8012e28 <HAL_SPI_Init>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039b4:	f000 f9fe 	bl	8003db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000310 	.word	0x20000310
 80039c0:	40013000 	.word	0x40013000

080039c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <MX_SPI2_Init+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039f8:	2238      	movs	r2, #56	; 0x38
 80039fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <MX_SPI2_Init+0x64>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a10:	220a      	movs	r2, #10
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a14:	4804      	ldr	r0, [pc, #16]	; (8003a28 <MX_SPI2_Init+0x64>)
 8003a16:	f00f fa07 	bl	8012e28 <HAL_SPI_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a20:	f000 f9c8 	bl	8003db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000368 	.word	0x20000368
 8003a2c:	40003800 	.word	0x40003800

08003a30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a36:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <MX_SPI3_Init+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a60:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a64:	2238      	movs	r2, #56	; 0x38
 8003a66:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a7c:	220a      	movs	r2, #10
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a80:	4804      	ldr	r0, [pc, #16]	; (8003a94 <MX_SPI3_Init+0x64>)
 8003a82:	f00f f9d1 	bl	8012e28 <HAL_SPI_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a8c:	f000 f992 	bl	8003db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200003c0 	.word	0x200003c0
 8003a98:	40003c00 	.word	0x40003c00

08003a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <MX_USART1_UART_Init+0x50>)
 8003aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003aa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ad4:	f011 ff0e 	bl	80158f4 <HAL_UART_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ade:	f000 f969 	bl	8003db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200004d8 	.word	0x200004d8
 8003aec:	40011000 	.word	0x40011000

08003af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <MX_DMA_Init+0x4c>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <MX_DMA_Init+0x4c>)
 8003b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <MX_DMA_Init+0x4c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	200e      	movs	r0, #14
 8003b18:	f003 fbc5 	bl	80072a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003b1c:	200e      	movs	r0, #14
 8003b1e:	f003 fbde 	bl	80072de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	200f      	movs	r0, #15
 8003b28:	f003 fbbd 	bl	80072a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b2c:	200f      	movs	r0, #15
 8003b2e:	f003 fbd6 	bl	80072de <HAL_NVIC_EnableIRQ>

}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800

08003b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	; 0x30
 8003b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	60da      	str	r2, [r3, #12]
 8003b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a5f      	ldr	r2, [pc, #380]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b60:	f043 0310 	orr.w	r3, r3, #16
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b7c:	f043 0304 	orr.w	r3, r3, #4
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b56      	ldr	r3, [pc, #344]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a51      	ldr	r2, [pc, #324]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	4b44      	ldr	r3, [pc, #272]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a3c      	ldr	r2, [pc, #240]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b3a      	ldr	r3, [pc, #232]	; (8003cdc <MX_GPIO_Init+0x19c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003bfe:	2201      	movs	r2, #1
 8003c00:	2140      	movs	r1, #64	; 0x40
 8003c02:	4837      	ldr	r0, [pc, #220]	; (8003ce0 <MX_GPIO_Init+0x1a0>)
 8003c04:	f007 fc24 	bl	800b450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	4834      	ldr	r0, [pc, #208]	; (8003ce0 <MX_GPIO_Init+0x1a0>)
 8003c0e:	f007 fc1f 	bl	800b450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 8003c12:	2201      	movs	r2, #1
 8003c14:	2101      	movs	r1, #1
 8003c16:	4833      	ldr	r0, [pc, #204]	; (8003ce4 <MX_GPIO_Init+0x1a4>)
 8003c18:	f007 fc1a 	bl	800b450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c22:	4831      	ldr	r0, [pc, #196]	; (8003ce8 <MX_GPIO_Init+0x1a8>)
 8003c24:	f007 fc14 	bl	800b450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	482f      	ldr	r0, [pc, #188]	; (8003cec <MX_GPIO_Init+0x1ac>)
 8003c2e:	f007 fc0f 	bl	800b450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003c32:	2318      	movs	r3, #24
 8003c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c3e:	f107 031c 	add.w	r3, r7, #28
 8003c42:	4619      	mov	r1, r3
 8003c44:	482a      	ldr	r0, [pc, #168]	; (8003cf0 <MX_GPIO_Init+0x1b0>)
 8003c46:	f007 f953 	bl	800aef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003c4a:	23c0      	movs	r3, #192	; 0xc0
 8003c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c56:	2300      	movs	r3, #0
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5a:	f107 031c 	add.w	r3, r7, #28
 8003c5e:	4619      	mov	r1, r3
 8003c60:	481f      	ldr	r0, [pc, #124]	; (8003ce0 <MX_GPIO_Init+0x1a0>)
 8003c62:	f007 f945 	bl	800aef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003c66:	2320      	movs	r3, #32
 8003c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003c72:	f107 031c 	add.w	r3, r7, #28
 8003c76:	4619      	mov	r1, r3
 8003c78:	481b      	ldr	r0, [pc, #108]	; (8003ce8 <MX_GPIO_Init+0x1a8>)
 8003c7a:	f007 f939 	bl	800aef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c82:	2301      	movs	r3, #1
 8003c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c86:	2301      	movs	r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003c8e:	f107 031c 	add.w	r3, r7, #28
 8003c92:	4619      	mov	r1, r3
 8003c94:	4813      	ldr	r0, [pc, #76]	; (8003ce4 <MX_GPIO_Init+0x1a4>)
 8003c96:	f007 f92b 	bl	800aef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003c9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cac:	f107 031c 	add.w	r3, r7, #28
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <MX_GPIO_Init+0x1a8>)
 8003cb4:	f007 f91c 	bl	800aef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8003cb8:	2304      	movs	r3, #4
 8003cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4807      	ldr	r0, [pc, #28]	; (8003cec <MX_GPIO_Init+0x1ac>)
 8003cd0:	f007 f90e 	bl	800aef0 <HAL_GPIO_Init>

}
 8003cd4:	bf00      	nop
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000

08003cf4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
 8003d08:	615a      	str	r2, [r3, #20]
 8003d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d0e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003d12:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d16:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <MX_FSMC_Init+0xbc>)
 8003d18:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003d20:	4b22      	ldr	r3, [pc, #136]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003d26:	4b21      	ldr	r3, [pc, #132]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d2e:	2210      	movs	r2, #16
 8003d30:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003d32:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003d38:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8003d70:	2302      	movs	r3, #2
 8003d72:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003d74:	230f      	movs	r3, #15
 8003d76:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8003d78:	2305      	movs	r3, #5
 8003d7a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003d80:	2310      	movs	r3, #16
 8003d82:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003d84:	2311      	movs	r3, #17
 8003d86:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4619      	mov	r1, r3
 8003d92:	4806      	ldr	r0, [pc, #24]	; (8003dac <MX_FSMC_Init+0xb8>)
 8003d94:	f011 fb04 	bl	80153a0 <HAL_SRAM_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003d9e:	f000 f809 	bl	8003db4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003da2:	bf00      	nop
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000051c 	.word	0x2000051c
 8003db0:	a0000104 	.word	0xa0000104

08003db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003db8:	b672      	cpsid	i
}
 8003dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003dbc:	e7fe      	b.n	8003dbc <Error_Handler+0x8>

08003dbe <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	71fb      	strb	r3, [r7, #7]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	71bb      	strb	r3, [r7, #6]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	041a      	lsls	r2, r3, #16
 8003dd4:	79bb      	ldrb	r3, [r7, #6]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	441a      	add	r2, r3
 8003dda:	797b      	ldrb	r3, [r7, #5]
 8003ddc:	4413      	add	r3, r2
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	6039      	str	r1, [r7, #0]
 8003df4:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <H24_RGB565+0x4a>
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	02db      	lsls	r3, r3, #11
 8003e14:	b21a      	sxth	r2, r3
 8003e16:	7bbb      	ldrb	r3, [r7, #14]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	015b      	lsls	r3, r3, #5
 8003e1e:	b21b      	sxth	r3, r3
 8003e20:	4313      	orrs	r3, r2
 8003e22:	b21a      	sxth	r2, r3
 8003e24:	7b7b      	ldrb	r3, [r7, #13]
 8003e26:	08db      	lsrs	r3, r3, #3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	e012      	b.n	8003e5a <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8003e34:	7b7b      	ldrb	r3, [r7, #13]
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	02db      	lsls	r3, r3, #11
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	7bbb      	ldrb	r3, [r7, #14]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	015b      	lsls	r3, r3, #5
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	08db      	lsrs	r3, r3, #3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b21b      	sxth	r3, r3
 8003e58:	b29b      	uxth	r3, r3
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8003e70:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	8013      	strh	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	e005      	b.n	8003ea0 <LCD_Send_Dat+0x1c>
	DAT = dat;
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <LCD_Send_Dat+0x30>)
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f6      	beq.n	8003e94 <LCD_Send_Dat+0x10>
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	60080000 	.word	0x60080000

08003eb8 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	80fb      	strh	r3, [r7, #6]
 8003eca:	4603      	mov	r3, r0
 8003ecc:	80bb      	strh	r3, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	807b      	strh	r3, [r7, #2]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8003ed6:	202a      	movs	r0, #42	; 0x2a
 8003ed8:	f7ff ffc5 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8003edc:	88bb      	ldrh	r3, [r7, #4]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ffce 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8003ee8:	88bb      	ldrh	r3, [r7, #4]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ffc8 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8003ef4:	883b      	ldrh	r3, [r7, #0]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ffc2 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8003f00:	883b      	ldrh	r3, [r7, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ffbc 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8003f0c:	202b      	movs	r0, #43	; 0x2b
 8003f0e:	f7ff ffaa 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ffb3 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ffad 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ffa7 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ffa1 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8003f42:	202c      	movs	r0, #44	; 0x2c
 8003f44:	f7ff ff8f 	bl	8003e66 <LCD_Send_Cmd>
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}

08003f50 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	603a      	str	r2, [r7, #0]
 8003f5a:	80fb      	strh	r3, [r7, #6]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 8003f60:	88bb      	ldrh	r3, [r7, #4]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	88b9      	ldrh	r1, [r7, #4]
 8003f66:	88f8      	ldrh	r0, [r7, #6]
 8003f68:	f7ff ffa6 	bl	8003eb8 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7ff ff3b 	bl	8003dea <H24_RGB565>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff84 	bl	8003e84 <LCD_Send_Dat>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	80fb      	strh	r3, [r7, #6]
 8003f96:	4603      	mov	r3, r0
 8003f98:	80bb      	strh	r3, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	807b      	strh	r3, [r7, #2]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	883a      	ldrh	r2, [r7, #0]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8003fb0:	88ba      	ldrh	r2, [r7, #4]
 8003fb2:	883b      	ldrh	r3, [r7, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29c      	uxth	r4, r3
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	88f9      	ldrh	r1, [r7, #6]
 8003fca:	88b8      	ldrh	r0, [r7, #4]
 8003fcc:	4622      	mov	r2, r4
 8003fce:	f7ff ff73 	bl	8003eb8 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e00a      	b.n	8003fee <LCD_Rect_Fill+0x6a>
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f7ff ff05 	bl	8003dea <H24_RGB565>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ff4e 	bl	8003e84 <LCD_Send_Dat>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d3f0      	bcc.n	8003fd8 <LCD_Rect_Fill+0x54>
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd90      	pop	{r4, r7, pc}

08004000 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b08b      	sub	sp, #44	; 0x2c
 8004004:	af02      	add	r7, sp, #8
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4623      	mov	r3, r4
 8004010:	80fb      	strh	r3, [r7, #6]
 8004012:	4603      	mov	r3, r0
 8004014:	80bb      	strh	r3, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	807b      	strh	r3, [r7, #2]
 800401a:	4613      	mov	r3, r2
 800401c:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bfb8      	it	lt
 8004028:	425b      	neglt	r3, r3
 800402a:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 800402c:	883a      	ldrh	r2, [r7, #0]
 800402e:	88bb      	ldrh	r3, [r7, #4]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfb8      	it	lt
 8004036:	425b      	neglt	r3, r3
 8004038:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	887b      	ldrh	r3, [r7, #2]
 800403e:	429a      	cmp	r2, r3
 8004040:	d201      	bcs.n	8004046 <LCD_Line+0x46>
 8004042:	2301      	movs	r3, #1
 8004044:	e001      	b.n	800404a <LCD_Line+0x4a>
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 800404c:	88ba      	ldrh	r2, [r7, #4]
 800404e:	883b      	ldrh	r3, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d201      	bcs.n	8004058 <LCD_Line+0x58>
 8004054:	2301      	movs	r3, #1
 8004056:	e001      	b.n	800405c <LCD_Line+0x5c>
 8004058:	f04f 33ff 	mov.w	r3, #4294967295
 800405c:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800406a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800406e:	b29a      	uxth	r2, r3
 8004070:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004074:	b29c      	uxth	r4, r3
 8004076:	88b9      	ldrh	r1, [r7, #4]
 8004078:	88f8      	ldrh	r0, [r7, #6]
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4623      	mov	r3, r4
 8004080:	f7ff ff80 	bl	8003f84 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	429a      	cmp	r2, r3
 800408a:	d103      	bne.n	8004094 <LCD_Line+0x94>
 800408c:	88ba      	ldrh	r2, [r7, #4]
 800408e:	883b      	ldrh	r3, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d01e      	beq.n	80040d2 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	425b      	negs	r3, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	dd08      	ble.n	80040b6 <LCD_Line+0xb6>
		{
			error -= deltaY;
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	4413      	add	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	dad5      	bge.n	800406a <LCD_Line+0x6a>
		{
			error += deltaX;
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	88bb      	ldrh	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80040d0:	e7cb      	b.n	800406a <LCD_Line+0x6a>
		break;
 80040d2:	bf00      	nop
		}
	}
}
 80040d4:	bf00      	nop
 80040d6:	3724      	adds	r7, #36	; 0x24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd90      	pop	{r4, r7, pc}

080040dc <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 80040dc:	b590      	push	{r4, r7, lr}
 80040de:	b085      	sub	sp, #20
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	80fb      	strh	r3, [r7, #6]
 80040ee:	4603      	mov	r3, r0
 80040f0:	80bb      	strh	r3, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	807b      	strh	r3, [r7, #2]
 80040f6:	4613      	mov	r3, r2
 80040f8:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 80040fa:	883c      	ldrh	r4, [r7, #0]
 80040fc:	887a      	ldrh	r2, [r7, #2]
 80040fe:	88b9      	ldrh	r1, [r7, #4]
 8004100:	88f8      	ldrh	r0, [r7, #6]
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	f897 3020 	ldrb.w	r3, [r7, #32]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4623      	mov	r3, r4
 800410e:	f7ff ff77 	bl	8004000 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 8004112:	8bbc      	ldrh	r4, [r7, #28]
 8004114:	8b3a      	ldrh	r2, [r7, #24]
 8004116:	8839      	ldrh	r1, [r7, #0]
 8004118:	8878      	ldrh	r0, [r7, #2]
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4623      	mov	r3, r4
 8004126:	f7ff ff6b 	bl	8004000 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 800412a:	88bc      	ldrh	r4, [r7, #4]
 800412c:	88fa      	ldrh	r2, [r7, #6]
 800412e:	8bb9      	ldrh	r1, [r7, #28]
 8004130:	8b38      	ldrh	r0, [r7, #24]
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	4623      	mov	r3, r4
 800413e:	f7ff ff5f 	bl	8004000 <LCD_Line>
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}

0800414a <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 800414a:	b590      	push	{r4, r7, lr}
 800414c:	b08d      	sub	sp, #52	; 0x34
 800414e:	af02      	add	r7, sp, #8
 8004150:	4604      	mov	r4, r0
 8004152:	4608      	mov	r0, r1
 8004154:	4611      	mov	r1, r2
 8004156:	461a      	mov	r2, r3
 8004158:	4623      	mov	r3, r4
 800415a:	80fb      	strh	r3, [r7, #6]
 800415c:	4603      	mov	r3, r0
 800415e:	80bb      	strh	r3, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
 8004164:	4613      	mov	r3, r2
 8004166:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004168:	2300      	movs	r3, #0
 800416a:	823b      	strh	r3, [r7, #16]
 800416c:	2300      	movs	r3, #0
 800416e:	81fb      	strh	r3, [r7, #14]
 8004170:	2300      	movs	r3, #0
 8004172:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004174:	2300      	movs	r3, #0
 8004176:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004178:	2300      	movs	r3, #0
 800417a:	847b      	strh	r3, [r7, #34]	; 0x22
 800417c:	2300      	movs	r3, #0
 800417e:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004180:	2300      	movs	r3, #0
 8004182:	83fb      	strh	r3, [r7, #30]
 8004184:	2300      	movs	r3, #0
 8004186:	83bb      	strh	r3, [r7, #28]
 8004188:	2300      	movs	r3, #0
 800418a:	837b      	strh	r3, [r7, #26]
 800418c:	2300      	movs	r3, #0
 800418e:	833b      	strh	r3, [r7, #24]
 8004190:	2300      	movs	r3, #0
 8004192:	82fb      	strh	r3, [r7, #22]
 8004194:	2300      	movs	r3, #0
 8004196:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 800419c:	887a      	ldrh	r2, [r7, #2]
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bfb8      	it	lt
 80041a6:	425b      	neglt	r3, r3
 80041a8:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80041aa:	883a      	ldrh	r2, [r7, #0]
 80041ac:	88bb      	ldrh	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bfb8      	it	lt
 80041b4:	425b      	neglt	r3, r3
 80041b6:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80041bc:	88bb      	ldrh	r3, [r7, #4]
 80041be:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d304      	bcc.n	80041d2 <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 80041c8:	2301      	movs	r3, #1
 80041ca:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80041cc:	2301      	movs	r3, #1
 80041ce:	843b      	strh	r3, [r7, #32]
 80041d0:	e005      	b.n	80041de <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 80041d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041d6:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80041d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041dc:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 80041de:	883a      	ldrh	r2, [r7, #0]
 80041e0:	88bb      	ldrh	r3, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d304      	bcc.n	80041f0 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	83bb      	strh	r3, [r7, #28]
 80041ee:	e005      	b.n	80041fc <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 80041f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041f4:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80041f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041fa:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 80041fc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004200:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004204:	429a      	cmp	r2, r3
 8004206:	db10      	blt.n	800422a <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8004210:	8a3b      	ldrh	r3, [r7, #16]
 8004212:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004214:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004218:	0fda      	lsrs	r2, r3, #31
 800421a:	4413      	add	r3, r2
 800421c:	105b      	asrs	r3, r3, #1
 800421e:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8004220:	89fb      	ldrh	r3, [r7, #14]
 8004222:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8004224:	8a3b      	ldrh	r3, [r7, #16]
 8004226:	82bb      	strh	r3, [r7, #20]
 8004228:	e00f      	b.n	800424a <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8004232:	89fb      	ldrh	r3, [r7, #14]
 8004234:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8004236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800423a:	0fda      	lsrs	r2, r3, #31
 800423c:	4413      	add	r3, r2
 800423e:	105b      	asrs	r3, r3, #1
 8004240:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8004242:	8a3b      	ldrh	r3, [r7, #16]
 8004244:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800424a:	2300      	movs	r3, #0
 800424c:	827b      	strh	r3, [r7, #18]
 800424e:	e034      	b.n	80042ba <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 8004250:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004252:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004254:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 8004256:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	2301      	movs	r3, #1
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4623      	mov	r3, r4
 8004262:	f7ff fecd 	bl	8004000 <LCD_Line>

		num += numadd;
 8004266:	8b3a      	ldrh	r2, [r7, #24]
 8004268:	8afb      	ldrh	r3, [r7, #22]
 800426a:	4413      	add	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 8004270:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004274:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004278:	429a      	cmp	r2, r3
 800427a:	db0e      	blt.n	800429a <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 800427c:	8b3a      	ldrh	r2, [r7, #24]
 800427e:	8b7b      	ldrh	r3, [r7, #26]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	b29b      	uxth	r3, r3
 8004284:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8004286:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800428a:	4413      	add	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8004290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004292:	8bfb      	ldrh	r3, [r7, #30]
 8004294:	4413      	add	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 800429a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800429c:	8c3b      	ldrh	r3, [r7, #32]
 800429e:	4413      	add	r3, r2
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80042a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042a6:	8bbb      	ldrh	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80042ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	827b      	strh	r3, [r7, #18]
 80042ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80042be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	ddc4      	ble.n	8004250 <LCD_Triangle_Fill+0x106>
	}
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	372c      	adds	r7, #44	; 0x2c
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd90      	pop	{r4, r7, pc}

080042d0 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	4604      	mov	r4, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	80fb      	strh	r3, [r7, #6]
 80042e2:	4603      	mov	r3, r0
 80042e4:	80bb      	strh	r3, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	807b      	strh	r3, [r7, #2]
 80042ea:	4613      	mov	r3, r2
 80042ec:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	4413      	add	r3, r2
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	88bc      	ldrh	r4, [r7, #4]
 80042f8:	88b9      	ldrh	r1, [r7, #4]
 80042fa:	88f8      	ldrh	r0, [r7, #6]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	7e3b      	ldrb	r3, [r7, #24]
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4623      	mov	r3, r4
 8004306:	f7ff fe7b 	bl	8004000 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800430a:	88ba      	ldrh	r2, [r7, #4]
 800430c:	883b      	ldrh	r3, [r7, #0]
 800430e:	4413      	add	r3, r2
 8004310:	b299      	uxth	r1, r3
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	4413      	add	r3, r2
 8004318:	b29c      	uxth	r4, r3
 800431a:	88ba      	ldrh	r2, [r7, #4]
 800431c:	883b      	ldrh	r3, [r7, #0]
 800431e:	4413      	add	r3, r2
 8004320:	b29a      	uxth	r2, r3
 8004322:	88f8      	ldrh	r0, [r7, #6]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	7e3b      	ldrb	r3, [r7, #24]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	4622      	mov	r2, r4
 8004330:	f7ff fe66 	bl	8004000 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004334:	88ba      	ldrh	r2, [r7, #4]
 8004336:	883b      	ldrh	r3, [r7, #0]
 8004338:	4413      	add	r3, r2
 800433a:	b29c      	uxth	r4, r3
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	88b9      	ldrh	r1, [r7, #4]
 8004340:	88f8      	ldrh	r0, [r7, #6]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	7e3b      	ldrb	r3, [r7, #24]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4623      	mov	r3, r4
 800434c:	f7ff fe58 	bl	8004000 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	4413      	add	r3, r2
 8004356:	b298      	uxth	r0, r3
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	887b      	ldrh	r3, [r7, #2]
 800435c:	4413      	add	r3, r2
 800435e:	b29c      	uxth	r4, r3
 8004360:	88ba      	ldrh	r2, [r7, #4]
 8004362:	883b      	ldrh	r3, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	b29a      	uxth	r2, r3
 8004368:	88b9      	ldrh	r1, [r7, #4]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	7e3b      	ldrb	r3, [r7, #24]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	4613      	mov	r3, r2
 8004374:	4622      	mov	r2, r4
 8004376:	f7ff fe43 	bl	8004000 <LCD_Line>
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}

08004382 <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004382:	b590      	push	{r4, r7, lr}
 8004384:	b08b      	sub	sp, #44	; 0x2c
 8004386:	af02      	add	r7, sp, #8
 8004388:	4604      	mov	r4, r0
 800438a:	4608      	mov	r0, r1
 800438c:	4611      	mov	r1, r2
 800438e:	461a      	mov	r2, r3
 8004390:	4623      	mov	r3, r4
 8004392:	80fb      	strh	r3, [r7, #6]
 8004394:	4603      	mov	r3, r0
 8004396:	80bb      	strh	r3, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 80043a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 80043ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043b2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 80043c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8101 	beq.w	80045d4 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	83fb      	strh	r3, [r7, #30]
 80043d6:	883b      	ldrh	r3, [r7, #0]
 80043d8:	83bb      	strh	r3, [r7, #28]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	005a      	lsls	r2, r3, #1
 80043de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	f1c3 0301 	rsb	r3, r3, #1
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e062      	b.n	80044ba <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	8bfb      	ldrh	r3, [r7, #30]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b298      	uxth	r0, r3
 80043fc:	88ba      	ldrh	r2, [r7, #4]
 80043fe:	8bbb      	ldrh	r3, [r7, #28]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	b299      	uxth	r1, r3
 8004404:	88fa      	ldrh	r2, [r7, #6]
 8004406:	8bfb      	ldrh	r3, [r7, #30]
 8004408:	4413      	add	r3, r2
 800440a:	b29a      	uxth	r2, r3
 800440c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004410:	b29b      	uxth	r3, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	b29b      	uxth	r3, r3
 8004416:	3301      	adds	r3, #1
 8004418:	b29c      	uxth	r4, r3
 800441a:	88ba      	ldrh	r2, [r7, #4]
 800441c:	8bbb      	ldrh	r3, [r7, #28]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	4622      	mov	r2, r4
 8004430:	f7ff fde6 	bl	8004000 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	8bfb      	ldrh	r3, [r7, #30]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	b298      	uxth	r0, r3
 800443c:	88ba      	ldrh	r2, [r7, #4]
 800443e:	8bbb      	ldrh	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	b299      	uxth	r1, r3
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	8bfb      	ldrh	r3, [r7, #30]
 8004448:	4413      	add	r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004450:	b29b      	uxth	r3, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	b29b      	uxth	r3, r3
 8004456:	3301      	adds	r3, #1
 8004458:	b29c      	uxth	r4, r3
 800445a:	88ba      	ldrh	r2, [r7, #4]
 800445c:	8bbb      	ldrh	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	4622      	mov	r2, r4
 8004470:	f7ff fdc6 	bl	8004000 <LCD_Line>
			if (s >= 0)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	db0f      	blt.n	800449a <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 800447a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800447e:	f1c3 0301 	rsb	r3, r3, #1
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	fb02 f303 	mul.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4413      	add	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
				y--;
 800448e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 800449a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	3306      	adds	r3, #6
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4413      	add	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80044ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	83fb      	strh	r3, [r7, #30]
 80044ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	fb03 f202 	mul.w	r2, r3, r2
 80044c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044c8:	6979      	ldr	r1, [r7, #20]
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	429a      	cmp	r2, r3
 80044d0:	dd90      	ble.n	80043f4 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80044d2:	887b      	ldrh	r3, [r7, #2]
 80044d4:	83fb      	strh	r3, [r7, #30]
 80044d6:	2300      	movs	r3, #0
 80044d8:	83bb      	strh	r3, [r7, #28]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	005a      	lsls	r2, r3, #1
 80044de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	f1c3 0301 	rsb	r3, r3, #1
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e062      	b.n	80045ba <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	8bfb      	ldrh	r3, [r7, #30]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	b298      	uxth	r0, r3
 80044fc:	88ba      	ldrh	r2, [r7, #4]
 80044fe:	8bbb      	ldrh	r3, [r7, #28]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b299      	uxth	r1, r3
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	8bfb      	ldrh	r3, [r7, #30]
 8004508:	4413      	add	r3, r2
 800450a:	b29a      	uxth	r2, r3
 800450c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004510:	b29b      	uxth	r3, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	b29b      	uxth	r3, r3
 8004516:	3301      	adds	r3, #1
 8004518:	b29c      	uxth	r4, r3
 800451a:	88ba      	ldrh	r2, [r7, #4]
 800451c:	8bbb      	ldrh	r3, [r7, #28]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	b29a      	uxth	r2, r3
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	4622      	mov	r2, r4
 8004530:	f7ff fd66 	bl	8004000 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	8bfb      	ldrh	r3, [r7, #30]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	b298      	uxth	r0, r3
 800453c:	88ba      	ldrh	r2, [r7, #4]
 800453e:	8bbb      	ldrh	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	b299      	uxth	r1, r3
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	8bfb      	ldrh	r3, [r7, #30]
 8004548:	4413      	add	r3, r2
 800454a:	b29a      	uxth	r2, r3
 800454c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004550:	b29b      	uxth	r3, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	b29c      	uxth	r4, r3
 800455a:	88ba      	ldrh	r2, [r7, #4]
 800455c:	8bbb      	ldrh	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	b29a      	uxth	r2, r3
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	4622      	mov	r2, r4
 8004570:	f7ff fd46 	bl	8004000 <LCD_Line>
			if (s >= 0)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	db0f      	blt.n	800459a <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 800457a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800457e:	f1c3 0301 	rsb	r3, r3, #1
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
				x--;
 800458e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 800459a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3306      	adds	r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4413      	add	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80045ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	83bb      	strh	r3, [r7, #28]
 80045ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	fb03 f202 	mul.w	r2, r3, r2
 80045c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045c8:	6939      	ldr	r1, [r7, #16]
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	429a      	cmp	r2, r3
 80045d0:	dd90      	ble.n	80044f4 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 80045d2:	e117      	b.n	8004804 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	83fb      	strh	r3, [r7, #30]
 80045d8:	883b      	ldrh	r3, [r7, #0]
 80045da:	83bb      	strh	r3, [r7, #28]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	005a      	lsls	r2, r3, #1
 80045e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	f1c3 0301 	rsb	r3, r3, #1
 80045ea:	6979      	ldr	r1, [r7, #20]
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e06e      	b.n	80046d4 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	8bfb      	ldrh	r3, [r7, #30]
 80045fa:	4413      	add	r3, r2
 80045fc:	b298      	uxth	r0, r3
 80045fe:	88ba      	ldrh	r2, [r7, #4]
 8004600:	8bbb      	ldrh	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	b299      	uxth	r1, r3
 8004606:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800460a:	b29a      	uxth	r2, r3
 800460c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004610:	b29c      	uxth	r4, r3
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	4623      	mov	r3, r4
 8004618:	f7ff fcb4 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	8bfb      	ldrh	r3, [r7, #30]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	b298      	uxth	r0, r3
 8004624:	88ba      	ldrh	r2, [r7, #4]
 8004626:	8bbb      	ldrh	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	b299      	uxth	r1, r3
 800462c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004630:	b29a      	uxth	r2, r3
 8004632:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004636:	b29c      	uxth	r4, r3
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	4623      	mov	r3, r4
 800463e:	f7ff fca1 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	8bfb      	ldrh	r3, [r7, #30]
 8004646:	4413      	add	r3, r2
 8004648:	b298      	uxth	r0, r3
 800464a:	88ba      	ldrh	r2, [r7, #4]
 800464c:	8bbb      	ldrh	r3, [r7, #28]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	b299      	uxth	r1, r3
 8004652:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004656:	b29a      	uxth	r2, r3
 8004658:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800465c:	b29c      	uxth	r4, r3
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	4623      	mov	r3, r4
 8004664:	f7ff fc8e 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	8bfb      	ldrh	r3, [r7, #30]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b298      	uxth	r0, r3
 8004670:	88ba      	ldrh	r2, [r7, #4]
 8004672:	8bbb      	ldrh	r3, [r7, #28]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	b299      	uxth	r1, r3
 8004678:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800467c:	b29a      	uxth	r2, r3
 800467e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004682:	b29c      	uxth	r4, r3
 8004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4623      	mov	r3, r4
 800468a:	f7ff fc7b 	bl	8003f84 <LCD_Rect_Fill>
			if (s >= 0)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	db0f      	blt.n	80046b4 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 8004694:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004698:	f1c3 0301 	rsb	r3, r3, #1
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4413      	add	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
				y--;
 80046a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 80046b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3306      	adds	r3, #6
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4413      	add	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80046c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3301      	adds	r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	83fb      	strh	r3, [r7, #30]
 80046d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	fb03 f202 	mul.w	r2, r3, r2
 80046de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dd84      	ble.n	80045f6 <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	83fb      	strh	r3, [r7, #30]
 80046f0:	2300      	movs	r3, #0
 80046f2:	83bb      	strh	r3, [r7, #28]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005a      	lsls	r2, r3, #1
 80046f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	f1c3 0301 	rsb	r3, r3, #1
 8004702:	6939      	ldr	r1, [r7, #16]
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e06e      	b.n	80047ec <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	8bfb      	ldrh	r3, [r7, #30]
 8004712:	4413      	add	r3, r2
 8004714:	b298      	uxth	r0, r3
 8004716:	88ba      	ldrh	r2, [r7, #4]
 8004718:	8bbb      	ldrh	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	b299      	uxth	r1, r3
 800471e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004722:	b29a      	uxth	r2, r3
 8004724:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004728:	b29c      	uxth	r4, r3
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	4623      	mov	r3, r4
 8004730:	f7ff fc28 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004734:	88fa      	ldrh	r2, [r7, #6]
 8004736:	8bfb      	ldrh	r3, [r7, #30]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	b298      	uxth	r0, r3
 800473c:	88ba      	ldrh	r2, [r7, #4]
 800473e:	8bbb      	ldrh	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	b299      	uxth	r1, r3
 8004744:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004748:	b29a      	uxth	r2, r3
 800474a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800474e:	b29c      	uxth	r4, r3
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4623      	mov	r3, r4
 8004756:	f7ff fc15 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	8bfb      	ldrh	r3, [r7, #30]
 800475e:	4413      	add	r3, r2
 8004760:	b298      	uxth	r0, r3
 8004762:	88ba      	ldrh	r2, [r7, #4]
 8004764:	8bbb      	ldrh	r3, [r7, #28]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	b299      	uxth	r1, r3
 800476a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800476e:	b29a      	uxth	r2, r3
 8004770:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004774:	b29c      	uxth	r4, r3
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4623      	mov	r3, r4
 800477c:	f7ff fc02 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004780:	88fa      	ldrh	r2, [r7, #6]
 8004782:	8bfb      	ldrh	r3, [r7, #30]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	b298      	uxth	r0, r3
 8004788:	88ba      	ldrh	r2, [r7, #4]
 800478a:	8bbb      	ldrh	r3, [r7, #28]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b299      	uxth	r1, r3
 8004790:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004794:	b29a      	uxth	r2, r3
 8004796:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800479a:	b29c      	uxth	r4, r3
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	4623      	mov	r3, r4
 80047a2:	f7ff fbef 	bl	8003f84 <LCD_Rect_Fill>
			if (s >= 0)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	db0f      	blt.n	80047cc <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 80047ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047b0:	f1c3 0301 	rsb	r3, r3, #1
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4413      	add	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
				x--;
 80047c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 80047cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	3306      	adds	r3, #6
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4413      	add	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 80047e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3301      	adds	r3, #1
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	83bb      	strh	r3, [r7, #28]
 80047ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	fb03 f202 	mul.w	r2, r3, r2
 80047f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	429a      	cmp	r2, r3
 8004802:	dd84      	ble.n	800470e <LCD_Ellipse+0x38c>
}
 8004804:	bf00      	nop
 8004806:	3724      	adds	r7, #36	; 0x24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd90      	pop	{r4, r7, pc}

0800480c <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af02      	add	r7, sp, #8
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	4623      	mov	r3, r4
 800481c:	80fb      	strh	r3, [r7, #6]
 800481e:	4603      	mov	r3, r0
 8004820:	80bb      	strh	r3, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	70fb      	strb	r3, [r7, #3]
 8004826:	4613      	mov	r3, r2
 8004828:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
	b_ = radius;
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f1c3 0301 	rsb	r3, r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 800483a:	e0fc      	b.n	8004a36 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 800483c:	78bb      	ldrb	r3, [r7, #2]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d136      	bne.n	80048b0 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	b29b      	uxth	r3, r3
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	b298      	uxth	r0, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	b29b      	uxth	r3, r3
 8004850:	88ba      	ldrh	r2, [r7, #4]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	b299      	uxth	r1, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	b29b      	uxth	r3, r3
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	3301      	adds	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	b29b      	uxth	r3, r3
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	3301      	adds	r3, #1
 800486c:	b29c      	uxth	r4, r3
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4623      	mov	r3, r4
 8004874:	f7ff fb86 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	b29b      	uxth	r3, r3
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	b298      	uxth	r0, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	b29b      	uxth	r3, r3
 8004886:	88ba      	ldrh	r2, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	b299      	uxth	r1, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	b29b      	uxth	r3, r3
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	b29b      	uxth	r3, r3
 8004894:	3301      	adds	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	b29b      	uxth	r3, r3
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	b29c      	uxth	r4, r3
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4623      	mov	r3, r4
 80048aa:	f7ff fb6b 	bl	8003f84 <LCD_Rect_Fill>
 80048ae:	e0a7      	b.n	8004a00 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4413      	add	r3, r2
 80048b8:	b298      	uxth	r0, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	b29a      	uxth	r2, r3
 80048be:	88bb      	ldrh	r3, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	b299      	uxth	r1, r3
 80048c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4623      	mov	r3, r4
 80048d6:	f7ff fb55 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	4413      	add	r3, r2
 80048e2:	b298      	uxth	r0, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	88bb      	ldrh	r3, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	b299      	uxth	r1, r3
 80048ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048f8:	b29c      	uxth	r4, r3
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	4623      	mov	r3, r4
 8004900:	f7ff fb40 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	b29b      	uxth	r3, r3
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	b298      	uxth	r0, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	b29a      	uxth	r2, r3
 8004912:	88bb      	ldrh	r3, [r7, #4]
 8004914:	4413      	add	r3, r2
 8004916:	b299      	uxth	r1, r3
 8004918:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800491c:	b29a      	uxth	r2, r3
 800491e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004922:	b29c      	uxth	r4, r3
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	4623      	mov	r3, r4
 800492a:	f7ff fb2b 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	b29b      	uxth	r3, r3
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b298      	uxth	r0, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	b29a      	uxth	r2, r3
 800493c:	88bb      	ldrh	r3, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	b299      	uxth	r1, r3
 8004942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004946:	b29a      	uxth	r2, r3
 8004948:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800494c:	b29c      	uxth	r4, r3
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4623      	mov	r3, r4
 8004954:	f7ff fb16 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	b29a      	uxth	r2, r3
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	4413      	add	r3, r2
 8004960:	b298      	uxth	r0, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	b29b      	uxth	r3, r3
 8004966:	88ba      	ldrh	r2, [r7, #4]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	b299      	uxth	r1, r3
 800496c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004970:	b29a      	uxth	r2, r3
 8004972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004976:	b29c      	uxth	r4, r3
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	4623      	mov	r3, r4
 800497e:	f7ff fb01 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	b29a      	uxth	r2, r3
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	4413      	add	r3, r2
 800498a:	b298      	uxth	r0, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	b29b      	uxth	r3, r3
 8004990:	88ba      	ldrh	r2, [r7, #4]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	b299      	uxth	r1, r3
 8004996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499a:	b29a      	uxth	r2, r3
 800499c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049a0:	b29c      	uxth	r4, r3
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4623      	mov	r3, r4
 80049a8:	f7ff faec 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	b298      	uxth	r0, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	88ba      	ldrh	r2, [r7, #4]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	b299      	uxth	r1, r3
 80049c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ca:	b29c      	uxth	r4, r3
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4623      	mov	r3, r4
 80049d2:	f7ff fad7 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	b298      	uxth	r0, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	88ba      	ldrh	r2, [r7, #4]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	b299      	uxth	r1, r3
 80049ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f4:	b29c      	uxth	r4, r3
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	4623      	mov	r3, r4
 80049fc:	f7ff fac2 	bl	8003f84 <LCD_Rect_Fill>
		}
		if (P < 0)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da09      	bge.n	8004a1a <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1cda      	adds	r2, r3, #3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
			a_++;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3301      	adds	r3, #1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e00d      	b.n	8004a36 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1d5a      	adds	r2, r3, #5
 8004a1e:	6979      	ldr	r1, [r7, #20]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1acb      	subs	r3, r1, r3
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
			a_++;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
			b_--;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	f77f aefe 	ble.w	800483c <LCD_Circle+0x30>
		}
	}
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd90      	pop	{r4, r7, pc}

08004a4a <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004a4a:	b590      	push	{r4, r7, lr}
 8004a4c:	b089      	sub	sp, #36	; 0x24
 8004a4e:	af02      	add	r7, sp, #8
 8004a50:	4604      	mov	r4, r0
 8004a52:	4608      	mov	r0, r1
 8004a54:	4611      	mov	r1, r2
 8004a56:	461a      	mov	r2, r3
 8004a58:	4623      	mov	r3, r4
 8004a5a:	80fb      	strh	r3, [r7, #6]
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	80bb      	strh	r3, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	f1c3 0301 	rsb	r3, r3, #1
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004a76:	887b      	ldrh	r3, [r7, #2]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	03d2      	lsls	r2, r2, #15
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004a8c:	e0cd      	b.n	8004c2a <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004a8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	db0e      	blt.n	8004ab4 <LCD_Circle_Helper+0x6a>
			y--;
 8004a96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004aa2:	8a7b      	ldrh	r3, [r7, #18]
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004aaa:	8afa      	ldrh	r2, [r7, #22]
 8004aac:	8a7b      	ldrh	r3, [r7, #18]
 8004aae:	4413      	add	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004ab4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004ac0:	8abb      	ldrh	r3, [r7, #20]
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004ac8:	8afa      	ldrh	r2, [r7, #22]
 8004aca:	8abb      	ldrh	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004ad2:	787b      	ldrb	r3, [r7, #1]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d025      	beq.n	8004b28 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	8a3b      	ldrh	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	88ba      	ldrh	r2, [r7, #4]
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	4413      	add	r3, r2
 8004aea:	b299      	uxth	r1, r3
 8004aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004af6:	b29c      	uxth	r4, r3
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4623      	mov	r3, r4
 8004afe:	f7ff fa41 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	89fb      	ldrh	r3, [r7, #14]
 8004b06:	4413      	add	r3, r2
 8004b08:	b298      	uxth	r0, r3
 8004b0a:	88ba      	ldrh	r2, [r7, #4]
 8004b0c:	8a3b      	ldrh	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	b299      	uxth	r1, r3
 8004b12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b1c:	b29c      	uxth	r4, r3
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4623      	mov	r3, r4
 8004b24:	f7ff fa2e 	bl	8003f84 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004b28:	787b      	ldrb	r3, [r7, #1]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d025      	beq.n	8004b7e <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	8a3b      	ldrh	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	b298      	uxth	r0, r3
 8004b3a:	88ba      	ldrh	r2, [r7, #4]
 8004b3c:	89fb      	ldrh	r3, [r7, #14]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	b299      	uxth	r1, r3
 8004b42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b4c:	b29c      	uxth	r4, r3
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	4623      	mov	r3, r4
 8004b54:	f7ff fa16 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b298      	uxth	r0, r3
 8004b60:	88ba      	ldrh	r2, [r7, #4]
 8004b62:	8a3b      	ldrh	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b299      	uxth	r1, r3
 8004b68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b72:	b29c      	uxth	r4, r3
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4623      	mov	r3, r4
 8004b7a:	f7ff fa03 	bl	8003f84 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004b7e:	787b      	ldrb	r3, [r7, #1]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d025      	beq.n	8004bd4 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	b298      	uxth	r0, r3
 8004b90:	88ba      	ldrh	r2, [r7, #4]
 8004b92:	8a3b      	ldrh	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	b299      	uxth	r1, r3
 8004b98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ba2:	b29c      	uxth	r4, r3
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4623      	mov	r3, r4
 8004baa:	f7ff f9eb 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	8a3b      	ldrh	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	b298      	uxth	r0, r3
 8004bb6:	88ba      	ldrh	r2, [r7, #4]
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	4413      	add	r3, r2
 8004bbc:	b299      	uxth	r1, r3
 8004bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc8:	b29c      	uxth	r4, r3
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	4623      	mov	r3, r4
 8004bd0:	f7ff f9d8 	bl	8003f84 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d025      	beq.n	8004c2a <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	89fb      	ldrh	r3, [r7, #14]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	b298      	uxth	r0, r3
 8004be6:	88ba      	ldrh	r2, [r7, #4]
 8004be8:	8a3b      	ldrh	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	b299      	uxth	r1, r3
 8004bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bf8:	b29c      	uxth	r4, r3
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4623      	mov	r3, r4
 8004c00:	f7ff f9c0 	bl	8003f84 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	8a3b      	ldrh	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	b298      	uxth	r0, r3
 8004c0c:	88ba      	ldrh	r2, [r7, #4]
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	b299      	uxth	r1, r3
 8004c14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1e:	b29c      	uxth	r4, r3
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7ff f9ad 	bl	8003f84 <LCD_Rect_Fill>
	while (x < y) {
 8004c2a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	f6ff af2b 	blt.w	8004a8e <LCD_Circle_Helper+0x44>
		}
	}
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd90      	pop	{r4, r7, pc}

08004c42 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004c42:	b590      	push	{r4, r7, lr}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af02      	add	r7, sp, #8
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4623      	mov	r3, r4
 8004c52:	80fb      	strh	r3, [r7, #6]
 8004c54:	4603      	mov	r3, r0
 8004c56:	80bb      	strh	r3, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004c60:	8b3a      	ldrh	r2, [r7, #24]
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	4413      	add	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3302      	adds	r3, #2
 8004c6a:	b298      	uxth	r0, r3
 8004c6c:	88fa      	ldrh	r2, [r7, #6]
 8004c6e:	887b      	ldrh	r3, [r7, #2]
 8004c70:	4413      	add	r3, r2
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	7f3b      	ldrb	r3, [r7, #28]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	8b3b      	ldrh	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b02      	subs	r3, #2
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	88bc      	ldrh	r4, [r7, #4]
 8004c88:	88b9      	ldrh	r1, [r7, #4]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	7f3b      	ldrb	r3, [r7, #28]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4623      	mov	r3, r4
 8004c94:	f7ff f9b4 	bl	8004000 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004c98:	8b3a      	ldrh	r2, [r7, #24]
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	b298      	uxth	r0, r3
 8004ca4:	88ba      	ldrh	r2, [r7, #4]
 8004ca6:	883b      	ldrh	r3, [r7, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b299      	uxth	r1, r3
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	7f3b      	ldrb	r3, [r7, #28]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	8b3b      	ldrh	r3, [r7, #24]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b02      	subs	r3, #2
 8004cc8:	b29c      	uxth	r4, r3
 8004cca:	88ba      	ldrh	r2, [r7, #4]
 8004ccc:	883b      	ldrh	r3, [r7, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	7f3b      	ldrb	r3, [r7, #28]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	f7ff f98d 	bl	8004000 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8004ce6:	8b3a      	ldrh	r2, [r7, #24]
 8004ce8:	88bb      	ldrh	r3, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3302      	adds	r3, #2
 8004cf0:	b299      	uxth	r1, r3
 8004cf2:	88ba      	ldrh	r2, [r7, #4]
 8004cf4:	883b      	ldrh	r3, [r7, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	7f3b      	ldrb	r3, [r7, #28]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	8b3b      	ldrh	r3, [r7, #24]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b02      	subs	r3, #2
 8004d0a:	b29c      	uxth	r4, r3
 8004d0c:	88fa      	ldrh	r2, [r7, #6]
 8004d0e:	88f8      	ldrh	r0, [r7, #6]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	7f3b      	ldrb	r3, [r7, #28]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4623      	mov	r3, r4
 8004d1a:	f7ff f971 	bl	8004000 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8004d1e:	88fa      	ldrh	r2, [r7, #6]
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	4413      	add	r3, r2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b298      	uxth	r0, r3
 8004d2a:	8b3a      	ldrh	r2, [r7, #24]
 8004d2c:	88bb      	ldrh	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3302      	adds	r3, #2
 8004d34:	b299      	uxth	r1, r3
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29c      	uxth	r4, r3
 8004d42:	88ba      	ldrh	r2, [r7, #4]
 8004d44:	883b      	ldrh	r3, [r7, #0]
 8004d46:	4413      	add	r3, r2
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	7f3b      	ldrb	r3, [r7, #28]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	8b3b      	ldrh	r3, [r7, #24]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b02      	subs	r3, #2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	7f3b      	ldrb	r3, [r7, #28]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	4622      	mov	r2, r4
 8004d68:	f7ff f94a 	bl	8004000 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8004d6c:	8b3a      	ldrh	r2, [r7, #24]
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	4413      	add	r3, r2
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3302      	adds	r3, #2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b218      	sxth	r0, r3
 8004d7a:	8b3a      	ldrh	r2, [r7, #24]
 8004d7c:	88bb      	ldrh	r3, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3302      	adds	r3, #2
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b219      	sxth	r1, r3
 8004d88:	8b3b      	ldrh	r3, [r7, #24]
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	7f3b      	ldrb	r3, [r7, #28]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f7ff fe56 	bl	8004a4a <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	887b      	ldrh	r3, [r7, #2]
 8004da2:	4413      	add	r3, r2
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	8b3b      	ldrh	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b03      	subs	r3, #3
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	b218      	sxth	r0, r3
 8004db2:	8b3a      	ldrh	r2, [r7, #24]
 8004db4:	88bb      	ldrh	r3, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3302      	adds	r3, #2
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	b219      	sxth	r1, r3
 8004dc0:	8b3b      	ldrh	r3, [r7, #24]
 8004dc2:	3302      	adds	r3, #2
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	b21a      	sxth	r2, r3
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	7f3b      	ldrb	r3, [r7, #28]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f7ff fe3a 	bl	8004a4a <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	887b      	ldrh	r3, [r7, #2]
 8004dda:	4413      	add	r3, r2
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	8b3b      	ldrh	r3, [r7, #24]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b03      	subs	r3, #3
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b218      	sxth	r0, r3
 8004dea:	88ba      	ldrh	r2, [r7, #4]
 8004dec:	883b      	ldrh	r3, [r7, #0]
 8004dee:	4413      	add	r3, r2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	8b3b      	ldrh	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b03      	subs	r3, #3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	b219      	sxth	r1, r3
 8004dfe:	8b3b      	ldrh	r3, [r7, #24]
 8004e00:	3302      	adds	r3, #2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	b21a      	sxth	r2, r3
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	7f3b      	ldrb	r3, [r7, #28]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2304      	movs	r3, #4
 8004e10:	f7ff fe1b 	bl	8004a4a <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8004e14:	8b3a      	ldrh	r2, [r7, #24]
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	4413      	add	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	b218      	sxth	r0, r3
 8004e22:	88ba      	ldrh	r2, [r7, #4]
 8004e24:	883b      	ldrh	r3, [r7, #0]
 8004e26:	4413      	add	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	8b3b      	ldrh	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b03      	subs	r3, #3
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	b219      	sxth	r1, r3
 8004e36:	8b3b      	ldrh	r3, [r7, #24]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	b21a      	sxth	r2, r3
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	7f3b      	ldrb	r3, [r7, #28]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	f7ff fdff 	bl	8004a4a <LCD_Circle_Helper>
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b089      	sub	sp, #36	; 0x24
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	461a      	mov	r2, r3
 8004e62:	4623      	mov	r3, r4
 8004e64:	80fb      	strh	r3, [r7, #6]
 8004e66:	4603      	mov	r3, r0
 8004e68:	80bb      	strh	r3, [r7, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	807b      	strh	r3, [r7, #2]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	f1c3 0301 	rsb	r3, r3, #1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	461a      	mov	r2, r3
 8004e84:	03d2      	lsls	r2, r2, #15
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004e96:	e0ab      	b.n	8004ff0 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8004e98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	db0e      	blt.n	8004ebe <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8004ea0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004eac:	8a7b      	ldrh	r3, [r7, #18]
 8004eae:	3302      	adds	r3, #2
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004eb4:	8afa      	ldrh	r2, [r7, #22]
 8004eb6:	8a7b      	ldrh	r3, [r7, #18]
 8004eb8:	4413      	add	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004ebe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004eca:	8abb      	ldrh	r3, [r7, #20]
 8004ecc:	3302      	adds	r3, #2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004ed2:	8afa      	ldrh	r2, [r7, #22]
 8004ed4:	8abb      	ldrh	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d03f      	beq.n	8004f66 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	8a3b      	ldrh	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	b298      	uxth	r0, r3
 8004eee:	88ba      	ldrh	r2, [r7, #4]
 8004ef0:	89fb      	ldrh	r3, [r7, #14]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	8a3b      	ldrh	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	b29c      	uxth	r4, r3
 8004efe:	88ba      	ldrh	r2, [r7, #4]
 8004f00:	89fb      	ldrh	r3, [r7, #14]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f12:	4413      	add	r3, r2
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	4622      	mov	r2, r4
 8004f22:	f7ff f86d 	bl	8004000 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	89fb      	ldrh	r3, [r7, #14]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	b298      	uxth	r0, r3
 8004f2e:	88ba      	ldrh	r2, [r7, #4]
 8004f30:	8a3b      	ldrh	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	b299      	uxth	r1, r3
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	89fb      	ldrh	r3, [r7, #14]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	b29c      	uxth	r4, r3
 8004f3e:	88ba      	ldrh	r2, [r7, #4]
 8004f40:	8a3b      	ldrh	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	8a3b      	ldrh	r3, [r7, #16]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f52:	4413      	add	r3, r2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	4622      	mov	r2, r4
 8004f62:	f7ff f84d 	bl	8004000 <LCD_Line>
		}
		if (cornername & 0x2) {
 8004f66:	787b      	ldrb	r3, [r7, #1]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d03f      	beq.n	8004ff0 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	8a3b      	ldrh	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	b298      	uxth	r0, r3
 8004f78:	88ba      	ldrh	r2, [r7, #4]
 8004f7a:	89fb      	ldrh	r3, [r7, #14]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	b299      	uxth	r1, r3
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	8a3b      	ldrh	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	88ba      	ldrh	r2, [r7, #4]
 8004f8a:	89fb      	ldrh	r3, [r7, #14]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f9c:	4413      	add	r3, r2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	4622      	mov	r2, r4
 8004fac:	f7ff f828 	bl	8004000 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	89fb      	ldrh	r3, [r7, #14]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	b298      	uxth	r0, r3
 8004fb8:	88ba      	ldrh	r2, [r7, #4]
 8004fba:	8a3b      	ldrh	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	b299      	uxth	r1, r3
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	89fb      	ldrh	r3, [r7, #14]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	b29c      	uxth	r4, r3
 8004fc8:	88ba      	ldrh	r2, [r7, #4]
 8004fca:	8a3b      	ldrh	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	8a3b      	ldrh	r3, [r7, #16]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fdc:	4413      	add	r3, r2
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	4622      	mov	r2, r4
 8004fec:	f7ff f808 	bl	8004000 <LCD_Line>
	while (x < y) {
 8004ff0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	f6ff af4d 	blt.w	8004e98 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}

08005008 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b085      	sub	sp, #20
 800500c:	af02      	add	r7, sp, #8
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	4611      	mov	r1, r2
 8005014:	461a      	mov	r2, r3
 8005016:	4623      	mov	r3, r4
 8005018:	80fb      	strh	r3, [r7, #6]
 800501a:	4603      	mov	r3, r0
 800501c:	80bb      	strh	r3, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	807b      	strh	r3, [r7, #2]
 8005022:	4613      	mov	r3, r2
 8005024:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	8b3b      	ldrh	r3, [r7, #24]
 800502a:	4413      	add	r3, r2
 800502c:	b298      	uxth	r0, r3
 800502e:	8b3b      	ldrh	r3, [r7, #24]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	b29b      	uxth	r3, r3
 8005034:	887a      	ldrh	r2, [r7, #2]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	b29a      	uxth	r2, r3
 800503a:	883c      	ldrh	r4, [r7, #0]
 800503c:	88b9      	ldrh	r1, [r7, #4]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	4623      	mov	r3, r4
 8005044:	f7fe ff9e 	bl	8003f84 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	4413      	add	r3, r2
 800504e:	b29a      	uxth	r2, r3
 8005050:	8b3b      	ldrh	r3, [r7, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	b218      	sxth	r0, r3
 800505c:	88ba      	ldrh	r2, [r7, #4]
 800505e:	8b3b      	ldrh	r3, [r7, #24]
 8005060:	4413      	add	r3, r2
 8005062:	b29b      	uxth	r3, r3
 8005064:	b219      	sxth	r1, r3
 8005066:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800506a:	8b3b      	ldrh	r3, [r7, #24]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	883a      	ldrh	r2, [r7, #0]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	b21b      	sxth	r3, r3
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	9201      	str	r2, [sp, #4]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2301      	movs	r3, #1
 8005084:	4622      	mov	r2, r4
 8005086:	f7ff fee5 	bl	8004e54 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	8b3b      	ldrh	r3, [r7, #24]
 800508e:	4413      	add	r3, r2
 8005090:	b29b      	uxth	r3, r3
 8005092:	b218      	sxth	r0, r3
 8005094:	88ba      	ldrh	r2, [r7, #4]
 8005096:	8b3b      	ldrh	r3, [r7, #24]
 8005098:	4413      	add	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	b219      	sxth	r1, r3
 800509e:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80050a2:	8b3b      	ldrh	r3, [r7, #24]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	883a      	ldrh	r2, [r7, #0]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	9201      	str	r2, [sp, #4]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2302      	movs	r3, #2
 80050bc:	4622      	mov	r2, r4
 80050be:	f7ff fec9 	bl	8004e54 <LCD_Circle_Fill_Helper>
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd90      	pop	{r4, r7, pc}

080050ca <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80050ca:	b590      	push	{r4, r7, lr}
 80050cc:	b08b      	sub	sp, #44	; 0x2c
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60ba      	str	r2, [r7, #8]
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	4603      	mov	r3, r0
 80050d6:	81fb      	strh	r3, [r7, #14]
 80050d8:	460b      	mov	r3, r1
 80050da:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	777b      	strb	r3, [r7, #29]
 80050ec:	2300      	movs	r3, #0
 80050ee:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	763b      	strb	r3, [r7, #24]
 80050f8:	e093      	b.n	8005222 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	767b      	strb	r3, [r7, #25]
 80050fe:	e052      	b.n	80051a6 <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005100:	7f3b      	ldrb	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005106:	8bfb      	ldrh	r3, [r7, #30]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	83fa      	strh	r2, [r7, #30]
 800510c:	461a      	mov	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8005116:	2380      	movs	r3, #128	; 0x80
 8005118:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 800511a:	7f7a      	ldrb	r2, [r7, #29]
 800511c:	7f3b      	ldrb	r3, [r7, #28]
 800511e:	4013      	ands	r3, r2
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <LCD_Char+0x64>
			{
				set_pixels++;
 8005126:	8b7b      	ldrh	r3, [r7, #26]
 8005128:	3301      	adds	r3, #1
 800512a:	837b      	strh	r3, [r7, #26]
 800512c:	e035      	b.n	800519a <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 800512e:	8b7b      	ldrh	r3, [r7, #26]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d032      	beq.n	800519a <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800513a:	461a      	mov	r2, r3
 800513c:	7e7b      	ldrb	r3, [r7, #25]
 800513e:	441a      	add	r2, r3
 8005140:	8b7b      	ldrh	r3, [r7, #26]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	b29a      	uxth	r2, r3
 8005146:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800514a:	b29b      	uxth	r3, r3
 800514c:	fb12 f303 	smulbb	r3, r2, r3
 8005150:	b29a      	uxth	r2, r3
 8005152:	89fb      	ldrh	r3, [r7, #14]
 8005154:	4413      	add	r3, r2
 8005156:	b298      	uxth	r0, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800515e:	461a      	mov	r2, r3
 8005160:	7e3b      	ldrb	r3, [r7, #24]
 8005162:	4413      	add	r3, r2
 8005164:	b29a      	uxth	r2, r3
 8005166:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800516a:	b29b      	uxth	r3, r3
 800516c:	fb12 f303 	smulbb	r3, r2, r3
 8005170:	b29a      	uxth	r2, r3
 8005172:	89bb      	ldrh	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	b299      	uxth	r1, r3
 8005178:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800517c:	b29b      	uxth	r3, r3
 800517e:	8b7a      	ldrh	r2, [r7, #26]
 8005180:	fb12 f303 	smulbb	r3, r2, r3
 8005184:	b29a      	uxth	r2, r3
 8005186:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800518a:	b29c      	uxth	r4, r3
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	4623      	mov	r3, r4
 8005192:	f7fe fef7 	bl	8003f84 <LCD_Rect_Fill>
				set_pixels = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800519a:	7f3b      	ldrb	r3, [r7, #28]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80051a0:	7e7b      	ldrb	r3, [r7, #25]
 80051a2:	3301      	adds	r3, #1
 80051a4:	767b      	strb	r3, [r7, #25]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	789b      	ldrb	r3, [r3, #2]
 80051aa:	7e7a      	ldrb	r2, [r7, #25]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d3a7      	bcc.n	8005100 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80051b0:	8b7b      	ldrh	r3, [r7, #26]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d032      	beq.n	800521c <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80051bc:	461a      	mov	r2, r3
 80051be:	7e7b      	ldrb	r3, [r7, #25]
 80051c0:	441a      	add	r2, r3
 80051c2:	8b7b      	ldrh	r3, [r7, #26]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	fb12 f303 	smulbb	r3, r2, r3
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	89fb      	ldrh	r3, [r7, #14]
 80051d6:	4413      	add	r3, r2
 80051d8:	b298      	uxth	r0, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80051e0:	461a      	mov	r2, r3
 80051e2:	7e3b      	ldrb	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	fb12 f303 	smulbb	r3, r2, r3
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	89bb      	ldrh	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	b299      	uxth	r1, r3
 80051fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8b7a      	ldrh	r2, [r7, #26]
 8005202:	fb12 f303 	smulbb	r3, r2, r3
 8005206:	b29a      	uxth	r2, r3
 8005208:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800520c:	b29c      	uxth	r4, r3
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4623      	mov	r3, r4
 8005214:	f7fe feb6 	bl	8003f84 <LCD_Rect_Fill>
			set_pixels = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800521c:	7e3b      	ldrb	r3, [r7, #24]
 800521e:	3301      	adds	r3, #1
 8005220:	763b      	strb	r3, [r7, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	7e3a      	ldrb	r2, [r7, #24]
 8005228:	429a      	cmp	r2, r3
 800522a:	f4ff af66 	bcc.w	80050fa <LCD_Char+0x30>
		}
	}
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	3724      	adds	r7, #36	; 0x24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd90      	pop	{r4, r7, pc}

08005238 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b08f      	sub	sp, #60	; 0x3c
 800523c:	af02      	add	r7, sp, #8
 800523e:	60ba      	str	r2, [r7, #8]
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	4603      	mov	r3, r0
 8005244:	81fb      	strh	r3, [r7, #14]
 8005246:	460b      	mov	r3, r1
 8005248:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800524a:	89fb      	ldrh	r3, [r7, #14]
 800524c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 800524e:	89bb      	ldrh	r3, [r7, #12]
 8005250:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8005252:	f107 031c 	add.w	r3, r7, #28
 8005256:	220c      	movs	r2, #12
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4618      	mov	r0, r3
 800525c:	f017 fc8c 	bl	801cb78 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005260:	2300      	movs	r3, #0
 8005262:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005264:	e056      	b.n	8005314 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8005266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	4413      	add	r3, r2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8005272:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005276:	2b0a      	cmp	r3, #10
 8005278:	d10f      	bne.n	800529a <LCD_Font+0x62>
		{
			cursor_x = x;
 800527a:	89fb      	ldrh	r3, [r7, #14]
 800527c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800527e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005282:	b29a      	uxth	r2, r3
 8005284:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005288:	b29b      	uxth	r3, r3
 800528a:	fb12 f303 	smulbb	r3, r2, r3
 800528e:	b29a      	uxth	r2, r3
 8005290:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005292:	4413      	add	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005298:	e039      	b.n	800530e <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800529a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800529e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d333      	bcc.n	800530e <LCD_Font+0xd6>
 80052a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052aa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d82d      	bhi.n	800530e <LCD_Font+0xd6>
 80052b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052b6:	2b0d      	cmp	r3, #13
 80052b8:	d029      	beq.n	800530e <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052c0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80052c4:	1a5b      	subs	r3, r3, r1
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	18d1      	adds	r1, r2, r3
 80052ca:	f107 0314 	add.w	r3, r7, #20
 80052ce:	2208      	movs	r2, #8
 80052d0:	4618      	mov	r0, r3
 80052d2:	f017 fc51 	bl	801cb78 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052d6:	f107 041c 	add.w	r4, r7, #28
 80052da:	f107 0214 	add.w	r2, r7, #20
 80052de:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80052e2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80052e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4623      	mov	r3, r4
 80052f2:	f7ff feea 	bl	80050ca <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80052f6:	7e3b      	ldrb	r3, [r7, #24]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052fe:	b29b      	uxth	r3, r3
 8005300:	fb12 f303 	smulbb	r3, r2, r3
 8005304:	b29a      	uxth	r2, r3
 8005306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005308:	4413      	add	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800530e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005310:	3301      	adds	r3, #1
 8005312:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005314:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8005316:	68b8      	ldr	r0, [r7, #8]
 8005318:	f013 fd5a 	bl	8018dd0 <strlen>
 800531c:	4603      	mov	r3, r0
 800531e:	429c      	cmp	r4, r3
 8005320:	d3a1      	bcc.n	8005266 <LCD_Font+0x2e>
		}
	}
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	3734      	adds	r7, #52	; 0x34
 8005328:	46bd      	mov	sp, r7
 800532a:	bd90      	pop	{r4, r7, pc}

0800532c <LCD_Init>:

void LCD_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8005330:	2096      	movs	r0, #150	; 0x96
 8005332:	f001 fcc1 	bl	8006cb8 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 8005336:	2001      	movs	r0, #1
 8005338:	f7fe fd95 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 800533c:	2029      	movs	r0, #41	; 0x29
 800533e:	f7fe fd92 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8005342:	20e2      	movs	r0, #226	; 0xe2
 8005344:	f7fe fd8f 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 8005348:	201d      	movs	r0, #29
 800534a:	f7fe fd9b 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 800534e:	2002      	movs	r0, #2
 8005350:	f7fe fd98 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 8005354:	20ff      	movs	r0, #255	; 0xff
 8005356:	f7fe fd95 	bl	8003e84 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 800535a:	20e0      	movs	r0, #224	; 0xe0
 800535c:	f7fe fd83 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 8005360:	2001      	movs	r0, #1
 8005362:	f7fe fd8f 	bl	8003e84 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 8005366:	2078      	movs	r0, #120	; 0x78
 8005368:	f001 fca6 	bl	8006cb8 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 800536c:	20e0      	movs	r0, #224	; 0xe0
 800536e:	f7fe fd7a 	bl	8003e66 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 8005372:	2003      	movs	r0, #3
 8005374:	f7fe fd86 	bl	8003e84 <LCD_Send_Dat>
	HAL_Delay(120);
 8005378:	2078      	movs	r0, #120	; 0x78
 800537a:	f001 fc9d 	bl	8006cb8 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 800537e:	2001      	movs	r0, #1
 8005380:	f7fe fd71 	bl	8003e66 <LCD_Send_Cmd>
	HAL_Delay(120);
 8005384:	2078      	movs	r0, #120	; 0x78
 8005386:	f001 fc97 	bl	8006cb8 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 800538a:	20e6      	movs	r0, #230	; 0xe6
 800538c:	f7fe fd6b 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 8005390:	2003      	movs	r0, #3
 8005392:	f7fe fd77 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 8005396:	2085      	movs	r0, #133	; 0x85
 8005398:	f7fe fd74 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 800539c:	201d      	movs	r0, #29
 800539e:	f7fe fd71 	bl	8003e84 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 80053a2:	20b0      	movs	r0, #176	; 0xb0
 80053a4:	f7fe fd5f 	bl	8003e66 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80053a8:	20ae      	movs	r0, #174	; 0xae
 80053aa:	f7fe fd6b 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80053ae:	2020      	movs	r0, #32
 80053b0:	f7fe fd68 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 80053b4:	2003      	movs	r0, #3
 80053b6:	f7fe fd65 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 80053ba:	201f      	movs	r0, #31
 80053bc:	f7fe fd62 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 80053c0:	2001      	movs	r0, #1
 80053c2:	f7fe fd5f 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 80053c6:	20df      	movs	r0, #223	; 0xdf
 80053c8:	f7fe fd5c 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 80053cc:	202d      	movs	r0, #45	; 0x2d
 80053ce:	f7fe fd59 	bl	8003e84 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 80053d2:	20b4      	movs	r0, #180	; 0xb4
 80053d4:	f7fe fd47 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 80053d8:	2003      	movs	r0, #3
 80053da:	f7fe fd53 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 80053de:	20a0      	movs	r0, #160	; 0xa0
 80053e0:	f7fe fd50 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fe fd4d 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 80053ea:	202e      	movs	r0, #46	; 0x2e
 80053ec:	f7fe fd4a 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 80053f0:	2030      	movs	r0, #48	; 0x30
 80053f2:	f7fe fd47 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 80053f6:	2000      	movs	r0, #0
 80053f8:	f7fe fd44 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 80053fc:	200f      	movs	r0, #15
 80053fe:	f7fe fd41 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8005402:	2000      	movs	r0, #0
 8005404:	f7fe fd3e 	bl	8003e84 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005408:	20b6      	movs	r0, #182	; 0xb6
 800540a:	f7fe fd2c 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 800540e:	2002      	movs	r0, #2
 8005410:	f7fe fd38 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8005414:	200d      	movs	r0, #13
 8005416:	f7fe fd35 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 800541a:	2000      	movs	r0, #0
 800541c:	f7fe fd32 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005420:	2010      	movs	r0, #16
 8005422:	f7fe fd2f 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 8005426:	2010      	movs	r0, #16
 8005428:	f7fe fd2c 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 800542c:	2008      	movs	r0, #8
 800542e:	f7fe fd29 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8005432:	2000      	movs	r0, #0
 8005434:	f7fe fd26 	bl	8003e84 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 8005438:	20be      	movs	r0, #190	; 0xbe
 800543a:	f7fe fd14 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 800543e:	2008      	movs	r0, #8
 8005440:	f7fe fd20 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8005444:	20ff      	movs	r0, #255	; 0xff
 8005446:	f7fe fd1d 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 800544a:	2001      	movs	r0, #1
 800544c:	f7fe fd1a 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 8005450:	2036      	movs	r0, #54	; 0x36
 8005452:	f7fe fd08 	bl	8003e66 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 8005456:	2003      	movs	r0, #3
 8005458:	f7fe fd14 	bl	8003e84 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 800545c:	20f0      	movs	r0, #240	; 0xf0
 800545e:	f7fe fd02 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 8005462:	2003      	movs	r0, #3
 8005464:	f7fe fd0e 	bl	8003e84 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 8005468:	2029      	movs	r0, #41	; 0x29
 800546a:	f7fe fcfc 	bl	8003e66 <LCD_Send_Cmd>
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}

08005472 <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	4603      	mov	r3, r0
 800547a:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 800547c:	20be      	movs	r0, #190	; 0xbe
 800547e:	f7fe fcf2 	bl	8003e66 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 8005482:	2008      	movs	r0, #8
 8005484:	f7fe fcfe 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	b29b      	uxth	r3, r3
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fcf9 	bl	8003e84 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 8005492:	2001      	movs	r0, #1
 8005494:	f7fe fcf6 	bl	8003e84 <LCD_Send_Dat>
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4b10      	ldr	r3, [pc, #64]	; (80054ec <HAL_MspInit+0x4c>)
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	4a0f      	ldr	r2, [pc, #60]	; (80054ec <HAL_MspInit+0x4c>)
 80054b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b4:	6453      	str	r3, [r2, #68]	; 0x44
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <HAL_MspInit+0x4c>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <HAL_MspInit+0x4c>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	4a08      	ldr	r2, [pc, #32]	; (80054ec <HAL_MspInit+0x4c>)
 80054cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d0:	6413      	str	r3, [r2, #64]	; 0x40
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_MspInit+0x4c>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40023800 	.word	0x40023800

080054f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a17      	ldr	r2, [pc, #92]	; (800556c <HAL_DAC_MspInit+0x7c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d127      	bne.n	8005562 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	4b16      	ldr	r3, [pc, #88]	; (8005570 <HAL_DAC_MspInit+0x80>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <HAL_DAC_MspInit+0x80>)
 800551c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005520:	6413      	str	r3, [r2, #64]	; 0x40
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <HAL_DAC_MspInit+0x80>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <HAL_DAC_MspInit+0x80>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	4a0e      	ldr	r2, [pc, #56]	; (8005570 <HAL_DAC_MspInit+0x80>)
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	6313      	str	r3, [r2, #48]	; 0x30
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_DAC_MspInit+0x80>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800554a:	2330      	movs	r3, #48	; 0x30
 800554c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800554e:	2303      	movs	r3, #3
 8005550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005556:	f107 0314 	add.w	r3, r7, #20
 800555a:	4619      	mov	r1, r3
 800555c:	4805      	ldr	r0, [pc, #20]	; (8005574 <HAL_DAC_MspInit+0x84>)
 800555e:	f005 fcc7 	bl	800aef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005562:	bf00      	nop
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40007400 	.word	0x40007400
 8005570:	40023800 	.word	0x40023800
 8005574:	40020000 	.word	0x40020000

08005578 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <HAL_DAC_MspDeInit+0x30>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d109      	bne.n	800559e <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 800558a:	4b08      	ldr	r3, [pc, #32]	; (80055ac <HAL_DAC_MspDeInit+0x34>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <HAL_DAC_MspDeInit+0x34>)
 8005590:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 8005596:	2130      	movs	r1, #48	; 0x30
 8005598:	4805      	ldr	r0, [pc, #20]	; (80055b0 <HAL_DAC_MspDeInit+0x38>)
 800559a:	f005 fe45 	bl	800b228 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40007400 	.word	0x40007400
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40020000 	.word	0x40020000

080055b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a21      	ldr	r2, [pc, #132]	; (8005658 <HAL_I2C_MspInit+0xa4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d13b      	bne.n	800564e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b20      	ldr	r3, [pc, #128]	; (800565c <HAL_I2C_MspInit+0xa8>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a1f      	ldr	r2, [pc, #124]	; (800565c <HAL_I2C_MspInit+0xa8>)
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <HAL_I2C_MspInit+0xa8>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055f2:	23c0      	movs	r3, #192	; 0xc0
 80055f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055f6:	2312      	movs	r3, #18
 80055f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055fa:	2301      	movs	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005602:	2304      	movs	r3, #4
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	4619      	mov	r1, r3
 800560c:	4814      	ldr	r0, [pc, #80]	; (8005660 <HAL_I2C_MspInit+0xac>)
 800560e:	f005 fc6f 	bl	800aef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_I2C_MspInit+0xa8>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	4a10      	ldr	r2, [pc, #64]	; (800565c <HAL_I2C_MspInit+0xa8>)
 800561c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005620:	6413      	str	r3, [r2, #64]	; 0x40
 8005622:	4b0e      	ldr	r3, [pc, #56]	; (800565c <HAL_I2C_MspInit+0xa8>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800562e:	2200      	movs	r2, #0
 8005630:	2100      	movs	r1, #0
 8005632:	201f      	movs	r0, #31
 8005634:	f001 fe37 	bl	80072a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005638:	201f      	movs	r0, #31
 800563a:	f001 fe50 	bl	80072de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800563e:	2200      	movs	r2, #0
 8005640:	2100      	movs	r1, #0
 8005642:	2020      	movs	r0, #32
 8005644:	f001 fe2f 	bl	80072a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005648:	2020      	movs	r0, #32
 800564a:	f001 fe48 	bl	80072de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800564e:	bf00      	nop
 8005650:	3728      	adds	r7, #40	; 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	40005400 	.word	0x40005400
 800565c:	40023800 	.word	0x40023800
 8005660:	40020400 	.word	0x40020400

08005664 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <HAL_I2C_MspDeInit+0x44>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d113      	bne.n	800569e <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <HAL_I2C_MspDeInit+0x48>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <HAL_I2C_MspDeInit+0x48>)
 800567c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005680:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	480a      	ldr	r0, [pc, #40]	; (80056b0 <HAL_I2C_MspDeInit+0x4c>)
 8005686:	f005 fdcf 	bl	800b228 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	4808      	ldr	r0, [pc, #32]	; (80056b0 <HAL_I2C_MspDeInit+0x4c>)
 800568e:	f005 fdcb 	bl	800b228 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8005692:	201f      	movs	r0, #31
 8005694:	f001 fe31 	bl	80072fa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005698:	2020      	movs	r0, #32
 800569a:	f001 fe2e 	bl	80072fa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40005400 	.word	0x40005400
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40020400 	.word	0x40020400

080056b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	; 0x38
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a89      	ldr	r2, [pc, #548]	; (80058f8 <HAL_SPI_MspInit+0x244>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d12c      	bne.n	8005730 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_SPI_MspInit+0x248>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	4a87      	ldr	r2, [pc, #540]	; (80058fc <HAL_SPI_MspInit+0x248>)
 80056e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056e4:	6453      	str	r3, [r2, #68]	; 0x44
 80056e6:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_SPI_MspInit+0x248>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_SPI_MspInit+0x248>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	4a80      	ldr	r2, [pc, #512]	; (80058fc <HAL_SPI_MspInit+0x248>)
 80056fc:	f043 0302 	orr.w	r3, r3, #2
 8005700:	6313      	str	r3, [r2, #48]	; 0x30
 8005702:	4b7e      	ldr	r3, [pc, #504]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800570e:	2338      	movs	r3, #56	; 0x38
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005712:	2302      	movs	r3, #2
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005716:	2300      	movs	r3, #0
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800571a:	2303      	movs	r3, #3
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800571e:	2305      	movs	r3, #5
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005726:	4619      	mov	r1, r3
 8005728:	4875      	ldr	r0, [pc, #468]	; (8005900 <HAL_SPI_MspInit+0x24c>)
 800572a:	f005 fbe1 	bl	800aef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800572e:	e0de      	b.n	80058ee <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a73      	ldr	r2, [pc, #460]	; (8005904 <HAL_SPI_MspInit+0x250>)
 8005736:	4293      	cmp	r3, r2
 8005738:	f040 8088 	bne.w	800584c <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	4b6e      	ldr	r3, [pc, #440]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	4a6d      	ldr	r2, [pc, #436]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800574a:	6413      	str	r3, [r2, #64]	; 0x40
 800574c:	4b6b      	ldr	r3, [pc, #428]	; (80058fc <HAL_SPI_MspInit+0x248>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	4b67      	ldr	r3, [pc, #412]	; (80058fc <HAL_SPI_MspInit+0x248>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	4a66      	ldr	r2, [pc, #408]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005762:	f043 0302 	orr.w	r3, r3, #2
 8005766:	6313      	str	r3, [r2, #48]	; 0x30
 8005768:	4b64      	ldr	r3, [pc, #400]	; (80058fc <HAL_SPI_MspInit+0x248>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005774:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577a:	2302      	movs	r3, #2
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005782:	2303      	movs	r3, #3
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005786:	2305      	movs	r3, #5
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578e:	4619      	mov	r1, r3
 8005790:	485b      	ldr	r0, [pc, #364]	; (8005900 <HAL_SPI_MspInit+0x24c>)
 8005792:	f005 fbad 	bl	800aef0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005796:	4b5c      	ldr	r3, [pc, #368]	; (8005908 <HAL_SPI_MspInit+0x254>)
 8005798:	4a5c      	ldr	r2, [pc, #368]	; (800590c <HAL_SPI_MspInit+0x258>)
 800579a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800579c:	4b5a      	ldr	r3, [pc, #360]	; (8005908 <HAL_SPI_MspInit+0x254>)
 800579e:	2200      	movs	r2, #0
 80057a0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057a2:	4b59      	ldr	r3, [pc, #356]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057a8:	4b57      	ldr	r3, [pc, #348]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057ae:	4b56      	ldr	r3, [pc, #344]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057b4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057b6:	4b54      	ldr	r3, [pc, #336]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057bc:	4b52      	ldr	r3, [pc, #328]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80057c2:	4b51      	ldr	r3, [pc, #324]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057c8:	4b4f      	ldr	r3, [pc, #316]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057ce:	4b4e      	ldr	r3, [pc, #312]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80057d4:	484c      	ldr	r0, [pc, #304]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057d6:	f002 fb45 	bl	8007e64 <HAL_DMA_Init>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 80057e0:	f7fe fae8 	bl	8003db4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a48      	ldr	r2, [pc, #288]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057e8:	649a      	str	r2, [r3, #72]	; 0x48
 80057ea:	4a47      	ldr	r2, [pc, #284]	; (8005908 <HAL_SPI_MspInit+0x254>)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80057f0:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 80057f2:	4a48      	ldr	r2, [pc, #288]	; (8005914 <HAL_SPI_MspInit+0x260>)
 80057f4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057fc:	4b44      	ldr	r3, [pc, #272]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005802:	4b43      	ldr	r3, [pc, #268]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005804:	2200      	movs	r2, #0
 8005806:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005808:	4b41      	ldr	r3, [pc, #260]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 800580a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800580e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005810:	4b3f      	ldr	r3, [pc, #252]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005812:	2200      	movs	r2, #0
 8005814:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005816:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005818:	2200      	movs	r2, #0
 800581a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800581c:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 800581e:	2200      	movs	r2, #0
 8005820:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005822:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005824:	2200      	movs	r2, #0
 8005826:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005828:	4b39      	ldr	r3, [pc, #228]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 800582a:	2200      	movs	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800582e:	4838      	ldr	r0, [pc, #224]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005830:	f002 fb18 	bl	8007e64 <HAL_DMA_Init>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 800583a:	f7fe fabb 	bl	8003db4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a33      	ldr	r2, [pc, #204]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005842:	64da      	str	r2, [r3, #76]	; 0x4c
 8005844:	4a32      	ldr	r2, [pc, #200]	; (8005910 <HAL_SPI_MspInit+0x25c>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6393      	str	r3, [r2, #56]	; 0x38
}
 800584a:	e050      	b.n	80058ee <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a31      	ldr	r2, [pc, #196]	; (8005918 <HAL_SPI_MspInit+0x264>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d14b      	bne.n	80058ee <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	4b28      	ldr	r3, [pc, #160]	; (80058fc <HAL_SPI_MspInit+0x248>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	4a27      	ldr	r2, [pc, #156]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005864:	6413      	str	r3, [r2, #64]	; 0x40
 8005866:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	4b21      	ldr	r3, [pc, #132]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	4a20      	ldr	r2, [pc, #128]	; (80058fc <HAL_SPI_MspInit+0x248>)
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	6313      	str	r3, [r2, #48]	; 0x30
 8005882:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_SPI_MspInit+0x248>)
 8005898:	f043 0304 	orr.w	r3, r3, #4
 800589c:	6313      	str	r3, [r2, #48]	; 0x30
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <HAL_SPI_MspInit+0x248>)
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	623b      	str	r3, [r7, #32]
 80058a8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b8:	2303      	movs	r3, #3
 80058ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058bc:	2306      	movs	r3, #6
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c4:	4619      	mov	r1, r3
 80058c6:	4815      	ldr	r0, [pc, #84]	; (800591c <HAL_SPI_MspInit+0x268>)
 80058c8:	f005 fb12 	bl	800aef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80058cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d2:	2302      	movs	r3, #2
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058da:	2303      	movs	r3, #3
 80058dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058de:	2306      	movs	r3, #6
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e6:	4619      	mov	r1, r3
 80058e8:	480d      	ldr	r0, [pc, #52]	; (8005920 <HAL_SPI_MspInit+0x26c>)
 80058ea:	f005 fb01 	bl	800aef0 <HAL_GPIO_Init>
}
 80058ee:	bf00      	nop
 80058f0:	3738      	adds	r7, #56	; 0x38
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40013000 	.word	0x40013000
 80058fc:	40023800 	.word	0x40023800
 8005900:	40020400 	.word	0x40020400
 8005904:	40003800 	.word	0x40003800
 8005908:	20000418 	.word	0x20000418
 800590c:	40026070 	.word	0x40026070
 8005910:	20000478 	.word	0x20000478
 8005914:	40026058 	.word	0x40026058
 8005918:	40003c00 	.word	0x40003c00
 800591c:	40020000 	.word	0x40020000
 8005920:	40020800 	.word	0x40020800

08005924 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <HAL_SPI_MspDeInit+0x90>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10a      	bne.n	800594c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_SPI_MspDeInit+0x94>)
 8005938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593a:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_SPI_MspDeInit+0x94>)
 800593c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005940:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005942:	2138      	movs	r1, #56	; 0x38
 8005944:	481d      	ldr	r0, [pc, #116]	; (80059bc <HAL_SPI_MspDeInit+0x98>)
 8005946:	f005 fc6f 	bl	800b228 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800594a:	e02f      	b.n	80059ac <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_SPI_MspDeInit+0x9c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d115      	bne.n	8005982 <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_SPI_MspDeInit+0x94>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_SPI_MspDeInit+0x94>)
 800595c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005960:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005962:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005966:	4815      	ldr	r0, [pc, #84]	; (80059bc <HAL_SPI_MspDeInit+0x98>)
 8005968:	f005 fc5e 	bl	800b228 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005970:	4618      	mov	r0, r3
 8005972:	f002 fb25 	bl	8007fc0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	4618      	mov	r0, r3
 800597c:	f002 fb20 	bl	8007fc0 <HAL_DMA_DeInit>
}
 8005980:	e014      	b.n	80059ac <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <HAL_SPI_MspDeInit+0xa0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10f      	bne.n	80059ac <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_SPI_MspDeInit+0x94>)
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <HAL_SPI_MspDeInit+0x94>)
 8005992:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005996:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800599c:	480a      	ldr	r0, [pc, #40]	; (80059c8 <HAL_SPI_MspDeInit+0xa4>)
 800599e:	f005 fc43 	bl	800b228 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80059a2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80059a6:	4809      	ldr	r0, [pc, #36]	; (80059cc <HAL_SPI_MspDeInit+0xa8>)
 80059a8:	f005 fc3e 	bl	800b228 <HAL_GPIO_DeInit>
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40013000 	.word	0x40013000
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40020400 	.word	0x40020400
 80059c0:	40003800 	.word	0x40003800
 80059c4:	40003c00 	.word	0x40003c00
 80059c8:	40020000 	.word	0x40020000
 80059cc:	40020800 	.word	0x40020800

080059d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	609a      	str	r2, [r3, #8]
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <HAL_UART_MspInit+0x94>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d134      	bne.n	8005a5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <HAL_UART_MspInit+0x98>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_UART_MspInit+0x98>)
 80059fc:	f043 0310 	orr.w	r3, r3, #16
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_UART_MspInit+0x98>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <HAL_UART_MspInit+0x98>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_UART_MspInit+0x98>)
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_UART_MspInit+0x98>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a30:	2302      	movs	r3, #2
 8005a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a3c:	2307      	movs	r3, #7
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	4619      	mov	r1, r3
 8005a46:	4809      	ldr	r0, [pc, #36]	; (8005a6c <HAL_UART_MspInit+0x9c>)
 8005a48:	f005 fa52 	bl	800aef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2025      	movs	r0, #37	; 0x25
 8005a52:	f001 fc28 	bl	80072a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a56:	2025      	movs	r0, #37	; 0x25
 8005a58:	f001 fc41 	bl	80072de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005a5c:	bf00      	nop
 8005a5e:	3728      	adds	r7, #40	; 0x28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	40020000 	.word	0x40020000

08005a70 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <HAL_UART_MspDeInit+0x38>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10d      	bne.n	8005a9e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <HAL_UART_MspDeInit+0x3c>)
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <HAL_UART_MspDeInit+0x3c>)
 8005a88:	f023 0310 	bic.w	r3, r3, #16
 8005a8c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005a8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a92:	4807      	ldr	r0, [pc, #28]	; (8005ab0 <HAL_UART_MspDeInit+0x40>)
 8005a94:	f005 fbc8 	bl	800b228 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005a98:	2025      	movs	r0, #37	; 0x25
 8005a9a:	f001 fc2e 	bl	80072fa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40020000 	.word	0x40020000

08005ab4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005aba:	1d3b      	adds	r3, r7, #4
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
 8005ac6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <HAL_FSMC_MspInit+0x88>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d131      	bne.n	8005b34 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <HAL_FSMC_MspInit+0x88>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <HAL_FSMC_MspInit+0x8c>)
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <HAL_FSMC_MspInit+0x8c>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	6393      	str	r3, [r2, #56]	; 0x38
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <HAL_FSMC_MspInit+0x8c>)
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005af2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005af6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af8:	2302      	movs	r3, #2
 8005afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b00:	2303      	movs	r3, #3
 8005b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005b04:	230c      	movs	r3, #12
 8005b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <HAL_FSMC_MspInit+0x90>)
 8005b0e:	f005 f9ef 	bl	800aef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005b12:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005b16:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b20:	2303      	movs	r3, #3
 8005b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005b24:	230c      	movs	r3, #12
 8005b26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4806      	ldr	r0, [pc, #24]	; (8005b48 <HAL_FSMC_MspInit+0x94>)
 8005b2e:	f005 f9df 	bl	800aef0 <HAL_GPIO_Init>
 8005b32:	e000      	b.n	8005b36 <HAL_FSMC_MspInit+0x82>
    return;
 8005b34:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000978 	.word	0x20000978
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40020c00 	.word	0x40020c00

08005b4c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005b54:	f7ff ffae 	bl	8005ab4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005b58:	bf00      	nop
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <HAL_FSMC_MspDeInit+0x38>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d113      	bne.n	8005b94 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <HAL_FSMC_MspDeInit+0x38>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005b72:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <HAL_FSMC_MspDeInit+0x3c>)
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <HAL_FSMC_MspDeInit+0x3c>)
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005b7e:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005b82:	4807      	ldr	r0, [pc, #28]	; (8005ba0 <HAL_FSMC_MspDeInit+0x40>)
 8005b84:	f005 fb50 	bl	800b228 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005b88:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005b8c:	4805      	ldr	r0, [pc, #20]	; (8005ba4 <HAL_FSMC_MspDeInit+0x44>)
 8005b8e:	f005 fb4b 	bl	800b228 <HAL_GPIO_DeInit>
 8005b92:	e000      	b.n	8005b96 <HAL_FSMC_MspDeInit+0x36>
    return;
 8005b94:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000097c 	.word	0x2000097c
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	40020c00 	.word	0x40020c00

08005ba8 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005bb0:	f7ff ffd6 	bl	8005b60 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005bc0:	e7fe      	b.n	8005bc0 <NMI_Handler+0x4>

08005bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bc6:	e7fe      	b.n	8005bc6 <HardFault_Handler+0x4>

08005bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bcc:	e7fe      	b.n	8005bcc <MemManage_Handler+0x4>

08005bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bd2:	e7fe      	b.n	8005bd2 <BusFault_Handler+0x4>

08005bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bd8:	e7fe      	b.n	8005bd8 <UsageFault_Handler+0x4>

08005bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bde:	bf00      	nop
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c08:	f000 fff6 	bl	8006bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c0c:	bf00      	nop
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005c14:	4802      	ldr	r0, [pc, #8]	; (8005c20 <DMA1_Stream3_IRQHandler+0x10>)
 8005c16:	f002 fc35 	bl	8008484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005c1a:	bf00      	nop
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000478 	.word	0x20000478

08005c24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005c28:	4802      	ldr	r0, [pc, #8]	; (8005c34 <DMA1_Stream4_IRQHandler+0x10>)
 8005c2a:	f002 fc2b 	bl	8008484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000418 	.word	0x20000418

08005c38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005c3c:	4802      	ldr	r0, [pc, #8]	; (8005c48 <I2C1_EV_IRQHandler+0x10>)
 8005c3e:	f009 fb1f 	bl	800f280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200002bc 	.word	0x200002bc

08005c4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005c50:	4802      	ldr	r0, [pc, #8]	; (8005c5c <I2C1_ER_IRQHandler+0x10>)
 8005c52:	f009 fc86 	bl	800f562 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005c56:	bf00      	nop
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200002bc 	.word	0x200002bc

08005c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c64:	4802      	ldr	r0, [pc, #8]	; (8005c70 <USART1_IRQHandler+0x10>)
 8005c66:	f011 f9df 	bl	8017028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200004d8 	.word	0x200004d8

08005c74 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <_getpid>:

int _getpid(void)
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0
	return 1;
 8005c86:	2301      	movs	r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <_kill>:

int _kill(int pid, int sig)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005c9c:	f013 ffda 	bl	8019c54 <__errno>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2216      	movs	r2, #22
 8005ca4:	601a      	str	r2, [r3, #0]
	return -1;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_exit>:

void _exit (int status)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005cba:	f04f 31ff 	mov.w	r1, #4294967295
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ffe7 	bl	8005c92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005cc4:	e7fe      	b.n	8005cc4 <_exit+0x12>

08005cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	e00a      	b.n	8005cee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005cd8:	f3af 8000 	nop.w
 8005cdc:	4601      	mov	r1, r0
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	60ba      	str	r2, [r7, #8]
 8005ce4:	b2ca      	uxtb	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3301      	adds	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	dbf0      	blt.n	8005cd8 <_read+0x12>
	}

return len;
 8005cf6:	687b      	ldr	r3, [r7, #4]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e009      	b.n	8005d26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	60ba      	str	r2, [r7, #8]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3301      	adds	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	dbf1      	blt.n	8005d12 <_write+0x12>
	}
	return len;
 8005d2e:	687b      	ldr	r3, [r7, #4]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <_close>:

int _close(int file)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	return -1;
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d60:	605a      	str	r2, [r3, #4]
	return 0;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <_isatty>:

int _isatty(int file)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	return 1;
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
	return 0;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_open>:

int _open(char *path, int flags, ...)
{
 8005da0:	b40e      	push	{r1, r2, r3}
 8005da2:	b480      	push	{r7}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	b003      	add	sp, #12
 8005dba:	4770      	bx	lr

08005dbc <_wait>:

int _wait(int *status)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8005dc4:	f013 ff46 	bl	8019c54 <__errno>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	220a      	movs	r2, #10
 8005dcc:	601a      	str	r2, [r3, #0]
	return -1;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_unlink>:

int _unlink(char *name)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8005de2:	f013 ff37 	bl	8019c54 <__errno>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2202      	movs	r2, #2
 8005dea:	601a      	str	r2, [r3, #0]
	return -1;
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_times>:

int _times(struct tms *buf)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	return -1;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <_stat>:

int _stat(char *file, struct stat *st)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e20:	605a      	str	r2, [r3, #4]
	return 0;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <_link>:

int _link(char *old, char *new)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8005e3a:	f013 ff0b 	bl	8019c54 <__errno>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	221f      	movs	r2, #31
 8005e42:	601a      	str	r2, [r3, #0]
	return -1;
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <_fork>:

int _fork(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8005e54:	f013 fefe 	bl	8019c54 <__errno>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	220b      	movs	r2, #11
 8005e5c:	601a      	str	r2, [r3, #0]
	return -1;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8005e72:	f013 feef 	bl	8019c54 <__errno>
 8005e76:	4603      	mov	r3, r0
 8005e78:	220c      	movs	r2, #12
 8005e7a:	601a      	str	r2, [r3, #0]
	return -1;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <_sbrk+0x5c>)
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <_sbrk+0x60>)
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e9c:	4b13      	ldr	r3, [pc, #76]	; (8005eec <_sbrk+0x64>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <_sbrk+0x64>)
 8005ea6:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <_sbrk+0x68>)
 8005ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <_sbrk+0x64>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d207      	bcs.n	8005ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005eb8:	f013 fecc 	bl	8019c54 <__errno>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	220c      	movs	r2, #12
 8005ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	e009      	b.n	8005edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ec8:	4b08      	ldr	r3, [pc, #32]	; (8005eec <_sbrk+0x64>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <_sbrk+0x64>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4a05      	ldr	r2, [pc, #20]	; (8005eec <_sbrk+0x64>)
 8005ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005eda:	68fb      	ldr	r3, [r7, #12]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20020000 	.word	0x20020000
 8005ee8:	00000800 	.word	0x00000800
 8005eec:	20000984 	.word	0x20000984
 8005ef0:	20000a20 	.word	0x20000a20

08005ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <SystemInit+0x20>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <SystemInit+0x20>)
 8005f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	e000ed00 	.word	0xe000ed00

08005f18 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	2302      	movs	r3, #2
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	2302      	movs	r3, #2
 8005f30:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f32:	4b34      	ldr	r3, [pc, #208]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d011      	beq.n	8005f66 <SystemCoreClockUpdate+0x4e>
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d844      	bhi.n	8005fd2 <SystemCoreClockUpdate+0xba>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <SystemCoreClockUpdate+0x3e>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d004      	beq.n	8005f5e <SystemCoreClockUpdate+0x46>
 8005f54:	e03d      	b.n	8005fd2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005f56:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <SystemCoreClockUpdate+0xf0>)
 8005f58:	4a2c      	ldr	r2, [pc, #176]	; (800600c <SystemCoreClockUpdate+0xf4>)
 8005f5a:	601a      	str	r2, [r3, #0]
      break;
 8005f5c:	e03d      	b.n	8005fda <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005f5e:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <SystemCoreClockUpdate+0xf0>)
 8005f60:	4a2b      	ldr	r2, [pc, #172]	; (8006010 <SystemCoreClockUpdate+0xf8>)
 8005f62:	601a      	str	r2, [r3, #0]
      break;
 8005f64:	e039      	b.n	8005fda <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	0d9b      	lsrs	r3, r3, #22
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f72:	4b24      	ldr	r3, [pc, #144]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f7a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00c      	beq.n	8005f9c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005f82:	4a23      	ldr	r2, [pc, #140]	; (8006010 <SystemCoreClockUpdate+0xf8>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005f8c:	6852      	ldr	r2, [r2, #4]
 8005f8e:	0992      	lsrs	r2, r2, #6
 8005f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e00b      	b.n	8005fb4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005f9c:	4a1b      	ldr	r2, [pc, #108]	; (800600c <SystemCoreClockUpdate+0xf4>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	4a17      	ldr	r2, [pc, #92]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005fa6:	6852      	ldr	r2, [r2, #4]
 8005fa8:	0992      	lsrs	r2, r2, #6
 8005faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005fb4:	4b13      	ldr	r3, [pc, #76]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <SystemCoreClockUpdate+0xf0>)
 8005fce:	6013      	str	r3, [r2, #0]
      break;
 8005fd0:	e003      	b.n	8005fda <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <SystemCoreClockUpdate+0xf0>)
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <SystemCoreClockUpdate+0xf4>)
 8005fd6:	601a      	str	r2, [r3, #0]
      break;
 8005fd8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <SystemCoreClockUpdate+0xec>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	4a0b      	ldr	r2, [pc, #44]	; (8006014 <SystemCoreClockUpdate+0xfc>)
 8005fe6:	5cd3      	ldrb	r3, [r2, r3]
 8005fe8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <SystemCoreClockUpdate+0xf0>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	4a04      	ldr	r2, [pc, #16]	; (8006008 <SystemCoreClockUpdate+0xf0>)
 8005ff6:	6013      	str	r3, [r2, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40023800 	.word	0x40023800
 8006008:	20000058 	.word	0x20000058
 800600c:	00f42400 	.word	0x00f42400
 8006010:	007a1200 	.word	0x007a1200
 8006014:	080522f8 	.word	0x080522f8

08006018 <W25Q_Reset>:
#endif

w25_info_t  w25_info;
uint8_t buf[64] = {0};

void W25Q_Reset (void) {
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800601c:	2200      	movs	r2, #0
 800601e:	2101      	movs	r1, #1
 8006020:	480b      	ldr	r0, [pc, #44]	; (8006050 <W25Q_Reset+0x38>)
 8006022:	f005 fa15 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <W25Q_Reset+0x3c>)
 8006028:	2266      	movs	r2, #102	; 0x66
 800602a:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <W25Q_Reset+0x3c>)
 800602e:	2299      	movs	r2, #153	; 0x99
 8006030:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 8006032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006036:	2202      	movs	r2, #2
 8006038:	4906      	ldr	r1, [pc, #24]	; (8006054 <W25Q_Reset+0x3c>)
 800603a:	4807      	ldr	r0, [pc, #28]	; (8006058 <W25Q_Reset+0x40>)
 800603c:	f00c ffa5 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006040:	2201      	movs	r2, #1
 8006042:	2101      	movs	r1, #1
 8006044:	4802      	ldr	r0, [pc, #8]	; (8006050 <W25Q_Reset+0x38>)
 8006046:	f005 fa03 	bl	800b450 <HAL_GPIO_WritePin>
}
 800604a:	bf00      	nop
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40020400 	.word	0x40020400
 8006054:	200009ac 	.word	0x200009ac
 8006058:	20000310 	.word	0x20000310

0800605c <W25Q_Write_Enable>:

void W25Q_Write_Enable(void) {
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006060:	2200      	movs	r2, #0
 8006062:	2101      	movs	r1, #1
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <W25Q_Write_Enable+0x30>)
 8006066:	f005 f9f3 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_ENABLE;
 800606a:	4b09      	ldr	r3, [pc, #36]	; (8006090 <W25Q_Write_Enable+0x34>)
 800606c:	2206      	movs	r2, #6
 800606e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006074:	2201      	movs	r2, #1
 8006076:	4906      	ldr	r1, [pc, #24]	; (8006090 <W25Q_Write_Enable+0x34>)
 8006078:	4806      	ldr	r0, [pc, #24]	; (8006094 <W25Q_Write_Enable+0x38>)
 800607a:	f00c ff86 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800607e:	2201      	movs	r2, #1
 8006080:	2101      	movs	r1, #1
 8006082:	4802      	ldr	r0, [pc, #8]	; (800608c <W25Q_Write_Enable+0x30>)
 8006084:	f005 f9e4 	bl	800b450 <HAL_GPIO_WritePin>
}
 8006088:	bf00      	nop
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40020400 	.word	0x40020400
 8006090:	200009ac 	.word	0x200009ac
 8006094:	20000310 	.word	0x20000310

08006098 <W25Q_Write_Disable>:

void W25Q_Write_Disable(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800609c:	2200      	movs	r2, #0
 800609e:	2101      	movs	r1, #1
 80060a0:	4809      	ldr	r0, [pc, #36]	; (80060c8 <W25Q_Write_Disable+0x30>)
 80060a2:	f005 f9d5 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_DISABLE;
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <W25Q_Write_Disable+0x34>)
 80060a8:	2204      	movs	r2, #4
 80060aa:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 80060ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060b0:	2201      	movs	r2, #1
 80060b2:	4906      	ldr	r1, [pc, #24]	; (80060cc <W25Q_Write_Disable+0x34>)
 80060b4:	4806      	ldr	r0, [pc, #24]	; (80060d0 <W25Q_Write_Disable+0x38>)
 80060b6:	f00c ff68 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80060ba:	2201      	movs	r2, #1
 80060bc:	2101      	movs	r1, #1
 80060be:	4802      	ldr	r0, [pc, #8]	; (80060c8 <W25Q_Write_Disable+0x30>)
 80060c0:	f005 f9c6 	bl	800b450 <HAL_GPIO_WritePin>
}
 80060c4:	bf00      	nop
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40020400 	.word	0x40020400
 80060cc:	200009ac 	.word	0x200009ac
 80060d0:	20000310 	.word	0x20000310

080060d4 <W25Q_Set_Block_Protect>:

void W25Q_Set_Block_Protect(uint8_t val) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0x50;
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <W25Q_Set_Block_Protect+0x74>)
 80060e0:	2250      	movs	r2, #80	; 0x50
 80060e2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80060e4:	2200      	movs	r2, #0
 80060e6:	2101      	movs	r1, #1
 80060e8:	4818      	ldr	r0, [pc, #96]	; (800614c <W25Q_Set_Block_Protect+0x78>)
 80060ea:	f005 f9b1 	bl	800b450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 80060ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060f2:	2201      	movs	r2, #1
 80060f4:	4914      	ldr	r1, [pc, #80]	; (8006148 <W25Q_Set_Block_Protect+0x74>)
 80060f6:	4816      	ldr	r0, [pc, #88]	; (8006150 <W25Q_Set_Block_Protect+0x7c>)
 80060f8:	f00c ff47 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80060fc:	2201      	movs	r2, #1
 80060fe:	2101      	movs	r1, #1
 8006100:	4812      	ldr	r0, [pc, #72]	; (800614c <W25Q_Set_Block_Protect+0x78>)
 8006102:	f005 f9a5 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_STATUS_1;
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <W25Q_Set_Block_Protect+0x74>)
 8006108:	2201      	movs	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
	buf[1] = ((val & 0x0F) << 2);
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006116:	b2da      	uxtb	r2, r3
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <W25Q_Set_Block_Protect+0x74>)
 800611a:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800611c:	2200      	movs	r2, #0
 800611e:	2101      	movs	r1, #1
 8006120:	480a      	ldr	r0, [pc, #40]	; (800614c <W25Q_Set_Block_Protect+0x78>)
 8006122:	f005 f995 	bl	800b450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 8006126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800612a:	2202      	movs	r2, #2
 800612c:	4906      	ldr	r1, [pc, #24]	; (8006148 <W25Q_Set_Block_Protect+0x74>)
 800612e:	4808      	ldr	r0, [pc, #32]	; (8006150 <W25Q_Set_Block_Protect+0x7c>)
 8006130:	f00c ff2b 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006134:	2201      	movs	r2, #1
 8006136:	2101      	movs	r1, #1
 8006138:	4804      	ldr	r0, [pc, #16]	; (800614c <W25Q_Set_Block_Protect+0x78>)
 800613a:	f005 f989 	bl	800b450 <HAL_GPIO_WritePin>
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200009ac 	.word	0x200009ac
 800614c:	40020400 	.word	0x40020400
 8006150:	20000310 	.word	0x20000310

08006154 <W25Q_Wait_Write_End>:

void W25Q_Wait_Write_End(void) {
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 8006158:	2001      	movs	r0, #1
 800615a:	f000 fdad 	bl	8006cb8 <HAL_Delay>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800615e:	2200      	movs	r2, #0
 8006160:	2101      	movs	r1, #1
 8006162:	4815      	ldr	r0, [pc, #84]	; (80061b8 <W25Q_Wait_Write_End+0x64>)
 8006164:	f005 f974 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_READ_STATUS_1;
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <W25Q_Wait_Write_End+0x68>)
 800616a:	2205      	movs	r2, #5
 800616c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 800616e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006172:	2201      	movs	r2, #1
 8006174:	4911      	ldr	r1, [pc, #68]	; (80061bc <W25Q_Wait_Write_End+0x68>)
 8006176:	4812      	ldr	r0, [pc, #72]	; (80061c0 <W25Q_Wait_Write_End+0x6c>)
 8006178:	f00c ff07 	bl	8012f8a <HAL_SPI_Transmit>
	do {
		HAL_SPI_Receive (&W25Q_SPI, buf, 1, 1000);
 800617c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006180:	2201      	movs	r2, #1
 8006182:	490e      	ldr	r1, [pc, #56]	; (80061bc <W25Q_Wait_Write_End+0x68>)
 8006184:	480e      	ldr	r0, [pc, #56]	; (80061c0 <W25Q_Wait_Write_End+0x6c>)
 8006186:	f00d f83c 	bl	8013202 <HAL_SPI_Receive>
		w25_info.StatusRegister1 = buf[0];
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <W25Q_Wait_Write_End+0x68>)
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <W25Q_Wait_Write_End+0x70>)
 8006190:	f883 2020 	strb.w	r2, [r3, #32]
		HAL_Delay(1);
 8006194:	2001      	movs	r0, #1
 8006196:	f000 fd8f 	bl	8006cb8 <HAL_Delay>
	}
	while((w25_info.StatusRegister1 & 0x01) == 0x01);
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <W25Q_Wait_Write_End+0x70>)
 800619c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e9      	bne.n	800617c <W25Q_Wait_Write_End+0x28>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80061a8:	2201      	movs	r2, #1
 80061aa:	2101      	movs	r1, #1
 80061ac:	4802      	ldr	r0, [pc, #8]	; (80061b8 <W25Q_Wait_Write_End+0x64>)
 80061ae:	f005 f94f 	bl	800b450 <HAL_GPIO_WritePin>
}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40020400 	.word	0x40020400
 80061bc:	200009ac 	.word	0x200009ac
 80061c0:	20000310 	.word	0x20000310
 80061c4:	20000988 	.word	0x20000988

080061c8 <W25Q_Erase_Sector>:

void W25Q_Erase_Sector(uint32_t addr) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	W25Q_Wait_Write_End();
 80061d0:	f7ff ffc0 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80061d4:	2000      	movs	r0, #0
 80061d6:	f7ff ff7d 	bl	80060d4 <W25Q_Set_Block_Protect>
	addr = addr * w25_info.SectorSize;
 80061da:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <W25Q_Erase_Sector+0xbc>)
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	fb02 f303 	mul.w	r3, r2, r3
 80061e4:	607b      	str	r3, [r7, #4]
	W25Q_Write_Enable();
 80061e6:	f7ff ff39 	bl	800605c <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80061ea:	2200      	movs	r2, #0
 80061ec:	2101      	movs	r1, #1
 80061ee:	4826      	ldr	r0, [pc, #152]	; (8006288 <W25Q_Erase_Sector+0xc0>)
 80061f0:	f005 f92e 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_SECTOR_ERASE;
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <W25Q_Erase_Sector+0xc4>)
 80061f6:	2220      	movs	r2, #32
 80061f8:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80061fa:	4b22      	ldr	r3, [pc, #136]	; (8006284 <W25Q_Erase_Sector+0xbc>)
 80061fc:	7fdb      	ldrb	r3, [r3, #31]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01a      	beq.n	8006238 <W25Q_Erase_Sector+0x70>
	{
		buf[1] = (addr >> 24) & 0xFF;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	0e1b      	lsrs	r3, r3, #24
 8006206:	b2da      	uxtb	r2, r3
 8006208:	4b20      	ldr	r3, [pc, #128]	; (800628c <W25Q_Erase_Sector+0xc4>)
 800620a:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	b2da      	uxtb	r2, r3
 8006212:	4b1e      	ldr	r3, [pc, #120]	; (800628c <W25Q_Erase_Sector+0xc4>)
 8006214:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	b2da      	uxtb	r2, r3
 800621c:	4b1b      	ldr	r3, [pc, #108]	; (800628c <W25Q_Erase_Sector+0xc4>)
 800621e:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b19      	ldr	r3, [pc, #100]	; (800628c <W25Q_Erase_Sector+0xc4>)
 8006226:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800622c:	2205      	movs	r2, #5
 800622e:	4917      	ldr	r1, [pc, #92]	; (800628c <W25Q_Erase_Sector+0xc4>)
 8006230:	4817      	ldr	r0, [pc, #92]	; (8006290 <W25Q_Erase_Sector+0xc8>)
 8006232:	f00c feaa 	bl	8012f8a <HAL_SPI_Transmit>
 8006236:	e014      	b.n	8006262 <W25Q_Erase_Sector+0x9a>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	0c1b      	lsrs	r3, r3, #16
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <W25Q_Erase_Sector+0xc4>)
 8006240:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	b2da      	uxtb	r2, r3
 8006248:	4b10      	ldr	r3, [pc, #64]	; (800628c <W25Q_Erase_Sector+0xc4>)
 800624a:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <W25Q_Erase_Sector+0xc4>)
 8006252:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006258:	2204      	movs	r2, #4
 800625a:	490c      	ldr	r1, [pc, #48]	; (800628c <W25Q_Erase_Sector+0xc4>)
 800625c:	480c      	ldr	r0, [pc, #48]	; (8006290 <W25Q_Erase_Sector+0xc8>)
 800625e:	f00c fe94 	bl	8012f8a <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006262:	2201      	movs	r2, #1
 8006264:	2101      	movs	r1, #1
 8006266:	4808      	ldr	r0, [pc, #32]	; (8006288 <W25Q_Erase_Sector+0xc0>)
 8006268:	f005 f8f2 	bl	800b450 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800626c:	f7ff ff72 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006270:	f7ff ff12 	bl	8006098 <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006274:	200f      	movs	r0, #15
 8006276:	f7ff ff2d 	bl	80060d4 <W25Q_Set_Block_Protect>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000988 	.word	0x20000988
 8006288:	40020400 	.word	0x40020400
 800628c:	200009ac 	.word	0x200009ac
 8006290:	20000310 	.word	0x20000310

08006294 <W25Q_Erase_Block>:

void W25Q_Erase_Block(uint32_t addr) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	W25Q_Wait_Write_End();
 800629c:	f7ff ff5a 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80062a0:	2000      	movs	r0, #0
 80062a2:	f7ff ff17 	bl	80060d4 <W25Q_Set_Block_Protect>
	addr = addr * w25_info.BlockSize;
 80062a6:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <W25Q_Erase_Block+0xbc>)
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
 80062b0:	607b      	str	r3, [r7, #4]
	W25Q_Write_Enable();
 80062b2:	f7ff fed3 	bl	800605c <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2101      	movs	r1, #1
 80062ba:	4826      	ldr	r0, [pc, #152]	; (8006354 <W25Q_Erase_Block+0xc0>)
 80062bc:	f005 f8c8 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_BLOCK_ERASE;
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <W25Q_Erase_Block+0xc4>)
 80062c2:	22d8      	movs	r2, #216	; 0xd8
 80062c4:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <W25Q_Erase_Block+0xbc>)
 80062c8:	7fdb      	ldrb	r3, [r3, #31]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01a      	beq.n	8006304 <W25Q_Erase_Block+0x70>
	{
		buf[1] = (addr >> 24) & 0xFF;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0e1b      	lsrs	r3, r3, #24
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <W25Q_Erase_Block+0xc4>)
 80062d6:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <W25Q_Erase_Block+0xc4>)
 80062e0:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <W25Q_Erase_Block+0xc4>)
 80062ea:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <W25Q_Erase_Block+0xc4>)
 80062f2:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 80062f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062f8:	2205      	movs	r2, #5
 80062fa:	4917      	ldr	r1, [pc, #92]	; (8006358 <W25Q_Erase_Block+0xc4>)
 80062fc:	4817      	ldr	r0, [pc, #92]	; (800635c <W25Q_Erase_Block+0xc8>)
 80062fe:	f00c fe44 	bl	8012f8a <HAL_SPI_Transmit>
 8006302:	e014      	b.n	800632e <W25Q_Erase_Block+0x9a>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0c1b      	lsrs	r3, r3, #16
 8006308:	b2da      	uxtb	r2, r3
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <W25Q_Erase_Block+0xc4>)
 800630c:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	0a1b      	lsrs	r3, r3, #8
 8006312:	b2da      	uxtb	r2, r3
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <W25Q_Erase_Block+0xc4>)
 8006316:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <W25Q_Erase_Block+0xc4>)
 800631e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006324:	2204      	movs	r2, #4
 8006326:	490c      	ldr	r1, [pc, #48]	; (8006358 <W25Q_Erase_Block+0xc4>)
 8006328:	480c      	ldr	r0, [pc, #48]	; (800635c <W25Q_Erase_Block+0xc8>)
 800632a:	f00c fe2e 	bl	8012f8a <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800632e:	2201      	movs	r2, #1
 8006330:	2101      	movs	r1, #1
 8006332:	4808      	ldr	r0, [pc, #32]	; (8006354 <W25Q_Erase_Block+0xc0>)
 8006334:	f005 f88c 	bl	800b450 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006338:	f7ff ff0c 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 800633c:	f7ff feac 	bl	8006098 <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006340:	200f      	movs	r0, #15
 8006342:	f7ff fec7 	bl	80060d4 <W25Q_Set_Block_Protect>
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000988 	.word	0x20000988
 8006354:	40020400 	.word	0x40020400
 8006358:	200009ac 	.word	0x200009ac
 800635c:	20000310 	.word	0x20000310

08006360 <W25Q_Erase_Chip>:

void W25Q_Erase_Chip(void) {
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
	W25Q_Wait_Write_End();
 8006364:	f7ff fef6 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 8006368:	2000      	movs	r0, #0
 800636a:	f7ff feb3 	bl	80060d4 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 800636e:	f7ff fe75 	bl	800605c <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006372:	2200      	movs	r2, #0
 8006374:	2101      	movs	r1, #1
 8006376:	480d      	ldr	r0, [pc, #52]	; (80063ac <W25Q_Erase_Chip+0x4c>)
 8006378:	f005 f86a 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_CHIP_ERASE;
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <W25Q_Erase_Chip+0x50>)
 800637e:	22c7      	movs	r2, #199	; 0xc7
 8006380:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006386:	2201      	movs	r2, #1
 8006388:	4909      	ldr	r1, [pc, #36]	; (80063b0 <W25Q_Erase_Chip+0x50>)
 800638a:	480a      	ldr	r0, [pc, #40]	; (80063b4 <W25Q_Erase_Chip+0x54>)
 800638c:	f00c fdfd 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006390:	2201      	movs	r2, #1
 8006392:	2101      	movs	r1, #1
 8006394:	4805      	ldr	r0, [pc, #20]	; (80063ac <W25Q_Erase_Chip+0x4c>)
 8006396:	f005 f85b 	bl	800b450 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800639a:	f7ff fedb 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 800639e:	f7ff fe7b 	bl	8006098 <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 80063a2:	200f      	movs	r0, #15
 80063a4:	f7ff fe96 	bl	80060d4 <W25Q_Set_Block_Protect>
}
 80063a8:	bf00      	nop
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40020400 	.word	0x40020400
 80063b0:	200009ac 	.word	0x200009ac
 80063b4:	20000310 	.word	0x20000310

080063b8 <W25Q_Write_Data>:

void W25Q_Write_Data(uint32_t addr, uint8_t* data, uint32_t sz) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
	W25Q_Wait_Write_End();
 80063c4:	f7ff fec6 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7ff fe83 	bl	80060d4 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 80063ce:	f7ff fe45 	bl	800605c <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80063d2:	2200      	movs	r2, #0
 80063d4:	2101      	movs	r1, #1
 80063d6:	4829      	ldr	r0, [pc, #164]	; (800647c <W25Q_Write_Data+0xc4>)
 80063d8:	f005 f83a 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_PAGE_PROGRAMM;
 80063dc:	4b28      	ldr	r3, [pc, #160]	; (8006480 <W25Q_Write_Data+0xc8>)
 80063de:	2202      	movs	r2, #2
 80063e0:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80063e2:	4b28      	ldr	r3, [pc, #160]	; (8006484 <W25Q_Write_Data+0xcc>)
 80063e4:	7fdb      	ldrb	r3, [r3, #31]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d01a      	beq.n	8006420 <W25Q_Write_Data+0x68>
	{
		buf[1] = (addr >> 24) & 0xFF;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	0e1b      	lsrs	r3, r3, #24
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	4b23      	ldr	r3, [pc, #140]	; (8006480 <W25Q_Write_Data+0xc8>)
 80063f2:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4b21      	ldr	r3, [pc, #132]	; (8006480 <W25Q_Write_Data+0xc8>)
 80063fc:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	b2da      	uxtb	r2, r3
 8006404:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <W25Q_Write_Data+0xc8>)
 8006406:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	4b1c      	ldr	r3, [pc, #112]	; (8006480 <W25Q_Write_Data+0xc8>)
 800640e:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006414:	2205      	movs	r2, #5
 8006416:	491a      	ldr	r1, [pc, #104]	; (8006480 <W25Q_Write_Data+0xc8>)
 8006418:	481b      	ldr	r0, [pc, #108]	; (8006488 <W25Q_Write_Data+0xd0>)
 800641a:	f00c fdb6 	bl	8012f8a <HAL_SPI_Transmit>
 800641e:	e014      	b.n	800644a <W25Q_Write_Data+0x92>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	b2da      	uxtb	r2, r3
 8006426:	4b16      	ldr	r3, [pc, #88]	; (8006480 <W25Q_Write_Data+0xc8>)
 8006428:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b13      	ldr	r3, [pc, #76]	; (8006480 <W25Q_Write_Data+0xc8>)
 8006432:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	4b11      	ldr	r3, [pc, #68]	; (8006480 <W25Q_Write_Data+0xc8>)
 800643a:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 800643c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006440:	2204      	movs	r2, #4
 8006442:	490f      	ldr	r1, [pc, #60]	; (8006480 <W25Q_Write_Data+0xc8>)
 8006444:	4810      	ldr	r0, [pc, #64]	; (8006488 <W25Q_Write_Data+0xd0>)
 8006446:	f00c fda0 	bl	8012f8a <HAL_SPI_Transmit>
	}
	HAL_SPI_Transmit (&W25Q_SPI, data, sz, 1000);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	b29a      	uxth	r2, r3
 800644e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	480c      	ldr	r0, [pc, #48]	; (8006488 <W25Q_Write_Data+0xd0>)
 8006456:	f00c fd98 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800645a:	2201      	movs	r2, #1
 800645c:	2101      	movs	r1, #1
 800645e:	4807      	ldr	r0, [pc, #28]	; (800647c <W25Q_Write_Data+0xc4>)
 8006460:	f004 fff6 	bl	800b450 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006464:	f7ff fe76 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006468:	f7ff fe16 	bl	8006098 <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 800646c:	200f      	movs	r0, #15
 800646e:	f7ff fe31 	bl	80060d4 <W25Q_Set_Block_Protect>
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40020400 	.word	0x40020400
 8006480:	200009ac 	.word	0x200009ac
 8006484:	20000988 	.word	0x20000988
 8006488:	20000310 	.word	0x20000310

0800648c <W25Q_Write_Page>:

void W25Q_Write_Page(uint8_t* data, uint32_t page_addr, uint32_t offset, uint32_t sz) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
	if(sz > w25_info.PageSize)
 800649a:	4b3d      	ldr	r3, [pc, #244]	; (8006590 <W25Q_Write_Page+0x104>)
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d902      	bls.n	80064ac <W25Q_Write_Page+0x20>
		sz=w25_info.PageSize;
 80064a6:	4b3a      	ldr	r3, [pc, #232]	; (8006590 <W25Q_Write_Page+0x104>)
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	603b      	str	r3, [r7, #0]
	if((offset+sz) > w25_info.PageSize)
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	4413      	add	r3, r2
 80064b2:	4a37      	ldr	r2, [pc, #220]	; (8006590 <W25Q_Write_Page+0x104>)
 80064b4:	8812      	ldrh	r2, [r2, #0]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d905      	bls.n	80064c6 <W25Q_Write_Page+0x3a>
		sz = w25_info.PageSize - offset;
 80064ba:	4b35      	ldr	r3, [pc, #212]	; (8006590 <W25Q_Write_Page+0x104>)
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	603b      	str	r3, [r7, #0]
	page_addr = page_addr * w25_info.PageSize + offset;
 80064c6:	4b32      	ldr	r3, [pc, #200]	; (8006590 <W25Q_Write_Page+0x104>)
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

	W25Q_Wait_Write_End();
 80064d8:	f7ff fe3c 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80064dc:	2000      	movs	r0, #0
 80064de:	f7ff fdf9 	bl	80060d4 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 80064e2:	f7ff fdbb 	bl	800605c <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80064e6:	2200      	movs	r2, #0
 80064e8:	2101      	movs	r1, #1
 80064ea:	482a      	ldr	r0, [pc, #168]	; (8006594 <W25Q_Write_Page+0x108>)
 80064ec:	f004 ffb0 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_PAGE_PROGRAMM;
 80064f0:	4b29      	ldr	r3, [pc, #164]	; (8006598 <W25Q_Write_Page+0x10c>)
 80064f2:	2202      	movs	r2, #2
 80064f4:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80064f6:	4b26      	ldr	r3, [pc, #152]	; (8006590 <W25Q_Write_Page+0x104>)
 80064f8:	7fdb      	ldrb	r3, [r3, #31]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01a      	beq.n	8006534 <W25Q_Write_Page+0xa8>
	{
		buf[1] = (page_addr >> 24) & 0xFF;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	0e1b      	lsrs	r3, r3, #24
 8006502:	b2da      	uxtb	r2, r3
 8006504:	4b24      	ldr	r3, [pc, #144]	; (8006598 <W25Q_Write_Page+0x10c>)
 8006506:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 16) & 0xFF;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4b22      	ldr	r3, [pc, #136]	; (8006598 <W25Q_Write_Page+0x10c>)
 8006510:	709a      	strb	r2, [r3, #2]
		buf[3] = (page_addr >> 8) & 0xFF;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	b2da      	uxtb	r2, r3
 8006518:	4b1f      	ldr	r3, [pc, #124]	; (8006598 <W25Q_Write_Page+0x10c>)
 800651a:	70da      	strb	r2, [r3, #3]
		buf[4] = page_addr & 0xFF;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <W25Q_Write_Page+0x10c>)
 8006522:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006528:	2205      	movs	r2, #5
 800652a:	491b      	ldr	r1, [pc, #108]	; (8006598 <W25Q_Write_Page+0x10c>)
 800652c:	481b      	ldr	r0, [pc, #108]	; (800659c <W25Q_Write_Page+0x110>)
 800652e:	f00c fd2c 	bl	8012f8a <HAL_SPI_Transmit>
 8006532:	e014      	b.n	800655e <W25Q_Write_Page+0xd2>
	}
	else
	{
		buf[1] = (page_addr >> 16) & 0xFF;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	0c1b      	lsrs	r3, r3, #16
 8006538:	b2da      	uxtb	r2, r3
 800653a:	4b17      	ldr	r3, [pc, #92]	; (8006598 <W25Q_Write_Page+0x10c>)
 800653c:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 8) & 0xFF;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b14      	ldr	r3, [pc, #80]	; (8006598 <W25Q_Write_Page+0x10c>)
 8006546:	709a      	strb	r2, [r3, #2]
		buf[3] = page_addr & 0xFF;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	4b12      	ldr	r3, [pc, #72]	; (8006598 <W25Q_Write_Page+0x10c>)
 800654e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006554:	2204      	movs	r2, #4
 8006556:	4910      	ldr	r1, [pc, #64]	; (8006598 <W25Q_Write_Page+0x10c>)
 8006558:	4810      	ldr	r0, [pc, #64]	; (800659c <W25Q_Write_Page+0x110>)
 800655a:	f00c fd16 	bl	8012f8a <HAL_SPI_Transmit>
	}
	HAL_SPI_Transmit (&W25Q_SPI, data, sz, 1000);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	480c      	ldr	r0, [pc, #48]	; (800659c <W25Q_Write_Page+0x110>)
 800656a:	f00c fd0e 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800656e:	2201      	movs	r2, #1
 8006570:	2101      	movs	r1, #1
 8006572:	4808      	ldr	r0, [pc, #32]	; (8006594 <W25Q_Write_Page+0x108>)
 8006574:	f004 ff6c 	bl	800b450 <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006578:	f7ff fdec 	bl	8006154 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 800657c:	f7ff fd8c 	bl	8006098 <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006580:	200f      	movs	r0, #15
 8006582:	f7ff fda7 	bl	80060d4 <W25Q_Set_Block_Protect>
}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000988 	.word	0x20000988
 8006594:	40020400 	.word	0x40020400
 8006598:	200009ac 	.word	0x200009ac
 800659c:	20000310 	.word	0x20000310

080065a0 <W25Q_Read_Data>:

void W25Q_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80065ac:	2200      	movs	r2, #0
 80065ae:	2101      	movs	r1, #1
 80065b0:	4815      	ldr	r0, [pc, #84]	; (8006608 <W25Q_Read_Data+0x68>)
 80065b2:	f004 ff4d 	bl	800b450 <HAL_GPIO_WritePin>
	buf[0] = W25Q_READ;
 80065b6:	4b15      	ldr	r3, [pc, #84]	; (800660c <W25Q_Read_Data+0x6c>)
 80065b8:	2203      	movs	r2, #3
 80065ba:	701a      	strb	r2, [r3, #0]
	buf[1] = (addr >> 16) & 0xFF;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <W25Q_Read_Data+0x6c>)
 80065c4:	705a      	strb	r2, [r3, #1]
	buf[2] = (addr >> 8) & 0xFF;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	4b0f      	ldr	r3, [pc, #60]	; (800660c <W25Q_Read_Data+0x6c>)
 80065ce:	709a      	strb	r2, [r3, #2]
	buf[3] = addr & 0xFF;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	4b0d      	ldr	r3, [pc, #52]	; (800660c <W25Q_Read_Data+0x6c>)
 80065d6:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 80065d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065dc:	2204      	movs	r2, #4
 80065de:	490b      	ldr	r1, [pc, #44]	; (800660c <W25Q_Read_Data+0x6c>)
 80065e0:	480b      	ldr	r0, [pc, #44]	; (8006610 <W25Q_Read_Data+0x70>)
 80065e2:	f00c fcd2 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	4807      	ldr	r0, [pc, #28]	; (8006610 <W25Q_Read_Data+0x70>)
 80065f2:	f00c fe06 	bl	8013202 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80065f6:	2201      	movs	r2, #1
 80065f8:	2101      	movs	r1, #1
 80065fa:	4803      	ldr	r0, [pc, #12]	; (8006608 <W25Q_Read_Data+0x68>)
 80065fc:	f004 ff28 	bl	800b450 <HAL_GPIO_WritePin>
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40020400 	.word	0x40020400
 800660c:	200009ac 	.word	0x200009ac
 8006610:	20000310 	.word	0x20000310

08006614 <W25Q_Read_Page>:

void W25Q_Read_Page(uint8_t* data, uint32_t page_addr, uint32_t offset, uint32_t sz) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
	if(sz > w25_info.PageSize)
 8006622:	4b3b      	ldr	r3, [pc, #236]	; (8006710 <W25Q_Read_Page+0xfc>)
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	4293      	cmp	r3, r2
 800662c:	d902      	bls.n	8006634 <W25Q_Read_Page+0x20>
		sz=w25_info.PageSize;
 800662e:	4b38      	ldr	r3, [pc, #224]	; (8006710 <W25Q_Read_Page+0xfc>)
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	603b      	str	r3, [r7, #0]
	if((offset+sz) > w25_info.PageSize)
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	4413      	add	r3, r2
 800663a:	4a35      	ldr	r2, [pc, #212]	; (8006710 <W25Q_Read_Page+0xfc>)
 800663c:	8812      	ldrh	r2, [r2, #0]
 800663e:	4293      	cmp	r3, r2
 8006640:	d905      	bls.n	800664e <W25Q_Read_Page+0x3a>
		sz = w25_info.PageSize - offset;
 8006642:	4b33      	ldr	r3, [pc, #204]	; (8006710 <W25Q_Read_Page+0xfc>)
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	603b      	str	r3, [r7, #0]
	page_addr = page_addr * w25_info.PageSize + offset;
 800664e:	4b30      	ldr	r3, [pc, #192]	; (8006710 <W25Q_Read_Page+0xfc>)
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	60bb      	str	r3, [r7, #8]
	buf[0] = W25Q_FAST_READ;
 8006660:	4b2c      	ldr	r3, [pc, #176]	; (8006714 <W25Q_Read_Page+0x100>)
 8006662:	220b      	movs	r2, #11
 8006664:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 8006666:	4b2a      	ldr	r3, [pc, #168]	; (8006710 <W25Q_Read_Page+0xfc>)
 8006668:	7fdb      	ldrb	r3, [r3, #31]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d022      	beq.n	80066b4 <W25Q_Read_Page+0xa0>
	{
		buf[1] = (page_addr >> 24) & 0xFF;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	b2da      	uxtb	r2, r3
 8006674:	4b27      	ldr	r3, [pc, #156]	; (8006714 <W25Q_Read_Page+0x100>)
 8006676:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 16) & 0xFF;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	b2da      	uxtb	r2, r3
 800667e:	4b25      	ldr	r3, [pc, #148]	; (8006714 <W25Q_Read_Page+0x100>)
 8006680:	709a      	strb	r2, [r3, #2]
		buf[3] = (page_addr >> 8) & 0xFF;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	b2da      	uxtb	r2, r3
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <W25Q_Read_Page+0x100>)
 800668a:	70da      	strb	r2, [r3, #3]
		buf[4] = page_addr & 0xFF;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	4b20      	ldr	r3, [pc, #128]	; (8006714 <W25Q_Read_Page+0x100>)
 8006692:	711a      	strb	r2, [r3, #4]
		buf[5] = 0;
 8006694:	4b1f      	ldr	r3, [pc, #124]	; (8006714 <W25Q_Read_Page+0x100>)
 8006696:	2200      	movs	r2, #0
 8006698:	715a      	strb	r2, [r3, #5]
		HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800669a:	2200      	movs	r2, #0
 800669c:	2101      	movs	r1, #1
 800669e:	481e      	ldr	r0, [pc, #120]	; (8006718 <W25Q_Read_Page+0x104>)
 80066a0:	f004 fed6 	bl	800b450 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&W25Q_SPI, buf, 6, 1000);
 80066a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066a8:	2206      	movs	r2, #6
 80066aa:	491a      	ldr	r1, [pc, #104]	; (8006714 <W25Q_Read_Page+0x100>)
 80066ac:	481b      	ldr	r0, [pc, #108]	; (800671c <W25Q_Read_Page+0x108>)
 80066ae:	f00c fc6c 	bl	8012f8a <HAL_SPI_Transmit>
 80066b2:	e01c      	b.n	80066ee <W25Q_Read_Page+0xda>
	}
	else
	{
		buf[1] = (page_addr >> 16) & 0xFF;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	0c1b      	lsrs	r3, r3, #16
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4b16      	ldr	r3, [pc, #88]	; (8006714 <W25Q_Read_Page+0x100>)
 80066bc:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 8) & 0xFF;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	0a1b      	lsrs	r3, r3, #8
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <W25Q_Read_Page+0x100>)
 80066c6:	709a      	strb	r2, [r3, #2]
		buf[3] = page_addr & 0xFF;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	4b11      	ldr	r3, [pc, #68]	; (8006714 <W25Q_Read_Page+0x100>)
 80066ce:	70da      	strb	r2, [r3, #3]
		buf[4] = 0;
 80066d0:	4b10      	ldr	r3, [pc, #64]	; (8006714 <W25Q_Read_Page+0x100>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80066d6:	2200      	movs	r2, #0
 80066d8:	2101      	movs	r1, #1
 80066da:	480f      	ldr	r0, [pc, #60]	; (8006718 <W25Q_Read_Page+0x104>)
 80066dc:	f004 feb8 	bl	800b450 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 80066e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066e4:	2205      	movs	r2, #5
 80066e6:	490b      	ldr	r1, [pc, #44]	; (8006714 <W25Q_Read_Page+0x100>)
 80066e8:	480c      	ldr	r0, [pc, #48]	; (800671c <W25Q_Read_Page+0x108>)
 80066ea:	f00c fc4e 	bl	8012f8a <HAL_SPI_Transmit>
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	4808      	ldr	r0, [pc, #32]	; (800671c <W25Q_Read_Page+0x108>)
 80066fa:	f00c fd82 	bl	8013202 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80066fe:	2201      	movs	r2, #1
 8006700:	2101      	movs	r1, #1
 8006702:	4805      	ldr	r0, [pc, #20]	; (8006718 <W25Q_Read_Page+0x104>)
 8006704:	f004 fea4 	bl	800b450 <HAL_GPIO_WritePin>
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000988 	.word	0x20000988
 8006714:	200009ac 	.word	0x200009ac
 8006718:	40020400 	.word	0x40020400
 800671c:	20000310 	.word	0x20000310

08006720 <W25Q_Read_ID>:

uint32_t W25Q_Read_ID(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 8006726:	4b13      	ldr	r3, [pc, #76]	; (8006774 <W25Q_Read_ID+0x54>)
 8006728:	229f      	movs	r2, #159	; 0x9f
 800672a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800672c:	2200      	movs	r2, #0
 800672e:	2101      	movs	r1, #1
 8006730:	4811      	ldr	r0, [pc, #68]	; (8006778 <W25Q_Read_ID+0x58>)
 8006732:	f004 fe8d 	bl	800b450 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800673a:	2201      	movs	r2, #1
 800673c:	490d      	ldr	r1, [pc, #52]	; (8006774 <W25Q_Read_ID+0x54>)
 800673e:	480f      	ldr	r0, [pc, #60]	; (800677c <W25Q_Read_ID+0x5c>)
 8006740:	f00c fc23 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 8006744:	1d39      	adds	r1, r7, #4
 8006746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800674a:	2203      	movs	r2, #3
 800674c:	480b      	ldr	r0, [pc, #44]	; (800677c <W25Q_Read_ID+0x5c>)
 800674e:	f00c fd58 	bl	8013202 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006752:	2201      	movs	r2, #1
 8006754:	2101      	movs	r1, #1
 8006756:	4808      	ldr	r0, [pc, #32]	; (8006778 <W25Q_Read_ID+0x58>)
 8006758:	f004 fe7a 	bl	800b450 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800675c:	793b      	ldrb	r3, [r7, #4]
 800675e:	041a      	lsls	r2, r3, #16
 8006760:	797b      	ldrb	r3, [r7, #5]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	4313      	orrs	r3, r2
 8006766:	79ba      	ldrb	r2, [r7, #6]
 8006768:	4313      	orrs	r3, r2
 800676a:	bf00      	nop
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200009ac 	.word	0x200009ac
 8006778:	40020400 	.word	0x40020400
 800677c:	20000310 	.word	0x20000310

08006780 <W25Q_Init>:

void W25Q_Init(void) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
	uint32_t id = W25Q_Read_ID();
 8006786:	f7ff ffcb 	bl	8006720 <W25Q_Read_ID>
 800678a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800678c:	2064      	movs	r0, #100	; 0x64
 800678e:	f000 fa93 	bl	8006cb8 <HAL_Delay>
	W25Q_Reset();
 8006792:	f7ff fc41 	bl	8006018 <W25Q_Reset>
	HAL_Delay(100);
 8006796:	2064      	movs	r0, #100	; 0x64
 8006798:	f000 fa8e 	bl	8006cb8 <HAL_Delay>
	id &= 0x0000FFFF;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	607b      	str	r3, [r7, #4]
	w25_info.high_cap = 0;
 80067a2:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <W25Q_Init+0x120>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	77da      	strb	r2, [r3, #31]
	switch(id)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80067ae:	3b11      	subs	r3, #17
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d870      	bhi.n	8006896 <W25Q_Init+0x116>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <W25Q_Init+0x3c>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	0800683f 	.word	0x0800683f
 80067c0:	08006837 	.word	0x08006837
 80067c4:	0800682f 	.word	0x0800682f
 80067c8:	08006827 	.word	0x08006827
 80067cc:	0800681f 	.word	0x0800681f
 80067d0:	08006817 	.word	0x08006817
 80067d4:	0800680f 	.word	0x0800680f
 80067d8:	08006805 	.word	0x08006805
 80067dc:	080067f5 	.word	0x080067f5
 80067e0:	080067e5 	.word	0x080067e5
	{
	case 0x401A:
		w25_info.high_cap=1;
 80067e4:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <W25Q_Init+0x120>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 80067ea:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <W25Q_Init+0x120>)
 80067ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f0:	615a      	str	r2, [r3, #20]
		break;
 80067f2:	e028      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 80067f4:	4b2a      	ldr	r3, [pc, #168]	; (80068a0 <W25Q_Init+0x120>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 80067fa:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <W25Q_Init+0x120>)
 80067fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006800:	615a      	str	r2, [r3, #20]
		break;
 8006802:	e020      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 8006804:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <W25Q_Init+0x120>)
 8006806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800680a:	615a      	str	r2, [r3, #20]
		break;
 800680c:	e01b      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 800680e:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <W25Q_Init+0x120>)
 8006810:	2280      	movs	r2, #128	; 0x80
 8006812:	615a      	str	r2, [r3, #20]
		break;
 8006814:	e017      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 8006816:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <W25Q_Init+0x120>)
 8006818:	2240      	movs	r2, #64	; 0x40
 800681a:	615a      	str	r2, [r3, #20]
		break;
 800681c:	e013      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 800681e:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <W25Q_Init+0x120>)
 8006820:	2220      	movs	r2, #32
 8006822:	615a      	str	r2, [r3, #20]
		break;
 8006824:	e00f      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 8006826:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <W25Q_Init+0x120>)
 8006828:	2210      	movs	r2, #16
 800682a:	615a      	str	r2, [r3, #20]
		break;
 800682c:	e00b      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <W25Q_Init+0x120>)
 8006830:	2208      	movs	r2, #8
 8006832:	615a      	str	r2, [r3, #20]
		break;
 8006834:	e007      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <W25Q_Init+0x120>)
 8006838:	2204      	movs	r2, #4
 800683a:	615a      	str	r2, [r3, #20]
		break;
 800683c:	e003      	b.n	8006846 <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 800683e:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <W25Q_Init+0x120>)
 8006840:	2202      	movs	r2, #2
 8006842:	615a      	str	r2, [r3, #20]
		break;
 8006844:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <W25Q_Init+0x120>)
 8006848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800684c:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 800684e:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <W25Q_Init+0x120>)
 8006850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006854:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8006856:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <W25Q_Init+0x120>)
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <W25Q_Init+0x120>)
 800685e:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8006860:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <W25Q_Init+0x120>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4a0e      	ldr	r2, [pc, #56]	; (80068a0 <W25Q_Init+0x120>)
 8006866:	6892      	ldr	r2, [r2, #8]
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	4a0c      	ldr	r2, [pc, #48]	; (80068a0 <W25Q_Init+0x120>)
 800686e:	8812      	ldrh	r2, [r2, #0]
 8006870:	fbb3 f3f2 	udiv	r3, r3, r2
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <W25Q_Init+0x120>)
 8006876:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <W25Q_Init+0x120>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <W25Q_Init+0x120>)
 8006880:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8006882:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <W25Q_Init+0x120>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <W25Q_Init+0x120>)
 8006888:	6892      	ldr	r2, [r2, #8]
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	0a9b      	lsrs	r3, r3, #10
 8006890:	4a03      	ldr	r2, [pc, #12]	; (80068a0 <W25Q_Init+0x120>)
 8006892:	6193      	str	r3, [r2, #24]
 8006894:	e000      	b.n	8006898 <W25Q_Init+0x118>
		return;
 8006896:	bf00      	nop
	sprintf(str1,"Block Count: %u\r\n",(uint32_t)w25_info.BlockCount);
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	sprintf(str1,"Capacity: %u KB\r\n",(uint32_t)w25_info.NumKB);
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
#endif
}
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000988 	.word	0x20000988

080068a4 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80068ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80068b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80068b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80068ba:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80068be:	ed97 7a05 	vldr	s14, [r7, #20]
 80068c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80068c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80068ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80068d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80068da:	ed97 7a03 	vldr	s14, [r7, #12]
 80068de:	edd7 7a04 	vldr	s15, [r7, #16]
 80068e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80068ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80068f2:	eeb0 0a67 	vmov.f32	s0, s15
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006908:	2201      	movs	r2, #1
 800690a:	2180      	movs	r1, #128	; 0x80
 800690c:	4809      	ldr	r0, [pc, #36]	; (8006934 <XPT2046_Init+0x34>)
 800690e:	f00c fb3c 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006916:	2201      	movs	r2, #1
 8006918:	2100      	movs	r1, #0
 800691a:	4806      	ldr	r0, [pc, #24]	; (8006934 <XPT2046_Init+0x34>)
 800691c:	f00c fb35 	bl	8012f8a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006924:	2201      	movs	r2, #1
 8006926:	2100      	movs	r1, #0
 8006928:	4802      	ldr	r0, [pc, #8]	; (8006934 <XPT2046_Init+0x34>)
 800692a:	f00c fb2e 	bl	8012f8a <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000368 	.word	0x20000368

08006938 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af02      	add	r7, sp, #8
 800693e:	4603      	mov	r3, r0
 8006940:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8006942:	2001      	movs	r0, #1
 8006944:	f000 f9b8 	bl	8006cb8 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8006948:	1df9      	adds	r1, r7, #7
 800694a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800694e:	2201      	movs	r2, #1
 8006950:	4814      	ldr	r0, [pc, #80]	; (80069a4 <getRaw+0x6c>)
 8006952:	f00c fb1a 	bl	8012f8a <HAL_SPI_Transmit>
	address = 0x00;
 8006956:	2300      	movs	r3, #0
 8006958:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800695a:	f107 020b 	add.w	r2, r7, #11
 800695e:	1df9      	adds	r1, r7, #7
 8006960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	2301      	movs	r3, #1
 8006968:	480e      	ldr	r0, [pc, #56]	; (80069a4 <getRaw+0x6c>)
 800696a:	f00c fd5b 	bl	8013424 <HAL_SPI_TransmitReceive>
	MSB = data;   
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8006972:	2300      	movs	r3, #0
 8006974:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006976:	f107 020b 	add.w	r2, r7, #11
 800697a:	1df9      	adds	r1, r7, #7
 800697c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2301      	movs	r3, #1
 8006984:	4807      	ldr	r0, [pc, #28]	; (80069a4 <getRaw+0x6c>)
 8006986:	f00c fd4d 	bl	8013424 <HAL_SPI_TransmitReceive>
	LSB = data;
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	021a      	lsls	r2, r3, #8
 8006992:	89bb      	ldrh	r3, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	10db      	asrs	r3, r3, #3
 8006998:	b29b      	uxth	r3, r3
 800699a:	bf00      	nop
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000368 	.word	0x20000368

080069a8 <X>:

inline static uint16_t X(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80069ae:	20d0      	movs	r0, #208	; 0xd0
 80069b0:	f7ff ffc2 	bl	8006938 <getRaw>
 80069b4:	4603      	mov	r3, r0
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006a0c <X+0x64>
 80069c2:	eddf 1a13 	vldr	s3, [pc, #76]	; 8006a10 <X+0x68>
 80069c6:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006a14 <X+0x6c>
 80069ca:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006a18 <X+0x70>
 80069ce:	eeb0 0a67 	vmov.f32	s0, s15
 80069d2:	f7ff ff67 	bl	80068a4 <remap>
 80069d6:	eef0 7a40 	vmov.f32	s15, s0
 80069da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069de:	ee17 3a90 	vmov	r3, s15
 80069e2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80069ea:	3303      	adds	r3, #3
 80069ec:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d006      	beq.n	8006a02 <X+0x5a>
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	f240 321e 	movw	r2, #798	; 0x31e
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d801      	bhi.n	8006a02 <X+0x5a>
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	e000      	b.n	8006a04 <X+0x5c>
	else return 0;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	4447c000 	.word	0x4447c000
 8006a10:	00000000 	.word	0x00000000
 8006a14:	457a0000 	.word	0x457a0000
 8006a18:	43480000 	.word	0x43480000

08006a1c <Y>:

inline static uint16_t Y(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8006a22:	2090      	movs	r0, #144	; 0x90
 8006a24:	f7ff ff88 	bl	8006938 <getRaw>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006a74 <Y+0x58>
 8006a36:	eddf 1a10 	vldr	s3, [pc, #64]	; 8006a78 <Y+0x5c>
 8006a3a:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006a7c <Y+0x60>
 8006a3e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006a80 <Y+0x64>
 8006a42:	eeb0 0a67 	vmov.f32	s0, s15
 8006a46:	f7ff ff2d 	bl	80068a4 <remap>
 8006a4a:	eef0 7a40 	vmov.f32	s15, s0
 8006a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a52:	ee17 3a90 	vmov	r3, s15
 8006a56:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <Y+0x4e>
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006a64:	d801      	bhi.n	8006a6a <Y+0x4e>
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	e000      	b.n	8006a6c <Y+0x50>
	else return 0;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	43ef8000 	.word	0x43ef8000
 8006a78:	00000000 	.word	0x00000000
 8006a7c:	456d8000 	.word	0x456d8000
 8006a80:	43480000 	.word	0x43480000

08006a84 <getX>:

uint16_t getX(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <getX+0x30>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8006a90:	e007      	b.n	8006aa2 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8006a92:	f7ff ff89 	bl	80069a8 <X>
 8006a96:	4603      	mov	r3, r0
 8006a98:	80bb      	strh	r3, [r7, #4]
 8006a9a:	f7ff ff85 	bl	80069a8 <X>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8006aa2:	88ba      	ldrh	r2, [r7, #4]
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d1f3      	bne.n	8006a92 <getX+0xe>
		}
		return x[0];
 8006aaa:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	08052310 	.word	0x08052310

08006ab8 <getY>:

uint16_t getY(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8006abe:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <getY+0x30>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006ac4:	e007      	b.n	8006ad6 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8006ac6:	f7ff ffa9 	bl	8006a1c <Y>
 8006aca:	4603      	mov	r3, r0
 8006acc:	80bb      	strh	r3, [r7, #4]
 8006ace:	f7ff ffa5 	bl	8006a1c <Y>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8006ad6:	88ba      	ldrh	r2, [r7, #4]
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d1f3      	bne.n	8006ac6 <getY+0xe>
		}
		return y[0];
 8006ade:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08052310 	.word	0x08052310

08006aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006af0:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <HAL_Init+0x40>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <HAL_Init+0x40>)
 8006af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006afc:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <HAL_Init+0x40>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <HAL_Init+0x40>)
 8006b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b08:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <HAL_Init+0x40>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a07      	ldr	r2, [pc, #28]	; (8006b2c <HAL_Init+0x40>)
 8006b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b14:	2003      	movs	r0, #3
 8006b16:	f000 fbbb 	bl	8007290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f000 f83b 	bl	8006b96 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b20:	f7fe fcbe 	bl	80054a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023c00 	.word	0x40023c00

08006b30 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_DeInit+0x54>)
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <HAL_DeInit+0x54>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <HAL_DeInit+0x54>)
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006b4a:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <HAL_DeInit+0x54>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006b50:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <HAL_DeInit+0x54>)
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295
 8006b56:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <HAL_DeInit+0x54>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006b5e:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <HAL_DeInit+0x54>)
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <HAL_DeInit+0x54>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_DeInit+0x54>)
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_DeInit+0x54>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006b7a:	f000 f805 	bl	8006b88 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40023800 	.word	0x40023800

08006b88 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <HAL_InitTick+0x56>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <HAL_InitTick+0x5a>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bac:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fbb2 	bl	800731e <HAL_SYSTICK_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e00e      	b.n	8006be2 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d80a      	bhi.n	8006be0 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd2:	f000 fb68 	bl	80072a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bd6:	4a07      	ldr	r2, [pc, #28]	; (8006bf4 <HAL_InitTick+0x5e>)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e000      	b.n	8006be2 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000058 	.word	0x20000058
 8006bf0:	20000060 	.word	0x20000060
 8006bf4:	2000005c 	.word	0x2000005c

08006bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <HAL_IncTick+0x20>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_IncTick+0x24>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4413      	add	r3, r2
 8006c08:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <HAL_IncTick+0x24>)
 8006c0a:	6013      	str	r3, [r2, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20000060 	.word	0x20000060
 8006c1c:	200009ec 	.word	0x200009ec

08006c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  return uwTick;
 8006c24:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <HAL_GetTick+0x14>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	200009ec 	.word	0x200009ec

08006c38 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <HAL_GetTickPrio+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	2000005c 	.word	0x2000005c

08006c50 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006c5e:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <HAL_SetTickFreq+0x48>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	79fa      	ldrb	r2, [r7, #7]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d012      	beq.n	8006c8e <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_SetTickFreq+0x48>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <HAL_SetTickFreq+0x48>)
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <HAL_SetTickFreq+0x4c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff ff8c 	bl	8006b96 <HAL_InitTick>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8006c88:	4a03      	ldr	r2, [pc, #12]	; (8006c98 <HAL_SetTickFreq+0x48>)
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000060 	.word	0x20000060
 8006c9c:	2000005c 	.word	0x2000005c

08006ca0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <HAL_GetTickFreq+0x14>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20000060 	.word	0x20000060

08006cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cc0:	f7ff ffae 	bl	8006c20 <HAL_GetTick>
 8006cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d005      	beq.n	8006cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <HAL_Delay+0x44>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cde:	bf00      	nop
 8006ce0:	f7ff ff9e 	bl	8006c20 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d8f7      	bhi.n	8006ce0 <HAL_Delay+0x28>
  {
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000060 	.word	0x20000060

08006d00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_SuspendTick+0x1c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a04      	ldr	r2, [pc, #16]	; (8006d1c <HAL_SuspendTick+0x1c>)
 8006d0a:	f023 0302 	bic.w	r3, r3, #2
 8006d0e:	6013      	str	r3, [r2, #0]
}
 8006d10:	bf00      	nop
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	e000e010 	.word	0xe000e010

08006d20 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_ResumeTick+0x1c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <HAL_ResumeTick+0x1c>)
 8006d2a:	f043 0302 	orr.w	r3, r3, #2
 8006d2e:	6013      	str	r3, [r2, #0]
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000e010 	.word	0xe000e010

08006d40 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <HAL_GetHalVersion+0x10>)
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	01070d00 	.word	0x01070d00

08006d54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <HAL_GetREVID+0x14>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	0c1b      	lsrs	r3, r3, #16
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	e0042000 	.word	0xe0042000

08006d6c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <HAL_GetDEVID+0x18>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	e0042000 	.word	0xe0042000

08006d88 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006d8c:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4a04      	ldr	r2, [pc, #16]	; (8006da4 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	6053      	str	r3, [r2, #4]
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	e0042000 	.word	0xe0042000

08006da8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	6053      	str	r3, [r2, #4]
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	e0042000 	.word	0xe0042000

08006dc8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a04      	ldr	r2, [pc, #16]	; (8006de4 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006dd2:	f043 0302 	orr.w	r3, r3, #2
 8006dd6:	6053      	str	r3, [r2, #4]
}
 8006dd8:	bf00      	nop
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	e0042000 	.word	0xe0042000

08006de8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006df2:	f023 0302 	bic.w	r3, r3, #2
 8006df6:	6053      	str	r3, [r2, #4]
}
 8006df8:	bf00      	nop
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	e0042000 	.word	0xe0042000

08006e08 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a04      	ldr	r2, [pc, #16]	; (8006e24 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006e12:	f043 0304 	orr.w	r3, r3, #4
 8006e16:	6053      	str	r3, [r2, #4]
}
 8006e18:	bf00      	nop
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	e0042000 	.word	0xe0042000

08006e28 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006e32:	f023 0304 	bic.w	r3, r3, #4
 8006e36:	6053      	str	r3, [r2, #4]
}
 8006e38:	bf00      	nop
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	e0042000 	.word	0xe0042000

08006e48 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <HAL_EnableCompensationCell+0x14>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
}
 8006e52:	bf00      	nop
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	42270400 	.word	0x42270400

08006e60 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <HAL_DisableCompensationCell+0x14>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	42270400 	.word	0x42270400

08006e78 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006e7c:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <HAL_GetUIDw0+0x14>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	1fff7a10 	.word	0x1fff7a10

08006e90 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <HAL_GetUIDw1+0x14>)
 8006e96:	681b      	ldr	r3, [r3, #0]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	1fff7a14 	.word	0x1fff7a14

08006ea8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006eac:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <HAL_GetUIDw2+0x14>)
 8006eae:	681b      	ldr	r3, [r3, #0]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	1fff7a18 	.word	0x1fff7a18

08006ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <__NVIC_SetPriorityGrouping+0x44>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006edc:	4013      	ands	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ef2:	4a04      	ldr	r2, [pc, #16]	; (8006f04 <__NVIC_SetPriorityGrouping+0x44>)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	60d3      	str	r3, [r2, #12]
}
 8006ef8:	bf00      	nop
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	e000ed00 	.word	0xe000ed00

08006f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <__NVIC_GetPriorityGrouping+0x18>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	f003 0307 	and.w	r3, r3, #7
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	e000ed00 	.word	0xe000ed00

08006f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db0b      	blt.n	8006f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f36:	79fb      	ldrb	r3, [r7, #7]
 8006f38:	f003 021f 	and.w	r2, r3, #31
 8006f3c:	4907      	ldr	r1, [pc, #28]	; (8006f5c <__NVIC_EnableIRQ+0x38>)
 8006f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2001      	movs	r0, #1
 8006f46:	fa00 f202 	lsl.w	r2, r0, r2
 8006f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	e000e100 	.word	0xe000e100

08006f60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db12      	blt.n	8006f98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	f003 021f 	and.w	r2, r3, #31
 8006f78:	490a      	ldr	r1, [pc, #40]	; (8006fa4 <__NVIC_DisableIRQ+0x44>)
 8006f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	2001      	movs	r0, #1
 8006f82:	fa00 f202 	lsl.w	r2, r0, r2
 8006f86:	3320      	adds	r3, #32
 8006f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f8c:	f3bf 8f4f 	dsb	sy
}
 8006f90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f92:	f3bf 8f6f 	isb	sy
}
 8006f96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	e000e100 	.word	0xe000e100

08006fa8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	db0e      	blt.n	8006fd8 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006fba:	4a0b      	ldr	r2, [pc, #44]	; (8006fe8 <__NVIC_GetPendingIRQ+0x40>)
 8006fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	3340      	adds	r3, #64	; 0x40
 8006fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	e000      	b.n	8006fda <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8006fd8:	2300      	movs	r3, #0
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000e100 	.word	0xe000e100

08006fec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	db0c      	blt.n	8007018 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	f003 021f 	and.w	r2, r3, #31
 8007004:	4907      	ldr	r1, [pc, #28]	; (8007024 <__NVIC_SetPendingIRQ+0x38>)
 8007006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2001      	movs	r0, #1
 800700e:	fa00 f202 	lsl.w	r2, r0, r2
 8007012:	3340      	adds	r3, #64	; 0x40
 8007014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	e000e100 	.word	0xe000e100

08007028 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	db0c      	blt.n	8007054 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	f003 021f 	and.w	r2, r3, #31
 8007040:	4907      	ldr	r1, [pc, #28]	; (8007060 <__NVIC_ClearPendingIRQ+0x38>)
 8007042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	2001      	movs	r0, #1
 800704a:	fa00 f202 	lsl.w	r2, r0, r2
 800704e:	3360      	adds	r3, #96	; 0x60
 8007050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	e000e100 	.word	0xe000e100

08007064 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800706e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007072:	2b00      	cmp	r3, #0
 8007074:	db0e      	blt.n	8007094 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8007076:	4a0b      	ldr	r2, [pc, #44]	; (80070a4 <__NVIC_GetActive+0x40>)
 8007078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	3380      	adds	r3, #128	; 0x80
 8007080:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	fa22 f303 	lsr.w	r3, r2, r3
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	e000      	b.n	8007096 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8007094:	2300      	movs	r3, #0
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	e000e100 	.word	0xe000e100

080070a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	db0a      	blt.n	80070d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	490c      	ldr	r1, [pc, #48]	; (80070f4 <__NVIC_SetPriority+0x4c>)
 80070c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c6:	0112      	lsls	r2, r2, #4
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	440b      	add	r3, r1
 80070cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070d0:	e00a      	b.n	80070e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	4908      	ldr	r1, [pc, #32]	; (80070f8 <__NVIC_SetPriority+0x50>)
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	3b04      	subs	r3, #4
 80070e0:	0112      	lsls	r2, r2, #4
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	440b      	add	r3, r1
 80070e6:	761a      	strb	r2, [r3, #24]
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	e000e100 	.word	0xe000e100
 80070f8:	e000ed00 	.word	0xe000ed00

080070fc <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8007106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710a:	2b00      	cmp	r3, #0
 800710c:	db09      	blt.n	8007122 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800710e:	4a0d      	ldr	r2, [pc, #52]	; (8007144 <__NVIC_GetPriority+0x48>)
 8007110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007114:	4413      	add	r3, r2
 8007116:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800711a:	b2db      	uxtb	r3, r3
 800711c:	091b      	lsrs	r3, r3, #4
 800711e:	b2db      	uxtb	r3, r3
 8007120:	e009      	b.n	8007136 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <__NVIC_GetPriority+0x4c>)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	3b04      	subs	r3, #4
 800712c:	4413      	add	r3, r2
 800712e:	7e1b      	ldrb	r3, [r3, #24]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	b2db      	uxtb	r3, r3
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	e000e100 	.word	0xe000e100
 8007148:	e000ed00 	.word	0xe000ed00

0800714c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800714c:	b480      	push	{r7}
 800714e:	b089      	sub	sp, #36	; 0x24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f1c3 0307 	rsb	r3, r3, #7
 8007166:	2b04      	cmp	r3, #4
 8007168:	bf28      	it	cs
 800716a:	2304      	movcs	r3, #4
 800716c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3304      	adds	r3, #4
 8007172:	2b06      	cmp	r3, #6
 8007174:	d902      	bls.n	800717c <NVIC_EncodePriority+0x30>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3b03      	subs	r3, #3
 800717a:	e000      	b.n	800717e <NVIC_EncodePriority+0x32>
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	fa02 f303 	lsl.w	r3, r2, r3
 800718a:	43da      	mvns	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	401a      	ands	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007194:	f04f 31ff 	mov.w	r1, #4294967295
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	43d9      	mvns	r1, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071a4:	4313      	orrs	r3, r2
         );
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3724      	adds	r7, #36	; 0x24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b089      	sub	sp, #36	; 0x24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f1c3 0307 	rsb	r3, r3, #7
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	bf28      	it	cs
 80071d2:	2304      	movcs	r3, #4
 80071d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3304      	adds	r3, #4
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d902      	bls.n	80071e4 <NVIC_DecodePriority+0x32>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3b03      	subs	r3, #3
 80071e2:	e000      	b.n	80071e6 <NVIC_DecodePriority+0x34>
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	40da      	lsrs	r2, r3
 80071ee:	f04f 31ff 	mov.w	r1, #4294967295
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	fa01 f303 	lsl.w	r3, r1, r3
 80071f8:	43db      	mvns	r3, r3
 80071fa:	401a      	ands	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	fa02 f303 	lsl.w	r3, r2, r3
 800720a:	43da      	mvns	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	401a      	ands	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	3724      	adds	r7, #36	; 0x24
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007224:	f3bf 8f4f 	dsb	sy
}
 8007228:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <__NVIC_SystemReset+0x24>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007232:	4904      	ldr	r1, [pc, #16]	; (8007244 <__NVIC_SystemReset+0x24>)
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <__NVIC_SystemReset+0x28>)
 8007236:	4313      	orrs	r3, r2
 8007238:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800723a:	f3bf 8f4f 	dsb	sy
}
 800723e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007240:	bf00      	nop
 8007242:	e7fd      	b.n	8007240 <__NVIC_SystemReset+0x20>
 8007244:	e000ed00 	.word	0xe000ed00
 8007248:	05fa0004 	.word	0x05fa0004

0800724c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3b01      	subs	r3, #1
 8007258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800725c:	d301      	bcc.n	8007262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800725e:	2301      	movs	r3, #1
 8007260:	e00f      	b.n	8007282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007262:	4a0a      	ldr	r2, [pc, #40]	; (800728c <SysTick_Config+0x40>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3b01      	subs	r3, #1
 8007268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800726a:	210f      	movs	r1, #15
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	f7ff ff1a 	bl	80070a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <SysTick_Config+0x40>)
 8007276:	2200      	movs	r2, #0
 8007278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800727a:	4b04      	ldr	r3, [pc, #16]	; (800728c <SysTick_Config+0x40>)
 800727c:	2207      	movs	r2, #7
 800727e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	e000e010 	.word	0xe000e010

08007290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fe11 	bl	8006ec0 <__NVIC_SetPriorityGrouping>
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	4603      	mov	r3, r0
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80072b8:	f7ff fe26 	bl	8006f08 <__NVIC_GetPriorityGrouping>
 80072bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f7ff ff42 	bl	800714c <NVIC_EncodePriority>
 80072c8:	4602      	mov	r2, r0
 80072ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fee9 	bl	80070a8 <__NVIC_SetPriority>
}
 80072d6:	bf00      	nop
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	4603      	mov	r3, r0
 80072e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff fe19 	bl	8006f24 <__NVIC_EnableIRQ>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	4603      	mov	r3, r0
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fe29 	bl	8006f60 <__NVIC_DisableIRQ>
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800731a:	f7ff ff81 	bl	8007220 <__NVIC_SystemReset>

0800731e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ff90 	bl	800724c <SysTick_Config>
 800732c:	4603      	mov	r3, r0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007336:	b480      	push	{r7}
 8007338:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800733a:	f3bf 8f5f 	dmb	sy
}
 800733e:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <HAL_MPU_Disable+0x26>)
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	4a05      	ldr	r2, [pc, #20]	; (800735c <HAL_MPU_Disable+0x26>)
 8007346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734a:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 800734c:	4b04      	ldr	r3, [pc, #16]	; (8007360 <HAL_MPU_Disable+0x2a>)
 800734e:	2200      	movs	r2, #0
 8007350:	605a      	str	r2, [r3, #4]
}
 8007352:	bf00      	nop
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	e000ed00 	.word	0xe000ed00
 8007360:	e000ed90 	.word	0xe000ed90

08007364 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800736c:	4a0b      	ldr	r2, [pc, #44]	; (800739c <HAL_MPU_Enable+0x38>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <HAL_MPU_Enable+0x3c>)
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <HAL_MPU_Enable+0x3c>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007380:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007382:	f3bf 8f4f 	dsb	sy
}
 8007386:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007388:	f3bf 8f6f 	isb	sy
}
 800738c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	e000ed90 	.word	0xe000ed90
 80073a0:	e000ed00 	.word	0xe000ed00

080073a4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	785a      	ldrb	r2, [r3, #1]
 80073b0:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <HAL_MPU_ConfigRegion+0x84>)
 80073b2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d029      	beq.n	8007410 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80073bc:	4a1a      	ldr	r2, [pc, #104]	; (8007428 <HAL_MPU_ConfigRegion+0x84>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7b1b      	ldrb	r3, [r3, #12]
 80073c8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7adb      	ldrb	r3, [r3, #11]
 80073ce:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7a9b      	ldrb	r3, [r3, #10]
 80073d6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80073d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7b5b      	ldrb	r3, [r3, #13]
 80073de:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80073e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	7b9b      	ldrb	r3, [r3, #14]
 80073e6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80073e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	7bdb      	ldrb	r3, [r3, #15]
 80073ee:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80073f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	7a5b      	ldrb	r3, [r3, #9]
 80073f6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80073f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7a1b      	ldrb	r3, [r3, #8]
 80073fe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007400:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007408:	4a07      	ldr	r2, [pc, #28]	; (8007428 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800740a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800740c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800740e:	e005      	b.n	800741c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <HAL_MPU_ConfigRegion+0x84>)
 8007412:	2200      	movs	r2, #0
 8007414:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <HAL_MPU_ConfigRegion+0x84>)
 8007418:	2200      	movs	r2, #0
 800741a:	611a      	str	r2, [r3, #16]
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000ed90 	.word	0xe000ed90

0800742c <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8007430:	f7ff fd6a 	bl	8006f08 <__NVIC_GetPriorityGrouping>
 8007434:	4603      	mov	r3, r0
}
 8007436:	4618      	mov	r0, r3
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4603      	mov	r3, r0
 8007448:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 800744a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fe54 	bl	80070fc <__NVIC_GetPriority>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	f7ff feaa 	bl	80071b2 <NVIC_DecodePriority>
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	4603      	mov	r3, r0
 800746e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fdb9 	bl	8006fec <__NVIC_SetPendingIRQ>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	4603      	mov	r3, r0
 800748a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800748c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fd89 	bl	8006fa8 <__NVIC_GetPendingIRQ>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80074aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fdba 	bl	8007028 <__NVIC_ClearPendingIRQ>
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 80074c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fdca 	bl	8007064 <__NVIC_GetActive>
 80074d0:	4603      	mov	r3, r0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d106      	bne.n	80074f6 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80074e8:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a08      	ldr	r2, [pc, #32]	; (8007510 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80074ee:	f043 0304 	orr.w	r3, r3, #4
 80074f2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80074f4:	e005      	b.n	8007502 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80074f6:	4b06      	ldr	r3, [pc, #24]	; (8007510 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a05      	ldr	r2, [pc, #20]	; (8007510 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80074fc:	f023 0304 	bic.w	r3, r3, #4
 8007500:	6013      	str	r3, [r2, #0]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	e000e010 	.word	0xe000e010

08007514 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007518:	f000 f802 	bl	8007520 <HAL_SYSTICK_Callback>
}
 800751c:	bf00      	nop
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e014      	b.n	800756a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	791b      	ldrb	r3, [r3, #4]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d105      	bne.n	8007556 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7fd ffcd 	bl	80054f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e00f      	b.n	80075a4 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fd fff4 	bl	8005578 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	795b      	ldrb	r3, [r3, #5]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_DAC_Start+0x16>
 80075be:	2302      	movs	r3, #2
 80075c0:	e040      	b.n	8007644 <HAL_DAC_Start+0x98>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	2201      	movs	r2, #1
 80075dc:	409a      	lsls	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10f      	bne.n	800760c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80075f6:	2b3c      	cmp	r3, #60	; 0x3c
 80075f8:	d11d      	bne.n	8007636 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0201 	orr.w	r2, r2, #1
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	e014      	b.n	8007636 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	213c      	movs	r1, #60	; 0x3c
 800761e:	fa01 f303 	lsl.w	r3, r1, r3
 8007622:	429a      	cmp	r2, r3
 8007624:	d107      	bne.n	8007636 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0202 	orr.w	r2, r2, #2
 8007634:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2201      	movs	r2, #1
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	43da      	mvns	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	400a      	ands	r2, r1
 8007674:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	795b      	ldrb	r3, [r3, #5]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_DAC_Start_DMA+0x22>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0ab      	b.n	8007804 <HAL_DAC_Start_DMA+0x17a>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2202      	movs	r2, #2
 80076b6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d12f      	bne.n	800771e <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4a52      	ldr	r2, [pc, #328]	; (800780c <HAL_DAC_Start_DMA+0x182>)
 80076c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	4a51      	ldr	r2, [pc, #324]	; (8007810 <HAL_DAC_Start_DMA+0x186>)
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	4a50      	ldr	r2, [pc, #320]	; (8007814 <HAL_DAC_Start_DMA+0x18a>)
 80076d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d013      	beq.n	8007714 <HAL_DAC_Start_DMA+0x8a>
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d845      	bhi.n	800777e <HAL_DAC_Start_DMA+0xf4>
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_DAC_Start_DMA+0x76>
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2b04      	cmp	r3, #4
 80076fc:	d005      	beq.n	800770a <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80076fe:	e03e      	b.n	800777e <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	613b      	str	r3, [r7, #16]
        break;
 8007708:	e03c      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	330c      	adds	r3, #12
 8007710:	613b      	str	r3, [r7, #16]
        break;
 8007712:	e037      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3310      	adds	r3, #16
 800771a:	613b      	str	r3, [r7, #16]
        break;
 800771c:	e032      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4a3d      	ldr	r2, [pc, #244]	; (8007818 <HAL_DAC_Start_DMA+0x18e>)
 8007724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	4a3c      	ldr	r2, [pc, #240]	; (800781c <HAL_DAC_Start_DMA+0x192>)
 800772c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	4a3b      	ldr	r2, [pc, #236]	; (8007820 <HAL_DAC_Start_DMA+0x196>)
 8007734:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007744:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d013      	beq.n	8007774 <HAL_DAC_Start_DMA+0xea>
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	2b08      	cmp	r3, #8
 8007750:	d817      	bhi.n	8007782 <HAL_DAC_Start_DMA+0xf8>
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_DAC_Start_DMA+0xd6>
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d005      	beq.n	800776a <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800775e:	e010      	b.n	8007782 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3314      	adds	r3, #20
 8007766:	613b      	str	r3, [r7, #16]
        break;
 8007768:	e00c      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3318      	adds	r3, #24
 8007770:	613b      	str	r3, [r7, #16]
        break;
 8007772:	e007      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	331c      	adds	r3, #28
 800777a:	613b      	str	r3, [r7, #16]
        break;
 800777c:	e002      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
        break;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007782:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d111      	bne.n	80077ae <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007798:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6898      	ldr	r0, [r3, #8]
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	f000 fca5 	bl	80080f2 <HAL_DMA_Start_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
 80077ac:	e010      	b.n	80077d0 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80077bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68d8      	ldr	r0, [r3, #12]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	f000 fc93 	bl	80080f2 <HAL_DMA_Start_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10c      	bne.n	80077f6 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6819      	ldr	r1, [r3, #0]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2201      	movs	r2, #1
 80077ea:	409a      	lsls	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	e005      	b.n	8007802 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f043 0204 	orr.w	r2, r3, #4
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	08007b07 	.word	0x08007b07
 8007810:	08007b29 	.word	0x08007b29
 8007814:	08007b45 	.word	0x08007b45
 8007818:	08007df9 	.word	0x08007df9
 800781c:	08007e1b 	.word	0x08007e1b
 8007820:	08007e37 	.word	0x08007e37

08007824 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43da      	mvns	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	400a      	ands	r2, r1
 800784a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6819      	ldr	r1, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2201      	movs	r2, #1
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	43da      	mvns	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	400a      	ands	r2, r1
 8007866:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10d      	bne.n	800788a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fc95 	bl	80081a2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e00c      	b.n	80078a4 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fc87 	bl	80081a2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80078a2:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ca:	d120      	bne.n	800790e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078da:	d118      	bne.n	800790e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2204      	movs	r2, #4
 80078e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f043 0201 	orr.w	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007906:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f870 	bl	80079ee <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791c:	d120      	bne.n	8007960 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792c:	d118      	bne.n	8007960 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2204      	movs	r2, #4
 8007932:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f043 0202 	orr.w	r2, r3, #2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007948:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007958:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa28 	bl	8007db0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d105      	bne.n	8007992 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4413      	add	r3, r2
 800798c:	3308      	adds	r3, #8
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e004      	b.n	800799c <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4413      	add	r3, r2
 8007998:	3314      	adds	r3, #20
 800799a:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	461a      	mov	r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d104      	bne.n	8007a20 <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	e003      	b.n	8007a28 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	795b      	ldrb	r3, [r3, #5]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_DAC_ConfigChannel+0x18>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e03c      	b.n	8007ac8 <HAL_DAC_ConfigChannel+0x92>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2202      	movs	r2, #2
 8007a58:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	43db      	mvns	r3, r3
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4013      	ands	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	22c0      	movs	r2, #192	; 0xc0
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	43da      	mvns	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	400a      	ands	r2, r1
 8007ab8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	791b      	ldrb	r3, [r3, #4]
 8007ae0:	b2db      	uxtb	r3, r3
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff ff4c 	bl	80079b2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	711a      	strb	r2, [r3, #4]
}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff ff45 	bl	80079c6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f043 0204 	orr.w	r2, r3, #4
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff ff3b 	bl	80079da <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	711a      	strb	r2, [r3, #4]
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	795b      	ldrb	r3, [r3, #5]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_DACEx_DualStart+0x18>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e03b      	b.n	8007c02 <HAL_DACEx_DualStart+0x90>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0201 	orr.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007bb4:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007bc0:	2b3c      	cmp	r3, #60	; 0x3c
 8007bc2:	d103      	bne.n	8007bcc <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f043 0301 	orr.w	r3, r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007bd6:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007bda:	d103      	bne.n	8007be4 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f043 0302 	orr.w	r3, r3, #2
 8007be2:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6859      	ldr	r1, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	795b      	ldrb	r3, [r3, #5]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d101      	bne.n	8007c62 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e024      	b.n	8007cac <HAL_DACEx_TriangleWaveGenerate+0x62>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	ea02 0103 	and.w	r1, r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	409a      	lsls	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	795b      	ldrb	r3, [r3, #5]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_DACEx_NoiseWaveGenerate+0x18>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e024      	b.n	8007d1a <HAL_DACEx_NoiseWaveGenerate+0x62>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	ea02 0103 	and.w	r1, r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	409a      	lsls	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b087      	sub	sp, #28
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d105      	bne.n	8007d46 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e004      	b.n	8007d50 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	3320      	adds	r3, #32
 8007d5e:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff ffb4 	bl	8007d74 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	711a      	strb	r2, [r3, #4]
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff ffad 	bl	8007d88 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f043 0204 	orr.w	r2, r3, #4
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ffa3 	bl	8007d9c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	711a      	strb	r2, [r3, #4]
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007e70:	f7fe fed6 	bl	8006c20 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e099      	b.n	8007fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ea0:	e00f      	b.n	8007ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ea2:	f7fe febd 	bl	8006c20 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b05      	cmp	r3, #5
 8007eae:	d908      	bls.n	8007ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2203      	movs	r2, #3
 8007eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e078      	b.n	8007fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e8      	bne.n	8007ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4b38      	ldr	r3, [pc, #224]	; (8007fbc <HAL_DMA_Init+0x158>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d107      	bne.n	8007f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	4313      	orrs	r3, r2
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f023 0307 	bic.w	r3, r3, #7
 8007f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d117      	bne.n	8007f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00e      	beq.n	8007f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fd4d 	bl	8008a08 <DMA_CheckFifoParam>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2240      	movs	r2, #64	; 0x40
 8007f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007f82:	2301      	movs	r3, #1
 8007f84:	e016      	b.n	8007fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fd05 	bl	800899e <DMA_CalcBaseAndBitshift>
 8007f94:	4603      	mov	r3, r0
 8007f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f9c:	223f      	movs	r2, #63	; 0x3f
 8007f9e:	409a      	lsls	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	f010803f 	.word	0xf010803f

08007fc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e050      	b.n	8008074 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d101      	bne.n	8007fe2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e048      	b.n	8008074 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2200      	movs	r2, #0
 8008000:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2221      	movs	r2, #33	; 0x21
 8008020:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fcbb 	bl	800899e <DMA_CalcBaseAndBitshift>
 8008028:	4603      	mov	r3, r0
 800802a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008054:	223f      	movs	r2, #63	; 0x3f
 8008056:	409a      	lsls	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_DMA_Start+0x20>
 8008098:	2302      	movs	r3, #2
 800809a:	e026      	b.n	80080ea <HAL_DMA_Start+0x6e>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d115      	bne.n	80080dc <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fc3c 	bl	8008942 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0201 	orr.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	e005      	b.n	80080e8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80080e4:	2302      	movs	r3, #2
 80080e6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b086      	sub	sp, #24
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008108:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_DMA_Start_IT+0x26>
 8008114:	2302      	movs	r3, #2
 8008116:	e040      	b.n	800819a <HAL_DMA_Start_IT+0xa8>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	d12f      	bne.n	800818c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 fbfe 	bl	8008942 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814a:	223f      	movs	r2, #63	; 0x3f
 800814c:	409a      	lsls	r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0216 	orr.w	r2, r2, #22
 8008160:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0208 	orr.w	r2, r2, #8
 8008178:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f042 0201 	orr.w	r2, r2, #1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e005      	b.n	8008198 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008194:	2302      	movs	r3, #2
 8008196:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80081b0:	f7fe fd36 	bl	8006c20 <HAL_GetTick>
 80081b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d008      	beq.n	80081d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2280      	movs	r2, #128	; 0x80
 80081c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e052      	b.n	800827a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0216 	bic.w	r2, r2, #22
 80081e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	695a      	ldr	r2, [r3, #20]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <HAL_DMA_Abort+0x62>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008200:	2b00      	cmp	r3, #0
 8008202:	d007      	beq.n	8008214 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0208 	bic.w	r2, r2, #8
 8008212:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008224:	e013      	b.n	800824e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008226:	f7fe fcfb 	bl	8006c20 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	2b05      	cmp	r3, #5
 8008232:	d90c      	bls.n	800824e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2203      	movs	r2, #3
 800823e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e015      	b.n	800827a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e4      	bne.n	8008226 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008260:	223f      	movs	r2, #63	; 0x3f
 8008262:	409a      	lsls	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d004      	beq.n	80082a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2280      	movs	r2, #128	; 0x80
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e00c      	b.n	80082ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2205      	movs	r2, #5
 80082a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0201 	bic.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b08a      	sub	sp, #40	; 0x28
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	460b      	mov	r3, r1
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80082d4:	2300      	movs	r3, #0
 80082d6:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80082d8:	f7fe fca2 	bl	8006c20 <HAL_GetTick>
 80082dc:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d008      	beq.n	80082fc <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2280      	movs	r2, #128	; 0x80
 80082ee:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0bf      	b.n	800847c <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e0b2      	b.n	800847c <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8008316:	7afb      	ldrb	r3, [r7, #11]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008320:	2220      	movs	r2, #32
 8008322:	fa02 f303 	lsl.w	r3, r2, r3
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
 8008328:	e005      	b.n	8008336 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832e:	2210      	movs	r2, #16
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833a:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8008342:	e05a      	b.n	80083fa <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d017      	beq.n	800837c <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_DMA_PollForTransfer+0x9c>
 8008352:	f7fe fc65 	bl	8006c20 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d20c      	bcs.n	800837c <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2220      	movs	r2, #32
 8008366:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e07f      	b.n	800847c <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008386:	2208      	movs	r2, #8
 8008388:	409a      	lsls	r2, r3
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	4013      	ands	r3, r2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f043 0201 	orr.w	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a2:	2208      	movs	r2, #8
 80083a4:	409a      	lsls	r2, r3
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ae:	2201      	movs	r2, #1
 80083b0:	409a      	lsls	r2, r3
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	f043 0202 	orr.w	r2, r3, #2
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ca:	2201      	movs	r2, #1
 80083cc:	409a      	lsls	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d6:	2204      	movs	r2, #4
 80083d8:	409a      	lsls	r2, r3
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	4013      	ands	r3, r2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e6:	f043 0204 	orr.w	r2, r3, #4
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f2:	2204      	movs	r2, #4
 80083f4:	409a      	lsls	r2, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	4013      	ands	r3, r2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <HAL_DMA_PollForTransfer+0x14a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d099      	beq.n	8008344 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008414:	2b00      	cmp	r3, #0
 8008416:	d018      	beq.n	800844a <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d012      	beq.n	800844a <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff febc 	bl	80081a2 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842e:	2230      	movs	r2, #48	; 0x30
 8008430:	409a      	lsls	r2, r3
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e018      	b.n	800847c <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10e      	bne.n	800846e <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	2230      	movs	r2, #48	; 0x30
 8008456:	409a      	lsls	r2, r3
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800846c:	e005      	b.n	800847a <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008472:	2210      	movs	r2, #16
 8008474:	409a      	lsls	r2, r3
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 800847a:	7ffb      	ldrb	r3, [r7, #31]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3728      	adds	r7, #40	; 0x28
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008490:	4b8e      	ldr	r3, [pc, #568]	; (80086cc <HAL_DMA_IRQHandler+0x248>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a8e      	ldr	r2, [pc, #568]	; (80086d0 <HAL_DMA_IRQHandler+0x24c>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	0a9b      	lsrs	r3, r3, #10
 800849c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ae:	2208      	movs	r2, #8
 80084b0:	409a      	lsls	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4013      	ands	r3, r2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01a      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d013      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0204 	bic.w	r2, r2, #4
 80084d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084dc:	2208      	movs	r2, #8
 80084de:	409a      	lsls	r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e8:	f043 0201 	orr.w	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f4:	2201      	movs	r2, #1
 80084f6:	409a      	lsls	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d012      	beq.n	8008526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00b      	beq.n	8008526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008512:	2201      	movs	r2, #1
 8008514:	409a      	lsls	r2, r3
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851e:	f043 0202 	orr.w	r2, r3, #2
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852a:	2204      	movs	r2, #4
 800852c:	409a      	lsls	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4013      	ands	r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d012      	beq.n	800855c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008548:	2204      	movs	r2, #4
 800854a:	409a      	lsls	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008554:	f043 0204 	orr.w	r2, r3, #4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008560:	2210      	movs	r2, #16
 8008562:	409a      	lsls	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d043      	beq.n	80085f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b00      	cmp	r3, #0
 8008578:	d03c      	beq.n	80085f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857e:	2210      	movs	r2, #16
 8008580:	409a      	lsls	r2, r3
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d018      	beq.n	80085c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d108      	bne.n	80085b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d024      	beq.n	80085f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	e01f      	b.n	80085f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01b      	beq.n	80085f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	e016      	b.n	80085f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d107      	bne.n	80085e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0208 	bic.w	r2, r2, #8
 80085e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f8:	2220      	movs	r2, #32
 80085fa:	409a      	lsls	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 808f 	beq.w	8008724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 8087 	beq.w	8008724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861a:	2220      	movs	r2, #32
 800861c:	409a      	lsls	r2, r3
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b05      	cmp	r3, #5
 800862c:	d136      	bne.n	800869c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0216 	bic.w	r2, r2, #22
 800863c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695a      	ldr	r2, [r3, #20]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800864c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	d103      	bne.n	800865e <HAL_DMA_IRQHandler+0x1da>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0208 	bic.w	r2, r2, #8
 800866c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008672:	223f      	movs	r2, #63	; 0x3f
 8008674:	409a      	lsls	r2, r3
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868e:	2b00      	cmp	r3, #0
 8008690:	d07e      	beq.n	8008790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
        }
        return;
 800869a:	e079      	b.n	8008790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01d      	beq.n	80086e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10d      	bne.n	80086d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d031      	beq.n	8008724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
 80086c8:	e02c      	b.n	8008724 <HAL_DMA_IRQHandler+0x2a0>
 80086ca:	bf00      	nop
 80086cc:	20000058 	.word	0x20000058
 80086d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d023      	beq.n	8008724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	4798      	blx	r3
 80086e4:	e01e      	b.n	8008724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10f      	bne.n	8008714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0210 	bic.w	r2, r2, #16
 8008702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008728:	2b00      	cmp	r3, #0
 800872a:	d032      	beq.n	8008792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d022      	beq.n	800877e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2205      	movs	r2, #5
 800873c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0201 	bic.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3301      	adds	r3, #1
 8008754:	60bb      	str	r3, [r7, #8]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	429a      	cmp	r2, r3
 800875a:	d307      	bcc.n	800876c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f2      	bne.n	8008750 <HAL_DMA_IRQHandler+0x2cc>
 800876a:	e000      	b.n	800876e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800876c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
 800878e:	e000      	b.n	8008792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008790:	bf00      	nop
    }
  }
}
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_DMA_RegisterCallback+0x20>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e03c      	b.n	8008832 <HAL_DMA_RegisterCallback+0x9a>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d129      	bne.n	8008820 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d829      	bhi.n	8008826 <HAL_DMA_RegisterCallback+0x8e>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <HAL_DMA_RegisterCallback+0x40>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087f1 	.word	0x080087f1
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	08008801 	.word	0x08008801
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008811 	.word	0x08008811
 80087ec:	08008819 	.word	0x08008819
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80087f6:	e017      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80087fe:	e013      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008806:	e00f      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800880e:	e00b      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008816:	e007      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800881e:	e003      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
 8008824:	e000      	b.n	8008828 <HAL_DMA_RegisterCallback+0x90>
      break;
 8008826:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
}
 8008832:	4618      	mov	r0, r3
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <HAL_DMA_UnRegisterCallback+0x1e>
 8008858:	2302      	movs	r3, #2
 800885a:	e052      	b.n	8008902 <HAL_DMA_UnRegisterCallback+0xc4>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d141      	bne.n	80088f4 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	2b06      	cmp	r3, #6
 8008874:	d83b      	bhi.n	80088ee <HAL_DMA_UnRegisterCallback+0xb0>
 8008876:	a201      	add	r2, pc, #4	; (adr r2, 800887c <HAL_DMA_UnRegisterCallback+0x3e>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	08008899 	.word	0x08008899
 8008880:	080088a1 	.word	0x080088a1
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088c1 	.word	0x080088c1
 8008894:	080088c9 	.word	0x080088c9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800889e:	e02b      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80088a6:	e027      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80088ae:	e023      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80088b6:	e01f      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80088be:	e01b      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80088c6:	e017      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80088ec:	e004      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	73fb      	strb	r3, [r7, #15]
      break;
 80088f2:	e001      	b.n	80088f8 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800891c:	b2db      	uxtb	r3, r3
}
 800891e:	4618      	mov	r0, r3
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800895e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d108      	bne.n	8008982 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008980:	e007      	b.n	8008992 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	3b10      	subs	r3, #16
 80089ae:	4a14      	ldr	r2, [pc, #80]	; (8008a00 <DMA_CalcBaseAndBitshift+0x62>)
 80089b0:	fba2 2303 	umull	r2, r3, r2, r3
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089b8:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <DMA_CalcBaseAndBitshift+0x66>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	461a      	mov	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d909      	bls.n	80089e0 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089d4:	f023 0303 	bic.w	r3, r3, #3
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	659a      	str	r2, [r3, #88]	; 0x58
 80089de:	e007      	b.n	80089f0 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	aaaaaaab 	.word	0xaaaaaaab
 8008a04:	08052314 	.word	0x08052314

08008a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d11f      	bne.n	8008a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d856      	bhi.n	8008ad6 <DMA_CheckFifoParam+0xce>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <DMA_CheckFifoParam+0x28>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a53 	.word	0x08008a53
 8008a38:	08008a41 	.word	0x08008a41
 8008a3c:	08008ad7 	.word	0x08008ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d046      	beq.n	8008ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a50:	e043      	b.n	8008ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a5a:	d140      	bne.n	8008ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a60:	e03d      	b.n	8008ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a6a:	d121      	bne.n	8008ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d837      	bhi.n	8008ae2 <DMA_CheckFifoParam+0xda>
 8008a72:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <DMA_CheckFifoParam+0x70>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008a89 	.word	0x08008a89
 8008a7c:	08008a8f 	.word	0x08008a8f
 8008a80:	08008a89 	.word	0x08008a89
 8008a84:	08008aa1 	.word	0x08008aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8c:	e030      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d025      	beq.n	8008ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a9e:	e022      	b.n	8008ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008aa8:	d11f      	bne.n	8008aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008aae:	e01c      	b.n	8008aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d903      	bls.n	8008abe <DMA_CheckFifoParam+0xb6>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d003      	beq.n	8008ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008abc:	e018      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	e015      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00e      	beq.n	8008aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad4:	e00b      	b.n	8008aee <DMA_CheckFifoParam+0xe6>
      break;
 8008ad6:	bf00      	nop
 8008ad8:	e00a      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      break;
 8008ada:	bf00      	nop
 8008adc:	e008      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e006      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      break;
 8008ae2:	bf00      	nop
 8008ae4:	e004      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      break;
 8008ae6:	bf00      	nop
 8008ae8:	e002      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8008aea:	bf00      	nop
 8008aec:	e000      	b.n	8008af0 <DMA_CheckFifoParam+0xe8>
      break;
 8008aee:	bf00      	nop
    }
  } 
  
  return status; 
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b80      	cmp	r3, #128	; 0x80
 8008b16:	d106      	bne.n	8008b26 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
 8008b24:	e031      	b.n	8008b8a <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_DMAEx_MultiBufferStart+0x36>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e02b      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart+0x8e>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d11e      	bne.n	8008b86 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008b5e:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f001 f972 	bl	8009e58 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e001      	b.n	8008b8a <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 8008b86:	2302      	movs	r3, #2
 8008b88:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
 8008ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	2b80      	cmp	r3, #128	; 0x80
 8008bac:	d106      	bne.n	8008bbc <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f001 b911 	b.w	8009dde <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2240      	movs	r2, #64	; 0x40
 8008bd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f001 b8ff 	b.w	8009dde <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d102      	bne.n	8008bf0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8008bea:	2302      	movs	r3, #2
 8008bec:	f001 b8f7 	b.w	8009dde <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	f041 80e5 	bne.w	8009dd0 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2202      	movs	r2, #2
 8008c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008c22:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f001 f910 	bl	8009e58 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b8d      	ldr	r3, [pc, #564]	; (8008e74 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d960      	bls.n	8008d06 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a8b      	ldr	r2, [pc, #556]	; (8008e78 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d057      	beq.n	8008cfe <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a8a      	ldr	r2, [pc, #552]	; (8008e7c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d050      	beq.n	8008cfa <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a88      	ldr	r2, [pc, #544]	; (8008e80 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d049      	beq.n	8008cf6 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a87      	ldr	r2, [pc, #540]	; (8008e84 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d042      	beq.n	8008cf2 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a85      	ldr	r2, [pc, #532]	; (8008e88 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d03a      	beq.n	8008cec <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a84      	ldr	r2, [pc, #528]	; (8008e8c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d032      	beq.n	8008ce6 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a82      	ldr	r2, [pc, #520]	; (8008e90 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d02a      	beq.n	8008ce0 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a81      	ldr	r2, [pc, #516]	; (8008e94 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d022      	beq.n	8008cda <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a7f      	ldr	r2, [pc, #508]	; (8008e98 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01a      	beq.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a7e      	ldr	r2, [pc, #504]	; (8008e9c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d012      	beq.n	8008cce <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a7c      	ldr	r2, [pc, #496]	; (8008ea0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00a      	beq.n	8008cc8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a7b      	ldr	r2, [pc, #492]	; (8008ea4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d102      	bne.n	8008cc2 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8008cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cc0:	e01e      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cc6:	e01b      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ccc:	e018      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cd2:	e015      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cd8:	e012      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cde:	e00f      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ce4:	e00c      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cea:	e009      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cf0:	e006      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cf2:	2320      	movs	r3, #32
 8008cf4:	e004      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cf6:	2320      	movs	r3, #32
 8008cf8:	e002      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	e000      	b.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008cfe:	2320      	movs	r3, #32
 8008d00:	4a69      	ldr	r2, [pc, #420]	; (8008ea8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8008d02:	60d3      	str	r3, [r2, #12]
 8008d04:	e14f      	b.n	8008fa6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4b67      	ldr	r3, [pc, #412]	; (8008eac <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d960      	bls.n	8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a58      	ldr	r2, [pc, #352]	; (8008e78 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d057      	beq.n	8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a56      	ldr	r2, [pc, #344]	; (8008e7c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d050      	beq.n	8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a55      	ldr	r2, [pc, #340]	; (8008e80 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d049      	beq.n	8008dc4 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a53      	ldr	r2, [pc, #332]	; (8008e84 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d042      	beq.n	8008dc0 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a52      	ldr	r2, [pc, #328]	; (8008e88 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d03a      	beq.n	8008dba <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a50      	ldr	r2, [pc, #320]	; (8008e8c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d032      	beq.n	8008db4 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a4f      	ldr	r2, [pc, #316]	; (8008e90 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d02a      	beq.n	8008dae <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a4d      	ldr	r2, [pc, #308]	; (8008e94 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d022      	beq.n	8008da8 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a4c      	ldr	r2, [pc, #304]	; (8008e98 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d01a      	beq.n	8008da2 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a4a      	ldr	r2, [pc, #296]	; (8008e9c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d012      	beq.n	8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a49      	ldr	r2, [pc, #292]	; (8008ea0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00a      	beq.n	8008d96 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a47      	ldr	r2, [pc, #284]	; (8008ea4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d102      	bne.n	8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8008d8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d8e:	e01e      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d94:	e01b      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008d96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d9a:	e018      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008da0:	e015      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008da2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008da6:	e012      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dac:	e00f      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008db2:	e00c      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008db8:	e009      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dbe:	e006      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	e004      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008dc4:	2320      	movs	r3, #32
 8008dc6:	e002      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008dc8:	2320      	movs	r3, #32
 8008dca:	e000      	b.n	8008dce <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008dcc:	2320      	movs	r3, #32
 8008dce:	4a36      	ldr	r2, [pc, #216]	; (8008ea8 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8008dd0:	6093      	str	r3, [r2, #8]
 8008dd2:	e0e8      	b.n	8008fa6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	f240 8082 	bls.w	8008ee6 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a24      	ldr	r2, [pc, #144]	; (8008e78 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d078      	beq.n	8008ede <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d071      	beq.n	8008eda <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d06a      	beq.n	8008ed6 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d063      	beq.n	8008ed2 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d05b      	beq.n	8008ecc <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d053      	beq.n	8008ec6 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1b      	ldr	r2, [pc, #108]	; (8008e90 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d04b      	beq.n	8008ec0 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a19      	ldr	r2, [pc, #100]	; (8008e94 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d043      	beq.n	8008eba <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d03b      	beq.n	8008eb4 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a16      	ldr	r2, [pc, #88]	; (8008e9c <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d012      	beq.n	8008e6c <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00a      	beq.n	8008e66 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a13      	ldr	r2, [pc, #76]	; (8008ea4 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d102      	bne.n	8008e60 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008e5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e5e:	e03f      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008e60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e64:	e03c      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008e66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e6a:	e039      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008e6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e70:	e036      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008e72:	bf00      	nop
 8008e74:	40026458 	.word	0x40026458
 8008e78:	40026010 	.word	0x40026010
 8008e7c:	40026410 	.word	0x40026410
 8008e80:	40026070 	.word	0x40026070
 8008e84:	40026470 	.word	0x40026470
 8008e88:	40026028 	.word	0x40026028
 8008e8c:	40026428 	.word	0x40026428
 8008e90:	40026088 	.word	0x40026088
 8008e94:	40026488 	.word	0x40026488
 8008e98:	40026040 	.word	0x40026040
 8008e9c:	40026440 	.word	0x40026440
 8008ea0:	400260a0 	.word	0x400260a0
 8008ea4:	400264a0 	.word	0x400264a0
 8008ea8:	40026400 	.word	0x40026400
 8008eac:	400260b8 	.word	0x400260b8
 8008eb0:	40026058 	.word	0x40026058
 8008eb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008eb8:	e012      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ebe:	e00f      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ec4:	e00c      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eca:	e009      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ed0:	e006      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ed2:	2320      	movs	r3, #32
 8008ed4:	e004      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	e002      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008eda:	2320      	movs	r3, #32
 8008edc:	e000      	b.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008ede:	2320      	movs	r3, #32
 8008ee0:	4a8c      	ldr	r2, [pc, #560]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008ee2:	60d3      	str	r3, [r2, #12]
 8008ee4:	e05f      	b.n	8008fa6 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a8b      	ldr	r2, [pc, #556]	; (8009118 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d057      	beq.n	8008fa0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a89      	ldr	r2, [pc, #548]	; (800911c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d050      	beq.n	8008f9c <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a88      	ldr	r2, [pc, #544]	; (8009120 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d049      	beq.n	8008f98 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a86      	ldr	r2, [pc, #536]	; (8009124 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d042      	beq.n	8008f94 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a85      	ldr	r2, [pc, #532]	; (8009128 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d03a      	beq.n	8008f8e <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a83      	ldr	r2, [pc, #524]	; (800912c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d032      	beq.n	8008f88 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a82      	ldr	r2, [pc, #520]	; (8009130 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d02a      	beq.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a80      	ldr	r2, [pc, #512]	; (8009134 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d022      	beq.n	8008f7c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a7f      	ldr	r2, [pc, #508]	; (8009138 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d01a      	beq.n	8008f76 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a7d      	ldr	r2, [pc, #500]	; (800913c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d012      	beq.n	8008f70 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a7c      	ldr	r2, [pc, #496]	; (8009140 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00a      	beq.n	8008f6a <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a7a      	ldr	r2, [pc, #488]	; (8009144 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d102      	bne.n	8008f64 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008f5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f62:	e01e      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f68:	e01b      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f6e:	e018      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f74:	e015      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f7a:	e012      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f80:	e00f      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f86:	e00c      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f8c:	e009      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f92:	e006      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f94:	2320      	movs	r3, #32
 8008f96:	e004      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f98:	2320      	movs	r3, #32
 8008f9a:	e002      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	e000      	b.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	4a5c      	ldr	r2, [pc, #368]	; (8009114 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8008fa4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	4b66      	ldr	r3, [pc, #408]	; (8009148 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d960      	bls.n	8009074 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a58      	ldr	r2, [pc, #352]	; (8009118 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d057      	beq.n	800906c <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a56      	ldr	r2, [pc, #344]	; (800911c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d050      	beq.n	8009068 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a55      	ldr	r2, [pc, #340]	; (8009120 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d049      	beq.n	8009064 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a53      	ldr	r2, [pc, #332]	; (8009124 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d042      	beq.n	8009060 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a52      	ldr	r2, [pc, #328]	; (8009128 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d03a      	beq.n	800905a <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a50      	ldr	r2, [pc, #320]	; (800912c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d032      	beq.n	8009054 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a4f      	ldr	r2, [pc, #316]	; (8009130 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d02a      	beq.n	800904e <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a4d      	ldr	r2, [pc, #308]	; (8009134 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d022      	beq.n	8009048 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a4c      	ldr	r2, [pc, #304]	; (8009138 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d01a      	beq.n	8009042 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a4a      	ldr	r2, [pc, #296]	; (800913c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d012      	beq.n	800903c <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a49      	ldr	r2, [pc, #292]	; (8009140 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00a      	beq.n	8009036 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a47      	ldr	r2, [pc, #284]	; (8009144 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d102      	bne.n	8009030 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800902a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800902e:	e01e      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009034:	e01b      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009036:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800903a:	e018      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800903c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009040:	e015      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009046:	e012      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904c:	e00f      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800904e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009052:	e00c      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009058:	e009      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800905a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800905e:	e006      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009060:	2310      	movs	r3, #16
 8009062:	e004      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009064:	2310      	movs	r3, #16
 8009066:	e002      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8009068:	2310      	movs	r3, #16
 800906a:	e000      	b.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800906c:	2310      	movs	r3, #16
 800906e:	4a37      	ldr	r2, [pc, #220]	; (800914c <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8009070:	60d3      	str	r3, [r2, #12]
 8009072:	e14f      	b.n	8009314 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	4b35      	ldr	r3, [pc, #212]	; (8009150 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800907c:	429a      	cmp	r2, r3
 800907e:	f240 8082 	bls.w	8009186 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a24      	ldr	r2, [pc, #144]	; (8009118 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d078      	beq.n	800917e <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a22      	ldr	r2, [pc, #136]	; (800911c <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d071      	beq.n	800917a <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a21      	ldr	r2, [pc, #132]	; (8009120 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d06a      	beq.n	8009176 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1f      	ldr	r2, [pc, #124]	; (8009124 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d063      	beq.n	8009172 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d05b      	beq.n	800916c <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1c      	ldr	r2, [pc, #112]	; (800912c <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d053      	beq.n	8009166 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d04b      	beq.n	8009160 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a19      	ldr	r2, [pc, #100]	; (8009134 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d043      	beq.n	800915a <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d03b      	beq.n	8009154 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a16      	ldr	r2, [pc, #88]	; (800913c <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d012      	beq.n	800910c <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a15      	ldr	r2, [pc, #84]	; (8009140 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d00a      	beq.n	8009106 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a13      	ldr	r2, [pc, #76]	; (8009144 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d102      	bne.n	8009100 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80090fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090fe:	e03f      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009100:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009104:	e03c      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800910a:	e039      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800910c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009110:	e036      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009112:	bf00      	nop
 8009114:	40026000 	.word	0x40026000
 8009118:	40026010 	.word	0x40026010
 800911c:	40026410 	.word	0x40026410
 8009120:	40026070 	.word	0x40026070
 8009124:	40026470 	.word	0x40026470
 8009128:	40026028 	.word	0x40026028
 800912c:	40026428 	.word	0x40026428
 8009130:	40026088 	.word	0x40026088
 8009134:	40026488 	.word	0x40026488
 8009138:	40026040 	.word	0x40026040
 800913c:	40026440 	.word	0x40026440
 8009140:	400260a0 	.word	0x400260a0
 8009144:	400264a0 	.word	0x400264a0
 8009148:	40026458 	.word	0x40026458
 800914c:	40026400 	.word	0x40026400
 8009150:	400260b8 	.word	0x400260b8
 8009154:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009158:	e012      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800915a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800915e:	e00f      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009164:	e00c      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916a:	e009      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800916c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009170:	e006      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009172:	2310      	movs	r3, #16
 8009174:	e004      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009176:	2310      	movs	r3, #16
 8009178:	e002      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800917a:	2310      	movs	r3, #16
 800917c:	e000      	b.n	8009180 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800917e:	2310      	movs	r3, #16
 8009180:	4a8c      	ldr	r2, [pc, #560]	; (80093b4 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8009182:	6093      	str	r3, [r2, #8]
 8009184:	e0c6      	b.n	8009314 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	4b8a      	ldr	r3, [pc, #552]	; (80093b8 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800918e:	429a      	cmp	r2, r3
 8009190:	d960      	bls.n	8009254 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a89      	ldr	r2, [pc, #548]	; (80093bc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d057      	beq.n	800924c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a87      	ldr	r2, [pc, #540]	; (80093c0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d050      	beq.n	8009248 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a86      	ldr	r2, [pc, #536]	; (80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d049      	beq.n	8009244 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a84      	ldr	r2, [pc, #528]	; (80093c8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d042      	beq.n	8009240 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a83      	ldr	r2, [pc, #524]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d03a      	beq.n	800923a <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a81      	ldr	r2, [pc, #516]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d032      	beq.n	8009234 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a80      	ldr	r2, [pc, #512]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d02a      	beq.n	800922e <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a7e      	ldr	r2, [pc, #504]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d022      	beq.n	8009228 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a7d      	ldr	r2, [pc, #500]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d01a      	beq.n	8009222 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a7b      	ldr	r2, [pc, #492]	; (80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d012      	beq.n	800921c <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a7a      	ldr	r2, [pc, #488]	; (80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00a      	beq.n	8009216 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a78      	ldr	r2, [pc, #480]	; (80093e8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d102      	bne.n	8009210 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800920a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800920e:	e01e      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009210:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009214:	e01b      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009216:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800921a:	e018      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800921c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009220:	e015      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009222:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009226:	e012      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800922c:	e00f      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800922e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009232:	e00c      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009238:	e009      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800923a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800923e:	e006      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009240:	2310      	movs	r3, #16
 8009242:	e004      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009244:	2310      	movs	r3, #16
 8009246:	e002      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009248:	2310      	movs	r3, #16
 800924a:	e000      	b.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800924c:	2310      	movs	r3, #16
 800924e:	4a67      	ldr	r2, [pc, #412]	; (80093ec <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8009250:	60d3      	str	r3, [r2, #12]
 8009252:	e05f      	b.n	8009314 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a58      	ldr	r2, [pc, #352]	; (80093bc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d057      	beq.n	800930e <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a57      	ldr	r2, [pc, #348]	; (80093c0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d050      	beq.n	800930a <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a55      	ldr	r2, [pc, #340]	; (80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d049      	beq.n	8009306 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a54      	ldr	r2, [pc, #336]	; (80093c8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d042      	beq.n	8009302 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a52      	ldr	r2, [pc, #328]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d03a      	beq.n	80092fc <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a51      	ldr	r2, [pc, #324]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d032      	beq.n	80092f6 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a4f      	ldr	r2, [pc, #316]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d02a      	beq.n	80092f0 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a4e      	ldr	r2, [pc, #312]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d022      	beq.n	80092ea <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a4c      	ldr	r2, [pc, #304]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d01a      	beq.n	80092e4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a4b      	ldr	r2, [pc, #300]	; (80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d012      	beq.n	80092de <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a49      	ldr	r2, [pc, #292]	; (80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d00a      	beq.n	80092d8 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a48      	ldr	r2, [pc, #288]	; (80093e8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d102      	bne.n	80092d2 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80092cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092d0:	e01e      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80092d6:	e01b      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092dc:	e018      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092e2:	e015      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092e8:	e012      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ee:	e00f      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f4:	e00c      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fa:	e009      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80092fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009300:	e006      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009302:	2310      	movs	r3, #16
 8009304:	e004      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009306:	2310      	movs	r3, #16
 8009308:	e002      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800930a:	2310      	movs	r3, #16
 800930c:	e000      	b.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800930e:	2310      	movs	r3, #16
 8009310:	4a36      	ldr	r2, [pc, #216]	; (80093ec <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8009312:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	461a      	mov	r2, r3
 800931a:	4b35      	ldr	r3, [pc, #212]	; (80093f0 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800931c:	429a      	cmp	r2, r3
 800931e:	f240 8082 	bls.w	8009426 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a25      	ldr	r2, [pc, #148]	; (80093bc <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d078      	beq.n	800941e <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a23      	ldr	r2, [pc, #140]	; (80093c0 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d071      	beq.n	800941a <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a22      	ldr	r2, [pc, #136]	; (80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d06a      	beq.n	8009416 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a20      	ldr	r2, [pc, #128]	; (80093c8 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d063      	beq.n	8009412 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a1f      	ldr	r2, [pc, #124]	; (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d05b      	beq.n	800940c <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a1d      	ldr	r2, [pc, #116]	; (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d053      	beq.n	8009406 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1c      	ldr	r2, [pc, #112]	; (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d04b      	beq.n	8009400 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1a      	ldr	r2, [pc, #104]	; (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d043      	beq.n	80093fa <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a19      	ldr	r2, [pc, #100]	; (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d03b      	beq.n	80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d012      	beq.n	80093ac <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a16      	ldr	r2, [pc, #88]	; (80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d00a      	beq.n	80093a6 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a14      	ldr	r2, [pc, #80]	; (80093e8 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d102      	bne.n	80093a0 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800939a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800939e:	e03f      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80093a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093a4:	e03c      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80093a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093aa:	e039      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80093ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093b0:	e036      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80093b2:	bf00      	nop
 80093b4:	40026400 	.word	0x40026400
 80093b8:	40026058 	.word	0x40026058
 80093bc:	40026010 	.word	0x40026010
 80093c0:	40026410 	.word	0x40026410
 80093c4:	40026070 	.word	0x40026070
 80093c8:	40026470 	.word	0x40026470
 80093cc:	40026028 	.word	0x40026028
 80093d0:	40026428 	.word	0x40026428
 80093d4:	40026088 	.word	0x40026088
 80093d8:	40026488 	.word	0x40026488
 80093dc:	40026040 	.word	0x40026040
 80093e0:	40026440 	.word	0x40026440
 80093e4:	400260a0 	.word	0x400260a0
 80093e8:	400264a0 	.word	0x400264a0
 80093ec:	40026000 	.word	0x40026000
 80093f0:	40026458 	.word	0x40026458
 80093f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093f8:	e012      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80093fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093fe:	e00f      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009404:	e00c      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800940a:	e009      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800940c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009410:	e006      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009412:	2308      	movs	r3, #8
 8009414:	e004      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009416:	2308      	movs	r3, #8
 8009418:	e002      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800941a:	2308      	movs	r3, #8
 800941c:	e000      	b.n	8009420 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800941e:	2308      	movs	r3, #8
 8009420:	4a8c      	ldr	r2, [pc, #560]	; (8009654 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8009422:	60d3      	str	r3, [r2, #12]
 8009424:	e14e      	b.n	80096c4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	4b8a      	ldr	r3, [pc, #552]	; (8009658 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 800942e:	429a      	cmp	r2, r3
 8009430:	d960      	bls.n	80094f4 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a89      	ldr	r2, [pc, #548]	; (800965c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d057      	beq.n	80094ec <HAL_DMAEx_MultiBufferStart_IT+0x958>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a87      	ldr	r2, [pc, #540]	; (8009660 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d050      	beq.n	80094e8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a86      	ldr	r2, [pc, #536]	; (8009664 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d049      	beq.n	80094e4 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a84      	ldr	r2, [pc, #528]	; (8009668 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d042      	beq.n	80094e0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a83      	ldr	r2, [pc, #524]	; (800966c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d03a      	beq.n	80094da <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a81      	ldr	r2, [pc, #516]	; (8009670 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d032      	beq.n	80094d4 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a80      	ldr	r2, [pc, #512]	; (8009674 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d02a      	beq.n	80094ce <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a7e      	ldr	r2, [pc, #504]	; (8009678 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d022      	beq.n	80094c8 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a7d      	ldr	r2, [pc, #500]	; (800967c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d01a      	beq.n	80094c2 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a7b      	ldr	r2, [pc, #492]	; (8009680 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d012      	beq.n	80094bc <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a7a      	ldr	r2, [pc, #488]	; (8009684 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00a      	beq.n	80094b6 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a78      	ldr	r2, [pc, #480]	; (8009688 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d102      	bne.n	80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 80094aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094ae:	e01e      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094b4:	e01b      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094ba:	e018      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094c0:	e015      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094c6:	e012      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094cc:	e00f      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d2:	e00c      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d8:	e009      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094de:	e006      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094e0:	2308      	movs	r3, #8
 80094e2:	e004      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094e4:	2308      	movs	r3, #8
 80094e6:	e002      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094e8:	2308      	movs	r3, #8
 80094ea:	e000      	b.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80094ec:	2308      	movs	r3, #8
 80094ee:	4a59      	ldr	r2, [pc, #356]	; (8009654 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80094f0:	6093      	str	r3, [r2, #8]
 80094f2:	e0e7      	b.n	80096c4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	4b64      	ldr	r3, [pc, #400]	; (800968c <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d960      	bls.n	80095c2 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a55      	ldr	r2, [pc, #340]	; (800965c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d057      	beq.n	80095ba <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a54      	ldr	r2, [pc, #336]	; (8009660 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d050      	beq.n	80095b6 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a52      	ldr	r2, [pc, #328]	; (8009664 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d049      	beq.n	80095b2 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a51      	ldr	r2, [pc, #324]	; (8009668 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d042      	beq.n	80095ae <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a4f      	ldr	r2, [pc, #316]	; (800966c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d03a      	beq.n	80095a8 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a4e      	ldr	r2, [pc, #312]	; (8009670 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d032      	beq.n	80095a2 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a4c      	ldr	r2, [pc, #304]	; (8009674 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d02a      	beq.n	800959c <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a4b      	ldr	r2, [pc, #300]	; (8009678 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d022      	beq.n	8009596 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a49      	ldr	r2, [pc, #292]	; (800967c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01a      	beq.n	8009590 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a48      	ldr	r2, [pc, #288]	; (8009680 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d012      	beq.n	800958a <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a46      	ldr	r2, [pc, #280]	; (8009684 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00a      	beq.n	8009584 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a45      	ldr	r2, [pc, #276]	; (8009688 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d102      	bne.n	800957e <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8009578:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800957c:	e01e      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800957e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009582:	e01b      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009584:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009588:	e018      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800958a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800958e:	e015      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009590:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009594:	e012      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009596:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959a:	e00f      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800959c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095a0:	e00c      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80095a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095a6:	e009      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80095a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095ac:	e006      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80095ae:	2308      	movs	r3, #8
 80095b0:	e004      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80095b2:	2308      	movs	r3, #8
 80095b4:	e002      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80095b6:	2308      	movs	r3, #8
 80095b8:	e000      	b.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80095ba:	2308      	movs	r3, #8
 80095bc:	4a34      	ldr	r2, [pc, #208]	; (8009690 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80095be:	60d3      	str	r3, [r2, #12]
 80095c0:	e080      	b.n	80096c4 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a25      	ldr	r2, [pc, #148]	; (800965c <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d078      	beq.n	80096be <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a23      	ldr	r2, [pc, #140]	; (8009660 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d071      	beq.n	80096ba <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a22      	ldr	r2, [pc, #136]	; (8009664 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d06a      	beq.n	80096b6 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a20      	ldr	r2, [pc, #128]	; (8009668 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d063      	beq.n	80096b2 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a1f      	ldr	r2, [pc, #124]	; (800966c <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d05b      	beq.n	80096ac <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d053      	beq.n	80096a6 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a1c      	ldr	r2, [pc, #112]	; (8009674 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d04b      	beq.n	80096a0 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a1a      	ldr	r2, [pc, #104]	; (8009678 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d043      	beq.n	800969a <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a19      	ldr	r2, [pc, #100]	; (800967c <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d03b      	beq.n	8009694 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a17      	ldr	r2, [pc, #92]	; (8009680 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d012      	beq.n	800964c <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a16      	ldr	r2, [pc, #88]	; (8009684 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00a      	beq.n	8009646 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a14      	ldr	r2, [pc, #80]	; (8009688 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d102      	bne.n	8009640 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 800963a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800963e:	e03f      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009644:	e03c      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009646:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800964a:	e039      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800964c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009650:	e036      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009652:	bf00      	nop
 8009654:	40026400 	.word	0x40026400
 8009658:	400260b8 	.word	0x400260b8
 800965c:	40026010 	.word	0x40026010
 8009660:	40026410 	.word	0x40026410
 8009664:	40026070 	.word	0x40026070
 8009668:	40026470 	.word	0x40026470
 800966c:	40026028 	.word	0x40026028
 8009670:	40026428 	.word	0x40026428
 8009674:	40026088 	.word	0x40026088
 8009678:	40026488 	.word	0x40026488
 800967c:	40026040 	.word	0x40026040
 8009680:	40026440 	.word	0x40026440
 8009684:	400260a0 	.word	0x400260a0
 8009688:	400264a0 	.word	0x400264a0
 800968c:	40026058 	.word	0x40026058
 8009690:	40026000 	.word	0x40026000
 8009694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009698:	e012      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800969a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800969e:	e00f      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096a4:	e00c      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096aa:	e009      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b0:	e006      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096b2:	2308      	movs	r3, #8
 80096b4:	e004      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096b6:	2308      	movs	r3, #8
 80096b8:	e002      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096ba:	2308      	movs	r3, #8
 80096bc:	e000      	b.n	80096c0 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80096be:	2308      	movs	r3, #8
 80096c0:	4a8a      	ldr	r2, [pc, #552]	; (80098ec <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80096c2:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	4b89      	ldr	r3, [pc, #548]	; (80098f0 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d960      	bls.n	8009792 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a87      	ldr	r2, [pc, #540]	; (80098f4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d057      	beq.n	800978a <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a86      	ldr	r2, [pc, #536]	; (80098f8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d050      	beq.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a84      	ldr	r2, [pc, #528]	; (80098fc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d049      	beq.n	8009782 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a83      	ldr	r2, [pc, #524]	; (8009900 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d042      	beq.n	800977e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a81      	ldr	r2, [pc, #516]	; (8009904 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d03a      	beq.n	8009778 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a80      	ldr	r2, [pc, #512]	; (8009908 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d032      	beq.n	8009772 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a7e      	ldr	r2, [pc, #504]	; (800990c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d02a      	beq.n	800976c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a7d      	ldr	r2, [pc, #500]	; (8009910 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d022      	beq.n	8009766 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a7b      	ldr	r2, [pc, #492]	; (8009914 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d01a      	beq.n	8009760 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a7a      	ldr	r2, [pc, #488]	; (8009918 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d012      	beq.n	800975a <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a78      	ldr	r2, [pc, #480]	; (800991c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00a      	beq.n	8009754 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a77      	ldr	r2, [pc, #476]	; (8009920 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d102      	bne.n	800974e <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009748:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800974c:	e01e      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800974e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009752:	e01b      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009758:	e018      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800975a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800975e:	e015      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009760:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009764:	e012      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800976a:	e00f      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800976c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009770:	e00c      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009776:	e009      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800977c:	e006      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800977e:	2304      	movs	r3, #4
 8009780:	e004      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009782:	2304      	movs	r3, #4
 8009784:	e002      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009786:	2304      	movs	r3, #4
 8009788:	e000      	b.n	800978c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800978a:	2304      	movs	r3, #4
 800978c:	4a65      	ldr	r2, [pc, #404]	; (8009924 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800978e:	60d3      	str	r3, [r2, #12]
 8009790:	e150      	b.n	8009a34 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	4b63      	ldr	r3, [pc, #396]	; (8009928 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800979a:	429a      	cmp	r2, r3
 800979c:	d960      	bls.n	8009860 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a54      	ldr	r2, [pc, #336]	; (80098f4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d057      	beq.n	8009858 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a52      	ldr	r2, [pc, #328]	; (80098f8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d050      	beq.n	8009854 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a51      	ldr	r2, [pc, #324]	; (80098fc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d049      	beq.n	8009850 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a4f      	ldr	r2, [pc, #316]	; (8009900 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d042      	beq.n	800984c <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a4e      	ldr	r2, [pc, #312]	; (8009904 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d03a      	beq.n	8009846 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a4c      	ldr	r2, [pc, #304]	; (8009908 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d032      	beq.n	8009840 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a4b      	ldr	r2, [pc, #300]	; (800990c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d02a      	beq.n	800983a <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a49      	ldr	r2, [pc, #292]	; (8009910 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d022      	beq.n	8009834 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a48      	ldr	r2, [pc, #288]	; (8009914 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d01a      	beq.n	800982e <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a46      	ldr	r2, [pc, #280]	; (8009918 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d012      	beq.n	8009828 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a45      	ldr	r2, [pc, #276]	; (800991c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00a      	beq.n	8009822 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a43      	ldr	r2, [pc, #268]	; (8009920 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d102      	bne.n	800981c <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009816:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800981a:	e01e      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800981c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009820:	e01b      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009822:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009826:	e018      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800982c:	e015      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800982e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009832:	e012      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009838:	e00f      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800983a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800983e:	e00c      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009844:	e009      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800984a:	e006      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800984c:	2304      	movs	r3, #4
 800984e:	e004      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009850:	2304      	movs	r3, #4
 8009852:	e002      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009854:	2304      	movs	r3, #4
 8009856:	e000      	b.n	800985a <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009858:	2304      	movs	r3, #4
 800985a:	4a32      	ldr	r2, [pc, #200]	; (8009924 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800985c:	6093      	str	r3, [r2, #8]
 800985e:	e0e9      	b.n	8009a34 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	461a      	mov	r2, r3
 8009866:	4b31      	ldr	r3, [pc, #196]	; (800992c <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8009868:	429a      	cmp	r2, r3
 800986a:	f240 8083 	bls.w	8009974 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a20      	ldr	r2, [pc, #128]	; (80098f4 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d079      	beq.n	800996c <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d072      	beq.n	8009968 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a1d      	ldr	r2, [pc, #116]	; (80098fc <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d06b      	beq.n	8009964 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1b      	ldr	r2, [pc, #108]	; (8009900 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d064      	beq.n	8009960 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1a      	ldr	r2, [pc, #104]	; (8009904 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d05c      	beq.n	800995a <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a18      	ldr	r2, [pc, #96]	; (8009908 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d054      	beq.n	8009954 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a17      	ldr	r2, [pc, #92]	; (800990c <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d04c      	beq.n	800994e <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a15      	ldr	r2, [pc, #84]	; (8009910 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d044      	beq.n	8009948 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a14      	ldr	r2, [pc, #80]	; (8009914 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d03c      	beq.n	8009942 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a12      	ldr	r2, [pc, #72]	; (8009918 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d034      	beq.n	800993c <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a11      	ldr	r2, [pc, #68]	; (800991c <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d02c      	beq.n	8009936 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a0f      	ldr	r2, [pc, #60]	; (8009920 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d124      	bne.n	8009930 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80098e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098ea:	e040      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80098ec:	40026000 	.word	0x40026000
 80098f0:	40026458 	.word	0x40026458
 80098f4:	40026010 	.word	0x40026010
 80098f8:	40026410 	.word	0x40026410
 80098fc:	40026070 	.word	0x40026070
 8009900:	40026470 	.word	0x40026470
 8009904:	40026028 	.word	0x40026028
 8009908:	40026428 	.word	0x40026428
 800990c:	40026088 	.word	0x40026088
 8009910:	40026488 	.word	0x40026488
 8009914:	40026040 	.word	0x40026040
 8009918:	40026440 	.word	0x40026440
 800991c:	400260a0 	.word	0x400260a0
 8009920:	400264a0 	.word	0x400264a0
 8009924:	40026400 	.word	0x40026400
 8009928:	400260b8 	.word	0x400260b8
 800992c:	40026058 	.word	0x40026058
 8009930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009934:	e01b      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009936:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800993a:	e018      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800993c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009940:	e015      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009942:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009946:	e012      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800994c:	e00f      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800994e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009952:	e00c      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009958:	e009      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800995a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800995e:	e006      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009960:	2304      	movs	r3, #4
 8009962:	e004      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009964:	2304      	movs	r3, #4
 8009966:	e002      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009968:	2304      	movs	r3, #4
 800996a:	e000      	b.n	800996e <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800996c:	2304      	movs	r3, #4
 800996e:	4a8b      	ldr	r2, [pc, #556]	; (8009b9c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009970:	60d3      	str	r3, [r2, #12]
 8009972:	e05f      	b.n	8009a34 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a89      	ldr	r2, [pc, #548]	; (8009ba0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d057      	beq.n	8009a2e <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a88      	ldr	r2, [pc, #544]	; (8009ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d050      	beq.n	8009a2a <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a86      	ldr	r2, [pc, #536]	; (8009ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d049      	beq.n	8009a26 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a85      	ldr	r2, [pc, #532]	; (8009bac <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d042      	beq.n	8009a22 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a83      	ldr	r2, [pc, #524]	; (8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d03a      	beq.n	8009a1c <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a82      	ldr	r2, [pc, #520]	; (8009bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d032      	beq.n	8009a16 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a80      	ldr	r2, [pc, #512]	; (8009bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d02a      	beq.n	8009a10 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a7f      	ldr	r2, [pc, #508]	; (8009bbc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d022      	beq.n	8009a0a <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a7d      	ldr	r2, [pc, #500]	; (8009bc0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d01a      	beq.n	8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a7c      	ldr	r2, [pc, #496]	; (8009bc4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d012      	beq.n	80099fe <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a7a      	ldr	r2, [pc, #488]	; (8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00a      	beq.n	80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a79      	ldr	r2, [pc, #484]	; (8009bcc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d102      	bne.n	80099f2 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80099ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099f0:	e01e      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80099f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099f6:	e01b      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80099f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099fc:	e018      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80099fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a02:	e015      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a08:	e012      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a0e:	e00f      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a14:	e00c      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a1a:	e009      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a20:	e006      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a22:	2304      	movs	r3, #4
 8009a24:	e004      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a26:	2304      	movs	r3, #4
 8009a28:	e002      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a2a:	2304      	movs	r3, #4
 8009a2c:	e000      	b.n	8009a30 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009a2e:	2304      	movs	r3, #4
 8009a30:	4a5a      	ldr	r2, [pc, #360]	; (8009b9c <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009a32:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4b65      	ldr	r3, [pc, #404]	; (8009bd0 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d95c      	bls.n	8009afa <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a56      	ldr	r2, [pc, #344]	; (8009ba0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d053      	beq.n	8009af2 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a55      	ldr	r2, [pc, #340]	; (8009ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d04c      	beq.n	8009aee <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a53      	ldr	r2, [pc, #332]	; (8009ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d045      	beq.n	8009aea <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a52      	ldr	r2, [pc, #328]	; (8009bac <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d03e      	beq.n	8009ae6 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a50      	ldr	r2, [pc, #320]	; (8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d037      	beq.n	8009ae2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a4f      	ldr	r2, [pc, #316]	; (8009bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d030      	beq.n	8009ade <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a4d      	ldr	r2, [pc, #308]	; (8009bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d029      	beq.n	8009ada <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a4c      	ldr	r2, [pc, #304]	; (8009bbc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d022      	beq.n	8009ad6 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a4a      	ldr	r2, [pc, #296]	; (8009bc0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d01a      	beq.n	8009ad0 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a49      	ldr	r2, [pc, #292]	; (8009bc4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d012      	beq.n	8009aca <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a47      	ldr	r2, [pc, #284]	; (8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d00a      	beq.n	8009ac4 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a46      	ldr	r2, [pc, #280]	; (8009bcc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d102      	bne.n	8009abe <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8009ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009abc:	e01a      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009abe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ac2:	e017      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ac8:	e014      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ace:	e011      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ad4:	e00e      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ad6:	2340      	movs	r3, #64	; 0x40
 8009ad8:	e00c      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ada:	2340      	movs	r3, #64	; 0x40
 8009adc:	e00a      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ade:	2340      	movs	r3, #64	; 0x40
 8009ae0:	e008      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ae2:	2340      	movs	r3, #64	; 0x40
 8009ae4:	e006      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e004      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e002      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4a37      	ldr	r2, [pc, #220]	; (8009bd4 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009af6:	60d3      	str	r3, [r2, #12]
 8009af8:	e141      	b.n	8009d7e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	4b35      	ldr	r3, [pc, #212]	; (8009bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d97c      	bls.n	8009c00 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a25      	ldr	r2, [pc, #148]	; (8009ba0 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d073      	beq.n	8009bf8 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a23      	ldr	r2, [pc, #140]	; (8009ba4 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d06c      	beq.n	8009bf4 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a22      	ldr	r2, [pc, #136]	; (8009ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d065      	beq.n	8009bf0 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a20      	ldr	r2, [pc, #128]	; (8009bac <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d05e      	beq.n	8009bec <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a1f      	ldr	r2, [pc, #124]	; (8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d057      	beq.n	8009be8 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a1d      	ldr	r2, [pc, #116]	; (8009bb4 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d050      	beq.n	8009be4 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a1c      	ldr	r2, [pc, #112]	; (8009bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d049      	beq.n	8009be0 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a1a      	ldr	r2, [pc, #104]	; (8009bbc <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d042      	beq.n	8009bdc <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a19      	ldr	r2, [pc, #100]	; (8009bc0 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d01a      	beq.n	8009b96 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a17      	ldr	r2, [pc, #92]	; (8009bc4 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d012      	beq.n	8009b90 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a16      	ldr	r2, [pc, #88]	; (8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d00a      	beq.n	8009b8a <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a14      	ldr	r2, [pc, #80]	; (8009bcc <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d102      	bne.n	8009b84 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8009b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b82:	e03a      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b88:	e037      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b8e:	e034      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b94:	e031      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009b9a:	e02e      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009b9c:	40026000 	.word	0x40026000
 8009ba0:	40026010 	.word	0x40026010
 8009ba4:	40026410 	.word	0x40026410
 8009ba8:	40026070 	.word	0x40026070
 8009bac:	40026470 	.word	0x40026470
 8009bb0:	40026028 	.word	0x40026028
 8009bb4:	40026428 	.word	0x40026428
 8009bb8:	40026088 	.word	0x40026088
 8009bbc:	40026488 	.word	0x40026488
 8009bc0:	40026040 	.word	0x40026040
 8009bc4:	40026440 	.word	0x40026440
 8009bc8:	400260a0 	.word	0x400260a0
 8009bcc:	400264a0 	.word	0x400264a0
 8009bd0:	40026458 	.word	0x40026458
 8009bd4:	40026400 	.word	0x40026400
 8009bd8:	400260b8 	.word	0x400260b8
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	e00c      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009be0:	2340      	movs	r3, #64	; 0x40
 8009be2:	e00a      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009be4:	2340      	movs	r3, #64	; 0x40
 8009be6:	e008      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	e006      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e004      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e002      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e000      	b.n	8009bfa <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4a7b      	ldr	r2, [pc, #492]	; (8009de8 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009bfc:	6093      	str	r3, [r2, #8]
 8009bfe:	e0be      	b.n	8009d7e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	461a      	mov	r2, r3
 8009c06:	4b79      	ldr	r3, [pc, #484]	; (8009dec <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d95c      	bls.n	8009cc6 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a77      	ldr	r2, [pc, #476]	; (8009df0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d053      	beq.n	8009cbe <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a76      	ldr	r2, [pc, #472]	; (8009df4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d04c      	beq.n	8009cba <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a74      	ldr	r2, [pc, #464]	; (8009df8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d045      	beq.n	8009cb6 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a73      	ldr	r2, [pc, #460]	; (8009dfc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d03e      	beq.n	8009cb2 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a71      	ldr	r2, [pc, #452]	; (8009e00 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d037      	beq.n	8009cae <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a70      	ldr	r2, [pc, #448]	; (8009e04 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d030      	beq.n	8009caa <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a6e      	ldr	r2, [pc, #440]	; (8009e08 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d029      	beq.n	8009ca6 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a6d      	ldr	r2, [pc, #436]	; (8009e0c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d022      	beq.n	8009ca2 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a6b      	ldr	r2, [pc, #428]	; (8009e10 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01a      	beq.n	8009c9c <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a6a      	ldr	r2, [pc, #424]	; (8009e14 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d012      	beq.n	8009c96 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a68      	ldr	r2, [pc, #416]	; (8009e18 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00a      	beq.n	8009c90 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a67      	ldr	r2, [pc, #412]	; (8009e1c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d102      	bne.n	8009c8a <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c88:	e01a      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c8e:	e017      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c94:	e014      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c9a:	e011      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ca0:	e00e      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	e00c      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	e00a      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009caa:	2340      	movs	r3, #64	; 0x40
 8009cac:	e008      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009cae:	2340      	movs	r3, #64	; 0x40
 8009cb0:	e006      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e004      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e002      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4a57      	ldr	r2, [pc, #348]	; (8009e20 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009cc2:	60d3      	str	r3, [r2, #12]
 8009cc4:	e05b      	b.n	8009d7e <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a49      	ldr	r2, [pc, #292]	; (8009df0 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d053      	beq.n	8009d78 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a47      	ldr	r2, [pc, #284]	; (8009df4 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d04c      	beq.n	8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a46      	ldr	r2, [pc, #280]	; (8009df8 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d045      	beq.n	8009d70 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a44      	ldr	r2, [pc, #272]	; (8009dfc <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d03e      	beq.n	8009d6c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a43      	ldr	r2, [pc, #268]	; (8009e00 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d037      	beq.n	8009d68 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a41      	ldr	r2, [pc, #260]	; (8009e04 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d030      	beq.n	8009d64 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a40      	ldr	r2, [pc, #256]	; (8009e08 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d029      	beq.n	8009d60 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a3e      	ldr	r2, [pc, #248]	; (8009e0c <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d022      	beq.n	8009d5c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a3d      	ldr	r2, [pc, #244]	; (8009e10 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d01a      	beq.n	8009d56 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a3b      	ldr	r2, [pc, #236]	; (8009e14 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d012      	beq.n	8009d50 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a3a      	ldr	r2, [pc, #232]	; (8009e18 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00a      	beq.n	8009d4a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a38      	ldr	r2, [pc, #224]	; (8009e1c <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d102      	bne.n	8009d44 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8009d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d42:	e01a      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009d48:	e017      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d4e:	e014      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d54:	e011      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d5a:	e00e      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	e00c      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d60:	2340      	movs	r3, #64	; 0x40
 8009d62:	e00a      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	e008      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d68:	2340      	movs	r3, #64	; 0x40
 8009d6a:	e006      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e004      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e002      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4a29      	ldr	r2, [pc, #164]	; (8009e20 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009d7c:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f042 0216 	orr.w	r2, r2, #22
 8009d8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	695a      	ldr	r2, [r3, #20]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d103      	bne.n	8009dae <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d007      	beq.n	8009dbe <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f042 0208 	orr.w	r2, r2, #8
 8009dbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0201 	orr.w	r2, r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	e005      	b.n	8009ddc <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	40026400 	.word	0x40026400
 8009dec:	40026058 	.word	0x40026058
 8009df0:	40026010 	.word	0x40026010
 8009df4:	40026410 	.word	0x40026410
 8009df8:	40026070 	.word	0x40026070
 8009dfc:	40026470 	.word	0x40026470
 8009e00:	40026028 	.word	0x40026028
 8009e04:	40026428 	.word	0x40026428
 8009e08:	40026088 	.word	0x40026088
 8009e0c:	40026488 	.word	0x40026488
 8009e10:	40026040 	.word	0x40026040
 8009e14:	40026440 	.word	0x40026440
 8009e18:	400260a0 	.word	0x400260a0
 8009e1c:	400264a0 	.word	0x400264a0
 8009e20:	40026000 	.word	0x40026000

08009e24 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d104      	bne.n	8009e42 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	60da      	str	r2, [r3, #12]
 8009e40:	e003      	b.n	8009e4a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	2b40      	cmp	r3, #64	; 0x40
 8009e74:	d108      	bne.n	8009e88 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009e86:	e007      	b.n	8009e98 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	60da      	str	r2, [r3, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <HAL_EXTI_SetConfigLine+0x16>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e08f      	b.n	8009fde <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 031f 	and.w	r3, r3, #31
 8009ece:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed8:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d052      	beq.n	8009f8c <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d006      	beq.n	8009f00 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8009ef2:	4b3e      	ldr	r3, [pc, #248]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	493d      	ldr	r1, [pc, #244]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	608b      	str	r3, [r1, #8]
 8009efe:	e006      	b.n	8009f0e <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8009f00:	4b3a      	ldr	r3, [pc, #232]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	43db      	mvns	r3, r3
 8009f08:	4938      	ldr	r1, [pc, #224]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8009f1a:	4b34      	ldr	r3, [pc, #208]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	4933      	ldr	r1, [pc, #204]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60cb      	str	r3, [r1, #12]
 8009f26:	e006      	b.n	8009f36 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009f28:	4b30      	ldr	r3, [pc, #192]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	43db      	mvns	r3, r3
 8009f30:	492e      	ldr	r1, [pc, #184]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f32:	4013      	ands	r3, r2
 8009f34:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009f3e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009f42:	d123      	bne.n	8009f8c <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009f44:	4a2a      	ldr	r2, [pc, #168]	; (8009ff0 <HAL_EXTI_SetConfigLine+0x14c>)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	089b      	lsrs	r3, r3, #2
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f50:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	220f      	movs	r2, #15
 8009f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f60:	43db      	mvns	r3, r3
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	4013      	ands	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009f7e:	491c      	ldr	r1, [pc, #112]	; (8009ff0 <HAL_EXTI_SetConfigLine+0x14c>)
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	089b      	lsrs	r3, r3, #2
 8009f84:	3302      	adds	r3, #2
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d006      	beq.n	8009fa6 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8009f98:	4b14      	ldr	r3, [pc, #80]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	4913      	ldr	r1, [pc, #76]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	600b      	str	r3, [r1, #0]
 8009fa4:	e006      	b.n	8009fb4 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8009fa6:	4b11      	ldr	r3, [pc, #68]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	43db      	mvns	r3, r3
 8009fae:	490f      	ldr	r1, [pc, #60]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d006      	beq.n	8009fce <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	4909      	ldr	r1, [pc, #36]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	604b      	str	r3, [r1, #4]
 8009fcc:	e006      	b.n	8009fdc <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8009fce:	4b07      	ldr	r3, [pc, #28]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	43db      	mvns	r3, r3
 8009fd6:	4905      	ldr	r1, [pc, #20]	; (8009fec <HAL_EXTI_SetConfigLine+0x148>)
 8009fd8:	4013      	ands	r3, r2
 8009fda:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40013c00 	.word	0x40013c00
 8009ff0:	40013800 	.word	0x40013800

08009ff4 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_EXTI_GetConfigLine+0x16>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e061      	b.n	800a0d2 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 031f 	and.w	r3, r3, #31
 800a01e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a020:	2201      	movs	r2, #1
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	fa02 f303 	lsl.w	r3, r2, r3
 800a028:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 800a02a:	4b2d      	ldr	r3, [pc, #180]	; (800a0e0 <HAL_EXTI_GetConfigLine+0xec>)
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	4013      	ands	r3, r2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2201      	movs	r2, #1
 800a03a:	605a      	str	r2, [r3, #4]
 800a03c:	e002      	b.n	800a044 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2200      	movs	r2, #0
 800a042:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 800a044:	4b26      	ldr	r3, [pc, #152]	; (800a0e0 <HAL_EXTI_GetConfigLine+0xec>)
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	4013      	ands	r3, r2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f043 0202 	orr.w	r2, r3, #2
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2200      	movs	r2, #0
 800a060:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2200      	movs	r2, #0
 800a066:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d02d      	beq.n	800a0d0 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 800a074:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <HAL_EXTI_GetConfigLine+0xec>)
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2201      	movs	r2, #1
 800a084:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <HAL_EXTI_GetConfigLine+0xec>)
 800a088:	68da      	ldr	r2, [r3, #12]
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	4013      	ands	r3, r2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d005      	beq.n	800a09e <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f043 0202 	orr.w	r2, r3, #2
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a0a6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a0aa:	d111      	bne.n	800a0d0 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a0ac:	4a0d      	ldr	r2, [pc, #52]	; (800a0e4 <HAL_EXTI_GetConfigLine+0xf0>)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	089b      	lsrs	r3, r3, #2
 800a0b2:	3302      	adds	r3, #2
 800a0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0b8:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ca:	0e1a      	lsrs	r2, r3, #24
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	40013c00 	.word	0x40013c00
 800a0e4:	40013800 	.word	0x40013800

0800a0e8 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e04c      	b.n	800a194 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 031f 	and.w	r3, r3, #31
 800a102:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a104:	2201      	movs	r2, #1
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	fa02 f303 	lsl.w	r3, r2, r3
 800a10c:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 800a10e:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	43db      	mvns	r3, r3
 800a116:	4922      	ldr	r1, [pc, #136]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a118:	4013      	ands	r3, r2
 800a11a:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 800a11c:	4b20      	ldr	r3, [pc, #128]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	43db      	mvns	r3, r3
 800a124:	491e      	ldr	r1, [pc, #120]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a126:	4013      	ands	r3, r2
 800a128:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d02d      	beq.n	800a192 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 800a136:	4b1a      	ldr	r3, [pc, #104]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	43db      	mvns	r3, r3
 800a13e:	4918      	ldr	r1, [pc, #96]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a140:	4013      	ands	r3, r2
 800a142:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 800a144:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	43db      	mvns	r3, r3
 800a14c:	4914      	ldr	r1, [pc, #80]	; (800a1a0 <HAL_EXTI_ClearConfigLine+0xb8>)
 800a14e:	4013      	ands	r3, r2
 800a150:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a15a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a15e:	d118      	bne.n	800a192 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a160:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <HAL_EXTI_ClearConfigLine+0xbc>)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	089b      	lsrs	r3, r3, #2
 800a166:	3302      	adds	r3, #2
 800a168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a16c:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	220f      	movs	r2, #15
 800a178:	fa02 f303 	lsl.w	r3, r2, r3
 800a17c:	43db      	mvns	r3, r3
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4013      	ands	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800a184:	4907      	ldr	r1, [pc, #28]	; (800a1a4 <HAL_EXTI_ClearConfigLine+0xbc>)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	089b      	lsrs	r3, r3, #2
 800a18a:	3302      	adds	r3, #2
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	371c      	adds	r7, #28
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	40013c00 	.word	0x40013c00
 800a1a4:	40013800 	.word	0x40013800

0800a1a8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d103      	bne.n	800a1c8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	605a      	str	r2, [r3, #4]
      break;
 800a1c6:	e002      	b.n	800a1ce <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a1cc:	bf00      	nop
  }

  return status;
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	371c      	adds	r7, #28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e003      	b.n	800a1f8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
  }
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 031f 	and.w	r3, r3, #31
 800a214:	2201      	movs	r2, #1
 800a216:	fa02 f303 	lsl.w	r3, r2, r3
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <HAL_EXTI_IRQHandler+0x44>)
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4013      	ands	r3, r2
 800a224:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a22c:	4a06      	ldr	r2, [pc, #24]	; (800a248 <HAL_EXTI_IRQHandler+0x44>)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	4798      	blx	r3
    }
  }
}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	40013c00 	.word	0x40013c00

0800a24c <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 031f 	and.w	r3, r3, #31
 800a25e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a260:	2201      	movs	r2, #1
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	fa02 f303 	lsl.w	r3, r2, r3
 800a268:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800a26a:	4b07      	ldr	r3, [pc, #28]	; (800a288 <HAL_EXTI_GetPending+0x3c>)
 800a26c:	695a      	ldr	r2, [r3, #20]
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	401a      	ands	r2, r3
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	fa22 f303 	lsr.w	r3, r2, r3
 800a278:	60fb      	str	r3, [r7, #12]
  return regval;
 800a27a:	68fb      	ldr	r3, [r7, #12]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	40013c00 	.word	0x40013c00

0800a28c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 031f 	and.w	r3, r3, #31
 800a29e:	2201      	movs	r2, #1
 800a2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800a2a6:	4a04      	ldr	r2, [pc, #16]	; (800a2b8 <HAL_EXTI_ClearPending+0x2c>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6153      	str	r3, [r2, #20]
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	40013c00 	.word	0x40013c00

0800a2bc <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 031f 	and.w	r3, r3, #31
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 800a2d4:	4a04      	ldr	r2, [pc, #16]	; (800a2e8 <HAL_EXTI_GenerateSWI+0x2c>)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6113      	str	r3, [r2, #16]
}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	40013c00 	.word	0x40013c00

0800a2ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a2fe:	4b23      	ldr	r3, [pc, #140]	; (800a38c <HAL_FLASH_Program+0xa0>)
 800a300:	7e1b      	ldrb	r3, [r3, #24]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <HAL_FLASH_Program+0x1e>
 800a306:	2302      	movs	r3, #2
 800a308:	e03b      	b.n	800a382 <HAL_FLASH_Program+0x96>
 800a30a:	4b20      	ldr	r3, [pc, #128]	; (800a38c <HAL_FLASH_Program+0xa0>)
 800a30c:	2201      	movs	r2, #1
 800a30e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a310:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a314:	f000 f9be 	bl	800a694 <FLASH_WaitForLastOperation>
 800a318:	4603      	mov	r3, r0
 800a31a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d12b      	bne.n	800a37a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d105      	bne.n	800a334 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a328:	783b      	ldrb	r3, [r7, #0]
 800a32a:	4619      	mov	r1, r3
 800a32c:	68b8      	ldr	r0, [r7, #8]
 800a32e:	f000 fa69 	bl	800a804 <FLASH_Program_Byte>
 800a332:	e016      	b.n	800a362 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d105      	bne.n	800a346 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a33a:	883b      	ldrh	r3, [r7, #0]
 800a33c:	4619      	mov	r1, r3
 800a33e:	68b8      	ldr	r0, [r7, #8]
 800a340:	f000 fa3c 	bl	800a7bc <FLASH_Program_HalfWord>
 800a344:	e00d      	b.n	800a362 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d105      	bne.n	800a358 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	4619      	mov	r1, r3
 800a350:	68b8      	ldr	r0, [r7, #8]
 800a352:	f000 fa11 	bl	800a778 <FLASH_Program_Word>
 800a356:	e004      	b.n	800a362 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a35c:	68b8      	ldr	r0, [r7, #8]
 800a35e:	f000 f9d9 	bl	800a714 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a362:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a366:	f000 f995 	bl	800a694 <FLASH_WaitForLastOperation>
 800a36a:	4603      	mov	r3, r0
 800a36c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a36e:	4b08      	ldr	r3, [pc, #32]	; (800a390 <HAL_FLASH_Program+0xa4>)
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	4a07      	ldr	r2, [pc, #28]	; (800a390 <HAL_FLASH_Program+0xa4>)
 800a374:	f023 0301 	bic.w	r3, r3, #1
 800a378:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a37a:	4b04      	ldr	r3, [pc, #16]	; (800a38c <HAL_FLASH_Program+0xa0>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200009f0 	.word	0x200009f0
 800a390:	40023c00 	.word	0x40023c00

0800a394 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a3a6:	4b20      	ldr	r3, [pc, #128]	; (800a428 <HAL_FLASH_Program_IT+0x94>)
 800a3a8:	7e1b      	ldrb	r3, [r3, #24]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_FLASH_Program_IT+0x1e>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e035      	b.n	800a41e <HAL_FLASH_Program_IT+0x8a>
 800a3b2:	4b1d      	ldr	r3, [pc, #116]	; (800a428 <HAL_FLASH_Program_IT+0x94>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a3b8:	4b1c      	ldr	r3, [pc, #112]	; (800a42c <HAL_FLASH_Program_IT+0x98>)
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	4a1b      	ldr	r2, [pc, #108]	; (800a42c <HAL_FLASH_Program_IT+0x98>)
 800a3be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3c2:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a3c4:	4b19      	ldr	r3, [pc, #100]	; (800a42c <HAL_FLASH_Program_IT+0x98>)
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	4a18      	ldr	r2, [pc, #96]	; (800a42c <HAL_FLASH_Program_IT+0x98>)
 800a3ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3ce:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800a3d0:	4b15      	ldr	r3, [pc, #84]	; (800a428 <HAL_FLASH_Program_IT+0x94>)
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 800a3d6:	4a14      	ldr	r2, [pc, #80]	; (800a428 <HAL_FLASH_Program_IT+0x94>)
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d105      	bne.n	800a3ee <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a3e2:	783b      	ldrb	r3, [r7, #0]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	68b8      	ldr	r0, [r7, #8]
 800a3e8:	f000 fa0c 	bl	800a804 <FLASH_Program_Byte>
 800a3ec:	e016      	b.n	800a41c <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d105      	bne.n	800a400 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a3f4:	883b      	ldrh	r3, [r7, #0]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	68b8      	ldr	r0, [r7, #8]
 800a3fa:	f000 f9df 	bl	800a7bc <FLASH_Program_HalfWord>
 800a3fe:	e00d      	b.n	800a41c <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d105      	bne.n	800a412 <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	68b8      	ldr	r0, [r7, #8]
 800a40c:	f000 f9b4 	bl	800a778 <FLASH_Program_Word>
 800a410:	e004      	b.n	800a41c <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a416:	68b8      	ldr	r0, [r7, #8]
 800a418:	f000 f97c 	bl	800a714 <FLASH_Program_DoubleWord>
  }

  return status;
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	200009f0 	.word	0x200009f0
 800a42c:	40023c00 	.word	0x40023c00

0800a430 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a43a:	4b4b      	ldr	r3, [pc, #300]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d020      	beq.n	800a488 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a446:	4b49      	ldr	r3, [pc, #292]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d107      	bne.n	800a460 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a450:	4b46      	ldr	r3, [pc, #280]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a456:	4b45      	ldr	r3, [pc, #276]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	60da      	str	r2, [r3, #12]
 800a45e:	e00b      	b.n	800a478 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a460:	4b42      	ldr	r3, [pc, #264]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d103      	bne.n	800a472 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a46a:	4b40      	ldr	r3, [pc, #256]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	607b      	str	r3, [r7, #4]
 800a470:	e002      	b.n	800a478 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a472:	4b3e      	ldr	r3, [pc, #248]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a478:	f000 f9e6 	bl	800a848 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f881 	bl	800a584 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a482:	4b3a      	ldr	r3, [pc, #232]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a488:	4b37      	ldr	r3, [pc, #220]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d04a      	beq.n	800a52a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a494:	4b34      	ldr	r3, [pc, #208]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a496:	2201      	movs	r2, #1
 800a498:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a49a:	4b34      	ldr	r3, [pc, #208]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d12d      	bne.n	800a500 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a4a4:	4b31      	ldr	r3, [pc, #196]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	4a30      	ldr	r2, [pc, #192]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4ac:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a4ae:	4b2f      	ldr	r3, [pc, #188]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d015      	beq.n	800a4e2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a4b6:	4b2d      	ldr	r3, [pc, #180]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f857 	bl	800a570 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a4c2:	4b2a      	ldr	r3, [pc, #168]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	4a28      	ldr	r2, [pc, #160]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4ca:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a4cc:	4b27      	ldr	r3, [pc, #156]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a4d2:	4b26      	ldr	r3, [pc, #152]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4d4:	7a1b      	ldrb	r3, [r3, #8]
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb84 	bl	800abe8 <FLASH_Erase_Sector>
 800a4e0:	e023      	b.n	800a52a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	4a20      	ldr	r2, [pc, #128]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a4ee:	4b1f      	ldr	r3, [pc, #124]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a4f4:	f000 fcb6 	bl	800ae64 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f839 	bl	800a570 <HAL_FLASH_EndOfOperationCallback>
 800a4fe:	e014      	b.n	800a52a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a500:	4b1a      	ldr	r3, [pc, #104]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b02      	cmp	r3, #2
 800a508:	d107      	bne.n	800a51a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a50a:	f000 fcab 	bl	800ae64 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a50e:	4b17      	ldr	r3, [pc, #92]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f82c 	bl	800a570 <HAL_FLASH_EndOfOperationCallback>
 800a518:	e004      	b.n	800a524 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a51a:	4b14      	ldr	r3, [pc, #80]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 f826 	bl	800a570 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a524:	4b11      	ldr	r3, [pc, #68]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	d114      	bne.n	800a55e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a534:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	4a0b      	ldr	r2, [pc, #44]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a53a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a53e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a540:	4b09      	ldr	r3, [pc, #36]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	4a08      	ldr	r2, [pc, #32]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a54a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	4a05      	ldr	r2, [pc, #20]	; (800a568 <HAL_FLASH_IRQHandler+0x138>)
 800a552:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a556:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <HAL_FLASH_IRQHandler+0x13c>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	761a      	strb	r2, [r3, #24]
  }
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	40023c00 	.word	0x40023c00
 800a56c:	200009f0 	.word	0x200009f0

0800a570 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_FLASH_Unlock+0x38>)
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da0b      	bge.n	800a5c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a5aa:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <HAL_FLASH_Unlock+0x38>)
 800a5ac:	4a09      	ldr	r2, [pc, #36]	; (800a5d4 <HAL_FLASH_Unlock+0x3c>)
 800a5ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a5b0:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <HAL_FLASH_Unlock+0x38>)
 800a5b2:	4a09      	ldr	r2, [pc, #36]	; (800a5d8 <HAL_FLASH_Unlock+0x40>)
 800a5b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a5b6:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <HAL_FLASH_Unlock+0x38>)
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	da01      	bge.n	800a5c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	40023c00 	.word	0x40023c00
 800a5d4:	45670123 	.word	0x45670123
 800a5d8:	cdef89ab 	.word	0xcdef89ab

0800a5dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a5e0:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <HAL_FLASH_Lock+0x1c>)
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	4a04      	ldr	r2, [pc, #16]	; (800a5f8 <HAL_FLASH_Lock+0x1c>)
 800a5e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	40023c00 	.word	0x40023c00

0800a5fc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a600:	4b09      	ldr	r3, [pc, #36]	; (800a628 <HAL_FLASH_OB_Unlock+0x2c>)
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <HAL_FLASH_OB_Unlock+0x2c>)
 800a60e:	4a07      	ldr	r2, [pc, #28]	; (800a62c <HAL_FLASH_OB_Unlock+0x30>)
 800a610:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a612:	4b05      	ldr	r3, [pc, #20]	; (800a628 <HAL_FLASH_OB_Unlock+0x2c>)
 800a614:	4a06      	ldr	r2, [pc, #24]	; (800a630 <HAL_FLASH_OB_Unlock+0x34>)
 800a616:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a618:	2300      	movs	r3, #0
 800a61a:	e000      	b.n	800a61e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
}
 800a61e:	4618      	mov	r0, r3
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	40023c00 	.word	0x40023c00
 800a62c:	08192a3b 	.word	0x08192a3b
 800a630:	4c5d6e7f 	.word	0x4c5d6e7f

0800a634 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a634:	b480      	push	{r7}
 800a636:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <HAL_FLASH_OB_Lock+0x1c>)
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	4a04      	ldr	r2, [pc, #16]	; (800a650 <HAL_FLASH_OB_Lock+0x1c>)
 800a63e:	f043 0301 	orr.w	r3, r3, #1
 800a642:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	40023c00 	.word	0x40023c00

0800a654 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a658:	4b07      	ldr	r3, [pc, #28]	; (800a678 <HAL_FLASH_OB_Launch+0x24>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	4a06      	ldr	r2, [pc, #24]	; (800a678 <HAL_FLASH_OB_Launch+0x24>)
 800a660:	f043 0302 	orr.w	r3, r3, #2
 800a664:	b2db      	uxtb	r3, r3
 800a666:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a668:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a66c:	f000 f812 	bl	800a694 <FLASH_WaitForLastOperation>
 800a670:	4603      	mov	r3, r0
}
 800a672:	4618      	mov	r0, r3
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	40023c14 	.word	0x40023c14

0800a67c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a67c:	b480      	push	{r7}
 800a67e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a680:	4b03      	ldr	r3, [pc, #12]	; (800a690 <HAL_FLASH_GetError+0x14>)
 800a682:	69db      	ldr	r3, [r3, #28]
}  
 800a684:	4618      	mov	r0, r3
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	200009f0 	.word	0x200009f0

0800a694 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a6a0:	4b1a      	ldr	r3, [pc, #104]	; (800a70c <FLASH_WaitForLastOperation+0x78>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a6a6:	f7fc fabb 	bl	8006c20 <HAL_GetTick>
 800a6aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a6ac:	e010      	b.n	800a6d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b4:	d00c      	beq.n	800a6d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <FLASH_WaitForLastOperation+0x38>
 800a6bc:	f7fc fab0 	bl	8006c20 <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d201      	bcs.n	800a6d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e019      	b.n	800a704 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a6d0:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <FLASH_WaitForLastOperation+0x7c>)
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e8      	bne.n	800a6ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a6dc:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <FLASH_WaitForLastOperation+0x7c>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a6e8:	4b09      	ldr	r3, [pc, #36]	; (800a710 <FLASH_WaitForLastOperation+0x7c>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a6ee:	4b08      	ldr	r3, [pc, #32]	; (800a710 <FLASH_WaitForLastOperation+0x7c>)
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a6fa:	f000 f8a5 	bl	800a848 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a702:	2300      	movs	r3, #0
  
}  
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	200009f0 	.word	0x200009f0
 800a710:	40023c00 	.word	0x40023c00

0800a714 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a720:	4b14      	ldr	r3, [pc, #80]	; (800a774 <FLASH_Program_DoubleWord+0x60>)
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	4a13      	ldr	r2, [pc, #76]	; (800a774 <FLASH_Program_DoubleWord+0x60>)
 800a726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a72a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a72c:	4b11      	ldr	r3, [pc, #68]	; (800a774 <FLASH_Program_DoubleWord+0x60>)
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	4a10      	ldr	r2, [pc, #64]	; (800a774 <FLASH_Program_DoubleWord+0x60>)
 800a732:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a736:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a738:	4b0e      	ldr	r3, [pc, #56]	; (800a774 <FLASH_Program_DoubleWord+0x60>)
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	4a0d      	ldr	r2, [pc, #52]	; (800a774 <FLASH_Program_DoubleWord+0x60>)
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a74a:	f3bf 8f6f 	isb	sy
}
 800a74e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a750:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a754:	f04f 0200 	mov.w	r2, #0
 800a758:	f04f 0300 	mov.w	r3, #0
 800a75c:	000a      	movs	r2, r1
 800a75e:	2300      	movs	r3, #0
 800a760:	68f9      	ldr	r1, [r7, #12]
 800a762:	3104      	adds	r1, #4
 800a764:	4613      	mov	r3, r2
 800a766:	600b      	str	r3, [r1, #0]
}
 800a768:	bf00      	nop
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	40023c00 	.word	0x40023c00

0800a778 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a782:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <FLASH_Program_Word+0x40>)
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	4a0c      	ldr	r2, [pc, #48]	; (800a7b8 <FLASH_Program_Word+0x40>)
 800a788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a78e:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <FLASH_Program_Word+0x40>)
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <FLASH_Program_Word+0x40>)
 800a794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a798:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a79a:	4b07      	ldr	r3, [pc, #28]	; (800a7b8 <FLASH_Program_Word+0x40>)
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	4a06      	ldr	r2, [pc, #24]	; (800a7b8 <FLASH_Program_Word+0x40>)
 800a7a0:	f043 0301 	orr.w	r3, r3, #1
 800a7a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	601a      	str	r2, [r3, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	40023c00 	.word	0x40023c00

0800a7bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a7c8:	4b0d      	ldr	r3, [pc, #52]	; (800a800 <FLASH_Program_HalfWord+0x44>)
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	4a0c      	ldr	r2, [pc, #48]	; (800a800 <FLASH_Program_HalfWord+0x44>)
 800a7ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a7d4:	4b0a      	ldr	r3, [pc, #40]	; (800a800 <FLASH_Program_HalfWord+0x44>)
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <FLASH_Program_HalfWord+0x44>)
 800a7da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a7e0:	4b07      	ldr	r3, [pc, #28]	; (800a800 <FLASH_Program_HalfWord+0x44>)
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	4a06      	ldr	r2, [pc, #24]	; (800a800 <FLASH_Program_HalfWord+0x44>)
 800a7e6:	f043 0301 	orr.w	r3, r3, #1
 800a7ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	887a      	ldrh	r2, [r7, #2]
 800a7f0:	801a      	strh	r2, [r3, #0]
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40023c00 	.word	0x40023c00

0800a804 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a810:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <FLASH_Program_Byte+0x40>)
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	4a0b      	ldr	r2, [pc, #44]	; (800a844 <FLASH_Program_Byte+0x40>)
 800a816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a81a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a81c:	4b09      	ldr	r3, [pc, #36]	; (800a844 <FLASH_Program_Byte+0x40>)
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <FLASH_Program_Byte+0x40>)
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <FLASH_Program_Byte+0x40>)
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	4a06      	ldr	r2, [pc, #24]	; (800a844 <FLASH_Program_Byte+0x40>)
 800a82a:	f043 0301 	orr.w	r3, r3, #1
 800a82e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	78fa      	ldrb	r2, [r7, #3]
 800a834:	701a      	strb	r2, [r3, #0]
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	40023c00 	.word	0x40023c00

0800a848 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a84c:	4b27      	ldr	r3, [pc, #156]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0310 	and.w	r3, r3, #16
 800a854:	2b00      	cmp	r3, #0
 800a856:	d008      	beq.n	800a86a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a858:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f043 0310 	orr.w	r3, r3, #16
 800a860:	4a23      	ldr	r2, [pc, #140]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a862:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a864:	4b21      	ldr	r3, [pc, #132]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a866:	2210      	movs	r2, #16
 800a868:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a86a:	4b20      	ldr	r3, [pc, #128]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d008      	beq.n	800a888 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a876:	4b1e      	ldr	r3, [pc, #120]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	f043 0308 	orr.w	r3, r3, #8
 800a87e:	4a1c      	ldr	r2, [pc, #112]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a880:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a882:	4b1a      	ldr	r3, [pc, #104]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a884:	2220      	movs	r2, #32
 800a886:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a888:	4b18      	ldr	r3, [pc, #96]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a894:	4b16      	ldr	r3, [pc, #88]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	f043 0304 	orr.w	r3, r3, #4
 800a89c:	4a14      	ldr	r2, [pc, #80]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a89e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a8a0:	4b12      	ldr	r3, [pc, #72]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a8a2:	2240      	movs	r2, #64	; 0x40
 800a8a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a8a6:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f043 0302 	orr.w	r3, r3, #2
 800a8ba:	4a0d      	ldr	r2, [pc, #52]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a8bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a8be:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a8c0:	2280      	movs	r2, #128	; 0x80
 800a8c2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a8c4:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f003 0302 	and.w	r3, r3, #2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	f043 0320 	orr.w	r3, r3, #32
 800a8d8:	4a05      	ldr	r2, [pc, #20]	; (800a8f0 <FLASH_SetErrorCode+0xa8>)
 800a8da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a8dc:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <FLASH_SetErrorCode+0xa4>)
 800a8de:	2202      	movs	r2, #2
 800a8e0:	60da      	str	r2, [r3, #12]
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	40023c00 	.word	0x40023c00
 800a8f0:	200009f0 	.word	0x200009f0

0800a8f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a906:	4b31      	ldr	r3, [pc, #196]	; (800a9cc <HAL_FLASHEx_Erase+0xd8>)
 800a908:	7e1b      	ldrb	r3, [r3, #24]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_FLASHEx_Erase+0x1e>
 800a90e:	2302      	movs	r3, #2
 800a910:	e058      	b.n	800a9c4 <HAL_FLASHEx_Erase+0xd0>
 800a912:	4b2e      	ldr	r3, [pc, #184]	; (800a9cc <HAL_FLASHEx_Erase+0xd8>)
 800a914:	2201      	movs	r2, #1
 800a916:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a91c:	f7ff feba 	bl	800a694 <FLASH_WaitForLastOperation>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d148      	bne.n	800a9bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	f04f 32ff 	mov.w	r2, #4294967295
 800a930:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d115      	bne.n	800a966 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	f000 f92b 	bl	800aba2 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a94c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a950:	f7ff fea0 	bl	800a694 <FLASH_WaitForLastOperation>
 800a954:	4603      	mov	r3, r0
 800a956:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a958:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <HAL_FLASHEx_Erase+0xdc>)
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	4a1c      	ldr	r2, [pc, #112]	; (800a9d0 <HAL_FLASHEx_Erase+0xdc>)
 800a95e:	f023 0304 	bic.w	r3, r3, #4
 800a962:	6113      	str	r3, [r2, #16]
 800a964:	e028      	b.n	800a9b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	60bb      	str	r3, [r7, #8]
 800a96c:	e01c      	b.n	800a9a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	4619      	mov	r1, r3
 800a976:	68b8      	ldr	r0, [r7, #8]
 800a978:	f000 f936 	bl	800abe8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a97c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a980:	f7ff fe88 	bl	800a694 <FLASH_WaitForLastOperation>
 800a984:	4603      	mov	r3, r0
 800a986:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a988:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <HAL_FLASHEx_Erase+0xdc>)
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	4a10      	ldr	r2, [pc, #64]	; (800a9d0 <HAL_FLASHEx_Erase+0xdc>)
 800a98e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a992:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	601a      	str	r2, [r3, #0]
          break;
 800a9a0:	e00a      	b.n	800a9b8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	60bb      	str	r3, [r7, #8]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d3da      	bcc.n	800a96e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a9b8:	f000 fa54 	bl	800ae64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a9bc:	4b03      	ldr	r3, [pc, #12]	; (800a9cc <HAL_FLASHEx_Erase+0xd8>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	761a      	strb	r2, [r3, #24]

  return status;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	200009f0 	.word	0x200009f0
 800a9d0:	40023c00 	.word	0x40023c00

0800a9d4 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a9e0:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a9e2:	7e1b      	ldrb	r3, [r3, #24]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_FLASHEx_Erase_IT+0x18>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e040      	b.n	800aa6e <HAL_FLASHEx_Erase_IT+0x9a>
 800a9ec:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a9f2:	4b22      	ldr	r3, [pc, #136]	; (800aa7c <HAL_FLASHEx_Erase_IT+0xa8>)
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	4a21      	ldr	r2, [pc, #132]	; (800aa7c <HAL_FLASHEx_Erase_IT+0xa8>)
 800a9f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9fc:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a9fe:	4b1f      	ldr	r3, [pc, #124]	; (800aa7c <HAL_FLASHEx_Erase_IT+0xa8>)
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	4a1e      	ldr	r2, [pc, #120]	; (800aa7c <HAL_FLASHEx_Erase_IT+0xa8>)
 800aa04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aa08:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800aa0a:	4b1c      	ldr	r3, [pc, #112]	; (800aa7c <HAL_FLASHEx_Erase_IT+0xa8>)
 800aa0c:	22f3      	movs	r2, #243	; 0xf3
 800aa0e:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d110      	bne.n	800aa3a <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800aa18:	4b17      	ldr	r3, [pc, #92]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	4a15      	ldr	r2, [pc, #84]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800aa24:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f000 f8b5 	bl	800aba2 <FLASH_MassErase>
 800aa38:	e018      	b.n	800aa6c <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	4a0c      	ldr	r2, [pc, #48]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800aa46:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	4a0a      	ldr	r2, [pc, #40]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800aa4e:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <HAL_FLASHEx_Erase_IT+0xa4>)
 800aa58:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f000 f8be 	bl	800abe8 <FLASH_Erase_Sector>
  }

  return status;
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200009f0 	.word	0x200009f0
 800aa7c:	40023c00 	.word	0x40023c00

0800aa80 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa8c:	4b32      	ldr	r3, [pc, #200]	; (800ab58 <HAL_FLASHEx_OBProgram+0xd8>)
 800aa8e:	7e1b      	ldrb	r3, [r3, #24]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_FLASHEx_OBProgram+0x18>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e05b      	b.n	800ab50 <HAL_FLASHEx_OBProgram+0xd0>
 800aa98:	4b2f      	ldr	r3, [pc, #188]	; (800ab58 <HAL_FLASHEx_OBProgram+0xd8>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d018      	beq.n	800aadc <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d10a      	bne.n	800aac8 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	4619      	mov	r1, r3
 800aabc:	4610      	mov	r0, r2
 800aabe:	f000 f8db 	bl	800ac78 <FLASH_OB_EnableWRP>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]
 800aac6:	e009      	b.n	800aadc <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f000 f8f2 	bl	800acbc <FLASH_OB_DisableWRP>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0302 	and.w	r3, r3, #2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f904 	bl	800acfc <FLASH_OB_RDP_LevelConfig>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d013      	beq.n	800ab2c <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7e1b      	ldrb	r3, [r3, #24]
 800ab08:	f003 0320 	and.w	r3, r3, #32
 800ab0c:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ab12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab16:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ab1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	f000 f904 	bl	800ad30 <FLASH_OB_UserConfig>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 0308 	and.w	r3, r3, #8
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f926 	bl	800ad90 <FLASH_OB_BOR_LevelConfig>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <HAL_FLASHEx_OBProgram+0xd8>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	761a      	strb	r2, [r3, #24]

  return status;
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	200009f0 	.word	0x200009f0

0800ab5c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	220f      	movs	r2, #15
 800ab68:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800ab6a:	f000 f93f 	bl	800adec <FLASH_OB_GetWRP>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	461a      	mov	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800ab76:	f000 f945 	bl	800ae04 <FLASH_OB_GetRDP>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800ab82:	f000 f923 	bl	800adcc <FLASH_OB_GetUser>
 800ab86:	4603      	mov	r3, r0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800ab8e:	f000 f959 	bl	800ae44 <FLASH_OB_GetBOR>
 800ab92:	4603      	mov	r3, r0
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	615a      	str	r2, [r3, #20]
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	4603      	mov	r3, r0
 800abaa:	6039      	str	r1, [r7, #0]
 800abac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800abae:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <FLASH_MassErase+0x42>)
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	4a0c      	ldr	r2, [pc, #48]	; (800abe4 <FLASH_MassErase+0x42>)
 800abb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800abba:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <FLASH_MassErase+0x42>)
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	4a09      	ldr	r2, [pc, #36]	; (800abe4 <FLASH_MassErase+0x42>)
 800abc0:	f043 0304 	orr.w	r3, r3, #4
 800abc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800abc6:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <FLASH_MassErase+0x42>)
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	79fb      	ldrb	r3, [r7, #7]
 800abcc:	021b      	lsls	r3, r3, #8
 800abce:	4313      	orrs	r3, r2
 800abd0:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <FLASH_MassErase+0x42>)
 800abd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abd6:	6113      	str	r3, [r2, #16]
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	40023c00 	.word	0x40023c00

0800abe8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800abf8:	78fb      	ldrb	r3, [r7, #3]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e010      	b.n	800ac26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d103      	bne.n	800ac12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ac0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e009      	b.n	800ac26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ac12:	78fb      	ldrb	r3, [r7, #3]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d103      	bne.n	800ac20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ac18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	e002      	b.n	800ac26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ac20:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac26:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	4a12      	ldr	r2, [pc, #72]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ac32:	4b10      	ldr	r3, [pc, #64]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac34:	691a      	ldr	r2, [r3, #16]
 800ac36:	490f      	ldr	r1, [pc, #60]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	4a0c      	ldr	r2, [pc, #48]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ac48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ac4a:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac4c:	691a      	ldr	r2, [r3, #16]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	4313      	orrs	r3, r2
 800ac54:	4a07      	ldr	r2, [pc, #28]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac56:	f043 0302 	orr.w	r3, r3, #2
 800ac5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ac5c:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	4a04      	ldr	r2, [pc, #16]	; (800ac74 <FLASH_Erase_Sector+0x8c>)
 800ac62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac66:	6113      	str	r3, [r2, #16]
}
 800ac68:	bf00      	nop
 800ac6a:	3714      	adds	r7, #20
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	40023c00 	.word	0x40023c00

0800ac78 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac86:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac8a:	f7ff fd03 	bl	800a694 <FLASH_WaitForLastOperation>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10a      	bne.n	800acae <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800ac98:	4b07      	ldr	r3, [pc, #28]	; (800acb8 <FLASH_OB_EnableWRP+0x40>)
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	43db      	mvns	r3, r3
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	4904      	ldr	r1, [pc, #16]	; (800acb8 <FLASH_OB_EnableWRP+0x40>)
 800aca8:	4013      	ands	r3, r2
 800acaa:	b29b      	uxth	r3, r3
 800acac:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800acae:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	40023c16 	.word	0x40023c16

0800acbc <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800acca:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acce:	f7ff fce1 	bl	800a694 <FLASH_WaitForLastOperation>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d108      	bne.n	800acee <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800acdc:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <FLASH_OB_DisableWRP+0x3c>)
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4904      	ldr	r1, [pc, #16]	; (800acf8 <FLASH_OB_DisableWRP+0x3c>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	b29b      	uxth	r3, r3
 800acec:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800acee:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40023c16 	.word	0x40023c16

0800acfc <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ad0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad0e:	f7ff fcc1 	bl	800a694 <FLASH_WaitForLastOperation>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800ad1c:	4a03      	ldr	r2, [pc, #12]	; (800ad2c <FLASH_OB_RDP_LevelConfig+0x30>)
 800ad1e:	79fb      	ldrb	r3, [r7, #7]
 800ad20:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	40023c15 	.word	0x40023c15

0800ad30 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	71fb      	strb	r3, [r7, #7]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	71bb      	strb	r3, [r7, #6]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800ad42:	23ff      	movs	r3, #255	; 0xff
 800ad44:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ad4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad4e:	f7ff fca1 	bl	800a694 <FLASH_WaitForLastOperation>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d111      	bne.n	800ad80 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800ad5c:	4b0b      	ldr	r3, [pc, #44]	; (800ad8c <FLASH_OB_UserConfig+0x5c>)
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800ad68:	79ba      	ldrb	r2, [r7, #6]
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	797b      	ldrb	r3, [r7, #5]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	4905      	ldr	r1, [pc, #20]	; (800ad8c <FLASH_OB_UserConfig+0x5c>)
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	40023c14 	.word	0x40023c14

0800ad90 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800ad9a:	4b0b      	ldr	r3, [pc, #44]	; (800adc8 <FLASH_OB_BOR_LevelConfig+0x38>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	4a09      	ldr	r2, [pc, #36]	; (800adc8 <FLASH_OB_BOR_LevelConfig+0x38>)
 800ada2:	f023 030c 	bic.w	r3, r3, #12
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800adaa:	4b07      	ldr	r3, [pc, #28]	; (800adc8 <FLASH_OB_BOR_LevelConfig+0x38>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	4905      	ldr	r1, [pc, #20]	; (800adc8 <FLASH_OB_BOR_LevelConfig+0x38>)
 800adb2:	79fb      	ldrb	r3, [r7, #7]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800adba:	2300      	movs	r3, #0

}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	40023c14 	.word	0x40023c14

0800adcc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800add0:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <FLASH_OB_GetUser+0x1c>)
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	f023 031f 	bic.w	r3, r3, #31
 800adda:	b2db      	uxtb	r3, r3
}
 800addc:	4618      	mov	r0, r3
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	40023c00 	.word	0x40023c00

0800adec <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800adf0:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <FLASH_OB_GetWRP+0x14>)
 800adf2:	881b      	ldrh	r3, [r3, #0]
 800adf4:	b29b      	uxth	r3, r3
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	40023c16 	.word	0x40023c16

0800ae04 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800ae0a:	23aa      	movs	r3, #170	; 0xaa
 800ae0c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	; (800ae40 <FLASH_OB_GetRDP+0x3c>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2bcc      	cmp	r3, #204	; 0xcc
 800ae16:	d102      	bne.n	800ae1e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800ae18:	23cc      	movs	r3, #204	; 0xcc
 800ae1a:	71fb      	strb	r3, [r7, #7]
 800ae1c:	e009      	b.n	800ae32 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800ae1e:	4b08      	ldr	r3, [pc, #32]	; (800ae40 <FLASH_OB_GetRDP+0x3c>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2baa      	cmp	r3, #170	; 0xaa
 800ae26:	d102      	bne.n	800ae2e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800ae28:	23aa      	movs	r3, #170	; 0xaa
 800ae2a:	71fb      	strb	r3, [r7, #7]
 800ae2c:	e001      	b.n	800ae32 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800ae2e:	2355      	movs	r3, #85	; 0x55
 800ae30:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800ae32:	79fb      	ldrb	r3, [r7, #7]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	40023c15 	.word	0x40023c15

0800ae44 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800ae44:	b480      	push	{r7}
 800ae46:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800ae48:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <FLASH_OB_GetBOR+0x1c>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	f003 030c 	and.w	r3, r3, #12
 800ae52:	b2db      	uxtb	r3, r3
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	40023c14 	.word	0x40023c14

0800ae64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ae64:	b480      	push	{r7}
 800ae66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800ae68:	4b20      	ldr	r3, [pc, #128]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d017      	beq.n	800aea4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ae74:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a1c      	ldr	r2, [pc, #112]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ae80:	4b1a      	ldr	r3, [pc, #104]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a19      	ldr	r2, [pc, #100]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	4b17      	ldr	r3, [pc, #92]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a16      	ldr	r2, [pc, #88]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ae98:	4b14      	ldr	r3, [pc, #80]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a13      	ldr	r2, [pc, #76]	; (800aeec <FLASH_FlushCaches+0x88>)
 800ae9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aea2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800aea4:	4b11      	ldr	r3, [pc, #68]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d017      	beq.n	800aee0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a0d      	ldr	r2, [pc, #52]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aeb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aeba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800aebc:	4b0b      	ldr	r3, [pc, #44]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	4b08      	ldr	r3, [pc, #32]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a07      	ldr	r2, [pc, #28]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aed2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a04      	ldr	r2, [pc, #16]	; (800aeec <FLASH_FlushCaches+0x88>)
 800aeda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aede:	6013      	str	r3, [r2, #0]
  }
}
 800aee0:	bf00      	nop
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40023c00 	.word	0x40023c00

0800aef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b089      	sub	sp, #36	; 0x24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aefe:	2300      	movs	r3, #0
 800af00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af02:	2300      	movs	r3, #0
 800af04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
 800af0a:	e16b      	b.n	800b1e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af0c:	2201      	movs	r2, #1
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	fa02 f303 	lsl.w	r3, r2, r3
 800af14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4013      	ands	r3, r2
 800af1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	429a      	cmp	r2, r3
 800af26:	f040 815a 	bne.w	800b1de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f003 0303 	and.w	r3, r3, #3
 800af32:	2b01      	cmp	r3, #1
 800af34:	d005      	beq.n	800af42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d130      	bne.n	800afa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	2203      	movs	r2, #3
 800af4e:	fa02 f303 	lsl.w	r3, r2, r3
 800af52:	43db      	mvns	r3, r3
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	4013      	ands	r3, r2
 800af58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	fa02 f303 	lsl.w	r3, r2, r3
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	4313      	orrs	r3, r2
 800af6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af78:	2201      	movs	r2, #1
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	fa02 f303 	lsl.w	r3, r2, r3
 800af80:	43db      	mvns	r3, r3
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	4013      	ands	r3, r2
 800af86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	091b      	lsrs	r3, r3, #4
 800af8e:	f003 0201 	and.w	r2, r3, #1
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	fa02 f303 	lsl.w	r3, r2, r3
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	f003 0303 	and.w	r3, r3, #3
 800afac:	2b03      	cmp	r3, #3
 800afae:	d017      	beq.n	800afe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	2203      	movs	r2, #3
 800afbc:	fa02 f303 	lsl.w	r3, r2, r3
 800afc0:	43db      	mvns	r3, r3
 800afc2:	69ba      	ldr	r2, [r7, #24]
 800afc4:	4013      	ands	r3, r2
 800afc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	fa02 f303 	lsl.w	r3, r2, r3
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f003 0303 	and.w	r3, r3, #3
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d123      	bne.n	800b034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	08da      	lsrs	r2, r3, #3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3208      	adds	r2, #8
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	220f      	movs	r2, #15
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	43db      	mvns	r3, r3
 800b00a:	69ba      	ldr	r2, [r7, #24]
 800b00c:	4013      	ands	r3, r2
 800b00e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	691a      	ldr	r2, [r3, #16]
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	fa02 f303 	lsl.w	r3, r2, r3
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	4313      	orrs	r3, r2
 800b024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	08da      	lsrs	r2, r3, #3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3208      	adds	r2, #8
 800b02e:	69b9      	ldr	r1, [r7, #24]
 800b030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	2203      	movs	r2, #3
 800b040:	fa02 f303 	lsl.w	r3, r2, r3
 800b044:	43db      	mvns	r3, r3
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	4013      	ands	r3, r2
 800b04a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f003 0203 	and.w	r2, r3, #3
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	fa02 f303 	lsl.w	r3, r2, r3
 800b05c:	69ba      	ldr	r2, [r7, #24]
 800b05e:	4313      	orrs	r3, r2
 800b060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 80b4 	beq.w	800b1de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	4b60      	ldr	r3, [pc, #384]	; (800b1fc <HAL_GPIO_Init+0x30c>)
 800b07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07e:	4a5f      	ldr	r2, [pc, #380]	; (800b1fc <HAL_GPIO_Init+0x30c>)
 800b080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b084:	6453      	str	r3, [r2, #68]	; 0x44
 800b086:	4b5d      	ldr	r3, [pc, #372]	; (800b1fc <HAL_GPIO_Init+0x30c>)
 800b088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b092:	4a5b      	ldr	r2, [pc, #364]	; (800b200 <HAL_GPIO_Init+0x310>)
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	089b      	lsrs	r3, r3, #2
 800b098:	3302      	adds	r3, #2
 800b09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b09e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	220f      	movs	r2, #15
 800b0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ae:	43db      	mvns	r3, r3
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a52      	ldr	r2, [pc, #328]	; (800b204 <HAL_GPIO_Init+0x314>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d02b      	beq.n	800b116 <HAL_GPIO_Init+0x226>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a51      	ldr	r2, [pc, #324]	; (800b208 <HAL_GPIO_Init+0x318>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d025      	beq.n	800b112 <HAL_GPIO_Init+0x222>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a50      	ldr	r2, [pc, #320]	; (800b20c <HAL_GPIO_Init+0x31c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d01f      	beq.n	800b10e <HAL_GPIO_Init+0x21e>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a4f      	ldr	r2, [pc, #316]	; (800b210 <HAL_GPIO_Init+0x320>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d019      	beq.n	800b10a <HAL_GPIO_Init+0x21a>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a4e      	ldr	r2, [pc, #312]	; (800b214 <HAL_GPIO_Init+0x324>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d013      	beq.n	800b106 <HAL_GPIO_Init+0x216>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a4d      	ldr	r2, [pc, #308]	; (800b218 <HAL_GPIO_Init+0x328>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d00d      	beq.n	800b102 <HAL_GPIO_Init+0x212>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a4c      	ldr	r2, [pc, #304]	; (800b21c <HAL_GPIO_Init+0x32c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d007      	beq.n	800b0fe <HAL_GPIO_Init+0x20e>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a4b      	ldr	r2, [pc, #300]	; (800b220 <HAL_GPIO_Init+0x330>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d101      	bne.n	800b0fa <HAL_GPIO_Init+0x20a>
 800b0f6:	2307      	movs	r3, #7
 800b0f8:	e00e      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b0fa:	2308      	movs	r3, #8
 800b0fc:	e00c      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b0fe:	2306      	movs	r3, #6
 800b100:	e00a      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b102:	2305      	movs	r3, #5
 800b104:	e008      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b106:	2304      	movs	r3, #4
 800b108:	e006      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b10a:	2303      	movs	r3, #3
 800b10c:	e004      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b10e:	2302      	movs	r3, #2
 800b110:	e002      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b112:	2301      	movs	r3, #1
 800b114:	e000      	b.n	800b118 <HAL_GPIO_Init+0x228>
 800b116:	2300      	movs	r3, #0
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	f002 0203 	and.w	r2, r2, #3
 800b11e:	0092      	lsls	r2, r2, #2
 800b120:	4093      	lsls	r3, r2
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	4313      	orrs	r3, r2
 800b126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b128:	4935      	ldr	r1, [pc, #212]	; (800b200 <HAL_GPIO_Init+0x310>)
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	089b      	lsrs	r3, r3, #2
 800b12e:	3302      	adds	r3, #2
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b136:	4b3b      	ldr	r3, [pc, #236]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	43db      	mvns	r3, r3
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	4013      	ands	r3, r2
 800b144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	4313      	orrs	r3, r2
 800b158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b15a:	4a32      	ldr	r2, [pc, #200]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b160:	4b30      	ldr	r3, [pc, #192]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	43db      	mvns	r3, r3
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	4013      	ands	r3, r2
 800b16e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	4313      	orrs	r3, r2
 800b182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b184:	4a27      	ldr	r2, [pc, #156]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b18a:	4b26      	ldr	r3, [pc, #152]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	43db      	mvns	r3, r3
 800b194:	69ba      	ldr	r2, [r7, #24]
 800b196:	4013      	ands	r3, r2
 800b198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b1ae:	4a1d      	ldr	r2, [pc, #116]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	43db      	mvns	r3, r3
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b1d8:	4a12      	ldr	r2, [pc, #72]	; (800b224 <HAL_GPIO_Init+0x334>)
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	2b0f      	cmp	r3, #15
 800b1e8:	f67f ae90 	bls.w	800af0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	bf00      	nop
 800b1f0:	3724      	adds	r7, #36	; 0x24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	40023800 	.word	0x40023800
 800b200:	40013800 	.word	0x40013800
 800b204:	40020000 	.word	0x40020000
 800b208:	40020400 	.word	0x40020400
 800b20c:	40020800 	.word	0x40020800
 800b210:	40020c00 	.word	0x40020c00
 800b214:	40021000 	.word	0x40021000
 800b218:	40021400 	.word	0x40021400
 800b21c:	40021800 	.word	0x40021800
 800b220:	40021c00 	.word	0x40021c00
 800b224:	40013c00 	.word	0x40013c00

0800b228 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b232:	2300      	movs	r3, #0
 800b234:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	e0cd      	b.n	800b3e0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b244:	2201      	movs	r2, #1
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	fa02 f303 	lsl.w	r3, r2, r3
 800b24c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	4013      	ands	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	f040 80bd 	bne.w	800b3da <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b260:	4a65      	ldr	r2, [pc, #404]	; (800b3f8 <HAL_GPIO_DeInit+0x1d0>)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	089b      	lsrs	r3, r3, #2
 800b266:	3302      	adds	r3, #2
 800b268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f003 0303 	and.w	r3, r3, #3
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	220f      	movs	r2, #15
 800b278:	fa02 f303 	lsl.w	r3, r2, r3
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	4013      	ands	r3, r2
 800b280:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a5d      	ldr	r2, [pc, #372]	; (800b3fc <HAL_GPIO_DeInit+0x1d4>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d02b      	beq.n	800b2e2 <HAL_GPIO_DeInit+0xba>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a5c      	ldr	r2, [pc, #368]	; (800b400 <HAL_GPIO_DeInit+0x1d8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d025      	beq.n	800b2de <HAL_GPIO_DeInit+0xb6>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a5b      	ldr	r2, [pc, #364]	; (800b404 <HAL_GPIO_DeInit+0x1dc>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d01f      	beq.n	800b2da <HAL_GPIO_DeInit+0xb2>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a5a      	ldr	r2, [pc, #360]	; (800b408 <HAL_GPIO_DeInit+0x1e0>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d019      	beq.n	800b2d6 <HAL_GPIO_DeInit+0xae>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a59      	ldr	r2, [pc, #356]	; (800b40c <HAL_GPIO_DeInit+0x1e4>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d013      	beq.n	800b2d2 <HAL_GPIO_DeInit+0xaa>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a58      	ldr	r2, [pc, #352]	; (800b410 <HAL_GPIO_DeInit+0x1e8>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d00d      	beq.n	800b2ce <HAL_GPIO_DeInit+0xa6>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a57      	ldr	r2, [pc, #348]	; (800b414 <HAL_GPIO_DeInit+0x1ec>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d007      	beq.n	800b2ca <HAL_GPIO_DeInit+0xa2>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a56      	ldr	r2, [pc, #344]	; (800b418 <HAL_GPIO_DeInit+0x1f0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d101      	bne.n	800b2c6 <HAL_GPIO_DeInit+0x9e>
 800b2c2:	2307      	movs	r3, #7
 800b2c4:	e00e      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	e00c      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2ca:	2306      	movs	r3, #6
 800b2cc:	e00a      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2ce:	2305      	movs	r3, #5
 800b2d0:	e008      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2d2:	2304      	movs	r3, #4
 800b2d4:	e006      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e004      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2da:	2302      	movs	r3, #2
 800b2dc:	e002      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <HAL_GPIO_DeInit+0xbc>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	f002 0203 	and.w	r2, r2, #3
 800b2ea:	0092      	lsls	r2, r2, #2
 800b2ec:	4093      	lsls	r3, r2
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d132      	bne.n	800b35a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b2f4:	4b49      	ldr	r3, [pc, #292]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	43db      	mvns	r3, r3
 800b2fc:	4947      	ldr	r1, [pc, #284]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b2fe:	4013      	ands	r3, r2
 800b300:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b302:	4b46      	ldr	r3, [pc, #280]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	43db      	mvns	r3, r3
 800b30a:	4944      	ldr	r1, [pc, #272]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b30c:	4013      	ands	r3, r2
 800b30e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b310:	4b42      	ldr	r3, [pc, #264]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b312:	689a      	ldr	r2, [r3, #8]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	43db      	mvns	r3, r3
 800b318:	4940      	ldr	r1, [pc, #256]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b31a:	4013      	ands	r3, r2
 800b31c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b31e:	4b3f      	ldr	r3, [pc, #252]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	43db      	mvns	r3, r3
 800b326:	493d      	ldr	r1, [pc, #244]	; (800b41c <HAL_GPIO_DeInit+0x1f4>)
 800b328:	4013      	ands	r3, r2
 800b32a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	220f      	movs	r2, #15
 800b336:	fa02 f303 	lsl.w	r3, r2, r3
 800b33a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b33c:	4a2e      	ldr	r2, [pc, #184]	; (800b3f8 <HAL_GPIO_DeInit+0x1d0>)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	089b      	lsrs	r3, r3, #2
 800b342:	3302      	adds	r3, #2
 800b344:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	43da      	mvns	r2, r3
 800b34c:	482a      	ldr	r0, [pc, #168]	; (800b3f8 <HAL_GPIO_DeInit+0x1d0>)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	089b      	lsrs	r3, r3, #2
 800b352:	400a      	ands	r2, r1
 800b354:	3302      	adds	r3, #2
 800b356:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	2103      	movs	r1, #3
 800b364:	fa01 f303 	lsl.w	r3, r1, r3
 800b368:	43db      	mvns	r3, r3
 800b36a:	401a      	ands	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	08da      	lsrs	r2, r3, #3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3208      	adds	r2, #8
 800b378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f003 0307 	and.w	r3, r3, #7
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	220f      	movs	r2, #15
 800b386:	fa02 f303 	lsl.w	r3, r2, r3
 800b38a:	43db      	mvns	r3, r3
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	08d2      	lsrs	r2, r2, #3
 800b390:	4019      	ands	r1, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3208      	adds	r2, #8
 800b396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	2103      	movs	r1, #3
 800b3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3a8:	43db      	mvns	r3, r3
 800b3aa:	401a      	ands	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3bc:	43db      	mvns	r3, r3
 800b3be:	401a      	ands	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	005b      	lsls	r3, r3, #1
 800b3cc:	2103      	movs	r1, #3
 800b3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d2:	43db      	mvns	r3, r3
 800b3d4:	401a      	ands	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b0f      	cmp	r3, #15
 800b3e4:	f67f af2e 	bls.w	800b244 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	40013800 	.word	0x40013800
 800b3fc:	40020000 	.word	0x40020000
 800b400:	40020400 	.word	0x40020400
 800b404:	40020800 	.word	0x40020800
 800b408:	40020c00 	.word	0x40020c00
 800b40c:	40021000 	.word	0x40021000
 800b410:	40021400 	.word	0x40021400
 800b414:	40021800 	.word	0x40021800
 800b418:	40021c00 	.word	0x40021c00
 800b41c:	40013c00 	.word	0x40013c00

0800b420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	691a      	ldr	r2, [r3, #16]
 800b430:	887b      	ldrh	r3, [r7, #2]
 800b432:	4013      	ands	r3, r2
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b438:	2301      	movs	r3, #1
 800b43a:	73fb      	strb	r3, [r7, #15]
 800b43c:	e001      	b.n	800b442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	807b      	strh	r3, [r7, #2]
 800b45c:	4613      	mov	r3, r2
 800b45e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b460:	787b      	ldrb	r3, [r7, #1]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b466:	887a      	ldrh	r2, [r7, #2]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b46c:	e003      	b.n	800b476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b46e:	887b      	ldrh	r3, [r7, #2]
 800b470:	041a      	lsls	r2, r3, #16
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	619a      	str	r2, [r3, #24]
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b482:	b480      	push	{r7}
 800b484:	b085      	sub	sp, #20
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	460b      	mov	r3, r1
 800b48c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b494:	887a      	ldrh	r2, [r7, #2]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	4013      	ands	r3, r2
 800b49a:	041a      	lsls	r2, r3, #16
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	43d9      	mvns	r1, r3
 800b4a0:	887b      	ldrh	r3, [r7, #2]
 800b4a2:	400b      	ands	r3, r1
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	619a      	str	r2, [r3, #24]
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b4c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b4c8:	887a      	ldrh	r2, [r7, #2]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b4d6:	887a      	ldrh	r2, [r7, #2]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	69db      	ldr	r3, [r3, #28]
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	e000      	b.n	800b4fa <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
  }
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	4603      	mov	r3, r0
 800b50e:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b510:	4b08      	ldr	r3, [pc, #32]	; (800b534 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b512:	695a      	ldr	r2, [r3, #20]
 800b514:	88fb      	ldrh	r3, [r7, #6]
 800b516:	4013      	ands	r3, r2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d006      	beq.n	800b52a <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b51c:	4a05      	ldr	r2, [pc, #20]	; (800b534 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b51e:	88fb      	ldrh	r3, [r7, #6]
 800b520:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b522:	88fb      	ldrh	r3, [r7, #6]
 800b524:	4618      	mov	r0, r3
 800b526:	f000 f807 	bl	800b538 <HAL_GPIO_EXTI_Callback>
  }
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	40013c00 	.word	0x40013c00

0800b538 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e12b      	b.n	800b7b8 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7fa f81d 	bl	80055b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2224      	movs	r2, #36	; 0x24
 800b57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f022 0201 	bic.w	r2, r2, #1
 800b590:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5a0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5b0:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b5b2:	f007 f891 	bl	80126d8 <HAL_RCC_GetPCLK1Freq>
 800b5b6:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	4a80      	ldr	r2, [pc, #512]	; (800b7c0 <HAL_I2C_Init+0x272>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d807      	bhi.n	800b5d2 <HAL_I2C_Init+0x84>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4a7f      	ldr	r2, [pc, #508]	; (800b7c4 <HAL_I2C_Init+0x276>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	bf94      	ite	ls
 800b5ca:	2301      	movls	r3, #1
 800b5cc:	2300      	movhi	r3, #0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	e006      	b.n	800b5e0 <HAL_I2C_Init+0x92>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a7c      	ldr	r2, [pc, #496]	; (800b7c8 <HAL_I2C_Init+0x27a>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	bf94      	ite	ls
 800b5da:	2301      	movls	r3, #1
 800b5dc:	2300      	movhi	r3, #0
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e0e7      	b.n	800b7b8 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4a78      	ldr	r2, [pc, #480]	; (800b7cc <HAL_I2C_Init+0x27e>)
 800b5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f0:	0c9b      	lsrs	r3, r3, #18
 800b5f2:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	430a      	orrs	r2, r1
 800b606:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	4a6a      	ldr	r2, [pc, #424]	; (800b7c0 <HAL_I2C_Init+0x272>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d802      	bhi.n	800b622 <HAL_I2C_Init+0xd4>
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	3301      	adds	r3, #1
 800b620:	e009      	b.n	800b636 <HAL_I2C_Init+0xe8>
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b628:	fb02 f303 	mul.w	r3, r2, r3
 800b62c:	4a68      	ldr	r2, [pc, #416]	; (800b7d0 <HAL_I2C_Init+0x282>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	099b      	lsrs	r3, r3, #6
 800b634:	3301      	adds	r3, #1
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	6812      	ldr	r2, [r2, #0]
 800b63a:	430b      	orrs	r3, r1
 800b63c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69db      	ldr	r3, [r3, #28]
 800b644:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b648:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	495b      	ldr	r1, [pc, #364]	; (800b7c0 <HAL_I2C_Init+0x272>)
 800b652:	428b      	cmp	r3, r1
 800b654:	d819      	bhi.n	800b68a <HAL_I2C_Init+0x13c>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	1e59      	subs	r1, r3, #1
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	fbb1 f3f3 	udiv	r3, r1, r3
 800b664:	1c59      	adds	r1, r3, #1
 800b666:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b66a:	400b      	ands	r3, r1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <HAL_I2C_Init+0x138>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	1e59      	subs	r1, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b67e:	3301      	adds	r3, #1
 800b680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b684:	e051      	b.n	800b72a <HAL_I2C_Init+0x1dc>
 800b686:	2304      	movs	r3, #4
 800b688:	e04f      	b.n	800b72a <HAL_I2C_Init+0x1dc>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d111      	bne.n	800b6b6 <HAL_I2C_Init+0x168>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	1e58      	subs	r0, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6859      	ldr	r1, [r3, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	005b      	lsls	r3, r3, #1
 800b69e:	440b      	add	r3, r1
 800b6a0:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bf0c      	ite	eq
 800b6ae:	2301      	moveq	r3, #1
 800b6b0:	2300      	movne	r3, #0
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	e012      	b.n	800b6dc <HAL_I2C_Init+0x18e>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	1e58      	subs	r0, r3, #1
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6859      	ldr	r1, [r3, #4]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	0099      	lsls	r1, r3, #2
 800b6c6:	440b      	add	r3, r1
 800b6c8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bf0c      	ite	eq
 800b6d6:	2301      	moveq	r3, #1
 800b6d8:	2300      	movne	r3, #0
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <HAL_I2C_Init+0x196>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e022      	b.n	800b72a <HAL_I2C_Init+0x1dc>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10e      	bne.n	800b70a <HAL_I2C_Init+0x1bc>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	1e58      	subs	r0, r3, #1
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6859      	ldr	r1, [r3, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	005b      	lsls	r3, r3, #1
 800b6f8:	440b      	add	r3, r1
 800b6fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800b6fe:	3301      	adds	r3, #1
 800b700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b708:	e00f      	b.n	800b72a <HAL_I2C_Init+0x1dc>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	1e58      	subs	r0, r3, #1
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6859      	ldr	r1, [r3, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	440b      	add	r3, r1
 800b718:	0099      	lsls	r1, r3, #2
 800b71a:	440b      	add	r3, r1
 800b71c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b720:	3301      	adds	r3, #1
 800b722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b72a:	6879      	ldr	r1, [r7, #4]
 800b72c:	6809      	ldr	r1, [r1, #0]
 800b72e:	4313      	orrs	r3, r2
 800b730:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	69da      	ldr	r2, [r3, #28]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6a1b      	ldr	r3, [r3, #32]
 800b744:	431a      	orrs	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b758:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	6911      	ldr	r1, [r2, #16]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	68d2      	ldr	r2, [r2, #12]
 800b764:	4311      	orrs	r1, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	430b      	orrs	r3, r1
 800b76c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	695a      	ldr	r2, [r3, #20]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	431a      	orrs	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f042 0201 	orr.w	r2, r2, #1
 800b798:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	000186a0 	.word	0x000186a0
 800b7c4:	001e847f 	.word	0x001e847f
 800b7c8:	003d08ff 	.word	0x003d08ff
 800b7cc:	431bde83 	.word	0x431bde83
 800b7d0:	10624dd3 	.word	0x10624dd3

0800b7d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e021      	b.n	800b82a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2224      	movs	r2, #36	; 0x24
 800b7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 0201 	bic.w	r2, r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7f9 ff30 	bl	8005664 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b088      	sub	sp, #32
 800b836:	af02      	add	r7, sp, #8
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	607a      	str	r2, [r7, #4]
 800b83c:	461a      	mov	r2, r3
 800b83e:	460b      	mov	r3, r1
 800b840:	817b      	strh	r3, [r7, #10]
 800b842:	4613      	mov	r3, r2
 800b844:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b846:	f7fb f9eb 	bl	8006c20 <HAL_GetTick>
 800b84a:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b20      	cmp	r3, #32
 800b856:	f040 80e0 	bne.w	800ba1a <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	2319      	movs	r3, #25
 800b860:	2201      	movs	r2, #1
 800b862:	4970      	ldr	r1, [pc, #448]	; (800ba24 <HAL_I2C_Master_Transmit+0x1f2>)
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f005 fd97 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b870:	2302      	movs	r3, #2
 800b872:	e0d3      	b.n	800ba1c <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d101      	bne.n	800b882 <HAL_I2C_Master_Transmit+0x50>
 800b87e:	2302      	movs	r3, #2
 800b880:	e0cc      	b.n	800ba1c <HAL_I2C_Master_Transmit+0x1ea>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0301 	and.w	r3, r3, #1
 800b894:	2b01      	cmp	r3, #1
 800b896:	d007      	beq.n	800b8a8 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f042 0201 	orr.w	r2, r2, #1
 800b8a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8b6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2221      	movs	r2, #33	; 0x21
 800b8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2210      	movs	r2, #16
 800b8c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	893a      	ldrh	r2, [r7, #8]
 800b8d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4a50      	ldr	r2, [pc, #320]	; (800ba28 <HAL_I2C_Master_Transmit+0x1f6>)
 800b8e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b8ea:	8979      	ldrh	r1, [r7, #10]
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	6a3a      	ldr	r2, [r7, #32]
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f005 f8c9 	bl	8010a88 <I2C_MasterRequestWrite>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e08d      	b.n	800ba1c <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b900:	2300      	movs	r3, #0
 800b902:	613b      	str	r3, [r7, #16]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	613b      	str	r3, [r7, #16]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b916:	e066      	b.n	800b9e6 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	6a39      	ldr	r1, [r7, #32]
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f005 fe11 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00d      	beq.n	800b944 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	2b04      	cmp	r3, #4
 800b92e:	d107      	bne.n	800b940 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b93e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e06b      	b.n	800ba1c <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	781a      	ldrb	r2, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	1c5a      	adds	r2, r3, #1
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b95e:	b29b      	uxth	r3, r3
 800b960:	3b01      	subs	r3, #1
 800b962:	b29a      	uxth	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b96c:	3b01      	subs	r3, #1
 800b96e:	b29a      	uxth	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f003 0304 	and.w	r3, r3, #4
 800b97e:	2b04      	cmp	r3, #4
 800b980:	d11b      	bne.n	800b9ba <HAL_I2C_Master_Transmit+0x188>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b986:	2b00      	cmp	r3, #0
 800b988:	d017      	beq.n	800b9ba <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	6a39      	ldr	r1, [r7, #32]
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f005 fe01 	bl	80115c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00d      	beq.n	800b9e6 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d107      	bne.n	800b9e2 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e01a      	b.n	800ba1c <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d194      	bne.n	800b918 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2220      	movs	r2, #32
 800ba02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	e000      	b.n	800ba1c <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ba1a:	2302      	movs	r3, #2
  }
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	00100002 	.word	0x00100002
 800ba28:	ffff0000 	.word	0xffff0000

0800ba2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08c      	sub	sp, #48	; 0x30
 800ba30:	af02      	add	r7, sp, #8
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	461a      	mov	r2, r3
 800ba38:	460b      	mov	r3, r1
 800ba3a:	817b      	strh	r3, [r7, #10]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ba40:	f7fb f8ee 	bl	8006c20 <HAL_GetTick>
 800ba44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	f040 820b 	bne.w	800be6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	2319      	movs	r3, #25
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	497c      	ldr	r1, [pc, #496]	; (800bc50 <HAL_I2C_Master_Receive+0x224>)
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f005 fc9a 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e1fe      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d101      	bne.n	800ba7c <HAL_I2C_Master_Receive+0x50>
 800ba78:	2302      	movs	r3, #2
 800ba7a:	e1f7      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d007      	beq.n	800baa2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f042 0201 	orr.w	r2, r2, #1
 800baa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bab0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2222      	movs	r2, #34	; 0x22
 800bab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2210      	movs	r2, #16
 800babe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	893a      	ldrh	r2, [r7, #8]
 800bad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad8:	b29a      	uxth	r2, r3
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	4a5c      	ldr	r2, [pc, #368]	; (800bc54 <HAL_I2C_Master_Receive+0x228>)
 800bae2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bae4:	8979      	ldrh	r1, [r7, #10]
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f005 f84e 	bl	8010b8c <I2C_MasterRequestRead>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e1b8      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d113      	bne.n	800bb2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	e18c      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d11b      	bne.n	800bb6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb42:	2300      	movs	r3, #0
 800bb44:	61bb      	str	r3, [r7, #24]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	61bb      	str	r3, [r7, #24]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	61bb      	str	r3, [r7, #24]
 800bb56:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	e16c      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d11b      	bne.n	800bbaa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb92:	2300      	movs	r3, #0
 800bb94:	61fb      	str	r3, [r7, #28]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	61fb      	str	r3, [r7, #28]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	61fb      	str	r3, [r7, #28]
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	e14c      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbba:	2300      	movs	r3, #0
 800bbbc:	623b      	str	r3, [r7, #32]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	623b      	str	r3, [r7, #32]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	623b      	str	r3, [r7, #32]
 800bbce:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800bbd0:	e138      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd6:	2b03      	cmp	r3, #3
 800bbd8:	f200 80f1 	bhi.w	800bdbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d123      	bne.n	800bc2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f005 fd9d 	bl	8011728 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e139      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	691a      	ldr	r2, [r3, #16]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	b2d2      	uxtb	r2, r2
 800bc04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc14:	3b01      	subs	r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	3b01      	subs	r3, #1
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc2a:	e10b      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d14e      	bne.n	800bcd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	4906      	ldr	r1, [pc, #24]	; (800bc58 <HAL_I2C_Master_Receive+0x22c>)
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f005 fbaa 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d008      	beq.n	800bc5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e10e      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
 800bc4e:	bf00      	nop
 800bc50:	00100002 	.word	0x00100002
 800bc54:	ffff0000 	.word	0xffff0000
 800bc58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	691a      	ldr	r2, [r3, #16]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	b2d2      	uxtb	r2, r2
 800bc78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	691a      	ldr	r2, [r3, #16]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bcd0:	e0b8      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4966      	ldr	r1, [pc, #408]	; (800be74 <HAL_I2C_Master_Receive+0x448>)
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f005 fb5b 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d001      	beq.n	800bcec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e0bf      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691a      	ldr	r2, [r3, #16]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	1c5a      	adds	r2, r3, #1
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	2200      	movs	r2, #0
 800bd36:	494f      	ldr	r1, [pc, #316]	; (800be74 <HAL_I2C_Master_Receive+0x448>)
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f005 fb2d 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d001      	beq.n	800bd48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e091      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	691a      	ldr	r2, [r3, #16]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd74:	3b01      	subs	r3, #1
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	3b01      	subs	r3, #1
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	691a      	ldr	r2, [r3, #16]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bda6:	3b01      	subs	r3, #1
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bdbc:	e042      	b.n	800be44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f005 fcb0 	bl	8011728 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d001      	beq.n	800bdd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e04c      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	695b      	ldr	r3, [r3, #20]
 800be0a:	f003 0304 	and.w	r3, r3, #4
 800be0e:	2b04      	cmp	r3, #4
 800be10:	d118      	bne.n	800be44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	691a      	ldr	r2, [r3, #16]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1c:	b2d2      	uxtb	r2, r2
 800be1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be2e:	3b01      	subs	r3, #1
 800be30:	b29a      	uxth	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	3b01      	subs	r3, #1
 800be3e:	b29a      	uxth	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f47f aec2 	bne.w	800bbd2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2220      	movs	r2, #32
 800be52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	e000      	b.n	800be6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800be6a:	2302      	movs	r3, #2
  }
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3728      	adds	r7, #40	; 0x28
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	00010004 	.word	0x00010004

0800be78 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08a      	sub	sp, #40	; 0x28
 800be7c:	af02      	add	r7, sp, #8
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	4613      	mov	r3, r2
 800be86:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800be88:	f7fa feca 	bl	8006c20 <HAL_GetTick>
 800be8c:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b20      	cmp	r3, #32
 800be98:	f040 80fb 	bne.w	800c092 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <HAL_I2C_Slave_Transmit+0x30>
 800bea2:	88fb      	ldrh	r3, [r7, #6]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e0f3      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <HAL_I2C_Slave_Transmit+0x42>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e0ec      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 0301 	and.w	r3, r3, #1
 800becc:	2b01      	cmp	r3, #1
 800bece:	d007      	beq.n	800bee0 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f042 0201 	orr.w	r2, r2, #1
 800bede:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800beee:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2221      	movs	r2, #33	; 0x21
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2220      	movs	r2, #32
 800befc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	88fa      	ldrh	r2, [r7, #6]
 800bf10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4a5f      	ldr	r2, [pc, #380]	; (800c09c <HAL_I2C_Slave_Transmit+0x224>)
 800bf20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf30:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	4959      	ldr	r1, [pc, #356]	; (800c0a0 <HAL_I2C_Slave_Transmit+0x228>)
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f005 fa2b 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e0a3      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	617b      	str	r3, [r7, #20]
 800bf60:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf6a:	d165      	bne.n	800c038 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2200      	movs	r2, #0
 800bf74:	494a      	ldr	r1, [pc, #296]	; (800c0a0 <HAL_I2C_Slave_Transmit+0x228>)
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f005 fa0e 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e086      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf86:	2300      	movs	r3, #0
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	695b      	ldr	r3, [r3, #20]
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800bf9c:	e04c      	b.n	800c038 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f005 face 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d009      	beq.n	800bfc2 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfbc:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e068      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	781a      	ldrb	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfea:	3b01      	subs	r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d11b      	bne.n	800c038 <HAL_I2C_Slave_Transmit+0x1c0>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c004:	2b00      	cmp	r3, #0
 800c006:	d017      	beq.n	800c038 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	781a      	ldrb	r2, [r3, #0]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c018:	1c5a      	adds	r2, r3, #1
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c022:	b29b      	uxth	r3, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	b29a      	uxth	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c030:	3b01      	subs	r3, #1
 800c032:	b29a      	uxth	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1ae      	bne.n	800bf9e <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2200      	movs	r2, #0
 800c048:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f005 f9a3 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d001      	beq.n	800c05c <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e01b      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c064:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2220      	movs	r2, #32
 800c07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	e000      	b.n	800c094 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c092:	2302      	movs	r3, #2
  }
}
 800c094:	4618      	mov	r0, r3
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	ffff0000 	.word	0xffff0000
 800c0a0:	00010002 	.word	0x00010002

0800c0a4 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b08a      	sub	sp, #40	; 0x28
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	603b      	str	r3, [r7, #0]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c0b4:	f7fa fdb4 	bl	8006c20 <HAL_GetTick>
 800c0b8:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b20      	cmp	r3, #32
 800c0c4:	f040 80ee 	bne.w	800c2a4 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <HAL_I2C_Slave_Receive+0x30>
 800c0ce:	88fb      	ldrh	r3, [r7, #6]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e0e6      	b.n	800c2a6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d101      	bne.n	800c0e6 <HAL_I2C_Slave_Receive+0x42>
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	e0df      	b.n	800c2a6 <HAL_I2C_Slave_Receive+0x202>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d007      	beq.n	800c10c <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f042 0201 	orr.w	r2, r2, #1
 800c10a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c11a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2222      	movs	r2, #34	; 0x22
 800c120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2220      	movs	r2, #32
 800c128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	88fa      	ldrh	r2, [r7, #6]
 800c13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c142:	b29a      	uxth	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4a59      	ldr	r2, [pc, #356]	; (800c2b0 <HAL_I2C_Slave_Receive+0x20c>)
 800c14c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c15c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2200      	movs	r2, #0
 800c166:	4953      	ldr	r1, [pc, #332]	; (800c2b4 <HAL_I2C_Slave_Receive+0x210>)
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f005 f915 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e096      	b.n	800c2a6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	617b      	str	r3, [r7, #20]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	617b      	str	r3, [r7, #20]
 800c18c:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800c18e:	e04e      	b.n	800c22e <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c190:	69fa      	ldr	r2, [r7, #28]
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f005 fac7 	bl	8011728 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d009      	beq.n	800c1b4 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1ae:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e078      	b.n	800c2a6 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	691a      	ldr	r2, [r3, #16]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	b2d2      	uxtb	r2, r2
 800c1c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d11c      	bne.n	800c22e <HAL_I2C_Slave_Receive+0x18a>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d018      	beq.n	800c22e <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	691a      	ldr	r2, [r3, #16]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	b2d2      	uxtb	r2, r2
 800c208:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	1c5a      	adds	r2, r3, #1
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c218:	3b01      	subs	r3, #1
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c224:	b29b      	uxth	r3, r3
 800c226:	3b01      	subs	r3, #1
 800c228:	b29a      	uxth	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1ac      	bne.n	800c190 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c236:	69fa      	ldr	r2, [r7, #28]
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f005 fa04 	bl	8011648 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d009      	beq.n	800c25a <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c254:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	e025      	b.n	800c2a6 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c25a:	2300      	movs	r3, #0
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	61bb      	str	r3, [r7, #24]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f042 0201 	orr.w	r2, r2, #1
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2220      	movs	r2, #32
 800c28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e000      	b.n	800c2a6 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800c2a4:	2302      	movs	r3, #2
  }
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3720      	adds	r7, #32
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	ffff0000 	.word	0xffff0000
 800c2b4:	00010002 	.word	0x00010002

0800c2b8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	817b      	strh	r3, [r7, #10]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	2b20      	cmp	r3, #32
 800c2da:	f040 8085 	bne.w	800c3e8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c2de:	4b46      	ldr	r3, [pc, #280]	; (800c3f8 <HAL_I2C_Master_Transmit_IT+0x140>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	08db      	lsrs	r3, r3, #3
 800c2e4:	4a45      	ldr	r2, [pc, #276]	; (800c3fc <HAL_I2C_Master_Transmit_IT+0x144>)
 800c2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ea:	0a1a      	lsrs	r2, r3, #8
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	009a      	lsls	r2, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d116      	bne.n	800c332 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31e:	f043 0220 	orr.w	r2, r3, #32
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e05b      	b.n	800c3ea <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	f003 0302 	and.w	r3, r3, #2
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d0db      	beq.n	800c2f8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c346:	2b01      	cmp	r3, #1
 800c348:	d101      	bne.n	800c34e <HAL_I2C_Master_Transmit_IT+0x96>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e04d      	b.n	800c3ea <HAL_I2C_Master_Transmit_IT+0x132>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b01      	cmp	r3, #1
 800c362:	d007      	beq.n	800c374 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0201 	orr.w	r2, r2, #1
 800c372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2221      	movs	r2, #33	; 0x21
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2210      	movs	r2, #16
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	893a      	ldrh	r2, [r7, #8]
 800c3a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4a13      	ldr	r2, [pc, #76]	; (800c400 <HAL_I2C_Master_Transmit_IT+0x148>)
 800c3b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c3b6:	897a      	ldrh	r2, [r7, #10]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685a      	ldr	r2, [r3, #4]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c3d2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e000      	b.n	800c3ea <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800c3e8:	2302      	movs	r3, #2
  }
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	371c      	adds	r7, #28
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	20000058 	.word	0x20000058
 800c3fc:	14f8b589 	.word	0x14f8b589
 800c400:	ffff0000 	.word	0xffff0000

0800c404 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	607a      	str	r2, [r7, #4]
 800c40e:	461a      	mov	r2, r3
 800c410:	460b      	mov	r3, r1
 800c412:	817b      	strh	r3, [r7, #10]
 800c414:	4613      	mov	r3, r2
 800c416:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c418:	2300      	movs	r3, #0
 800c41a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b20      	cmp	r3, #32
 800c426:	f040 808d 	bne.w	800c544 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c42a:	4b4a      	ldr	r3, [pc, #296]	; (800c554 <HAL_I2C_Master_Receive_IT+0x150>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	08db      	lsrs	r3, r3, #3
 800c430:	4a49      	ldr	r2, [pc, #292]	; (800c558 <HAL_I2C_Master_Receive_IT+0x154>)
 800c432:	fba2 2303 	umull	r2, r3, r2, r3
 800c436:	0a1a      	lsrs	r2, r3, #8
 800c438:	4613      	mov	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	009a      	lsls	r2, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	3b01      	subs	r3, #1
 800c448:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d116      	bne.n	800c47e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2220      	movs	r2, #32
 800c45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46a:	f043 0220 	orr.w	r2, r3, #32
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	e063      	b.n	800c546 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	f003 0302 	and.w	r3, r3, #2
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d0db      	beq.n	800c444 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <HAL_I2C_Master_Receive_IT+0x96>
 800c496:	2302      	movs	r3, #2
 800c498:	e055      	b.n	800c546 <HAL_I2C_Master_Receive_IT+0x142>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d007      	beq.n	800c4c0 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f042 0201 	orr.w	r2, r2, #1
 800c4be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2222      	movs	r2, #34	; 0x22
 800c4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2210      	movs	r2, #16
 800c4dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	893a      	ldrh	r2, [r7, #8]
 800c4f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4a17      	ldr	r2, [pc, #92]	; (800c55c <HAL_I2C_Master_Receive_IT+0x158>)
 800c500:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c502:	897a      	ldrh	r2, [r7, #10]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c51e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c52e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c53e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	e000      	b.n	800c546 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c544:	2302      	movs	r3, #2
  }
}
 800c546:	4618      	mov	r0, r3
 800c548:	371c      	adds	r7, #28
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	20000058 	.word	0x20000058
 800c558:	14f8b589 	.word	0x14f8b589
 800c55c:	ffff0000 	.word	0xffff0000

0800c560 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	4613      	mov	r3, r2
 800c56c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b20      	cmp	r3, #32
 800c578:	d158      	bne.n	800c62c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <HAL_I2C_Slave_Transmit_IT+0x26>
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e051      	b.n	800c62e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c590:	2b01      	cmp	r3, #1
 800c592:	d101      	bne.n	800c598 <HAL_I2C_Slave_Transmit_IT+0x38>
 800c594:	2302      	movs	r3, #2
 800c596:	e04a      	b.n	800c62e <HAL_I2C_Slave_Transmit_IT+0xce>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0301 	and.w	r3, r3, #1
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d007      	beq.n	800c5be <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f042 0201 	orr.w	r2, r2, #1
 800c5bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2221      	movs	r2, #33	; 0x21
 800c5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2220      	movs	r2, #32
 800c5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	88fa      	ldrh	r2, [r7, #6]
 800c5ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4a0f      	ldr	r2, [pc, #60]	; (800c63c <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c5fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c60e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c626:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	e000      	b.n	800c62e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c62c:	2302      	movs	r3, #2
  }
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	ffff0000 	.word	0xffff0000

0800c640 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4613      	mov	r3, r2
 800c64c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b20      	cmp	r3, #32
 800c658:	d158      	bne.n	800c70c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <HAL_I2C_Slave_Receive_IT+0x26>
 800c660:	88fb      	ldrh	r3, [r7, #6]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e051      	b.n	800c70e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c670:	2b01      	cmp	r3, #1
 800c672:	d101      	bne.n	800c678 <HAL_I2C_Slave_Receive_IT+0x38>
 800c674:	2302      	movs	r3, #2
 800c676:	e04a      	b.n	800c70e <HAL_I2C_Slave_Receive_IT+0xce>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 0301 	and.w	r3, r3, #1
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d007      	beq.n	800c69e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f042 0201 	orr.w	r2, r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2222      	movs	r2, #34	; 0x22
 800c6b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	68ba      	ldr	r2, [r7, #8]
 800c6c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	88fa      	ldrh	r2, [r7, #6]
 800c6ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	4a0f      	ldr	r2, [pc, #60]	; (800c71c <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c6de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c6ee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c706:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	e000      	b.n	800c70e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c70c:	2302      	movs	r3, #2
  }
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	ffff0000 	.word	0xffff0000

0800c720 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	461a      	mov	r2, r3
 800c72c:	460b      	mov	r3, r1
 800c72e:	817b      	strh	r3, [r7, #10]
 800c730:	4613      	mov	r3, r2
 800c732:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c734:	2300      	movs	r3, #0
 800c736:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b20      	cmp	r3, #32
 800c742:	f040 810d 	bne.w	800c960 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c746:	4b89      	ldr	r3, [pc, #548]	; (800c96c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	08db      	lsrs	r3, r3, #3
 800c74c:	4a88      	ldr	r2, [pc, #544]	; (800c970 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800c74e:	fba2 2303 	umull	r2, r3, r2, r3
 800c752:	0a1a      	lsrs	r2, r3, #8
 800c754:	4613      	mov	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	009a      	lsls	r2, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	3b01      	subs	r3, #1
 800c764:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d116      	bne.n	800c79a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2220      	movs	r2, #32
 800c776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c786:	f043 0220 	orr.w	r2, r3, #32
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e0e3      	b.n	800c962 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	f003 0302 	and.w	r3, r3, #2
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d0db      	beq.n	800c760 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d101      	bne.n	800c7b6 <HAL_I2C_Master_Transmit_DMA+0x96>
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	e0d5      	b.n	800c962 <HAL_I2C_Master_Transmit_DMA+0x242>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d007      	beq.n	800c7dc <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f042 0201 	orr.w	r2, r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2221      	movs	r2, #33	; 0x21
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2210      	movs	r2, #16
 800c7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2200      	movs	r2, #0
 800c800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	893a      	ldrh	r2, [r7, #8]
 800c80c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c812:	b29a      	uxth	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4a56      	ldr	r2, [pc, #344]	; (800c974 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800c81c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c81e:	897a      	ldrh	r2, [r7, #10]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d07b      	beq.n	800c924 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c830:	2b00      	cmp	r3, #0
 800c832:	d02a      	beq.n	800c88a <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c838:	4a4f      	ldr	r2, [pc, #316]	; (800c978 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800c83a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c840:	4a4e      	ldr	r2, [pc, #312]	; (800c97c <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800c842:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c848:	2200      	movs	r2, #0
 800c84a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c850:	2200      	movs	r2, #0
 800c852:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c858:	2200      	movs	r2, #0
 800c85a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c860:	2200      	movs	r2, #0
 800c862:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86c:	4619      	mov	r1, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3310      	adds	r3, #16
 800c874:	461a      	mov	r2, r3
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c87a:	f7fb fc3a 	bl	80080f2 <HAL_DMA_Start_IT>
 800c87e:	4603      	mov	r3, r0
 800c880:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d139      	bne.n	800c8fc <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800c888:	e013      	b.n	800c8b2 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2220      	movs	r2, #32
 800c88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e057      	b.n	800c962 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c8c8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8d8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8e8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	e02f      	b.n	800c95c <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2220      	movs	r2, #32
 800c900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c910:	f043 0210 	orr.w	r2, r3, #16
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e01e      	b.n	800c962 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c932:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c942:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c95a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	e000      	b.n	800c962 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c960:	2302      	movs	r3, #2
  }
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	20000058 	.word	0x20000058
 800c970:	14f8b589 	.word	0x14f8b589
 800c974:	ffff0000 	.word	0xffff0000
 800c978:	08011025 	.word	0x08011025
 800c97c:	080111cf 	.word	0x080111cf

0800c980 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	607a      	str	r2, [r7, #4]
 800c98a:	461a      	mov	r2, r3
 800c98c:	460b      	mov	r3, r1
 800c98e:	817b      	strh	r3, [r7, #10]
 800c990:	4613      	mov	r3, r2
 800c992:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c994:	2300      	movs	r3, #0
 800c996:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	f040 810d 	bne.w	800cbc0 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c9a6:	4b89      	ldr	r3, [pc, #548]	; (800cbcc <HAL_I2C_Master_Receive_DMA+0x24c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	08db      	lsrs	r3, r3, #3
 800c9ac:	4a88      	ldr	r2, [pc, #544]	; (800cbd0 <HAL_I2C_Master_Receive_DMA+0x250>)
 800c9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b2:	0a1a      	lsrs	r2, r3, #8
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	009a      	lsls	r2, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d116      	bne.n	800c9fa <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2220      	movs	r2, #32
 800c9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e6:	f043 0220 	orr.w	r2, r3, #32
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e0e3      	b.n	800cbc2 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	f003 0302 	and.w	r3, r3, #2
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d0db      	beq.n	800c9c0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d101      	bne.n	800ca16 <HAL_I2C_Master_Receive_DMA+0x96>
 800ca12:	2302      	movs	r3, #2
 800ca14:	e0d5      	b.n	800cbc2 <HAL_I2C_Master_Receive_DMA+0x242>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d007      	beq.n	800ca3c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f042 0201 	orr.w	r2, r2, #1
 800ca3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2222      	movs	r2, #34	; 0x22
 800ca50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2210      	movs	r2, #16
 800ca58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	893a      	ldrh	r2, [r7, #8]
 800ca6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	4a56      	ldr	r2, [pc, #344]	; (800cbd4 <HAL_I2C_Master_Receive_DMA+0x254>)
 800ca7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800ca7e:	897a      	ldrh	r2, [r7, #10]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d07b      	beq.n	800cb84 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d02a      	beq.n	800caea <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	4a4f      	ldr	r2, [pc, #316]	; (800cbd8 <HAL_I2C_Master_Receive_DMA+0x258>)
 800ca9a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa0:	4a4e      	ldr	r2, [pc, #312]	; (800cbdc <HAL_I2C_Master_Receive_DMA+0x25c>)
 800caa2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa8:	2200      	movs	r2, #0
 800caaa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab0:	2200      	movs	r2, #0
 800cab2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	2200      	movs	r2, #0
 800caba:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	2200      	movs	r2, #0
 800cac2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3310      	adds	r3, #16
 800cace:	4619      	mov	r1, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	461a      	mov	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cada:	f7fb fb0a 	bl	80080f2 <HAL_DMA_Start_IT>
 800cade:	4603      	mov	r3, r0
 800cae0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d139      	bne.n	800cb5c <HAL_I2C_Master_Receive_DMA+0x1dc>
 800cae8:	e013      	b.n	800cb12 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2220      	movs	r2, #32
 800caee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e057      	b.n	800cbc2 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb20:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb30:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cb48:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	685a      	ldr	r2, [r3, #4]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb58:	605a      	str	r2, [r3, #4]
 800cb5a:	e02f      	b.n	800cbbc <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2220      	movs	r2, #32
 800cb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb70:	f043 0210 	orr.w	r2, r3, #16
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e01e      	b.n	800cbc2 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cb9a:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbaa:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cbba:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e000      	b.n	800cbc2 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800cbc0:	2302      	movs	r3, #2
  }
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000058 	.word	0x20000058
 800cbd0:	14f8b589 	.word	0x14f8b589
 800cbd4:	ffff0000 	.word	0xffff0000
 800cbd8:	08011025 	.word	0x08011025
 800cbdc:	080111cf 	.word	0x080111cf

0800cbe0 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	4613      	mov	r3, r2
 800cbec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b20      	cmp	r3, #32
 800cbf8:	f040 80b8 	bne.w	800cd6c <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800cc02:	88fb      	ldrh	r3, [r7, #6]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d101      	bne.n	800cc0c <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e0b0      	b.n	800cd6e <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d101      	bne.n	800cc1a <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800cc16:	2302      	movs	r3, #2
 800cc18:	e0a9      	b.n	800cd6e <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d007      	beq.n	800cc40 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0201 	orr.w	r2, r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2221      	movs	r2, #33	; 0x21
 800cc54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2220      	movs	r2, #32
 800cc5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	88fa      	ldrh	r2, [r7, #6]
 800cc70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4a3e      	ldr	r2, [pc, #248]	; (800cd78 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800cc80:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d02a      	beq.n	800cce0 <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8e:	4a3b      	ldr	r2, [pc, #236]	; (800cd7c <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800cc90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc96:	4a3a      	ldr	r2, [pc, #232]	; (800cd80 <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800cc98:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc9e:	2200      	movs	r2, #0
 800cca0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca6:	2200      	movs	r2, #0
 800cca8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccae:	2200      	movs	r2, #0
 800ccb0:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3310      	adds	r3, #16
 800ccca:	461a      	mov	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd0:	f7fb fa0f 	bl	80080f2 <HAL_DMA_Start_IT>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d132      	bne.n	800cd44 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800ccde:	e013      	b.n	800cd08 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2228      	movs	r2, #40	; 0x28
 800cce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e032      	b.n	800cd6e <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cd16:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cd2e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd3e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	e014      	b.n	800cd6e <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2220      	movs	r2, #32
 800cd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd58:	f043 0210 	orr.w	r2, r3, #16
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e000      	b.n	800cd6e <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd6c:	2302      	movs	r3, #2
  }
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	ffff0000 	.word	0xffff0000
 800cd7c:	08011025 	.word	0x08011025
 800cd80:	080111cf 	.word	0x080111cf

0800cd84 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b20      	cmp	r3, #32
 800cd9c:	f040 80b8 	bne.w	800cf10 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <HAL_I2C_Slave_Receive_DMA+0x28>
 800cda6:	88fb      	ldrh	r3, [r7, #6]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	e0b0      	b.n	800cf12 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d101      	bne.n	800cdbe <HAL_I2C_Slave_Receive_DMA+0x3a>
 800cdba:	2302      	movs	r3, #2
 800cdbc:	e0a9      	b.n	800cf12 <HAL_I2C_Slave_Receive_DMA+0x18e>
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f003 0301 	and.w	r3, r3, #1
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d007      	beq.n	800cde4 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f042 0201 	orr.w	r2, r2, #1
 800cde2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2222      	movs	r2, #34	; 0x22
 800cdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	88fa      	ldrh	r2, [r7, #6]
 800ce14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4a3e      	ldr	r2, [pc, #248]	; (800cf1c <HAL_I2C_Slave_Receive_DMA+0x198>)
 800ce24:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d02a      	beq.n	800ce84 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce32:	4a3b      	ldr	r2, [pc, #236]	; (800cf20 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800ce34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3a:	4a3a      	ldr	r2, [pc, #232]	; (800cf24 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800ce3c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce42:	2200      	movs	r2, #0
 800ce44:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce52:	2200      	movs	r2, #0
 800ce54:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3310      	adds	r3, #16
 800ce68:	4619      	mov	r1, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6e:	461a      	mov	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce74:	f7fb f93d 	bl	80080f2 <HAL_DMA_Start_IT>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d132      	bne.n	800cee8 <HAL_I2C_Slave_Receive_DMA+0x164>
 800ce82:	e013      	b.n	800ceac <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2228      	movs	r2, #40	; 0x28
 800ce88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e032      	b.n	800cf12 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ceba:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ced2:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cee2:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	e014      	b.n	800cf12 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2220      	movs	r2, #32
 800ceec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	f043 0210 	orr.w	r2, r3, #16
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e000      	b.n	800cf12 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800cf10:	2302      	movs	r3, #2
  }
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	ffff0000 	.word	0xffff0000
 800cf20:	08011025 	.word	0x08011025
 800cf24:	080111cf 	.word	0x080111cf

0800cf28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	4608      	mov	r0, r1
 800cf32:	4611      	mov	r1, r2
 800cf34:	461a      	mov	r2, r3
 800cf36:	4603      	mov	r3, r0
 800cf38:	817b      	strh	r3, [r7, #10]
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	813b      	strh	r3, [r7, #8]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cf42:	f7f9 fe6d 	bl	8006c20 <HAL_GetTick>
 800cf46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b20      	cmp	r3, #32
 800cf52:	f040 80d9 	bne.w	800d108 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	2319      	movs	r3, #25
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	496d      	ldr	r1, [pc, #436]	; (800d114 <HAL_I2C_Mem_Write+0x1ec>)
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f004 fa19 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	e0cc      	b.n	800d10a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <HAL_I2C_Mem_Write+0x56>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e0c5      	b.n	800d10a <HAL_I2C_Mem_Write+0x1e2>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d007      	beq.n	800cfa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f042 0201 	orr.w	r2, r2, #1
 800cfa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cfb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2221      	movs	r2, #33	; 0x21
 800cfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2240      	movs	r2, #64	; 0x40
 800cfc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	6a3a      	ldr	r2, [r7, #32]
 800cfce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	4a4d      	ldr	r2, [pc, #308]	; (800d118 <HAL_I2C_Mem_Write+0x1f0>)
 800cfe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cfe6:	88f8      	ldrh	r0, [r7, #6]
 800cfe8:	893a      	ldrh	r2, [r7, #8]
 800cfea:	8979      	ldrh	r1, [r7, #10]
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	9301      	str	r3, [sp, #4]
 800cff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	4603      	mov	r3, r0
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f003 fe96 	bl	8010d28 <I2C_RequestMemoryWrite>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d052      	beq.n	800d0a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e081      	b.n	800d10a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d006:	697a      	ldr	r2, [r7, #20]
 800d008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f004 fa9a 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	d107      	bne.n	800d02e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d02c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e06b      	b.n	800d10a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	781a      	ldrb	r2, [r3, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d04c:	3b01      	subs	r3, #1
 800d04e:	b29a      	uxth	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d058:	b29b      	uxth	r3, r3
 800d05a:	3b01      	subs	r3, #1
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b04      	cmp	r3, #4
 800d06e:	d11b      	bne.n	800d0a8 <HAL_I2C_Mem_Write+0x180>
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d074:	2b00      	cmp	r3, #0
 800d076:	d017      	beq.n	800d0a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07c:	781a      	ldrb	r2, [r3, #0]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d088:	1c5a      	adds	r2, r3, #1
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d092:	3b01      	subs	r3, #1
 800d094:	b29a      	uxth	r2, r3
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d1aa      	bne.n	800d006 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0b0:	697a      	ldr	r2, [r7, #20]
 800d0b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f004 fa86 	bl	80115c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00d      	beq.n	800d0dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c4:	2b04      	cmp	r3, #4
 800d0c6:	d107      	bne.n	800d0d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e016      	b.n	800d10a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2220      	movs	r2, #32
 800d0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	e000      	b.n	800d10a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d108:	2302      	movs	r3, #2
  }
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	00100002 	.word	0x00100002
 800d118:	ffff0000 	.word	0xffff0000

0800d11c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08c      	sub	sp, #48	; 0x30
 800d120:	af02      	add	r7, sp, #8
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	4608      	mov	r0, r1
 800d126:	4611      	mov	r1, r2
 800d128:	461a      	mov	r2, r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	817b      	strh	r3, [r7, #10]
 800d12e:	460b      	mov	r3, r1
 800d130:	813b      	strh	r3, [r7, #8]
 800d132:	4613      	mov	r3, r2
 800d134:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d136:	f7f9 fd73 	bl	8006c20 <HAL_GetTick>
 800d13a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b20      	cmp	r3, #32
 800d146:	f040 8208 	bne.w	800d55a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	2319      	movs	r3, #25
 800d150:	2201      	movs	r2, #1
 800d152:	497b      	ldr	r1, [pc, #492]	; (800d340 <HAL_I2C_Mem_Read+0x224>)
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f004 f91f 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d001      	beq.n	800d164 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d160:	2302      	movs	r3, #2
 800d162:	e1fb      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d101      	bne.n	800d172 <HAL_I2C_Mem_Read+0x56>
 800d16e:	2302      	movs	r3, #2
 800d170:	e1f4      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2201      	movs	r2, #1
 800d176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b01      	cmp	r3, #1
 800d186:	d007      	beq.n	800d198 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f042 0201 	orr.w	r2, r2, #1
 800d196:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2222      	movs	r2, #34	; 0x22
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2240      	movs	r2, #64	; 0x40
 800d1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d1c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4a5b      	ldr	r2, [pc, #364]	; (800d344 <HAL_I2C_Mem_Read+0x228>)
 800d1d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d1da:	88f8      	ldrh	r0, [r7, #6]
 800d1dc:	893a      	ldrh	r2, [r7, #8]
 800d1de:	8979      	ldrh	r1, [r7, #10]
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e2:	9301      	str	r3, [sp, #4]
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f003 fe32 	bl	8010e54 <I2C_RequestMemoryRead>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d001      	beq.n	800d1fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e1b0      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d113      	bne.n	800d22a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	699b      	ldr	r3, [r3, #24]
 800d214:	617b      	str	r3, [r7, #20]
 800d216:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	e184      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d11b      	bne.n	800d26a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d242:	2300      	movs	r3, #0
 800d244:	61bb      	str	r3, [r7, #24]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	61bb      	str	r3, [r7, #24]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	e164      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d11b      	bne.n	800d2aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d280:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d292:	2300      	movs	r3, #0
 800d294:	61fb      	str	r3, [r7, #28]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	695b      	ldr	r3, [r3, #20]
 800d29c:	61fb      	str	r3, [r7, #28]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	61fb      	str	r3, [r7, #28]
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	e144      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	623b      	str	r3, [r7, #32]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	623b      	str	r3, [r7, #32]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	699b      	ldr	r3, [r3, #24]
 800d2bc:	623b      	str	r3, [r7, #32]
 800d2be:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800d2c0:	e138      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	f200 80f1 	bhi.w	800d4ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d123      	bne.n	800d31c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f004 fa25 	bl	8011728 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e139      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fa:	1c5a      	adds	r2, r3, #1
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d304:	3b01      	subs	r3, #1
 800d306:	b29a      	uxth	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d310:	b29b      	uxth	r3, r3
 800d312:	3b01      	subs	r3, #1
 800d314:	b29a      	uxth	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d31a:	e10b      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d320:	2b02      	cmp	r3, #2
 800d322:	d14e      	bne.n	800d3c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	2200      	movs	r2, #0
 800d32c:	4906      	ldr	r1, [pc, #24]	; (800d348 <HAL_I2C_Mem_Read+0x22c>)
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f004 f832 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d008      	beq.n	800d34c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e10e      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
 800d33e:	bf00      	nop
 800d340:	00100002 	.word	0x00100002
 800d344:	ffff0000 	.word	0xffff0000
 800d348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d35a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	691a      	ldr	r2, [r3, #16]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d366:	b2d2      	uxtb	r2, r2
 800d368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d378:	3b01      	subs	r3, #1
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d384:	b29b      	uxth	r3, r3
 800d386:	3b01      	subs	r3, #1
 800d388:	b29a      	uxth	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d398:	b2d2      	uxtb	r2, r2
 800d39a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3c0:	e0b8      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	4966      	ldr	r1, [pc, #408]	; (800d564 <HAL_I2C_Mem_Read+0x448>)
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f003 ffe3 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e0bf      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	691a      	ldr	r2, [r3, #16]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f6:	b2d2      	uxtb	r2, r2
 800d3f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	1c5a      	adds	r2, r3, #1
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d408:	3b01      	subs	r3, #1
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d414:	b29b      	uxth	r3, r3
 800d416:	3b01      	subs	r3, #1
 800d418:	b29a      	uxth	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	2200      	movs	r2, #0
 800d426:	494f      	ldr	r1, [pc, #316]	; (800d564 <HAL_I2C_Mem_Read+0x448>)
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f003 ffb5 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	e091      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	691a      	ldr	r2, [r3, #16]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45a:	1c5a      	adds	r2, r3, #1
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d464:	3b01      	subs	r3, #1
 800d466:	b29a      	uxth	r2, r3
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d470:	b29b      	uxth	r3, r3
 800d472:	3b01      	subs	r3, #1
 800d474:	b29a      	uxth	r2, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	691a      	ldr	r2, [r3, #16]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d496:	3b01      	subs	r3, #1
 800d498:	b29a      	uxth	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4ac:	e042      	b.n	800d534 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f004 f938 	bl	8011728 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e04c      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	691a      	ldr	r2, [r3, #16]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d4:	1c5a      	adds	r2, r3, #1
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	d118      	bne.n	800d534 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	691a      	ldr	r2, [r3, #16]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50c:	b2d2      	uxtb	r2, r2
 800d50e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d51e:	3b01      	subs	r3, #1
 800d520:	b29a      	uxth	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	3b01      	subs	r3, #1
 800d52e:	b29a      	uxth	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	f47f aec2 	bne.w	800d2c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2220      	movs	r2, #32
 800d542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	e000      	b.n	800d55c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d55a:	2302      	movs	r3, #2
  }
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3728      	adds	r7, #40	; 0x28
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	00010004 	.word	0x00010004

0800d568 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d568:	b480      	push	{r7}
 800d56a:	b087      	sub	sp, #28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	4608      	mov	r0, r1
 800d572:	4611      	mov	r1, r2
 800d574:	461a      	mov	r2, r3
 800d576:	4603      	mov	r3, r0
 800d578:	817b      	strh	r3, [r7, #10]
 800d57a:	460b      	mov	r3, r1
 800d57c:	813b      	strh	r3, [r7, #8]
 800d57e:	4613      	mov	r3, r2
 800d580:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d582:	2300      	movs	r3, #0
 800d584:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	2b20      	cmp	r3, #32
 800d590:	f040 808e 	bne.w	800d6b0 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d594:	4b4a      	ldr	r3, [pc, #296]	; (800d6c0 <HAL_I2C_Mem_Write_IT+0x158>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	08db      	lsrs	r3, r3, #3
 800d59a:	4a4a      	ldr	r2, [pc, #296]	; (800d6c4 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d59c:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a0:	0a1a      	lsrs	r2, r3, #8
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009a      	lsls	r2, r3, #2
 800d5aa:	4413      	add	r3, r2
 800d5ac:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d116      	bne.n	800d5e8 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2220      	movs	r2, #32
 800d5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d4:	f043 0220 	orr.w	r2, r3, #32
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e064      	b.n	800d6b2 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	f003 0302 	and.w	r3, r3, #2
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	d0db      	beq.n	800d5ae <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d101      	bne.n	800d604 <HAL_I2C_Mem_Write_IT+0x9c>
 800d600:	2302      	movs	r3, #2
 800d602:	e056      	b.n	800d6b2 <HAL_I2C_Mem_Write_IT+0x14a>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	2b01      	cmp	r3, #1
 800d618:	d007      	beq.n	800d62a <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f042 0201 	orr.w	r2, r2, #1
 800d628:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d638:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2221      	movs	r2, #33	; 0x21
 800d63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2240      	movs	r2, #64	; 0x40
 800d646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6a3a      	ldr	r2, [r7, #32]
 800d654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d65a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d660:	b29a      	uxth	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	4a17      	ldr	r2, [pc, #92]	; (800d6c8 <HAL_I2C_Mem_Write_IT+0x160>)
 800d66a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d66c:	897a      	ldrh	r2, [r7, #10]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d672:	893a      	ldrh	r2, [r7, #8]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d678:	88fa      	ldrh	r2, [r7, #6]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d692:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d6aa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e000      	b.n	800d6b2 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d6b0:	2302      	movs	r3, #2
  }
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	371c      	adds	r7, #28
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	20000058 	.word	0x20000058
 800d6c4:	14f8b589 	.word	0x14f8b589
 800d6c8:	ffff0000 	.word	0xffff0000

0800d6cc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	4608      	mov	r0, r1
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	461a      	mov	r2, r3
 800d6da:	4603      	mov	r3, r0
 800d6dc:	817b      	strh	r3, [r7, #10]
 800d6de:	460b      	mov	r3, r1
 800d6e0:	813b      	strh	r3, [r7, #8]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	2b20      	cmp	r3, #32
 800d6f4:	f040 809a 	bne.w	800d82c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d6f8:	4b50      	ldr	r3, [pc, #320]	; (800d83c <HAL_I2C_Mem_Read_IT+0x170>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	08db      	lsrs	r3, r3, #3
 800d6fe:	4a50      	ldr	r2, [pc, #320]	; (800d840 <HAL_I2C_Mem_Read_IT+0x174>)
 800d700:	fba2 2303 	umull	r2, r3, r2, r3
 800d704:	0a1a      	lsrs	r2, r3, #8
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009a      	lsls	r2, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	3b01      	subs	r3, #1
 800d716:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d116      	bne.n	800d74c <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2200      	movs	r2, #0
 800d722:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2220      	movs	r2, #32
 800d728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d738:	f043 0220 	orr.w	r2, r3, #32
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	e070      	b.n	800d82e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	f003 0302 	and.w	r3, r3, #2
 800d756:	2b02      	cmp	r3, #2
 800d758:	d0db      	beq.n	800d712 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d760:	2b01      	cmp	r3, #1
 800d762:	d101      	bne.n	800d768 <HAL_I2C_Mem_Read_IT+0x9c>
 800d764:	2302      	movs	r3, #2
 800d766:	e062      	b.n	800d82e <HAL_I2C_Mem_Read_IT+0x162>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d007      	beq.n	800d78e <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f042 0201 	orr.w	r2, r2, #1
 800d78c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d79c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2222      	movs	r2, #34	; 0x22
 800d7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2240      	movs	r2, #64	; 0x40
 800d7aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6a3a      	ldr	r2, [r7, #32]
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	4a1d      	ldr	r2, [pc, #116]	; (800d844 <HAL_I2C_Mem_Read_IT+0x178>)
 800d7ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d7d0:	897a      	ldrh	r2, [r7, #10]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d7d6:	893a      	ldrh	r2, [r7, #8]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d7dc:	88fa      	ldrh	r2, [r7, #6]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7f6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d806:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d814:	2b00      	cmp	r3, #0
 800d816:	d007      	beq.n	800d828 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d826:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	e000      	b.n	800d82e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d82c:	2302      	movs	r3, #2
  }
}
 800d82e:	4618      	mov	r0, r3
 800d830:	371c      	adds	r7, #28
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	20000058 	.word	0x20000058
 800d840:	14f8b589 	.word	0x14f8b589
 800d844:	ffff0000 	.word	0xffff0000

0800d848 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08a      	sub	sp, #40	; 0x28
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	4608      	mov	r0, r1
 800d852:	4611      	mov	r1, r2
 800d854:	461a      	mov	r2, r3
 800d856:	4603      	mov	r3, r0
 800d858:	817b      	strh	r3, [r7, #10]
 800d85a:	460b      	mov	r3, r1
 800d85c:	813b      	strh	r3, [r7, #8]
 800d85e:	4613      	mov	r3, r2
 800d860:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d862:	2300      	movs	r3, #0
 800d864:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d866:	f7f9 f9db 	bl	8006c20 <HAL_GetTick>
 800d86a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b20      	cmp	r3, #32
 800d876:	f040 8145 	bne.w	800db04 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d87a:	4b9d      	ldr	r3, [pc, #628]	; (800daf0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	08db      	lsrs	r3, r3, #3
 800d880:	4a9c      	ldr	r2, [pc, #624]	; (800daf4 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800d882:	fba2 2303 	umull	r2, r3, r2, r3
 800d886:	0a1a      	lsrs	r2, r3, #8
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	009a      	lsls	r2, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	3b01      	subs	r3, #1
 800d898:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d116      	bne.n	800d8ce <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2220      	movs	r2, #32
 800d8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	f043 0220 	orr.w	r2, r3, #32
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e11b      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	699b      	ldr	r3, [r3, #24]
 800d8d4:	f003 0302 	and.w	r3, r3, #2
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d0db      	beq.n	800d894 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d101      	bne.n	800d8ea <HAL_I2C_Mem_Write_DMA+0xa2>
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	e10d      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d007      	beq.n	800d910 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f042 0201 	orr.w	r2, r2, #1
 800d90e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d91e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2221      	movs	r2, #33	; 0x21
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2240      	movs	r2, #64	; 0x40
 800d92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d93a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d940:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d946:	b29a      	uxth	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4a6a      	ldr	r2, [pc, #424]	; (800daf8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800d950:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d952:	897a      	ldrh	r2, [r7, #10]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d958:	893a      	ldrh	r2, [r7, #8]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d95e:	88fa      	ldrh	r2, [r7, #6]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2200      	movs	r2, #0
 800d968:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 80a9 	beq.w	800dac6 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d02a      	beq.n	800d9d2 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	4a5e      	ldr	r2, [pc, #376]	; (800dafc <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800d982:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d988:	4a5d      	ldr	r2, [pc, #372]	; (800db00 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800d98a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d990:	2200      	movs	r2, #0
 800d992:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d998:	2200      	movs	r2, #0
 800d99a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3310      	adds	r3, #16
 800d9bc:	461a      	mov	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9c2:	f7fa fb96 	bl	80080f2 <HAL_DMA_Start_IT>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d9ca:	7efb      	ldrb	r3, [r7, #27]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d166      	bne.n	800da9e <HAL_I2C_Mem_Write_DMA+0x256>
 800d9d0:	e013      	b.n	800d9fa <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2220      	movs	r2, #32
 800d9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e085      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d9fa:	88f8      	ldrh	r0, [r7, #6]
 800d9fc:	893a      	ldrh	r2, [r7, #8]
 800d9fe:	8979      	ldrh	r1, [r7, #10]
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	9301      	str	r3, [sp, #4]
 800da04:	2323      	movs	r3, #35	; 0x23
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	4603      	mov	r3, r0
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f003 f98c 	bl	8010d28 <I2C_RequestMemoryWrite>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d022      	beq.n	800da5c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fa fc31 	bl	8008282 <HAL_DMA_Abort_IT>
 800da20:	4603      	mov	r3, r0
 800da22:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	2200      	movs	r2, #0
 800da2a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da3a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f022 0201 	bic.w	r2, r2, #1
 800da56:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800da58:	2301      	movs	r3, #1
 800da5a:	e054      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da5c:	2300      	movs	r3, #0
 800da5e:	613b      	str	r3, [r7, #16]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	613b      	str	r3, [r7, #16]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	613b      	str	r3, [r7, #16]
 800da70:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2200      	movs	r2, #0
 800da76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da88:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da98:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	e033      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2220      	movs	r2, #32
 800daa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2200      	movs	r2, #0
 800daaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f043 0210 	orr.w	r2, r3, #16
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e01f      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2220      	movs	r2, #32
 800daca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e00b      	b.n	800db06 <HAL_I2C_Mem_Write_DMA+0x2be>
 800daee:	bf00      	nop
 800daf0:	20000058 	.word	0x20000058
 800daf4:	14f8b589 	.word	0x14f8b589
 800daf8:	ffff0000 	.word	0xffff0000
 800dafc:	08011025 	.word	0x08011025
 800db00:	080111cf 	.word	0x080111cf
    }
  }
  else
  {
    return HAL_BUSY;
 800db04:	2302      	movs	r3, #2
  }
}
 800db06:	4618      	mov	r0, r3
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b08c      	sub	sp, #48	; 0x30
 800db12:	af02      	add	r7, sp, #8
 800db14:	60f8      	str	r0, [r7, #12]
 800db16:	4608      	mov	r0, r1
 800db18:	4611      	mov	r1, r2
 800db1a:	461a      	mov	r2, r3
 800db1c:	4603      	mov	r3, r0
 800db1e:	817b      	strh	r3, [r7, #10]
 800db20:	460b      	mov	r3, r1
 800db22:	813b      	strh	r3, [r7, #8]
 800db24:	4613      	mov	r3, r2
 800db26:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800db28:	f7f9 f87a 	bl	8006c20 <HAL_GetTick>
 800db2c:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800db2e:	2300      	movs	r3, #0
 800db30:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b20      	cmp	r3, #32
 800db3c:	f040 8175 	bne.w	800de2a <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800db40:	4b94      	ldr	r3, [pc, #592]	; (800dd94 <HAL_I2C_Mem_Read_DMA+0x286>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	08db      	lsrs	r3, r3, #3
 800db46:	4a94      	ldr	r2, [pc, #592]	; (800dd98 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800db48:	fba2 2303 	umull	r2, r3, r2, r3
 800db4c:	0a1a      	lsrs	r2, r3, #8
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	009a      	lsls	r2, r3, #2
 800db56:	4413      	add	r3, r2
 800db58:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d116      	bne.n	800db94 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2220      	movs	r2, #32
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db80:	f043 0220 	orr.w	r2, r3, #32
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e14b      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	f003 0302 	and.w	r3, r3, #2
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d0db      	beq.n	800db5a <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d101      	bne.n	800dbb0 <HAL_I2C_Mem_Read_DMA+0xa2>
 800dbac:	2302      	movs	r3, #2
 800dbae:	e13d      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f003 0301 	and.w	r3, r3, #1
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d007      	beq.n	800dbd6 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f042 0201 	orr.w	r2, r2, #1
 800dbd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbe4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2222      	movs	r2, #34	; 0x22
 800dbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2240      	movs	r2, #64	; 0x40
 800dbf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800dc06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	4a61      	ldr	r2, [pc, #388]	; (800dd9c <HAL_I2C_Mem_Read_DMA+0x28e>)
 800dc16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dc18:	897a      	ldrh	r2, [r7, #10]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800dc1e:	893a      	ldrh	r2, [r7, #8]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800dc24:	88fa      	ldrh	r2, [r7, #6]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f000 80cb 	beq.w	800ddd0 <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d02d      	beq.n	800dc9e <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc46:	4a56      	ldr	r2, [pc, #344]	; (800dda0 <HAL_I2C_Mem_Read_DMA+0x292>)
 800dc48:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4e:	4a55      	ldr	r2, [pc, #340]	; (800dda4 <HAL_I2C_Mem_Read_DMA+0x296>)
 800dc50:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc56:	2200      	movs	r2, #0
 800dc58:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5e:	2200      	movs	r2, #0
 800dc60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc66:	2200      	movs	r2, #0
 800dc68:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6e:	2200      	movs	r2, #0
 800dc70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3310      	adds	r3, #16
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc82:	461a      	mov	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc88:	f7fa fa33 	bl	80080f2 <HAL_DMA_Start_IT>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dc92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f040 8086 	bne.w	800dda8 <HAL_I2C_Mem_Read_DMA+0x29a>
 800dc9c:	e013      	b.n	800dcc6 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2220      	movs	r2, #32
 800dca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e0b2      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800dcc6:	88f8      	ldrh	r0, [r7, #6]
 800dcc8:	893a      	ldrh	r2, [r7, #8]
 800dcca:	8979      	ldrh	r1, [r7, #10]
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	2323      	movs	r3, #35	; 0x23
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f003 f8bc 	bl	8010e54 <I2C_RequestMemoryRead>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d023      	beq.n	800dd2a <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fa facb 	bl	8008282 <HAL_DMA_Abort_IT>
 800dcec:	4603      	mov	r3, r0
 800dcee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd08:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0201 	bic.w	r2, r2, #1
 800dd24:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e080      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d108      	bne.n	800dd44 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	e007      	b.n	800dd54 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685a      	ldr	r2, [r3, #4]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd52:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd54:	2300      	movs	r3, #0
 800dd56:	617b      	str	r3, [r7, #20]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	695b      	ldr	r3, [r3, #20]
 800dd5e:	617b      	str	r3, [r7, #20]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd80:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd90:	605a      	str	r2, [r3, #4]
 800dd92:	e048      	b.n	800de26 <HAL_I2C_Mem_Read_DMA+0x318>
 800dd94:	20000058 	.word	0x20000058
 800dd98:	14f8b589 	.word	0x14f8b589
 800dd9c:	ffff0000 	.word	0xffff0000
 800dda0:	08011025 	.word	0x08011025
 800dda4:	080111cf 	.word	0x080111cf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbc:	f043 0210 	orr.w	r2, r3, #16
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e02d      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800ddd0:	88f8      	ldrh	r0, [r7, #6]
 800ddd2:	893a      	ldrh	r2, [r7, #8]
 800ddd4:	8979      	ldrh	r1, [r7, #10]
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	2323      	movs	r3, #35	; 0x23
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	4603      	mov	r3, r0
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f003 f837 	bl	8010e54 <I2C_RequestMemoryRead>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	e01d      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61bb      	str	r3, [r7, #24]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	61bb      	str	r3, [r7, #24]
 800de04:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de14:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2220      	movs	r2, #32
 800de1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2200      	movs	r2, #0
 800de22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800de26:	2300      	movs	r3, #0
 800de28:	e000      	b.n	800de2c <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800de2a:	2302      	movs	r3, #2
  }
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3728      	adds	r7, #40	; 0x28
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b08a      	sub	sp, #40	; 0x28
 800de38:	af02      	add	r7, sp, #8
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	607a      	str	r2, [r7, #4]
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	460b      	mov	r3, r1
 800de42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800de44:	f7f8 feec 	bl	8006c20 <HAL_GetTick>
 800de48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800de4a:	2301      	movs	r3, #1
 800de4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b20      	cmp	r3, #32
 800de58:	f040 8111 	bne.w	800e07e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	2319      	movs	r3, #25
 800de62:	2201      	movs	r2, #1
 800de64:	4988      	ldr	r1, [pc, #544]	; (800e088 <HAL_I2C_IsDeviceReady+0x254>)
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f003 fa96 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800de72:	2302      	movs	r3, #2
 800de74:	e104      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d101      	bne.n	800de84 <HAL_I2C_IsDeviceReady+0x50>
 800de80:	2302      	movs	r3, #2
 800de82:	e0fd      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2201      	movs	r2, #1
 800de88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	2b01      	cmp	r3, #1
 800de98:	d007      	beq.n	800deaa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f042 0201 	orr.w	r2, r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800deb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2224      	movs	r2, #36	; 0x24
 800debe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	4a70      	ldr	r2, [pc, #448]	; (800e08c <HAL_I2C_IsDeviceReady+0x258>)
 800decc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dedc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f003 fa54 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00d      	beq.n	800df12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df04:	d103      	bne.n	800df0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800df0e:	2303      	movs	r3, #3
 800df10:	e0b6      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800df12:	897b      	ldrh	r3, [r7, #10]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	461a      	mov	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800df20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800df22:	f7f8 fe7d 	bl	8006c20 <HAL_GetTick>
 800df26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	f003 0302 	and.w	r3, r3, #2
 800df32:	2b02      	cmp	r3, #2
 800df34:	bf0c      	ite	eq
 800df36:	2301      	moveq	r3, #1
 800df38:	2300      	movne	r3, #0
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	695b      	ldr	r3, [r3, #20]
 800df44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df4c:	bf0c      	ite	eq
 800df4e:	2301      	moveq	r3, #1
 800df50:	2300      	movne	r3, #0
 800df52:	b2db      	uxtb	r3, r3
 800df54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800df56:	e025      	b.n	800dfa4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800df58:	f7f8 fe62 	bl	8006c20 <HAL_GetTick>
 800df5c:	4602      	mov	r2, r0
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	429a      	cmp	r2, r3
 800df66:	d302      	bcc.n	800df6e <HAL_I2C_IsDeviceReady+0x13a>
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d103      	bne.n	800df76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	22a0      	movs	r2, #160	; 0xa0
 800df72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	695b      	ldr	r3, [r3, #20]
 800df7c:	f003 0302 	and.w	r3, r3, #2
 800df80:	2b02      	cmp	r3, #2
 800df82:	bf0c      	ite	eq
 800df84:	2301      	moveq	r3, #1
 800df86:	2300      	movne	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df9a:	bf0c      	ite	eq
 800df9c:	2301      	moveq	r3, #1
 800df9e:	2300      	movne	r3, #0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2ba0      	cmp	r3, #160	; 0xa0
 800dfae:	d005      	beq.n	800dfbc <HAL_I2C_IsDeviceReady+0x188>
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d102      	bne.n	800dfbc <HAL_I2C_IsDeviceReady+0x188>
 800dfb6:	7dbb      	ldrb	r3, [r7, #22]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d0cd      	beq.n	800df58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2220      	movs	r2, #32
 800dfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	695b      	ldr	r3, [r3, #20]
 800dfca:	f003 0302 	and.w	r3, r3, #2
 800dfce:	2b02      	cmp	r3, #2
 800dfd0:	d129      	bne.n	800e026 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfe0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	613b      	str	r3, [r7, #16]
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	613b      	str	r3, [r7, #16]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	613b      	str	r3, [r7, #16]
 800dff6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	9300      	str	r3, [sp, #0]
 800dffc:	2319      	movs	r3, #25
 800dffe:	2201      	movs	r2, #1
 800e000:	4921      	ldr	r1, [pc, #132]	; (800e088 <HAL_I2C_IsDeviceReady+0x254>)
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f003 f9c8 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e036      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2220      	movs	r2, #32
 800e016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	e02c      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e034:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e03e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	2319      	movs	r3, #25
 800e046:	2201      	movs	r2, #1
 800e048:	490f      	ldr	r1, [pc, #60]	; (800e088 <HAL_I2C_IsDeviceReady+0x254>)
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f003 f9a4 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e012      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	3301      	adds	r3, #1
 800e05e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800e060:	69ba      	ldr	r2, [r7, #24]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	429a      	cmp	r2, r3
 800e066:	f4ff af32 	bcc.w	800dece <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800e07e:	2302      	movs	r3, #2
  }
}
 800e080:	4618      	mov	r0, r3
 800e082:	3720      	adds	r7, #32
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	00100002 	.word	0x00100002
 800e08c:	ffff0000 	.word	0xffff0000

0800e090 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e090:	b480      	push	{r7}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	607a      	str	r2, [r7, #4]
 800e09a:	461a      	mov	r2, r3
 800e09c:	460b      	mov	r3, r1
 800e09e:	817b      	strh	r3, [r7, #10]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b20      	cmp	r3, #32
 800e0b6:	f040 80a6 	bne.w	800e206 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c8:	d005      	beq.n	800e0d6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	2b08      	cmp	r3, #8
 800e0ce:	d002      	beq.n	800e0d6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d130      	bne.n	800e138 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e0d6:	4b4f      	ldr	r3, [pc, #316]	; (800e214 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	08db      	lsrs	r3, r3, #3
 800e0dc:	4a4e      	ldr	r2, [pc, #312]	; (800e218 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800e0de:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e2:	0a1a      	lsrs	r2, r3, #8
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009a      	lsls	r2, r3, #2
 800e0ec:	4413      	add	r3, r2
 800e0ee:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d116      	bne.n	800e12a <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2220      	movs	r2, #32
 800e106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e116:	f043 0220 	orr.w	r2, r3, #32
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e06e      	b.n	800e208 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	f003 0302 	and.w	r3, r3, #2
 800e134:	2b02      	cmp	r3, #2
 800e136:	d0db      	beq.n	800e0f0 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d101      	bne.n	800e146 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800e142:	2302      	movs	r3, #2
 800e144:	e060      	b.n	800e208 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2201      	movs	r2, #1
 800e14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d007      	beq.n	800e16c <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f042 0201 	orr.w	r2, r2, #1
 800e16a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e17a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2221      	movs	r2, #33	; 0x21
 800e180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2210      	movs	r2, #16
 800e188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	893a      	ldrh	r2, [r7, #8]
 800e19c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6a3a      	ldr	r2, [r7, #32]
 800e1ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e1ae:	897a      	ldrh	r2, [r7, #10]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b8:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b11      	cmp	r3, #17
 800e1be:	d10c      	bne.n	800e1da <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e1c6:	d003      	beq.n	800e1d0 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e1ce:	d101      	bne.n	800e1d4 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e000      	b.n	800e1d6 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d107      	bne.n	800e1ea <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1e8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e200:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	e000      	b.n	800e208 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800e206:	2302      	movs	r3, #2
  }
}
 800e208:	4618      	mov	r0, r3
 800e20a:	371c      	adds	r7, #28
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr
 800e214:	20000058 	.word	0x20000058
 800e218:	14f8b589 	.word	0x14f8b589

0800e21c <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	607a      	str	r2, [r7, #4]
 800e226:	461a      	mov	r2, r3
 800e228:	460b      	mov	r3, r1
 800e22a:	817b      	strh	r3, [r7, #10]
 800e22c:	4613      	mov	r3, r2
 800e22e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e230:	2300      	movs	r3, #0
 800e232:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800e234:	2300      	movs	r3, #0
 800e236:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b20      	cmp	r3, #32
 800e242:	f040 8149 	bne.w	800e4d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e254:	d005      	beq.n	800e262 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	2b08      	cmp	r3, #8
 800e25a:	d002      	beq.n	800e262 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d130      	bne.n	800e2c4 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e262:	4b99      	ldr	r3, [pc, #612]	; (800e4c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	08db      	lsrs	r3, r3, #3
 800e268:	4a98      	ldr	r2, [pc, #608]	; (800e4cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800e26a:	fba2 2303 	umull	r2, r3, r2, r3
 800e26e:	0a1a      	lsrs	r2, r3, #8
 800e270:	4613      	mov	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	4413      	add	r3, r2
 800e276:	009a      	lsls	r2, r3, #2
 800e278:	4413      	add	r3, r2
 800e27a:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	3b01      	subs	r3, #1
 800e280:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d116      	bne.n	800e2b6 <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2220      	movs	r2, #32
 800e292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	f043 0220 	orr.w	r2, r3, #32
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e111      	b.n	800e4da <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	f003 0302 	and.w	r3, r3, #2
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d0db      	beq.n	800e27c <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d101      	bne.n	800e2d2 <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	e103      	b.n	800e4da <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d007      	beq.n	800e2f8 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f042 0201 	orr.w	r2, r2, #1
 800e2f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2221      	movs	r2, #33	; 0x21
 800e30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2210      	movs	r2, #16
 800e314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	893a      	ldrh	r2, [r7, #8]
 800e328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e32e:	b29a      	uxth	r2, r3
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e338:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e33a:	897a      	ldrh	r2, [r7, #10]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e344:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 808d 	beq.w	800e46a <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e354:	2b00      	cmp	r3, #0
 800e356:	d022      	beq.n	800e39e <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e35c:	4a5c      	ldr	r2, [pc, #368]	; (800e4d0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800e35e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e364:	4a5b      	ldr	r2, [pc, #364]	; (800e4d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800e366:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36c:	2200      	movs	r2, #0
 800e36e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e374:	2200      	movs	r2, #0
 800e376:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	4619      	mov	r1, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3310      	adds	r3, #16
 800e388:	461a      	mov	r2, r3
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e38e:	f7f9 feb0 	bl	80080f2 <HAL_DMA_Start_IT>
 800e392:	4603      	mov	r3, r0
 800e394:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800e396:	7ffb      	ldrb	r3, [r7, #31]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d152      	bne.n	800e442 <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800e39c:	e013      	b.n	800e3c6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e089      	b.n	800e4da <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3d4:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	2b11      	cmp	r3, #17
 800e3da:	d10c      	bne.n	800e3f6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e3e2:	d003      	beq.n	800e3ec <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e3ea:	d101      	bne.n	800e3f0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e000      	b.n	800e3f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d107      	bne.n	800e406 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e404:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e410:	2b04      	cmp	r3, #4
 800e412:	d005      	beq.n	800e420 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	2b20      	cmp	r3, #32
 800e418:	d002      	beq.n	800e420 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	2b10      	cmp	r3, #16
 800e41e:	d107      	bne.n	800e430 <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	685a      	ldr	r2, [r3, #4]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e42e:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	685a      	ldr	r2, [r3, #4]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e43e:	605a      	str	r2, [r3, #4]
 800e440:	e03f      	b.n	800e4c2 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2220      	movs	r2, #32
 800e446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e456:	f043 0210 	orr.w	r2, r3, #16
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	e037      	b.n	800e4da <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e478:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	2b11      	cmp	r3, #17
 800e47e:	d10c      	bne.n	800e49a <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e486:	d003      	beq.n	800e490 <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e48e:	d101      	bne.n	800e494 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e490:	2301      	movs	r3, #1
 800e492:	e000      	b.n	800e496 <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e494:	2300      	movs	r3, #0
 800e496:	2b01      	cmp	r3, #1
 800e498:	d107      	bne.n	800e4aa <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4a8:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e4c0:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	e009      	b.n	800e4da <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e4c6:	bf00      	nop
 800e4c8:	20000058 	.word	0x20000058
 800e4cc:	14f8b589 	.word	0x14f8b589
 800e4d0:	08011025 	.word	0x08011025
 800e4d4:	080111cf 	.word	0x080111cf
  }
  else
  {
    return HAL_BUSY;
 800e4d8:	2302      	movs	r3, #2
  }
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3720      	adds	r7, #32
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e4e2:	b480      	push	{r7}
 800e4e4:	b089      	sub	sp, #36	; 0x24
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	60f8      	str	r0, [r7, #12]
 800e4ea:	607a      	str	r2, [r7, #4]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	817b      	strh	r3, [r7, #10]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e4fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e502:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	2b20      	cmp	r3, #32
 800e50e:	f040 80da 	bne.w	800e6c6 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e520:	d005      	beq.n	800e52e <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	2b08      	cmp	r3, #8
 800e526:	d002      	beq.n	800e52e <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d130      	bne.n	800e590 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e52e:	4b69      	ldr	r3, [pc, #420]	; (800e6d4 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	08db      	lsrs	r3, r3, #3
 800e534:	4a68      	ldr	r2, [pc, #416]	; (800e6d8 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e536:	fba2 2303 	umull	r2, r3, r2, r3
 800e53a:	0a1a      	lsrs	r2, r3, #8
 800e53c:	4613      	mov	r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	009a      	lsls	r2, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	3b01      	subs	r3, #1
 800e54c:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d116      	bne.n	800e582 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2220      	movs	r2, #32
 800e55e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2200      	movs	r2, #0
 800e566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56e:	f043 0220 	orr.w	r2, r3, #32
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e57e:	2301      	movs	r3, #1
 800e580:	e0a2      	b.n	800e6c8 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	699b      	ldr	r3, [r3, #24]
 800e588:	f003 0302 	and.w	r3, r3, #2
 800e58c:	2b02      	cmp	r3, #2
 800e58e:	d0db      	beq.n	800e548 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e596:	2b01      	cmp	r3, #1
 800e598:	d101      	bne.n	800e59e <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e59a:	2302      	movs	r3, #2
 800e59c:	e094      	b.n	800e6c8 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d007      	beq.n	800e5c4 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f042 0201 	orr.w	r2, r2, #1
 800e5c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	681a      	ldr	r2, [r3, #0]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2222      	movs	r2, #34	; 0x22
 800e5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2210      	movs	r2, #16
 800e5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	893a      	ldrh	r2, [r7, #8]
 800e5f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e604:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e606:	897a      	ldrh	r2, [r7, #10]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e610:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e616:	b29b      	uxth	r3, r3
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d126      	bne.n	800e66a <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61e:	2b20      	cmp	r3, #32
 800e620:	d002      	beq.n	800e628 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	2b10      	cmp	r3, #16
 800e626:	d120      	bne.n	800e66a <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2b12      	cmp	r3, #18
 800e62c:	d114      	bne.n	800e658 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e63c:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e64c:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e654:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e656:	e010      	b.n	800e67a <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e666:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e668:	e007      	b.n	800e67a <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e678:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	2b12      	cmp	r3, #18
 800e67e:	d10c      	bne.n	800e69a <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e686:	d003      	beq.n	800e690 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e68e:	d101      	bne.n	800e694 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e690:	2301      	movs	r3, #1
 800e692:	e000      	b.n	800e696 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e694:	2300      	movs	r3, #0
 800e696:	2b01      	cmp	r3, #1
 800e698:	d107      	bne.n	800e6aa <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e6a8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6859      	ldr	r1, [r3, #4]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	69fa      	ldr	r2, [r7, #28]
 800e6be:	430a      	orrs	r2, r1
 800e6c0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e000      	b.n	800e6c8 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e6c6:	2302      	movs	r3, #2
  }
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3724      	adds	r7, #36	; 0x24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	20000058 	.word	0x20000058
 800e6d8:	14f8b589 	.word	0x14f8b589

0800e6dc <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	607a      	str	r2, [r7, #4]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	817b      	strh	r3, [r7, #10]
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e6f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e6fc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e704:	b2db      	uxtb	r3, r3
 800e706:	2b20      	cmp	r3, #32
 800e708:	f040 8199 	bne.w	800ea3e <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e71a:	d005      	beq.n	800e728 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	2b08      	cmp	r3, #8
 800e720:	d002      	beq.n	800e728 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	2b01      	cmp	r3, #1
 800e726:	d130      	bne.n	800e78a <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e728:	4b8f      	ldr	r3, [pc, #572]	; (800e968 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	08db      	lsrs	r3, r3, #3
 800e72e:	4a8f      	ldr	r2, [pc, #572]	; (800e96c <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800e730:	fba2 2303 	umull	r2, r3, r2, r3
 800e734:	0a1a      	lsrs	r2, r3, #8
 800e736:	4613      	mov	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	009a      	lsls	r2, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	3b01      	subs	r3, #1
 800e746:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d116      	bne.n	800e77c <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2220      	movs	r2, #32
 800e758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e768:	f043 0220 	orr.w	r2, r3, #32
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e778:	2301      	movs	r3, #1
 800e77a:	e161      	b.n	800ea40 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	f003 0302 	and.w	r3, r3, #2
 800e786:	2b02      	cmp	r3, #2
 800e788:	d0db      	beq.n	800e742 <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e790:	2b01      	cmp	r3, #1
 800e792:	d101      	bne.n	800e798 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800e794:	2302      	movs	r3, #2
 800e796:	e153      	b.n	800ea40 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f003 0301 	and.w	r3, r3, #1
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d007      	beq.n	800e7be <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f042 0201 	orr.w	r2, r2, #1
 800e7bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7cc:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e7dc:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2222      	movs	r2, #34	; 0x22
 800e7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2210      	movs	r2, #16
 800e7ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	893a      	ldrh	r2, [r7, #8]
 800e7fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e804:	b29a      	uxth	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e80e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e810:	897a      	ldrh	r2, [r7, #10]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81a:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 80de 	beq.w	800e9e2 <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	d12a      	bne.n	800e886 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	2b20      	cmp	r3, #32
 800e834:	d002      	beq.n	800e83c <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	2b10      	cmp	r3, #16
 800e83a:	d124      	bne.n	800e886 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	2b12      	cmp	r3, #18
 800e840:	d118      	bne.n	800e874 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e850:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e860:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e870:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e872:	e022      	b.n	800e8ba <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e882:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e884:	e019      	b.n	800e8ba <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e894:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e898:	2b20      	cmp	r3, #32
 800e89a:	d006      	beq.n	800e8aa <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e8a2:	d002      	beq.n	800e8aa <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	2b10      	cmp	r3, #16
 800e8a8:	d107      	bne.n	800e8ba <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e8b8:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d022      	beq.n	800e908 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c6:	4a2a      	ldr	r2, [pc, #168]	; (800e970 <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800e8c8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ce:	4a29      	ldr	r2, [pc, #164]	; (800e974 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800e8d0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8de:	2200      	movs	r2, #0
 800e8e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3310      	adds	r3, #16
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8f8:	f7f9 fbfb 	bl	80080f2 <HAL_DMA_Start_IT>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800e900:	7efb      	ldrb	r3, [r7, #27]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d159      	bne.n	800e9ba <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800e906:	e013      	b.n	800e930 <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2220      	movs	r2, #32
 800e90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	e087      	b.n	800ea40 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2b12      	cmp	r3, #18
 800e934:	d10c      	bne.n	800e950 <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e93c:	d003      	beq.n	800e946 <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e944:	d101      	bne.n	800e94a <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800e946:	2301      	movs	r3, #1
 800e948:	e000      	b.n	800e94c <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800e94a:	2300      	movs	r3, #0
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d113      	bne.n	800e978 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e95e:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800e960:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e964:	61fb      	str	r3, [r7, #28]
 800e966:	e00a      	b.n	800e97e <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800e968:	20000058 	.word	0x20000058
 800e96c:	14f8b589 	.word	0x14f8b589
 800e970:	08011025 	.word	0x08011025
 800e974:	080111cf 	.word	0x080111cf
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800e978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e97c:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	2b04      	cmp	r3, #4
 800e98a:	d005      	beq.n	800e998 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	2b20      	cmp	r3, #32
 800e990:	d002      	beq.n	800e998 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	2b10      	cmp	r3, #16
 800e996:	d107      	bne.n	800e9a8 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9a6:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6859      	ldr	r1, [r3, #4]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69fa      	ldr	r2, [r7, #28]
 800e9b4:	430a      	orrs	r2, r1
 800e9b6:	605a      	str	r2, [r3, #4]
 800e9b8:	e03f      	b.n	800ea3a <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2220      	movs	r2, #32
 800e9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ce:	f043 0210 	orr.w	r2, r3, #16
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e02e      	b.n	800ea40 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9f0:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b12      	cmp	r3, #18
 800e9f6:	d10c      	bne.n	800ea12 <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e9fe:	d003      	beq.n	800ea08 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ea06:	d101      	bne.n	800ea0c <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e000      	b.n	800ea0e <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d107      	bne.n	800ea22 <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea20:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	6859      	ldr	r1, [r3, #4]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	69fa      	ldr	r2, [r7, #28]
 800ea36:	430a      	orrs	r2, r1
 800ea38:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e000      	b.n	800ea40 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800ea3e:	2302      	movs	r3, #2
  }
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3720      	adds	r7, #32
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	603b      	str	r3, [r7, #0]
 800ea54:	4613      	mov	r3, r2
 800ea56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea64:	2b28      	cmp	r3, #40	; 0x28
 800ea66:	d15b      	bne.n	800eb20 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800ea6e:	88fb      	ldrh	r3, [r7, #6]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800ea74:	2301      	movs	r3, #1
 800ea76:	e054      	b.n	800eb22 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d101      	bne.n	800ea86 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800ea82:	2302      	movs	r3, #2
 800ea84:	e04d      	b.n	800eb22 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d007      	beq.n	800eaac <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f042 0201 	orr.w	r2, r2, #1
 800eaaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eaba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2229      	movs	r2, #41	; 0x29
 800eac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2220      	movs	r2, #32
 800eac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	88fa      	ldrh	r2, [r7, #6]
 800eadc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800eaee:	2300      	movs	r3, #0
 800eaf0:	617b      	str	r3, [r7, #20]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	617b      	str	r3, [r7, #20]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	617b      	str	r3, [r7, #20]
 800eb02:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800eb1a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	e000      	b.n	800eb22 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800eb20:	2302      	movs	r3, #2
  }
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	371c      	adds	r7, #28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b086      	sub	sp, #24
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	60f8      	str	r0, [r7, #12]
 800eb36:	60b9      	str	r1, [r7, #8]
 800eb38:	603b      	str	r3, [r7, #0]
 800eb3a:	4613      	mov	r3, r2
 800eb3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eb4a:	2b28      	cmp	r3, #40	; 0x28
 800eb4c:	f040 811e 	bne.w	800ed8c <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d002      	beq.n	800eb5c <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800eb56:	88fb      	ldrh	r3, [r7, #6]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e116      	b.n	800ed8e <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d101      	bne.n	800eb6e <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800eb6a:	2302      	movs	r3, #2
 800eb6c:	e10f      	b.n	800ed8e <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800eb84:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb90:	d127      	bne.n	800ebe2 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eba0:	d14c      	bne.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d048      	beq.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ebb8:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebbe:	4a76      	ldr	r2, [pc, #472]	; (800ed98 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800ebc0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f9 fb5b 	bl	8008282 <HAL_DMA_Abort_IT>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d034      	beq.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ebdc:	4610      	mov	r0, r2
 800ebde:	4798      	blx	r3
 800ebe0:	e02c      	b.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b29      	cmp	r3, #41	; 0x29
 800ebec:	d126      	bne.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebfc:	d11e      	bne.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec0c:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d012      	beq.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1a:	4a5f      	ldr	r2, [pc, #380]	; (800ed98 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800ec1c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f9 fb2d 	bl	8008282 <HAL_DMA_Abort_IT>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d006      	beq.n	800ec3c <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ec38:	4610      	mov	r0, r2
 800ec3a:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f003 0301 	and.w	r3, r3, #1
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d007      	beq.n	800ec5a <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f042 0201 	orr.w	r2, r2, #1
 800ec58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec68:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2229      	movs	r2, #41	; 0x29
 800ec6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2220      	movs	r2, #32
 800ec76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	88fa      	ldrh	r2, [r7, #6]
 800ec8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d022      	beq.n	800ecea <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca8:	4a3c      	ldr	r2, [pc, #240]	; (800ed9c <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800ecaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb0:	4a3b      	ldr	r2, [pc, #236]	; (800eda0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800ecb2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb8:	2200      	movs	r2, #0
 800ecba:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eccc:	4619      	mov	r1, r3
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3310      	adds	r3, #16
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecda:	f7f9 fa0a 	bl	80080f2 <HAL_DMA_Start_IT>
 800ecde:	4603      	mov	r3, r0
 800ece0:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d13d      	bne.n	800ed64 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800ece8:	e013      	b.n	800ed12 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2228      	movs	r2, #40	; 0x28
 800ecee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecfe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e03d      	b.n	800ed8e <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ed22:	2300      	movs	r3, #0
 800ed24:	613b      	str	r3, [r7, #16]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	695b      	ldr	r3, [r3, #20]
 800ed2c:	613b      	str	r3, [r7, #16]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	699b      	ldr	r3, [r3, #24]
 800ed34:	613b      	str	r3, [r7, #16]
 800ed36:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	685a      	ldr	r2, [r3, #4]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ed4e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed5e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	e014      	b.n	800ed8e <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2220      	movs	r2, #32
 800ed68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed78:	f043 0210 	orr.w	r2, r3, #16
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e000      	b.n	800ed8e <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800ed8c:	2302      	movs	r3, #2
  }
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	08011249 	.word	0x08011249
 800ed9c:	08011025 	.word	0x08011025
 800eda0:	080111cf 	.word	0x080111cf

0800eda4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b087      	sub	sp, #28
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	4613      	mov	r3, r2
 800edb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800edc0:	2b28      	cmp	r3, #40	; 0x28
 800edc2:	d15b      	bne.n	800ee7c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d002      	beq.n	800edd0 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800edca:	88fb      	ldrh	r3, [r7, #6]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e054      	b.n	800ee7e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d101      	bne.n	800ede2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800edde:	2302      	movs	r3, #2
 800ede0:	e04d      	b.n	800ee7e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 0301 	and.w	r3, r3, #1
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d007      	beq.n	800ee08 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f042 0201 	orr.w	r2, r2, #1
 800ee06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	222a      	movs	r2, #42	; 0x2a
 800ee1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2220      	movs	r2, #32
 800ee24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	88fa      	ldrh	r2, [r7, #6]
 800ee38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	617b      	str	r3, [r7, #20]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	617b      	str	r3, [r7, #20]
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	617b      	str	r3, [r7, #20]
 800ee5e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	685a      	ldr	r2, [r3, #4]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ee76:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e000      	b.n	800ee7e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ee7c:	2302      	movs	r3, #2
  }
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	371c      	adds	r7, #28
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr

0800ee8a <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b086      	sub	sp, #24
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	603b      	str	r3, [r7, #0]
 800ee96:	4613      	mov	r3, r2
 800ee98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eea6:	2b28      	cmp	r3, #40	; 0x28
 800eea8:	f040 811e 	bne.w	800f0e8 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800eeb2:	88fb      	ldrh	r3, [r7, #6]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e116      	b.n	800f0ea <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d101      	bne.n	800eeca <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800eec6:	2302      	movs	r3, #2
 800eec8:	e10f      	b.n	800f0ea <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2201      	movs	r2, #1
 800eece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	685a      	ldr	r2, [r3, #4]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800eee0:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b2a      	cmp	r3, #42	; 0x2a
 800eeec:	d127      	bne.n	800ef3e <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eefc:	d14c      	bne.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d048      	beq.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	685a      	ldr	r2, [r3, #4]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef14:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef1a:	4a76      	ldr	r2, [pc, #472]	; (800f0f4 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800ef1c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7f9 f9ad 	bl	8008282 <HAL_DMA_Abort_IT>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d034      	beq.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ef38:	4610      	mov	r0, r2
 800ef3a:	4798      	blx	r3
 800ef3c:	e02c      	b.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b29      	cmp	r3, #41	; 0x29
 800ef48:	d126      	bne.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef58:	d11e      	bne.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef68:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d012      	beq.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef76:	4a5f      	ldr	r2, [pc, #380]	; (800f0f4 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800ef78:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7f9 f97f 	bl	8008282 <HAL_DMA_Abort_IT>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d006      	beq.n	800ef98 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ef94:	4610      	mov	r0, r2
 800ef96:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d007      	beq.n	800efb6 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f042 0201 	orr.w	r2, r2, #1
 800efb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efc4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	222a      	movs	r2, #42	; 0x2a
 800efca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2220      	movs	r2, #32
 800efd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	88fa      	ldrh	r2, [r7, #6]
 800efe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800efec:	b29a      	uxth	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800effc:	2b00      	cmp	r3, #0
 800effe:	d022      	beq.n	800f046 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f004:	4a3c      	ldr	r2, [pc, #240]	; (800f0f8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800f006:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00c:	4a3b      	ldr	r2, [pc, #236]	; (800f0fc <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800f00e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f014:	2200      	movs	r2, #0
 800f016:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01c:	2200      	movs	r2, #0
 800f01e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	3310      	adds	r3, #16
 800f02a:	4619      	mov	r1, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f030:	461a      	mov	r2, r3
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f036:	f7f9 f85c 	bl	80080f2 <HAL_DMA_Start_IT>
 800f03a:	4603      	mov	r3, r0
 800f03c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800f03e:	7dfb      	ldrb	r3, [r7, #23]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d13d      	bne.n	800f0c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800f044:	e013      	b.n	800f06e <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2228      	movs	r2, #40	; 0x28
 800f04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f05a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	e03d      	b.n	800f0ea <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f07c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f07e:	2300      	movs	r3, #0
 800f080:	613b      	str	r3, [r7, #16]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	695b      	ldr	r3, [r3, #20]
 800f088:	613b      	str	r3, [r7, #16]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	699b      	ldr	r3, [r3, #24]
 800f090:	613b      	str	r3, [r7, #16]
 800f092:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	685a      	ldr	r2, [r3, #4]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0aa:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	685a      	ldr	r2, [r3, #4]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f0ba:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	e014      	b.n	800f0ea <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2220      	movs	r2, #32
 800f0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d4:	f043 0210 	orr.w	r2, r3, #16
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e000      	b.n	800f0ea <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800f0e8:	2302      	movs	r3, #2
  }
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	08011249 	.word	0x08011249
 800f0f8:	08011025 	.word	0x08011025
 800f0fc:	080111cf 	.word	0x080111cf

0800f100 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	2b20      	cmp	r3, #32
 800f112:	d124      	bne.n	800f15e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2228      	movs	r2, #40	; 0x28
 800f118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b01      	cmp	r3, #1
 800f128:	d007      	beq.n	800f13a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f042 0201 	orr.w	r2, r2, #1
 800f138:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f148:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	685a      	ldr	r2, [r3, #4]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f158:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	e000      	b.n	800f160 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800f15e:	2302      	movs	r3, #2
  }
}
 800f160:	4618      	mov	r0, r3
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	2b28      	cmp	r3, #40	; 0x28
 800f17e:	d129      	bne.n	800f1d4 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f186:	b2db      	uxtb	r3, r3
 800f188:	f003 0303 	and.w	r3, r3, #3
 800f18c:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f194:	b2db      	uxtb	r3, r3
 800f196:	461a      	mov	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	431a      	orrs	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2220      	movs	r2, #32
 800f1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1be:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f1ce:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	e000      	b.n	800f1d6 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800f1d4:	2302      	movs	r3, #2
  }
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr

0800f1e2 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b084      	sub	sp, #16
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
 800f1ea:	460b      	mov	r3, r1
 800f1ec:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1f4:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	f003 0302 	and.w	r3, r3, #2
 800f200:	2b02      	cmp	r3, #2
 800f202:	d138      	bne.n	800f276 <HAL_I2C_Master_Abort_IT+0x94>
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	2b10      	cmp	r3, #16
 800f208:	d135      	bne.n	800f276 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f210:	2b01      	cmp	r3, #1
 800f212:	d101      	bne.n	800f218 <HAL_I2C_Master_Abort_IT+0x36>
 800f214:	2302      	movs	r3, #2
 800f216:	e02f      	b.n	800f278 <HAL_I2C_Master_Abort_IT+0x96>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2260      	movs	r2, #96	; 0x60
 800f22a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f23c:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f24c:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f262:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f001 fad9 	bl	8010824 <I2C_ITError>

    return HAL_OK;
 800f272:	2300      	movs	r3, #0
 800f274:	e000      	b.n	800f278 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800f276:	2301      	movs	r3, #1
  }
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b088      	sub	sp, #32
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800f288:	2300      	movs	r3, #0
 800f28a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f298:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
 800f2ac:	2b10      	cmp	r3, #16
 800f2ae:	d003      	beq.n	800f2b8 <HAL_I2C_EV_IRQHandler+0x38>
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
 800f2b2:	2b40      	cmp	r3, #64	; 0x40
 800f2b4:	f040 80c1 	bne.w	800f43a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	695b      	ldr	r3, [r3, #20]
 800f2c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	f003 0301 	and.w	r3, r3, #1
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10d      	bne.n	800f2ee <HAL_I2C_EV_IRQHandler+0x6e>
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f2d8:	d003      	beq.n	800f2e2 <HAL_I2C_EV_IRQHandler+0x62>
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f2e0:	d101      	bne.n	800f2e6 <HAL_I2C_EV_IRQHandler+0x66>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <HAL_I2C_EV_IRQHandler+0x68>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	f000 8132 	beq.w	800f552 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	f003 0301 	and.w	r3, r3, #1
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00c      	beq.n	800f312 <HAL_I2C_EV_IRQHandler+0x92>
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	0a5b      	lsrs	r3, r3, #9
 800f2fc:	f003 0301 	and.w	r3, r3, #1
 800f300:	2b00      	cmp	r3, #0
 800f302:	d006      	beq.n	800f312 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f002 fa94 	bl	8011832 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 fda1 	bl	800fe52 <I2C_Master_SB>
 800f310:	e092      	b.n	800f438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	08db      	lsrs	r3, r3, #3
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d009      	beq.n	800f332 <HAL_I2C_EV_IRQHandler+0xb2>
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	0a5b      	lsrs	r3, r3, #9
 800f322:	f003 0301 	and.w	r3, r3, #1
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 fe17 	bl	800ff5e <I2C_Master_ADD10>
 800f330:	e082      	b.n	800f438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	085b      	lsrs	r3, r3, #1
 800f336:	f003 0301 	and.w	r3, r3, #1
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d009      	beq.n	800f352 <HAL_I2C_EV_IRQHandler+0xd2>
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	0a5b      	lsrs	r3, r3, #9
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d003      	beq.n	800f352 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fe31 	bl	800ffb2 <I2C_Master_ADDR>
 800f350:	e072      	b.n	800f438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	089b      	lsrs	r3, r3, #2
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d03b      	beq.n	800f3d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f36c:	f000 80f3 	beq.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	09db      	lsrs	r3, r3, #7
 800f374:	f003 0301 	and.w	r3, r3, #1
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d00f      	beq.n	800f39c <HAL_I2C_EV_IRQHandler+0x11c>
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	0a9b      	lsrs	r3, r3, #10
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b00      	cmp	r3, #0
 800f386:	d009      	beq.n	800f39c <HAL_I2C_EV_IRQHandler+0x11c>
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	089b      	lsrs	r3, r3, #2
 800f38c:	f003 0301 	and.w	r3, r3, #1
 800f390:	2b00      	cmp	r3, #0
 800f392:	d103      	bne.n	800f39c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 fa1b 	bl	800f7d0 <I2C_MasterTransmit_TXE>
 800f39a:	e04d      	b.n	800f438 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	089b      	lsrs	r3, r3, #2
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 80d6 	beq.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	0a5b      	lsrs	r3, r3, #9
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 80cf 	beq.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800f3b8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ba:	2b21      	cmp	r3, #33	; 0x21
 800f3bc:	d103      	bne.n	800f3c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 faa2 	bl	800f908 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f3c4:	e0c7      	b.n	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800f3c6:	7bfb      	ldrb	r3, [r7, #15]
 800f3c8:	2b40      	cmp	r3, #64	; 0x40
 800f3ca:	f040 80c4 	bne.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fb10 	bl	800f9f4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f3d4:	e0bf      	b.n	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3e4:	f000 80b7 	beq.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	099b      	lsrs	r3, r3, #6
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00f      	beq.n	800f414 <HAL_I2C_EV_IRQHandler+0x194>
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	0a9b      	lsrs	r3, r3, #10
 800f3f8:	f003 0301 	and.w	r3, r3, #1
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d009      	beq.n	800f414 <HAL_I2C_EV_IRQHandler+0x194>
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	089b      	lsrs	r3, r3, #2
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d103      	bne.n	800f414 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fb85 	bl	800fb1c <I2C_MasterReceive_RXNE>
 800f412:	e011      	b.n	800f438 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	089b      	lsrs	r3, r3, #2
 800f418:	f003 0301 	and.w	r3, r3, #1
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f000 809a 	beq.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	0a5b      	lsrs	r3, r3, #9
 800f426:	f003 0301 	and.w	r3, r3, #1
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 8093 	beq.w	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fc24 	bl	800fc7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f436:	e08e      	b.n	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f438:	e08d      	b.n	800f556 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d004      	beq.n	800f44c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	695b      	ldr	r3, [r3, #20]
 800f448:	61fb      	str	r3, [r7, #28]
 800f44a:	e007      	b.n	800f45c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	699b      	ldr	r3, [r3, #24]
 800f452:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	695b      	ldr	r3, [r3, #20]
 800f45a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	085b      	lsrs	r3, r3, #1
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b00      	cmp	r3, #0
 800f466:	d012      	beq.n	800f48e <HAL_I2C_EV_IRQHandler+0x20e>
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	0a5b      	lsrs	r3, r3, #9
 800f46c:	f003 0301 	and.w	r3, r3, #1
 800f470:	2b00      	cmp	r3, #0
 800f472:	d00c      	beq.n	800f48e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d003      	beq.n	800f484 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	699b      	ldr	r3, [r3, #24]
 800f482:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f484:	69b9      	ldr	r1, [r7, #24]
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 ffe2 	bl	8010450 <I2C_Slave_ADDR>
 800f48c:	e066      	b.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	091b      	lsrs	r3, r3, #4
 800f492:	f003 0301 	and.w	r3, r3, #1
 800f496:	2b00      	cmp	r3, #0
 800f498:	d009      	beq.n	800f4ae <HAL_I2C_EV_IRQHandler+0x22e>
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	0a5b      	lsrs	r3, r3, #9
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d003      	beq.n	800f4ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f001 f81c 	bl	80104e4 <I2C_Slave_STOPF>
 800f4ac:	e056      	b.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f4ae:	7bbb      	ldrb	r3, [r7, #14]
 800f4b0:	2b21      	cmp	r3, #33	; 0x21
 800f4b2:	d002      	beq.n	800f4ba <HAL_I2C_EV_IRQHandler+0x23a>
 800f4b4:	7bbb      	ldrb	r3, [r7, #14]
 800f4b6:	2b29      	cmp	r3, #41	; 0x29
 800f4b8:	d125      	bne.n	800f506 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	09db      	lsrs	r3, r3, #7
 800f4be:	f003 0301 	and.w	r3, r3, #1
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00f      	beq.n	800f4e6 <HAL_I2C_EV_IRQHandler+0x266>
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	0a9b      	lsrs	r3, r3, #10
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d009      	beq.n	800f4e6 <HAL_I2C_EV_IRQHandler+0x266>
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	089b      	lsrs	r3, r3, #2
 800f4d6:	f003 0301 	and.w	r3, r3, #1
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d103      	bne.n	800f4e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fef8 	bl	80102d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f4e4:	e039      	b.n	800f55a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	089b      	lsrs	r3, r3, #2
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d033      	beq.n	800f55a <HAL_I2C_EV_IRQHandler+0x2da>
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	0a5b      	lsrs	r3, r3, #9
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d02d      	beq.n	800f55a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 ff25 	bl	801034e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f504:	e029      	b.n	800f55a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	099b      	lsrs	r3, r3, #6
 800f50a:	f003 0301 	and.w	r3, r3, #1
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00f      	beq.n	800f532 <HAL_I2C_EV_IRQHandler+0x2b2>
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	0a9b      	lsrs	r3, r3, #10
 800f516:	f003 0301 	and.w	r3, r3, #1
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d009      	beq.n	800f532 <HAL_I2C_EV_IRQHandler+0x2b2>
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	089b      	lsrs	r3, r3, #2
 800f522:	f003 0301 	and.w	r3, r3, #1
 800f526:	2b00      	cmp	r3, #0
 800f528:	d103      	bne.n	800f532 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 ff30 	bl	8010390 <I2C_SlaveReceive_RXNE>
 800f530:	e014      	b.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	089b      	lsrs	r3, r3, #2
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00e      	beq.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	0a5b      	lsrs	r3, r3, #9
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	2b00      	cmp	r3, #0
 800f548:	d008      	beq.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 ff5e 	bl	801040c <I2C_SlaveReceive_BTF>
 800f550:	e004      	b.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f552:	bf00      	nop
 800f554:	e002      	b.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f556:	bf00      	nop
 800f558:	e000      	b.n	800f55c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f55a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f55c:	3720      	adds	r7, #32
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b08a      	sub	sp, #40	; 0x28
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f57a:	2300      	movs	r3, #0
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f584:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f586:	6a3b      	ldr	r3, [r7, #32]
 800f588:	0a1b      	lsrs	r3, r3, #8
 800f58a:	f003 0301 	and.w	r3, r3, #1
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d00e      	beq.n	800f5b0 <HAL_I2C_ER_IRQHandler+0x4e>
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	0a1b      	lsrs	r3, r3, #8
 800f596:	f003 0301 	and.w	r3, r3, #1
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d008      	beq.n	800f5b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a0:	f043 0301 	orr.w	r3, r3, #1
 800f5a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f5ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f5b0:	6a3b      	ldr	r3, [r7, #32]
 800f5b2:	0a5b      	lsrs	r3, r3, #9
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00e      	beq.n	800f5da <HAL_I2C_ER_IRQHandler+0x78>
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	0a1b      	lsrs	r3, r3, #8
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d008      	beq.n	800f5da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	f043 0302 	orr.w	r3, r3, #2
 800f5ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f5d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	0a9b      	lsrs	r3, r3, #10
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d03f      	beq.n	800f666 <HAL_I2C_ER_IRQHandler+0x104>
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	0a1b      	lsrs	r3, r3, #8
 800f5ea:	f003 0301 	and.w	r3, r3, #1
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d039      	beq.n	800f666 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f5f2:	7efb      	ldrb	r3, [r7, #27]
 800f5f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f604:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f60a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f60c:	7ebb      	ldrb	r3, [r7, #26]
 800f60e:	2b20      	cmp	r3, #32
 800f610:	d112      	bne.n	800f638 <HAL_I2C_ER_IRQHandler+0xd6>
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10f      	bne.n	800f638 <HAL_I2C_ER_IRQHandler+0xd6>
 800f618:	7cfb      	ldrb	r3, [r7, #19]
 800f61a:	2b21      	cmp	r3, #33	; 0x21
 800f61c:	d008      	beq.n	800f630 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f61e:	7cfb      	ldrb	r3, [r7, #19]
 800f620:	2b29      	cmp	r3, #41	; 0x29
 800f622:	d005      	beq.n	800f630 <HAL_I2C_ER_IRQHandler+0xce>
 800f624:	7cfb      	ldrb	r3, [r7, #19]
 800f626:	2b28      	cmp	r3, #40	; 0x28
 800f628:	d106      	bne.n	800f638 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2b21      	cmp	r3, #33	; 0x21
 800f62e:	d103      	bne.n	800f638 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f001 f887 	bl	8010744 <I2C_Slave_AF>
 800f636:	e016      	b.n	800f666 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f640:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f644:	f043 0304 	orr.w	r3, r3, #4
 800f648:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f64a:	7efb      	ldrb	r3, [r7, #27]
 800f64c:	2b10      	cmp	r3, #16
 800f64e:	d002      	beq.n	800f656 <HAL_I2C_ER_IRQHandler+0xf4>
 800f650:	7efb      	ldrb	r3, [r7, #27]
 800f652:	2b40      	cmp	r3, #64	; 0x40
 800f654:	d107      	bne.n	800f666 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f664:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f666:	6a3b      	ldr	r3, [r7, #32]
 800f668:	0adb      	lsrs	r3, r3, #11
 800f66a:	f003 0301 	and.w	r3, r3, #1
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00e      	beq.n	800f690 <HAL_I2C_ER_IRQHandler+0x12e>
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	0a1b      	lsrs	r3, r3, #8
 800f676:	f003 0301 	and.w	r3, r3, #1
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d008      	beq.n	800f690 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f680:	f043 0308 	orr.w	r3, r3, #8
 800f684:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f68e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	2b00      	cmp	r3, #0
 800f694:	d008      	beq.n	800f6a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	431a      	orrs	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f001 f8be 	bl	8010824 <I2C_ITError>
  }
}
 800f6a8:	bf00      	nop
 800f6aa:	3728      	adds	r7, #40	; 0x28
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f6f4:	bf00      	nop
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	70fb      	strb	r3, [r7, #3]
 800f70c:	4613      	mov	r3, r2
 800f70e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f78e:	b2db      	uxtb	r3, r3
}
 800f790:	4618      	mov	r0, r3
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7aa:	b2db      	uxtb	r3, r3
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d150      	bne.n	800f898 <I2C_MasterTransmit_TXE+0xc8>
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
 800f7f8:	2b21      	cmp	r3, #33	; 0x21
 800f7fa:	d14d      	bne.n	800f898 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2b08      	cmp	r3, #8
 800f800:	d01d      	beq.n	800f83e <I2C_MasterTransmit_TXE+0x6e>
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b20      	cmp	r3, #32
 800f806:	d01a      	beq.n	800f83e <I2C_MasterTransmit_TXE+0x6e>
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f80e:	d016      	beq.n	800f83e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f81e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2211      	movs	r2, #17
 800f824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2220      	movs	r2, #32
 800f832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7ff ff3a 	bl	800f6b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f83c:	e060      	b.n	800f900 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	685a      	ldr	r2, [r3, #4]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f84c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f85c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2200      	movs	r2, #0
 800f862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2220      	movs	r2, #32
 800f868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f872:	b2db      	uxtb	r3, r3
 800f874:	2b40      	cmp	r3, #64	; 0x40
 800f876:	d107      	bne.n	800f888 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff ff55 	bl	800f730 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f886:	e03b      	b.n	800f900 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff ff0d 	bl	800f6b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f896:	e033      	b.n	800f900 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800f898:	7bfb      	ldrb	r3, [r7, #15]
 800f89a:	2b21      	cmp	r3, #33	; 0x21
 800f89c:	d005      	beq.n	800f8aa <I2C_MasterTransmit_TXE+0xda>
 800f89e:	7bbb      	ldrb	r3, [r7, #14]
 800f8a0:	2b40      	cmp	r3, #64	; 0x40
 800f8a2:	d12d      	bne.n	800f900 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800f8a4:	7bfb      	ldrb	r3, [r7, #15]
 800f8a6:	2b22      	cmp	r3, #34	; 0x22
 800f8a8:	d12a      	bne.n	800f900 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d108      	bne.n	800f8c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	685a      	ldr	r2, [r3, #4]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f8c4:	e01c      	b.n	800f900 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b40      	cmp	r3, #64	; 0x40
 800f8d0:	d103      	bne.n	800f8da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 f88e 	bl	800f9f4 <I2C_MemoryTransmit_TXE_BTF>
}
 800f8d8:	e012      	b.n	800f900 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8de:	781a      	ldrb	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ea:	1c5a      	adds	r2, r3, #1
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f8fe:	e7ff      	b.n	800f900 <I2C_MasterTransmit_TXE+0x130>
 800f900:	bf00      	nop
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f914:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b21      	cmp	r3, #33	; 0x21
 800f920:	d164      	bne.n	800f9ec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f926:	b29b      	uxth	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d012      	beq.n	800f952 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	781a      	ldrb	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f946:	b29b      	uxth	r3, r3
 800f948:	3b01      	subs	r3, #1
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800f950:	e04c      	b.n	800f9ec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b08      	cmp	r3, #8
 800f956:	d01d      	beq.n	800f994 <I2C_MasterTransmit_BTF+0x8c>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b20      	cmp	r3, #32
 800f95c:	d01a      	beq.n	800f994 <I2C_MasterTransmit_BTF+0x8c>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f964:	d016      	beq.n	800f994 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	685a      	ldr	r2, [r3, #4]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f974:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2211      	movs	r2, #17
 800f97a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2220      	movs	r2, #32
 800f988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7ff fe8f 	bl	800f6b0 <HAL_I2C_MasterTxCpltCallback>
}
 800f992:	e02b      	b.n	800f9ec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	685a      	ldr	r2, [r3, #4]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f9a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2220      	movs	r2, #32
 800f9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b40      	cmp	r3, #64	; 0x40
 800f9cc:	d107      	bne.n	800f9de <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7ff feaa 	bl	800f730 <HAL_I2C_MemTxCpltCallback>
}
 800f9dc:	e006      	b.n	800f9ec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7ff fe62 	bl	800f6b0 <HAL_I2C_MasterTxCpltCallback>
}
 800f9ec:	bf00      	nop
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d11d      	bne.n	800fa48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d10b      	bne.n	800fa2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa18:	b2da      	uxtb	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa24:	1c9a      	adds	r2, r3, #2
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800fa2a:	e073      	b.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	121b      	asrs	r3, r3, #8
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa40:	1c5a      	adds	r2, r3, #1
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fa46:	e065      	b.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d10b      	bne.n	800fa68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa54:	b2da      	uxtb	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fa66:	e055      	b.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d151      	bne.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	2b22      	cmp	r3, #34	; 0x22
 800fa74:	d10d      	bne.n	800fa92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fa90:	e040      	b.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d015      	beq.n	800fac8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
 800fa9e:	2b21      	cmp	r3, #33	; 0x21
 800faa0:	d112      	bne.n	800fac8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa6:	781a      	ldrb	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab2:	1c5a      	adds	r2, r3, #1
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	3b01      	subs	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fac6:	e025      	b.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800facc:	b29b      	uxth	r3, r3
 800face:	2b00      	cmp	r3, #0
 800fad0:	d120      	bne.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
 800fad4:	2b21      	cmp	r3, #33	; 0x21
 800fad6:	d11d      	bne.n	800fb14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fae6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800faf6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2220      	movs	r2, #32
 800fb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7ff fe0e 	bl	800f730 <HAL_I2C_MemTxCpltCallback>
}
 800fb14:	bf00      	nop
 800fb16:	3710      	adds	r7, #16
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b22      	cmp	r3, #34	; 0x22
 800fb2e:	f040 80a2 	bne.w	800fc76 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d921      	bls.n	800fb84 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	691a      	ldr	r2, [r3, #16]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4a:	b2d2      	uxtb	r2, r2
 800fb4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	2b03      	cmp	r3, #3
 800fb6e:	f040 8082 	bne.w	800fc76 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	685a      	ldr	r2, [r3, #4]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb80:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800fb82:	e078      	b.n	800fc76 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb88:	2b02      	cmp	r3, #2
 800fb8a:	d074      	beq.n	800fc76 <I2C_MasterReceive_RXNE+0x15a>
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d002      	beq.n	800fb98 <I2C_MasterReceive_RXNE+0x7c>
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d16e      	bne.n	800fc76 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f001 fd92 	bl	80116c2 <I2C_WaitOnSTOPRequestThroughIT>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d142      	bne.n	800fc2a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbb2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fbc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	691a      	ldr	r2, [r3, #16]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd6:	1c5a      	adds	r2, r3, #1
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	3b01      	subs	r3, #1
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2220      	movs	r2, #32
 800fbee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	2b40      	cmp	r3, #64	; 0x40
 800fbfc:	d10a      	bne.n	800fc14 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff fd99 	bl	800f744 <HAL_I2C_MemRxCpltCallback>
}
 800fc12:	e030      	b.n	800fc76 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2212      	movs	r2, #18
 800fc20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7ff fd4e 	bl	800f6c4 <HAL_I2C_MasterRxCpltCallback>
}
 800fc28:	e025      	b.n	800fc76 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fc38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	691a      	ldr	r2, [r3, #16]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc44:	b2d2      	uxtb	r2, r2
 800fc46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4c:	1c5a      	adds	r2, r3, #1
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2220      	movs	r2, #32
 800fc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff fd71 	bl	800f758 <HAL_I2C_ErrorCallback>
}
 800fc76:	bf00      	nop
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b084      	sub	sp, #16
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	2b04      	cmp	r3, #4
 800fc94:	d11b      	bne.n	800fcce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fca4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	691a      	ldr	r2, [r3, #16]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb0:	b2d2      	uxtb	r2, r2
 800fcb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800fccc:	e0bd      	b.n	800fe4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	2b03      	cmp	r3, #3
 800fcd6:	d129      	bne.n	800fd2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	685a      	ldr	r2, [r3, #4]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fce6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2b04      	cmp	r3, #4
 800fcec:	d00a      	beq.n	800fd04 <I2C_MasterReceive_BTF+0x86>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d007      	beq.n	800fd04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	691a      	ldr	r2, [r3, #16]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0e:	b2d2      	uxtb	r2, r2
 800fd10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	3b01      	subs	r3, #1
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fd2a:	e08e      	b.n	800fe4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d176      	bne.n	800fe24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d002      	beq.n	800fd42 <I2C_MasterReceive_BTF+0xc4>
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2b10      	cmp	r3, #16
 800fd40:	d108      	bne.n	800fd54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd50:	601a      	str	r2, [r3, #0]
 800fd52:	e019      	b.n	800fd88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	d002      	beq.n	800fd60 <I2C_MasterReceive_BTF+0xe2>
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d108      	bne.n	800fd72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	e00a      	b.n	800fd88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2b10      	cmp	r3, #16
 800fd76:	d007      	beq.n	800fd88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	691a      	ldr	r2, [r3, #16]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd92:	b2d2      	uxtb	r2, r2
 800fd94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	3b01      	subs	r3, #1
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	691a      	ldr	r2, [r3, #16]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb8:	b2d2      	uxtb	r2, r2
 800fdba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc0:	1c5a      	adds	r2, r3, #1
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fde2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2220      	movs	r2, #32
 800fde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b40      	cmp	r3, #64	; 0x40
 800fdf6:	d10a      	bne.n	800fe0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fc9c 	bl	800f744 <HAL_I2C_MemRxCpltCallback>
}
 800fe0c:	e01d      	b.n	800fe4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2212      	movs	r2, #18
 800fe1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff fc51 	bl	800f6c4 <HAL_I2C_MasterRxCpltCallback>
}
 800fe22:	e012      	b.n	800fe4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	691a      	ldr	r2, [r3, #16]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	b2d2      	uxtb	r2, r2
 800fe30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	3b01      	subs	r3, #1
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fe4a:	bf00      	nop
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800fe52:	b480      	push	{r7}
 800fe54:	b083      	sub	sp, #12
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b40      	cmp	r3, #64	; 0x40
 800fe64:	d117      	bne.n	800fe96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d109      	bne.n	800fe82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	461a      	mov	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800fe7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800fe80:	e067      	b.n	800ff52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe86:	b2db      	uxtb	r3, r3
 800fe88:	f043 0301 	orr.w	r3, r3, #1
 800fe8c:	b2da      	uxtb	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	611a      	str	r2, [r3, #16]
}
 800fe94:	e05d      	b.n	800ff52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	691b      	ldr	r3, [r3, #16]
 800fe9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe9e:	d133      	bne.n	800ff08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	2b21      	cmp	r3, #33	; 0x21
 800feaa:	d109      	bne.n	800fec0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	461a      	mov	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800febc:	611a      	str	r2, [r3, #16]
 800febe:	e008      	b.n	800fed2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	f043 0301 	orr.w	r3, r3, #1
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <I2C_Master_SB+0x92>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d108      	bne.n	800fef6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d032      	beq.n	800ff52 <I2C_Master_SB+0x100>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d02d      	beq.n	800ff52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff04:	605a      	str	r2, [r3, #4]
}
 800ff06:	e024      	b.n	800ff52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10e      	bne.n	800ff2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	11db      	asrs	r3, r3, #7
 800ff18:	b2db      	uxtb	r3, r3
 800ff1a:	f003 0306 	and.w	r3, r3, #6
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	f063 030f 	orn	r3, r3, #15
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	611a      	str	r2, [r3, #16]
}
 800ff2c:	e011      	b.n	800ff52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d10d      	bne.n	800ff52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	11db      	asrs	r3, r3, #7
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	f003 0306 	and.w	r3, r3, #6
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	f063 030e 	orn	r3, r3, #14
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	611a      	str	r2, [r3, #16]
}
 800ff52:	bf00      	nop
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr

0800ff5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ff5e:	b480      	push	{r7}
 800ff60:	b083      	sub	sp, #12
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d004      	beq.n	800ff84 <I2C_Master_ADD10+0x26>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d108      	bne.n	800ff96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d00c      	beq.n	800ffa6 <I2C_Master_ADD10+0x48>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d007      	beq.n	800ffa6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	685a      	ldr	r2, [r3, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffa4:	605a      	str	r2, [r3, #4]
  }
}
 800ffa6:	bf00      	nop
 800ffa8:	370c      	adds	r7, #12
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ffb2:	b480      	push	{r7}
 800ffb4:	b091      	sub	sp, #68	; 0x44
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ffc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b22      	cmp	r3, #34	; 0x22
 800ffda:	f040 8169 	bne.w	80102b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10f      	bne.n	8010006 <I2C_Master_ADDR+0x54>
 800ffe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ffea:	2b40      	cmp	r3, #64	; 0x40
 800ffec:	d10b      	bne.n	8010006 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ffee:	2300      	movs	r3, #0
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	695b      	ldr	r3, [r3, #20]
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	699b      	ldr	r3, [r3, #24]
 8010000:	60fb      	str	r3, [r7, #12]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	e160      	b.n	80102c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801000a:	2b00      	cmp	r3, #0
 801000c:	d11d      	bne.n	801004a <I2C_Master_ADDR+0x98>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010016:	d118      	bne.n	801004a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010018:	2300      	movs	r3, #0
 801001a:	613b      	str	r3, [r7, #16]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	613b      	str	r3, [r7, #16]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	699b      	ldr	r3, [r3, #24]
 801002a:	613b      	str	r3, [r7, #16]
 801002c:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801003c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	651a      	str	r2, [r3, #80]	; 0x50
 8010048:	e13e      	b.n	80102c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801004e:	b29b      	uxth	r3, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	d113      	bne.n	801007c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010054:	2300      	movs	r3, #0
 8010056:	617b      	str	r3, [r7, #20]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	699b      	ldr	r3, [r3, #24]
 8010066:	617b      	str	r3, [r7, #20]
 8010068:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010078:	601a      	str	r2, [r3, #0]
 801007a:	e115      	b.n	80102a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010080:	b29b      	uxth	r3, r3
 8010082:	2b01      	cmp	r3, #1
 8010084:	f040 808a 	bne.w	801019c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801008e:	d137      	bne.n	8010100 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801009e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100ae:	d113      	bne.n	80100d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80100c0:	2300      	movs	r3, #0
 80100c2:	61bb      	str	r3, [r7, #24]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	695b      	ldr	r3, [r3, #20]
 80100ca:	61bb      	str	r3, [r7, #24]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	699b      	ldr	r3, [r3, #24]
 80100d2:	61bb      	str	r3, [r7, #24]
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	e0e7      	b.n	80102a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80100d8:	2300      	movs	r3, #0
 80100da:	61fb      	str	r3, [r7, #28]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	695b      	ldr	r3, [r3, #20]
 80100e2:	61fb      	str	r3, [r7, #28]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	699b      	ldr	r3, [r3, #24]
 80100ea:	61fb      	str	r3, [r7, #28]
 80100ec:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	e0d3      	b.n	80102a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8010100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010102:	2b08      	cmp	r3, #8
 8010104:	d02e      	beq.n	8010164 <I2C_Master_ADDR+0x1b2>
 8010106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010108:	2b20      	cmp	r3, #32
 801010a:	d02b      	beq.n	8010164 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801010c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801010e:	2b12      	cmp	r3, #18
 8010110:	d102      	bne.n	8010118 <I2C_Master_ADDR+0x166>
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	2b01      	cmp	r3, #1
 8010116:	d125      	bne.n	8010164 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8010118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011a:	2b04      	cmp	r3, #4
 801011c:	d00e      	beq.n	801013c <I2C_Master_ADDR+0x18a>
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	2b02      	cmp	r3, #2
 8010122:	d00b      	beq.n	801013c <I2C_Master_ADDR+0x18a>
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	2b10      	cmp	r3, #16
 8010128:	d008      	beq.n	801013c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	e007      	b.n	801014c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801014a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801014c:	2300      	movs	r3, #0
 801014e:	623b      	str	r3, [r7, #32]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	695b      	ldr	r3, [r3, #20]
 8010156:	623b      	str	r3, [r7, #32]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	623b      	str	r3, [r7, #32]
 8010160:	6a3b      	ldr	r3, [r7, #32]
 8010162:	e0a1      	b.n	80102a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010172:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010174:	2300      	movs	r3, #0
 8010176:	627b      	str	r3, [r7, #36]	; 0x24
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	695b      	ldr	r3, [r3, #20]
 801017e:	627b      	str	r3, [r7, #36]	; 0x24
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	699b      	ldr	r3, [r3, #24]
 8010186:	627b      	str	r3, [r7, #36]	; 0x24
 8010188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010198:	601a      	str	r2, [r3, #0]
 801019a:	e085      	b.n	80102a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d14d      	bne.n	8010242 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	d016      	beq.n	80101da <I2C_Master_ADDR+0x228>
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	d013      	beq.n	80101da <I2C_Master_ADDR+0x228>
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	2b10      	cmp	r3, #16
 80101b6:	d010      	beq.n	80101da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101d6:	601a      	str	r2, [r3, #0]
 80101d8:	e007      	b.n	80101ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80101f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80101f8:	d117      	bne.n	801022a <I2C_Master_ADDR+0x278>
 80101fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010200:	d00b      	beq.n	801021a <I2C_Master_ADDR+0x268>
 8010202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010204:	2b01      	cmp	r3, #1
 8010206:	d008      	beq.n	801021a <I2C_Master_ADDR+0x268>
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	2b08      	cmp	r3, #8
 801020c:	d005      	beq.n	801021a <I2C_Master_ADDR+0x268>
 801020e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010210:	2b10      	cmp	r3, #16
 8010212:	d002      	beq.n	801021a <I2C_Master_ADDR+0x268>
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	2b20      	cmp	r3, #32
 8010218:	d107      	bne.n	801022a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	685a      	ldr	r2, [r3, #4]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010228:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801022a:	2300      	movs	r3, #0
 801022c:	62bb      	str	r3, [r7, #40]	; 0x28
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	695b      	ldr	r3, [r3, #20]
 8010234:	62bb      	str	r3, [r7, #40]	; 0x28
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	62bb      	str	r3, [r7, #40]	; 0x28
 801023e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010240:	e032      	b.n	80102a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010250:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801025c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010260:	d117      	bne.n	8010292 <I2C_Master_ADDR+0x2e0>
 8010262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010268:	d00b      	beq.n	8010282 <I2C_Master_ADDR+0x2d0>
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	2b01      	cmp	r3, #1
 801026e:	d008      	beq.n	8010282 <I2C_Master_ADDR+0x2d0>
 8010270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010272:	2b08      	cmp	r3, #8
 8010274:	d005      	beq.n	8010282 <I2C_Master_ADDR+0x2d0>
 8010276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010278:	2b10      	cmp	r3, #16
 801027a:	d002      	beq.n	8010282 <I2C_Master_ADDR+0x2d0>
 801027c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027e:	2b20      	cmp	r3, #32
 8010280:	d107      	bne.n	8010292 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	685a      	ldr	r2, [r3, #4]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010290:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010292:	2300      	movs	r3, #0
 8010294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	695b      	ldr	r3, [r3, #20]
 801029c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	699b      	ldr	r3, [r3, #24]
 80102a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80102ae:	e00b      	b.n	80102c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80102b0:	2300      	movs	r3, #0
 80102b2:	633b      	str	r3, [r7, #48]	; 0x30
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	695b      	ldr	r3, [r3, #20]
 80102ba:	633b      	str	r3, [r7, #48]	; 0x30
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	699b      	ldr	r3, [r3, #24]
 80102c2:	633b      	str	r3, [r7, #48]	; 0x30
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80102c6:	e7ff      	b.n	80102c8 <I2C_Master_ADDR+0x316>
 80102c8:	bf00      	nop
 80102ca:	3744      	adds	r7, #68	; 0x44
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d02b      	beq.n	8010346 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f2:	781a      	ldrb	r2, [r3, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010308:	b29b      	uxth	r3, r3
 801030a:	3b01      	subs	r3, #1
 801030c:	b29a      	uxth	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010316:	b29b      	uxth	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d114      	bne.n	8010346 <I2C_SlaveTransmit_TXE+0x72>
 801031c:	7bfb      	ldrb	r3, [r7, #15]
 801031e:	2b29      	cmp	r3, #41	; 0x29
 8010320:	d111      	bne.n	8010346 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	685a      	ldr	r2, [r3, #4]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010330:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2221      	movs	r2, #33	; 0x21
 8010336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2228      	movs	r2, #40	; 0x28
 801033c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f7ff f9c9 	bl	800f6d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8010346:	bf00      	nop
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801034e:	b480      	push	{r7}
 8010350:	b083      	sub	sp, #12
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801035a:	b29b      	uxth	r3, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	d011      	beq.n	8010384 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010364:	781a      	ldrb	r2, [r3, #0]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801037a:	b29b      	uxth	r3, r3
 801037c:	3b01      	subs	r3, #1
 801037e:	b29a      	uxth	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010384:	bf00      	nop
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801039e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d02c      	beq.n	8010404 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	691a      	ldr	r2, [r3, #16]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b4:	b2d2      	uxtb	r2, r2
 80103b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103bc:	1c5a      	adds	r2, r3, #1
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	3b01      	subs	r3, #1
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d114      	bne.n	8010404 <I2C_SlaveReceive_RXNE+0x74>
 80103da:	7bfb      	ldrb	r3, [r7, #15]
 80103dc:	2b2a      	cmp	r3, #42	; 0x2a
 80103de:	d111      	bne.n	8010404 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685a      	ldr	r2, [r3, #4]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2222      	movs	r2, #34	; 0x22
 80103f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2228      	movs	r2, #40	; 0x28
 80103fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f7ff f974 	bl	800f6ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8010404:	bf00      	nop
 8010406:	3710      	adds	r7, #16
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010418:	b29b      	uxth	r3, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	d012      	beq.n	8010444 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	691a      	ldr	r2, [r3, #16]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010428:	b2d2      	uxtb	r2, r2
 801042a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010430:	1c5a      	adds	r2, r3, #1
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801043a:	b29b      	uxth	r3, r3
 801043c:	3b01      	subs	r3, #1
 801043e:	b29a      	uxth	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010444:	bf00      	nop
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801045a:	2300      	movs	r3, #0
 801045c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010464:	b2db      	uxtb	r3, r3
 8010466:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801046a:	2b28      	cmp	r3, #40	; 0x28
 801046c:	d127      	bne.n	80104be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	685a      	ldr	r2, [r3, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801047c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	089b      	lsrs	r3, r3, #2
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	2b00      	cmp	r3, #0
 8010488:	d101      	bne.n	801048e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801048a:	2301      	movs	r3, #1
 801048c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	09db      	lsrs	r3, r3, #7
 8010492:	f003 0301 	and.w	r3, r3, #1
 8010496:	2b00      	cmp	r3, #0
 8010498:	d103      	bne.n	80104a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	68db      	ldr	r3, [r3, #12]
 801049e:	81bb      	strh	r3, [r7, #12]
 80104a0:	e002      	b.n	80104a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80104b0:	89ba      	ldrh	r2, [r7, #12]
 80104b2:	7bfb      	ldrb	r3, [r7, #15]
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7ff f922 	bl	800f700 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80104bc:	e00e      	b.n	80104dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104be:	2300      	movs	r3, #0
 80104c0:	60bb      	str	r3, [r7, #8]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	60bb      	str	r3, [r7, #8]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	699b      	ldr	r3, [r3, #24]
 80104d0:	60bb      	str	r3, [r7, #8]
 80104d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80104dc:	bf00      	nop
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	685a      	ldr	r2, [r3, #4]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010502:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8010504:	2300      	movs	r3, #0
 8010506:	60bb      	str	r3, [r7, #8]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	60bb      	str	r3, [r7, #8]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f042 0201 	orr.w	r2, r2, #1
 801051e:	601a      	str	r2, [r3, #0]
 8010520:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010530:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801053c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010540:	d172      	bne.n	8010628 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010542:	7bfb      	ldrb	r3, [r7, #15]
 8010544:	2b22      	cmp	r3, #34	; 0x22
 8010546:	d002      	beq.n	801054e <I2C_Slave_STOPF+0x6a>
 8010548:	7bfb      	ldrb	r3, [r7, #15]
 801054a:	2b2a      	cmp	r3, #42	; 0x2a
 801054c:	d135      	bne.n	80105ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	b29a      	uxth	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010560:	b29b      	uxth	r3, r3
 8010562:	2b00      	cmp	r3, #0
 8010564:	d005      	beq.n	8010572 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801056a:	f043 0204 	orr.w	r2, r3, #4
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	685a      	ldr	r2, [r3, #4]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010580:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010586:	4618      	mov	r0, r3
 8010588:	f7f8 f9c1 	bl	800890e <HAL_DMA_GetState>
 801058c:	4603      	mov	r3, r0
 801058e:	2b01      	cmp	r3, #1
 8010590:	d049      	beq.n	8010626 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010596:	4a69      	ldr	r2, [pc, #420]	; (801073c <I2C_Slave_STOPF+0x258>)
 8010598:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801059e:	4618      	mov	r0, r3
 80105a0:	f7f7 fe6f 	bl	8008282 <HAL_DMA_Abort_IT>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d03d      	beq.n	8010626 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80105b4:	4610      	mov	r0, r2
 80105b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80105b8:	e035      	b.n	8010626 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d005      	beq.n	80105de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d6:	f043 0204 	orr.w	r2, r3, #4
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685a      	ldr	r2, [r3, #4]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80105ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f8 f98b 	bl	800890e <HAL_DMA_GetState>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d014      	beq.n	8010628 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010602:	4a4e      	ldr	r2, [pc, #312]	; (801073c <I2C_Slave_STOPF+0x258>)
 8010604:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801060a:	4618      	mov	r0, r3
 801060c:	f7f7 fe39 	bl	8008282 <HAL_DMA_Abort_IT>
 8010610:	4603      	mov	r3, r0
 8010612:	2b00      	cmp	r3, #0
 8010614:	d008      	beq.n	8010628 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801061a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
 8010624:	e000      	b.n	8010628 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010626:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801062c:	b29b      	uxth	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d03e      	beq.n	80106b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	695b      	ldr	r3, [r3, #20]
 8010638:	f003 0304 	and.w	r3, r3, #4
 801063c:	2b04      	cmp	r3, #4
 801063e:	d112      	bne.n	8010666 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	691a      	ldr	r2, [r3, #16]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064a:	b2d2      	uxtb	r2, r2
 801064c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010652:	1c5a      	adds	r2, r3, #1
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801065c:	b29b      	uxth	r3, r3
 801065e:	3b01      	subs	r3, #1
 8010660:	b29a      	uxth	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	695b      	ldr	r3, [r3, #20]
 801066c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010670:	2b40      	cmp	r3, #64	; 0x40
 8010672:	d112      	bne.n	801069a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	691a      	ldr	r2, [r3, #16]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801067e:	b2d2      	uxtb	r2, r2
 8010680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010686:	1c5a      	adds	r2, r3, #1
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010690:	b29b      	uxth	r3, r3
 8010692:	3b01      	subs	r3, #1
 8010694:	b29a      	uxth	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801069e:	b29b      	uxth	r3, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a8:	f043 0204 	orr.w	r2, r3, #4
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d003      	beq.n	80106c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f000 f8b3 	bl	8010824 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80106be:	e039      	b.n	8010734 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	2b2a      	cmp	r3, #42	; 0x2a
 80106c4:	d109      	bne.n	80106da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2228      	movs	r2, #40	; 0x28
 80106d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff f809 	bl	800f6ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b28      	cmp	r3, #40	; 0x28
 80106e4:	d111      	bne.n	801070a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4a15      	ldr	r2, [pc, #84]	; (8010740 <I2C_Slave_STOPF+0x25c>)
 80106ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2220      	movs	r2, #32
 80106f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff f80a 	bl	800f71c <HAL_I2C_ListenCpltCallback>
}
 8010708:	e014      	b.n	8010734 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801070e:	2b22      	cmp	r3, #34	; 0x22
 8010710:	d002      	beq.n	8010718 <I2C_Slave_STOPF+0x234>
 8010712:	7bfb      	ldrb	r3, [r7, #15]
 8010714:	2b22      	cmp	r3, #34	; 0x22
 8010716:	d10d      	bne.n	8010734 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2220      	movs	r2, #32
 8010722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f7fe ffdc 	bl	800f6ec <HAL_I2C_SlaveRxCpltCallback>
}
 8010734:	bf00      	nop
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	08011249 	.word	0x08011249
 8010740:	ffff0000 	.word	0xffff0000

08010744 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010752:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010758:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b08      	cmp	r3, #8
 801075e:	d002      	beq.n	8010766 <I2C_Slave_AF+0x22>
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b20      	cmp	r3, #32
 8010764:	d129      	bne.n	80107ba <I2C_Slave_AF+0x76>
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	2b28      	cmp	r3, #40	; 0x28
 801076a:	d126      	bne.n	80107ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a2c      	ldr	r2, [pc, #176]	; (8010820 <I2C_Slave_AF+0xdc>)
 8010770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	685a      	ldr	r2, [r3, #4]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010780:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801078a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801079a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2200      	movs	r2, #0
 80107a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2220      	movs	r2, #32
 80107a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7fe ffb2 	bl	800f71c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80107b8:	e02e      	b.n	8010818 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	2b21      	cmp	r3, #33	; 0x21
 80107be:	d126      	bne.n	801080e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4a17      	ldr	r2, [pc, #92]	; (8010820 <I2C_Slave_AF+0xdc>)
 80107c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2221      	movs	r2, #33	; 0x21
 80107ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2220      	movs	r2, #32
 80107d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2200      	movs	r2, #0
 80107d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	685a      	ldr	r2, [r3, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80107ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80107f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010804:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7fe ff66 	bl	800f6d8 <HAL_I2C_SlaveTxCpltCallback>
}
 801080c:	e004      	b.n	8010818 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010816:	615a      	str	r2, [r3, #20]
}
 8010818:	bf00      	nop
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	ffff0000 	.word	0xffff0000

08010824 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010832:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801083a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	2b10      	cmp	r3, #16
 8010840:	d002      	beq.n	8010848 <I2C_ITError+0x24>
 8010842:	7bbb      	ldrb	r3, [r7, #14]
 8010844:	2b40      	cmp	r3, #64	; 0x40
 8010846:	d10a      	bne.n	801085e <I2C_ITError+0x3a>
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	2b22      	cmp	r3, #34	; 0x22
 801084c:	d107      	bne.n	801085e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801085c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801085e:	7bfb      	ldrb	r3, [r7, #15]
 8010860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010864:	2b28      	cmp	r3, #40	; 0x28
 8010866:	d107      	bne.n	8010878 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2228      	movs	r2, #40	; 0x28
 8010872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010876:	e015      	b.n	80108a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010886:	d00a      	beq.n	801089e <I2C_ITError+0x7a>
 8010888:	7bfb      	ldrb	r3, [r7, #15]
 801088a:	2b60      	cmp	r3, #96	; 0x60
 801088c:	d007      	beq.n	801089e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2220      	movs	r2, #32
 8010892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2200      	movs	r2, #0
 801089a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80108b2:	d162      	bne.n	801097a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	685a      	ldr	r2, [r3, #4]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80108c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d020      	beq.n	8010914 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108d6:	4a6a      	ldr	r2, [pc, #424]	; (8010a80 <I2C_ITError+0x25c>)
 80108d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108de:	4618      	mov	r0, r3
 80108e0:	f7f7 fccf 	bl	8008282 <HAL_DMA_Abort_IT>
 80108e4:	4603      	mov	r3, r0
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f000 8089 	beq.w	80109fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f022 0201 	bic.w	r2, r2, #1
 80108fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2220      	movs	r2, #32
 8010900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801090e:	4610      	mov	r0, r2
 8010910:	4798      	blx	r3
 8010912:	e074      	b.n	80109fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010918:	4a59      	ldr	r2, [pc, #356]	; (8010a80 <I2C_ITError+0x25c>)
 801091a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010920:	4618      	mov	r0, r3
 8010922:	f7f7 fcae 	bl	8008282 <HAL_DMA_Abort_IT>
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d068      	beq.n	80109fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	695b      	ldr	r3, [r3, #20]
 8010932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010936:	2b40      	cmp	r3, #64	; 0x40
 8010938:	d10b      	bne.n	8010952 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	691a      	ldr	r2, [r3, #16]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010944:	b2d2      	uxtb	r2, r2
 8010946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094c:	1c5a      	adds	r2, r3, #1
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f022 0201 	bic.w	r2, r2, #1
 8010960:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2220      	movs	r2, #32
 8010966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010974:	4610      	mov	r0, r2
 8010976:	4798      	blx	r3
 8010978:	e041      	b.n	80109fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b60      	cmp	r3, #96	; 0x60
 8010984:	d125      	bne.n	80109d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2220      	movs	r2, #32
 801098a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	695b      	ldr	r3, [r3, #20]
 801099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801099e:	2b40      	cmp	r3, #64	; 0x40
 80109a0:	d10b      	bne.n	80109ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	691a      	ldr	r2, [r3, #16]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ac:	b2d2      	uxtb	r2, r2
 80109ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b4:	1c5a      	adds	r2, r3, #1
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f022 0201 	bic.w	r2, r2, #1
 80109c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7fe fece 	bl	800f76c <HAL_I2C_AbortCpltCallback>
 80109d0:	e015      	b.n	80109fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	695b      	ldr	r3, [r3, #20]
 80109d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109dc:	2b40      	cmp	r3, #64	; 0x40
 80109de:	d10b      	bne.n	80109f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	691a      	ldr	r2, [r3, #16]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ea:	b2d2      	uxtb	r2, r2
 80109ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f2:	1c5a      	adds	r2, r3, #1
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7fe fead 	bl	800f758 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	f003 0301 	and.w	r3, r3, #1
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d10e      	bne.n	8010a2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d109      	bne.n	8010a2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d104      	bne.n	8010a2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d007      	beq.n	8010a3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	685a      	ldr	r2, [r3, #4]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010a3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a48:	f003 0304 	and.w	r3, r3, #4
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	d113      	bne.n	8010a78 <I2C_ITError+0x254>
 8010a50:	7bfb      	ldrb	r3, [r7, #15]
 8010a52:	2b28      	cmp	r3, #40	; 0x28
 8010a54:	d110      	bne.n	8010a78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4a0a      	ldr	r2, [pc, #40]	; (8010a84 <I2C_ITError+0x260>)
 8010a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2220      	movs	r2, #32
 8010a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7fe fe52 	bl	800f71c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010a78:	bf00      	nop
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	08011249 	.word	0x08011249
 8010a84:	ffff0000 	.word	0xffff0000

08010a88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b088      	sub	sp, #32
 8010a8c:	af02      	add	r7, sp, #8
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	607a      	str	r2, [r7, #4]
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	460b      	mov	r3, r1
 8010a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	2b08      	cmp	r3, #8
 8010aa2:	d006      	beq.n	8010ab2 <I2C_MasterRequestWrite+0x2a>
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d003      	beq.n	8010ab2 <I2C_MasterRequestWrite+0x2a>
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010ab0:	d108      	bne.n	8010ac4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ac0:	601a      	str	r2, [r3, #0]
 8010ac2:	e00b      	b.n	8010adc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac8:	2b12      	cmp	r3, #18
 8010aca:	d107      	bne.n	8010adc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ada:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f000 fc55 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00d      	beq.n	8010b10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b02:	d103      	bne.n	8010b0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	e035      	b.n	8010b7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	691b      	ldr	r3, [r3, #16]
 8010b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b18:	d108      	bne.n	8010b2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010b1a:	897b      	ldrh	r3, [r7, #10]
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	461a      	mov	r2, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010b28:	611a      	str	r2, [r3, #16]
 8010b2a:	e01b      	b.n	8010b64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010b2c:	897b      	ldrh	r3, [r7, #10]
 8010b2e:	11db      	asrs	r3, r3, #7
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	f003 0306 	and.w	r3, r3, #6
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	f063 030f 	orn	r3, r3, #15
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	490e      	ldr	r1, [pc, #56]	; (8010b84 <I2C_MasterRequestWrite+0xfc>)
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f000 fc7b 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d001      	beq.n	8010b5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8010b56:	2301      	movs	r3, #1
 8010b58:	e010      	b.n	8010b7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010b5a:	897b      	ldrh	r3, [r7, #10]
 8010b5c:	b2da      	uxtb	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	4907      	ldr	r1, [pc, #28]	; (8010b88 <I2C_MasterRequestWrite+0x100>)
 8010b6a:	68f8      	ldr	r0, [r7, #12]
 8010b6c:	f000 fc6b 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d001      	beq.n	8010b7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8010b76:	2301      	movs	r3, #1
 8010b78:	e000      	b.n	8010b7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010b7a:	2300      	movs	r3, #0
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3718      	adds	r7, #24
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	00010008 	.word	0x00010008
 8010b88:	00010002 	.word	0x00010002

08010b8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af02      	add	r7, sp, #8
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	607a      	str	r2, [r7, #4]
 8010b96:	603b      	str	r3, [r7, #0]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b08      	cmp	r3, #8
 8010bb6:	d006      	beq.n	8010bc6 <I2C_MasterRequestRead+0x3a>
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d003      	beq.n	8010bc6 <I2C_MasterRequestRead+0x3a>
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010bc4:	d108      	bne.n	8010bd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010bd4:	601a      	str	r2, [r3, #0]
 8010bd6:	e00b      	b.n	8010bf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bdc:	2b11      	cmp	r3, #17
 8010bde:	d107      	bne.n	8010bf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 fbcb 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00d      	beq.n	8010c24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c16:	d103      	bne.n	8010c20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010c20:	2303      	movs	r3, #3
 8010c22:	e079      	b.n	8010d18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c2c:	d108      	bne.n	8010c40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010c2e:	897b      	ldrh	r3, [r7, #10]
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	f043 0301 	orr.w	r3, r3, #1
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	611a      	str	r2, [r3, #16]
 8010c3e:	e05f      	b.n	8010d00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010c40:	897b      	ldrh	r3, [r7, #10]
 8010c42:	11db      	asrs	r3, r3, #7
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	f003 0306 	and.w	r3, r3, #6
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	f063 030f 	orn	r3, r3, #15
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	4930      	ldr	r1, [pc, #192]	; (8010d20 <I2C_MasterRequestRead+0x194>)
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f000 fbf1 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d001      	beq.n	8010c6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e054      	b.n	8010d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010c6e:	897b      	ldrh	r3, [r7, #10]
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	4929      	ldr	r1, [pc, #164]	; (8010d24 <I2C_MasterRequestRead+0x198>)
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f000 fbe1 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010c84:	4603      	mov	r3, r0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d001      	beq.n	8010c8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e044      	b.n	8010d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010c8e:	2300      	movs	r3, #0
 8010c90:	613b      	str	r3, [r7, #16]
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	695b      	ldr	r3, [r3, #20]
 8010c98:	613b      	str	r3, [r7, #16]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	699b      	ldr	r3, [r3, #24]
 8010ca0:	613b      	str	r3, [r7, #16]
 8010ca2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010cb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	9300      	str	r3, [sp, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f000 fb69 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00d      	beq.n	8010ce8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cda:	d103      	bne.n	8010ce4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ce2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8010ce4:	2303      	movs	r3, #3
 8010ce6:	e017      	b.n	8010d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8010ce8:	897b      	ldrh	r3, [r7, #10]
 8010cea:	11db      	asrs	r3, r3, #7
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	f003 0306 	and.w	r3, r3, #6
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	f063 030e 	orn	r3, r3, #14
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	4907      	ldr	r1, [pc, #28]	; (8010d24 <I2C_MasterRequestRead+0x198>)
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f000 fb9d 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8010d12:	2301      	movs	r3, #1
 8010d14:	e000      	b.n	8010d18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8010d16:	2300      	movs	r3, #0
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3718      	adds	r7, #24
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	00010008 	.word	0x00010008
 8010d24:	00010002 	.word	0x00010002

08010d28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b088      	sub	sp, #32
 8010d2c:	af02      	add	r7, sp, #8
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	4608      	mov	r0, r1
 8010d32:	4611      	mov	r1, r2
 8010d34:	461a      	mov	r2, r3
 8010d36:	4603      	mov	r3, r0
 8010d38:	817b      	strh	r3, [r7, #10]
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	813b      	strh	r3, [r7, #8]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	681a      	ldr	r2, [r3, #0]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d54:	9300      	str	r3, [sp, #0]
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f000 fb1a 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d00d      	beq.n	8010d86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d78:	d103      	bne.n	8010d82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010d82:	2303      	movs	r3, #3
 8010d84:	e05f      	b.n	8010e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010d86:	897b      	ldrh	r3, [r7, #10]
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d98:	6a3a      	ldr	r2, [r7, #32]
 8010d9a:	492d      	ldr	r1, [pc, #180]	; (8010e50 <I2C_RequestMemoryWrite+0x128>)
 8010d9c:	68f8      	ldr	r0, [r7, #12]
 8010d9e:	f000 fb52 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d001      	beq.n	8010dac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8010da8:	2301      	movs	r3, #1
 8010daa:	e04c      	b.n	8010e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010dac:	2300      	movs	r3, #0
 8010dae:	617b      	str	r3, [r7, #20]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	695b      	ldr	r3, [r3, #20]
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	699b      	ldr	r3, [r3, #24]
 8010dbe:	617b      	str	r3, [r7, #20]
 8010dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc4:	6a39      	ldr	r1, [r7, #32]
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 fbbc 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00d      	beq.n	8010dee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	d107      	bne.n	8010dea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010dea:	2301      	movs	r3, #1
 8010dec:	e02b      	b.n	8010e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010dee:	88fb      	ldrh	r3, [r7, #6]
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d105      	bne.n	8010e00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010df4:	893b      	ldrh	r3, [r7, #8]
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	611a      	str	r2, [r3, #16]
 8010dfe:	e021      	b.n	8010e44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010e00:	893b      	ldrh	r3, [r7, #8]
 8010e02:	0a1b      	lsrs	r3, r3, #8
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	b2da      	uxtb	r2, r3
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e10:	6a39      	ldr	r1, [r7, #32]
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f000 fb96 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00d      	beq.n	8010e3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e22:	2b04      	cmp	r3, #4
 8010e24:	d107      	bne.n	8010e36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e005      	b.n	8010e46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010e3a:	893b      	ldrh	r3, [r7, #8]
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010e44:	2300      	movs	r3, #0
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3718      	adds	r7, #24
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	00010002 	.word	0x00010002

08010e54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b088      	sub	sp, #32
 8010e58:	af02      	add	r7, sp, #8
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	4608      	mov	r0, r1
 8010e5e:	4611      	mov	r1, r2
 8010e60:	461a      	mov	r2, r3
 8010e62:	4603      	mov	r3, r0
 8010e64:	817b      	strh	r3, [r7, #10]
 8010e66:	460b      	mov	r3, r1
 8010e68:	813b      	strh	r3, [r7, #8]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010e7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010e8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	2200      	movs	r2, #0
 8010e96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010e9a:	68f8      	ldr	r0, [r7, #12]
 8010e9c:	f000 fa7c 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00d      	beq.n	8010ec2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010eb4:	d103      	bne.n	8010ebe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010ebe:	2303      	movs	r3, #3
 8010ec0:	e0aa      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010ec2:	897b      	ldrh	r3, [r7, #10]
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010ed0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed4:	6a3a      	ldr	r2, [r7, #32]
 8010ed6:	4952      	ldr	r1, [pc, #328]	; (8011020 <I2C_RequestMemoryRead+0x1cc>)
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f000 fab4 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e097      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010ee8:	2300      	movs	r3, #0
 8010eea:	617b      	str	r3, [r7, #20]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	695b      	ldr	r3, [r3, #20]
 8010ef2:	617b      	str	r3, [r7, #20]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	699b      	ldr	r3, [r3, #24]
 8010efa:	617b      	str	r3, [r7, #20]
 8010efc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f00:	6a39      	ldr	r1, [r7, #32]
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f000 fb1e 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00d      	beq.n	8010f2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f12:	2b04      	cmp	r3, #4
 8010f14:	d107      	bne.n	8010f26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010f26:	2301      	movs	r3, #1
 8010f28:	e076      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010f2a:	88fb      	ldrh	r3, [r7, #6]
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d105      	bne.n	8010f3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010f30:	893b      	ldrh	r3, [r7, #8]
 8010f32:	b2da      	uxtb	r2, r3
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	611a      	str	r2, [r3, #16]
 8010f3a:	e021      	b.n	8010f80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010f3c:	893b      	ldrh	r3, [r7, #8]
 8010f3e:	0a1b      	lsrs	r3, r3, #8
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f4c:	6a39      	ldr	r1, [r7, #32]
 8010f4e:	68f8      	ldr	r0, [r7, #12]
 8010f50:	f000 faf8 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d00d      	beq.n	8010f76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5e:	2b04      	cmp	r3, #4
 8010f60:	d107      	bne.n	8010f72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	681a      	ldr	r2, [r3, #0]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	e050      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010f76:	893b      	ldrh	r3, [r7, #8]
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f82:	6a39      	ldr	r1, [r7, #32]
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f000 fadd 	bl	8011544 <I2C_WaitOnTXEFlagUntilTimeout>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00d      	beq.n	8010fac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f94:	2b04      	cmp	r3, #4
 8010f96:	d107      	bne.n	8010fa8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010fa6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	e035      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010fba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbe:	9300      	str	r3, [sp, #0]
 8010fc0:	6a3b      	ldr	r3, [r7, #32]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010fc8:	68f8      	ldr	r0, [r7, #12]
 8010fca:	f000 f9e5 	bl	8011398 <I2C_WaitOnFlagUntilTimeout>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00d      	beq.n	8010ff0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fe2:	d103      	bne.n	8010fec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010fec:	2303      	movs	r3, #3
 8010fee:	e013      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010ff0:	897b      	ldrh	r3, [r7, #10]
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	f043 0301 	orr.w	r3, r3, #1
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	6a3a      	ldr	r2, [r7, #32]
 8011004:	4906      	ldr	r1, [pc, #24]	; (8011020 <I2C_RequestMemoryRead+0x1cc>)
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f000 fa1d 	bl	8011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d001      	beq.n	8011016 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8011012:	2301      	movs	r3, #1
 8011014:	e000      	b.n	8011018 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8011016:	2300      	movs	r3, #0
}
 8011018:	4618      	mov	r0, r3
 801101a:	3718      	adds	r7, #24
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}
 8011020:	00010002 	.word	0x00010002

08011024 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b086      	sub	sp, #24
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011030:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011038:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011040:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011046:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	685a      	ldr	r2, [r3, #4]
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011056:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105c:	2b00      	cmp	r3, #0
 801105e:	d003      	beq.n	8011068 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011064:	2200      	movs	r2, #0
 8011066:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801106c:	2b00      	cmp	r3, #0
 801106e:	d003      	beq.n	8011078 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011074:	2200      	movs	r2, #0
 8011076:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8011078:	7cfb      	ldrb	r3, [r7, #19]
 801107a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801107e:	2b21      	cmp	r3, #33	; 0x21
 8011080:	d007      	beq.n	8011092 <I2C_DMAXferCplt+0x6e>
 8011082:	7cfb      	ldrb	r3, [r7, #19]
 8011084:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8011088:	2b22      	cmp	r3, #34	; 0x22
 801108a:	d131      	bne.n	80110f0 <I2C_DMAXferCplt+0xcc>
 801108c:	7cbb      	ldrb	r3, [r7, #18]
 801108e:	2b20      	cmp	r3, #32
 8011090:	d12e      	bne.n	80110f0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80110a0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	2200      	movs	r2, #0
 80110a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80110a8:	7cfb      	ldrb	r3, [r7, #19]
 80110aa:	2b29      	cmp	r3, #41	; 0x29
 80110ac:	d10a      	bne.n	80110c4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	2221      	movs	r2, #33	; 0x21
 80110b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2228      	movs	r2, #40	; 0x28
 80110b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80110bc:	6978      	ldr	r0, [r7, #20]
 80110be:	f7fe fb0b 	bl	800f6d8 <HAL_I2C_SlaveTxCpltCallback>
 80110c2:	e00c      	b.n	80110de <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80110c4:	7cfb      	ldrb	r3, [r7, #19]
 80110c6:	2b2a      	cmp	r3, #42	; 0x2a
 80110c8:	d109      	bne.n	80110de <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	2222      	movs	r2, #34	; 0x22
 80110ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	2228      	movs	r2, #40	; 0x28
 80110d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80110d8:	6978      	ldr	r0, [r7, #20]
 80110da:	f7fe fb07 	bl	800f6ec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	685a      	ldr	r2, [r3, #4]
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80110ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80110ee:	e06a      	b.n	80111c6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d064      	beq.n	80111c6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011100:	b29b      	uxth	r3, r3
 8011102:	2b01      	cmp	r3, #1
 8011104:	d107      	bne.n	8011116 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011114:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011124:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801112c:	d009      	beq.n	8011142 <I2C_DMAXferCplt+0x11e>
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2b08      	cmp	r3, #8
 8011132:	d006      	beq.n	8011142 <I2C_DMAXferCplt+0x11e>
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801113a:	d002      	beq.n	8011142 <I2C_DMAXferCplt+0x11e>
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2b20      	cmp	r3, #32
 8011140:	d107      	bne.n	8011152 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011150:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	685a      	ldr	r2, [r3, #4]
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011160:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	685a      	ldr	r2, [r3, #4]
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011170:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	2200      	movs	r2, #0
 8011176:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117c:	2b00      	cmp	r3, #0
 801117e:	d003      	beq.n	8011188 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8011180:	6978      	ldr	r0, [r7, #20]
 8011182:	f7fe fae9 	bl	800f758 <HAL_I2C_ErrorCallback>
}
 8011186:	e01e      	b.n	80111c6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	2220      	movs	r2, #32
 801118c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011196:	b2db      	uxtb	r3, r3
 8011198:	2b40      	cmp	r3, #64	; 0x40
 801119a:	d10a      	bne.n	80111b2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	2200      	movs	r2, #0
 80111a8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80111aa:	6978      	ldr	r0, [r7, #20]
 80111ac:	f7fe faca 	bl	800f744 <HAL_I2C_MemRxCpltCallback>
}
 80111b0:	e009      	b.n	80111c6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	2200      	movs	r2, #0
 80111b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	2212      	movs	r2, #18
 80111be:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80111c0:	6978      	ldr	r0, [r7, #20]
 80111c2:	f7fe fa7f 	bl	800f6c4 <HAL_I2C_MasterRxCpltCallback>
}
 80111c6:	bf00      	nop
 80111c8:	3718      	adds	r7, #24
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}

080111ce <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b084      	sub	sp, #16
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111da:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d003      	beq.n	80111ec <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e8:	2200      	movs	r2, #0
 80111ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d003      	beq.n	80111fc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111f8:	2200      	movs	r2, #0
 80111fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f7f7 fb94 	bl	800892a <HAL_DMA_GetError>
 8011202:	4603      	mov	r3, r0
 8011204:	2b02      	cmp	r3, #2
 8011206:	d01b      	beq.n	8011240 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	681a      	ldr	r2, [r3, #0]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011216:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2200      	movs	r2, #0
 801121c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2220      	movs	r2, #32
 8011222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2200      	movs	r2, #0
 801122a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011232:	f043 0210 	orr.w	r2, r3, #16
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801123a:	68f8      	ldr	r0, [r7, #12]
 801123c:	f7fe fa8c 	bl	800f758 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011240:	bf00      	nop
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b086      	sub	sp, #24
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011250:	2300      	movs	r3, #0
 8011252:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011258:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011260:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8011262:	4b4b      	ldr	r3, [pc, #300]	; (8011390 <I2C_DMAAbort+0x148>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	08db      	lsrs	r3, r3, #3
 8011268:	4a4a      	ldr	r2, [pc, #296]	; (8011394 <I2C_DMAAbort+0x14c>)
 801126a:	fba2 2303 	umull	r2, r3, r2, r3
 801126e:	0a1a      	lsrs	r2, r3, #8
 8011270:	4613      	mov	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4413      	add	r3, r2
 8011276:	00da      	lsls	r2, r3, #3
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d106      	bne.n	8011290 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011286:	f043 0220 	orr.w	r2, r3, #32
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801128e:	e00a      	b.n	80112a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3b01      	subs	r3, #1
 8011294:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80112a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112a4:	d0ea      	beq.n	801127c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d003      	beq.n	80112b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112b2:	2200      	movs	r2, #0
 80112b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d003      	beq.n	80112c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112c2:	2200      	movs	r2, #0
 80112c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	2200      	movs	r2, #0
 80112da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d003      	beq.n	80112ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112e8:	2200      	movs	r2, #0
 80112ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d003      	beq.n	80112fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f8:	2200      	movs	r2, #0
 80112fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f022 0201 	bic.w	r2, r2, #1
 801130a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011312:	b2db      	uxtb	r3, r3
 8011314:	2b60      	cmp	r3, #96	; 0x60
 8011316:	d10e      	bne.n	8011336 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	2220      	movs	r2, #32
 801131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	2200      	movs	r2, #0
 8011324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	2200      	movs	r2, #0
 801132c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801132e:	6978      	ldr	r0, [r7, #20]
 8011330:	f7fe fa1c 	bl	800f76c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011334:	e027      	b.n	8011386 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011336:	7cfb      	ldrb	r3, [r7, #19]
 8011338:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801133c:	2b28      	cmp	r3, #40	; 0x28
 801133e:	d117      	bne.n	8011370 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f042 0201 	orr.w	r2, r2, #1
 801134e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801135e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	2200      	movs	r2, #0
 8011364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	2228      	movs	r2, #40	; 0x28
 801136a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801136e:	e007      	b.n	8011380 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	2220      	movs	r2, #32
 8011374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2200      	movs	r2, #0
 801137c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8011380:	6978      	ldr	r0, [r7, #20]
 8011382:	f7fe f9e9 	bl	800f758 <HAL_I2C_ErrorCallback>
}
 8011386:	bf00      	nop
 8011388:	3718      	adds	r7, #24
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	20000058 	.word	0x20000058
 8011394:	14f8b589 	.word	0x14f8b589

08011398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	603b      	str	r3, [r7, #0]
 80113a4:	4613      	mov	r3, r2
 80113a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80113a8:	e025      	b.n	80113f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113b0:	d021      	beq.n	80113f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80113b2:	f7f5 fc35 	bl	8006c20 <HAL_GetTick>
 80113b6:	4602      	mov	r2, r0
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	683a      	ldr	r2, [r7, #0]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d302      	bcc.n	80113c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d116      	bne.n	80113f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2200      	movs	r2, #0
 80113cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2220      	movs	r2, #32
 80113d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113e2:	f043 0220 	orr.w	r2, r3, #32
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2200      	movs	r2, #0
 80113ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80113f2:	2301      	movs	r3, #1
 80113f4:	e023      	b.n	801143e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	0c1b      	lsrs	r3, r3, #16
 80113fa:	b2db      	uxtb	r3, r3
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d10d      	bne.n	801141c <I2C_WaitOnFlagUntilTimeout+0x84>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	695b      	ldr	r3, [r3, #20]
 8011406:	43da      	mvns	r2, r3
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	4013      	ands	r3, r2
 801140c:	b29b      	uxth	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	bf0c      	ite	eq
 8011412:	2301      	moveq	r3, #1
 8011414:	2300      	movne	r3, #0
 8011416:	b2db      	uxtb	r3, r3
 8011418:	461a      	mov	r2, r3
 801141a:	e00c      	b.n	8011436 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	699b      	ldr	r3, [r3, #24]
 8011422:	43da      	mvns	r2, r3
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	4013      	ands	r3, r2
 8011428:	b29b      	uxth	r3, r3
 801142a:	2b00      	cmp	r3, #0
 801142c:	bf0c      	ite	eq
 801142e:	2301      	moveq	r3, #1
 8011430:	2300      	movne	r3, #0
 8011432:	b2db      	uxtb	r3, r3
 8011434:	461a      	mov	r2, r3
 8011436:	79fb      	ldrb	r3, [r7, #7]
 8011438:	429a      	cmp	r2, r3
 801143a:	d0b6      	beq.n	80113aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b084      	sub	sp, #16
 801144a:	af00      	add	r7, sp, #0
 801144c:	60f8      	str	r0, [r7, #12]
 801144e:	60b9      	str	r1, [r7, #8]
 8011450:	607a      	str	r2, [r7, #4]
 8011452:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011454:	e051      	b.n	80114fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	695b      	ldr	r3, [r3, #20]
 801145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011464:	d123      	bne.n	80114ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011474:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801147e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	2200      	movs	r2, #0
 8011484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2220      	movs	r2, #32
 801148a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2200      	movs	r2, #0
 8011492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801149a:	f043 0204 	orr.w	r2, r3, #4
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2200      	movs	r2, #0
 80114a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80114aa:	2301      	movs	r3, #1
 80114ac:	e046      	b.n	801153c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b4:	d021      	beq.n	80114fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114b6:	f7f5 fbb3 	bl	8006c20 <HAL_GetTick>
 80114ba:	4602      	mov	r2, r0
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d302      	bcc.n	80114cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d116      	bne.n	80114fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2200      	movs	r2, #0
 80114d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2220      	movs	r2, #32
 80114d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2200      	movs	r2, #0
 80114de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114e6:	f043 0220 	orr.w	r2, r3, #32
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2200      	movs	r2, #0
 80114f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80114f6:	2301      	movs	r3, #1
 80114f8:	e020      	b.n	801153c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	0c1b      	lsrs	r3, r3, #16
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	2b01      	cmp	r3, #1
 8011502:	d10c      	bne.n	801151e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	43da      	mvns	r2, r3
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	4013      	ands	r3, r2
 8011510:	b29b      	uxth	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	bf14      	ite	ne
 8011516:	2301      	movne	r3, #1
 8011518:	2300      	moveq	r3, #0
 801151a:	b2db      	uxtb	r3, r3
 801151c:	e00b      	b.n	8011536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	699b      	ldr	r3, [r3, #24]
 8011524:	43da      	mvns	r2, r3
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	4013      	ands	r3, r2
 801152a:	b29b      	uxth	r3, r3
 801152c:	2b00      	cmp	r3, #0
 801152e:	bf14      	ite	ne
 8011530:	2301      	movne	r3, #1
 8011532:	2300      	moveq	r3, #0
 8011534:	b2db      	uxtb	r3, r3
 8011536:	2b00      	cmp	r3, #0
 8011538:	d18d      	bne.n	8011456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011550:	e02d      	b.n	80115ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011552:	68f8      	ldr	r0, [r7, #12]
 8011554:	f000 f93e 	bl	80117d4 <I2C_IsAcknowledgeFailed>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d001      	beq.n	8011562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801155e:	2301      	movs	r3, #1
 8011560:	e02d      	b.n	80115be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011568:	d021      	beq.n	80115ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801156a:	f7f5 fb59 	bl	8006c20 <HAL_GetTick>
 801156e:	4602      	mov	r2, r0
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	1ad3      	subs	r3, r2, r3
 8011574:	68ba      	ldr	r2, [r7, #8]
 8011576:	429a      	cmp	r2, r3
 8011578:	d302      	bcc.n	8011580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d116      	bne.n	80115ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2200      	movs	r2, #0
 8011584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2220      	movs	r2, #32
 801158a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2200      	movs	r2, #0
 8011592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801159a:	f043 0220 	orr.w	r2, r3, #32
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2200      	movs	r2, #0
 80115a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80115aa:	2301      	movs	r3, #1
 80115ac:	e007      	b.n	80115be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	695b      	ldr	r3, [r3, #20]
 80115b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115b8:	2b80      	cmp	r3, #128	; 0x80
 80115ba:	d1ca      	bne.n	8011552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80115bc:	2300      	movs	r3, #0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b084      	sub	sp, #16
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	60f8      	str	r0, [r7, #12]
 80115ce:	60b9      	str	r1, [r7, #8]
 80115d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80115d2:	e02d      	b.n	8011630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	f000 f8fd 	bl	80117d4 <I2C_IsAcknowledgeFailed>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d001      	beq.n	80115e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80115e0:	2301      	movs	r3, #1
 80115e2:	e02d      	b.n	8011640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ea:	d021      	beq.n	8011630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115ec:	f7f5 fb18 	bl	8006c20 <HAL_GetTick>
 80115f0:	4602      	mov	r2, r0
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	68ba      	ldr	r2, [r7, #8]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d302      	bcc.n	8011602 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d116      	bne.n	8011630 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2220      	movs	r2, #32
 801160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801161c:	f043 0220 	orr.w	r2, r3, #32
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2200      	movs	r2, #0
 8011628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801162c:	2301      	movs	r3, #1
 801162e:	e007      	b.n	8011640 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	695b      	ldr	r3, [r3, #20]
 8011636:	f003 0304 	and.w	r3, r3, #4
 801163a:	2b04      	cmp	r3, #4
 801163c:	d1ca      	bne.n	80115d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3710      	adds	r7, #16
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	60b9      	str	r1, [r7, #8]
 8011652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011654:	e029      	b.n	80116aa <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 f8bc 	bl	80117d4 <I2C_IsAcknowledgeFailed>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d001      	beq.n	8011666 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8011662:	2301      	movs	r3, #1
 8011664:	e029      	b.n	80116ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011666:	f7f5 fadb 	bl	8006c20 <HAL_GetTick>
 801166a:	4602      	mov	r2, r0
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	429a      	cmp	r2, r3
 8011674:	d302      	bcc.n	801167c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d116      	bne.n	80116aa <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2200      	movs	r2, #0
 8011680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2220      	movs	r2, #32
 8011686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2200      	movs	r2, #0
 801168e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011696:	f043 0220 	orr.w	r2, r3, #32
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2200      	movs	r2, #0
 80116a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80116a6:	2301      	movs	r3, #1
 80116a8:	e007      	b.n	80116ba <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	695b      	ldr	r3, [r3, #20]
 80116b0:	f003 0310 	and.w	r3, r3, #16
 80116b4:	2b10      	cmp	r3, #16
 80116b6:	d1ce      	bne.n	8011656 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80116c2:	b480      	push	{r7}
 80116c4:	b085      	sub	sp, #20
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80116ca:	2300      	movs	r3, #0
 80116cc:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80116ce:	4b14      	ldr	r3, [pc, #80]	; (8011720 <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	08db      	lsrs	r3, r3, #3
 80116d4:	4a13      	ldr	r2, [pc, #76]	; (8011724 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 80116d6:	fba2 2303 	umull	r2, r3, r2, r3
 80116da:	0a1a      	lsrs	r2, r3, #8
 80116dc:	4613      	mov	r3, r2
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	4413      	add	r3, r2
 80116e2:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d107      	bne.n	8011700 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f4:	f043 0220 	orr.w	r2, r3, #32
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80116fc:	2301      	movs	r3, #1
 80116fe:	e008      	b.n	8011712 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801170a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801170e:	d0e9      	beq.n	80116e4 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	20000058 	.word	0x20000058
 8011724:	14f8b589 	.word	0x14f8b589

08011728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011734:	e042      	b.n	80117bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	695b      	ldr	r3, [r3, #20]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b10      	cmp	r3, #16
 8011742:	d119      	bne.n	8011778 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f06f 0210 	mvn.w	r2, #16
 801174c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2200      	movs	r2, #0
 8011752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2220      	movs	r2, #32
 8011758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2200      	movs	r2, #0
 8011770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011774:	2301      	movs	r3, #1
 8011776:	e029      	b.n	80117cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011778:	f7f5 fa52 	bl	8006c20 <HAL_GetTick>
 801177c:	4602      	mov	r2, r0
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	68ba      	ldr	r2, [r7, #8]
 8011784:	429a      	cmp	r2, r3
 8011786:	d302      	bcc.n	801178e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d116      	bne.n	80117bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2200      	movs	r2, #0
 8011792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2220      	movs	r2, #32
 8011798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2200      	movs	r2, #0
 80117a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117a8:	f043 0220 	orr.w	r2, r3, #32
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2200      	movs	r2, #0
 80117b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80117b8:	2301      	movs	r3, #1
 80117ba:	e007      	b.n	80117cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117c6:	2b40      	cmp	r3, #64	; 0x40
 80117c8:	d1b5      	bne.n	8011736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80117ca:	2300      	movs	r3, #0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3710      	adds	r7, #16
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	695b      	ldr	r3, [r3, #20]
 80117e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80117e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117ea:	d11b      	bne.n	8011824 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80117f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2220      	movs	r2, #32
 8011800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011810:	f043 0204 	orr.w	r2, r3, #4
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011820:	2301      	movs	r3, #1
 8011822:	e000      	b.n	8011826 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8011832:	b480      	push	{r7}
 8011834:	b083      	sub	sp, #12
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8011842:	d103      	bne.n	801184c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2201      	movs	r2, #1
 8011848:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801184a:	e007      	b.n	801185c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011850:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011854:	d102      	bne.n	801185c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2208      	movs	r2, #8
 801185a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801185c:	bf00      	nop
 801185e:	370c      	adds	r7, #12
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr

08011868 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8011868:	b480      	push	{r7}
 801186a:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 801186c:	4b08      	ldr	r3, [pc, #32]	; (8011890 <HAL_PWR_DeInit+0x28>)
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	4a07      	ldr	r2, [pc, #28]	; (8011890 <HAL_PWR_DeInit+0x28>)
 8011872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011876:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8011878:	4b05      	ldr	r3, [pc, #20]	; (8011890 <HAL_PWR_DeInit+0x28>)
 801187a:	6a1b      	ldr	r3, [r3, #32]
 801187c:	4a04      	ldr	r2, [pc, #16]	; (8011890 <HAL_PWR_DeInit+0x28>)
 801187e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011882:	6213      	str	r3, [r2, #32]
}
 8011884:	bf00      	nop
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop
 8011890:	40023800 	.word	0x40023800

08011894 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 801189a:	4b06      	ldr	r3, [pc, #24]	; (80118b4 <HAL_PWR_EnableBkUpAccess+0x20>)
 801189c:	2201      	movs	r2, #1
 801189e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80118a0:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80118a6:	687b      	ldr	r3, [r7, #4]
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	420e0020 	.word	0x420e0020
 80118b8:	40007000 	.word	0x40007000

080118bc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80118c2:	4b06      	ldr	r3, [pc, #24]	; (80118dc <HAL_PWR_DisableBkUpAccess+0x20>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80118c8:	4b05      	ldr	r3, [pc, #20]	; (80118e0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80118ce:	687b      	ldr	r3, [r7, #4]
}
 80118d0:	bf00      	nop
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr
 80118dc:	420e0020 	.word	0x420e0020
 80118e0:	40007000 	.word	0x40007000

080118e4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80118ec:	4b2b      	ldr	r3, [pc, #172]	; (801199c <HAL_PWR_ConfigPVD+0xb8>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4928      	ldr	r1, [pc, #160]	; (801199c <HAL_PWR_ConfigPVD+0xb8>)
 80118fa:	4313      	orrs	r3, r2
 80118fc:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80118fe:	4b28      	ldr	r3, [pc, #160]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	4a27      	ldr	r2, [pc, #156]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011908:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 801190a:	4b25      	ldr	r3, [pc, #148]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	4a24      	ldr	r2, [pc, #144]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011914:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011916:	4b22      	ldr	r3, [pc, #136]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011918:	689b      	ldr	r3, [r3, #8]
 801191a:	4a21      	ldr	r2, [pc, #132]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 801191c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011920:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8011922:	4b1f      	ldr	r3, [pc, #124]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	4a1e      	ldr	r2, [pc, #120]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801192c:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011936:	2b00      	cmp	r3, #0
 8011938:	d005      	beq.n	8011946 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 801193a:	4b19      	ldr	r3, [pc, #100]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	4a18      	ldr	r2, [pc, #96]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011944:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801194e:	2b00      	cmp	r3, #0
 8011950:	d005      	beq.n	801195e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8011952:	4b13      	ldr	r3, [pc, #76]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	4a12      	ldr	r2, [pc, #72]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801195c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	f003 0301 	and.w	r3, r3, #1
 8011966:	2b00      	cmp	r3, #0
 8011968:	d005      	beq.n	8011976 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 801196a:	4b0d      	ldr	r3, [pc, #52]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	4a0c      	ldr	r2, [pc, #48]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011974:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	f003 0302 	and.w	r3, r3, #2
 801197e:	2b00      	cmp	r3, #0
 8011980:	d005      	beq.n	801198e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8011982:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	4a06      	ldr	r2, [pc, #24]	; (80119a0 <HAL_PWR_ConfigPVD+0xbc>)
 8011988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801198c:	60d3      	str	r3, [r2, #12]
  }
}
 801198e:	bf00      	nop
 8011990:	370c      	adds	r7, #12
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop
 801199c:	40007000 	.word	0x40007000
 80119a0:	40013c00 	.word	0x40013c00

080119a4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80119a4:	b480      	push	{r7}
 80119a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80119a8:	4b03      	ldr	r3, [pc, #12]	; (80119b8 <HAL_PWR_EnablePVD+0x14>)
 80119aa:	2201      	movs	r2, #1
 80119ac:	601a      	str	r2, [r3, #0]
}
 80119ae:	bf00      	nop
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	420e0010 	.word	0x420e0010

080119bc <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80119bc:	b480      	push	{r7}
 80119be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80119c0:	4b03      	ldr	r3, [pc, #12]	; (80119d0 <HAL_PWR_DisablePVD+0x14>)
 80119c2:	2200      	movs	r2, #0
 80119c4:	601a      	str	r2, [r3, #0]
}
 80119c6:	bf00      	nop
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	420e0010 	.word	0x420e0010

080119d4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80119dc:	4b05      	ldr	r3, [pc, #20]	; (80119f4 <HAL_PWR_EnableWakeUpPin+0x20>)
 80119de:	685a      	ldr	r2, [r3, #4]
 80119e0:	4904      	ldr	r1, [pc, #16]	; (80119f4 <HAL_PWR_EnableWakeUpPin+0x20>)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	4313      	orrs	r3, r2
 80119e6:	604b      	str	r3, [r1, #4]
}
 80119e8:	bf00      	nop
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	40007000 	.word	0x40007000

080119f8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8011a00:	4b06      	ldr	r3, [pc, #24]	; (8011a1c <HAL_PWR_DisableWakeUpPin+0x24>)
 8011a02:	685a      	ldr	r2, [r3, #4]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	43db      	mvns	r3, r3
 8011a08:	4904      	ldr	r1, [pc, #16]	; (8011a1c <HAL_PWR_DisableWakeUpPin+0x24>)
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	604b      	str	r3, [r1, #4]
}
 8011a0e:	bf00      	nop
 8011a10:	370c      	adds	r7, #12
 8011a12:	46bd      	mov	sp, r7
 8011a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop
 8011a1c:	40007000 	.word	0x40007000

08011a20 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011a2c:	4b09      	ldr	r3, [pc, #36]	; (8011a54 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011a2e:	691b      	ldr	r3, [r3, #16]
 8011a30:	4a08      	ldr	r2, [pc, #32]	; (8011a54 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011a32:	f023 0304 	bic.w	r3, r3, #4
 8011a36:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011a38:	78fb      	ldrb	r3, [r7, #3]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d101      	bne.n	8011a42 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011a3e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8011a40:	e002      	b.n	8011a48 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8011a42:	bf40      	sev
    __WFE();
 8011a44:	bf20      	wfe
    __WFE();
 8011a46:	bf20      	wfe
}
 8011a48:	bf00      	nop
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr
 8011a54:	e000ed00 	.word	0xe000ed00

08011a58 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011a64:	4b10      	ldr	r3, [pc, #64]	; (8011aa8 <HAL_PWR_EnterSTOPMode+0x50>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f023 0203 	bic.w	r2, r3, #3
 8011a6c:	490e      	ldr	r1, [pc, #56]	; (8011aa8 <HAL_PWR_EnterSTOPMode+0x50>)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4313      	orrs	r3, r2
 8011a72:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011a74:	4b0d      	ldr	r3, [pc, #52]	; (8011aac <HAL_PWR_EnterSTOPMode+0x54>)
 8011a76:	691b      	ldr	r3, [r3, #16]
 8011a78:	4a0c      	ldr	r2, [pc, #48]	; (8011aac <HAL_PWR_EnterSTOPMode+0x54>)
 8011a7a:	f043 0304 	orr.w	r3, r3, #4
 8011a7e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8011a80:	78fb      	ldrb	r3, [r7, #3]
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d101      	bne.n	8011a8a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011a86:	bf30      	wfi
 8011a88:	e002      	b.n	8011a90 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8011a8a:	bf40      	sev
    __WFE();
 8011a8c:	bf20      	wfe
    __WFE();
 8011a8e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8011a90:	4b06      	ldr	r3, [pc, #24]	; (8011aac <HAL_PWR_EnterSTOPMode+0x54>)
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	4a05      	ldr	r2, [pc, #20]	; (8011aac <HAL_PWR_EnterSTOPMode+0x54>)
 8011a96:	f023 0304 	bic.w	r3, r3, #4
 8011a9a:	6113      	str	r3, [r2, #16]
}
 8011a9c:	bf00      	nop
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr
 8011aa8:	40007000 	.word	0x40007000
 8011aac:	e000ed00 	.word	0xe000ed00

08011ab0 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8011ab4:	4b08      	ldr	r3, [pc, #32]	; (8011ad8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4a07      	ldr	r2, [pc, #28]	; (8011ad8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011aba:	f043 0302 	orr.w	r3, r3, #2
 8011abe:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011ac0:	4b06      	ldr	r3, [pc, #24]	; (8011adc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	4a05      	ldr	r2, [pc, #20]	; (8011adc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011ac6:	f043 0304 	orr.w	r3, r3, #4
 8011aca:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8011acc:	bf30      	wfi
}
 8011ace:	bf00      	nop
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr
 8011ad8:	40007000 	.word	0x40007000
 8011adc:	e000ed00 	.word	0xe000ed00

08011ae0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8011ae4:	4b06      	ldr	r3, [pc, #24]	; (8011b00 <HAL_PWR_PVD_IRQHandler+0x20>)
 8011ae6:	695b      	ldr	r3, [r3, #20]
 8011ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d005      	beq.n	8011afc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8011af0:	f000 f808 	bl	8011b04 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011af4:	4b02      	ldr	r3, [pc, #8]	; (8011b00 <HAL_PWR_PVD_IRQHandler+0x20>)
 8011af6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011afa:	615a      	str	r2, [r3, #20]
  }
}
 8011afc:	bf00      	nop
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	40013c00 	.word	0x40013c00

08011b04 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011b04:	b480      	push	{r7}
 8011b06:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011b08:	bf00      	nop
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr

08011b12 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8011b12:	b480      	push	{r7}
 8011b14:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011b16:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	4a04      	ldr	r2, [pc, #16]	; (8011b2c <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011b1c:	f043 0302 	orr.w	r3, r3, #2
 8011b20:	6113      	str	r3, [r2, #16]
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	e000ed00 	.word	0xe000ed00

08011b30 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8011b30:	b480      	push	{r7}
 8011b32:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011b34:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011b36:	691b      	ldr	r3, [r3, #16]
 8011b38:	4a04      	ldr	r2, [pc, #16]	; (8011b4c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011b3a:	f023 0302 	bic.w	r3, r3, #2
 8011b3e:	6113      	str	r3, [r2, #16]
}
 8011b40:	bf00      	nop
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop
 8011b4c:	e000ed00 	.word	0xe000ed00

08011b50 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8011b50:	b480      	push	{r7}
 8011b52:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011b54:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011b56:	691b      	ldr	r3, [r3, #16]
 8011b58:	4a04      	ldr	r2, [pc, #16]	; (8011b6c <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011b5a:	f043 0310 	orr.w	r3, r3, #16
 8011b5e:	6113      	str	r3, [r2, #16]
}
 8011b60:	bf00      	nop
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	e000ed00 	.word	0xe000ed00

08011b70 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8011b70:	b480      	push	{r7}
 8011b72:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011b74:	4b05      	ldr	r3, [pc, #20]	; (8011b8c <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011b76:	691b      	ldr	r3, [r3, #16]
 8011b78:	4a04      	ldr	r2, [pc, #16]	; (8011b8c <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011b7a:	f023 0310 	bic.w	r3, r3, #16
 8011b7e:	6113      	str	r3, [r2, #16]
}
 8011b80:	bf00      	nop
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr
 8011b8a:	bf00      	nop
 8011b8c:	e000ed00 	.word	0xe000ed00

08011b90 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011b96:	2300      	movs	r3, #0
 8011b98:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8011b9a:	4b0e      	ldr	r3, [pc, #56]	; (8011bd4 <HAL_PWREx_EnableBkUpReg+0x44>)
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011ba0:	f7f5 f83e 	bl	8006c20 <HAL_GetTick>
 8011ba4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011ba6:	e009      	b.n	8011bbc <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011ba8:	f7f5 f83a 	bl	8006c20 <HAL_GetTick>
 8011bac:	4602      	mov	r2, r0
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011bb6:	d901      	bls.n	8011bbc <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011bb8:	2303      	movs	r3, #3
 8011bba:	e006      	b.n	8011bca <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011bbc:	4b06      	ldr	r3, [pc, #24]	; (8011bd8 <HAL_PWREx_EnableBkUpReg+0x48>)
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	f003 0308 	and.w	r3, r3, #8
 8011bc4:	2b08      	cmp	r3, #8
 8011bc6:	d1ef      	bne.n	8011ba8 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	420e00a4 	.word	0x420e00a4
 8011bd8:	40007000 	.word	0x40007000

08011bdc <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011be2:	2300      	movs	r3, #0
 8011be4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8011be6:	4b0e      	ldr	r3, [pc, #56]	; (8011c20 <HAL_PWREx_DisableBkUpReg+0x44>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011bec:	f7f5 f818 	bl	8006c20 <HAL_GetTick>
 8011bf0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011bf2:	e009      	b.n	8011c08 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011bf4:	f7f5 f814 	bl	8006c20 <HAL_GetTick>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011c02:	d901      	bls.n	8011c08 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011c04:	2303      	movs	r3, #3
 8011c06:	e006      	b.n	8011c16 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011c08:	4b06      	ldr	r3, [pc, #24]	; (8011c24 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	f003 0308 	and.w	r3, r3, #8
 8011c10:	2b08      	cmp	r3, #8
 8011c12:	d0ef      	beq.n	8011bf4 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	420e00a4 	.word	0x420e00a4
 8011c24:	40007000 	.word	0x40007000

08011c28 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011c2c:	4b03      	ldr	r3, [pc, #12]	; (8011c3c <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8011c2e:	2201      	movs	r2, #1
 8011c30:	601a      	str	r2, [r3, #0]
}
 8011c32:	bf00      	nop
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr
 8011c3c:	420e0024 	.word	0x420e0024

08011c40 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8011c40:	b480      	push	{r7}
 8011c42:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011c44:	4b03      	ldr	r3, [pc, #12]	; (8011c54 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8011c46:	2200      	movs	r2, #0
 8011c48:	601a      	str	r2, [r3, #0]
}
 8011c4a:	bf00      	nop
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	420e0024 	.word	0x420e0024

08011c58 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011c5c:	4b04      	ldr	r3, [pc, #16]	; (8011c70 <HAL_PWREx_GetVoltageRange+0x18>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	46bd      	mov	sp, r7
 8011c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	40007000 	.word	0x40007000

08011c74 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b086      	sub	sp, #24
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011c80:	2300      	movs	r3, #0
 8011c82:	60fb      	str	r3, [r7, #12]
 8011c84:	4b1a      	ldr	r3, [pc, #104]	; (8011cf0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c88:	4a19      	ldr	r2, [pc, #100]	; (8011cf0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8011c90:	4b17      	ldr	r3, [pc, #92]	; (8011cf0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c98:	60fb      	str	r3, [r7, #12]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	613b      	str	r3, [r7, #16]
 8011ca0:	4b14      	ldr	r3, [pc, #80]	; (8011cf4 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011ca8:	4912      	ldr	r1, [pc, #72]	; (8011cf4 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	600b      	str	r3, [r1, #0]
 8011cb0:	4b10      	ldr	r3, [pc, #64]	; (8011cf4 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cb8:	613b      	str	r3, [r7, #16]
 8011cba:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011cbc:	f7f4 ffb0 	bl	8006c20 <HAL_GetTick>
 8011cc0:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8011cc2:	e009      	b.n	8011cd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8011cc4:	f7f4 ffac 	bl	8006c20 <HAL_GetTick>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011cd2:	d901      	bls.n	8011cd8 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	e007      	b.n	8011ce8 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8011cd8:	4b06      	ldr	r3, [pc, #24]	; (8011cf4 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ce4:	d1ee      	bne.n	8011cc4 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 8011ce6:	2300      	movs	r3, #0
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3718      	adds	r7, #24
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	40023800 	.word	0x40023800
 8011cf4:	40007000 	.word	0x40007000

08011cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b086      	sub	sp, #24
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d101      	bne.n	8011d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e267      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f003 0301 	and.w	r3, r3, #1
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d075      	beq.n	8011e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011d16:	4b88      	ldr	r3, [pc, #544]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d18:	689b      	ldr	r3, [r3, #8]
 8011d1a:	f003 030c 	and.w	r3, r3, #12
 8011d1e:	2b04      	cmp	r3, #4
 8011d20:	d00c      	beq.n	8011d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011d22:	4b85      	ldr	r3, [pc, #532]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011d2a:	2b08      	cmp	r3, #8
 8011d2c:	d112      	bne.n	8011d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011d2e:	4b82      	ldr	r3, [pc, #520]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d3a:	d10b      	bne.n	8011d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d3c:	4b7e      	ldr	r3, [pc, #504]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d05b      	beq.n	8011e00 <HAL_RCC_OscConfig+0x108>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d157      	bne.n	8011e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011d50:	2301      	movs	r3, #1
 8011d52:	e242      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d5c:	d106      	bne.n	8011d6c <HAL_RCC_OscConfig+0x74>
 8011d5e:	4b76      	ldr	r3, [pc, #472]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a75      	ldr	r2, [pc, #468]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d68:	6013      	str	r3, [r2, #0]
 8011d6a:	e01d      	b.n	8011da8 <HAL_RCC_OscConfig+0xb0>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d74:	d10c      	bne.n	8011d90 <HAL_RCC_OscConfig+0x98>
 8011d76:	4b70      	ldr	r3, [pc, #448]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	4a6f      	ldr	r2, [pc, #444]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011d80:	6013      	str	r3, [r2, #0]
 8011d82:	4b6d      	ldr	r3, [pc, #436]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	4a6c      	ldr	r2, [pc, #432]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d8c:	6013      	str	r3, [r2, #0]
 8011d8e:	e00b      	b.n	8011da8 <HAL_RCC_OscConfig+0xb0>
 8011d90:	4b69      	ldr	r3, [pc, #420]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a68      	ldr	r2, [pc, #416]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d9a:	6013      	str	r3, [r2, #0]
 8011d9c:	4b66      	ldr	r3, [pc, #408]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4a65      	ldr	r2, [pc, #404]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d013      	beq.n	8011dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011db0:	f7f4 ff36 	bl	8006c20 <HAL_GetTick>
 8011db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011db6:	e008      	b.n	8011dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011db8:	f7f4 ff32 	bl	8006c20 <HAL_GetTick>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	2b64      	cmp	r3, #100	; 0x64
 8011dc4:	d901      	bls.n	8011dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	e207      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011dca:	4b5b      	ldr	r3, [pc, #364]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d0f0      	beq.n	8011db8 <HAL_RCC_OscConfig+0xc0>
 8011dd6:	e014      	b.n	8011e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011dd8:	f7f4 ff22 	bl	8006c20 <HAL_GetTick>
 8011ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011dde:	e008      	b.n	8011df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011de0:	f7f4 ff1e 	bl	8006c20 <HAL_GetTick>
 8011de4:	4602      	mov	r2, r0
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	2b64      	cmp	r3, #100	; 0x64
 8011dec:	d901      	bls.n	8011df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011dee:	2303      	movs	r3, #3
 8011df0:	e1f3      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011df2:	4b51      	ldr	r3, [pc, #324]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1f0      	bne.n	8011de0 <HAL_RCC_OscConfig+0xe8>
 8011dfe:	e000      	b.n	8011e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f003 0302 	and.w	r3, r3, #2
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d063      	beq.n	8011ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011e0e:	4b4a      	ldr	r3, [pc, #296]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	f003 030c 	and.w	r3, r3, #12
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00b      	beq.n	8011e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011e1a:	4b47      	ldr	r3, [pc, #284]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011e22:	2b08      	cmp	r3, #8
 8011e24:	d11c      	bne.n	8011e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011e26:	4b44      	ldr	r3, [pc, #272]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d116      	bne.n	8011e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011e32:	4b41      	ldr	r3, [pc, #260]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f003 0302 	and.w	r3, r3, #2
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d005      	beq.n	8011e4a <HAL_RCC_OscConfig+0x152>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d001      	beq.n	8011e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011e46:	2301      	movs	r3, #1
 8011e48:	e1c7      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e4a:	4b3b      	ldr	r3, [pc, #236]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	691b      	ldr	r3, [r3, #16]
 8011e56:	00db      	lsls	r3, r3, #3
 8011e58:	4937      	ldr	r1, [pc, #220]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011e5e:	e03a      	b.n	8011ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d020      	beq.n	8011eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011e68:	4b34      	ldr	r3, [pc, #208]	; (8011f3c <HAL_RCC_OscConfig+0x244>)
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e6e:	f7f4 fed7 	bl	8006c20 <HAL_GetTick>
 8011e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011e74:	e008      	b.n	8011e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e76:	f7f4 fed3 	bl	8006c20 <HAL_GetTick>
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	1ad3      	subs	r3, r2, r3
 8011e80:	2b02      	cmp	r3, #2
 8011e82:	d901      	bls.n	8011e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011e84:	2303      	movs	r3, #3
 8011e86:	e1a8      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011e88:	4b2b      	ldr	r3, [pc, #172]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f003 0302 	and.w	r3, r3, #2
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d0f0      	beq.n	8011e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e94:	4b28      	ldr	r3, [pc, #160]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	691b      	ldr	r3, [r3, #16]
 8011ea0:	00db      	lsls	r3, r3, #3
 8011ea2:	4925      	ldr	r1, [pc, #148]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	600b      	str	r3, [r1, #0]
 8011ea8:	e015      	b.n	8011ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011eaa:	4b24      	ldr	r3, [pc, #144]	; (8011f3c <HAL_RCC_OscConfig+0x244>)
 8011eac:	2200      	movs	r2, #0
 8011eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011eb0:	f7f4 feb6 	bl	8006c20 <HAL_GetTick>
 8011eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011eb6:	e008      	b.n	8011eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011eb8:	f7f4 feb2 	bl	8006c20 <HAL_GetTick>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	d901      	bls.n	8011eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e187      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011eca:	4b1b      	ldr	r3, [pc, #108]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f003 0302 	and.w	r3, r3, #2
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1f0      	bne.n	8011eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f003 0308 	and.w	r3, r3, #8
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d036      	beq.n	8011f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	695b      	ldr	r3, [r3, #20]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d016      	beq.n	8011f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011eea:	4b15      	ldr	r3, [pc, #84]	; (8011f40 <HAL_RCC_OscConfig+0x248>)
 8011eec:	2201      	movs	r2, #1
 8011eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ef0:	f7f4 fe96 	bl	8006c20 <HAL_GetTick>
 8011ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011ef6:	e008      	b.n	8011f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011ef8:	f7f4 fe92 	bl	8006c20 <HAL_GetTick>
 8011efc:	4602      	mov	r2, r0
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	2b02      	cmp	r3, #2
 8011f04:	d901      	bls.n	8011f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011f06:	2303      	movs	r3, #3
 8011f08:	e167      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011f0a:	4b0b      	ldr	r3, [pc, #44]	; (8011f38 <HAL_RCC_OscConfig+0x240>)
 8011f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f0e:	f003 0302 	and.w	r3, r3, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d0f0      	beq.n	8011ef8 <HAL_RCC_OscConfig+0x200>
 8011f16:	e01b      	b.n	8011f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011f18:	4b09      	ldr	r3, [pc, #36]	; (8011f40 <HAL_RCC_OscConfig+0x248>)
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011f1e:	f7f4 fe7f 	bl	8006c20 <HAL_GetTick>
 8011f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011f24:	e00e      	b.n	8011f44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011f26:	f7f4 fe7b 	bl	8006c20 <HAL_GetTick>
 8011f2a:	4602      	mov	r2, r0
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	2b02      	cmp	r3, #2
 8011f32:	d907      	bls.n	8011f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011f34:	2303      	movs	r3, #3
 8011f36:	e150      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
 8011f38:	40023800 	.word	0x40023800
 8011f3c:	42470000 	.word	0x42470000
 8011f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011f44:	4b88      	ldr	r3, [pc, #544]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f48:	f003 0302 	and.w	r3, r3, #2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d1ea      	bne.n	8011f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f003 0304 	and.w	r3, r3, #4
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	f000 8097 	beq.w	801208c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011f62:	4b81      	ldr	r3, [pc, #516]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10f      	bne.n	8011f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011f6e:	2300      	movs	r3, #0
 8011f70:	60bb      	str	r3, [r7, #8]
 8011f72:	4b7d      	ldr	r3, [pc, #500]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f76:	4a7c      	ldr	r2, [pc, #496]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8011f7e:	4b7a      	ldr	r3, [pc, #488]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f86:	60bb      	str	r3, [r7, #8]
 8011f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011f8e:	4b77      	ldr	r3, [pc, #476]	; (801216c <HAL_RCC_OscConfig+0x474>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d118      	bne.n	8011fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011f9a:	4b74      	ldr	r3, [pc, #464]	; (801216c <HAL_RCC_OscConfig+0x474>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	4a73      	ldr	r2, [pc, #460]	; (801216c <HAL_RCC_OscConfig+0x474>)
 8011fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011fa6:	f7f4 fe3b 	bl	8006c20 <HAL_GetTick>
 8011faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011fac:	e008      	b.n	8011fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011fae:	f7f4 fe37 	bl	8006c20 <HAL_GetTick>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	1ad3      	subs	r3, r2, r3
 8011fb8:	2b02      	cmp	r3, #2
 8011fba:	d901      	bls.n	8011fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011fbc:	2303      	movs	r3, #3
 8011fbe:	e10c      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011fc0:	4b6a      	ldr	r3, [pc, #424]	; (801216c <HAL_RCC_OscConfig+0x474>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d0f0      	beq.n	8011fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	689b      	ldr	r3, [r3, #8]
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d106      	bne.n	8011fe2 <HAL_RCC_OscConfig+0x2ea>
 8011fd4:	4b64      	ldr	r3, [pc, #400]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd8:	4a63      	ldr	r2, [pc, #396]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011fda:	f043 0301 	orr.w	r3, r3, #1
 8011fde:	6713      	str	r3, [r2, #112]	; 0x70
 8011fe0:	e01c      	b.n	801201c <HAL_RCC_OscConfig+0x324>
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	2b05      	cmp	r3, #5
 8011fe8:	d10c      	bne.n	8012004 <HAL_RCC_OscConfig+0x30c>
 8011fea:	4b5f      	ldr	r3, [pc, #380]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fee:	4a5e      	ldr	r2, [pc, #376]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011ff0:	f043 0304 	orr.w	r3, r3, #4
 8011ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8011ff6:	4b5c      	ldr	r3, [pc, #368]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ffa:	4a5b      	ldr	r2, [pc, #364]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8011ffc:	f043 0301 	orr.w	r3, r3, #1
 8012000:	6713      	str	r3, [r2, #112]	; 0x70
 8012002:	e00b      	b.n	801201c <HAL_RCC_OscConfig+0x324>
 8012004:	4b58      	ldr	r3, [pc, #352]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012008:	4a57      	ldr	r2, [pc, #348]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 801200a:	f023 0301 	bic.w	r3, r3, #1
 801200e:	6713      	str	r3, [r2, #112]	; 0x70
 8012010:	4b55      	ldr	r3, [pc, #340]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012014:	4a54      	ldr	r2, [pc, #336]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012016:	f023 0304 	bic.w	r3, r3, #4
 801201a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	689b      	ldr	r3, [r3, #8]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d015      	beq.n	8012050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012024:	f7f4 fdfc 	bl	8006c20 <HAL_GetTick>
 8012028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801202a:	e00a      	b.n	8012042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801202c:	f7f4 fdf8 	bl	8006c20 <HAL_GetTick>
 8012030:	4602      	mov	r2, r0
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	f241 3288 	movw	r2, #5000	; 0x1388
 801203a:	4293      	cmp	r3, r2
 801203c:	d901      	bls.n	8012042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801203e:	2303      	movs	r3, #3
 8012040:	e0cb      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012042:	4b49      	ldr	r3, [pc, #292]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012046:	f003 0302 	and.w	r3, r3, #2
 801204a:	2b00      	cmp	r3, #0
 801204c:	d0ee      	beq.n	801202c <HAL_RCC_OscConfig+0x334>
 801204e:	e014      	b.n	801207a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012050:	f7f4 fde6 	bl	8006c20 <HAL_GetTick>
 8012054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012056:	e00a      	b.n	801206e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012058:	f7f4 fde2 	bl	8006c20 <HAL_GetTick>
 801205c:	4602      	mov	r2, r0
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	1ad3      	subs	r3, r2, r3
 8012062:	f241 3288 	movw	r2, #5000	; 0x1388
 8012066:	4293      	cmp	r3, r2
 8012068:	d901      	bls.n	801206e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801206a:	2303      	movs	r3, #3
 801206c:	e0b5      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801206e:	4b3e      	ldr	r3, [pc, #248]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012072:	f003 0302 	and.w	r3, r3, #2
 8012076:	2b00      	cmp	r3, #0
 8012078:	d1ee      	bne.n	8012058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801207a:	7dfb      	ldrb	r3, [r7, #23]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d105      	bne.n	801208c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012080:	4b39      	ldr	r3, [pc, #228]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012084:	4a38      	ldr	r2, [pc, #224]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801208a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	699b      	ldr	r3, [r3, #24]
 8012090:	2b00      	cmp	r3, #0
 8012092:	f000 80a1 	beq.w	80121d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012096:	4b34      	ldr	r3, [pc, #208]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	f003 030c 	and.w	r3, r3, #12
 801209e:	2b08      	cmp	r3, #8
 80120a0:	d05c      	beq.n	801215c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	699b      	ldr	r3, [r3, #24]
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	d141      	bne.n	801212e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80120aa:	4b31      	ldr	r3, [pc, #196]	; (8012170 <HAL_RCC_OscConfig+0x478>)
 80120ac:	2200      	movs	r2, #0
 80120ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80120b0:	f7f4 fdb6 	bl	8006c20 <HAL_GetTick>
 80120b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80120b6:	e008      	b.n	80120ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80120b8:	f7f4 fdb2 	bl	8006c20 <HAL_GetTick>
 80120bc:	4602      	mov	r2, r0
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	1ad3      	subs	r3, r2, r3
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d901      	bls.n	80120ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80120c6:	2303      	movs	r3, #3
 80120c8:	e087      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80120ca:	4b27      	ldr	r3, [pc, #156]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d1f0      	bne.n	80120b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	69da      	ldr	r2, [r3, #28]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6a1b      	ldr	r3, [r3, #32]
 80120de:	431a      	orrs	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e4:	019b      	lsls	r3, r3, #6
 80120e6:	431a      	orrs	r2, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ec:	085b      	lsrs	r3, r3, #1
 80120ee:	3b01      	subs	r3, #1
 80120f0:	041b      	lsls	r3, r3, #16
 80120f2:	431a      	orrs	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f8:	061b      	lsls	r3, r3, #24
 80120fa:	491b      	ldr	r1, [pc, #108]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 80120fc:	4313      	orrs	r3, r2
 80120fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012100:	4b1b      	ldr	r3, [pc, #108]	; (8012170 <HAL_RCC_OscConfig+0x478>)
 8012102:	2201      	movs	r2, #1
 8012104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012106:	f7f4 fd8b 	bl	8006c20 <HAL_GetTick>
 801210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801210c:	e008      	b.n	8012120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801210e:	f7f4 fd87 	bl	8006c20 <HAL_GetTick>
 8012112:	4602      	mov	r2, r0
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	1ad3      	subs	r3, r2, r3
 8012118:	2b02      	cmp	r3, #2
 801211a:	d901      	bls.n	8012120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801211c:	2303      	movs	r3, #3
 801211e:	e05c      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012120:	4b11      	ldr	r3, [pc, #68]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012128:	2b00      	cmp	r3, #0
 801212a:	d0f0      	beq.n	801210e <HAL_RCC_OscConfig+0x416>
 801212c:	e054      	b.n	80121d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801212e:	4b10      	ldr	r3, [pc, #64]	; (8012170 <HAL_RCC_OscConfig+0x478>)
 8012130:	2200      	movs	r2, #0
 8012132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012134:	f7f4 fd74 	bl	8006c20 <HAL_GetTick>
 8012138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801213a:	e008      	b.n	801214e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801213c:	f7f4 fd70 	bl	8006c20 <HAL_GetTick>
 8012140:	4602      	mov	r2, r0
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	1ad3      	subs	r3, r2, r3
 8012146:	2b02      	cmp	r3, #2
 8012148:	d901      	bls.n	801214e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801214a:	2303      	movs	r3, #3
 801214c:	e045      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801214e:	4b06      	ldr	r3, [pc, #24]	; (8012168 <HAL_RCC_OscConfig+0x470>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1f0      	bne.n	801213c <HAL_RCC_OscConfig+0x444>
 801215a:	e03d      	b.n	80121d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	699b      	ldr	r3, [r3, #24]
 8012160:	2b01      	cmp	r3, #1
 8012162:	d107      	bne.n	8012174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012164:	2301      	movs	r3, #1
 8012166:	e038      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
 8012168:	40023800 	.word	0x40023800
 801216c:	40007000 	.word	0x40007000
 8012170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012174:	4b1b      	ldr	r3, [pc, #108]	; (80121e4 <HAL_RCC_OscConfig+0x4ec>)
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	699b      	ldr	r3, [r3, #24]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d028      	beq.n	80121d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801218c:	429a      	cmp	r2, r3
 801218e:	d121      	bne.n	80121d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801219a:	429a      	cmp	r2, r3
 801219c:	d11a      	bne.n	80121d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80121a4:	4013      	ands	r3, r2
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80121aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d111      	bne.n	80121d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ba:	085b      	lsrs	r3, r3, #1
 80121bc:	3b01      	subs	r3, #1
 80121be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d107      	bne.n	80121d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d001      	beq.n	80121d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80121d4:	2301      	movs	r3, #1
 80121d6:	e000      	b.n	80121da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80121d8:	2300      	movs	r3, #0
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3718      	adds	r7, #24
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	40023800 	.word	0x40023800

080121e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80121f8:	2301      	movs	r3, #1
 80121fa:	e0cc      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80121fc:	4b68      	ldr	r3, [pc, #416]	; (80123a0 <HAL_RCC_ClockConfig+0x1b8>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	f003 0307 	and.w	r3, r3, #7
 8012204:	683a      	ldr	r2, [r7, #0]
 8012206:	429a      	cmp	r2, r3
 8012208:	d90c      	bls.n	8012224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801220a:	4b65      	ldr	r3, [pc, #404]	; (80123a0 <HAL_RCC_ClockConfig+0x1b8>)
 801220c:	683a      	ldr	r2, [r7, #0]
 801220e:	b2d2      	uxtb	r2, r2
 8012210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012212:	4b63      	ldr	r3, [pc, #396]	; (80123a0 <HAL_RCC_ClockConfig+0x1b8>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f003 0307 	and.w	r3, r3, #7
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	429a      	cmp	r2, r3
 801221e:	d001      	beq.n	8012224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012220:	2301      	movs	r3, #1
 8012222:	e0b8      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f003 0302 	and.w	r3, r3, #2
 801222c:	2b00      	cmp	r3, #0
 801222e:	d020      	beq.n	8012272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f003 0304 	and.w	r3, r3, #4
 8012238:	2b00      	cmp	r3, #0
 801223a:	d005      	beq.n	8012248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801223c:	4b59      	ldr	r3, [pc, #356]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801223e:	689b      	ldr	r3, [r3, #8]
 8012240:	4a58      	ldr	r2, [pc, #352]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 8012242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f003 0308 	and.w	r3, r3, #8
 8012250:	2b00      	cmp	r3, #0
 8012252:	d005      	beq.n	8012260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012254:	4b53      	ldr	r3, [pc, #332]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 8012256:	689b      	ldr	r3, [r3, #8]
 8012258:	4a52      	ldr	r2, [pc, #328]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801225a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012260:	4b50      	ldr	r3, [pc, #320]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	494d      	ldr	r1, [pc, #308]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801226e:	4313      	orrs	r3, r2
 8012270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f003 0301 	and.w	r3, r3, #1
 801227a:	2b00      	cmp	r3, #0
 801227c:	d044      	beq.n	8012308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2b01      	cmp	r3, #1
 8012284:	d107      	bne.n	8012296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012286:	4b47      	ldr	r3, [pc, #284]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801228e:	2b00      	cmp	r3, #0
 8012290:	d119      	bne.n	80122c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012292:	2301      	movs	r3, #1
 8012294:	e07f      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	2b02      	cmp	r3, #2
 801229c:	d003      	beq.n	80122a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80122a2:	2b03      	cmp	r3, #3
 80122a4:	d107      	bne.n	80122b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80122a6:	4b3f      	ldr	r3, [pc, #252]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d109      	bne.n	80122c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80122b2:	2301      	movs	r3, #1
 80122b4:	e06f      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80122b6:	4b3b      	ldr	r3, [pc, #236]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	f003 0302 	and.w	r3, r3, #2
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d101      	bne.n	80122c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80122c2:	2301      	movs	r3, #1
 80122c4:	e067      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80122c6:	4b37      	ldr	r3, [pc, #220]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	f023 0203 	bic.w	r2, r3, #3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	4934      	ldr	r1, [pc, #208]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 80122d4:	4313      	orrs	r3, r2
 80122d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80122d8:	f7f4 fca2 	bl	8006c20 <HAL_GetTick>
 80122dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80122de:	e00a      	b.n	80122f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122e0:	f7f4 fc9e 	bl	8006c20 <HAL_GetTick>
 80122e4:	4602      	mov	r2, r0
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	1ad3      	subs	r3, r2, r3
 80122ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d901      	bls.n	80122f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80122f2:	2303      	movs	r3, #3
 80122f4:	e04f      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80122f6:	4b2b      	ldr	r3, [pc, #172]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 80122f8:	689b      	ldr	r3, [r3, #8]
 80122fa:	f003 020c 	and.w	r2, r3, #12
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	009b      	lsls	r3, r3, #2
 8012304:	429a      	cmp	r2, r3
 8012306:	d1eb      	bne.n	80122e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012308:	4b25      	ldr	r3, [pc, #148]	; (80123a0 <HAL_RCC_ClockConfig+0x1b8>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f003 0307 	and.w	r3, r3, #7
 8012310:	683a      	ldr	r2, [r7, #0]
 8012312:	429a      	cmp	r2, r3
 8012314:	d20c      	bcs.n	8012330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012316:	4b22      	ldr	r3, [pc, #136]	; (80123a0 <HAL_RCC_ClockConfig+0x1b8>)
 8012318:	683a      	ldr	r2, [r7, #0]
 801231a:	b2d2      	uxtb	r2, r2
 801231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801231e:	4b20      	ldr	r3, [pc, #128]	; (80123a0 <HAL_RCC_ClockConfig+0x1b8>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f003 0307 	and.w	r3, r3, #7
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	429a      	cmp	r2, r3
 801232a:	d001      	beq.n	8012330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801232c:	2301      	movs	r3, #1
 801232e:	e032      	b.n	8012396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f003 0304 	and.w	r3, r3, #4
 8012338:	2b00      	cmp	r3, #0
 801233a:	d008      	beq.n	801234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801233c:	4b19      	ldr	r3, [pc, #100]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801233e:	689b      	ldr	r3, [r3, #8]
 8012340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	4916      	ldr	r1, [pc, #88]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801234a:	4313      	orrs	r3, r2
 801234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f003 0308 	and.w	r3, r3, #8
 8012356:	2b00      	cmp	r3, #0
 8012358:	d009      	beq.n	801236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801235a:	4b12      	ldr	r3, [pc, #72]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801235c:	689b      	ldr	r3, [r3, #8]
 801235e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	691b      	ldr	r3, [r3, #16]
 8012366:	00db      	lsls	r3, r3, #3
 8012368:	490e      	ldr	r1, [pc, #56]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 801236a:	4313      	orrs	r3, r2
 801236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801236e:	f000 f8a1 	bl	80124b4 <HAL_RCC_GetSysClockFreq>
 8012372:	4602      	mov	r2, r0
 8012374:	4b0b      	ldr	r3, [pc, #44]	; (80123a4 <HAL_RCC_ClockConfig+0x1bc>)
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	091b      	lsrs	r3, r3, #4
 801237a:	f003 030f 	and.w	r3, r3, #15
 801237e:	490a      	ldr	r1, [pc, #40]	; (80123a8 <HAL_RCC_ClockConfig+0x1c0>)
 8012380:	5ccb      	ldrb	r3, [r1, r3]
 8012382:	fa22 f303 	lsr.w	r3, r2, r3
 8012386:	4a09      	ldr	r2, [pc, #36]	; (80123ac <HAL_RCC_ClockConfig+0x1c4>)
 8012388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801238a:	4b09      	ldr	r3, [pc, #36]	; (80123b0 <HAL_RCC_ClockConfig+0x1c8>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4618      	mov	r0, r3
 8012390:	f7f4 fc01 	bl	8006b96 <HAL_InitTick>

  return HAL_OK;
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	40023c00 	.word	0x40023c00
 80123a4:	40023800 	.word	0x40023800
 80123a8:	080522f8 	.word	0x080522f8
 80123ac:	20000058 	.word	0x20000058
 80123b0:	2000005c 	.word	0x2000005c

080123b4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b08c      	sub	sp, #48	; 0x30
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d129      	bne.n	801241a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80123c6:	2300      	movs	r3, #0
 80123c8:	617b      	str	r3, [r7, #20]
 80123ca:	4b2b      	ldr	r3, [pc, #172]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 80123cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123ce:	4a2a      	ldr	r2, [pc, #168]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 80123d0:	f043 0301 	orr.w	r3, r3, #1
 80123d4:	6313      	str	r3, [r2, #48]	; 0x30
 80123d6:	4b28      	ldr	r3, [pc, #160]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 80123d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	617b      	str	r3, [r7, #20]
 80123e0:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80123e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80123e8:	2302      	movs	r3, #2
 80123ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80123ec:	2303      	movs	r3, #3
 80123ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123f0:	2300      	movs	r3, #0
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80123f4:	2300      	movs	r3, #0
 80123f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80123f8:	f107 031c 	add.w	r3, r7, #28
 80123fc:	4619      	mov	r1, r3
 80123fe:	481f      	ldr	r0, [pc, #124]	; (801247c <HAL_RCC_MCOConfig+0xc8>)
 8012400:	f7f8 fd76 	bl	800aef0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8012404:	4b1c      	ldr	r3, [pc, #112]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 801240c:	68b9      	ldr	r1, [r7, #8]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	430b      	orrs	r3, r1
 8012412:	4919      	ldr	r1, [pc, #100]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 8012414:	4313      	orrs	r3, r2
 8012416:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8012418:	e029      	b.n	801246e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 801241a:	2300      	movs	r3, #0
 801241c:	61bb      	str	r3, [r7, #24]
 801241e:	4b16      	ldr	r3, [pc, #88]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 8012420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012422:	4a15      	ldr	r2, [pc, #84]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 8012424:	f043 0304 	orr.w	r3, r3, #4
 8012428:	6313      	str	r3, [r2, #48]	; 0x30
 801242a:	4b13      	ldr	r3, [pc, #76]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 801242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801242e:	f003 0304 	and.w	r3, r3, #4
 8012432:	61bb      	str	r3, [r7, #24]
 8012434:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8012436:	f44f 7300 	mov.w	r3, #512	; 0x200
 801243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801243c:	2302      	movs	r3, #2
 801243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012440:	2303      	movs	r3, #3
 8012442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012444:	2300      	movs	r3, #0
 8012446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012448:	2300      	movs	r3, #0
 801244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 801244c:	f107 031c 	add.w	r3, r7, #28
 8012450:	4619      	mov	r1, r3
 8012452:	480b      	ldr	r0, [pc, #44]	; (8012480 <HAL_RCC_MCOConfig+0xcc>)
 8012454:	f7f8 fd4c 	bl	800aef0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8012458:	4b07      	ldr	r3, [pc, #28]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 801245a:	689b      	ldr	r3, [r3, #8]
 801245c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	00d9      	lsls	r1, r3, #3
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	430b      	orrs	r3, r1
 8012468:	4903      	ldr	r1, [pc, #12]	; (8012478 <HAL_RCC_MCOConfig+0xc4>)
 801246a:	4313      	orrs	r3, r2
 801246c:	608b      	str	r3, [r1, #8]
}
 801246e:	bf00      	nop
 8012470:	3730      	adds	r7, #48	; 0x30
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
 8012476:	bf00      	nop
 8012478:	40023800 	.word	0x40023800
 801247c:	40020000 	.word	0x40020000
 8012480:	40020800 	.word	0x40020800

08012484 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012484:	b480      	push	{r7}
 8012486:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8012488:	4b03      	ldr	r3, [pc, #12]	; (8012498 <HAL_RCC_EnableCSS+0x14>)
 801248a:	2201      	movs	r2, #1
 801248c:	601a      	str	r2, [r3, #0]
}
 801248e:	bf00      	nop
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	4247004c 	.word	0x4247004c

0801249c <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 801249c:	b480      	push	{r7}
 801249e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80124a0:	4b03      	ldr	r3, [pc, #12]	; (80124b0 <HAL_RCC_DisableCSS+0x14>)
 80124a2:	2200      	movs	r2, #0
 80124a4:	601a      	str	r2, [r3, #0]
}
 80124a6:	bf00      	nop
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	4247004c 	.word	0x4247004c

080124b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80124b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80124b8:	b094      	sub	sp, #80	; 0x50
 80124ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80124bc:	2300      	movs	r3, #0
 80124be:	647b      	str	r3, [r7, #68]	; 0x44
 80124c0:	2300      	movs	r3, #0
 80124c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124c4:	2300      	movs	r3, #0
 80124c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80124c8:	2300      	movs	r3, #0
 80124ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80124cc:	4b79      	ldr	r3, [pc, #484]	; (80126b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	f003 030c 	and.w	r3, r3, #12
 80124d4:	2b08      	cmp	r3, #8
 80124d6:	d00d      	beq.n	80124f4 <HAL_RCC_GetSysClockFreq+0x40>
 80124d8:	2b08      	cmp	r3, #8
 80124da:	f200 80e1 	bhi.w	80126a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d002      	beq.n	80124e8 <HAL_RCC_GetSysClockFreq+0x34>
 80124e2:	2b04      	cmp	r3, #4
 80124e4:	d003      	beq.n	80124ee <HAL_RCC_GetSysClockFreq+0x3a>
 80124e6:	e0db      	b.n	80126a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80124e8:	4b73      	ldr	r3, [pc, #460]	; (80126b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80124ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80124ec:	e0db      	b.n	80126a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80124ee:	4b73      	ldr	r3, [pc, #460]	; (80126bc <HAL_RCC_GetSysClockFreq+0x208>)
 80124f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80124f2:	e0d8      	b.n	80126a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80124f4:	4b6f      	ldr	r3, [pc, #444]	; (80126b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80124fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80124fe:	4b6d      	ldr	r3, [pc, #436]	; (80126b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012506:	2b00      	cmp	r3, #0
 8012508:	d063      	beq.n	80125d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801250a:	4b6a      	ldr	r3, [pc, #424]	; (80126b4 <HAL_RCC_GetSysClockFreq+0x200>)
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	099b      	lsrs	r3, r3, #6
 8012510:	2200      	movs	r2, #0
 8012512:	63bb      	str	r3, [r7, #56]	; 0x38
 8012514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801251c:	633b      	str	r3, [r7, #48]	; 0x30
 801251e:	2300      	movs	r3, #0
 8012520:	637b      	str	r3, [r7, #52]	; 0x34
 8012522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8012526:	4622      	mov	r2, r4
 8012528:	462b      	mov	r3, r5
 801252a:	f04f 0000 	mov.w	r0, #0
 801252e:	f04f 0100 	mov.w	r1, #0
 8012532:	0159      	lsls	r1, r3, #5
 8012534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012538:	0150      	lsls	r0, r2, #5
 801253a:	4602      	mov	r2, r0
 801253c:	460b      	mov	r3, r1
 801253e:	4621      	mov	r1, r4
 8012540:	1a51      	subs	r1, r2, r1
 8012542:	6139      	str	r1, [r7, #16]
 8012544:	4629      	mov	r1, r5
 8012546:	eb63 0301 	sbc.w	r3, r3, r1
 801254a:	617b      	str	r3, [r7, #20]
 801254c:	f04f 0200 	mov.w	r2, #0
 8012550:	f04f 0300 	mov.w	r3, #0
 8012554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012558:	4659      	mov	r1, fp
 801255a:	018b      	lsls	r3, r1, #6
 801255c:	4651      	mov	r1, sl
 801255e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012562:	4651      	mov	r1, sl
 8012564:	018a      	lsls	r2, r1, #6
 8012566:	4651      	mov	r1, sl
 8012568:	ebb2 0801 	subs.w	r8, r2, r1
 801256c:	4659      	mov	r1, fp
 801256e:	eb63 0901 	sbc.w	r9, r3, r1
 8012572:	f04f 0200 	mov.w	r2, #0
 8012576:	f04f 0300 	mov.w	r3, #0
 801257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012586:	4690      	mov	r8, r2
 8012588:	4699      	mov	r9, r3
 801258a:	4623      	mov	r3, r4
 801258c:	eb18 0303 	adds.w	r3, r8, r3
 8012590:	60bb      	str	r3, [r7, #8]
 8012592:	462b      	mov	r3, r5
 8012594:	eb49 0303 	adc.w	r3, r9, r3
 8012598:	60fb      	str	r3, [r7, #12]
 801259a:	f04f 0200 	mov.w	r2, #0
 801259e:	f04f 0300 	mov.w	r3, #0
 80125a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80125a6:	4629      	mov	r1, r5
 80125a8:	024b      	lsls	r3, r1, #9
 80125aa:	4621      	mov	r1, r4
 80125ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80125b0:	4621      	mov	r1, r4
 80125b2:	024a      	lsls	r2, r1, #9
 80125b4:	4610      	mov	r0, r2
 80125b6:	4619      	mov	r1, r3
 80125b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ba:	2200      	movs	r2, #0
 80125bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80125be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80125c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80125c4:	f007 f996 	bl	80198f4 <__aeabi_uldivmod>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4613      	mov	r3, r2
 80125ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125d0:	e058      	b.n	8012684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80125d2:	4b38      	ldr	r3, [pc, #224]	; (80126b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	099b      	lsrs	r3, r3, #6
 80125d8:	2200      	movs	r2, #0
 80125da:	4618      	mov	r0, r3
 80125dc:	4611      	mov	r1, r2
 80125de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80125e2:	623b      	str	r3, [r7, #32]
 80125e4:	2300      	movs	r3, #0
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24
 80125e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80125ec:	4642      	mov	r2, r8
 80125ee:	464b      	mov	r3, r9
 80125f0:	f04f 0000 	mov.w	r0, #0
 80125f4:	f04f 0100 	mov.w	r1, #0
 80125f8:	0159      	lsls	r1, r3, #5
 80125fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80125fe:	0150      	lsls	r0, r2, #5
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	4641      	mov	r1, r8
 8012606:	ebb2 0a01 	subs.w	sl, r2, r1
 801260a:	4649      	mov	r1, r9
 801260c:	eb63 0b01 	sbc.w	fp, r3, r1
 8012610:	f04f 0200 	mov.w	r2, #0
 8012614:	f04f 0300 	mov.w	r3, #0
 8012618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801261c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8012620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012624:	ebb2 040a 	subs.w	r4, r2, sl
 8012628:	eb63 050b 	sbc.w	r5, r3, fp
 801262c:	f04f 0200 	mov.w	r2, #0
 8012630:	f04f 0300 	mov.w	r3, #0
 8012634:	00eb      	lsls	r3, r5, #3
 8012636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801263a:	00e2      	lsls	r2, r4, #3
 801263c:	4614      	mov	r4, r2
 801263e:	461d      	mov	r5, r3
 8012640:	4643      	mov	r3, r8
 8012642:	18e3      	adds	r3, r4, r3
 8012644:	603b      	str	r3, [r7, #0]
 8012646:	464b      	mov	r3, r9
 8012648:	eb45 0303 	adc.w	r3, r5, r3
 801264c:	607b      	str	r3, [r7, #4]
 801264e:	f04f 0200 	mov.w	r2, #0
 8012652:	f04f 0300 	mov.w	r3, #0
 8012656:	e9d7 4500 	ldrd	r4, r5, [r7]
 801265a:	4629      	mov	r1, r5
 801265c:	028b      	lsls	r3, r1, #10
 801265e:	4621      	mov	r1, r4
 8012660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012664:	4621      	mov	r1, r4
 8012666:	028a      	lsls	r2, r1, #10
 8012668:	4610      	mov	r0, r2
 801266a:	4619      	mov	r1, r3
 801266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801266e:	2200      	movs	r2, #0
 8012670:	61bb      	str	r3, [r7, #24]
 8012672:	61fa      	str	r2, [r7, #28]
 8012674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012678:	f007 f93c 	bl	80198f4 <__aeabi_uldivmod>
 801267c:	4602      	mov	r2, r0
 801267e:	460b      	mov	r3, r1
 8012680:	4613      	mov	r3, r2
 8012682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012684:	4b0b      	ldr	r3, [pc, #44]	; (80126b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	0c1b      	lsrs	r3, r3, #16
 801268a:	f003 0303 	and.w	r3, r3, #3
 801268e:	3301      	adds	r3, #1
 8012690:	005b      	lsls	r3, r3, #1
 8012692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8012694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012698:	fbb2 f3f3 	udiv	r3, r2, r3
 801269c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801269e:	e002      	b.n	80126a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80126a0:	4b05      	ldr	r3, [pc, #20]	; (80126b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80126a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80126a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80126a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3750      	adds	r7, #80	; 0x50
 80126ac:	46bd      	mov	sp, r7
 80126ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80126b2:	bf00      	nop
 80126b4:	40023800 	.word	0x40023800
 80126b8:	00f42400 	.word	0x00f42400
 80126bc:	007a1200 	.word	0x007a1200

080126c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80126c0:	b480      	push	{r7}
 80126c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80126c4:	4b03      	ldr	r3, [pc, #12]	; (80126d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80126c6:	681b      	ldr	r3, [r3, #0]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	20000058 	.word	0x20000058

080126d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80126dc:	f7ff fff0 	bl	80126c0 <HAL_RCC_GetHCLKFreq>
 80126e0:	4602      	mov	r2, r0
 80126e2:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	0a9b      	lsrs	r3, r3, #10
 80126e8:	f003 0307 	and.w	r3, r3, #7
 80126ec:	4903      	ldr	r1, [pc, #12]	; (80126fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80126ee:	5ccb      	ldrb	r3, [r1, r3]
 80126f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	40023800 	.word	0x40023800
 80126fc:	08052308 	.word	0x08052308

08012700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012704:	f7ff ffdc 	bl	80126c0 <HAL_RCC_GetHCLKFreq>
 8012708:	4602      	mov	r2, r0
 801270a:	4b05      	ldr	r3, [pc, #20]	; (8012720 <HAL_RCC_GetPCLK2Freq+0x20>)
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	0b5b      	lsrs	r3, r3, #13
 8012710:	f003 0307 	and.w	r3, r3, #7
 8012714:	4903      	ldr	r1, [pc, #12]	; (8012724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012716:	5ccb      	ldrb	r3, [r1, r3]
 8012718:	fa22 f303 	lsr.w	r3, r2, r3
}
 801271c:	4618      	mov	r0, r3
 801271e:	bd80      	pop	{r7, pc}
 8012720:	40023800 	.word	0x40023800
 8012724:	08052308 	.word	0x08052308

08012728 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	220f      	movs	r2, #15
 8012734:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012736:	4b45      	ldr	r3, [pc, #276]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801273e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012742:	d104      	bne.n	801274e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801274a:	605a      	str	r2, [r3, #4]
 801274c:	e00e      	b.n	801276c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 801274e:	4b3f      	ldr	r3, [pc, #252]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801275a:	d104      	bne.n	8012766 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012762:	605a      	str	r2, [r3, #4]
 8012764:	e002      	b.n	801276c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2200      	movs	r2, #0
 801276a:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 801276c:	4b37      	ldr	r3, [pc, #220]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	f003 0301 	and.w	r3, r3, #1
 8012774:	2b01      	cmp	r3, #1
 8012776:	d103      	bne.n	8012780 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2201      	movs	r2, #1
 801277c:	60da      	str	r2, [r3, #12]
 801277e:	e002      	b.n	8012786 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2200      	movs	r2, #0
 8012784:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8012786:	4b31      	ldr	r3, [pc, #196]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	08db      	lsrs	r3, r3, #3
 801278c:	f003 021f 	and.w	r2, r3, #31
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8012794:	4b2d      	ldr	r3, [pc, #180]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012798:	f003 0304 	and.w	r3, r3, #4
 801279c:	2b04      	cmp	r3, #4
 801279e:	d103      	bne.n	80127a8 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2205      	movs	r2, #5
 80127a4:	609a      	str	r2, [r3, #8]
 80127a6:	e00c      	b.n	80127c2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80127a8:	4b28      	ldr	r3, [pc, #160]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 80127aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ac:	f003 0301 	and.w	r3, r3, #1
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d103      	bne.n	80127bc <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2201      	movs	r2, #1
 80127b8:	609a      	str	r2, [r3, #8]
 80127ba:	e002      	b.n	80127c2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2200      	movs	r2, #0
 80127c0:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80127c2:	4b22      	ldr	r3, [pc, #136]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 80127c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127c6:	f003 0301 	and.w	r3, r3, #1
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d103      	bne.n	80127d6 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2201      	movs	r2, #1
 80127d2:	615a      	str	r2, [r3, #20]
 80127d4:	e002      	b.n	80127dc <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2200      	movs	r2, #0
 80127da:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80127dc:	4b1b      	ldr	r3, [pc, #108]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80127e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80127e8:	d103      	bne.n	80127f2 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2202      	movs	r2, #2
 80127ee:	619a      	str	r2, [r3, #24]
 80127f0:	e002      	b.n	80127f8 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2201      	movs	r2, #1
 80127f6:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80127f8:	4b14      	ldr	r3, [pc, #80]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012804:	4b11      	ldr	r3, [pc, #68]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012810:	4b0e      	ldr	r3, [pc, #56]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	099b      	lsrs	r3, r3, #6
 8012816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 801281e:	4b0b      	ldr	r3, [pc, #44]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012820:	685b      	ldr	r3, [r3, #4]
 8012822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012826:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801282a:	005b      	lsls	r3, r3, #1
 801282c:	0c1a      	lsrs	r2, r3, #16
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8012832:	4b06      	ldr	r3, [pc, #24]	; (801284c <HAL_RCC_GetOscConfig+0x124>)
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	0e1b      	lsrs	r3, r3, #24
 8012838:	f003 020f 	and.w	r2, r3, #15
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012840:	bf00      	nop
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	40023800 	.word	0x40023800

08012850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	220f      	movs	r2, #15
 801285e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012860:	4b12      	ldr	r3, [pc, #72]	; (80128ac <HAL_RCC_GetClockConfig+0x5c>)
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	f003 0203 	and.w	r2, r3, #3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801286c:	4b0f      	ldr	r3, [pc, #60]	; (80128ac <HAL_RCC_GetClockConfig+0x5c>)
 801286e:	689b      	ldr	r3, [r3, #8]
 8012870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012878:	4b0c      	ldr	r3, [pc, #48]	; (80128ac <HAL_RCC_GetClockConfig+0x5c>)
 801287a:	689b      	ldr	r3, [r3, #8]
 801287c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012884:	4b09      	ldr	r3, [pc, #36]	; (80128ac <HAL_RCC_GetClockConfig+0x5c>)
 8012886:	689b      	ldr	r3, [r3, #8]
 8012888:	08db      	lsrs	r3, r3, #3
 801288a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012892:	4b07      	ldr	r3, [pc, #28]	; (80128b0 <HAL_RCC_GetClockConfig+0x60>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f003 0207 	and.w	r2, r3, #7
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	601a      	str	r2, [r3, #0]
}
 801289e:	bf00      	nop
 80128a0:	370c      	adds	r7, #12
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr
 80128aa:	bf00      	nop
 80128ac:	40023800 	.word	0x40023800
 80128b0:	40023c00 	.word	0x40023c00

080128b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80128b8:	4b06      	ldr	r3, [pc, #24]	; (80128d4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128c0:	2b80      	cmp	r3, #128	; 0x80
 80128c2:	d104      	bne.n	80128ce <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80128c4:	f000 f80a 	bl	80128dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80128c8:	4b03      	ldr	r3, [pc, #12]	; (80128d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80128ca:	2280      	movs	r2, #128	; 0x80
 80128cc:	701a      	strb	r2, [r3, #0]
  }
}
 80128ce:	bf00      	nop
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	40023800 	.word	0x40023800
 80128d8:	4002380e 	.word	0x4002380e

080128dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80128dc:	b480      	push	{r7}
 80128de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80128e0:	bf00      	nop
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80128ea:	b580      	push	{r7, lr}
 80128ec:	b086      	sub	sp, #24
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80128f2:	2300      	movs	r3, #0
 80128f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80128f6:	2300      	movs	r3, #0
 80128f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	f003 0301 	and.w	r3, r3, #1
 8012902:	2b00      	cmp	r3, #0
 8012904:	d105      	bne.n	8012912 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801290e:	2b00      	cmp	r3, #0
 8012910:	d035      	beq.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8012912:	4b62      	ldr	r3, [pc, #392]	; (8012a9c <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012914:	2200      	movs	r2, #0
 8012916:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012918:	f7f4 f982 	bl	8006c20 <HAL_GetTick>
 801291c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801291e:	e008      	b.n	8012932 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012920:	f7f4 f97e 	bl	8006c20 <HAL_GetTick>
 8012924:	4602      	mov	r2, r0
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	1ad3      	subs	r3, r2, r3
 801292a:	2b02      	cmp	r3, #2
 801292c:	d901      	bls.n	8012932 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801292e:	2303      	movs	r3, #3
 8012930:	e0b0      	b.n	8012a94 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012932:	4b5b      	ldr	r3, [pc, #364]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801293a:	2b00      	cmp	r3, #0
 801293c:	d1f0      	bne.n	8012920 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	019a      	lsls	r2, r3, #6
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	689b      	ldr	r3, [r3, #8]
 8012948:	071b      	lsls	r3, r3, #28
 801294a:	4955      	ldr	r1, [pc, #340]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801294c:	4313      	orrs	r3, r2
 801294e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8012952:	4b52      	ldr	r3, [pc, #328]	; (8012a9c <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012954:	2201      	movs	r2, #1
 8012956:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012958:	f7f4 f962 	bl	8006c20 <HAL_GetTick>
 801295c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801295e:	e008      	b.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012960:	f7f4 f95e 	bl	8006c20 <HAL_GetTick>
 8012964:	4602      	mov	r2, r0
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	2b02      	cmp	r3, #2
 801296c:	d901      	bls.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801296e:	2303      	movs	r3, #3
 8012970:	e090      	b.n	8012a94 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012972:	4b4b      	ldr	r3, [pc, #300]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801297a:	2b00      	cmp	r3, #0
 801297c:	d0f0      	beq.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f003 0302 	and.w	r3, r3, #2
 8012986:	2b00      	cmp	r3, #0
 8012988:	f000 8083 	beq.w	8012a92 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801298c:	2300      	movs	r3, #0
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	4b43      	ldr	r3, [pc, #268]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012994:	4a42      	ldr	r2, [pc, #264]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801299a:	6413      	str	r3, [r2, #64]	; 0x40
 801299c:	4b40      	ldr	r3, [pc, #256]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129a4:	60fb      	str	r3, [r7, #12]
 80129a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80129a8:	4b3e      	ldr	r3, [pc, #248]	; (8012aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4a3d      	ldr	r2, [pc, #244]	; (8012aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80129ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80129b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80129b4:	f7f4 f934 	bl	8006c20 <HAL_GetTick>
 80129b8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80129ba:	e008      	b.n	80129ce <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80129bc:	f7f4 f930 	bl	8006c20 <HAL_GetTick>
 80129c0:	4602      	mov	r2, r0
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	2b02      	cmp	r3, #2
 80129c8:	d901      	bls.n	80129ce <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80129ca:	2303      	movs	r3, #3
 80129cc:	e062      	b.n	8012a94 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80129ce:	4b35      	ldr	r3, [pc, #212]	; (8012aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d0f0      	beq.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80129da:	4b31      	ldr	r3, [pc, #196]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80129dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80129e2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d02f      	beq.n	8012a4a <HAL_RCCEx_PeriphCLKConfig+0x160>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80129f2:	693a      	ldr	r2, [r7, #16]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d028      	beq.n	8012a4a <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80129f8:	4b29      	ldr	r3, [pc, #164]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80129fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a00:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012a02:	4b29      	ldr	r3, [pc, #164]	; (8012aa8 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012a04:	2201      	movs	r2, #1
 8012a06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012a08:	4b27      	ldr	r3, [pc, #156]	; (8012aa8 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012a0e:	4a24      	ldr	r2, [pc, #144]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012a14:	4b22      	ldr	r3, [pc, #136]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a18:	f003 0301 	and.w	r3, r3, #1
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d114      	bne.n	8012a4a <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012a20:	f7f4 f8fe 	bl	8006c20 <HAL_GetTick>
 8012a24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a26:	e00a      	b.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012a28:	f7f4 f8fa 	bl	8006c20 <HAL_GetTick>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a36:	4293      	cmp	r3, r2
 8012a38:	d901      	bls.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012a3a:	2303      	movs	r3, #3
 8012a3c:	e02a      	b.n	8012a94 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a3e:	4b18      	ldr	r3, [pc, #96]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a42:	f003 0302 	and.w	r3, r3, #2
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d0ee      	beq.n	8012a28 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a56:	d10d      	bne.n	8012a74 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8012a58:	4b11      	ldr	r3, [pc, #68]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a5a:	689b      	ldr	r3, [r3, #8]
 8012a5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	68db      	ldr	r3, [r3, #12]
 8012a64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a6c:	490c      	ldr	r1, [pc, #48]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	608b      	str	r3, [r1, #8]
 8012a72:	e005      	b.n	8012a80 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012a74:	4b0a      	ldr	r3, [pc, #40]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	4a09      	ldr	r2, [pc, #36]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012a7e:	6093      	str	r3, [r2, #8]
 8012a80:	4b07      	ldr	r3, [pc, #28]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a8c:	4904      	ldr	r1, [pc, #16]	; (8012aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3718      	adds	r7, #24
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	42470068 	.word	0x42470068
 8012aa0:	40023800 	.word	0x40023800
 8012aa4:	40007000 	.word	0x40007000
 8012aa8:	42470e40 	.word	0x42470e40

08012aac <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012aac:	b480      	push	{r7}
 8012aae:	b085      	sub	sp, #20
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2203      	movs	r2, #3
 8012ab8:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8012aba:	4b11      	ldr	r3, [pc, #68]	; (8012b00 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ac0:	099b      	lsrs	r3, r3, #6
 8012ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012aca:	4b0d      	ldr	r3, [pc, #52]	; (8012b00 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ad0:	0f1b      	lsrs	r3, r3, #28
 8012ad2:	f003 0207 	and.w	r2, r3, #7
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8012ada:	4b09      	ldr	r3, [pc, #36]	; (8012b00 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012ae2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8012ae4:	4b06      	ldr	r3, [pc, #24]	; (8012b00 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ae8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	431a      	orrs	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012af4:	bf00      	nop
 8012af6:	3714      	adds	r7, #20
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr
 8012b00:	40023800 	.word	0x40023800

08012b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b087      	sub	sp, #28
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8012b10:	2300      	movs	r3, #0
 8012b12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012b14:	2300      	movs	r3, #0
 8012b16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	d13e      	bne.n	8012ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8012b22:	4b23      	ldr	r3, [pc, #140]	; (8012bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d005      	beq.n	8012b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2b01      	cmp	r3, #1
 8012b36:	d12f      	bne.n	8012b98 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012b38:	4b1e      	ldr	r3, [pc, #120]	; (8012bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012b3a:	617b      	str	r3, [r7, #20]
          break;
 8012b3c:	e02f      	b.n	8012b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012b3e:	4b1c      	ldr	r3, [pc, #112]	; (8012bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012b4a:	d108      	bne.n	8012b5e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012b4c:	4b18      	ldr	r3, [pc, #96]	; (8012bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b54:	4a18      	ldr	r2, [pc, #96]	; (8012bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8012b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b5a:	613b      	str	r3, [r7, #16]
 8012b5c:	e007      	b.n	8012b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012b5e:	4b14      	ldr	r3, [pc, #80]	; (8012bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012b60:	685b      	ldr	r3, [r3, #4]
 8012b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b66:	4a15      	ldr	r2, [pc, #84]	; (8012bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b6c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012b6e:	4b10      	ldr	r3, [pc, #64]	; (8012bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b74:	099b      	lsrs	r3, r3, #6
 8012b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	fb02 f303 	mul.w	r3, r2, r3
 8012b80:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8012b82:	4b0b      	ldr	r3, [pc, #44]	; (8012bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b88:	0f1b      	lsrs	r3, r3, #28
 8012b8a:	f003 0307 	and.w	r3, r3, #7
 8012b8e:	68ba      	ldr	r2, [r7, #8]
 8012b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b94:	617b      	str	r3, [r7, #20]
          break;
 8012b96:	e002      	b.n	8012b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	617b      	str	r3, [r7, #20]
          break;
 8012b9c:	bf00      	nop
        }
      }
      break;
 8012b9e:	bf00      	nop
    }
  }
  return frequency;
 8012ba0:	697b      	ldr	r3, [r7, #20]
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	371c      	adds	r7, #28
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	40023800 	.word	0x40023800
 8012bb4:	00bb8000 	.word	0x00bb8000
 8012bb8:	007a1200 	.word	0x007a1200
 8012bbc:	00f42400 	.word	0x00f42400

08012bc0 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012bc8:	4b1d      	ldr	r3, [pc, #116]	; (8012c40 <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012bce:	f7f4 f827 	bl	8006c20 <HAL_GetTick>
 8012bd2:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012bd4:	e008      	b.n	8012be8 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012bd6:	f7f4 f823 	bl	8006c20 <HAL_GetTick>
 8012bda:	4602      	mov	r2, r0
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	d901      	bls.n	8012be8 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012be4:	2303      	movs	r3, #3
 8012be6:	e026      	b.n	8012c36 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012be8:	4b16      	ldr	r3, [pc, #88]	; (8012c44 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d1f0      	bne.n	8012bd6 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	019a      	lsls	r2, r3, #6
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	071b      	lsls	r3, r3, #28
 8012c00:	4910      	ldr	r1, [pc, #64]	; (8012c44 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012c02:	4313      	orrs	r3, r2
 8012c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012c08:	4b0d      	ldr	r3, [pc, #52]	; (8012c40 <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 8012c0e:	f7f4 f807 	bl	8006c20 <HAL_GetTick>
 8012c12:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012c14:	e008      	b.n	8012c28 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012c16:	f7f4 f803 	bl	8006c20 <HAL_GetTick>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	1ad3      	subs	r3, r2, r3
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	d901      	bls.n	8012c28 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012c24:	2303      	movs	r3, #3
 8012c26:	e006      	b.n	8012c36 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012c28:	4b06      	ldr	r3, [pc, #24]	; (8012c44 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d0f0      	beq.n	8012c16 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012c34:	2300      	movs	r3, #0
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3710      	adds	r7, #16
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	42470068 	.word	0x42470068
 8012c44:	40023800 	.word	0x40023800

08012c48 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012c4e:	4b0d      	ldr	r3, [pc, #52]	; (8012c84 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8012c50:	2200      	movs	r2, #0
 8012c52:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012c54:	f7f3 ffe4 	bl	8006c20 <HAL_GetTick>
 8012c58:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012c5a:	e008      	b.n	8012c6e <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012c5c:	f7f3 ffe0 	bl	8006c20 <HAL_GetTick>
 8012c60:	4602      	mov	r2, r0
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	1ad3      	subs	r3, r2, r3
 8012c66:	2b02      	cmp	r3, #2
 8012c68:	d901      	bls.n	8012c6e <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012c6a:	2303      	movs	r3, #3
 8012c6c:	e006      	b.n	8012c7c <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012c6e:	4b06      	ldr	r3, [pc, #24]	; (8012c88 <HAL_RCCEx_DisablePLLI2S+0x40>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d1f0      	bne.n	8012c5c <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8012c7a:	2300      	movs	r3, #0
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	42470068 	.word	0x42470068
 8012c88:	40023800 	.word	0x40023800

08012c8c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012c92:	f7f3 ffc5 	bl	8006c20 <HAL_GetTick>
 8012c96:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8012c98:	4b5d      	ldr	r3, [pc, #372]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	4a5c      	ldr	r2, [pc, #368]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012c9e:	f043 0301 	orr.w	r3, r3, #1
 8012ca2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012ca4:	e008      	b.n	8012cb8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012ca6:	f7f3 ffbb 	bl	8006c20 <HAL_GetTick>
 8012caa:	4602      	mov	r2, r0
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	1ad3      	subs	r3, r2, r3
 8012cb0:	2b02      	cmp	r3, #2
 8012cb2:	d901      	bls.n	8012cb8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8012cb4:	2303      	movs	r3, #3
 8012cb6:	e0a7      	b.n	8012e08 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012cb8:	4b55      	ldr	r3, [pc, #340]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	f003 0302 	and.w	r3, r3, #2
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d0f0      	beq.n	8012ca6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8012cc4:	4b52      	ldr	r3, [pc, #328]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4a51      	ldr	r2, [pc, #324]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012cd0:	f7f3 ffa6 	bl	8006c20 <HAL_GetTick>
 8012cd4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8012cd6:	4b4e      	ldr	r3, [pc, #312]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012cd8:	2200      	movs	r2, #0
 8012cda:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012cdc:	e00a      	b.n	8012cf4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cde:	f7f3 ff9f 	bl	8006c20 <HAL_GetTick>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cec:	4293      	cmp	r3, r2
 8012cee:	d901      	bls.n	8012cf4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	e089      	b.n	8012e08 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012cf4:	4b46      	ldr	r3, [pc, #280]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	f003 030c 	and.w	r3, r3, #12
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d1ee      	bne.n	8012cde <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012d00:	f7f3 ff8e 	bl	8006c20 <HAL_GetTick>
 8012d04:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8012d06:	4b42      	ldr	r3, [pc, #264]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4a41      	ldr	r2, [pc, #260]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d0c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8012d10:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012d12:	e008      	b.n	8012d26 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012d14:	f7f3 ff84 	bl	8006c20 <HAL_GetTick>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	1ad3      	subs	r3, r2, r3
 8012d1e:	2b64      	cmp	r3, #100	; 0x64
 8012d20:	d901      	bls.n	8012d26 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8012d22:	2303      	movs	r3, #3
 8012d24:	e070      	b.n	8012e08 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012d26:	4b3a      	ldr	r3, [pc, #232]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d1f0      	bne.n	8012d14 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012d32:	f7f3 ff75 	bl	8006c20 <HAL_GetTick>
 8012d36:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012d38:	4b35      	ldr	r3, [pc, #212]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4a34      	ldr	r2, [pc, #208]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012d42:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012d44:	e008      	b.n	8012d58 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012d46:	f7f3 ff6b 	bl	8006c20 <HAL_GetTick>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	d901      	bls.n	8012d58 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8012d54:	2303      	movs	r3, #3
 8012d56:	e057      	b.n	8012e08 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012d58:	4b2d      	ldr	r3, [pc, #180]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d1f0      	bne.n	8012d46 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012d64:	f7f3 ff5c 	bl	8006c20 <HAL_GetTick>
 8012d68:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8012d6a:	4b29      	ldr	r3, [pc, #164]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4a28      	ldr	r2, [pc, #160]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012d74:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012d76:	e008      	b.n	8012d8a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012d78:	f7f3 ff52 	bl	8006c20 <HAL_GetTick>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	1ad3      	subs	r3, r2, r3
 8012d82:	2b02      	cmp	r3, #2
 8012d84:	d901      	bls.n	8012d8a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8012d86:	2303      	movs	r3, #3
 8012d88:	e03e      	b.n	8012e08 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012d8a:	4b21      	ldr	r3, [pc, #132]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d1f0      	bne.n	8012d78 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8012d96:	4b1e      	ldr	r3, [pc, #120]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d98:	4a1e      	ldr	r2, [pc, #120]	; (8012e14 <HAL_RCC_DeInit+0x188>)
 8012d9a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8012d9c:	4b1c      	ldr	r3, [pc, #112]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012d9e:	4a1e      	ldr	r2, [pc, #120]	; (8012e18 <HAL_RCC_DeInit+0x18c>)
 8012da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8012da4:	4b1a      	ldr	r3, [pc, #104]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	4a19      	ldr	r2, [pc, #100]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012daa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8012dae:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8012db0:	4b17      	ldr	r3, [pc, #92]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012db2:	68db      	ldr	r3, [r3, #12]
 8012db4:	4a16      	ldr	r2, [pc, #88]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012dba:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8012dbc:	4b14      	ldr	r3, [pc, #80]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	4a13      	ldr	r2, [pc, #76]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012dc2:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8012dc6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8012dc8:	4b11      	ldr	r3, [pc, #68]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	4a10      	ldr	r2, [pc, #64]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012dd2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8012dd4:	4b0e      	ldr	r3, [pc, #56]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dd8:	4a0d      	ldr	r2, [pc, #52]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012dda:	f023 0301 	bic.w	r3, r3, #1
 8012dde:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8012de0:	4b0b      	ldr	r3, [pc, #44]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012de4:	4a0a      	ldr	r2, [pc, #40]	; (8012e10 <HAL_RCC_DeInit+0x184>)
 8012de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012dea:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8012dec:	4b0b      	ldr	r3, [pc, #44]	; (8012e1c <HAL_RCC_DeInit+0x190>)
 8012dee:	4a0c      	ldr	r2, [pc, #48]	; (8012e20 <HAL_RCC_DeInit+0x194>)
 8012df0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8012df2:	4b0c      	ldr	r3, [pc, #48]	; (8012e24 <HAL_RCC_DeInit+0x198>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7f3 fecd 	bl	8006b96 <HAL_InitTick>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e000      	b.n	8012e08 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8012e06:	2300      	movs	r3, #0
  }
}
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}
 8012e10:	40023800 	.word	0x40023800
 8012e14:	04003010 	.word	0x04003010
 8012e18:	20003000 	.word	0x20003000
 8012e1c:	20000058 	.word	0x20000058
 8012e20:	00f42400 	.word	0x00f42400
 8012e24:	2000005c 	.word	0x2000005c

08012e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d101      	bne.n	8012e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012e36:	2301      	movs	r3, #1
 8012e38:	e07b      	b.n	8012f32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d108      	bne.n	8012e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e4a:	d009      	beq.n	8012e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	61da      	str	r2, [r3, #28]
 8012e52:	e005      	b.n	8012e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2200      	movs	r2, #0
 8012e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2200      	movs	r2, #0
 8012e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012e7a:	6878      	ldr	r0, [r7, #4]
 8012e7c:	f7f2 fc1a 	bl	80056b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2202      	movs	r2, #2
 8012e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	689b      	ldr	r3, [r3, #8]
 8012ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012ea8:	431a      	orrs	r2, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	68db      	ldr	r3, [r3, #12]
 8012eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012eb2:	431a      	orrs	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	691b      	ldr	r3, [r3, #16]
 8012eb8:	f003 0302 	and.w	r3, r3, #2
 8012ebc:	431a      	orrs	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	695b      	ldr	r3, [r3, #20]
 8012ec2:	f003 0301 	and.w	r3, r3, #1
 8012ec6:	431a      	orrs	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	699b      	ldr	r3, [r3, #24]
 8012ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012ed0:	431a      	orrs	r2, r3
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	69db      	ldr	r3, [r3, #28]
 8012ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012eda:	431a      	orrs	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6a1b      	ldr	r3, [r3, #32]
 8012ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ee4:	ea42 0103 	orr.w	r1, r2, r3
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	430a      	orrs	r2, r1
 8012ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	699b      	ldr	r3, [r3, #24]
 8012efc:	0c1b      	lsrs	r3, r3, #16
 8012efe:	f003 0104 	and.w	r1, r3, #4
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f06:	f003 0210 	and.w	r2, r3, #16
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	430a      	orrs	r2, r1
 8012f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	69da      	ldr	r2, [r3, #28]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2200      	movs	r2, #0
 8012f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b082      	sub	sp, #8
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d101      	bne.n	8012f4c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	e01a      	b.n	8012f82 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2202      	movs	r2, #2
 8012f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7f2 fcdd 	bl	8005924 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2200      	movs	r2, #0
 8012f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b088      	sub	sp, #32
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	60f8      	str	r0, [r7, #12]
 8012f92:	60b9      	str	r1, [r7, #8]
 8012f94:	603b      	str	r3, [r7, #0]
 8012f96:	4613      	mov	r3, r2
 8012f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d101      	bne.n	8012fac <HAL_SPI_Transmit+0x22>
 8012fa8:	2302      	movs	r3, #2
 8012faa:	e126      	b.n	80131fa <HAL_SPI_Transmit+0x270>
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	2201      	movs	r2, #1
 8012fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012fb4:	f7f3 fe34 	bl	8006c20 <HAL_GetTick>
 8012fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012fba:	88fb      	ldrh	r3, [r7, #6]
 8012fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	2b01      	cmp	r3, #1
 8012fc8:	d002      	beq.n	8012fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012fca:	2302      	movs	r3, #2
 8012fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012fce:	e10b      	b.n	80131e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d002      	beq.n	8012fdc <HAL_SPI_Transmit+0x52>
 8012fd6:	88fb      	ldrh	r3, [r7, #6]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d102      	bne.n	8012fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012fe0:	e102      	b.n	80131e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2203      	movs	r2, #3
 8012fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2200      	movs	r2, #0
 8012fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	88fa      	ldrh	r2, [r7, #6]
 8012ffa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	88fa      	ldrh	r2, [r7, #6]
 8013000:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2200      	movs	r2, #0
 8013006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2200      	movs	r2, #0
 801300c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2200      	movs	r2, #0
 8013018:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2200      	movs	r2, #0
 801301e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013028:	d10f      	bne.n	801304a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013054:	2b40      	cmp	r3, #64	; 0x40
 8013056:	d007      	beq.n	8013068 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	681a      	ldr	r2, [r3, #0]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013070:	d14b      	bne.n	801310a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <HAL_SPI_Transmit+0xf6>
 801307a:	8afb      	ldrh	r3, [r7, #22]
 801307c:	2b01      	cmp	r3, #1
 801307e:	d13e      	bne.n	80130fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013084:	881a      	ldrh	r2, [r3, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013090:	1c9a      	adds	r2, r3, #2
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801309a:	b29b      	uxth	r3, r3
 801309c:	3b01      	subs	r3, #1
 801309e:	b29a      	uxth	r2, r3
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80130a4:	e02b      	b.n	80130fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	f003 0302 	and.w	r3, r3, #2
 80130b0:	2b02      	cmp	r3, #2
 80130b2:	d112      	bne.n	80130da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130b8:	881a      	ldrh	r2, [r3, #0]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c4:	1c9a      	adds	r2, r3, #2
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	3b01      	subs	r3, #1
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80130d8:	e011      	b.n	80130fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80130da:	f7f3 fda1 	bl	8006c20 <HAL_GetTick>
 80130de:	4602      	mov	r2, r0
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	1ad3      	subs	r3, r2, r3
 80130e4:	683a      	ldr	r2, [r7, #0]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d803      	bhi.n	80130f2 <HAL_SPI_Transmit+0x168>
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130f0:	d102      	bne.n	80130f8 <HAL_SPI_Transmit+0x16e>
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d102      	bne.n	80130fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80130f8:	2303      	movs	r3, #3
 80130fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80130fc:	e074      	b.n	80131e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013102:	b29b      	uxth	r3, r3
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1ce      	bne.n	80130a6 <HAL_SPI_Transmit+0x11c>
 8013108:	e04c      	b.n	80131a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d002      	beq.n	8013118 <HAL_SPI_Transmit+0x18e>
 8013112:	8afb      	ldrh	r3, [r7, #22]
 8013114:	2b01      	cmp	r3, #1
 8013116:	d140      	bne.n	801319a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	330c      	adds	r3, #12
 8013122:	7812      	ldrb	r2, [r2, #0]
 8013124:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801312a:	1c5a      	adds	r2, r3, #1
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013134:	b29b      	uxth	r3, r3
 8013136:	3b01      	subs	r3, #1
 8013138:	b29a      	uxth	r2, r3
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801313e:	e02c      	b.n	801319a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	f003 0302 	and.w	r3, r3, #2
 801314a:	2b02      	cmp	r3, #2
 801314c:	d113      	bne.n	8013176 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	330c      	adds	r3, #12
 8013158:	7812      	ldrb	r2, [r2, #0]
 801315a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013160:	1c5a      	adds	r2, r3, #1
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801316a:	b29b      	uxth	r3, r3
 801316c:	3b01      	subs	r3, #1
 801316e:	b29a      	uxth	r2, r3
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	86da      	strh	r2, [r3, #54]	; 0x36
 8013174:	e011      	b.n	801319a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013176:	f7f3 fd53 	bl	8006c20 <HAL_GetTick>
 801317a:	4602      	mov	r2, r0
 801317c:	69bb      	ldr	r3, [r7, #24]
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	683a      	ldr	r2, [r7, #0]
 8013182:	429a      	cmp	r2, r3
 8013184:	d803      	bhi.n	801318e <HAL_SPI_Transmit+0x204>
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318c:	d102      	bne.n	8013194 <HAL_SPI_Transmit+0x20a>
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d102      	bne.n	801319a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013194:	2303      	movs	r3, #3
 8013196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013198:	e026      	b.n	80131e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801319e:	b29b      	uxth	r3, r3
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d1cd      	bne.n	8013140 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80131a4:	69ba      	ldr	r2, [r7, #24]
 80131a6:	6839      	ldr	r1, [r7, #0]
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f001 ff3e 	bl	801502a <SPI_EndRxTxTransaction>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d002      	beq.n	80131ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2220      	movs	r2, #32
 80131b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	689b      	ldr	r3, [r3, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d10a      	bne.n	80131d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80131c2:	2300      	movs	r3, #0
 80131c4:	613b      	str	r3, [r7, #16]
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	68db      	ldr	r3, [r3, #12]
 80131cc:	613b      	str	r3, [r7, #16]
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	613b      	str	r3, [r7, #16]
 80131d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d002      	beq.n	80131e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80131e0:	2301      	movs	r3, #1
 80131e2:	77fb      	strb	r3, [r7, #31]
 80131e4:	e000      	b.n	80131e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80131e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2201      	movs	r2, #1
 80131ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2200      	movs	r2, #0
 80131f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80131f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80131fa:	4618      	mov	r0, r3
 80131fc:	3720      	adds	r7, #32
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}

08013202 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013202:	b580      	push	{r7, lr}
 8013204:	b088      	sub	sp, #32
 8013206:	af02      	add	r7, sp, #8
 8013208:	60f8      	str	r0, [r7, #12]
 801320a:	60b9      	str	r1, [r7, #8]
 801320c:	603b      	str	r3, [r7, #0]
 801320e:	4613      	mov	r3, r2
 8013210:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013212:	2300      	movs	r3, #0
 8013214:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801321e:	d112      	bne.n	8013246 <HAL_SPI_Receive+0x44>
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d10e      	bne.n	8013246 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2204      	movs	r2, #4
 801322c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013230:	88fa      	ldrh	r2, [r7, #6]
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	4613      	mov	r3, r2
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	68b9      	ldr	r1, [r7, #8]
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f000 f8f1 	bl	8013424 <HAL_SPI_TransmitReceive>
 8013242:	4603      	mov	r3, r0
 8013244:	e0ea      	b.n	801341c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801324c:	2b01      	cmp	r3, #1
 801324e:	d101      	bne.n	8013254 <HAL_SPI_Receive+0x52>
 8013250:	2302      	movs	r3, #2
 8013252:	e0e3      	b.n	801341c <HAL_SPI_Receive+0x21a>
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801325c:	f7f3 fce0 	bl	8006c20 <HAL_GetTick>
 8013260:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013268:	b2db      	uxtb	r3, r3
 801326a:	2b01      	cmp	r3, #1
 801326c:	d002      	beq.n	8013274 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801326e:	2302      	movs	r3, #2
 8013270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013272:	e0ca      	b.n	801340a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d002      	beq.n	8013280 <HAL_SPI_Receive+0x7e>
 801327a:	88fb      	ldrh	r3, [r7, #6]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d102      	bne.n	8013286 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013280:	2301      	movs	r3, #1
 8013282:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013284:	e0c1      	b.n	801340a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2204      	movs	r2, #4
 801328a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2200      	movs	r2, #0
 8013292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	88fa      	ldrh	r2, [r7, #6]
 801329e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	88fa      	ldrh	r2, [r7, #6]
 80132a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2200      	movs	r2, #0
 80132aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2200      	movs	r2, #0
 80132b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2200      	movs	r2, #0
 80132b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2200      	movs	r2, #0
 80132bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	2200      	movs	r2, #0
 80132c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132cc:	d10f      	bne.n	80132ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80132dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80132ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132f8:	2b40      	cmp	r3, #64	; 0x40
 80132fa:	d007      	beq.n	801330c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801330a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d162      	bne.n	80133da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013314:	e02e      	b.n	8013374 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	689b      	ldr	r3, [r3, #8]
 801331c:	f003 0301 	and.w	r3, r3, #1
 8013320:	2b01      	cmp	r3, #1
 8013322:	d115      	bne.n	8013350 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f103 020c 	add.w	r2, r3, #12
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013330:	7812      	ldrb	r2, [r2, #0]
 8013332:	b2d2      	uxtb	r2, r2
 8013334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801333a:	1c5a      	adds	r2, r3, #1
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013344:	b29b      	uxth	r3, r3
 8013346:	3b01      	subs	r3, #1
 8013348:	b29a      	uxth	r2, r3
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801334e:	e011      	b.n	8013374 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013350:	f7f3 fc66 	bl	8006c20 <HAL_GetTick>
 8013354:	4602      	mov	r2, r0
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	683a      	ldr	r2, [r7, #0]
 801335c:	429a      	cmp	r2, r3
 801335e:	d803      	bhi.n	8013368 <HAL_SPI_Receive+0x166>
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013366:	d102      	bne.n	801336e <HAL_SPI_Receive+0x16c>
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d102      	bne.n	8013374 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801336e:	2303      	movs	r3, #3
 8013370:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013372:	e04a      	b.n	801340a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013378:	b29b      	uxth	r3, r3
 801337a:	2b00      	cmp	r3, #0
 801337c:	d1cb      	bne.n	8013316 <HAL_SPI_Receive+0x114>
 801337e:	e031      	b.n	80133e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	689b      	ldr	r3, [r3, #8]
 8013386:	f003 0301 	and.w	r3, r3, #1
 801338a:	2b01      	cmp	r3, #1
 801338c:	d113      	bne.n	80133b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	68da      	ldr	r2, [r3, #12]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013398:	b292      	uxth	r2, r2
 801339a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133a0:	1c9a      	adds	r2, r3, #2
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	3b01      	subs	r3, #1
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80133b4:	e011      	b.n	80133da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80133b6:	f7f3 fc33 	bl	8006c20 <HAL_GetTick>
 80133ba:	4602      	mov	r2, r0
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	683a      	ldr	r2, [r7, #0]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d803      	bhi.n	80133ce <HAL_SPI_Receive+0x1cc>
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133cc:	d102      	bne.n	80133d4 <HAL_SPI_Receive+0x1d2>
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d102      	bne.n	80133da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80133d4:	2303      	movs	r3, #3
 80133d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80133d8:	e017      	b.n	801340a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133de:	b29b      	uxth	r3, r3
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1cd      	bne.n	8013380 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80133e4:	693a      	ldr	r2, [r7, #16]
 80133e6:	6839      	ldr	r1, [r7, #0]
 80133e8:	68f8      	ldr	r0, [r7, #12]
 80133ea:	f001 fdb9 	bl	8014f60 <SPI_EndRxTransaction>
 80133ee:	4603      	mov	r3, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2220      	movs	r2, #32
 80133f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d002      	beq.n	8013408 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8013402:	2301      	movs	r3, #1
 8013404:	75fb      	strb	r3, [r7, #23]
 8013406:	e000      	b.n	801340a <HAL_SPI_Receive+0x208>
  }

error :
 8013408:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	2201      	movs	r2, #1
 801340e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2200      	movs	r2, #0
 8013416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801341a:	7dfb      	ldrb	r3, [r7, #23]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b08c      	sub	sp, #48	; 0x30
 8013428:	af00      	add	r7, sp, #0
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
 8013430:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013432:	2301      	movs	r3, #1
 8013434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013436:	2300      	movs	r3, #0
 8013438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013442:	2b01      	cmp	r3, #1
 8013444:	d101      	bne.n	801344a <HAL_SPI_TransmitReceive+0x26>
 8013446:	2302      	movs	r3, #2
 8013448:	e18a      	b.n	8013760 <HAL_SPI_TransmitReceive+0x33c>
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2201      	movs	r2, #1
 801344e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013452:	f7f3 fbe5 	bl	8006c20 <HAL_GetTick>
 8013456:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013468:	887b      	ldrh	r3, [r7, #2]
 801346a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801346c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013470:	2b01      	cmp	r3, #1
 8013472:	d00f      	beq.n	8013494 <HAL_SPI_TransmitReceive+0x70>
 8013474:	69fb      	ldr	r3, [r7, #28]
 8013476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801347a:	d107      	bne.n	801348c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d103      	bne.n	801348c <HAL_SPI_TransmitReceive+0x68>
 8013484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013488:	2b04      	cmp	r3, #4
 801348a:	d003      	beq.n	8013494 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801348c:	2302      	movs	r3, #2
 801348e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013492:	e15b      	b.n	801374c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d005      	beq.n	80134a6 <HAL_SPI_TransmitReceive+0x82>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d002      	beq.n	80134a6 <HAL_SPI_TransmitReceive+0x82>
 80134a0:	887b      	ldrh	r3, [r7, #2]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d103      	bne.n	80134ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80134a6:	2301      	movs	r3, #1
 80134a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80134ac:	e14e      	b.n	801374c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	2b04      	cmp	r3, #4
 80134b8:	d003      	beq.n	80134c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2205      	movs	r2, #5
 80134be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2200      	movs	r2, #0
 80134c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	887a      	ldrh	r2, [r7, #2]
 80134d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	887a      	ldrh	r2, [r7, #2]
 80134d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	68ba      	ldr	r2, [r7, #8]
 80134de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	887a      	ldrh	r2, [r7, #2]
 80134e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	887a      	ldrh	r2, [r7, #2]
 80134ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	2200      	movs	r2, #0
 80134f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2200      	movs	r2, #0
 80134f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013502:	2b40      	cmp	r3, #64	; 0x40
 8013504:	d007      	beq.n	8013516 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	68db      	ldr	r3, [r3, #12]
 801351a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801351e:	d178      	bne.n	8013612 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d002      	beq.n	801352e <HAL_SPI_TransmitReceive+0x10a>
 8013528:	8b7b      	ldrh	r3, [r7, #26]
 801352a:	2b01      	cmp	r3, #1
 801352c:	d166      	bne.n	80135fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013532:	881a      	ldrh	r2, [r3, #0]
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801353e:	1c9a      	adds	r2, r3, #2
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013548:	b29b      	uxth	r3, r3
 801354a:	3b01      	subs	r3, #1
 801354c:	b29a      	uxth	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013552:	e053      	b.n	80135fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	f003 0302 	and.w	r3, r3, #2
 801355e:	2b02      	cmp	r3, #2
 8013560:	d11b      	bne.n	801359a <HAL_SPI_TransmitReceive+0x176>
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013566:	b29b      	uxth	r3, r3
 8013568:	2b00      	cmp	r3, #0
 801356a:	d016      	beq.n	801359a <HAL_SPI_TransmitReceive+0x176>
 801356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356e:	2b01      	cmp	r3, #1
 8013570:	d113      	bne.n	801359a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013576:	881a      	ldrh	r2, [r3, #0]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013582:	1c9a      	adds	r2, r3, #2
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801358c:	b29b      	uxth	r3, r3
 801358e:	3b01      	subs	r3, #1
 8013590:	b29a      	uxth	r2, r3
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013596:	2300      	movs	r3, #0
 8013598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	d119      	bne.n	80135dc <HAL_SPI_TransmitReceive+0x1b8>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d014      	beq.n	80135dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	68da      	ldr	r2, [r3, #12]
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135bc:	b292      	uxth	r2, r2
 80135be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135c4:	1c9a      	adds	r2, r3, #2
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	3b01      	subs	r3, #1
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80135d8:	2301      	movs	r3, #1
 80135da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80135dc:	f7f3 fb20 	bl	8006c20 <HAL_GetTick>
 80135e0:	4602      	mov	r2, r0
 80135e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d807      	bhi.n	80135fc <HAL_SPI_TransmitReceive+0x1d8>
 80135ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135f2:	d003      	beq.n	80135fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80135f4:	2303      	movs	r3, #3
 80135f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80135fa:	e0a7      	b.n	801374c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013600:	b29b      	uxth	r3, r3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d1a6      	bne.n	8013554 <HAL_SPI_TransmitReceive+0x130>
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801360a:	b29b      	uxth	r3, r3
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1a1      	bne.n	8013554 <HAL_SPI_TransmitReceive+0x130>
 8013610:	e07c      	b.n	801370c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d002      	beq.n	8013620 <HAL_SPI_TransmitReceive+0x1fc>
 801361a:	8b7b      	ldrh	r3, [r7, #26]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d16b      	bne.n	80136f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	330c      	adds	r3, #12
 801362a:	7812      	ldrb	r2, [r2, #0]
 801362c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013632:	1c5a      	adds	r2, r3, #1
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801363c:	b29b      	uxth	r3, r3
 801363e:	3b01      	subs	r3, #1
 8013640:	b29a      	uxth	r2, r3
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013646:	e057      	b.n	80136f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	689b      	ldr	r3, [r3, #8]
 801364e:	f003 0302 	and.w	r3, r3, #2
 8013652:	2b02      	cmp	r3, #2
 8013654:	d11c      	bne.n	8013690 <HAL_SPI_TransmitReceive+0x26c>
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801365a:	b29b      	uxth	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d017      	beq.n	8013690 <HAL_SPI_TransmitReceive+0x26c>
 8013660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013662:	2b01      	cmp	r3, #1
 8013664:	d114      	bne.n	8013690 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	330c      	adds	r3, #12
 8013670:	7812      	ldrb	r2, [r2, #0]
 8013672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013678:	1c5a      	adds	r2, r3, #1
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013682:	b29b      	uxth	r3, r3
 8013684:	3b01      	subs	r3, #1
 8013686:	b29a      	uxth	r2, r3
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801368c:	2300      	movs	r3, #0
 801368e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	689b      	ldr	r3, [r3, #8]
 8013696:	f003 0301 	and.w	r3, r3, #1
 801369a:	2b01      	cmp	r3, #1
 801369c:	d119      	bne.n	80136d2 <HAL_SPI_TransmitReceive+0x2ae>
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d014      	beq.n	80136d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	68da      	ldr	r2, [r3, #12]
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136b2:	b2d2      	uxtb	r2, r2
 80136b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ba:	1c5a      	adds	r2, r3, #1
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	3b01      	subs	r3, #1
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80136ce:	2301      	movs	r3, #1
 80136d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80136d2:	f7f3 faa5 	bl	8006c20 <HAL_GetTick>
 80136d6:	4602      	mov	r2, r0
 80136d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136da:	1ad3      	subs	r3, r2, r3
 80136dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136de:	429a      	cmp	r2, r3
 80136e0:	d803      	bhi.n	80136ea <HAL_SPI_TransmitReceive+0x2c6>
 80136e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136e8:	d102      	bne.n	80136f0 <HAL_SPI_TransmitReceive+0x2cc>
 80136ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d103      	bne.n	80136f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80136f0:	2303      	movs	r3, #3
 80136f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80136f6:	e029      	b.n	801374c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1a2      	bne.n	8013648 <HAL_SPI_TransmitReceive+0x224>
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013706:	b29b      	uxth	r3, r3
 8013708:	2b00      	cmp	r3, #0
 801370a:	d19d      	bne.n	8013648 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801370e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f001 fc8a 	bl	801502a <SPI_EndRxTxTransaction>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d006      	beq.n	801372a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801371c:	2301      	movs	r3, #1
 801371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2220      	movs	r2, #32
 8013726:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013728:	e010      	b.n	801374c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d10b      	bne.n	801374a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013732:	2300      	movs	r3, #0
 8013734:	617b      	str	r3, [r7, #20]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	617b      	str	r3, [r7, #20]
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	617b      	str	r3, [r7, #20]
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	e000      	b.n	801374c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801374a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2201      	movs	r2, #1
 8013750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	2200      	movs	r2, #0
 8013758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801375c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013760:	4618      	mov	r0, r3
 8013762:	3730      	adds	r7, #48	; 0x30
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013768:	b480      	push	{r7}
 801376a:	b087      	sub	sp, #28
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	4613      	mov	r3, r2
 8013774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013776:	2300      	movs	r3, #0
 8013778:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013780:	2b01      	cmp	r3, #1
 8013782:	d101      	bne.n	8013788 <HAL_SPI_Transmit_IT+0x20>
 8013784:	2302      	movs	r3, #2
 8013786:	e06f      	b.n	8013868 <HAL_SPI_Transmit_IT+0x100>
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	2201      	movs	r2, #1
 801378c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d002      	beq.n	801379c <HAL_SPI_Transmit_IT+0x34>
 8013796:	88fb      	ldrh	r3, [r7, #6]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d102      	bne.n	80137a2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 801379c:	2301      	movs	r3, #1
 801379e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80137a0:	e05d      	b.n	801385e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80137a8:	b2db      	uxtb	r3, r3
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d002      	beq.n	80137b4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80137ae:	2302      	movs	r3, #2
 80137b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80137b2:	e054      	b.n	801385e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2203      	movs	r2, #3
 80137b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2200      	movs	r2, #0
 80137c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	68ba      	ldr	r2, [r7, #8]
 80137c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	88fa      	ldrh	r2, [r7, #6]
 80137cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	88fa      	ldrh	r2, [r7, #6]
 80137d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2200      	movs	r2, #0
 80137d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2200      	movs	r2, #0
 80137de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2200      	movs	r2, #0
 80137e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2200      	movs	r2, #0
 80137ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d003      	beq.n	80137fc <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	4a1f      	ldr	r2, [pc, #124]	; (8013874 <HAL_SPI_Transmit_IT+0x10c>)
 80137f8:	645a      	str	r2, [r3, #68]	; 0x44
 80137fa:	e002      	b.n	8013802 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	4a1e      	ldr	r2, [pc, #120]	; (8013878 <HAL_SPI_Transmit_IT+0x110>)
 8013800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	689b      	ldr	r3, [r3, #8]
 8013806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801380a:	d10f      	bne.n	801382c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	681a      	ldr	r2, [r3, #0]
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801381a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801382a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	685a      	ldr	r2, [r3, #4]
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 801383a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013846:	2b40      	cmp	r3, #64	; 0x40
 8013848:	d008      	beq.n	801385c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	e000      	b.n	801385e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 801385c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2200      	movs	r2, #0
 8013862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013866:	7dfb      	ldrb	r3, [r7, #23]
}
 8013868:	4618      	mov	r0, r3
 801386a:	371c      	adds	r7, #28
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr
 8013874:	08014e0d 	.word	0x08014e0d
 8013878:	08014dc7 	.word	0x08014dc7

0801387c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b086      	sub	sp, #24
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	4613      	mov	r3, r2
 8013888:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801388a:	2300      	movs	r3, #0
 801388c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	689b      	ldr	r3, [r3, #8]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d110      	bne.n	80138b8 <HAL_SPI_Receive_IT+0x3c>
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801389e:	d10b      	bne.n	80138b8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2204      	movs	r2, #4
 80138a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80138a8:	88fb      	ldrh	r3, [r7, #6]
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	68b9      	ldr	r1, [r7, #8]
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f000 f882 	bl	80139b8 <HAL_SPI_TransmitReceive_IT>
 80138b4:	4603      	mov	r3, r0
 80138b6:	e076      	b.n	80139a6 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d101      	bne.n	80138c6 <HAL_SPI_Receive_IT+0x4a>
 80138c2:	2302      	movs	r3, #2
 80138c4:	e06f      	b.n	80139a6 <HAL_SPI_Receive_IT+0x12a>
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2201      	movs	r2, #1
 80138ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138d4:	b2db      	uxtb	r3, r3
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	d002      	beq.n	80138e0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80138da:	2302      	movs	r3, #2
 80138dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138de:	e05d      	b.n	801399c <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d002      	beq.n	80138ec <HAL_SPI_Receive_IT+0x70>
 80138e6:	88fb      	ldrh	r3, [r7, #6]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d102      	bne.n	80138f2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80138ec:	2301      	movs	r3, #1
 80138ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80138f0:	e054      	b.n	801399c <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2204      	movs	r2, #4
 80138f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2200      	movs	r2, #0
 80138fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	68ba      	ldr	r2, [r7, #8]
 8013904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	88fa      	ldrh	r2, [r7, #6]
 801390a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	88fa      	ldrh	r2, [r7, #6]
 8013910:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2200      	movs	r2, #0
 801391c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2200      	movs	r2, #0
 8013922:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	2200      	movs	r2, #0
 8013928:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d003      	beq.n	801393a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	4a1e      	ldr	r2, [pc, #120]	; (80139b0 <HAL_SPI_Receive_IT+0x134>)
 8013936:	641a      	str	r2, [r3, #64]	; 0x40
 8013938:	e002      	b.n	8013940 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	4a1d      	ldr	r2, [pc, #116]	; (80139b4 <HAL_SPI_Receive_IT+0x138>)
 801393e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	689b      	ldr	r3, [r3, #8]
 8013944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013948:	d10f      	bne.n	801396a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	685a      	ldr	r2, [r3, #4]
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8013978:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013984:	2b40      	cmp	r3, #64	; 0x40
 8013986:	d008      	beq.n	801399a <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013996:	601a      	str	r2, [r3, #0]
 8013998:	e000      	b.n	801399c <HAL_SPI_Receive_IT+0x120>
  }

error :
 801399a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2200      	movs	r2, #0
 80139a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80139a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3718      	adds	r7, #24
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	08014d81 	.word	0x08014d81
 80139b4:	08014d37 	.word	0x08014d37

080139b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80139b8:	b480      	push	{r7}
 80139ba:	b087      	sub	sp, #28
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
 80139c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80139c6:	2300      	movs	r3, #0
 80139c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80139d0:	2b01      	cmp	r3, #1
 80139d2:	d101      	bne.n	80139d8 <HAL_SPI_TransmitReceive_IT+0x20>
 80139d4:	2302      	movs	r3, #2
 80139d6:	e075      	b.n	8013ac4 <HAL_SPI_TransmitReceive_IT+0x10c>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2201      	movs	r2, #1
 80139dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80139e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80139ee:	7dbb      	ldrb	r3, [r7, #22]
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	d00d      	beq.n	8013a10 <HAL_SPI_TransmitReceive_IT+0x58>
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80139fa:	d106      	bne.n	8013a0a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	689b      	ldr	r3, [r3, #8]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d102      	bne.n	8013a0a <HAL_SPI_TransmitReceive_IT+0x52>
 8013a04:	7dbb      	ldrb	r3, [r7, #22]
 8013a06:	2b04      	cmp	r3, #4
 8013a08:	d002      	beq.n	8013a10 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013a0a:	2302      	movs	r3, #2
 8013a0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a0e:	e054      	b.n	8013aba <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d005      	beq.n	8013a22 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d002      	beq.n	8013a22 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013a1c:	887b      	ldrh	r3, [r7, #2]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d102      	bne.n	8013a28 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8013a22:	2301      	movs	r3, #1
 8013a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013a26:	e048      	b.n	8013aba <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	2b04      	cmp	r3, #4
 8013a32:	d003      	beq.n	8013a3c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2205      	movs	r2, #5
 8013a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	68ba      	ldr	r2, [r7, #8]
 8013a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	887a      	ldrh	r2, [r7, #2]
 8013a4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	887a      	ldrh	r2, [r7, #2]
 8013a52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	887a      	ldrh	r2, [r7, #2]
 8013a5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	887a      	ldrh	r2, [r7, #2]
 8013a64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d006      	beq.n	8013a7c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	4a17      	ldr	r2, [pc, #92]	; (8013ad0 <HAL_SPI_TransmitReceive_IT+0x118>)
 8013a72:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	4a17      	ldr	r2, [pc, #92]	; (8013ad4 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8013a78:	645a      	str	r2, [r3, #68]	; 0x44
 8013a7a:	e005      	b.n	8013a88 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	4a16      	ldr	r2, [pc, #88]	; (8013ad8 <HAL_SPI_TransmitReceive_IT+0x120>)
 8013a80:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	4a15      	ldr	r2, [pc, #84]	; (8013adc <HAL_SPI_TransmitReceive_IT+0x124>)
 8013a86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	685a      	ldr	r2, [r3, #4]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8013a96:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013aa2:	2b40      	cmp	r3, #64	; 0x40
 8013aa4:	d008      	beq.n	8013ab8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ab4:	601a      	str	r2, [r3, #0]
 8013ab6:	e000      	b.n	8013aba <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8013ab8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2200      	movs	r2, #0
 8013abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	371c      	adds	r7, #28
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr
 8013ad0:	08014c79 	.word	0x08014c79
 8013ad4:	08014cd9 	.word	0x08014cd9
 8013ad8:	08014bb5 	.word	0x08014bb5
 8013adc:	08014c19 	.word	0x08014c19

08013ae0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b086      	sub	sp, #24
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	60b9      	str	r1, [r7, #8]
 8013aea:	4613      	mov	r3, r2
 8013aec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013aee:	2300      	movs	r3, #0
 8013af0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d101      	bne.n	8013b00 <HAL_SPI_Transmit_DMA+0x20>
 8013afc:	2302      	movs	r3, #2
 8013afe:	e09b      	b.n	8013c38 <HAL_SPI_Transmit_DMA+0x158>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2201      	movs	r2, #1
 8013b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	d002      	beq.n	8013b1a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013b14:	2302      	movs	r3, #2
 8013b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013b18:	e089      	b.n	8013c2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <HAL_SPI_Transmit_DMA+0x46>
 8013b20:	88fb      	ldrh	r3, [r7, #6]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d102      	bne.n	8013b2c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013b26:	2301      	movs	r3, #1
 8013b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013b2a:	e080      	b.n	8013c2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2203      	movs	r2, #3
 8013b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2200      	movs	r2, #0
 8013b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	68ba      	ldr	r2, [r7, #8]
 8013b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	88fa      	ldrh	r2, [r7, #6]
 8013b44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	88fa      	ldrh	r2, [r7, #6]
 8013b4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	2200      	movs	r2, #0
 8013b56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	2200      	movs	r2, #0
 8013b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	2200      	movs	r2, #0
 8013b68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b72:	d10f      	bne.n	8013b94 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013b92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b98:	4a29      	ldr	r2, [pc, #164]	; (8013c40 <HAL_SPI_Transmit_DMA+0x160>)
 8013b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ba0:	4a28      	ldr	r2, [pc, #160]	; (8013c44 <HAL_SPI_Transmit_DMA+0x164>)
 8013ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ba8:	4a27      	ldr	r2, [pc, #156]	; (8013c48 <HAL_SPI_Transmit_DMA+0x168>)
 8013baa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	330c      	adds	r3, #12
 8013bc4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013bca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013bcc:	f7f4 fa91 	bl	80080f2 <HAL_DMA_Start_IT>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00c      	beq.n	8013bf0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bda:	f043 0210 	orr.w	r2, r3, #16
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013be2:	2301      	movs	r3, #1
 8013be4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2201      	movs	r2, #1
 8013bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013bee:	e01e      	b.n	8013c2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bfa:	2b40      	cmp	r3, #64	; 0x40
 8013bfc:	d007      	beq.n	8013c0e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c0c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	f042 0220 	orr.w	r2, r2, #32
 8013c1c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	685a      	ldr	r2, [r3, #4]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f042 0202 	orr.w	r2, r2, #2
 8013c2c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2200      	movs	r2, #0
 8013c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3718      	adds	r7, #24
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	08014965 	.word	0x08014965
 8013c44:	08014785 	.word	0x08014785
 8013c48:	080149b9 	.word	0x080149b9

08013c4c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b086      	sub	sp, #24
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	4613      	mov	r3, r2
 8013c58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	689b      	ldr	r3, [r3, #8]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d110      	bne.n	8013c88 <HAL_SPI_Receive_DMA+0x3c>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c6e:	d10b      	bne.n	8013c88 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2204      	movs	r2, #4
 8013c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8013c78:	88fb      	ldrh	r3, [r7, #6]
 8013c7a:	68ba      	ldr	r2, [r7, #8]
 8013c7c:	68b9      	ldr	r1, [r7, #8]
 8013c7e:	68f8      	ldr	r0, [r7, #12]
 8013c80:	f000 f8ac 	bl	8013ddc <HAL_SPI_TransmitReceive_DMA>
 8013c84:	4603      	mov	r3, r0
 8013c86:	e09f      	b.n	8013dc8 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d101      	bne.n	8013c96 <HAL_SPI_Receive_DMA+0x4a>
 8013c92:	2302      	movs	r3, #2
 8013c94:	e098      	b.n	8013dc8 <HAL_SPI_Receive_DMA+0x17c>
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2201      	movs	r2, #1
 8013c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d002      	beq.n	8013cb0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8013caa:	2302      	movs	r3, #2
 8013cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013cae:	e086      	b.n	8013dbe <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d002      	beq.n	8013cbc <HAL_SPI_Receive_DMA+0x70>
 8013cb6:	88fb      	ldrh	r3, [r7, #6]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d102      	bne.n	8013cc2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013cc0:	e07d      	b.n	8013dbe <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2204      	movs	r2, #4
 8013cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68ba      	ldr	r2, [r7, #8]
 8013cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	88fa      	ldrh	r2, [r7, #6]
 8013cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	88fa      	ldrh	r2, [r7, #6]
 8013ce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2200      	movs	r2, #0
 8013cec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	689b      	ldr	r3, [r3, #8]
 8013cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d02:	d10f      	bne.n	8013d24 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013d22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d28:	4a29      	ldr	r2, [pc, #164]	; (8013dd0 <HAL_SPI_Receive_DMA+0x184>)
 8013d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d30:	4a28      	ldr	r2, [pc, #160]	; (8013dd4 <HAL_SPI_Receive_DMA+0x188>)
 8013d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d38:	4a27      	ldr	r2, [pc, #156]	; (8013dd8 <HAL_SPI_Receive_DMA+0x18c>)
 8013d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d40:	2200      	movs	r2, #0
 8013d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	330c      	adds	r3, #12
 8013d4e:	4619      	mov	r1, r3
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d54:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013d5c:	f7f4 f9c9 	bl	80080f2 <HAL_DMA_Start_IT>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00c      	beq.n	8013d80 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d6a:	f043 0210 	orr.w	r2, r3, #16
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013d72:	2301      	movs	r3, #1
 8013d74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2201      	movs	r2, #1
 8013d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013d7e:	e01e      	b.n	8013dbe <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d8a:	2b40      	cmp	r3, #64	; 0x40
 8013d8c:	d007      	beq.n	8013d9e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d9c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	685a      	ldr	r2, [r3, #4]
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f042 0220 	orr.w	r2, r2, #32
 8013dac:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	f042 0201 	orr.w	r2, r2, #1
 8013dbc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3718      	adds	r7, #24
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	08014981 	.word	0x08014981
 8013dd4:	0801482d 	.word	0x0801482d
 8013dd8:	080149b9 	.word	0x080149b9

08013ddc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b086      	sub	sp, #24
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013dea:	2300      	movs	r3, #0
 8013dec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013df4:	2b01      	cmp	r3, #1
 8013df6:	d101      	bne.n	8013dfc <HAL_SPI_TransmitReceive_DMA+0x20>
 8013df8:	2302      	movs	r3, #2
 8013dfa:	e0e3      	b.n	8013fc4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2201      	movs	r2, #1
 8013e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e0a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013e12:	7dbb      	ldrb	r3, [r7, #22]
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	d00d      	beq.n	8013e34 <HAL_SPI_TransmitReceive_DMA+0x58>
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e1e:	d106      	bne.n	8013e2e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d102      	bne.n	8013e2e <HAL_SPI_TransmitReceive_DMA+0x52>
 8013e28:	7dbb      	ldrb	r3, [r7, #22]
 8013e2a:	2b04      	cmp	r3, #4
 8013e2c:	d002      	beq.n	8013e34 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013e2e:	2302      	movs	r3, #2
 8013e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013e32:	e0c2      	b.n	8013fba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d005      	beq.n	8013e46 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013e40:	887b      	ldrh	r3, [r7, #2]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d102      	bne.n	8013e4c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8013e46:	2301      	movs	r3, #1
 8013e48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013e4a:	e0b6      	b.n	8013fba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	2b04      	cmp	r3, #4
 8013e56:	d003      	beq.n	8013e60 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	2205      	movs	r2, #5
 8013e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	2200      	movs	r2, #0
 8013e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	68ba      	ldr	r2, [r7, #8]
 8013e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	887a      	ldrh	r2, [r7, #2]
 8013e70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	887a      	ldrh	r2, [r7, #2]
 8013e76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	887a      	ldrh	r2, [r7, #2]
 8013e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	887a      	ldrh	r2, [r7, #2]
 8013e88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	2200      	movs	r2, #0
 8013e94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e9c:	b2db      	uxtb	r3, r3
 8013e9e:	2b04      	cmp	r3, #4
 8013ea0:	d108      	bne.n	8013eb4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ea6:	4a49      	ldr	r2, [pc, #292]	; (8013fcc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8013ea8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eae:	4a48      	ldr	r2, [pc, #288]	; (8013fd0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8013eb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8013eb2:	e007      	b.n	8013ec4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eb8:	4a46      	ldr	r2, [pc, #280]	; (8013fd4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8013eba:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ec0:	4a45      	ldr	r2, [pc, #276]	; (8013fd8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8013ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ec8:	4a44      	ldr	r2, [pc, #272]	; (8013fdc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8013eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	330c      	adds	r3, #12
 8013ede:	4619      	mov	r1, r3
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ee4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013eea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013eec:	f7f4 f901 	bl	80080f2 <HAL_DMA_Start_IT>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d00c      	beq.n	8013f10 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013efa:	f043 0210 	orr.w	r2, r3, #16
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013f02:	2301      	movs	r3, #1
 8013f04:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2201      	movs	r2, #1
 8013f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013f0e:	e054      	b.n	8013fba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	685a      	ldr	r2, [r3, #4]
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	f042 0201 	orr.w	r2, r2, #1
 8013f1e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f24:	2200      	movs	r2, #0
 8013f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f34:	2200      	movs	r2, #0
 8013f36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f48:	4619      	mov	r1, r3
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	330c      	adds	r3, #12
 8013f50:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013f58:	f7f4 f8cb 	bl	80080f2 <HAL_DMA_Start_IT>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d00c      	beq.n	8013f7c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f66:	f043 0210 	orr.w	r2, r3, #16
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013f6e:	2301      	movs	r3, #1
 8013f70:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2201      	movs	r2, #1
 8013f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013f7a:	e01e      	b.n	8013fba <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f86:	2b40      	cmp	r3, #64	; 0x40
 8013f88:	d007      	beq.n	8013f9a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	681a      	ldr	r2, [r3, #0]
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013f98:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	685a      	ldr	r2, [r3, #4]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f042 0220 	orr.w	r2, r2, #32
 8013fa8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	685a      	ldr	r2, [r3, #4]
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f042 0202 	orr.w	r2, r2, #2
 8013fb8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3718      	adds	r7, #24
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	08014981 	.word	0x08014981
 8013fd0:	0801482d 	.word	0x0801482d
 8013fd4:	0801499d 	.word	0x0801499d
 8013fd8:	080148d5 	.word	0x080148d5
 8013fdc:	080149b9 	.word	0x080149b9

08013fe0 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b088      	sub	sp, #32
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013fec:	4b6e      	ldr	r3, [pc, #440]	; (80141a8 <HAL_SPI_Abort+0x1c8>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4a6e      	ldr	r2, [pc, #440]	; (80141ac <HAL_SPI_Abort+0x1cc>)
 8013ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ff6:	0a5b      	lsrs	r3, r3, #9
 8013ff8:	2264      	movs	r2, #100	; 0x64
 8013ffa:	fb02 f303 	mul.w	r3, r2, r3
 8013ffe:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8014000:	697b      	ldr	r3, [r7, #20]
 8014002:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	685a      	ldr	r2, [r3, #4]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	f022 0220 	bic.w	r2, r2, #32
 8014012:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801401e:	2b80      	cmp	r3, #128	; 0x80
 8014020:	d117      	bne.n	8014052 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	4a62      	ldr	r2, [pc, #392]	; (80141b0 <HAL_SPI_Abort+0x1d0>)
 8014026:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d106      	bne.n	801403c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801403a:	e008      	b.n	801404e <HAL_SPI_Abort+0x6e>
      }
      count--;
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	3b01      	subs	r3, #1
 8014040:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014048:	b2db      	uxtb	r3, r3
 801404a:	2b07      	cmp	r3, #7
 801404c:	d1ec      	bne.n	8014028 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801405c:	2b40      	cmp	r3, #64	; 0x40
 801405e:	d117      	bne.n	8014090 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	4a54      	ldr	r2, [pc, #336]	; (80141b4 <HAL_SPI_Abort+0x1d4>)
 8014064:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8014066:	69bb      	ldr	r3, [r7, #24]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d106      	bne.n	801407a <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8014078:	e008      	b.n	801408c <HAL_SPI_Abort+0xac>
      }
      count--;
 801407a:	69bb      	ldr	r3, [r7, #24]
 801407c:	3b01      	subs	r3, #1
 801407e:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b07      	cmp	r3, #7
 801408a:	d1ec      	bne.n	8014066 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	685b      	ldr	r3, [r3, #4]
 8014096:	f003 0302 	and.w	r3, r3, #2
 801409a:	2b02      	cmp	r3, #2
 801409c:	d12e      	bne.n	80140fc <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d02a      	beq.n	80140fc <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140aa:	2200      	movs	r2, #0
 80140ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7f4 f875 	bl	80081a2 <HAL_DMA_Abort>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d002      	beq.n	80140c4 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2240      	movs	r2, #64	; 0x40
 80140c2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	685a      	ldr	r2, [r3, #4]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	f022 0202 	bic.w	r2, r2, #2
 80140d2:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d106      	bne.n	80140e8 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 80140e6:	e009      	b.n	80140fc <HAL_SPI_Abort+0x11c>
        }
        count--;
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	3b01      	subs	r3, #1
 80140ec:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	689b      	ldr	r3, [r3, #8]
 80140f4:	f003 0302 	and.w	r3, r3, #2
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d0eb      	beq.n	80140d4 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	f003 0301 	and.w	r3, r3, #1
 8014106:	2b01      	cmp	r3, #1
 8014108:	d122      	bne.n	8014150 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801410e:	2b00      	cmp	r3, #0
 8014110:	d01e      	beq.n	8014150 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014116:	2200      	movs	r2, #0
 8014118:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801411e:	4618      	mov	r0, r3
 8014120:	f7f4 f83f 	bl	80081a2 <HAL_DMA_Abort>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d002      	beq.n	8014130 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	2240      	movs	r2, #64	; 0x40
 801412e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801413e:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	685a      	ldr	r2, [r3, #4]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f022 0201 	bic.w	r2, r2, #1
 801414e:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014160:	2b40      	cmp	r3, #64	; 0x40
 8014162:	d102      	bne.n	801416a <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8014164:	2301      	movs	r3, #1
 8014166:	77fb      	strb	r3, [r7, #31]
 8014168:	e002      	b.n	8014170 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2200      	movs	r2, #0
 801416e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014170:	2300      	movs	r3, #0
 8014172:	60fb      	str	r3, [r7, #12]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	60fb      	str	r3, [r7, #12]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	689b      	ldr	r3, [r3, #8]
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014186:	2300      	movs	r3, #0
 8014188:	613b      	str	r3, [r7, #16]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	689b      	ldr	r3, [r3, #8]
 8014190:	613b      	str	r3, [r7, #16]
 8014192:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2201      	movs	r2, #1
 8014198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 801419c:	7ffb      	ldrb	r3, [r7, #31]
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3720      	adds	r7, #32
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	20000058 	.word	0x20000058
 80141ac:	057619f1 	.word	0x057619f1
 80141b0:	08015365 	.word	0x08015365
 80141b4:	080152d5 	.word	0x080152d5

080141b8 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b088      	sub	sp, #32
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80141c0:	2300      	movs	r3, #0
 80141c2:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 80141c4:	2301      	movs	r3, #1
 80141c6:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80141c8:	4b72      	ldr	r3, [pc, #456]	; (8014394 <HAL_SPI_Abort_IT+0x1dc>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4a72      	ldr	r2, [pc, #456]	; (8014398 <HAL_SPI_Abort_IT+0x1e0>)
 80141ce:	fba2 2303 	umull	r2, r3, r2, r3
 80141d2:	0a5b      	lsrs	r3, r3, #9
 80141d4:	2264      	movs	r2, #100	; 0x64
 80141d6:	fb02 f303 	mul.w	r3, r2, r3
 80141da:	613b      	str	r3, [r7, #16]
  count = resetcount;
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	685a      	ldr	r2, [r3, #4]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f022 0220 	bic.w	r2, r2, #32
 80141ee:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141fa:	2b80      	cmp	r3, #128	; 0x80
 80141fc:	d117      	bne.n	801422e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4a66      	ldr	r2, [pc, #408]	; (801439c <HAL_SPI_Abort_IT+0x1e4>)
 8014202:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d106      	bne.n	8014218 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801420e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8014216:	e008      	b.n	801422a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	3b01      	subs	r3, #1
 801421c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014224:	b2db      	uxtb	r3, r3
 8014226:	2b07      	cmp	r3, #7
 8014228:	d1ec      	bne.n	8014204 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014238:	2b40      	cmp	r3, #64	; 0x40
 801423a:	d117      	bne.n	801426c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	4a58      	ldr	r2, [pc, #352]	; (80143a0 <HAL_SPI_Abort_IT+0x1e8>)
 8014240:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d106      	bne.n	8014256 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801424c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8014254:	e008      	b.n	8014268 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	3b01      	subs	r3, #1
 801425a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014262:	b2db      	uxtb	r3, r3
 8014264:	2b07      	cmp	r3, #7
 8014266:	d1ec      	bne.n	8014242 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00f      	beq.n	8014294 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	f003 0302 	and.w	r3, r3, #2
 801427e:	2b02      	cmp	r3, #2
 8014280:	d104      	bne.n	801428c <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014286:	4a47      	ldr	r2, [pc, #284]	; (80143a4 <HAL_SPI_Abort_IT+0x1ec>)
 8014288:	651a      	str	r2, [r3, #80]	; 0x50
 801428a:	e003      	b.n	8014294 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014290:	2200      	movs	r2, #0
 8014292:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00f      	beq.n	80142bc <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	f003 0301 	and.w	r3, r3, #1
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	d104      	bne.n	80142b4 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142ae:	4a3e      	ldr	r2, [pc, #248]	; (80143a8 <HAL_SPI_Abort_IT+0x1f0>)
 80142b0:	651a      	str	r2, [r3, #80]	; 0x50
 80142b2:	e003      	b.n	80142bc <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142b8:	2200      	movs	r2, #0
 80142ba:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	f003 0302 	and.w	r3, r3, #2
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d115      	bne.n	80142f6 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d011      	beq.n	80142f6 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7f3 ffd3 	bl	8008282 <HAL_DMA_Abort_IT>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d007      	beq.n	80142f2 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142e6:	2200      	movs	r2, #0
 80142e8:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2240      	movs	r2, #64	; 0x40
 80142ee:	655a      	str	r2, [r3, #84]	; 0x54
 80142f0:	e001      	b.n	80142f6 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 80142f2:	2300      	movs	r3, #0
 80142f4:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	f003 0301 	and.w	r3, r3, #1
 8014300:	2b01      	cmp	r3, #1
 8014302:	d115      	bne.n	8014330 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014308:	2b00      	cmp	r3, #0
 801430a:	d011      	beq.n	8014330 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014310:	4618      	mov	r0, r3
 8014312:	f7f3 ffb6 	bl	8008282 <HAL_DMA_Abort_IT>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	d007      	beq.n	801432c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014320:	2200      	movs	r2, #0
 8014322:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2240      	movs	r2, #64	; 0x40
 8014328:	655a      	str	r2, [r3, #84]	; 0x54
 801432a:	e001      	b.n	8014330 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 801432c:	2300      	movs	r3, #0
 801432e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	2b01      	cmp	r3, #1
 8014334:	d128      	bne.n	8014388 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2200      	movs	r2, #0
 8014340:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014346:	2b40      	cmp	r3, #64	; 0x40
 8014348:	d102      	bne.n	8014350 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 801434a:	2301      	movs	r3, #1
 801434c:	77fb      	strb	r3, [r7, #31]
 801434e:	e002      	b.n	8014356 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2200      	movs	r2, #0
 8014354:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014356:	2300      	movs	r3, #0
 8014358:	60bb      	str	r3, [r7, #8]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	60bb      	str	r3, [r7, #8]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	689b      	ldr	r3, [r3, #8]
 8014368:	60bb      	str	r3, [r7, #8]
 801436a:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801436c:	2300      	movs	r3, #0
 801436e:	60fb      	str	r3, [r7, #12]
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	689b      	ldr	r3, [r3, #8]
 8014376:	60fb      	str	r3, [r7, #12]
 8014378:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2201      	movs	r2, #1
 801437e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f000 f9da 	bl	801473c <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8014388:	7ffb      	ldrb	r3, [r7, #31]
}
 801438a:	4618      	mov	r0, r3
 801438c:	3720      	adds	r7, #32
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	20000058 	.word	0x20000058
 8014398:	057619f1 	.word	0x057619f1
 801439c:	08015365 	.word	0x08015365
 80143a0:	080152d5 	.word	0x080152d5
 80143a4:	08014a21 	.word	0x08014a21
 80143a8:	08014af5 	.word	0x08014af5

080143ac <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d101      	bne.n	80143c2 <HAL_SPI_DMAPause+0x16>
 80143be:	2302      	movs	r3, #2
 80143c0:	e010      	b.n	80143e4 <HAL_SPI_DMAPause+0x38>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2201      	movs	r2, #1
 80143c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	685a      	ldr	r2, [r3, #4]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	f022 0203 	bic.w	r2, r2, #3
 80143d8:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2200      	movs	r2, #0
 80143de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	370c      	adds	r7, #12
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80143fe:	2b01      	cmp	r3, #1
 8014400:	d101      	bne.n	8014406 <HAL_SPI_DMAResume+0x16>
 8014402:	2302      	movs	r3, #2
 8014404:	e010      	b.n	8014428 <HAL_SPI_DMAResume+0x38>
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2201      	movs	r2, #1
 801440a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	685a      	ldr	r2, [r3, #4]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f042 0203 	orr.w	r2, r2, #3
 801441c:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2200      	movs	r2, #0
 8014422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801443c:	2300      	movs	r3, #0
 801443e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014444:	2b00      	cmp	r3, #0
 8014446:	d00f      	beq.n	8014468 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801444c:	4618      	mov	r0, r3
 801444e:	f7f3 fea8 	bl	80081a2 <HAL_DMA_Abort>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d007      	beq.n	8014468 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801445c:	f043 0210 	orr.w	r2, r3, #16
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014464:	2301      	movs	r3, #1
 8014466:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801446c:	2b00      	cmp	r3, #0
 801446e:	d00f      	beq.n	8014490 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014474:	4618      	mov	r0, r3
 8014476:	f7f3 fe94 	bl	80081a2 <HAL_DMA_Abort>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d007      	beq.n	8014490 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014484:	f043 0210 	orr.w	r2, r3, #16
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 801448c:	2301      	movs	r3, #1
 801448e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	685a      	ldr	r2, [r3, #4]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	f022 0203 	bic.w	r2, r2, #3
 801449e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2201      	movs	r2, #1
 80144a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80144a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3710      	adds	r7, #16
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}

080144b2 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b088      	sub	sp, #32
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	685b      	ldr	r3, [r3, #4]
 80144c0:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	689b      	ldr	r3, [r3, #8]
 80144c8:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	099b      	lsrs	r3, r3, #6
 80144ce:	f003 0301 	and.w	r3, r3, #1
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d10f      	bne.n	80144f6 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00a      	beq.n	80144f6 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	099b      	lsrs	r3, r3, #6
 80144e4:	f003 0301 	and.w	r3, r3, #1
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d004      	beq.n	80144f6 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	4798      	blx	r3
    return;
 80144f4:	e0d7      	b.n	80146a6 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	085b      	lsrs	r3, r3, #1
 80144fa:	f003 0301 	and.w	r3, r3, #1
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00a      	beq.n	8014518 <HAL_SPI_IRQHandler+0x66>
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	09db      	lsrs	r3, r3, #7
 8014506:	f003 0301 	and.w	r3, r3, #1
 801450a:	2b00      	cmp	r3, #0
 801450c:	d004      	beq.n	8014518 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	4798      	blx	r3
    return;
 8014516:	e0c6      	b.n	80146a6 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	095b      	lsrs	r3, r3, #5
 801451c:	f003 0301 	and.w	r3, r3, #1
 8014520:	2b00      	cmp	r3, #0
 8014522:	d10c      	bne.n	801453e <HAL_SPI_IRQHandler+0x8c>
 8014524:	69bb      	ldr	r3, [r7, #24]
 8014526:	099b      	lsrs	r3, r3, #6
 8014528:	f003 0301 	and.w	r3, r3, #1
 801452c:	2b00      	cmp	r3, #0
 801452e:	d106      	bne.n	801453e <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	0a1b      	lsrs	r3, r3, #8
 8014534:	f003 0301 	and.w	r3, r3, #1
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 80b4 	beq.w	80146a6 <HAL_SPI_IRQHandler+0x1f4>
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	095b      	lsrs	r3, r3, #5
 8014542:	f003 0301 	and.w	r3, r3, #1
 8014546:	2b00      	cmp	r3, #0
 8014548:	f000 80ad 	beq.w	80146a6 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	099b      	lsrs	r3, r3, #6
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	2b00      	cmp	r3, #0
 8014556:	d023      	beq.n	80145a0 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801455e:	b2db      	uxtb	r3, r3
 8014560:	2b03      	cmp	r3, #3
 8014562:	d011      	beq.n	8014588 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014568:	f043 0204 	orr.w	r2, r3, #4
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014570:	2300      	movs	r3, #0
 8014572:	60bb      	str	r3, [r7, #8]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	68db      	ldr	r3, [r3, #12]
 801457a:	60bb      	str	r3, [r7, #8]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	689b      	ldr	r3, [r3, #8]
 8014582:	60bb      	str	r3, [r7, #8]
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	e00b      	b.n	80145a0 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014588:	2300      	movs	r3, #0
 801458a:	60fb      	str	r3, [r7, #12]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	60fb      	str	r3, [r7, #12]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	689b      	ldr	r3, [r3, #8]
 801459a:	60fb      	str	r3, [r7, #12]
 801459c:	68fb      	ldr	r3, [r7, #12]
        return;
 801459e:	e082      	b.n	80146a6 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	f003 0301 	and.w	r3, r3, #1
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d014      	beq.n	80145d6 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145b0:	f043 0201 	orr.w	r2, r3, #1
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80145b8:	2300      	movs	r3, #0
 80145ba:	613b      	str	r3, [r7, #16]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	689b      	ldr	r3, [r3, #8]
 80145c2:	613b      	str	r3, [r7, #16]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80145d2:	601a      	str	r2, [r3, #0]
 80145d4:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80145d6:	69bb      	ldr	r3, [r7, #24]
 80145d8:	0a1b      	lsrs	r3, r3, #8
 80145da:	f003 0301 	and.w	r3, r3, #1
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00c      	beq.n	80145fc <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145e6:	f043 0208 	orr.w	r2, r3, #8
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80145ee:	2300      	movs	r3, #0
 80145f0:	617b      	str	r3, [r7, #20]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	689b      	ldr	r3, [r3, #8]
 80145f8:	617b      	str	r3, [r7, #20]
 80145fa:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014600:	2b00      	cmp	r3, #0
 8014602:	d04f      	beq.n	80146a4 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	685a      	ldr	r2, [r3, #4]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014612:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2201      	movs	r2, #1
 8014618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	f003 0302 	and.w	r3, r3, #2
 8014622:	2b00      	cmp	r3, #0
 8014624:	d104      	bne.n	8014630 <HAL_SPI_IRQHandler+0x17e>
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	f003 0301 	and.w	r3, r3, #1
 801462c:	2b00      	cmp	r3, #0
 801462e:	d034      	beq.n	801469a <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	685a      	ldr	r2, [r3, #4]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	f022 0203 	bic.w	r2, r2, #3
 801463e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014644:	2b00      	cmp	r3, #0
 8014646:	d011      	beq.n	801466c <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801464c:	4a17      	ldr	r2, [pc, #92]	; (80146ac <HAL_SPI_IRQHandler+0x1fa>)
 801464e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014654:	4618      	mov	r0, r3
 8014656:	f7f3 fe14 	bl	8008282 <HAL_DMA_Abort_IT>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d005      	beq.n	801466c <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014664:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014670:	2b00      	cmp	r3, #0
 8014672:	d016      	beq.n	80146a2 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014678:	4a0c      	ldr	r2, [pc, #48]	; (80146ac <HAL_SPI_IRQHandler+0x1fa>)
 801467a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014680:	4618      	mov	r0, r3
 8014682:	f7f3 fdfe 	bl	8008282 <HAL_DMA_Abort_IT>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d00a      	beq.n	80146a2 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8014698:	e003      	b.n	80146a2 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 f844 	bl	8014728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80146a0:	e000      	b.n	80146a4 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80146a2:	bf00      	nop
    return;
 80146a4:	bf00      	nop
  }
}
 80146a6:	3720      	adds	r7, #32
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	080149f9 	.word	0x080149f9

080146b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80146b8:	bf00      	nop
 80146ba:	370c      	adds	r7, #12
 80146bc:	46bd      	mov	sp, r7
 80146be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c2:	4770      	bx	lr

080146c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b083      	sub	sp, #12
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80146cc:	bf00      	nop
 80146ce:	370c      	adds	r7, #12
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr

080146d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80146d8:	b480      	push	{r7}
 80146da:	b083      	sub	sp, #12
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80146e0:	bf00      	nop
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr

080146ec <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80146ec:	b480      	push	{r7}
 80146ee:	b083      	sub	sp, #12
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80146f4:	bf00      	nop
 80146f6:	370c      	adds	r7, #12
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014708:	bf00      	nop
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014714:	b480      	push	{r7}
 8014716:	b083      	sub	sp, #12
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801471c:	bf00      	nop
 801471e:	370c      	adds	r7, #12
 8014720:	46bd      	mov	sp, r7
 8014722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014726:	4770      	bx	lr

08014728 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014728:	b480      	push	{r7}
 801472a:	b083      	sub	sp, #12
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014730:	bf00      	nop
 8014732:	370c      	adds	r7, #12
 8014734:	46bd      	mov	sp, r7
 8014736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473a:	4770      	bx	lr

0801473c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014744:	bf00      	nop
 8014746:	370c      	adds	r7, #12
 8014748:	46bd      	mov	sp, r7
 801474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474e:	4770      	bx	lr

08014750 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8014750:	b480      	push	{r7}
 8014752:	b083      	sub	sp, #12
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801475e:	b2db      	uxtb	r3, r3
}
 8014760:	4618      	mov	r0, r3
 8014762:	370c      	adds	r7, #12
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr

0801476c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8014778:	4618      	mov	r0, r3
 801477a:	370c      	adds	r7, #12
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr

08014784 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014790:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014792:	f7f2 fa45 	bl	8006c20 <HAL_GetTick>
 8014796:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147a6:	d03b      	beq.n	8014820 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	685a      	ldr	r2, [r3, #4]
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f022 0220 	bic.w	r2, r2, #32
 80147b6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	685a      	ldr	r2, [r3, #4]
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	f022 0202 	bic.w	r2, r2, #2
 80147c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80147c8:	693a      	ldr	r2, [r7, #16]
 80147ca:	2164      	movs	r1, #100	; 0x64
 80147cc:	6978      	ldr	r0, [r7, #20]
 80147ce:	f000 fc2c 	bl	801502a <SPI_EndRxTxTransaction>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d005      	beq.n	80147e4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147dc:	f043 0220 	orr.w	r2, r3, #32
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	689b      	ldr	r3, [r3, #8]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d10a      	bne.n	8014802 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80147ec:	2300      	movs	r3, #0
 80147ee:	60fb      	str	r3, [r7, #12]
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	60fb      	str	r3, [r7, #12]
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	689b      	ldr	r3, [r3, #8]
 80147fe:	60fb      	str	r3, [r7, #12]
 8014800:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	2200      	movs	r2, #0
 8014806:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	2201      	movs	r2, #1
 801480c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014810:	697b      	ldr	r3, [r7, #20]
 8014812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014814:	2b00      	cmp	r3, #0
 8014816:	d003      	beq.n	8014820 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014818:	6978      	ldr	r0, [r7, #20]
 801481a:	f7ff ff85 	bl	8014728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801481e:	e002      	b.n	8014826 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8014820:	6978      	ldr	r0, [r7, #20]
 8014822:	f7ff ff45 	bl	80146b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014826:	3718      	adds	r7, #24
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014838:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801483a:	f7f2 f9f1 	bl	8006c20 <HAL_GetTick>
 801483e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801484e:	d03b      	beq.n	80148c8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	685a      	ldr	r2, [r3, #4]
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f022 0220 	bic.w	r2, r2, #32
 801485e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	689b      	ldr	r3, [r3, #8]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d10d      	bne.n	8014884 <SPI_DMAReceiveCplt+0x58>
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014870:	d108      	bne.n	8014884 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	685a      	ldr	r2, [r3, #4]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f022 0203 	bic.w	r2, r2, #3
 8014880:	605a      	str	r2, [r3, #4]
 8014882:	e007      	b.n	8014894 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	685a      	ldr	r2, [r3, #4]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	f022 0201 	bic.w	r2, r2, #1
 8014892:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014894:	68ba      	ldr	r2, [r7, #8]
 8014896:	2164      	movs	r1, #100	; 0x64
 8014898:	68f8      	ldr	r0, [r7, #12]
 801489a:	f000 fb61 	bl	8014f60 <SPI_EndRxTransaction>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d002      	beq.n	80148aa <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	2220      	movs	r2, #32
 80148a8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2200      	movs	r2, #0
 80148ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2201      	movs	r2, #1
 80148b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d003      	beq.n	80148c8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ff ff31 	bl	8014728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80148c6:	e002      	b.n	80148ce <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80148c8:	68f8      	ldr	r0, [r7, #12]
 80148ca:	f7ff fefb 	bl	80146c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148e0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80148e2:	f7f2 f99d 	bl	8006c20 <HAL_GetTick>
 80148e6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148f6:	d02f      	beq.n	8014958 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	685a      	ldr	r2, [r3, #4]
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f022 0220 	bic.w	r2, r2, #32
 8014906:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014908:	68ba      	ldr	r2, [r7, #8]
 801490a:	2164      	movs	r1, #100	; 0x64
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f000 fb8c 	bl	801502a <SPI_EndRxTxTransaction>
 8014912:	4603      	mov	r3, r0
 8014914:	2b00      	cmp	r3, #0
 8014916:	d005      	beq.n	8014924 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801491c:	f043 0220 	orr.w	r2, r3, #32
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	685a      	ldr	r2, [r3, #4]
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	f022 0203 	bic.w	r2, r2, #3
 8014932:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	2200      	movs	r2, #0
 8014938:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2200      	movs	r2, #0
 801493e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2201      	movs	r2, #1
 8014944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801494c:	2b00      	cmp	r3, #0
 801494e:	d003      	beq.n	8014958 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014950:	68f8      	ldr	r0, [r7, #12]
 8014952:	f7ff fee9 	bl	8014728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014956:	e002      	b.n	801495e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8014958:	68f8      	ldr	r0, [r7, #12]
 801495a:	f7ff febd 	bl	80146d8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801495e:	3710      	adds	r7, #16
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}

08014964 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b084      	sub	sp, #16
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014970:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f7ff feba 	bl	80146ec <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014978:	bf00      	nop
 801497a:	3710      	adds	r7, #16
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b084      	sub	sp, #16
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801498c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801498e:	68f8      	ldr	r0, [r7, #12]
 8014990:	f7ff feb6 	bl	8014700 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014994:	bf00      	nop
 8014996:	3710      	adds	r7, #16
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149a8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80149aa:	68f8      	ldr	r0, [r7, #12]
 80149ac:	f7ff feb2 	bl	8014714 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80149b0:	bf00      	nop
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b084      	sub	sp, #16
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	685a      	ldr	r2, [r3, #4]
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	f022 0203 	bic.w	r2, r2, #3
 80149d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149da:	f043 0210 	orr.w	r2, r3, #16
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2201      	movs	r2, #1
 80149e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f7ff fe9c 	bl	8014728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80149f0:	bf00      	nop
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b084      	sub	sp, #16
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014a12:	68f8      	ldr	r0, [r7, #12]
 8014a14:	f7ff fe88 	bl	8014728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014a18:	bf00      	nop
 8014a1a:	3710      	adds	r7, #16
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b086      	sub	sp, #24
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a32:	2200      	movs	r2, #0
 8014a34:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014a36:	4b2d      	ldr	r3, [pc, #180]	; (8014aec <SPI_DMATxAbortCallback+0xcc>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	4a2d      	ldr	r2, [pc, #180]	; (8014af0 <SPI_DMATxAbortCallback+0xd0>)
 8014a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8014a40:	0a5b      	lsrs	r3, r3, #9
 8014a42:	2264      	movs	r2, #100	; 0x64
 8014a44:	fb02 f303 	mul.w	r3, r2, r3
 8014a48:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	685a      	ldr	r2, [r3, #4]
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f022 0202 	bic.w	r2, r2, #2
 8014a58:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d106      	bne.n	8014a6e <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014a6c:	e009      	b.n	8014a82 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8014a6e:	693b      	ldr	r3, [r7, #16]
 8014a70:	3b01      	subs	r3, #1
 8014a72:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	689b      	ldr	r3, [r3, #8]
 8014a7a:	f003 0302 	and.w	r3, r3, #2
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d0eb      	beq.n	8014a5a <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d004      	beq.n	8014a94 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d126      	bne.n	8014ae2 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	2200      	movs	r2, #0
 8014a98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014aa4:	2b40      	cmp	r3, #64	; 0x40
 8014aa6:	d002      	beq.n	8014aae <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014aae:	2300      	movs	r3, #0
 8014ab0:	60bb      	str	r3, [r7, #8]
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	60bb      	str	r3, [r7, #8]
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	689b      	ldr	r3, [r3, #8]
 8014ac0:	60bb      	str	r3, [r7, #8]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	60fb      	str	r3, [r7, #12]
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	60fb      	str	r3, [r7, #12]
 8014ad0:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014ada:	6978      	ldr	r0, [r7, #20]
 8014adc:	f7ff fe2e 	bl	801473c <HAL_SPI_AbortCpltCallback>
 8014ae0:	e000      	b.n	8014ae4 <SPI_DMATxAbortCallback+0xc4>
      return;
 8014ae2:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014ae4:	3718      	adds	r7, #24
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	20000058 	.word	0x20000058
 8014af0:	057619f1 	.word	0x057619f1

08014af4 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b00:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	681a      	ldr	r2, [r3, #0]
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014b10:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b16:	2200      	movs	r2, #0
 8014b18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	685a      	ldr	r2, [r3, #4]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	f022 0201 	bic.w	r2, r2, #1
 8014b28:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014b2a:	f7f2 f879 	bl	8006c20 <HAL_GetTick>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	461a      	mov	r2, r3
 8014b32:	2164      	movs	r1, #100	; 0x64
 8014b34:	6978      	ldr	r0, [r7, #20]
 8014b36:	f000 fa78 	bl	801502a <SPI_EndRxTxTransaction>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d005      	beq.n	8014b4c <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014b40:	697b      	ldr	r3, [r7, #20]
 8014b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d004      	beq.n	8014b5e <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d126      	bne.n	8014bac <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	2200      	movs	r2, #0
 8014b62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	2200      	movs	r2, #0
 8014b68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b6e:	2b40      	cmp	r3, #64	; 0x40
 8014b70:	d002      	beq.n	8014b78 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	2200      	movs	r2, #0
 8014b76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014b78:	2300      	movs	r3, #0
 8014b7a:	60fb      	str	r3, [r7, #12]
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	60fb      	str	r3, [r7, #12]
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	689b      	ldr	r3, [r3, #8]
 8014b8a:	60fb      	str	r3, [r7, #12]
 8014b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014b8e:	2300      	movs	r3, #0
 8014b90:	613b      	str	r3, [r7, #16]
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	613b      	str	r3, [r7, #16]
 8014b9a:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014ba4:	6978      	ldr	r0, [r7, #20]
 8014ba6:	f7ff fdc9 	bl	801473c <HAL_SPI_AbortCpltCallback>
 8014baa:	e000      	b.n	8014bae <SPI_DMARxAbortCallback+0xba>
      return;
 8014bac:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014bae:	3718      	adds	r7, #24
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	f103 020c 	add.w	r2, r3, #12
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bc8:	7812      	ldrb	r2, [r2, #0]
 8014bca:	b2d2      	uxtb	r2, r2
 8014bcc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bd2:	1c5a      	adds	r2, r3, #1
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014bdc:	b29b      	uxth	r3, r3
 8014bde:	3b01      	subs	r3, #1
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d10f      	bne.n	8014c10 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	685a      	ldr	r2, [r3, #4]
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014bfe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014c04:	b29b      	uxth	r3, r3
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d102      	bne.n	8014c10 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 fa4e 	bl	80150ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8014c10:	bf00      	nop
 8014c12:	3708      	adds	r7, #8
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	330c      	adds	r3, #12
 8014c2a:	7812      	ldrb	r2, [r2, #0]
 8014c2c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c32:	1c5a      	adds	r2, r3, #1
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d10f      	bne.n	8014c70 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	685a      	ldr	r2, [r3, #4]
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014c5e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d102      	bne.n	8014c70 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 fa1e 	bl	80150ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8014c70:	bf00      	nop
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	68da      	ldr	r2, [r3, #12]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c8a:	b292      	uxth	r2, r2
 8014c8c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c92:	1c9a      	adds	r2, r3, #2
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	3b01      	subs	r3, #1
 8014ca0:	b29a      	uxth	r2, r3
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d10f      	bne.n	8014cd0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	685a      	ldr	r2, [r3, #4]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014cbe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d102      	bne.n	8014cd0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f000 f9ee 	bl	80150ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8014cd0:	bf00      	nop
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ce4:	881a      	ldrh	r2, [r3, #0]
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cf0:	1c9a      	adds	r2, r3, #2
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	3b01      	subs	r3, #1
 8014cfe:	b29a      	uxth	r2, r3
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d10f      	bne.n	8014d2e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	685a      	ldr	r2, [r3, #4]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014d1c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d102      	bne.n	8014d2e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f000 f9bf 	bl	80150ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8014d2e:	bf00      	nop
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}

08014d36 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014d36:	b580      	push	{r7, lr}
 8014d38:	b082      	sub	sp, #8
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	f103 020c 	add.w	r2, r3, #12
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d4a:	7812      	ldrb	r2, [r2, #0]
 8014d4c:	b2d2      	uxtb	r2, r2
 8014d4e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d54:	1c5a      	adds	r2, r3, #1
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	3b01      	subs	r3, #1
 8014d62:	b29a      	uxth	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014d6c:	b29b      	uxth	r3, r3
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d102      	bne.n	8014d78 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 fa0e 	bl	8015194 <SPI_CloseRx_ISR>
  }
}
 8014d78:	bf00      	nop
 8014d7a:	3708      	adds	r7, #8
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}

08014d80 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b082      	sub	sp, #8
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	68da      	ldr	r2, [r3, #12]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d92:	b292      	uxth	r2, r2
 8014d94:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d9a:	1c9a      	adds	r2, r3, #2
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	3b01      	subs	r3, #1
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d102      	bne.n	8014dbe <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f000 f9eb 	bl	8015194 <SPI_CloseRx_ISR>
  }
}
 8014dbe:	bf00      	nop
 8014dc0:	3708      	adds	r7, #8
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b082      	sub	sp, #8
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	330c      	adds	r3, #12
 8014dd8:	7812      	ldrb	r2, [r2, #0]
 8014dda:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014de0:	1c5a      	adds	r2, r3, #1
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014dea:	b29b      	uxth	r3, r3
 8014dec:	3b01      	subs	r3, #1
 8014dee:	b29a      	uxth	r2, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014df8:	b29b      	uxth	r3, r3
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d102      	bne.n	8014e04 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014dfe:	6878      	ldr	r0, [r7, #4]
 8014e00:	f000 fa07 	bl	8015212 <SPI_CloseTx_ISR>
  }
}
 8014e04:	bf00      	nop
 8014e06:	3708      	adds	r7, #8
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}

08014e0c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e18:	881a      	ldrh	r2, [r3, #0]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e24:	1c9a      	adds	r2, r3, #2
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	3b01      	subs	r3, #1
 8014e32:	b29a      	uxth	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d102      	bne.n	8014e48 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 f9e5 	bl	8015212 <SPI_CloseTx_ISR>
  }
}
 8014e48:	bf00      	nop
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b088      	sub	sp, #32
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	603b      	str	r3, [r7, #0]
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014e60:	f7f1 fede 	bl	8006c20 <HAL_GetTick>
 8014e64:	4602      	mov	r2, r0
 8014e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e68:	1a9b      	subs	r3, r3, r2
 8014e6a:	683a      	ldr	r2, [r7, #0]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014e70:	f7f1 fed6 	bl	8006c20 <HAL_GetTick>
 8014e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014e76:	4b39      	ldr	r3, [pc, #228]	; (8014f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	015b      	lsls	r3, r3, #5
 8014e7c:	0d1b      	lsrs	r3, r3, #20
 8014e7e:	69fa      	ldr	r2, [r7, #28]
 8014e80:	fb02 f303 	mul.w	r3, r2, r3
 8014e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014e86:	e054      	b.n	8014f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e8e:	d050      	beq.n	8014f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014e90:	f7f1 fec6 	bl	8006c20 <HAL_GetTick>
 8014e94:	4602      	mov	r2, r0
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	1ad3      	subs	r3, r2, r3
 8014e9a:	69fa      	ldr	r2, [r7, #28]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d902      	bls.n	8014ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d13d      	bne.n	8014f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	685a      	ldr	r2, [r3, #4]
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014ebe:	d111      	bne.n	8014ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	689b      	ldr	r3, [r3, #8]
 8014ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ec8:	d004      	beq.n	8014ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	689b      	ldr	r3, [r3, #8]
 8014ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ed2:	d107      	bne.n	8014ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014eec:	d10f      	bne.n	8014f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014efc:	601a      	str	r2, [r3, #0]
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	681a      	ldr	r2, [r3, #0]
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	2201      	movs	r2, #1
 8014f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014f1e:	2303      	movs	r3, #3
 8014f20:	e017      	b.n	8014f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d101      	bne.n	8014f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	3b01      	subs	r3, #1
 8014f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	689a      	ldr	r2, [r3, #8]
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	4013      	ands	r3, r2
 8014f3c:	68ba      	ldr	r2, [r7, #8]
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	bf0c      	ite	eq
 8014f42:	2301      	moveq	r3, #1
 8014f44:	2300      	movne	r3, #0
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	461a      	mov	r2, r3
 8014f4a:	79fb      	ldrb	r3, [r7, #7]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d19b      	bne.n	8014e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014f50:	2300      	movs	r3, #0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3720      	adds	r7, #32
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	20000058 	.word	0x20000058

08014f60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af02      	add	r7, sp, #8
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014f74:	d111      	bne.n	8014f9a <SPI_EndRxTransaction+0x3a>
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	689b      	ldr	r3, [r3, #8]
 8014f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f7e:	d004      	beq.n	8014f8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	689b      	ldr	r3, [r3, #8]
 8014f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f88:	d107      	bne.n	8014f9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014f98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014fa2:	d12a      	bne.n	8014ffa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	689b      	ldr	r3, [r3, #8]
 8014fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014fac:	d012      	beq.n	8014fd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	2180      	movs	r1, #128	; 0x80
 8014fb8:	68f8      	ldr	r0, [r7, #12]
 8014fba:	f7ff ff49 	bl	8014e50 <SPI_WaitFlagStateUntilTimeout>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d02d      	beq.n	8015020 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fc8:	f043 0220 	orr.w	r2, r3, #32
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014fd0:	2303      	movs	r3, #3
 8014fd2:	e026      	b.n	8015022 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	2101      	movs	r1, #1
 8014fde:	68f8      	ldr	r0, [r7, #12]
 8014fe0:	f7ff ff36 	bl	8014e50 <SPI_WaitFlagStateUntilTimeout>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d01a      	beq.n	8015020 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fee:	f043 0220 	orr.w	r2, r3, #32
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014ff6:	2303      	movs	r3, #3
 8014ff8:	e013      	b.n	8015022 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	9300      	str	r3, [sp, #0]
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2200      	movs	r2, #0
 8015002:	2101      	movs	r1, #1
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7ff ff23 	bl	8014e50 <SPI_WaitFlagStateUntilTimeout>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d007      	beq.n	8015020 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015014:	f043 0220 	orr.w	r2, r3, #32
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801501c:	2303      	movs	r3, #3
 801501e:	e000      	b.n	8015022 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8015020:	2300      	movs	r3, #0
}
 8015022:	4618      	mov	r0, r3
 8015024:	3710      	adds	r7, #16
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b088      	sub	sp, #32
 801502e:	af02      	add	r7, sp, #8
 8015030:	60f8      	str	r0, [r7, #12]
 8015032:	60b9      	str	r1, [r7, #8]
 8015034:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8015036:	4b1b      	ldr	r3, [pc, #108]	; (80150a4 <SPI_EndRxTxTransaction+0x7a>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	4a1b      	ldr	r2, [pc, #108]	; (80150a8 <SPI_EndRxTxTransaction+0x7e>)
 801503c:	fba2 2303 	umull	r2, r3, r2, r3
 8015040:	0d5b      	lsrs	r3, r3, #21
 8015042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015046:	fb02 f303 	mul.w	r3, r2, r3
 801504a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015054:	d112      	bne.n	801507c <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	9300      	str	r3, [sp, #0]
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	2200      	movs	r2, #0
 801505e:	2180      	movs	r1, #128	; 0x80
 8015060:	68f8      	ldr	r0, [r7, #12]
 8015062:	f7ff fef5 	bl	8014e50 <SPI_WaitFlagStateUntilTimeout>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d016      	beq.n	801509a <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015070:	f043 0220 	orr.w	r2, r3, #32
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8015078:	2303      	movs	r3, #3
 801507a:	e00f      	b.n	801509c <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d00a      	beq.n	8015098 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	3b01      	subs	r3, #1
 8015086:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	689b      	ldr	r3, [r3, #8]
 801508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015092:	2b80      	cmp	r3, #128	; 0x80
 8015094:	d0f2      	beq.n	801507c <SPI_EndRxTxTransaction+0x52>
 8015096:	e000      	b.n	801509a <SPI_EndRxTxTransaction+0x70>
        break;
 8015098:	bf00      	nop
  }

  return HAL_OK;
 801509a:	2300      	movs	r3, #0
}
 801509c:	4618      	mov	r0, r3
 801509e:	3718      	adds	r7, #24
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	20000058 	.word	0x20000058
 80150a8:	165e9f81 	.word	0x165e9f81

080150ac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b086      	sub	sp, #24
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80150b4:	4b35      	ldr	r3, [pc, #212]	; (801518c <SPI_CloseRxTx_ISR+0xe0>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	4a35      	ldr	r2, [pc, #212]	; (8015190 <SPI_CloseRxTx_ISR+0xe4>)
 80150ba:	fba2 2303 	umull	r2, r3, r2, r3
 80150be:	0a5b      	lsrs	r3, r3, #9
 80150c0:	2264      	movs	r2, #100	; 0x64
 80150c2:	fb02 f303 	mul.w	r3, r2, r3
 80150c6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80150c8:	f7f1 fdaa 	bl	8006c20 <HAL_GetTick>
 80150cc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	685a      	ldr	r2, [r3, #4]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	f022 0220 	bic.w	r2, r2, #32
 80150dc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d106      	bne.n	80150f2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150e8:	f043 0220 	orr.w	r2, r3, #32
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80150f0:	e009      	b.n	8015106 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	3b01      	subs	r3, #1
 80150f6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	f003 0302 	and.w	r3, r3, #2
 8015102:	2b00      	cmp	r3, #0
 8015104:	d0eb      	beq.n	80150de <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8015106:	697a      	ldr	r2, [r7, #20]
 8015108:	2164      	movs	r1, #100	; 0x64
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff ff8d 	bl	801502a <SPI_EndRxTxTransaction>
 8015110:	4603      	mov	r3, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d005      	beq.n	8015122 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801511a:	f043 0220 	orr.w	r2, r3, #32
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d10a      	bne.n	8015140 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801512a:	2300      	movs	r3, #0
 801512c:	60fb      	str	r3, [r7, #12]
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	60fb      	str	r3, [r7, #12]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	689b      	ldr	r3, [r3, #8]
 801513c:	60fb      	str	r3, [r7, #12]
 801513e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015144:	2b00      	cmp	r3, #0
 8015146:	d115      	bne.n	8015174 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b04      	cmp	r3, #4
 8015152:	d107      	bne.n	8015164 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2201      	movs	r2, #1
 8015158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 801515c:	6878      	ldr	r0, [r7, #4]
 801515e:	f7ff fab1 	bl	80146c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8015162:	e00e      	b.n	8015182 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2201      	movs	r2, #1
 8015168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f7ff fab3 	bl	80146d8 <HAL_SPI_TxRxCpltCallback>
}
 8015172:	e006      	b.n	8015182 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2201      	movs	r2, #1
 8015178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f7ff fad3 	bl	8014728 <HAL_SPI_ErrorCallback>
}
 8015182:	bf00      	nop
 8015184:	3718      	adds	r7, #24
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	20000058 	.word	0x20000058
 8015190:	057619f1 	.word	0x057619f1

08015194 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	685a      	ldr	r2, [r3, #4]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80151aa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80151ac:	f7f1 fd38 	bl	8006c20 <HAL_GetTick>
 80151b0:	4603      	mov	r3, r0
 80151b2:	461a      	mov	r2, r3
 80151b4:	2164      	movs	r1, #100	; 0x64
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f7ff fed2 	bl	8014f60 <SPI_EndRxTransaction>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d005      	beq.n	80151ce <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151c6:	f043 0220 	orr.w	r2, r3, #32
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	689b      	ldr	r3, [r3, #8]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d10a      	bne.n	80151ec <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80151d6:	2300      	movs	r3, #0
 80151d8:	60fb      	str	r3, [r7, #12]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	60fb      	str	r3, [r7, #12]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	689b      	ldr	r3, [r3, #8]
 80151e8:	60fb      	str	r3, [r7, #12]
 80151ea:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2201      	movs	r2, #1
 80151f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d103      	bne.n	8015204 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f7ff fa61 	bl	80146c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8015202:	e002      	b.n	801520a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f7ff fa8f 	bl	8014728 <HAL_SPI_ErrorCallback>
}
 801520a:	bf00      	nop
 801520c:	3710      	adds	r7, #16
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}

08015212 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8015212:	b580      	push	{r7, lr}
 8015214:	b086      	sub	sp, #24
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801521a:	4b2c      	ldr	r3, [pc, #176]	; (80152cc <SPI_CloseTx_ISR+0xba>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	4a2c      	ldr	r2, [pc, #176]	; (80152d0 <SPI_CloseTx_ISR+0xbe>)
 8015220:	fba2 2303 	umull	r2, r3, r2, r3
 8015224:	0a5b      	lsrs	r3, r3, #9
 8015226:	2264      	movs	r2, #100	; 0x64
 8015228:	fb02 f303 	mul.w	r3, r2, r3
 801522c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801522e:	f7f1 fcf7 	bl	8006c20 <HAL_GetTick>
 8015232:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d106      	bne.n	8015248 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801523e:	f043 0220 	orr.w	r2, r3, #32
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8015246:	e009      	b.n	801525c <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	3b01      	subs	r3, #1
 801524c:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	689b      	ldr	r3, [r3, #8]
 8015254:	f003 0302 	and.w	r3, r3, #2
 8015258:	2b00      	cmp	r3, #0
 801525a:	d0eb      	beq.n	8015234 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	685a      	ldr	r2, [r3, #4]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801526a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801526c:	697a      	ldr	r2, [r7, #20]
 801526e:	2164      	movs	r1, #100	; 0x64
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f7ff feda 	bl	801502a <SPI_EndRxTxTransaction>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d005      	beq.n	8015288 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015280:	f043 0220 	orr.w	r2, r3, #32
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	689b      	ldr	r3, [r3, #8]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d10a      	bne.n	80152a6 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015290:	2300      	movs	r3, #0
 8015292:	60fb      	str	r3, [r7, #12]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	68db      	ldr	r3, [r3, #12]
 801529a:	60fb      	str	r3, [r7, #12]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	689b      	ldr	r3, [r3, #8]
 80152a2:	60fb      	str	r3, [r7, #12]
 80152a4:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2201      	movs	r2, #1
 80152aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d003      	beq.n	80152be <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f7ff fa36 	bl	8014728 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80152bc:	e002      	b.n	80152c4 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7ff f9f6 	bl	80146b0 <HAL_SPI_TxCpltCallback>
}
 80152c4:	bf00      	nop
 80152c6:	3718      	adds	r7, #24
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	20000058 	.word	0x20000058
 80152d0:	057619f1 	.word	0x057619f1

080152d4 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80152dc:	2300      	movs	r3, #0
 80152de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80152e0:	4b1e      	ldr	r3, [pc, #120]	; (801535c <SPI_AbortRx_ISR+0x88>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	4a1e      	ldr	r2, [pc, #120]	; (8015360 <SPI_AbortRx_ISR+0x8c>)
 80152e6:	fba2 2303 	umull	r2, r3, r2, r3
 80152ea:	0a5b      	lsrs	r3, r3, #9
 80152ec:	2264      	movs	r2, #100	; 0x64
 80152ee:	fb02 f303 	mul.w	r3, r2, r3
 80152f2:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8015306:	e009      	b.n	801531c <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	3b01      	subs	r3, #1
 801530c:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	689b      	ldr	r3, [r3, #8]
 8015314:	f003 0302 	and.w	r3, r3, #2
 8015318:	2b00      	cmp	r3, #0
 801531a:	d0eb      	beq.n	80152f4 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	681a      	ldr	r2, [r3, #0]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801532a:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	685a      	ldr	r2, [r3, #4]
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801533a:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	68db      	ldr	r3, [r3, #12]
 8015342:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8015344:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2207      	movs	r2, #7
 801534a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 801534e:	bf00      	nop
 8015350:	3714      	adds	r7, #20
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr
 801535a:	bf00      	nop
 801535c:	20000058 	.word	0x20000058
 8015360:	057619f1 	.word	0x057619f1

08015364 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8015364:	b480      	push	{r7}
 8015366:	b083      	sub	sp, #12
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	685a      	ldr	r2, [r3, #4]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801537a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801538a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2207      	movs	r2, #7
 8015390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8015394:	bf00      	nop
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539e:	4770      	bx	lr

080153a0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	60f8      	str	r0, [r7, #12]
 80153a8:	60b9      	str	r1, [r7, #8]
 80153aa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d101      	bne.n	80153b6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80153b2:	2301      	movs	r3, #1
 80153b4:	e034      	b.n	8015420 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d106      	bne.n	80153d0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	2200      	movs	r2, #0
 80153c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f7f0 fbbe 	bl	8005b4c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	3308      	adds	r3, #8
 80153d8:	4619      	mov	r1, r3
 80153da:	4610      	mov	r0, r2
 80153dc:	f003 f9a0 	bl	8018720 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	6818      	ldr	r0, [r3, #0]
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	689b      	ldr	r3, [r3, #8]
 80153e8:	461a      	mov	r2, r3
 80153ea:	68b9      	ldr	r1, [r7, #8]
 80153ec:	f003 fa1e 	bl	801882c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	6858      	ldr	r0, [r3, #4]
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	689a      	ldr	r2, [r3, #8]
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fc:	6879      	ldr	r1, [r7, #4]
 80153fe:	f003 fa52 	bl	80188a6 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	68fa      	ldr	r2, [r7, #12]
 8015408:	6892      	ldr	r2, [r2, #8]
 801540a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	68fa      	ldr	r2, [r7, #12]
 8015414:	6892      	ldr	r2, [r2, #8]
 8015416:	f041 0101 	orr.w	r1, r1, #1
 801541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 801541e:	2300      	movs	r3, #0
}
 8015420:	4618      	mov	r0, r3
 8015422:	3710      	adds	r7, #16
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7f0 fbb9 	bl	8005ba8 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6818      	ldr	r0, [r3, #0]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6859      	ldr	r1, [r3, #4]
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	689b      	ldr	r3, [r3, #8]
 8015442:	461a      	mov	r2, r3
 8015444:	f003 f9be 	bl	80187c4 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	3708      	adds	r7, #8
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8015462:	b480      	push	{r7}
 8015464:	b083      	sub	sp, #12
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 801546a:	bf00      	nop
 801546c:	370c      	adds	r7, #12
 801546e:	46bd      	mov	sp, r7
 8015470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015474:	4770      	bx	lr

08015476 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 8015476:	b480      	push	{r7}
 8015478:	b083      	sub	sp, #12
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 801547e:	bf00      	nop
 8015480:	370c      	adds	r7, #12
 8015482:	46bd      	mov	sp, r7
 8015484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015488:	4770      	bx	lr

0801548a <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 801548a:	b480      	push	{r7}
 801548c:	b087      	sub	sp, #28
 801548e:	af00      	add	r7, sp, #0
 8015490:	60f8      	str	r0, [r7, #12]
 8015492:	60b9      	str	r1, [r7, #8]
 8015494:	607a      	str	r2, [r7, #4]
 8015496:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	d101      	bne.n	80154aa <HAL_SRAM_Read_8b+0x20>
 80154a6:	2302      	movs	r3, #2
 80154a8:	e022      	b.n	80154f0 <HAL_SRAM_Read_8b+0x66>
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	2201      	movs	r2, #1
 80154ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2202      	movs	r2, #2
 80154b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80154ba:	e00d      	b.n	80154d8 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	b2da      	uxtb	r2, r3
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	3301      	adds	r3, #1
 80154ca:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80154cc:	697b      	ldr	r3, [r7, #20]
 80154ce:	3301      	adds	r3, #1
 80154d0:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	3b01      	subs	r3, #1
 80154d6:	603b      	str	r3, [r7, #0]
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d1ee      	bne.n	80154bc <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2201      	movs	r2, #1
 80154e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2200      	movs	r2, #0
 80154ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80154ee:	2300      	movs	r3, #0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	371c      	adds	r7, #28
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b087      	sub	sp, #28
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015514:	b2db      	uxtb	r3, r3
 8015516:	2b04      	cmp	r3, #4
 8015518:	d101      	bne.n	801551e <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 801551a:	2301      	movs	r3, #1
 801551c:	e028      	b.n	8015570 <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015524:	2b01      	cmp	r3, #1
 8015526:	d101      	bne.n	801552c <HAL_SRAM_Write_8b+0x30>
 8015528:	2302      	movs	r3, #2
 801552a:	e021      	b.n	8015570 <HAL_SRAM_Write_8b+0x74>
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2201      	movs	r2, #1
 8015530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	2202      	movs	r2, #2
 8015538:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801553c:	e00c      	b.n	8015558 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	781a      	ldrb	r2, [r3, #0]
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	3301      	adds	r3, #1
 801554a:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	3301      	adds	r3, #1
 8015550:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	3b01      	subs	r3, #1
 8015556:	603b      	str	r3, [r7, #0]
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d1ef      	bne.n	801553e <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	2201      	movs	r2, #1
 8015562:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2200      	movs	r2, #0
 801556a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	371c      	adds	r7, #28
 8015574:	46bd      	mov	sp, r7
 8015576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557a:	4770      	bx	lr

0801557c <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 801557c:	b480      	push	{r7}
 801557e:	b087      	sub	sp, #28
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	60b9      	str	r1, [r7, #8]
 8015586:	607a      	str	r2, [r7, #4]
 8015588:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015594:	2b01      	cmp	r3, #1
 8015596:	d101      	bne.n	801559c <HAL_SRAM_Read_16b+0x20>
 8015598:	2302      	movs	r3, #2
 801559a:	e022      	b.n	80155e2 <HAL_SRAM_Read_16b+0x66>
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	2201      	movs	r2, #1
 80155a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2202      	movs	r2, #2
 80155a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80155ac:	e00d      	b.n	80155ca <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	881b      	ldrh	r3, [r3, #0]
 80155b2:	b29a      	uxth	r2, r3
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	3302      	adds	r3, #2
 80155bc:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	3302      	adds	r3, #2
 80155c2:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	3b01      	subs	r3, #1
 80155c8:	603b      	str	r3, [r7, #0]
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1ee      	bne.n	80155ae <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2201      	movs	r2, #1
 80155d4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	2200      	movs	r2, #0
 80155dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80155e0:	2300      	movs	r3, #0
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	371c      	adds	r7, #28
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr

080155ee <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 80155ee:	b480      	push	{r7}
 80155f0:	b087      	sub	sp, #28
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	60f8      	str	r0, [r7, #12]
 80155f6:	60b9      	str	r1, [r7, #8]
 80155f8:	607a      	str	r2, [r7, #4]
 80155fa:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015606:	b2db      	uxtb	r3, r3
 8015608:	2b04      	cmp	r3, #4
 801560a:	d101      	bne.n	8015610 <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 801560c:	2301      	movs	r3, #1
 801560e:	e028      	b.n	8015662 <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015616:	2b01      	cmp	r3, #1
 8015618:	d101      	bne.n	801561e <HAL_SRAM_Write_16b+0x30>
 801561a:	2302      	movs	r3, #2
 801561c:	e021      	b.n	8015662 <HAL_SRAM_Write_16b+0x74>
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2201      	movs	r2, #1
 8015622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	2202      	movs	r2, #2
 801562a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801562e:	e00c      	b.n	801564a <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	881a      	ldrh	r2, [r3, #0]
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3302      	adds	r3, #2
 801563c:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	3302      	adds	r3, #2
 8015642:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	3b01      	subs	r3, #1
 8015648:	603b      	str	r3, [r7, #0]
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d1ef      	bne.n	8015630 <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2201      	movs	r2, #1
 8015654:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	2200      	movs	r2, #0
 801565c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8015660:	2300      	movs	r3, #0
}
 8015662:	4618      	mov	r0, r3
 8015664:	371c      	adds	r7, #28
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr

0801566e <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 801566e:	b480      	push	{r7}
 8015670:	b085      	sub	sp, #20
 8015672:	af00      	add	r7, sp, #0
 8015674:	60f8      	str	r0, [r7, #12]
 8015676:	60b9      	str	r1, [r7, #8]
 8015678:	607a      	str	r2, [r7, #4]
 801567a:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015682:	2b01      	cmp	r3, #1
 8015684:	d101      	bne.n	801568a <HAL_SRAM_Read_32b+0x1c>
 8015686:	2302      	movs	r3, #2
 8015688:	e021      	b.n	80156ce <HAL_SRAM_Read_32b+0x60>
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2201      	movs	r2, #1
 801568e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2202      	movs	r2, #2
 8015696:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 801569a:	e00c      	b.n	80156b6 <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	681a      	ldr	r2, [r3, #0]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	3304      	adds	r3, #4
 80156a8:	607b      	str	r3, [r7, #4]
    pAddress++;
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	3304      	adds	r3, #4
 80156ae:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	3b01      	subs	r3, #1
 80156b4:	603b      	str	r3, [r7, #0]
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d1ef      	bne.n	801569c <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	2201      	movs	r2, #1
 80156c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2200      	movs	r2, #0
 80156c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3714      	adds	r7, #20
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr

080156da <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80156da:	b480      	push	{r7}
 80156dc:	b085      	sub	sp, #20
 80156de:	af00      	add	r7, sp, #0
 80156e0:	60f8      	str	r0, [r7, #12]
 80156e2:	60b9      	str	r1, [r7, #8]
 80156e4:	607a      	str	r2, [r7, #4]
 80156e6:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80156ee:	b2db      	uxtb	r3, r3
 80156f0:	2b04      	cmp	r3, #4
 80156f2:	d101      	bne.n	80156f8 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 80156f4:	2301      	movs	r3, #1
 80156f6:	e028      	b.n	801574a <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80156fe:	2b01      	cmp	r3, #1
 8015700:	d101      	bne.n	8015706 <HAL_SRAM_Write_32b+0x2c>
 8015702:	2302      	movs	r3, #2
 8015704:	e021      	b.n	801574a <HAL_SRAM_Write_32b+0x70>
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2201      	movs	r2, #1
 801570a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2202      	movs	r2, #2
 8015712:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015716:	e00c      	b.n	8015732 <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	3304      	adds	r3, #4
 8015724:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	3304      	adds	r3, #4
 801572a:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	3b01      	subs	r3, #1
 8015730:	603b      	str	r3, [r7, #0]
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d1ef      	bne.n	8015718 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2201      	movs	r2, #1
 801573c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2200      	movs	r2, #0
 8015744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015748:	2300      	movs	r3, #0
}
 801574a:	4618      	mov	r0, r3
 801574c:	3714      	adds	r7, #20
 801574e:	46bd      	mov	sp, r7
 8015750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015754:	4770      	bx	lr

08015756 <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015756:	b580      	push	{r7, lr}
 8015758:	b084      	sub	sp, #16
 801575a:	af00      	add	r7, sp, #0
 801575c:	60f8      	str	r0, [r7, #12]
 801575e:	60b9      	str	r1, [r7, #8]
 8015760:	607a      	str	r2, [r7, #4]
 8015762:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801576a:	2b01      	cmp	r3, #1
 801576c:	d101      	bne.n	8015772 <HAL_SRAM_Read_DMA+0x1c>
 801576e:	2302      	movs	r3, #2
 8015770:	e01f      	b.n	80157b2 <HAL_SRAM_Read_DMA+0x5c>
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2201      	movs	r2, #1
 8015776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	2202      	movs	r2, #2
 801577e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015786:	4a0d      	ldr	r2, [pc, #52]	; (80157bc <HAL_SRAM_Read_DMA+0x66>)
 8015788:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801578e:	4a0c      	ldr	r2, [pc, #48]	; (80157c0 <HAL_SRAM_Read_DMA+0x6a>)
 8015790:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015796:	68b9      	ldr	r1, [r7, #8]
 8015798:	687a      	ldr	r2, [r7, #4]
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	f7f2 fca9 	bl	80080f2 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2201      	movs	r2, #1
 80157a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	2200      	movs	r2, #0
 80157ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 80157b0:	2300      	movs	r3, #0
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	08015463 	.word	0x08015463
 80157c0:	08015477 	.word	0x08015477

080157c4 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
 80157d0:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b04      	cmp	r3, #4
 80157dc:	d101      	bne.n	80157e2 <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 80157de:	2301      	movs	r3, #1
 80157e0:	e026      	b.n	8015830 <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157e8:	2b01      	cmp	r3, #1
 80157ea:	d101      	bne.n	80157f0 <HAL_SRAM_Write_DMA+0x2c>
 80157ec:	2302      	movs	r3, #2
 80157ee:	e01f      	b.n	8015830 <HAL_SRAM_Write_DMA+0x6c>
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	2201      	movs	r2, #1
 80157f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2202      	movs	r2, #2
 80157fc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015804:	4a0c      	ldr	r2, [pc, #48]	; (8015838 <HAL_SRAM_Write_DMA+0x74>)
 8015806:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801580c:	4a0b      	ldr	r2, [pc, #44]	; (801583c <HAL_SRAM_Write_DMA+0x78>)
 801580e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015814:	6879      	ldr	r1, [r7, #4]
 8015816:	68ba      	ldr	r2, [r7, #8]
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	f7f2 fc6a 	bl	80080f2 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	2201      	movs	r2, #1
 8015822:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2200      	movs	r2, #0
 801582a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 801582e:	2300      	movs	r3, #0
}
 8015830:	4618      	mov	r0, r3
 8015832:	3710      	adds	r7, #16
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	08015463 	.word	0x08015463
 801583c:	08015477 	.word	0x08015477

08015840 <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801584e:	2b01      	cmp	r3, #1
 8015850:	d101      	bne.n	8015856 <HAL_SRAM_WriteOperation_Enable+0x16>
 8015852:	2302      	movs	r3, #2
 8015854:	e014      	b.n	8015880 <HAL_SRAM_WriteOperation_Enable+0x40>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2201      	movs	r2, #1
 801585a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	689b      	ldr	r3, [r3, #8]
 8015866:	4619      	mov	r1, r3
 8015868:	4610      	mov	r0, r2
 801586a:	f003 f85b 	bl	8018924 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2201      	movs	r2, #1
 8015872:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2200      	movs	r2, #0
 801587a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 801587e:	2300      	movs	r3, #0
}
 8015880:	4618      	mov	r0, r3
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015896:	2b01      	cmp	r3, #1
 8015898:	d101      	bne.n	801589e <HAL_SRAM_WriteOperation_Disable+0x16>
 801589a:	2302      	movs	r3, #2
 801589c:	e018      	b.n	80158d0 <HAL_SRAM_WriteOperation_Disable+0x48>
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2201      	movs	r2, #1
 80158a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2202      	movs	r2, #2
 80158aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	689b      	ldr	r3, [r3, #8]
 80158b6:	4619      	mov	r1, r3
 80158b8:	4610      	mov	r0, r2
 80158ba:	f003 f849 	bl	8018950 <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2204      	movs	r2, #4
 80158c2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2200      	movs	r2, #0
 80158ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}

080158d8 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  return hsram->State;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80158e6:	b2db      	uxtb	r3, r3
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	370c      	adds	r7, #12
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr

080158f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d101      	bne.n	8015906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015902:	2301      	movs	r3, #1
 8015904:	e03f      	b.n	8015986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801590c:	b2db      	uxtb	r3, r3
 801590e:	2b00      	cmp	r3, #0
 8015910:	d106      	bne.n	8015920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2200      	movs	r2, #0
 8015916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f7f0 f858 	bl	80059d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2224      	movs	r2, #36	; 0x24
 8015924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	68da      	ldr	r2, [r3, #12]
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f002 fc7e 	bl	801823a <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	691a      	ldr	r2, [r3, #16]
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801594c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	695a      	ldr	r2, [r3, #20]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801595c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	68da      	ldr	r2, [r3, #12]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801596c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2200      	movs	r2, #0
 8015972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2220      	movs	r2, #32
 8015978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2220      	movs	r2, #32
 8015980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	3708      	adds	r7, #8
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b082      	sub	sp, #8
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d101      	bne.n	80159a0 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 801599c:	2301      	movs	r3, #1
 801599e:	e047      	b.n	8015a30 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80159a6:	b2db      	uxtb	r3, r3
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d106      	bne.n	80159ba <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2200      	movs	r2, #0
 80159b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7f0 f80b 	bl	80059d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2224      	movs	r2, #36	; 0x24
 80159be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	68da      	ldr	r2, [r3, #12]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80159d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f002 fc31 	bl	801823a <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	691a      	ldr	r2, [r3, #16]
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80159e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	695a      	ldr	r2, [r3, #20]
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80159f6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	695a      	ldr	r2, [r3, #20]
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	f042 0208 	orr.w	r2, r2, #8
 8015a06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	68da      	ldr	r2, [r3, #12]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015a16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2220      	movs	r2, #32
 8015a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2220      	movs	r2, #32
 8015a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015a2e:	2300      	movs	r3, #0
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3708      	adds	r7, #8
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}

08015a38 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b082      	sub	sp, #8
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
 8015a40:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d101      	bne.n	8015a4c <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8015a48:	2301      	movs	r3, #1
 8015a4a:	e057      	b.n	8015afc <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d106      	bne.n	8015a66 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f7ef ffb5 	bl	80059d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	2224      	movs	r2, #36	; 0x24
 8015a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	68da      	ldr	r2, [r3, #12]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015a7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f002 fbdb 	bl	801823a <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	691a      	ldr	r2, [r3, #16]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015a92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	695a      	ldr	r2, [r3, #20]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015aa2:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	691a      	ldr	r2, [r3, #16]
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015ab2:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	691a      	ldr	r2, [r3, #16]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	f022 0220 	bic.w	r2, r2, #32
 8015ac2:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	6919      	ldr	r1, [r3, #16]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	683a      	ldr	r2, [r7, #0]
 8015ad0:	430a      	orrs	r2, r1
 8015ad2:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	68da      	ldr	r2, [r3, #12]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015ae2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2220      	movs	r2, #32
 8015aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2220      	movs	r2, #32
 8015af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015afa:	2300      	movs	r3, #0
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	607a      	str	r2, [r7, #4]
 8015b10:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d101      	bne.n	8015b1c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015b18:	2301      	movs	r3, #1
 8015b1a:	e05f      	b.n	8015bdc <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d106      	bne.n	8015b36 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015b30:	68f8      	ldr	r0, [r7, #12]
 8015b32:	f7ef ff4d 	bl	80059d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	2224      	movs	r2, #36	; 0x24
 8015b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	68da      	ldr	r2, [r3, #12]
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015b4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015b4e:	68f8      	ldr	r0, [r7, #12]
 8015b50:	f002 fb73 	bl	801823a <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	691a      	ldr	r2, [r3, #16]
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015b62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	695a      	ldr	r2, [r3, #20]
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015b72:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	691a      	ldr	r2, [r3, #16]
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f022 020f 	bic.w	r2, r2, #15
 8015b82:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	6919      	ldr	r1, [r3, #16]
 8015b8a:	7afa      	ldrb	r2, [r7, #11]
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	430a      	orrs	r2, r1
 8015b92:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	68da      	ldr	r2, [r3, #12]
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015ba2:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	68d9      	ldr	r1, [r3, #12]
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	687a      	ldr	r2, [r7, #4]
 8015bb0:	430a      	orrs	r2, r1
 8015bb2:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	68da      	ldr	r2, [r3, #12]
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015bc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2220      	movs	r2, #32
 8015bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2220      	movs	r2, #32
 8015bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015bda:	2300      	movs	r3, #0
}
 8015bdc:	4618      	mov	r0, r3
 8015bde:	3710      	adds	r7, #16
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}

08015be4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b082      	sub	sp, #8
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d101      	bne.n	8015bf6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	e021      	b.n	8015c3a <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2224      	movs	r2, #36	; 0x24
 8015bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	68da      	ldr	r2, [r3, #12]
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015c0c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f7ef ff2e 	bl	8005a70 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	2200      	movs	r2, #0
 8015c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	2200      	movs	r2, #0
 8015c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015c38:	2300      	movs	r3, #0
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3708      	adds	r7, #8
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b08a      	sub	sp, #40	; 0x28
 8015c46:	af02      	add	r7, sp, #8
 8015c48:	60f8      	str	r0, [r7, #12]
 8015c4a:	60b9      	str	r1, [r7, #8]
 8015c4c:	603b      	str	r3, [r7, #0]
 8015c4e:	4613      	mov	r3, r2
 8015c50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015c52:	2300      	movs	r3, #0
 8015c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	2b20      	cmp	r3, #32
 8015c60:	d17c      	bne.n	8015d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d002      	beq.n	8015c6e <HAL_UART_Transmit+0x2c>
 8015c68:	88fb      	ldrh	r3, [r7, #6]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d101      	bne.n	8015c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015c6e:	2301      	movs	r3, #1
 8015c70:	e075      	b.n	8015d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	d101      	bne.n	8015c80 <HAL_UART_Transmit+0x3e>
 8015c7c:	2302      	movs	r3, #2
 8015c7e:	e06e      	b.n	8015d5e <HAL_UART_Transmit+0x11c>
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2201      	movs	r2, #1
 8015c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	2221      	movs	r2, #33	; 0x21
 8015c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015c96:	f7f0 ffc3 	bl	8006c20 <HAL_GetTick>
 8015c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	88fa      	ldrh	r2, [r7, #6]
 8015ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	88fa      	ldrh	r2, [r7, #6]
 8015ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	689b      	ldr	r3, [r3, #8]
 8015cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015cb0:	d108      	bne.n	8015cc4 <HAL_UART_Transmit+0x82>
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	691b      	ldr	r3, [r3, #16]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d104      	bne.n	8015cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	61bb      	str	r3, [r7, #24]
 8015cc2:	e003      	b.n	8015ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8015cd4:	e02a      	b.n	8015d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	2180      	movs	r1, #128	; 0x80
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f001 ff19 	bl	8017b18 <UART_WaitOnFlagUntilTimeout>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d001      	beq.n	8015cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015cec:	2303      	movs	r3, #3
 8015cee:	e036      	b.n	8015d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8015cf0:	69fb      	ldr	r3, [r7, #28]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d10b      	bne.n	8015d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015cf6:	69bb      	ldr	r3, [r7, #24]
 8015cf8:	881b      	ldrh	r3, [r3, #0]
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	3302      	adds	r3, #2
 8015d0a:	61bb      	str	r3, [r7, #24]
 8015d0c:	e007      	b.n	8015d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	781a      	ldrb	r2, [r3, #0]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015d18:	69fb      	ldr	r3, [r7, #28]
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	3b01      	subs	r3, #1
 8015d26:	b29a      	uxth	r2, r3
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015d30:	b29b      	uxth	r3, r3
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d1cf      	bne.n	8015cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	9300      	str	r3, [sp, #0]
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	2140      	movs	r1, #64	; 0x40
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	f001 fee9 	bl	8017b18 <UART_WaitOnFlagUntilTimeout>
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d001      	beq.n	8015d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015d4c:	2303      	movs	r3, #3
 8015d4e:	e006      	b.n	8015d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2220      	movs	r2, #32
 8015d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	e000      	b.n	8015d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015d5c:	2302      	movs	r3, #2
  }
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3720      	adds	r7, #32
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b08a      	sub	sp, #40	; 0x28
 8015d6a:	af02      	add	r7, sp, #8
 8015d6c:	60f8      	str	r0, [r7, #12]
 8015d6e:	60b9      	str	r1, [r7, #8]
 8015d70:	603b      	str	r3, [r7, #0]
 8015d72:	4613      	mov	r3, r2
 8015d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015d76:	2300      	movs	r3, #0
 8015d78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d80:	b2db      	uxtb	r3, r3
 8015d82:	2b20      	cmp	r3, #32
 8015d84:	f040 808c 	bne.w	8015ea0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d002      	beq.n	8015d94 <HAL_UART_Receive+0x2e>
 8015d8e:	88fb      	ldrh	r3, [r7, #6]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d101      	bne.n	8015d98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8015d94:	2301      	movs	r3, #1
 8015d96:	e084      	b.n	8015ea2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d101      	bne.n	8015da6 <HAL_UART_Receive+0x40>
 8015da2:	2302      	movs	r3, #2
 8015da4:	e07d      	b.n	8015ea2 <HAL_UART_Receive+0x13c>
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2201      	movs	r2, #1
 8015daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	2200      	movs	r2, #0
 8015db2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	2222      	movs	r2, #34	; 0x22
 8015db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015dc2:	f7f0 ff2d 	bl	8006c20 <HAL_GetTick>
 8015dc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	88fa      	ldrh	r2, [r7, #6]
 8015dcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	88fa      	ldrh	r2, [r7, #6]
 8015dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	689b      	ldr	r3, [r3, #8]
 8015dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ddc:	d108      	bne.n	8015df0 <HAL_UART_Receive+0x8a>
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	691b      	ldr	r3, [r3, #16]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d104      	bne.n	8015df0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8015de6:	2300      	movs	r3, #0
 8015de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	61bb      	str	r3, [r7, #24]
 8015dee:	e003      	b.n	8015df8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015df4:	2300      	movs	r3, #0
 8015df6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015e00:	e043      	b.n	8015e8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	9300      	str	r3, [sp, #0]
 8015e06:	697b      	ldr	r3, [r7, #20]
 8015e08:	2200      	movs	r2, #0
 8015e0a:	2120      	movs	r1, #32
 8015e0c:	68f8      	ldr	r0, [r7, #12]
 8015e0e:	f001 fe83 	bl	8017b18 <UART_WaitOnFlagUntilTimeout>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d001      	beq.n	8015e1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8015e18:	2303      	movs	r3, #3
 8015e1a:	e042      	b.n	8015ea2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015e1c:	69fb      	ldr	r3, [r7, #28]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10c      	bne.n	8015e3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e2e:	b29a      	uxth	r2, r3
 8015e30:	69bb      	ldr	r3, [r7, #24]
 8015e32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	3302      	adds	r3, #2
 8015e38:	61bb      	str	r3, [r7, #24]
 8015e3a:	e01f      	b.n	8015e7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	689b      	ldr	r3, [r3, #8]
 8015e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015e44:	d007      	beq.n	8015e56 <HAL_UART_Receive+0xf0>
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	689b      	ldr	r3, [r3, #8]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d10a      	bne.n	8015e64 <HAL_UART_Receive+0xfe>
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	691b      	ldr	r3, [r3, #16]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d106      	bne.n	8015e64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	69fb      	ldr	r3, [r7, #28]
 8015e60:	701a      	strb	r2, [r3, #0]
 8015e62:	e008      	b.n	8015e76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	685b      	ldr	r3, [r3, #4]
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e70:	b2da      	uxtb	r2, r3
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	3301      	adds	r3, #1
 8015e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	3b01      	subs	r3, #1
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d1b6      	bne.n	8015e02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	2220      	movs	r2, #32
 8015e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	e000      	b.n	8015ea2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015ea0:	2302      	movs	r3, #2
  }
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3720      	adds	r7, #32
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}

08015eaa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015eaa:	b480      	push	{r7}
 8015eac:	b085      	sub	sp, #20
 8015eae:	af00      	add	r7, sp, #0
 8015eb0:	60f8      	str	r0, [r7, #12]
 8015eb2:	60b9      	str	r1, [r7, #8]
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	2b20      	cmp	r3, #32
 8015ec2:	d130      	bne.n	8015f26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d002      	beq.n	8015ed0 <HAL_UART_Transmit_IT+0x26>
 8015eca:	88fb      	ldrh	r3, [r7, #6]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d101      	bne.n	8015ed4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	e029      	b.n	8015f28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	d101      	bne.n	8015ee2 <HAL_UART_Transmit_IT+0x38>
 8015ede:	2302      	movs	r3, #2
 8015ee0:	e022      	b.n	8015f28 <HAL_UART_Transmit_IT+0x7e>
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	68ba      	ldr	r2, [r7, #8]
 8015eee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	88fa      	ldrh	r2, [r7, #6]
 8015ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	88fa      	ldrh	r2, [r7, #6]
 8015efa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2200      	movs	r2, #0
 8015f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2221      	movs	r2, #33	; 0x21
 8015f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	68da      	ldr	r2, [r3, #12]
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015f20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015f22:	2300      	movs	r3, #0
 8015f24:	e000      	b.n	8015f28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015f26:	2302      	movs	r3, #2
  }
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3714      	adds	r7, #20
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b084      	sub	sp, #16
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	60b9      	str	r1, [r7, #8]
 8015f3e:	4613      	mov	r3, r2
 8015f40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	2b20      	cmp	r3, #32
 8015f4c:	d11d      	bne.n	8015f8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d002      	beq.n	8015f5a <HAL_UART_Receive_IT+0x26>
 8015f54:	88fb      	ldrh	r3, [r7, #6]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d101      	bne.n	8015f5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	e016      	b.n	8015f8c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015f64:	2b01      	cmp	r3, #1
 8015f66:	d101      	bne.n	8015f6c <HAL_UART_Receive_IT+0x38>
 8015f68:	2302      	movs	r3, #2
 8015f6a:	e00f      	b.n	8015f8c <HAL_UART_Receive_IT+0x58>
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2201      	movs	r2, #1
 8015f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2200      	movs	r2, #0
 8015f78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015f7a:	88fb      	ldrh	r3, [r7, #6]
 8015f7c:	461a      	mov	r2, r3
 8015f7e:	68b9      	ldr	r1, [r7, #8]
 8015f80:	68f8      	ldr	r0, [r7, #12]
 8015f82:	f001 fe37 	bl	8017bf4 <UART_Start_Receive_IT>
 8015f86:	4603      	mov	r3, r0
 8015f88:	e000      	b.n	8015f8c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015f8a:	2302      	movs	r3, #2
  }
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3710      	adds	r7, #16
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}

08015f94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b08c      	sub	sp, #48	; 0x30
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	60f8      	str	r0, [r7, #12]
 8015f9c:	60b9      	str	r1, [r7, #8]
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015fa8:	b2db      	uxtb	r3, r3
 8015faa:	2b20      	cmp	r3, #32
 8015fac:	d165      	bne.n	801607a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d002      	beq.n	8015fba <HAL_UART_Transmit_DMA+0x26>
 8015fb4:	88fb      	ldrh	r3, [r7, #6]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d101      	bne.n	8015fbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015fba:	2301      	movs	r3, #1
 8015fbc:	e05e      	b.n	801607c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015fc4:	2b01      	cmp	r3, #1
 8015fc6:	d101      	bne.n	8015fcc <HAL_UART_Transmit_DMA+0x38>
 8015fc8:	2302      	movs	r3, #2
 8015fca:	e057      	b.n	801607c <HAL_UART_Transmit_DMA+0xe8>
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2201      	movs	r2, #1
 8015fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8015fd4:	68ba      	ldr	r2, [r7, #8]
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	88fa      	ldrh	r2, [r7, #6]
 8015fde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	88fa      	ldrh	r2, [r7, #6]
 8015fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	2221      	movs	r2, #33	; 0x21
 8015ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ff8:	4a22      	ldr	r2, [pc, #136]	; (8016084 <HAL_UART_Transmit_DMA+0xf0>)
 8015ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016000:	4a21      	ldr	r2, [pc, #132]	; (8016088 <HAL_UART_Transmit_DMA+0xf4>)
 8016002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016008:	4a20      	ldr	r2, [pc, #128]	; (801608c <HAL_UART_Transmit_DMA+0xf8>)
 801600a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016010:	2200      	movs	r2, #0
 8016012:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8016014:	f107 0308 	add.w	r3, r7, #8
 8016018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016020:	6819      	ldr	r1, [r3, #0]
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	3304      	adds	r3, #4
 8016028:	461a      	mov	r2, r3
 801602a:	88fb      	ldrh	r3, [r7, #6]
 801602c:	f7f2 f861 	bl	80080f2 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016038:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	2200      	movs	r2, #0
 801603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	3314      	adds	r3, #20
 8016048:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801604a:	69bb      	ldr	r3, [r7, #24]
 801604c:	e853 3f00 	ldrex	r3, [r3]
 8016050:	617b      	str	r3, [r7, #20]
   return(result);
 8016052:	697b      	ldr	r3, [r7, #20]
 8016054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016058:	62bb      	str	r3, [r7, #40]	; 0x28
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	3314      	adds	r3, #20
 8016060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016062:	627a      	str	r2, [r7, #36]	; 0x24
 8016064:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016066:	6a39      	ldr	r1, [r7, #32]
 8016068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801606a:	e841 2300 	strex	r3, r2, [r1]
 801606e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1e5      	bne.n	8016042 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8016076:	2300      	movs	r3, #0
 8016078:	e000      	b.n	801607c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801607a:	2302      	movs	r3, #2
  }
}
 801607c:	4618      	mov	r0, r3
 801607e:	3730      	adds	r7, #48	; 0x30
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	08017873 	.word	0x08017873
 8016088:	0801790d 	.word	0x0801790d
 801608c:	08017a85 	.word	0x08017a85

08016090 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	4613      	mov	r3, r2
 801609c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	2b20      	cmp	r3, #32
 80160a8:	d11d      	bne.n	80160e6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80160aa:	68bb      	ldr	r3, [r7, #8]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d002      	beq.n	80160b6 <HAL_UART_Receive_DMA+0x26>
 80160b0:	88fb      	ldrh	r3, [r7, #6]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d101      	bne.n	80160ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80160b6:	2301      	movs	r3, #1
 80160b8:	e016      	b.n	80160e8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d101      	bne.n	80160c8 <HAL_UART_Receive_DMA+0x38>
 80160c4:	2302      	movs	r3, #2
 80160c6:	e00f      	b.n	80160e8 <HAL_UART_Receive_DMA+0x58>
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2201      	movs	r2, #1
 80160cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2200      	movs	r2, #0
 80160d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80160d6:	88fb      	ldrh	r3, [r7, #6]
 80160d8:	461a      	mov	r2, r3
 80160da:	68b9      	ldr	r1, [r7, #8]
 80160dc:	68f8      	ldr	r0, [r7, #12]
 80160de:	f001 fdc3 	bl	8017c68 <UART_Start_Receive_DMA>
 80160e2:	4603      	mov	r3, r0
 80160e4:	e000      	b.n	80160e8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80160e6:	2302      	movs	r3, #2
  }
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3710      	adds	r7, #16
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80160f0:	b480      	push	{r7}
 80160f2:	b09d      	sub	sp, #116	; 0x74
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80160f8:	2300      	movs	r3, #0
 80160fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016102:	2b01      	cmp	r3, #1
 8016104:	d101      	bne.n	801610a <HAL_UART_DMAPause+0x1a>
 8016106:	2302      	movs	r3, #2
 8016108:	e098      	b.n	801623c <HAL_UART_DMAPause+0x14c>
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2201      	movs	r2, #1
 801610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	695b      	ldr	r3, [r3, #20]
 8016118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801611c:	2b80      	cmp	r3, #128	; 0x80
 801611e:	bf0c      	ite	eq
 8016120:	2301      	moveq	r3, #1
 8016122:	2300      	movne	r3, #0
 8016124:	b2db      	uxtb	r3, r3
 8016126:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801612e:	b2db      	uxtb	r3, r3
 8016130:	2b21      	cmp	r3, #33	; 0x21
 8016132:	d11c      	bne.n	801616e <HAL_UART_DMAPause+0x7e>
 8016134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016136:	2b00      	cmp	r3, #0
 8016138:	d019      	beq.n	801616e <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	3314      	adds	r3, #20
 8016140:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016144:	e853 3f00 	ldrex	r3, [r3]
 8016148:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801614a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801614c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016150:	66bb      	str	r3, [r7, #104]	; 0x68
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	3314      	adds	r3, #20
 8016158:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801615a:	65ba      	str	r2, [r7, #88]	; 0x58
 801615c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801615e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016162:	e841 2300 	strex	r3, r2, [r1]
 8016166:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801616a:	2b00      	cmp	r3, #0
 801616c:	d1e5      	bne.n	801613a <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	695b      	ldr	r3, [r3, #20]
 8016174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016178:	2b40      	cmp	r3, #64	; 0x40
 801617a:	bf0c      	ite	eq
 801617c:	2301      	moveq	r3, #1
 801617e:	2300      	movne	r3, #0
 8016180:	b2db      	uxtb	r3, r3
 8016182:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801618a:	b2db      	uxtb	r3, r3
 801618c:	2b22      	cmp	r3, #34	; 0x22
 801618e:	d150      	bne.n	8016232 <HAL_UART_DMAPause+0x142>
 8016190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016192:	2b00      	cmp	r3, #0
 8016194:	d04d      	beq.n	8016232 <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	330c      	adds	r3, #12
 801619c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161a0:	e853 3f00 	ldrex	r3, [r3]
 80161a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80161a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161ac:	667b      	str	r3, [r7, #100]	; 0x64
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	330c      	adds	r3, #12
 80161b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80161b6:	647a      	str	r2, [r7, #68]	; 0x44
 80161b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80161bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80161be:	e841 2300 	strex	r3, r2, [r1]
 80161c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80161c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d1e5      	bne.n	8016196 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	3314      	adds	r3, #20
 80161d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d4:	e853 3f00 	ldrex	r3, [r3]
 80161d8:	623b      	str	r3, [r7, #32]
   return(result);
 80161da:	6a3b      	ldr	r3, [r7, #32]
 80161dc:	f023 0301 	bic.w	r3, r3, #1
 80161e0:	663b      	str	r3, [r7, #96]	; 0x60
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	3314      	adds	r3, #20
 80161e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80161ea:	633a      	str	r2, [r7, #48]	; 0x30
 80161ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161f2:	e841 2300 	strex	r3, r2, [r1]
 80161f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80161f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d1e5      	bne.n	80161ca <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	3314      	adds	r3, #20
 8016204:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	e853 3f00 	ldrex	r3, [r3]
 801620c:	60fb      	str	r3, [r7, #12]
   return(result);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	3314      	adds	r3, #20
 801621c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801621e:	61fa      	str	r2, [r7, #28]
 8016220:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016222:	69b9      	ldr	r1, [r7, #24]
 8016224:	69fa      	ldr	r2, [r7, #28]
 8016226:	e841 2300 	strex	r3, r2, [r1]
 801622a:	617b      	str	r3, [r7, #20]
   return(result);
 801622c:	697b      	ldr	r3, [r7, #20]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d1e5      	bne.n	80161fe <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801623a:	2300      	movs	r3, #0
}
 801623c:	4618      	mov	r0, r3
 801623e:	3774      	adds	r7, #116	; 0x74
 8016240:	46bd      	mov	sp, r7
 8016242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016246:	4770      	bx	lr

08016248 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8016248:	b480      	push	{r7}
 801624a:	b09d      	sub	sp, #116	; 0x74
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016256:	2b01      	cmp	r3, #1
 8016258:	d101      	bne.n	801625e <HAL_UART_DMAResume+0x16>
 801625a:	2302      	movs	r3, #2
 801625c:	e087      	b.n	801636e <HAL_UART_DMAResume+0x126>
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2201      	movs	r2, #1
 8016262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801626c:	b2db      	uxtb	r3, r3
 801626e:	2b21      	cmp	r3, #33	; 0x21
 8016270:	d119      	bne.n	80162a6 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	3314      	adds	r3, #20
 8016278:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801627a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801627c:	e853 3f00 	ldrex	r3, [r3]
 8016280:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016288:	66fb      	str	r3, [r7, #108]	; 0x6c
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	3314      	adds	r3, #20
 8016290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016292:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016294:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016296:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801629a:	e841 2300 	strex	r3, r2, [r1]
 801629e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80162a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d1e5      	bne.n	8016272 <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	2b22      	cmp	r3, #34	; 0x22
 80162b0:	d158      	bne.n	8016364 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80162b2:	2300      	movs	r3, #0
 80162b4:	60fb      	str	r3, [r7, #12]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	60fb      	str	r3, [r7, #12]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	685b      	ldr	r3, [r3, #4]
 80162c4:	60fb      	str	r3, [r7, #12]
 80162c6:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	330c      	adds	r3, #12
 80162ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162d2:	e853 3f00 	ldrex	r3, [r3]
 80162d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80162d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162de:	66bb      	str	r3, [r7, #104]	; 0x68
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	330c      	adds	r3, #12
 80162e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80162e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80162ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80162ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80162f0:	e841 2300 	strex	r3, r2, [r1]
 80162f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80162f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d1e5      	bne.n	80162c8 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	3314      	adds	r3, #20
 8016302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016306:	e853 3f00 	ldrex	r3, [r3]
 801630a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630e:	f043 0301 	orr.w	r3, r3, #1
 8016312:	667b      	str	r3, [r7, #100]	; 0x64
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	3314      	adds	r3, #20
 801631a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801631c:	637a      	str	r2, [r7, #52]	; 0x34
 801631e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016324:	e841 2300 	strex	r3, r2, [r1]
 8016328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1e5      	bne.n	80162fc <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	3314      	adds	r3, #20
 8016336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016338:	697b      	ldr	r3, [r7, #20]
 801633a:	e853 3f00 	ldrex	r3, [r3]
 801633e:	613b      	str	r3, [r7, #16]
   return(result);
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016346:	663b      	str	r3, [r7, #96]	; 0x60
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	3314      	adds	r3, #20
 801634e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016350:	623a      	str	r2, [r7, #32]
 8016352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016354:	69f9      	ldr	r1, [r7, #28]
 8016356:	6a3a      	ldr	r2, [r7, #32]
 8016358:	e841 2300 	strex	r3, r2, [r1]
 801635c:	61bb      	str	r3, [r7, #24]
   return(result);
 801635e:	69bb      	ldr	r3, [r7, #24]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d1e5      	bne.n	8016330 <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2200      	movs	r2, #0
 8016368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801636c:	2300      	movs	r3, #0
}
 801636e:	4618      	mov	r0, r3
 8016370:	3774      	adds	r7, #116	; 0x74
 8016372:	46bd      	mov	sp, r7
 8016374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016378:	4770      	bx	lr

0801637a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801637a:	b580      	push	{r7, lr}
 801637c:	b090      	sub	sp, #64	; 0x40
 801637e:	af00      	add	r7, sp, #0
 8016380:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8016382:	2300      	movs	r3, #0
 8016384:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	695b      	ldr	r3, [r3, #20]
 801638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016390:	2b80      	cmp	r3, #128	; 0x80
 8016392:	bf0c      	ite	eq
 8016394:	2301      	moveq	r3, #1
 8016396:	2300      	movne	r3, #0
 8016398:	b2db      	uxtb	r3, r3
 801639a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	2b21      	cmp	r3, #33	; 0x21
 80163a6:	d128      	bne.n	80163fa <HAL_UART_DMAStop+0x80>
 80163a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d025      	beq.n	80163fa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	3314      	adds	r3, #20
 80163b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b8:	e853 3f00 	ldrex	r3, [r3]
 80163bc:	623b      	str	r3, [r7, #32]
   return(result);
 80163be:	6a3b      	ldr	r3, [r7, #32]
 80163c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80163c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	3314      	adds	r3, #20
 80163cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163ce:	633a      	str	r2, [r7, #48]	; 0x30
 80163d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d6:	e841 2300 	strex	r3, r2, [r1]
 80163da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80163dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d1e5      	bne.n	80163ae <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d004      	beq.n	80163f4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7f1 fed7 	bl	80081a2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f001 fcd1 	bl	8017d9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	695b      	ldr	r3, [r3, #20]
 8016400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016404:	2b40      	cmp	r3, #64	; 0x40
 8016406:	bf0c      	ite	eq
 8016408:	2301      	moveq	r3, #1
 801640a:	2300      	movne	r3, #0
 801640c:	b2db      	uxtb	r3, r3
 801640e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016416:	b2db      	uxtb	r3, r3
 8016418:	2b22      	cmp	r3, #34	; 0x22
 801641a:	d128      	bne.n	801646e <HAL_UART_DMAStop+0xf4>
 801641c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801641e:	2b00      	cmp	r3, #0
 8016420:	d025      	beq.n	801646e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	3314      	adds	r3, #20
 8016428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	e853 3f00 	ldrex	r3, [r3]
 8016430:	60fb      	str	r3, [r7, #12]
   return(result);
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016438:	637b      	str	r3, [r7, #52]	; 0x34
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	3314      	adds	r3, #20
 8016440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016442:	61fa      	str	r2, [r7, #28]
 8016444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016446:	69b9      	ldr	r1, [r7, #24]
 8016448:	69fa      	ldr	r2, [r7, #28]
 801644a:	e841 2300 	strex	r3, r2, [r1]
 801644e:	617b      	str	r3, [r7, #20]
   return(result);
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d1e5      	bne.n	8016422 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801645a:	2b00      	cmp	r3, #0
 801645c:	d004      	beq.n	8016468 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016462:	4618      	mov	r0, r3
 8016464:	f7f1 fe9d 	bl	80081a2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f001 fcbf 	bl	8017dec <UART_EndRxTransfer>
  }

  return HAL_OK;
 801646e:	2300      	movs	r3, #0
}
 8016470:	4618      	mov	r0, r3
 8016472:	3740      	adds	r7, #64	; 0x40
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b088      	sub	sp, #32
 801647c:	af00      	add	r7, sp, #0
 801647e:	60f8      	str	r0, [r7, #12]
 8016480:	60b9      	str	r1, [r7, #8]
 8016482:	603b      	str	r3, [r7, #0]
 8016484:	4613      	mov	r3, r2
 8016486:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801648e:	b2db      	uxtb	r3, r3
 8016490:	2b20      	cmp	r3, #32
 8016492:	f040 80c9 	bne.w	8016628 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d002      	beq.n	80164a2 <HAL_UARTEx_ReceiveToIdle+0x2a>
 801649c:	88fb      	ldrh	r3, [r7, #6]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d101      	bne.n	80164a6 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80164a2:	2301      	movs	r3, #1
 80164a4:	e0c1      	b.n	801662a <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80164ac:	2b01      	cmp	r3, #1
 80164ae:	d101      	bne.n	80164b4 <HAL_UARTEx_ReceiveToIdle+0x3c>
 80164b0:	2302      	movs	r3, #2
 80164b2:	e0ba      	b.n	801662a <HAL_UARTEx_ReceiveToIdle+0x1b2>
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	2201      	movs	r2, #1
 80164b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2200      	movs	r2, #0
 80164c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	2222      	movs	r2, #34	; 0x22
 80164c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	2201      	movs	r2, #1
 80164ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80164d0:	f7f0 fba6 	bl	8006c20 <HAL_GetTick>
 80164d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	88fa      	ldrh	r2, [r7, #6]
 80164da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	88fa      	ldrh	r2, [r7, #6]
 80164e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	689b      	ldr	r3, [r3, #8]
 80164e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164ea:	d108      	bne.n	80164fe <HAL_UARTEx_ReceiveToIdle+0x86>
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	691b      	ldr	r3, [r3, #16]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d104      	bne.n	80164fe <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80164f4:	2300      	movs	r3, #0
 80164f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	61bb      	str	r3, [r7, #24]
 80164fc:	e003      	b.n	8016506 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016502:	2300      	movs	r3, #0
 8016504:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2200      	movs	r2, #0
 801650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	2200      	movs	r2, #0
 8016512:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016514:	e074      	b.n	8016600 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	f003 0310 	and.w	r3, r3, #16
 8016520:	2b10      	cmp	r3, #16
 8016522:	d114      	bne.n	801654e <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016524:	2300      	movs	r3, #0
 8016526:	613b      	str	r3, [r7, #16]
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	613b      	str	r3, [r7, #16]
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	613b      	str	r3, [r7, #16]
 8016538:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	881b      	ldrh	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d005      	beq.n	801654e <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	2220      	movs	r2, #32
 8016546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 801654a:	2300      	movs	r3, #0
 801654c:	e06d      	b.n	801662a <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	f003 0320 	and.w	r3, r3, #32
 8016558:	2b20      	cmp	r3, #32
 801655a:	d13c      	bne.n	80165d6 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 801655c:	69fb      	ldr	r3, [r7, #28]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d10c      	bne.n	801657c <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	b29b      	uxth	r3, r3
 801656a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801656e:	b29a      	uxth	r2, r3
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8016574:	69bb      	ldr	r3, [r7, #24]
 8016576:	3302      	adds	r3, #2
 8016578:	61bb      	str	r3, [r7, #24]
 801657a:	e01f      	b.n	80165bc <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	689b      	ldr	r3, [r3, #8]
 8016580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016584:	d007      	beq.n	8016596 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	689b      	ldr	r3, [r3, #8]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d10a      	bne.n	80165a4 <HAL_UARTEx_ReceiveToIdle+0x12c>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	691b      	ldr	r3, [r3, #16]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d106      	bne.n	80165a4 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	b2da      	uxtb	r2, r3
 801659e:	69fb      	ldr	r3, [r7, #28]
 80165a0:	701a      	strb	r2, [r3, #0]
 80165a2:	e008      	b.n	80165b6 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	685b      	ldr	r3, [r3, #4]
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165b0:	b2da      	uxtb	r2, r3
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80165b6:	69fb      	ldr	r3, [r7, #28]
 80165b8:	3301      	adds	r3, #1
 80165ba:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	881b      	ldrh	r3, [r3, #0]
 80165c0:	3301      	adds	r3, #1
 80165c2:	b29a      	uxth	r2, r3
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	3b01      	subs	r3, #1
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80165d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165dc:	d010      	beq.n	8016600 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80165de:	f7f0 fb1f 	bl	8006c20 <HAL_GetTick>
 80165e2:	4602      	mov	r2, r0
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	1ad3      	subs	r3, r2, r3
 80165e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d302      	bcc.n	80165f4 <HAL_UARTEx_ReceiveToIdle+0x17c>
 80165ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d105      	bne.n	8016600 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2220      	movs	r2, #32
 80165f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 80165fc:	2303      	movs	r3, #3
 80165fe:	e014      	b.n	801662a <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016604:	b29b      	uxth	r3, r3
 8016606:	2b00      	cmp	r3, #0
 8016608:	d185      	bne.n	8016516 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016612:	b29b      	uxth	r3, r3
 8016614:	1ad3      	subs	r3, r2, r3
 8016616:	b29a      	uxth	r2, r3
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	2220      	movs	r2, #32
 8016620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016624:	2300      	movs	r3, #0
 8016626:	e000      	b.n	801662a <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8016628:	2302      	movs	r3, #2
  }
}
 801662a:	4618      	mov	r0, r3
 801662c:	3720      	adds	r7, #32
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}

08016632 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016632:	b580      	push	{r7, lr}
 8016634:	b08c      	sub	sp, #48	; 0x30
 8016636:	af00      	add	r7, sp, #0
 8016638:	60f8      	str	r0, [r7, #12]
 801663a:	60b9      	str	r1, [r7, #8]
 801663c:	4613      	mov	r3, r2
 801663e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016646:	b2db      	uxtb	r3, r3
 8016648:	2b20      	cmp	r3, #32
 801664a:	d152      	bne.n	80166f2 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d002      	beq.n	8016658 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8016652:	88fb      	ldrh	r3, [r7, #6]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d101      	bne.n	801665c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8016658:	2301      	movs	r3, #1
 801665a:	e04b      	b.n	80166f4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016662:	2b01      	cmp	r3, #1
 8016664:	d101      	bne.n	801666a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8016666:	2302      	movs	r3, #2
 8016668:	e044      	b.n	80166f4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	2201      	movs	r2, #1
 801666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	2201      	movs	r2, #1
 8016676:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8016678:	88fb      	ldrh	r3, [r7, #6]
 801667a:	461a      	mov	r2, r3
 801667c:	68b9      	ldr	r1, [r7, #8]
 801667e:	68f8      	ldr	r0, [r7, #12]
 8016680:	f001 fab8 	bl	8017bf4 <UART_Start_Receive_IT>
 8016684:	4603      	mov	r3, r0
 8016686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801668a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801668e:	2b00      	cmp	r3, #0
 8016690:	d12c      	bne.n	80166ec <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016696:	2b01      	cmp	r3, #1
 8016698:	d125      	bne.n	80166e6 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801669a:	2300      	movs	r3, #0
 801669c:	613b      	str	r3, [r7, #16]
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	613b      	str	r3, [r7, #16]
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	613b      	str	r3, [r7, #16]
 80166ae:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	330c      	adds	r3, #12
 80166b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	e853 3f00 	ldrex	r3, [r3]
 80166be:	617b      	str	r3, [r7, #20]
   return(result);
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	f043 0310 	orr.w	r3, r3, #16
 80166c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	330c      	adds	r3, #12
 80166ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80166d0:	627a      	str	r2, [r7, #36]	; 0x24
 80166d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166d4:	6a39      	ldr	r1, [r7, #32]
 80166d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166d8:	e841 2300 	strex	r3, r2, [r1]
 80166dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1e5      	bne.n	80166b0 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80166e4:	e002      	b.n	80166ec <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80166e6:	2301      	movs	r3, #1
 80166e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80166ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166f0:	e000      	b.n	80166f4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80166f2:	2302      	movs	r3, #2
  }
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3730      	adds	r7, #48	; 0x30
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b08c      	sub	sp, #48	; 0x30
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	4613      	mov	r3, r2
 8016708:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016710:	b2db      	uxtb	r3, r3
 8016712:	2b20      	cmp	r3, #32
 8016714:	d152      	bne.n	80167bc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d002      	beq.n	8016722 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801671c:	88fb      	ldrh	r3, [r7, #6]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d101      	bne.n	8016726 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8016722:	2301      	movs	r3, #1
 8016724:	e04b      	b.n	80167be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801672c:	2b01      	cmp	r3, #1
 801672e:	d101      	bne.n	8016734 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8016730:	2302      	movs	r3, #2
 8016732:	e044      	b.n	80167be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2201      	movs	r2, #1
 8016738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	2201      	movs	r2, #1
 8016740:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8016742:	88fb      	ldrh	r3, [r7, #6]
 8016744:	461a      	mov	r2, r3
 8016746:	68b9      	ldr	r1, [r7, #8]
 8016748:	68f8      	ldr	r0, [r7, #12]
 801674a:	f001 fa8d 	bl	8017c68 <UART_Start_Receive_DMA>
 801674e:	4603      	mov	r3, r0
 8016750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016758:	2b00      	cmp	r3, #0
 801675a:	d12c      	bne.n	80167b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016760:	2b01      	cmp	r3, #1
 8016762:	d125      	bne.n	80167b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016764:	2300      	movs	r3, #0
 8016766:	613b      	str	r3, [r7, #16]
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	613b      	str	r3, [r7, #16]
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	613b      	str	r3, [r7, #16]
 8016778:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	330c      	adds	r3, #12
 8016780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016782:	69bb      	ldr	r3, [r7, #24]
 8016784:	e853 3f00 	ldrex	r3, [r3]
 8016788:	617b      	str	r3, [r7, #20]
   return(result);
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	f043 0310 	orr.w	r3, r3, #16
 8016790:	62bb      	str	r3, [r7, #40]	; 0x28
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	330c      	adds	r3, #12
 8016798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801679a:	627a      	str	r2, [r7, #36]	; 0x24
 801679c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801679e:	6a39      	ldr	r1, [r7, #32]
 80167a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167a2:	e841 2300 	strex	r3, r2, [r1]
 80167a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d1e5      	bne.n	801677a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80167ae:	e002      	b.n	80167b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80167b0:	2301      	movs	r3, #1
 80167b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80167b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167ba:	e000      	b.n	80167be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80167bc:	2302      	movs	r3, #2
  }
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3730      	adds	r7, #48	; 0x30
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b0a0      	sub	sp, #128	; 0x80
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	330c      	adds	r3, #12
 80167d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167d8:	e853 3f00 	ldrex	r3, [r3]
 80167dc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80167de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80167e0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80167e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	330c      	adds	r3, #12
 80167ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80167ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80167f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80167f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80167f6:	e841 2300 	strex	r3, r2, [r1]
 80167fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80167fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d1e5      	bne.n	80167ce <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	3314      	adds	r3, #20
 8016808:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801680a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801680c:	e853 3f00 	ldrex	r3, [r3]
 8016810:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016814:	f023 0301 	bic.w	r3, r3, #1
 8016818:	67bb      	str	r3, [r7, #120]	; 0x78
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	3314      	adds	r3, #20
 8016820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016822:	657a      	str	r2, [r7, #84]	; 0x54
 8016824:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801682a:	e841 2300 	strex	r3, r2, [r1]
 801682e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1e5      	bne.n	8016802 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801683a:	2b01      	cmp	r3, #1
 801683c:	d119      	bne.n	8016872 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	330c      	adds	r3, #12
 8016844:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016848:	e853 3f00 	ldrex	r3, [r3]
 801684c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016850:	f023 0310 	bic.w	r3, r3, #16
 8016854:	677b      	str	r3, [r7, #116]	; 0x74
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	330c      	adds	r3, #12
 801685c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801685e:	643a      	str	r2, [r7, #64]	; 0x40
 8016860:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016862:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016864:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016866:	e841 2300 	strex	r3, r2, [r1]
 801686a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686e:	2b00      	cmp	r3, #0
 8016870:	d1e5      	bne.n	801683e <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	695b      	ldr	r3, [r3, #20]
 8016878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801687c:	2b80      	cmp	r3, #128	; 0x80
 801687e:	d136      	bne.n	80168ee <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	3314      	adds	r3, #20
 8016886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016888:	6a3b      	ldr	r3, [r7, #32]
 801688a:	e853 3f00 	ldrex	r3, [r3]
 801688e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016896:	673b      	str	r3, [r7, #112]	; 0x70
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	3314      	adds	r3, #20
 801689e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80168a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80168a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80168a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168a8:	e841 2300 	strex	r3, r2, [r1]
 80168ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80168ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d1e5      	bne.n	8016880 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d018      	beq.n	80168ee <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168c0:	2200      	movs	r2, #0
 80168c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7f1 fc6a 	bl	80081a2 <HAL_DMA_Abort>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d00c      	beq.n	80168ee <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168d8:	4618      	mov	r0, r3
 80168da:	f7f2 f826 	bl	800892a <HAL_DMA_GetError>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b20      	cmp	r3, #32
 80168e2:	d104      	bne.n	80168ee <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2210      	movs	r2, #16
 80168e8:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80168ea:	2303      	movs	r3, #3
 80168ec:	e052      	b.n	8016994 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	695b      	ldr	r3, [r3, #20]
 80168f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168f8:	2b40      	cmp	r3, #64	; 0x40
 80168fa:	d136      	bne.n	801696a <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	3314      	adds	r3, #20
 8016902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	e853 3f00 	ldrex	r3, [r3]
 801690a:	60bb      	str	r3, [r7, #8]
   return(result);
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	3314      	adds	r3, #20
 801691a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801691c:	61ba      	str	r2, [r7, #24]
 801691e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016920:	6979      	ldr	r1, [r7, #20]
 8016922:	69ba      	ldr	r2, [r7, #24]
 8016924:	e841 2300 	strex	r3, r2, [r1]
 8016928:	613b      	str	r3, [r7, #16]
   return(result);
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d1e5      	bne.n	80168fc <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016934:	2b00      	cmp	r3, #0
 8016936:	d018      	beq.n	801696a <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801693c:	2200      	movs	r2, #0
 801693e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016944:	4618      	mov	r0, r3
 8016946:	f7f1 fc2c 	bl	80081a2 <HAL_DMA_Abort>
 801694a:	4603      	mov	r3, r0
 801694c:	2b00      	cmp	r3, #0
 801694e:	d00c      	beq.n	801696a <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016954:	4618      	mov	r0, r3
 8016956:	f7f1 ffe8 	bl	800892a <HAL_DMA_GetError>
 801695a:	4603      	mov	r3, r0
 801695c:	2b20      	cmp	r3, #32
 801695e:	d104      	bne.n	801696a <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2210      	movs	r2, #16
 8016964:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016966:	2303      	movs	r3, #3
 8016968:	e014      	b.n	8016994 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2200      	movs	r2, #0
 801696e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2200      	movs	r2, #0
 8016974:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2200      	movs	r2, #0
 801697a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2220      	movs	r2, #32
 8016980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2220      	movs	r2, #32
 8016988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2200      	movs	r2, #0
 8016990:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016992:	2300      	movs	r3, #0
}
 8016994:	4618      	mov	r0, r3
 8016996:	3780      	adds	r7, #128	; 0x80
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b08e      	sub	sp, #56	; 0x38
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	330c      	adds	r3, #12
 80169aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169ac:	6a3b      	ldr	r3, [r7, #32]
 80169ae:	e853 3f00 	ldrex	r3, [r3]
 80169b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80169ba:	637b      	str	r3, [r7, #52]	; 0x34
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	330c      	adds	r3, #12
 80169c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80169c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169cc:	e841 2300 	strex	r3, r2, [r1]
 80169d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80169d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d1e5      	bne.n	80169a4 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	695b      	ldr	r3, [r3, #20]
 80169de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169e2:	2b80      	cmp	r3, #128	; 0x80
 80169e4:	d136      	bne.n	8016a54 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	3314      	adds	r3, #20
 80169ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	e853 3f00 	ldrex	r3, [r3]
 80169f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80169fc:	633b      	str	r3, [r7, #48]	; 0x30
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	3314      	adds	r3, #20
 8016a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a06:	61ba      	str	r2, [r7, #24]
 8016a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a0a:	6979      	ldr	r1, [r7, #20]
 8016a0c:	69ba      	ldr	r2, [r7, #24]
 8016a0e:	e841 2300 	strex	r3, r2, [r1]
 8016a12:	613b      	str	r3, [r7, #16]
   return(result);
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1e5      	bne.n	80169e6 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d018      	beq.n	8016a54 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a26:	2200      	movs	r2, #0
 8016a28:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7f1 fbb7 	bl	80081a2 <HAL_DMA_Abort>
 8016a34:	4603      	mov	r3, r0
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d00c      	beq.n	8016a54 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7f1 ff73 	bl	800892a <HAL_DMA_GetError>
 8016a44:	4603      	mov	r3, r0
 8016a46:	2b20      	cmp	r3, #32
 8016a48:	d104      	bne.n	8016a54 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2210      	movs	r2, #16
 8016a4e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016a50:	2303      	movs	r3, #3
 8016a52:	e007      	b.n	8016a64 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2200      	movs	r2, #0
 8016a58:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2220      	movs	r2, #32
 8016a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016a62:	2300      	movs	r3, #0
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	3738      	adds	r7, #56	; 0x38
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b09a      	sub	sp, #104	; 0x68
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	330c      	adds	r3, #12
 8016a7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a7e:	e853 3f00 	ldrex	r3, [r3]
 8016a82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	330c      	adds	r3, #12
 8016a92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016a94:	657a      	str	r2, [r7, #84]	; 0x54
 8016a96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016a9c:	e841 2300 	strex	r3, r2, [r1]
 8016aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d1e5      	bne.n	8016a74 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	3314      	adds	r3, #20
 8016aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ab2:	e853 3f00 	ldrex	r3, [r3]
 8016ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aba:	f023 0301 	bic.w	r3, r3, #1
 8016abe:	663b      	str	r3, [r7, #96]	; 0x60
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	3314      	adds	r3, #20
 8016ac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8016aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016ad0:	e841 2300 	strex	r3, r2, [r1]
 8016ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d1e5      	bne.n	8016aa8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d119      	bne.n	8016b18 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	330c      	adds	r3, #12
 8016aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	e853 3f00 	ldrex	r3, [r3]
 8016af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	f023 0310 	bic.w	r3, r3, #16
 8016afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	330c      	adds	r3, #12
 8016b02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b0c:	e841 2300 	strex	r3, r2, [r1]
 8016b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d1e5      	bne.n	8016ae4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	695b      	ldr	r3, [r3, #20]
 8016b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b22:	2b40      	cmp	r3, #64	; 0x40
 8016b24:	d136      	bne.n	8016b94 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	3314      	adds	r3, #20
 8016b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	e853 3f00 	ldrex	r3, [r3]
 8016b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8016b36:	68bb      	ldr	r3, [r7, #8]
 8016b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	3314      	adds	r3, #20
 8016b44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b46:	61ba      	str	r2, [r7, #24]
 8016b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b4a:	6979      	ldr	r1, [r7, #20]
 8016b4c:	69ba      	ldr	r2, [r7, #24]
 8016b4e:	e841 2300 	strex	r3, r2, [r1]
 8016b52:	613b      	str	r3, [r7, #16]
   return(result);
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d1e5      	bne.n	8016b26 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d018      	beq.n	8016b94 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b66:	2200      	movs	r2, #0
 8016b68:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7f1 fb17 	bl	80081a2 <HAL_DMA_Abort>
 8016b74:	4603      	mov	r3, r0
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d00c      	beq.n	8016b94 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f7f1 fed3 	bl	800892a <HAL_DMA_GetError>
 8016b84:	4603      	mov	r3, r0
 8016b86:	2b20      	cmp	r3, #32
 8016b88:	d104      	bne.n	8016b94 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2210      	movs	r2, #16
 8016b8e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016b90:	2303      	movs	r3, #3
 8016b92:	e00a      	b.n	8016baa <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2200      	movs	r2, #0
 8016b98:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2220      	movs	r2, #32
 8016b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016ba8:	2300      	movs	r3, #0
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3768      	adds	r7, #104	; 0x68
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}

08016bb2 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b0a2      	sub	sp, #136	; 0x88
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8016bba:	2301      	movs	r3, #1
 8016bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	330c      	adds	r3, #12
 8016bc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016bca:	e853 3f00 	ldrex	r3, [r3]
 8016bce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bd2:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	330c      	adds	r3, #12
 8016be0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016be4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016be6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016be8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016bea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016bec:	e841 2300 	strex	r3, r2, [r1]
 8016bf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016bf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1e3      	bne.n	8016bc0 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	3314      	adds	r3, #20
 8016bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c02:	e853 3f00 	ldrex	r3, [r3]
 8016c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c0a:	f023 0301 	bic.w	r3, r3, #1
 8016c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	3314      	adds	r3, #20
 8016c16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016c18:	65ba      	str	r2, [r7, #88]	; 0x58
 8016c1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016c1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016c20:	e841 2300 	strex	r3, r2, [r1]
 8016c24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d1e5      	bne.n	8016bf8 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c30:	2b01      	cmp	r3, #1
 8016c32:	d119      	bne.n	8016c68 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	330c      	adds	r3, #12
 8016c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c3e:	e853 3f00 	ldrex	r3, [r3]
 8016c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c46:	f023 0310 	bic.w	r3, r3, #16
 8016c4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	330c      	adds	r3, #12
 8016c52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016c54:	647a      	str	r2, [r7, #68]	; 0x44
 8016c56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c5c:	e841 2300 	strex	r3, r2, [r1]
 8016c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d1e5      	bne.n	8016c34 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d00f      	beq.n	8016c90 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	695b      	ldr	r3, [r3, #20]
 8016c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016c7a:	2b80      	cmp	r3, #128	; 0x80
 8016c7c:	d104      	bne.n	8016c88 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c82:	4a54      	ldr	r2, [pc, #336]	; (8016dd4 <HAL_UART_Abort_IT+0x222>)
 8016c84:	651a      	str	r2, [r3, #80]	; 0x50
 8016c86:	e003      	b.n	8016c90 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d00f      	beq.n	8016cb8 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	695b      	ldr	r3, [r3, #20]
 8016c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ca2:	2b40      	cmp	r3, #64	; 0x40
 8016ca4:	d104      	bne.n	8016cb0 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016caa:	4a4b      	ldr	r2, [pc, #300]	; (8016dd8 <HAL_UART_Abort_IT+0x226>)
 8016cac:	651a      	str	r2, [r3, #80]	; 0x50
 8016cae:	e003      	b.n	8016cb8 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	695b      	ldr	r3, [r3, #20]
 8016cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016cc2:	2b80      	cmp	r3, #128	; 0x80
 8016cc4:	d12d      	bne.n	8016d22 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	3314      	adds	r3, #20
 8016ccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd0:	e853 3f00 	ldrex	r3, [r3]
 8016cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8016cd6:	6a3b      	ldr	r3, [r7, #32]
 8016cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016cdc:	677b      	str	r3, [r7, #116]	; 0x74
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	3314      	adds	r3, #20
 8016ce4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8016ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cee:	e841 2300 	strex	r3, r2, [r1]
 8016cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d1e5      	bne.n	8016cc6 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d00f      	beq.n	8016d22 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7f1 fabb 	bl	8008282 <HAL_DMA_Abort_IT>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d004      	beq.n	8016d1c <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d16:	2200      	movs	r2, #0
 8016d18:	651a      	str	r2, [r3, #80]	; 0x50
 8016d1a:	e002      	b.n	8016d22 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	695b      	ldr	r3, [r3, #20]
 8016d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d2c:	2b40      	cmp	r3, #64	; 0x40
 8016d2e:	d130      	bne.n	8016d92 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	3314      	adds	r3, #20
 8016d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	e853 3f00 	ldrex	r3, [r3]
 8016d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d46:	673b      	str	r3, [r7, #112]	; 0x70
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	3314      	adds	r3, #20
 8016d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016d50:	61fa      	str	r2, [r7, #28]
 8016d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d54:	69b9      	ldr	r1, [r7, #24]
 8016d56:	69fa      	ldr	r2, [r7, #28]
 8016d58:	e841 2300 	strex	r3, r2, [r1]
 8016d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8016d5e:	697b      	ldr	r3, [r7, #20]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d1e5      	bne.n	8016d30 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d012      	beq.n	8016d92 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7f1 fa86 	bl	8008282 <HAL_DMA_Abort_IT>
 8016d76:	4603      	mov	r3, r0
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d007      	beq.n	8016d8c <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d80:	2200      	movs	r2, #0
 8016d82:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8016d84:	2301      	movs	r3, #1
 8016d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016d8a:	e002      	b.n	8016d92 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8016d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016d96:	2b01      	cmp	r3, #1
 8016d98:	d116      	bne.n	8016dc8 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	2200      	movs	r2, #0
 8016da4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2200      	movs	r2, #0
 8016daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	2220      	movs	r2, #32
 8016db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2220      	movs	r2, #32
 8016db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8016dc2:	6878      	ldr	r0, [r7, #4]
 8016dc4:	f000 fbe5 	bl	8017592 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016dc8:	2300      	movs	r3, #0
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3788      	adds	r7, #136	; 0x88
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}
 8016dd2:	bf00      	nop
 8016dd4:	08017edb 	.word	0x08017edb
 8016dd8:	08017f3b 	.word	0x08017f3b

08016ddc <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b08e      	sub	sp, #56	; 0x38
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	330c      	adds	r3, #12
 8016dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dec:	6a3b      	ldr	r3, [r7, #32]
 8016dee:	e853 3f00 	ldrex	r3, [r3]
 8016df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8016df4:	69fb      	ldr	r3, [r7, #28]
 8016df6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	330c      	adds	r3, #12
 8016e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e0c:	e841 2300 	strex	r3, r2, [r1]
 8016e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d1e5      	bne.n	8016de4 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	695b      	ldr	r3, [r3, #20]
 8016e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016e22:	2b80      	cmp	r3, #128	; 0x80
 8016e24:	d13c      	bne.n	8016ea0 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	3314      	adds	r3, #20
 8016e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	e853 3f00 	ldrex	r3, [r3]
 8016e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	3314      	adds	r3, #20
 8016e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e46:	61ba      	str	r2, [r7, #24]
 8016e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e4a:	6979      	ldr	r1, [r7, #20]
 8016e4c:	69ba      	ldr	r2, [r7, #24]
 8016e4e:	e841 2300 	strex	r3, r2, [r1]
 8016e52:	613b      	str	r3, [r7, #16]
   return(result);
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d1e5      	bne.n	8016e26 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d013      	beq.n	8016e8a <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e66:	4a16      	ldr	r2, [pc, #88]	; (8016ec0 <HAL_UART_AbortTransmit_IT+0xe4>)
 8016e68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7f1 fa07 	bl	8008282 <HAL_DMA_Abort_IT>
 8016e74:	4603      	mov	r3, r0
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d01c      	beq.n	8016eb4 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016e84:	4610      	mov	r0, r2
 8016e86:	4798      	blx	r3
 8016e88:	e014      	b.n	8016eb4 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2220      	movs	r2, #32
 8016e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8016e98:	6878      	ldr	r0, [r7, #4]
 8016e9a:	f000 fb84 	bl	80175a6 <HAL_UART_AbortTransmitCpltCallback>
 8016e9e:	e009      	b.n	8016eb4 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2220      	movs	r2, #32
 8016eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f000 fb79 	bl	80175a6 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016eb4:	2300      	movs	r3, #0
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	3738      	adds	r7, #56	; 0x38
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
 8016ebe:	bf00      	nop
 8016ec0:	08017f9b 	.word	0x08017f9b

08016ec4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b09a      	sub	sp, #104	; 0x68
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	330c      	adds	r3, #12
 8016ed2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ed6:	e853 3f00 	ldrex	r3, [r3]
 8016eda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	330c      	adds	r3, #12
 8016eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016eec:	657a      	str	r2, [r7, #84]	; 0x54
 8016eee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ef0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ef2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ef4:	e841 2300 	strex	r3, r2, [r1]
 8016ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d1e5      	bne.n	8016ecc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	3314      	adds	r3, #20
 8016f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f0a:	e853 3f00 	ldrex	r3, [r3]
 8016f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f12:	f023 0301 	bic.w	r3, r3, #1
 8016f16:	663b      	str	r3, [r7, #96]	; 0x60
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	3314      	adds	r3, #20
 8016f1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016f20:	643a      	str	r2, [r7, #64]	; 0x40
 8016f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016f28:	e841 2300 	strex	r3, r2, [r1]
 8016f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d1e5      	bne.n	8016f00 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d119      	bne.n	8016f70 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	330c      	adds	r3, #12
 8016f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f44:	6a3b      	ldr	r3, [r7, #32]
 8016f46:	e853 3f00 	ldrex	r3, [r3]
 8016f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	f023 0310 	bic.w	r3, r3, #16
 8016f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	330c      	adds	r3, #12
 8016f5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f64:	e841 2300 	strex	r3, r2, [r1]
 8016f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d1e5      	bne.n	8016f3c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	695b      	ldr	r3, [r3, #20]
 8016f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f7a:	2b40      	cmp	r3, #64	; 0x40
 8016f7c:	d13f      	bne.n	8016ffe <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	3314      	adds	r3, #20
 8016f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	e853 3f00 	ldrex	r3, [r3]
 8016f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	3314      	adds	r3, #20
 8016f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f9e:	61ba      	str	r2, [r7, #24]
 8016fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fa2:	6979      	ldr	r1, [r7, #20]
 8016fa4:	69ba      	ldr	r2, [r7, #24]
 8016fa6:	e841 2300 	strex	r3, r2, [r1]
 8016faa:	613b      	str	r3, [r7, #16]
   return(result);
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d1e5      	bne.n	8016f7e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d013      	beq.n	8016fe2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fbe:	4a19      	ldr	r2, [pc, #100]	; (8017024 <HAL_UART_AbortReceive_IT+0x160>)
 8016fc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f7f1 f95b 	bl	8008282 <HAL_DMA_Abort_IT>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d022      	beq.n	8017018 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016fdc:	4610      	mov	r0, r2
 8016fde:	4798      	blx	r3
 8016fe0:	e01a      	b.n	8017018 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2220      	movs	r2, #32
 8016fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8016ff6:	6878      	ldr	r0, [r7, #4]
 8016ff8:	f000 fadf 	bl	80175ba <HAL_UART_AbortReceiveCpltCallback>
 8016ffc:	e00c      	b.n	8017018 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2200      	movs	r2, #0
 8017002:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2220      	movs	r2, #32
 8017008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2200      	movs	r2, #0
 8017010:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	f000 fad1 	bl	80175ba <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8017018:	2300      	movs	r3, #0
}
 801701a:	4618      	mov	r0, r3
 801701c:	3768      	adds	r7, #104	; 0x68
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	08017fc5 	.word	0x08017fc5

08017028 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b0ba      	sub	sp, #232	; 0xe8
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	695b      	ldr	r3, [r3, #20]
 801704a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801704e:	2300      	movs	r3, #0
 8017050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017054:	2300      	movs	r3, #0
 8017056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801705e:	f003 030f 	and.w	r3, r3, #15
 8017062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8017066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801706a:	2b00      	cmp	r3, #0
 801706c:	d10f      	bne.n	801708e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017072:	f003 0320 	and.w	r3, r3, #32
 8017076:	2b00      	cmp	r3, #0
 8017078:	d009      	beq.n	801708e <HAL_UART_IRQHandler+0x66>
 801707a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801707e:	f003 0320 	and.w	r3, r3, #32
 8017082:	2b00      	cmp	r3, #0
 8017084:	d003      	beq.n	801708e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f001 f81c 	bl	80180c4 <UART_Receive_IT>
      return;
 801708c:	e256      	b.n	801753c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801708e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017092:	2b00      	cmp	r3, #0
 8017094:	f000 80de 	beq.w	8017254 <HAL_UART_IRQHandler+0x22c>
 8017098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801709c:	f003 0301 	and.w	r3, r3, #1
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d106      	bne.n	80170b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80170a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80170a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	f000 80d1 	beq.w	8017254 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80170b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170b6:	f003 0301 	and.w	r3, r3, #1
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d00b      	beq.n	80170d6 <HAL_UART_IRQHandler+0xae>
 80170be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80170c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d005      	beq.n	80170d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ce:	f043 0201 	orr.w	r2, r3, #1
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80170d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170da:	f003 0304 	and.w	r3, r3, #4
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d00b      	beq.n	80170fa <HAL_UART_IRQHandler+0xd2>
 80170e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80170e6:	f003 0301 	and.w	r3, r3, #1
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d005      	beq.n	80170fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170f2:	f043 0202 	orr.w	r2, r3, #2
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80170fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80170fe:	f003 0302 	and.w	r3, r3, #2
 8017102:	2b00      	cmp	r3, #0
 8017104:	d00b      	beq.n	801711e <HAL_UART_IRQHandler+0xf6>
 8017106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801710a:	f003 0301 	and.w	r3, r3, #1
 801710e:	2b00      	cmp	r3, #0
 8017110:	d005      	beq.n	801711e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017116:	f043 0204 	orr.w	r2, r3, #4
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017122:	f003 0308 	and.w	r3, r3, #8
 8017126:	2b00      	cmp	r3, #0
 8017128:	d011      	beq.n	801714e <HAL_UART_IRQHandler+0x126>
 801712a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801712e:	f003 0320 	and.w	r3, r3, #32
 8017132:	2b00      	cmp	r3, #0
 8017134:	d105      	bne.n	8017142 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8017136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801713a:	f003 0301 	and.w	r3, r3, #1
 801713e:	2b00      	cmp	r3, #0
 8017140:	d005      	beq.n	801714e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017146:	f043 0208 	orr.w	r2, r3, #8
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017152:	2b00      	cmp	r3, #0
 8017154:	f000 81ed 	beq.w	8017532 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801715c:	f003 0320 	and.w	r3, r3, #32
 8017160:	2b00      	cmp	r3, #0
 8017162:	d008      	beq.n	8017176 <HAL_UART_IRQHandler+0x14e>
 8017164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017168:	f003 0320 	and.w	r3, r3, #32
 801716c:	2b00      	cmp	r3, #0
 801716e:	d002      	beq.n	8017176 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f000 ffa7 	bl	80180c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	695b      	ldr	r3, [r3, #20]
 801717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017180:	2b40      	cmp	r3, #64	; 0x40
 8017182:	bf0c      	ite	eq
 8017184:	2301      	moveq	r3, #1
 8017186:	2300      	movne	r3, #0
 8017188:	b2db      	uxtb	r3, r3
 801718a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017192:	f003 0308 	and.w	r3, r3, #8
 8017196:	2b00      	cmp	r3, #0
 8017198:	d103      	bne.n	80171a2 <HAL_UART_IRQHandler+0x17a>
 801719a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d04f      	beq.n	8017242 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 fe22 	bl	8017dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	695b      	ldr	r3, [r3, #20]
 80171ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171b2:	2b40      	cmp	r3, #64	; 0x40
 80171b4:	d141      	bne.n	801723a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	3314      	adds	r3, #20
 80171bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80171c4:	e853 3f00 	ldrex	r3, [r3]
 80171c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80171cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80171d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80171d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	3314      	adds	r3, #20
 80171de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80171e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80171e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80171ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80171f2:	e841 2300 	strex	r3, r2, [r1]
 80171f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80171fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d1d9      	bne.n	80171b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017206:	2b00      	cmp	r3, #0
 8017208:	d013      	beq.n	8017232 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801720e:	4a7d      	ldr	r2, [pc, #500]	; (8017404 <HAL_UART_IRQHandler+0x3dc>)
 8017210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017216:	4618      	mov	r0, r3
 8017218:	f7f1 f833 	bl	8008282 <HAL_DMA_Abort_IT>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d016      	beq.n	8017250 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017228:	687a      	ldr	r2, [r7, #4]
 801722a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801722c:	4610      	mov	r0, r2
 801722e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017230:	e00e      	b.n	8017250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017232:	6878      	ldr	r0, [r7, #4]
 8017234:	f000 f9a3 	bl	801757e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017238:	e00a      	b.n	8017250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f000 f99f 	bl	801757e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017240:	e006      	b.n	8017250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f000 f99b 	bl	801757e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2200      	movs	r2, #0
 801724c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801724e:	e170      	b.n	8017532 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017250:	bf00      	nop
    return;
 8017252:	e16e      	b.n	8017532 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017258:	2b01      	cmp	r3, #1
 801725a:	f040 814a 	bne.w	80174f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017262:	f003 0310 	and.w	r3, r3, #16
 8017266:	2b00      	cmp	r3, #0
 8017268:	f000 8143 	beq.w	80174f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801726c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017270:	f003 0310 	and.w	r3, r3, #16
 8017274:	2b00      	cmp	r3, #0
 8017276:	f000 813c 	beq.w	80174f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801727a:	2300      	movs	r3, #0
 801727c:	60bb      	str	r3, [r7, #8]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	60bb      	str	r3, [r7, #8]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	685b      	ldr	r3, [r3, #4]
 801728c:	60bb      	str	r3, [r7, #8]
 801728e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	695b      	ldr	r3, [r3, #20]
 8017296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801729a:	2b40      	cmp	r3, #64	; 0x40
 801729c:	f040 80b4 	bne.w	8017408 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80172ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f000 8140 	beq.w	8017536 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80172ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80172be:	429a      	cmp	r2, r3
 80172c0:	f080 8139 	bcs.w	8017536 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80172ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172d0:	69db      	ldr	r3, [r3, #28]
 80172d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80172d6:	f000 8088 	beq.w	80173ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	330c      	adds	r3, #12
 80172e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80172e8:	e853 3f00 	ldrex	r3, [r3]
 80172ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80172f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80172f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80172f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	330c      	adds	r3, #12
 8017302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801730a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801730e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017316:	e841 2300 	strex	r3, r2, [r1]
 801731a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801731e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017322:	2b00      	cmp	r3, #0
 8017324:	d1d9      	bne.n	80172da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	3314      	adds	r3, #20
 801732c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801732e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017330:	e853 3f00 	ldrex	r3, [r3]
 8017334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017338:	f023 0301 	bic.w	r3, r3, #1
 801733c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	3314      	adds	r3, #20
 8017346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801734a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801734e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017356:	e841 2300 	strex	r3, r2, [r1]
 801735a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801735c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801735e:	2b00      	cmp	r3, #0
 8017360:	d1e1      	bne.n	8017326 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	3314      	adds	r3, #20
 8017368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801736a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801736c:	e853 3f00 	ldrex	r3, [r3]
 8017370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	3314      	adds	r3, #20
 8017382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801738a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801738c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801738e:	e841 2300 	strex	r3, r2, [r1]
 8017392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017396:	2b00      	cmp	r3, #0
 8017398:	d1e3      	bne.n	8017362 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	2220      	movs	r2, #32
 801739e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2200      	movs	r2, #0
 80173a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	330c      	adds	r3, #12
 80173ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80173b2:	e853 3f00 	ldrex	r3, [r3]
 80173b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80173b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173ba:	f023 0310 	bic.w	r3, r3, #16
 80173be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	330c      	adds	r3, #12
 80173c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80173cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80173ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80173d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80173d4:	e841 2300 	strex	r3, r2, [r1]
 80173d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80173da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d1e3      	bne.n	80173a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7f0 fedc 	bl	80081a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	1ad3      	subs	r3, r2, r3
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	4619      	mov	r1, r3
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f000 f8e7 	bl	80175ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017400:	e099      	b.n	8017536 <HAL_UART_IRQHandler+0x50e>
 8017402:	bf00      	nop
 8017404:	08017eb3 	.word	0x08017eb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017410:	b29b      	uxth	r3, r3
 8017412:	1ad3      	subs	r3, r2, r3
 8017414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801741c:	b29b      	uxth	r3, r3
 801741e:	2b00      	cmp	r3, #0
 8017420:	f000 808b 	beq.w	801753a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8017424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017428:	2b00      	cmp	r3, #0
 801742a:	f000 8086 	beq.w	801753a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	330c      	adds	r3, #12
 8017434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017438:	e853 3f00 	ldrex	r3, [r3]
 801743c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801743e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	330c      	adds	r3, #12
 801744e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017452:	647a      	str	r2, [r7, #68]	; 0x44
 8017454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801745a:	e841 2300 	strex	r3, r2, [r1]
 801745e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017462:	2b00      	cmp	r3, #0
 8017464:	d1e3      	bne.n	801742e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	3314      	adds	r3, #20
 801746c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017470:	e853 3f00 	ldrex	r3, [r3]
 8017474:	623b      	str	r3, [r7, #32]
   return(result);
 8017476:	6a3b      	ldr	r3, [r7, #32]
 8017478:	f023 0301 	bic.w	r3, r3, #1
 801747c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	3314      	adds	r3, #20
 8017486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801748a:	633a      	str	r2, [r7, #48]	; 0x30
 801748c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801748e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017492:	e841 2300 	strex	r3, r2, [r1]
 8017496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801749a:	2b00      	cmp	r3, #0
 801749c:	d1e3      	bne.n	8017466 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2220      	movs	r2, #32
 80174a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2200      	movs	r2, #0
 80174aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	330c      	adds	r3, #12
 80174b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	e853 3f00 	ldrex	r3, [r3]
 80174ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	f023 0310 	bic.w	r3, r3, #16
 80174c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	330c      	adds	r3, #12
 80174cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80174d0:	61fa      	str	r2, [r7, #28]
 80174d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174d4:	69b9      	ldr	r1, [r7, #24]
 80174d6:	69fa      	ldr	r2, [r7, #28]
 80174d8:	e841 2300 	strex	r3, r2, [r1]
 80174dc:	617b      	str	r3, [r7, #20]
   return(result);
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d1e3      	bne.n	80174ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80174e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80174e8:	4619      	mov	r1, r3
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f000 f86f 	bl	80175ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80174f0:	e023      	b.n	801753a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80174f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80174f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d009      	beq.n	8017512 <HAL_UART_IRQHandler+0x4ea>
 80174fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017506:	2b00      	cmp	r3, #0
 8017508:	d003      	beq.n	8017512 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801750a:	6878      	ldr	r0, [r7, #4]
 801750c:	f000 fd72 	bl	8017ff4 <UART_Transmit_IT>
    return;
 8017510:	e014      	b.n	801753c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00e      	beq.n	801753c <HAL_UART_IRQHandler+0x514>
 801751e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017526:	2b00      	cmp	r3, #0
 8017528:	d008      	beq.n	801753c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f000 fdb2 	bl	8018094 <UART_EndTransmit_IT>
    return;
 8017530:	e004      	b.n	801753c <HAL_UART_IRQHandler+0x514>
    return;
 8017532:	bf00      	nop
 8017534:	e002      	b.n	801753c <HAL_UART_IRQHandler+0x514>
      return;
 8017536:	bf00      	nop
 8017538:	e000      	b.n	801753c <HAL_UART_IRQHandler+0x514>
      return;
 801753a:	bf00      	nop
  }
}
 801753c:	37e8      	adds	r7, #232	; 0xe8
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}

08017542 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017542:	b480      	push	{r7}
 8017544:	b083      	sub	sp, #12
 8017546:	af00      	add	r7, sp, #0
 8017548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801754a:	bf00      	nop
 801754c:	370c      	adds	r7, #12
 801754e:	46bd      	mov	sp, r7
 8017550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017554:	4770      	bx	lr

08017556 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017556:	b480      	push	{r7}
 8017558:	b083      	sub	sp, #12
 801755a:	af00      	add	r7, sp, #0
 801755c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801755e:	bf00      	nop
 8017560:	370c      	adds	r7, #12
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr

0801756a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801756a:	b480      	push	{r7}
 801756c:	b083      	sub	sp, #12
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8017572:	bf00      	nop
 8017574:	370c      	adds	r7, #12
 8017576:	46bd      	mov	sp, r7
 8017578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757c:	4770      	bx	lr

0801757e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801757e:	b480      	push	{r7}
 8017580:	b083      	sub	sp, #12
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017586:	bf00      	nop
 8017588:	370c      	adds	r7, #12
 801758a:	46bd      	mov	sp, r7
 801758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017590:	4770      	bx	lr

08017592 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017592:	b480      	push	{r7}
 8017594:	b083      	sub	sp, #12
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801759a:	bf00      	nop
 801759c:	370c      	adds	r7, #12
 801759e:	46bd      	mov	sp, r7
 80175a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a4:	4770      	bx	lr

080175a6 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80175a6:	b480      	push	{r7}
 80175a8:	b083      	sub	sp, #12
 80175aa:	af00      	add	r7, sp, #0
 80175ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80175ae:	bf00      	nop
 80175b0:	370c      	adds	r7, #12
 80175b2:	46bd      	mov	sp, r7
 80175b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b8:	4770      	bx	lr

080175ba <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80175ba:	b480      	push	{r7}
 80175bc:	b083      	sub	sp, #12
 80175be:	af00      	add	r7, sp, #0
 80175c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80175c2:	bf00      	nop
 80175c4:	370c      	adds	r7, #12
 80175c6:	46bd      	mov	sp, r7
 80175c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175cc:	4770      	bx	lr

080175ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80175ce:	b480      	push	{r7}
 80175d0:	b083      	sub	sp, #12
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	6078      	str	r0, [r7, #4]
 80175d6:	460b      	mov	r3, r1
 80175d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80175da:	bf00      	nop
 80175dc:	370c      	adds	r7, #12
 80175de:	46bd      	mov	sp, r7
 80175e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e4:	4770      	bx	lr

080175e6 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 80175e6:	b480      	push	{r7}
 80175e8:	b089      	sub	sp, #36	; 0x24
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d101      	bne.n	80175fc <HAL_LIN_SendBreak+0x16>
 80175f8:	2302      	movs	r3, #2
 80175fa:	e02a      	b.n	8017652 <HAL_LIN_SendBreak+0x6c>
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2201      	movs	r2, #1
 8017600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2224      	movs	r2, #36	; 0x24
 8017608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	330c      	adds	r3, #12
 8017612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	e853 3f00 	ldrex	r3, [r3]
 801761a:	60bb      	str	r3, [r7, #8]
   return(result);
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	f043 0301 	orr.w	r3, r3, #1
 8017622:	61fb      	str	r3, [r7, #28]
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	330c      	adds	r3, #12
 801762a:	69fa      	ldr	r2, [r7, #28]
 801762c:	61ba      	str	r2, [r7, #24]
 801762e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017630:	6979      	ldr	r1, [r7, #20]
 8017632:	69ba      	ldr	r2, [r7, #24]
 8017634:	e841 2300 	strex	r3, r2, [r1]
 8017638:	613b      	str	r3, [r7, #16]
   return(result);
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d1e5      	bne.n	801760c <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2220      	movs	r2, #32
 8017644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	2200      	movs	r2, #0
 801764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017650:	2300      	movs	r3, #0
}
 8017652:	4618      	mov	r0, r3
 8017654:	3724      	adds	r7, #36	; 0x24
 8017656:	46bd      	mov	sp, r7
 8017658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765c:	4770      	bx	lr

0801765e <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 801765e:	b480      	push	{r7}
 8017660:	b089      	sub	sp, #36	; 0x24
 8017662:	af00      	add	r7, sp, #0
 8017664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801766c:	2b01      	cmp	r3, #1
 801766e:	d101      	bne.n	8017674 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8017670:	2302      	movs	r3, #2
 8017672:	e02a      	b.n	80176ca <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2201      	movs	r2, #1
 8017678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2224      	movs	r2, #36	; 0x24
 8017680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	330c      	adds	r3, #12
 801768a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	e853 3f00 	ldrex	r3, [r3]
 8017692:	60bb      	str	r3, [r7, #8]
   return(result);
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	f043 0302 	orr.w	r3, r3, #2
 801769a:	61fb      	str	r3, [r7, #28]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	330c      	adds	r3, #12
 80176a2:	69fa      	ldr	r2, [r7, #28]
 80176a4:	61ba      	str	r2, [r7, #24]
 80176a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176a8:	6979      	ldr	r1, [r7, #20]
 80176aa:	69ba      	ldr	r2, [r7, #24]
 80176ac:	e841 2300 	strex	r3, r2, [r1]
 80176b0:	613b      	str	r3, [r7, #16]
   return(result);
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d1e5      	bne.n	8017684 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2220      	movs	r2, #32
 80176bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2200      	movs	r2, #0
 80176c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80176c8:	2300      	movs	r3, #0
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3724      	adds	r7, #36	; 0x24
 80176ce:	46bd      	mov	sp, r7
 80176d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d4:	4770      	bx	lr

080176d6 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80176d6:	b480      	push	{r7}
 80176d8:	b089      	sub	sp, #36	; 0x24
 80176da:	af00      	add	r7, sp, #0
 80176dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80176e4:	2b01      	cmp	r3, #1
 80176e6:	d101      	bne.n	80176ec <HAL_MultiProcessor_ExitMuteMode+0x16>
 80176e8:	2302      	movs	r3, #2
 80176ea:	e02a      	b.n	8017742 <HAL_MultiProcessor_ExitMuteMode+0x6c>
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2201      	movs	r2, #1
 80176f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2224      	movs	r2, #36	; 0x24
 80176f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	330c      	adds	r3, #12
 8017702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	e853 3f00 	ldrex	r3, [r3]
 801770a:	60bb      	str	r3, [r7, #8]
   return(result);
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	f023 0302 	bic.w	r3, r3, #2
 8017712:	61fb      	str	r3, [r7, #28]
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	330c      	adds	r3, #12
 801771a:	69fa      	ldr	r2, [r7, #28]
 801771c:	61ba      	str	r2, [r7, #24]
 801771e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017720:	6979      	ldr	r1, [r7, #20]
 8017722:	69ba      	ldr	r2, [r7, #24]
 8017724:	e841 2300 	strex	r3, r2, [r1]
 8017728:	613b      	str	r3, [r7, #16]
   return(result);
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d1e5      	bne.n	80176fc <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2220      	movs	r2, #32
 8017734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2200      	movs	r2, #0
 801773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017740:	2300      	movs	r3, #0
}
 8017742:	4618      	mov	r0, r3
 8017744:	3724      	adds	r7, #36	; 0x24
 8017746:	46bd      	mov	sp, r7
 8017748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774c:	4770      	bx	lr

0801774e <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 801774e:	b480      	push	{r7}
 8017750:	b085      	sub	sp, #20
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017756:	2300      	movs	r3, #0
 8017758:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017760:	2b01      	cmp	r3, #1
 8017762:	d101      	bne.n	8017768 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8017764:	2302      	movs	r3, #2
 8017766:	e020      	b.n	80177aa <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	2201      	movs	r2, #1
 801776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2224      	movs	r2, #36	; 0x24
 8017774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	f023 030c 	bic.w	r3, r3, #12
 8017786:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	f043 0308 	orr.w	r3, r3, #8
 801778e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2220      	movs	r2, #32
 801779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	2200      	movs	r2, #0
 80177a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80177a8:	2300      	movs	r3, #0
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	3714      	adds	r7, #20
 80177ae:	46bd      	mov	sp, r7
 80177b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b4:	4770      	bx	lr

080177b6 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80177b6:	b480      	push	{r7}
 80177b8:	b085      	sub	sp, #20
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80177be:	2300      	movs	r3, #0
 80177c0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d101      	bne.n	80177d0 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80177cc:	2302      	movs	r3, #2
 80177ce:	e020      	b.n	8017812 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2201      	movs	r2, #1
 80177d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	2224      	movs	r2, #36	; 0x24
 80177dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	68db      	ldr	r3, [r3, #12]
 80177e6:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	f023 030c 	bic.w	r3, r3, #12
 80177ee:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	f043 0304 	orr.w	r3, r3, #4
 80177f6:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	68fa      	ldr	r2, [r7, #12]
 80177fe:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2220      	movs	r2, #32
 8017804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2200      	movs	r2, #0
 801780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017810:	2300      	movs	r3, #0
}
 8017812:	4618      	mov	r0, r3
 8017814:	3714      	adds	r7, #20
 8017816:	46bd      	mov	sp, r7
 8017818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781c:	4770      	bx	lr

0801781e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 801781e:	b480      	push	{r7}
 8017820:	b085      	sub	sp, #20
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017826:	2300      	movs	r3, #0
 8017828:	60fb      	str	r3, [r7, #12]
 801782a:	2300      	movs	r3, #0
 801782c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017834:	b2db      	uxtb	r3, r3
 8017836:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801783e:	b2db      	uxtb	r3, r3
 8017840:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	b2da      	uxtb	r2, r3
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	b2db      	uxtb	r3, r3
 801784a:	4313      	orrs	r3, r2
 801784c:	b2db      	uxtb	r3, r3
}
 801784e:	4618      	mov	r0, r3
 8017850:	3714      	adds	r7, #20
 8017852:	46bd      	mov	sp, r7
 8017854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017858:	4770      	bx	lr

0801785a <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 801785a:	b480      	push	{r7}
 801785c:	b083      	sub	sp, #12
 801785e:	af00      	add	r7, sp, #0
 8017860:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8017866:	4618      	mov	r0, r3
 8017868:	370c      	adds	r7, #12
 801786a:	46bd      	mov	sp, r7
 801786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017870:	4770      	bx	lr

08017872 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017872:	b580      	push	{r7, lr}
 8017874:	b090      	sub	sp, #64	; 0x40
 8017876:	af00      	add	r7, sp, #0
 8017878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801787e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801788a:	2b00      	cmp	r3, #0
 801788c:	d137      	bne.n	80178fe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801788e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017890:	2200      	movs	r2, #0
 8017892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	3314      	adds	r3, #20
 801789a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801789e:	e853 3f00 	ldrex	r3, [r3]
 80178a2:	623b      	str	r3, [r7, #32]
   return(result);
 80178a4:	6a3b      	ldr	r3, [r7, #32]
 80178a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80178aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80178ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	3314      	adds	r3, #20
 80178b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80178b4:	633a      	str	r2, [r7, #48]	; 0x30
 80178b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80178ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178bc:	e841 2300 	strex	r3, r2, [r1]
 80178c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80178c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1e5      	bne.n	8017894 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80178c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	330c      	adds	r3, #12
 80178ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	e853 3f00 	ldrex	r3, [r3]
 80178d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178de:	637b      	str	r3, [r7, #52]	; 0x34
 80178e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	330c      	adds	r3, #12
 80178e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178e8:	61fa      	str	r2, [r7, #28]
 80178ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178ec:	69b9      	ldr	r1, [r7, #24]
 80178ee:	69fa      	ldr	r2, [r7, #28]
 80178f0:	e841 2300 	strex	r3, r2, [r1]
 80178f4:	617b      	str	r3, [r7, #20]
   return(result);
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d1e5      	bne.n	80178c8 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80178fc:	e002      	b.n	8017904 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80178fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017900:	f7ff fe1f 	bl	8017542 <HAL_UART_TxCpltCallback>
}
 8017904:	bf00      	nop
 8017906:	3740      	adds	r7, #64	; 0x40
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b084      	sub	sp, #16
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017918:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801791a:	68f8      	ldr	r0, [r7, #12]
 801791c:	f7ff fe1b 	bl	8017556 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017920:	bf00      	nop
 8017922:	3710      	adds	r7, #16
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b09c      	sub	sp, #112	; 0x70
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017934:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017940:	2b00      	cmp	r3, #0
 8017942:	d172      	bne.n	8017a2a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017946:	2200      	movs	r2, #0
 8017948:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801794a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	330c      	adds	r3, #12
 8017950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017954:	e853 3f00 	ldrex	r3, [r3]
 8017958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801795a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801795c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017960:	66bb      	str	r3, [r7, #104]	; 0x68
 8017962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	330c      	adds	r3, #12
 8017968:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801796a:	65ba      	str	r2, [r7, #88]	; 0x58
 801796c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801796e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017972:	e841 2300 	strex	r3, r2, [r1]
 8017976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801797a:	2b00      	cmp	r3, #0
 801797c:	d1e5      	bne.n	801794a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801797e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	3314      	adds	r3, #20
 8017984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017988:	e853 3f00 	ldrex	r3, [r3]
 801798c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017990:	f023 0301 	bic.w	r3, r3, #1
 8017994:	667b      	str	r3, [r7, #100]	; 0x64
 8017996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	3314      	adds	r3, #20
 801799c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801799e:	647a      	str	r2, [r7, #68]	; 0x44
 80179a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80179a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80179a6:	e841 2300 	strex	r3, r2, [r1]
 80179aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80179ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1e5      	bne.n	801797e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80179b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	3314      	adds	r3, #20
 80179b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179bc:	e853 3f00 	ldrex	r3, [r3]
 80179c0:	623b      	str	r3, [r7, #32]
   return(result);
 80179c2:	6a3b      	ldr	r3, [r7, #32]
 80179c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80179c8:	663b      	str	r3, [r7, #96]	; 0x60
 80179ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	3314      	adds	r3, #20
 80179d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80179d2:	633a      	str	r2, [r7, #48]	; 0x30
 80179d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80179d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179da:	e841 2300 	strex	r3, r2, [r1]
 80179de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80179e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d1e5      	bne.n	80179b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80179e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179e8:	2220      	movs	r2, #32
 80179ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80179ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	d119      	bne.n	8017a2a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	330c      	adds	r3, #12
 80179fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	e853 3f00 	ldrex	r3, [r3]
 8017a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f023 0310 	bic.w	r3, r3, #16
 8017a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	330c      	adds	r3, #12
 8017a14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017a16:	61fa      	str	r2, [r7, #28]
 8017a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a1a:	69b9      	ldr	r1, [r7, #24]
 8017a1c:	69fa      	ldr	r2, [r7, #28]
 8017a1e:	e841 2300 	strex	r3, r2, [r1]
 8017a22:	617b      	str	r3, [r7, #20]
   return(result);
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d1e5      	bne.n	80179f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a2e:	2b01      	cmp	r3, #1
 8017a30:	d106      	bne.n	8017a40 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017a36:	4619      	mov	r1, r3
 8017a38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017a3a:	f7ff fdc8 	bl	80175ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017a3e:	e002      	b.n	8017a46 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8017a40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017a42:	f7e9 ff61 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8017a46:	bf00      	nop
 8017a48:	3770      	adds	r7, #112	; 0x70
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}

08017a4e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b084      	sub	sp, #16
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a5a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a60:	2b01      	cmp	r3, #1
 8017a62:	d108      	bne.n	8017a76 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017a68:	085b      	lsrs	r3, r3, #1
 8017a6a:	b29b      	uxth	r3, r3
 8017a6c:	4619      	mov	r1, r3
 8017a6e:	68f8      	ldr	r0, [r7, #12]
 8017a70:	f7ff fdad 	bl	80175ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017a74:	e002      	b.n	8017a7c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8017a76:	68f8      	ldr	r0, [r7, #12]
 8017a78:	f7ff fd77 	bl	801756a <HAL_UART_RxHalfCpltCallback>
}
 8017a7c:	bf00      	nop
 8017a7e:	3710      	adds	r7, #16
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	695b      	ldr	r3, [r3, #20]
 8017a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017aa0:	2b80      	cmp	r3, #128	; 0x80
 8017aa2:	bf0c      	ite	eq
 8017aa4:	2301      	moveq	r3, #1
 8017aa6:	2300      	movne	r3, #0
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ab2:	b2db      	uxtb	r3, r3
 8017ab4:	2b21      	cmp	r3, #33	; 0x21
 8017ab6:	d108      	bne.n	8017aca <UART_DMAError+0x46>
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d005      	beq.n	8017aca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8017ac4:	68b8      	ldr	r0, [r7, #8]
 8017ac6:	f000 f969 	bl	8017d9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	695b      	ldr	r3, [r3, #20]
 8017ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ad4:	2b40      	cmp	r3, #64	; 0x40
 8017ad6:	bf0c      	ite	eq
 8017ad8:	2301      	moveq	r3, #1
 8017ada:	2300      	movne	r3, #0
 8017adc:	b2db      	uxtb	r3, r3
 8017ade:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	2b22      	cmp	r3, #34	; 0x22
 8017aea:	d108      	bne.n	8017afe <UART_DMAError+0x7a>
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d005      	beq.n	8017afe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8017af2:	68bb      	ldr	r3, [r7, #8]
 8017af4:	2200      	movs	r2, #0
 8017af6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017af8:	68b8      	ldr	r0, [r7, #8]
 8017afa:	f000 f977 	bl	8017dec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017afe:	68bb      	ldr	r3, [r7, #8]
 8017b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b02:	f043 0210 	orr.w	r2, r3, #16
 8017b06:	68bb      	ldr	r3, [r7, #8]
 8017b08:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017b0a:	68b8      	ldr	r0, [r7, #8]
 8017b0c:	f7ff fd37 	bl	801757e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017b10:	bf00      	nop
 8017b12:	3710      	adds	r7, #16
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}

08017b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b090      	sub	sp, #64	; 0x40
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	60f8      	str	r0, [r7, #12]
 8017b20:	60b9      	str	r1, [r7, #8]
 8017b22:	603b      	str	r3, [r7, #0]
 8017b24:	4613      	mov	r3, r2
 8017b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017b28:	e050      	b.n	8017bcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b30:	d04c      	beq.n	8017bcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8017b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d007      	beq.n	8017b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8017b38:	f7ef f872 	bl	8006c20 <HAL_GetTick>
 8017b3c:	4602      	mov	r2, r0
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	1ad3      	subs	r3, r2, r3
 8017b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d241      	bcs.n	8017bcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	330c      	adds	r3, #12
 8017b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b52:	e853 3f00 	ldrex	r3, [r3]
 8017b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	330c      	adds	r3, #12
 8017b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017b68:	637a      	str	r2, [r7, #52]	; 0x34
 8017b6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b70:	e841 2300 	strex	r3, r2, [r1]
 8017b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d1e5      	bne.n	8017b48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	3314      	adds	r3, #20
 8017b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	e853 3f00 	ldrex	r3, [r3]
 8017b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8017b8c:	693b      	ldr	r3, [r7, #16]
 8017b8e:	f023 0301 	bic.w	r3, r3, #1
 8017b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	3314      	adds	r3, #20
 8017b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b9c:	623a      	str	r2, [r7, #32]
 8017b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ba0:	69f9      	ldr	r1, [r7, #28]
 8017ba2:	6a3a      	ldr	r2, [r7, #32]
 8017ba4:	e841 2300 	strex	r3, r2, [r1]
 8017ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d1e5      	bne.n	8017b7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	2220      	movs	r2, #32
 8017bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	2220      	movs	r2, #32
 8017bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8017bc8:	2303      	movs	r3, #3
 8017bca:	e00f      	b.n	8017bec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	681a      	ldr	r2, [r3, #0]
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	4013      	ands	r3, r2
 8017bd6:	68ba      	ldr	r2, [r7, #8]
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	bf0c      	ite	eq
 8017bdc:	2301      	moveq	r3, #1
 8017bde:	2300      	movne	r3, #0
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	461a      	mov	r2, r3
 8017be4:	79fb      	ldrb	r3, [r7, #7]
 8017be6:	429a      	cmp	r2, r3
 8017be8:	d09f      	beq.n	8017b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017bea:	2300      	movs	r3, #0
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	3740      	adds	r7, #64	; 0x40
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}

08017bf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b085      	sub	sp, #20
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	60b9      	str	r1, [r7, #8]
 8017bfe:	4613      	mov	r3, r2
 8017c00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	68ba      	ldr	r2, [r7, #8]
 8017c06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	88fa      	ldrh	r2, [r7, #6]
 8017c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	88fa      	ldrh	r2, [r7, #6]
 8017c12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2200      	movs	r2, #0
 8017c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	2222      	movs	r2, #34	; 0x22
 8017c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	2200      	movs	r2, #0
 8017c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	68da      	ldr	r2, [r3, #12]
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	695a      	ldr	r2, [r3, #20]
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	f042 0201 	orr.w	r2, r2, #1
 8017c48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	68da      	ldr	r2, [r3, #12]
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	f042 0220 	orr.w	r2, r2, #32
 8017c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017c5a:	2300      	movs	r3, #0
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3714      	adds	r7, #20
 8017c60:	46bd      	mov	sp, r7
 8017c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c66:	4770      	bx	lr

08017c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b098      	sub	sp, #96	; 0x60
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	60f8      	str	r0, [r7, #12]
 8017c70:	60b9      	str	r1, [r7, #8]
 8017c72:	4613      	mov	r3, r2
 8017c74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8017c76:	68ba      	ldr	r2, [r7, #8]
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	88fa      	ldrh	r2, [r7, #6]
 8017c80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	2200      	movs	r2, #0
 8017c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	2222      	movs	r2, #34	; 0x22
 8017c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c94:	4a3e      	ldr	r2, [pc, #248]	; (8017d90 <UART_Start_Receive_DMA+0x128>)
 8017c96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c9c:	4a3d      	ldr	r2, [pc, #244]	; (8017d94 <UART_Start_Receive_DMA+0x12c>)
 8017c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ca4:	4a3c      	ldr	r2, [pc, #240]	; (8017d98 <UART_Start_Receive_DMA+0x130>)
 8017ca6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cac:	2200      	movs	r2, #0
 8017cae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8017cb0:	f107 0308 	add.w	r3, r7, #8
 8017cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	3304      	adds	r3, #4
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	88fb      	ldrh	r3, [r7, #6]
 8017cc8:	f7f0 fa13 	bl	80080f2 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8017ccc:	2300      	movs	r3, #0
 8017cce:	613b      	str	r3, [r7, #16]
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	613b      	str	r3, [r7, #16]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	685b      	ldr	r3, [r3, #4]
 8017cde:	613b      	str	r3, [r7, #16]
 8017ce0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	330c      	adds	r3, #12
 8017cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cf4:	e853 3f00 	ldrex	r3, [r3]
 8017cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	330c      	adds	r3, #12
 8017d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017d0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017d12:	e841 2300 	strex	r3, r2, [r1]
 8017d16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d1e5      	bne.n	8017cea <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	3314      	adds	r3, #20
 8017d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d28:	e853 3f00 	ldrex	r3, [r3]
 8017d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d30:	f043 0301 	orr.w	r3, r3, #1
 8017d34:	657b      	str	r3, [r7, #84]	; 0x54
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	3314      	adds	r3, #20
 8017d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017d3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8017d40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017d46:	e841 2300 	strex	r3, r2, [r1]
 8017d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d1e5      	bne.n	8017d1e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	3314      	adds	r3, #20
 8017d58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d5a:	69bb      	ldr	r3, [r7, #24]
 8017d5c:	e853 3f00 	ldrex	r3, [r3]
 8017d60:	617b      	str	r3, [r7, #20]
   return(result);
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d68:	653b      	str	r3, [r7, #80]	; 0x50
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	3314      	adds	r3, #20
 8017d70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d72:	627a      	str	r2, [r7, #36]	; 0x24
 8017d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d76:	6a39      	ldr	r1, [r7, #32]
 8017d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d7a:	e841 2300 	strex	r3, r2, [r1]
 8017d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d1e5      	bne.n	8017d52 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8017d86:	2300      	movs	r3, #0
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	3760      	adds	r7, #96	; 0x60
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}
 8017d90:	08017929 	.word	0x08017929
 8017d94:	08017a4f 	.word	0x08017a4f
 8017d98:	08017a85 	.word	0x08017a85

08017d9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017d9c:	b480      	push	{r7}
 8017d9e:	b089      	sub	sp, #36	; 0x24
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	330c      	adds	r3, #12
 8017daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	e853 3f00 	ldrex	r3, [r3]
 8017db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8017db4:	68bb      	ldr	r3, [r7, #8]
 8017db6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8017dba:	61fb      	str	r3, [r7, #28]
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	330c      	adds	r3, #12
 8017dc2:	69fa      	ldr	r2, [r7, #28]
 8017dc4:	61ba      	str	r2, [r7, #24]
 8017dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dc8:	6979      	ldr	r1, [r7, #20]
 8017dca:	69ba      	ldr	r2, [r7, #24]
 8017dcc:	e841 2300 	strex	r3, r2, [r1]
 8017dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d1e5      	bne.n	8017da4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2220      	movs	r2, #32
 8017ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8017de0:	bf00      	nop
 8017de2:	3724      	adds	r7, #36	; 0x24
 8017de4:	46bd      	mov	sp, r7
 8017de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dea:	4770      	bx	lr

08017dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017dec:	b480      	push	{r7}
 8017dee:	b095      	sub	sp, #84	; 0x54
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	330c      	adds	r3, #12
 8017dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dfe:	e853 3f00 	ldrex	r3, [r3]
 8017e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	330c      	adds	r3, #12
 8017e12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017e14:	643a      	str	r2, [r7, #64]	; 0x40
 8017e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e1c:	e841 2300 	strex	r3, r2, [r1]
 8017e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d1e5      	bne.n	8017df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	3314      	adds	r3, #20
 8017e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e30:	6a3b      	ldr	r3, [r7, #32]
 8017e32:	e853 3f00 	ldrex	r3, [r3]
 8017e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8017e38:	69fb      	ldr	r3, [r7, #28]
 8017e3a:	f023 0301 	bic.w	r3, r3, #1
 8017e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	3314      	adds	r3, #20
 8017e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e50:	e841 2300 	strex	r3, r2, [r1]
 8017e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d1e5      	bne.n	8017e28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d119      	bne.n	8017e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	330c      	adds	r3, #12
 8017e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	e853 3f00 	ldrex	r3, [r3]
 8017e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e74:	68bb      	ldr	r3, [r7, #8]
 8017e76:	f023 0310 	bic.w	r3, r3, #16
 8017e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	330c      	adds	r3, #12
 8017e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e84:	61ba      	str	r2, [r7, #24]
 8017e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e88:	6979      	ldr	r1, [r7, #20]
 8017e8a:	69ba      	ldr	r2, [r7, #24]
 8017e8c:	e841 2300 	strex	r3, r2, [r1]
 8017e90:	613b      	str	r3, [r7, #16]
   return(result);
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d1e5      	bne.n	8017e64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	2220      	movs	r2, #32
 8017e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017ea6:	bf00      	nop
 8017ea8:	3754      	adds	r7, #84	; 0x54
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b084      	sub	sp, #16
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ebe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2200      	movs	r2, #0
 8017eca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017ecc:	68f8      	ldr	r0, [r7, #12]
 8017ece:	f7ff fb56 	bl	801757e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ed2:	bf00      	nop
 8017ed4:	3710      	adds	r7, #16
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b084      	sub	sp, #16
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ee6:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eec:	2200      	movs	r2, #0
 8017eee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d004      	beq.n	8017f02 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d117      	bne.n	8017f32 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	2200      	movs	r2, #0
 8017f06:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2200      	movs	r2, #0
 8017f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	2220      	movs	r2, #32
 8017f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	2220      	movs	r2, #32
 8017f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	2200      	movs	r2, #0
 8017f28:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017f2a:	68f8      	ldr	r0, [r7, #12]
 8017f2c:	f7ff fb31 	bl	8017592 <HAL_UART_AbortCpltCallback>
 8017f30:	e000      	b.n	8017f34 <UART_DMATxAbortCallback+0x5a>
      return;
 8017f32:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f34:	3710      	adds	r7, #16
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b084      	sub	sp, #16
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f46:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d004      	beq.n	8017f62 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d117      	bne.n	8017f92 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	2200      	movs	r2, #0
 8017f66:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	2200      	movs	r2, #0
 8017f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2220      	movs	r2, #32
 8017f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	2220      	movs	r2, #32
 8017f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	2200      	movs	r2, #0
 8017f88:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017f8a:	68f8      	ldr	r0, [r7, #12]
 8017f8c:	f7ff fb01 	bl	8017592 <HAL_UART_AbortCpltCallback>
 8017f90:	e000      	b.n	8017f94 <UART_DMARxAbortCallback+0x5a>
      return;
 8017f92:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f94:	3710      	adds	r7, #16
 8017f96:	46bd      	mov	sp, r7
 8017f98:	bd80      	pop	{r7, pc}

08017f9a <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017f9a:	b580      	push	{r7, lr}
 8017f9c:	b084      	sub	sp, #16
 8017f9e:	af00      	add	r7, sp, #0
 8017fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa6:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	2200      	movs	r2, #0
 8017fac:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	2220      	movs	r2, #32
 8017fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8017fb6:	68f8      	ldr	r0, [r7, #12]
 8017fb8:	f7ff faf5 	bl	80175a6 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017fbc:	bf00      	nop
 8017fbe:	3710      	adds	r7, #16
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b084      	sub	sp, #16
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fd0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	2220      	movs	r2, #32
 8017fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8017fe6:	68f8      	ldr	r0, [r7, #12]
 8017fe8:	f7ff fae7 	bl	80175ba <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017fec:	bf00      	nop
 8017fee:	3710      	adds	r7, #16
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bd80      	pop	{r7, pc}

08017ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b085      	sub	sp, #20
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018002:	b2db      	uxtb	r3, r3
 8018004:	2b21      	cmp	r3, #33	; 0x21
 8018006:	d13e      	bne.n	8018086 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	689b      	ldr	r3, [r3, #8]
 801800c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018010:	d114      	bne.n	801803c <UART_Transmit_IT+0x48>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	691b      	ldr	r3, [r3, #16]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d110      	bne.n	801803c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	6a1b      	ldr	r3, [r3, #32]
 801801e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	881b      	ldrh	r3, [r3, #0]
 8018024:	461a      	mov	r2, r3
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801802e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6a1b      	ldr	r3, [r3, #32]
 8018034:	1c9a      	adds	r2, r3, #2
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	621a      	str	r2, [r3, #32]
 801803a:	e008      	b.n	801804e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6a1b      	ldr	r3, [r3, #32]
 8018040:	1c59      	adds	r1, r3, #1
 8018042:	687a      	ldr	r2, [r7, #4]
 8018044:	6211      	str	r1, [r2, #32]
 8018046:	781a      	ldrb	r2, [r3, #0]
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018052:	b29b      	uxth	r3, r3
 8018054:	3b01      	subs	r3, #1
 8018056:	b29b      	uxth	r3, r3
 8018058:	687a      	ldr	r2, [r7, #4]
 801805a:	4619      	mov	r1, r3
 801805c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801805e:	2b00      	cmp	r3, #0
 8018060:	d10f      	bne.n	8018082 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	68da      	ldr	r2, [r3, #12]
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018070:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	68da      	ldr	r2, [r3, #12]
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018080:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8018082:	2300      	movs	r3, #0
 8018084:	e000      	b.n	8018088 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8018086:	2302      	movs	r3, #2
  }
}
 8018088:	4618      	mov	r0, r3
 801808a:	3714      	adds	r7, #20
 801808c:	46bd      	mov	sp, r7
 801808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018092:	4770      	bx	lr

08018094 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b082      	sub	sp, #8
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	68da      	ldr	r2, [r3, #12]
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80180aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2220      	movs	r2, #32
 80180b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80180b4:	6878      	ldr	r0, [r7, #4]
 80180b6:	f7ff fa44 	bl	8017542 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80180ba:	2300      	movs	r3, #0
}
 80180bc:	4618      	mov	r0, r3
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}

080180c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b08c      	sub	sp, #48	; 0x30
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80180d2:	b2db      	uxtb	r3, r3
 80180d4:	2b22      	cmp	r3, #34	; 0x22
 80180d6:	f040 80ab 	bne.w	8018230 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	689b      	ldr	r3, [r3, #8]
 80180de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80180e2:	d117      	bne.n	8018114 <UART_Receive_IT+0x50>
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	691b      	ldr	r3, [r3, #16]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d113      	bne.n	8018114 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80180ec:	2300      	movs	r3, #0
 80180ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180f4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	685b      	ldr	r3, [r3, #4]
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018102:	b29a      	uxth	r2, r3
 8018104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018106:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801810c:	1c9a      	adds	r2, r3, #2
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	629a      	str	r2, [r3, #40]	; 0x28
 8018112:	e026      	b.n	8018162 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018118:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801811a:	2300      	movs	r3, #0
 801811c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	689b      	ldr	r3, [r3, #8]
 8018122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018126:	d007      	beq.n	8018138 <UART_Receive_IT+0x74>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	689b      	ldr	r3, [r3, #8]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d10a      	bne.n	8018146 <UART_Receive_IT+0x82>
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	691b      	ldr	r3, [r3, #16]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d106      	bne.n	8018146 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	685b      	ldr	r3, [r3, #4]
 801813e:	b2da      	uxtb	r2, r3
 8018140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018142:	701a      	strb	r2, [r3, #0]
 8018144:	e008      	b.n	8018158 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	685b      	ldr	r3, [r3, #4]
 801814c:	b2db      	uxtb	r3, r3
 801814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018152:	b2da      	uxtb	r2, r3
 8018154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018156:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801815c:	1c5a      	adds	r2, r3, #1
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018166:	b29b      	uxth	r3, r3
 8018168:	3b01      	subs	r3, #1
 801816a:	b29b      	uxth	r3, r3
 801816c:	687a      	ldr	r2, [r7, #4]
 801816e:	4619      	mov	r1, r3
 8018170:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8018172:	2b00      	cmp	r3, #0
 8018174:	d15a      	bne.n	801822c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	68da      	ldr	r2, [r3, #12]
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	f022 0220 	bic.w	r2, r2, #32
 8018184:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	68da      	ldr	r2, [r3, #12]
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018194:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	695a      	ldr	r2, [r3, #20]
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	f022 0201 	bic.w	r2, r2, #1
 80181a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	2220      	movs	r2, #32
 80181aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181b2:	2b01      	cmp	r3, #1
 80181b4:	d135      	bne.n	8018222 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2200      	movs	r2, #0
 80181ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	330c      	adds	r3, #12
 80181c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	e853 3f00 	ldrex	r3, [r3]
 80181ca:	613b      	str	r3, [r7, #16]
   return(result);
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	f023 0310 	bic.w	r3, r3, #16
 80181d2:	627b      	str	r3, [r7, #36]	; 0x24
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	330c      	adds	r3, #12
 80181da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181dc:	623a      	str	r2, [r7, #32]
 80181de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181e0:	69f9      	ldr	r1, [r7, #28]
 80181e2:	6a3a      	ldr	r2, [r7, #32]
 80181e4:	e841 2300 	strex	r3, r2, [r1]
 80181e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d1e5      	bne.n	80181bc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	f003 0310 	and.w	r3, r3, #16
 80181fa:	2b10      	cmp	r3, #16
 80181fc:	d10a      	bne.n	8018214 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80181fe:	2300      	movs	r3, #0
 8018200:	60fb      	str	r3, [r7, #12]
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	60fb      	str	r3, [r7, #12]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	60fb      	str	r3, [r7, #12]
 8018212:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018218:	4619      	mov	r1, r3
 801821a:	6878      	ldr	r0, [r7, #4]
 801821c:	f7ff f9d7 	bl	80175ce <HAL_UARTEx_RxEventCallback>
 8018220:	e002      	b.n	8018228 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018222:	6878      	ldr	r0, [r7, #4]
 8018224:	f7e9 fb70 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8018228:	2300      	movs	r3, #0
 801822a:	e002      	b.n	8018232 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801822c:	2300      	movs	r3, #0
 801822e:	e000      	b.n	8018232 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8018230:	2302      	movs	r3, #2
  }
}
 8018232:	4618      	mov	r0, r3
 8018234:	3730      	adds	r7, #48	; 0x30
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}

0801823a <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801823a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801823e:	b0c0      	sub	sp, #256	; 0x100
 8018240:	af00      	add	r7, sp, #0
 8018242:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	691b      	ldr	r3, [r3, #16]
 801824e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018256:	68d9      	ldr	r1, [r3, #12]
 8018258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801825c:	681a      	ldr	r2, [r3, #0]
 801825e:	ea40 0301 	orr.w	r3, r0, r1
 8018262:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018268:	689a      	ldr	r2, [r3, #8]
 801826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801826e:	691b      	ldr	r3, [r3, #16]
 8018270:	431a      	orrs	r2, r3
 8018272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018276:	695b      	ldr	r3, [r3, #20]
 8018278:	431a      	orrs	r2, r3
 801827a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801827e:	69db      	ldr	r3, [r3, #28]
 8018280:	4313      	orrs	r3, r2
 8018282:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8018286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	68db      	ldr	r3, [r3, #12]
 801828e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018292:	f021 010c 	bic.w	r1, r1, #12
 8018296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801829a:	681a      	ldr	r2, [r3, #0]
 801829c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80182a0:	430b      	orrs	r3, r1
 80182a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80182a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	695b      	ldr	r3, [r3, #20]
 80182ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80182b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182b4:	6999      	ldr	r1, [r3, #24]
 80182b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182ba:	681a      	ldr	r2, [r3, #0]
 80182bc:	ea40 0301 	orr.w	r3, r0, r1
 80182c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80182c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182c6:	681a      	ldr	r2, [r3, #0]
 80182c8:	4b8e      	ldr	r3, [pc, #568]	; (8018504 <UART_SetConfig+0x2ca>)
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d005      	beq.n	80182da <UART_SetConfig+0xa0>
 80182ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182d2:	681a      	ldr	r2, [r3, #0]
 80182d4:	4b8c      	ldr	r3, [pc, #560]	; (8018508 <UART_SetConfig+0x2ce>)
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d104      	bne.n	80182e4 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80182da:	f7fa fa11 	bl	8012700 <HAL_RCC_GetPCLK2Freq>
 80182de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80182e2:	e003      	b.n	80182ec <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80182e4:	f7fa f9f8 	bl	80126d8 <HAL_RCC_GetPCLK1Freq>
 80182e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80182ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182f0:	69db      	ldr	r3, [r3, #28]
 80182f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80182f6:	f040 810b 	bne.w	8018510 <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80182fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80182fe:	2200      	movs	r2, #0
 8018300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018304:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8018308:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801830c:	4622      	mov	r2, r4
 801830e:	462b      	mov	r3, r5
 8018310:	1891      	adds	r1, r2, r2
 8018312:	65b9      	str	r1, [r7, #88]	; 0x58
 8018314:	415b      	adcs	r3, r3
 8018316:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018318:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801831c:	4621      	mov	r1, r4
 801831e:	eb12 0801 	adds.w	r8, r2, r1
 8018322:	4629      	mov	r1, r5
 8018324:	eb43 0901 	adc.w	r9, r3, r1
 8018328:	f04f 0200 	mov.w	r2, #0
 801832c:	f04f 0300 	mov.w	r3, #0
 8018330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8018334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8018338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801833c:	4690      	mov	r8, r2
 801833e:	4699      	mov	r9, r3
 8018340:	4623      	mov	r3, r4
 8018342:	eb18 0303 	adds.w	r3, r8, r3
 8018346:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801834a:	462b      	mov	r3, r5
 801834c:	eb49 0303 	adc.w	r3, r9, r3
 8018350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	2200      	movs	r2, #0
 801835c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8018360:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8018364:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8018368:	460b      	mov	r3, r1
 801836a:	18db      	adds	r3, r3, r3
 801836c:	653b      	str	r3, [r7, #80]	; 0x50
 801836e:	4613      	mov	r3, r2
 8018370:	eb42 0303 	adc.w	r3, r2, r3
 8018374:	657b      	str	r3, [r7, #84]	; 0x54
 8018376:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801837a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801837e:	f001 fab9 	bl	80198f4 <__aeabi_uldivmod>
 8018382:	4602      	mov	r2, r0
 8018384:	460b      	mov	r3, r1
 8018386:	4b61      	ldr	r3, [pc, #388]	; (801850c <UART_SetConfig+0x2d2>)
 8018388:	fba3 2302 	umull	r2, r3, r3, r2
 801838c:	095b      	lsrs	r3, r3, #5
 801838e:	011c      	lsls	r4, r3, #4
 8018390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018394:	2200      	movs	r2, #0
 8018396:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801839a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801839e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80183a2:	4642      	mov	r2, r8
 80183a4:	464b      	mov	r3, r9
 80183a6:	1891      	adds	r1, r2, r2
 80183a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80183aa:	415b      	adcs	r3, r3
 80183ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80183ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80183b2:	4641      	mov	r1, r8
 80183b4:	eb12 0a01 	adds.w	sl, r2, r1
 80183b8:	4649      	mov	r1, r9
 80183ba:	eb43 0b01 	adc.w	fp, r3, r1
 80183be:	f04f 0200 	mov.w	r2, #0
 80183c2:	f04f 0300 	mov.w	r3, #0
 80183c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80183ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80183ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80183d2:	4692      	mov	sl, r2
 80183d4:	469b      	mov	fp, r3
 80183d6:	4643      	mov	r3, r8
 80183d8:	eb1a 0303 	adds.w	r3, sl, r3
 80183dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80183e0:	464b      	mov	r3, r9
 80183e2:	eb4b 0303 	adc.w	r3, fp, r3
 80183e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80183ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	2200      	movs	r2, #0
 80183f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80183f6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80183fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80183fe:	460b      	mov	r3, r1
 8018400:	18db      	adds	r3, r3, r3
 8018402:	643b      	str	r3, [r7, #64]	; 0x40
 8018404:	4613      	mov	r3, r2
 8018406:	eb42 0303 	adc.w	r3, r2, r3
 801840a:	647b      	str	r3, [r7, #68]	; 0x44
 801840c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018410:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018414:	f001 fa6e 	bl	80198f4 <__aeabi_uldivmod>
 8018418:	4602      	mov	r2, r0
 801841a:	460b      	mov	r3, r1
 801841c:	4611      	mov	r1, r2
 801841e:	4b3b      	ldr	r3, [pc, #236]	; (801850c <UART_SetConfig+0x2d2>)
 8018420:	fba3 2301 	umull	r2, r3, r3, r1
 8018424:	095b      	lsrs	r3, r3, #5
 8018426:	2264      	movs	r2, #100	; 0x64
 8018428:	fb02 f303 	mul.w	r3, r2, r3
 801842c:	1acb      	subs	r3, r1, r3
 801842e:	00db      	lsls	r3, r3, #3
 8018430:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8018434:	4b35      	ldr	r3, [pc, #212]	; (801850c <UART_SetConfig+0x2d2>)
 8018436:	fba3 2302 	umull	r2, r3, r3, r2
 801843a:	095b      	lsrs	r3, r3, #5
 801843c:	005b      	lsls	r3, r3, #1
 801843e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018442:	441c      	add	r4, r3
 8018444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018448:	2200      	movs	r2, #0
 801844a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801844e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018452:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8018456:	4642      	mov	r2, r8
 8018458:	464b      	mov	r3, r9
 801845a:	1891      	adds	r1, r2, r2
 801845c:	63b9      	str	r1, [r7, #56]	; 0x38
 801845e:	415b      	adcs	r3, r3
 8018460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018462:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018466:	4641      	mov	r1, r8
 8018468:	1851      	adds	r1, r2, r1
 801846a:	6339      	str	r1, [r7, #48]	; 0x30
 801846c:	4649      	mov	r1, r9
 801846e:	414b      	adcs	r3, r1
 8018470:	637b      	str	r3, [r7, #52]	; 0x34
 8018472:	f04f 0200 	mov.w	r2, #0
 8018476:	f04f 0300 	mov.w	r3, #0
 801847a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801847e:	4659      	mov	r1, fp
 8018480:	00cb      	lsls	r3, r1, #3
 8018482:	4651      	mov	r1, sl
 8018484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018488:	4651      	mov	r1, sl
 801848a:	00ca      	lsls	r2, r1, #3
 801848c:	4610      	mov	r0, r2
 801848e:	4619      	mov	r1, r3
 8018490:	4603      	mov	r3, r0
 8018492:	4642      	mov	r2, r8
 8018494:	189b      	adds	r3, r3, r2
 8018496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801849a:	464b      	mov	r3, r9
 801849c:	460a      	mov	r2, r1
 801849e:	eb42 0303 	adc.w	r3, r2, r3
 80184a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80184a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	2200      	movs	r2, #0
 80184ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80184b2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80184b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80184ba:	460b      	mov	r3, r1
 80184bc:	18db      	adds	r3, r3, r3
 80184be:	62bb      	str	r3, [r7, #40]	; 0x28
 80184c0:	4613      	mov	r3, r2
 80184c2:	eb42 0303 	adc.w	r3, r2, r3
 80184c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80184cc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80184d0:	f001 fa10 	bl	80198f4 <__aeabi_uldivmod>
 80184d4:	4602      	mov	r2, r0
 80184d6:	460b      	mov	r3, r1
 80184d8:	4b0c      	ldr	r3, [pc, #48]	; (801850c <UART_SetConfig+0x2d2>)
 80184da:	fba3 1302 	umull	r1, r3, r3, r2
 80184de:	095b      	lsrs	r3, r3, #5
 80184e0:	2164      	movs	r1, #100	; 0x64
 80184e2:	fb01 f303 	mul.w	r3, r1, r3
 80184e6:	1ad3      	subs	r3, r2, r3
 80184e8:	00db      	lsls	r3, r3, #3
 80184ea:	3332      	adds	r3, #50	; 0x32
 80184ec:	4a07      	ldr	r2, [pc, #28]	; (801850c <UART_SetConfig+0x2d2>)
 80184ee:	fba2 2303 	umull	r2, r3, r2, r3
 80184f2:	095b      	lsrs	r3, r3, #5
 80184f4:	f003 0207 	and.w	r2, r3, #7
 80184f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4422      	add	r2, r4
 8018500:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018502:	e104      	b.n	801870e <UART_SetConfig+0x4d4>
 8018504:	40011000 	.word	0x40011000
 8018508:	40011400 	.word	0x40011400
 801850c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018514:	2200      	movs	r2, #0
 8018516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801851a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801851e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8018522:	4642      	mov	r2, r8
 8018524:	464b      	mov	r3, r9
 8018526:	1891      	adds	r1, r2, r2
 8018528:	6239      	str	r1, [r7, #32]
 801852a:	415b      	adcs	r3, r3
 801852c:	627b      	str	r3, [r7, #36]	; 0x24
 801852e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018532:	4641      	mov	r1, r8
 8018534:	1854      	adds	r4, r2, r1
 8018536:	4649      	mov	r1, r9
 8018538:	eb43 0501 	adc.w	r5, r3, r1
 801853c:	f04f 0200 	mov.w	r2, #0
 8018540:	f04f 0300 	mov.w	r3, #0
 8018544:	00eb      	lsls	r3, r5, #3
 8018546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801854a:	00e2      	lsls	r2, r4, #3
 801854c:	4614      	mov	r4, r2
 801854e:	461d      	mov	r5, r3
 8018550:	4643      	mov	r3, r8
 8018552:	18e3      	adds	r3, r4, r3
 8018554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018558:	464b      	mov	r3, r9
 801855a:	eb45 0303 	adc.w	r3, r5, r3
 801855e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	2200      	movs	r2, #0
 801856a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801856e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018572:	f04f 0200 	mov.w	r2, #0
 8018576:	f04f 0300 	mov.w	r3, #0
 801857a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801857e:	4629      	mov	r1, r5
 8018580:	008b      	lsls	r3, r1, #2
 8018582:	4621      	mov	r1, r4
 8018584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018588:	4621      	mov	r1, r4
 801858a:	008a      	lsls	r2, r1, #2
 801858c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8018590:	f001 f9b0 	bl	80198f4 <__aeabi_uldivmod>
 8018594:	4602      	mov	r2, r0
 8018596:	460b      	mov	r3, r1
 8018598:	4b60      	ldr	r3, [pc, #384]	; (801871c <UART_SetConfig+0x4e2>)
 801859a:	fba3 2302 	umull	r2, r3, r3, r2
 801859e:	095b      	lsrs	r3, r3, #5
 80185a0:	011c      	lsls	r4, r3, #4
 80185a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80185a6:	2200      	movs	r2, #0
 80185a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80185ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80185b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80185b4:	4642      	mov	r2, r8
 80185b6:	464b      	mov	r3, r9
 80185b8:	1891      	adds	r1, r2, r2
 80185ba:	61b9      	str	r1, [r7, #24]
 80185bc:	415b      	adcs	r3, r3
 80185be:	61fb      	str	r3, [r7, #28]
 80185c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80185c4:	4641      	mov	r1, r8
 80185c6:	1851      	adds	r1, r2, r1
 80185c8:	6139      	str	r1, [r7, #16]
 80185ca:	4649      	mov	r1, r9
 80185cc:	414b      	adcs	r3, r1
 80185ce:	617b      	str	r3, [r7, #20]
 80185d0:	f04f 0200 	mov.w	r2, #0
 80185d4:	f04f 0300 	mov.w	r3, #0
 80185d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80185dc:	4659      	mov	r1, fp
 80185de:	00cb      	lsls	r3, r1, #3
 80185e0:	4651      	mov	r1, sl
 80185e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80185e6:	4651      	mov	r1, sl
 80185e8:	00ca      	lsls	r2, r1, #3
 80185ea:	4610      	mov	r0, r2
 80185ec:	4619      	mov	r1, r3
 80185ee:	4603      	mov	r3, r0
 80185f0:	4642      	mov	r2, r8
 80185f2:	189b      	adds	r3, r3, r2
 80185f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80185f8:	464b      	mov	r3, r9
 80185fa:	460a      	mov	r2, r1
 80185fc:	eb42 0303 	adc.w	r3, r2, r3
 8018600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018608:	685b      	ldr	r3, [r3, #4]
 801860a:	2200      	movs	r2, #0
 801860c:	67bb      	str	r3, [r7, #120]	; 0x78
 801860e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018610:	f04f 0200 	mov.w	r2, #0
 8018614:	f04f 0300 	mov.w	r3, #0
 8018618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801861c:	4649      	mov	r1, r9
 801861e:	008b      	lsls	r3, r1, #2
 8018620:	4641      	mov	r1, r8
 8018622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018626:	4641      	mov	r1, r8
 8018628:	008a      	lsls	r2, r1, #2
 801862a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801862e:	f001 f961 	bl	80198f4 <__aeabi_uldivmod>
 8018632:	4602      	mov	r2, r0
 8018634:	460b      	mov	r3, r1
 8018636:	4b39      	ldr	r3, [pc, #228]	; (801871c <UART_SetConfig+0x4e2>)
 8018638:	fba3 1302 	umull	r1, r3, r3, r2
 801863c:	095b      	lsrs	r3, r3, #5
 801863e:	2164      	movs	r1, #100	; 0x64
 8018640:	fb01 f303 	mul.w	r3, r1, r3
 8018644:	1ad3      	subs	r3, r2, r3
 8018646:	011b      	lsls	r3, r3, #4
 8018648:	3332      	adds	r3, #50	; 0x32
 801864a:	4a34      	ldr	r2, [pc, #208]	; (801871c <UART_SetConfig+0x4e2>)
 801864c:	fba2 2303 	umull	r2, r3, r2, r3
 8018650:	095b      	lsrs	r3, r3, #5
 8018652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018656:	441c      	add	r4, r3
 8018658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801865c:	2200      	movs	r2, #0
 801865e:	673b      	str	r3, [r7, #112]	; 0x70
 8018660:	677a      	str	r2, [r7, #116]	; 0x74
 8018662:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8018666:	4642      	mov	r2, r8
 8018668:	464b      	mov	r3, r9
 801866a:	1891      	adds	r1, r2, r2
 801866c:	60b9      	str	r1, [r7, #8]
 801866e:	415b      	adcs	r3, r3
 8018670:	60fb      	str	r3, [r7, #12]
 8018672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018676:	4641      	mov	r1, r8
 8018678:	1851      	adds	r1, r2, r1
 801867a:	6039      	str	r1, [r7, #0]
 801867c:	4649      	mov	r1, r9
 801867e:	414b      	adcs	r3, r1
 8018680:	607b      	str	r3, [r7, #4]
 8018682:	f04f 0200 	mov.w	r2, #0
 8018686:	f04f 0300 	mov.w	r3, #0
 801868a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801868e:	4659      	mov	r1, fp
 8018690:	00cb      	lsls	r3, r1, #3
 8018692:	4651      	mov	r1, sl
 8018694:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018698:	4651      	mov	r1, sl
 801869a:	00ca      	lsls	r2, r1, #3
 801869c:	4610      	mov	r0, r2
 801869e:	4619      	mov	r1, r3
 80186a0:	4603      	mov	r3, r0
 80186a2:	4642      	mov	r2, r8
 80186a4:	189b      	adds	r3, r3, r2
 80186a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80186a8:	464b      	mov	r3, r9
 80186aa:	460a      	mov	r2, r1
 80186ac:	eb42 0303 	adc.w	r3, r2, r3
 80186b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80186b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186b6:	685b      	ldr	r3, [r3, #4]
 80186b8:	2200      	movs	r2, #0
 80186ba:	663b      	str	r3, [r7, #96]	; 0x60
 80186bc:	667a      	str	r2, [r7, #100]	; 0x64
 80186be:	f04f 0200 	mov.w	r2, #0
 80186c2:	f04f 0300 	mov.w	r3, #0
 80186c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80186ca:	4649      	mov	r1, r9
 80186cc:	008b      	lsls	r3, r1, #2
 80186ce:	4641      	mov	r1, r8
 80186d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80186d4:	4641      	mov	r1, r8
 80186d6:	008a      	lsls	r2, r1, #2
 80186d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80186dc:	f001 f90a 	bl	80198f4 <__aeabi_uldivmod>
 80186e0:	4602      	mov	r2, r0
 80186e2:	460b      	mov	r3, r1
 80186e4:	4b0d      	ldr	r3, [pc, #52]	; (801871c <UART_SetConfig+0x4e2>)
 80186e6:	fba3 1302 	umull	r1, r3, r3, r2
 80186ea:	095b      	lsrs	r3, r3, #5
 80186ec:	2164      	movs	r1, #100	; 0x64
 80186ee:	fb01 f303 	mul.w	r3, r1, r3
 80186f2:	1ad3      	subs	r3, r2, r3
 80186f4:	011b      	lsls	r3, r3, #4
 80186f6:	3332      	adds	r3, #50	; 0x32
 80186f8:	4a08      	ldr	r2, [pc, #32]	; (801871c <UART_SetConfig+0x4e2>)
 80186fa:	fba2 2303 	umull	r2, r3, r2, r3
 80186fe:	095b      	lsrs	r3, r3, #5
 8018700:	f003 020f 	and.w	r2, r3, #15
 8018704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	4422      	add	r2, r4
 801870c:	609a      	str	r2, [r3, #8]
}
 801870e:	bf00      	nop
 8018710:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018714:	46bd      	mov	sp, r7
 8018716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801871a:	bf00      	nop
 801871c:	51eb851f 	.word	0x51eb851f

08018720 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8018720:	b480      	push	{r7}
 8018722:	b085      	sub	sp, #20
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
 8018728:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801872a:	2300      	movs	r3, #0
 801872c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018738:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 801873a:	68fa      	ldr	r2, [r7, #12]
 801873c:	4b20      	ldr	r3, [pc, #128]	; (80187c0 <FSMC_NORSRAM_Init+0xa0>)
 801873e:	4013      	ands	r3, r2
 8018740:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018742:	683b      	ldr	r3, [r7, #0]
 8018744:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801874a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8018750:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8018756:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 801875c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8018762:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8018768:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 801876a:	683b      	ldr	r3, [r7, #0]
 801876c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 801876e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8018774:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 801877a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8018780:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8018782:	683b      	ldr	r3, [r7, #0]
 8018784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8018786:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 801878c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801878e:	68fa      	ldr	r2, [r7, #12]
 8018790:	4313      	orrs	r3, r2
 8018792:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	689b      	ldr	r3, [r3, #8]
 8018798:	2b08      	cmp	r3, #8
 801879a:	d103      	bne.n	80187a4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187a2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80187a4:	683b      	ldr	r3, [r7, #0]
 80187a6:	681a      	ldr	r2, [r3, #0]
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	68f9      	ldr	r1, [r7, #12]
 80187ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80187b0:	2300      	movs	r3, #0
}
 80187b2:	4618      	mov	r0, r3
 80187b4:	3714      	adds	r7, #20
 80187b6:	46bd      	mov	sp, r7
 80187b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187bc:	4770      	bx	lr
 80187be:	bf00      	nop
 80187c0:	fff00080 	.word	0xfff00080

080187c4 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 80187c4:	b480      	push	{r7}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	60f8      	str	r0, [r7, #12]
 80187cc:	60b9      	str	r1, [r7, #8]
 80187ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	687a      	ldr	r2, [r7, #4]
 80187d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187d8:	f023 0101 	bic.w	r1, r3, #1
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	687a      	ldr	r2, [r7, #4]
 80187e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d106      	bne.n	80187f8 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	f243 01db 	movw	r1, #12507	; 0x30db
 80187f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80187f6:	e005      	b.n	8018804 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	687a      	ldr	r2, [r7, #4]
 80187fc:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8018800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	1c5a      	adds	r2, r3, #1
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801880e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801881a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 801881e:	2300      	movs	r3, #0
}
 8018820:	4618      	mov	r0, r3
 8018822:	3714      	adds	r7, #20
 8018824:	46bd      	mov	sp, r7
 8018826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882a:	4770      	bx	lr

0801882c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801882c:	b480      	push	{r7}
 801882e:	b087      	sub	sp, #28
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018838:	2300      	movs	r3, #0
 801883a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	1c5a      	adds	r2, r3, #1
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018846:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801884e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018854:	68bb      	ldr	r3, [r7, #8]
 8018856:	685b      	ldr	r3, [r3, #4]
 8018858:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801885a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	689b      	ldr	r3, [r3, #8]
 8018860:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018862:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018864:	68bb      	ldr	r3, [r7, #8]
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 801886a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	691b      	ldr	r3, [r3, #16]
 8018870:	3b01      	subs	r3, #1
 8018872:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018874:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8018876:	68bb      	ldr	r3, [r7, #8]
 8018878:	695b      	ldr	r3, [r3, #20]
 801887a:	3b02      	subs	r3, #2
 801887c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 801887e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8018880:	68bb      	ldr	r3, [r7, #8]
 8018882:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018884:	4313      	orrs	r3, r2
 8018886:	697a      	ldr	r2, [r7, #20]
 8018888:	4313      	orrs	r3, r2
 801888a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	1c5a      	adds	r2, r3, #1
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	6979      	ldr	r1, [r7, #20]
 8018894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8018898:	2300      	movs	r3, #0
}
 801889a:	4618      	mov	r0, r3
 801889c:	371c      	adds	r7, #28
 801889e:	46bd      	mov	sp, r7
 80188a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a4:	4770      	bx	lr

080188a6 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80188a6:	b480      	push	{r7}
 80188a8:	b087      	sub	sp, #28
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	60f8      	str	r0, [r7, #12]
 80188ae:	60b9      	str	r1, [r7, #8]
 80188b0:	607a      	str	r2, [r7, #4]
 80188b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80188b4:	2300      	movs	r3, #0
 80188b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80188be:	d122      	bne.n	8018906 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188c8:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80188ca:	697a      	ldr	r2, [r7, #20]
 80188cc:	4b14      	ldr	r3, [pc, #80]	; (8018920 <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 80188ce:	4013      	ands	r3, r2
 80188d0:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80188d2:	68bb      	ldr	r3, [r7, #8]
 80188d4:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	685b      	ldr	r3, [r3, #4]
 80188da:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80188dc:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	689b      	ldr	r3, [r3, #8]
 80188e2:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80188e4:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80188e6:	68bb      	ldr	r3, [r7, #8]
 80188e8:	68db      	ldr	r3, [r3, #12]
 80188ea:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80188ec:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80188f2:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80188f4:	697a      	ldr	r2, [r7, #20]
 80188f6:	4313      	orrs	r3, r2
 80188f8:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	6979      	ldr	r1, [r7, #20]
 8018900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018904:	e005      	b.n	8018912 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801890e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8018912:	2300      	movs	r3, #0
}
 8018914:	4618      	mov	r0, r3
 8018916:	371c      	adds	r7, #28
 8018918:	46bd      	mov	sp, r7
 801891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891e:	4770      	bx	lr
 8018920:	cff00000 	.word	0xcff00000

08018924 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018924:	b480      	push	{r7}
 8018926:	b083      	sub	sp, #12
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
 801892c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	683a      	ldr	r2, [r7, #0]
 8018932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018936:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	683a      	ldr	r2, [r7, #0]
 801893e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018942:	2300      	movs	r3, #0
}
 8018944:	4618      	mov	r0, r3
 8018946:	370c      	adds	r7, #12
 8018948:	46bd      	mov	sp, r7
 801894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801894e:	4770      	bx	lr

08018950 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018950:	b480      	push	{r7}
 8018952:	b083      	sub	sp, #12
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
 8018958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	683a      	ldr	r2, [r7, #0]
 801895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	683a      	ldr	r2, [r7, #0]
 801896a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801896e:	2300      	movs	r3, #0
}
 8018970:	4618      	mov	r0, r3
 8018972:	370c      	adds	r7, #12
 8018974:	46bd      	mov	sp, r7
 8018976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897a:	4770      	bx	lr

0801897c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 801897c:	b480      	push	{r7}
 801897e:	b085      	sub	sp, #20
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
 8018984:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8018986:	2300      	movs	r3, #0
 8018988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	2b10      	cmp	r3, #16
 8018990:	d103      	bne.n	801899a <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	60fb      	str	r3, [r7, #12]
 8018998:	e002      	b.n	80189a0 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	6a1b      	ldr	r3, [r3, #32]
 801899e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80189a0:	68fa      	ldr	r2, [r7, #12]
 80189a2:	4b16      	ldr	r3, [pc, #88]	; (80189fc <FSMC_NAND_Init+0x80>)
 80189a4:	4013      	ands	r3, r2
 80189a6:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80189b0:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80189b6:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80189bc:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80189be:	683b      	ldr	r3, [r7, #0]
 80189c0:	695b      	ldr	r3, [r3, #20]
 80189c2:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80189c4:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80189c6:	683b      	ldr	r3, [r7, #0]
 80189c8:	699b      	ldr	r3, [r3, #24]
 80189ca:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80189cc:	431a      	orrs	r2, r3
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	4313      	orrs	r3, r2
 80189d2:	f043 0308 	orr.w	r3, r3, #8
 80189d6:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	2b10      	cmp	r3, #16
 80189de:	d103      	bne.n	80189e8 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	68fa      	ldr	r2, [r7, #12]
 80189e4:	601a      	str	r2, [r3, #0]
 80189e6:	e002      	b.n	80189ee <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	68fa      	ldr	r2, [r7, #12]
 80189ec:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80189ee:	2300      	movs	r3, #0
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3714      	adds	r7, #20
 80189f4:	46bd      	mov	sp, r7
 80189f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fa:	4770      	bx	lr
 80189fc:	fff00181 	.word	0xfff00181

08018a00 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018a00:	b480      	push	{r7}
 8018a02:	b087      	sub	sp, #28
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	60b9      	str	r1, [r7, #8]
 8018a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	2b10      	cmp	r3, #16
 8018a14:	d103      	bne.n	8018a1e <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	689b      	ldr	r3, [r3, #8]
 8018a1a:	617b      	str	r3, [r7, #20]
 8018a1c:	e002      	b.n	8018a24 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a22:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018a24:	2300      	movs	r3, #0
 8018a26:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	685b      	ldr	r3, [r3, #4]
 8018a30:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018a32:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	689b      	ldr	r3, [r3, #8]
 8018a38:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018a3a:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	68db      	ldr	r3, [r3, #12]
 8018a40:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018a42:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018a44:	697a      	ldr	r2, [r7, #20]
 8018a46:	4313      	orrs	r3, r2
 8018a48:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	2b10      	cmp	r3, #16
 8018a4e:	d103      	bne.n	8018a58 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	697a      	ldr	r2, [r7, #20]
 8018a54:	609a      	str	r2, [r3, #8]
 8018a56:	e002      	b.n	8018a5e <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	697a      	ldr	r2, [r7, #20]
 8018a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8018a5e:	2300      	movs	r3, #0
}
 8018a60:	4618      	mov	r0, r3
 8018a62:	371c      	adds	r7, #28
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b087      	sub	sp, #28
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018a78:	2300      	movs	r3, #0
 8018a7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	2b10      	cmp	r3, #16
 8018a80:	d103      	bne.n	8018a8a <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	617b      	str	r3, [r7, #20]
 8018a88:	e002      	b.n	8018a90 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a8e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8018a90:	2300      	movs	r3, #0
 8018a92:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018a94:	68bb      	ldr	r3, [r7, #8]
 8018a96:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018a9e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	689b      	ldr	r3, [r3, #8]
 8018aa4:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018aa6:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018aae:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018ab0:	697a      	ldr	r2, [r7, #20]
 8018ab2:	4313      	orrs	r3, r2
 8018ab4:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	2b10      	cmp	r3, #16
 8018aba:	d103      	bne.n	8018ac4 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	697a      	ldr	r2, [r7, #20]
 8018ac0:	60da      	str	r2, [r3, #12]
 8018ac2:	e002      	b.n	8018aca <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	697a      	ldr	r2, [r7, #20]
 8018ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8018aca:	2300      	movs	r3, #0
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	371c      	adds	r7, #28
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018ad8:	b480      	push	{r7}
 8018ada:	b083      	sub	sp, #12
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	2b10      	cmp	r3, #16
 8018ae6:	d106      	bne.n	8018af6 <FSMC_NAND_DeInit+0x1e>
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	f023 0204 	bic.w	r2, r3, #4
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	601a      	str	r2, [r3, #0]
 8018af4:	e005      	b.n	8018b02 <FSMC_NAND_DeInit+0x2a>
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	6a1b      	ldr	r3, [r3, #32]
 8018afa:	f023 0204 	bic.w	r2, r3, #4
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	2b10      	cmp	r3, #16
 8018b06:	d10e      	bne.n	8018b26 <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2218      	movs	r2, #24
 8018b0c:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2240      	movs	r2, #64	; 0x40
 8018b12:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018b1a:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018b22:	60da      	str	r2, [r3, #12]
 8018b24:	e00d      	b.n	8018b42 <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2218      	movs	r2, #24
 8018b2a:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	2240      	movs	r2, #64	; 0x40
 8018b30:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018b38:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018b40:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 8018b42:	2300      	movs	r3, #0
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	370c      	adds	r7, #12
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr

08018b50 <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018b50:	b480      	push	{r7}
 8018b52:	b083      	sub	sp, #12
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	2b10      	cmp	r3, #16
 8018b5e:	d106      	bne.n	8018b6e <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	601a      	str	r2, [r3, #0]
 8018b6c:	e005      	b.n	8018b7a <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6a1b      	ldr	r3, [r3, #32]
 8018b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 8018b7a:	2300      	movs	r3, #0
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	370c      	adds	r7, #12
 8018b80:	46bd      	mov	sp, r7
 8018b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b86:	4770      	bx	lr

08018b88 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 8018b88:	b480      	push	{r7}
 8018b8a:	b083      	sub	sp, #12
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
 8018b90:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	2b10      	cmp	r3, #16
 8018b96:	d106      	bne.n	8018ba6 <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	601a      	str	r2, [r3, #0]
 8018ba4:	e005      	b.n	8018bb2 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6a1b      	ldr	r3, [r3, #32]
 8018baa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 8018bb2:	2300      	movs	r3, #0
}
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	370c      	adds	r7, #12
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbe:	4770      	bx	lr

08018bc0 <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b086      	sub	sp, #24
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	60f8      	str	r0, [r7, #12]
 8018bc8:	60b9      	str	r1, [r7, #8]
 8018bca:	607a      	str	r2, [r7, #4]
 8018bcc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8018bd2:	f7ee f825 	bl	8006c20 <HAL_GetTick>
 8018bd6:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018bd8:	e010      	b.n	8018bfc <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018be0:	d00c      	beq.n	8018bfc <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d007      	beq.n	8018bf8 <FSMC_NAND_GetECC+0x38>
 8018be8:	f7ee f81a 	bl	8006c20 <HAL_GetTick>
 8018bec:	4602      	mov	r2, r0
 8018bee:	697b      	ldr	r3, [r7, #20]
 8018bf0:	1ad3      	subs	r3, r2, r3
 8018bf2:	683a      	ldr	r2, [r7, #0]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d201      	bcs.n	8018bfc <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018bf8:	2303      	movs	r3, #3
 8018bfa:	e024      	b.n	8018c46 <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	2b10      	cmp	r3, #16
 8018c00:	d109      	bne.n	8018c16 <FSMC_NAND_GetECC+0x56>
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	685b      	ldr	r3, [r3, #4]
 8018c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c0a:	2b40      	cmp	r3, #64	; 0x40
 8018c0c:	bf14      	ite	ne
 8018c0e:	2301      	movne	r3, #1
 8018c10:	2300      	moveq	r3, #0
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	e008      	b.n	8018c28 <FSMC_NAND_GetECC+0x68>
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c1e:	2b40      	cmp	r3, #64	; 0x40
 8018c20:	bf14      	ite	ne
 8018c22:	2301      	movne	r3, #1
 8018c24:	2300      	moveq	r3, #0
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d1d6      	bne.n	8018bda <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	2b10      	cmp	r3, #16
 8018c30:	d104      	bne.n	8018c3c <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	695a      	ldr	r2, [r3, #20]
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	601a      	str	r2, [r3, #0]
 8018c3a:	e003      	b.n	8018c44 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018c44:	2300      	movs	r3, #0
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3718      	adds	r7, #24
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}

08018c4e <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 8018c4e:	b480      	push	{r7}
 8018c50:	b085      	sub	sp, #20
 8018c52:	af00      	add	r7, sp, #0
 8018c54:	6078      	str	r0, [r7, #4]
 8018c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8018c68:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018c6c:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 8018c78:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	689b      	ldr	r3, [r3, #8]
 8018c7e:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018c80:	431a      	orrs	r2, r3
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	4313      	orrs	r3, r2
 8018c86:	f043 0310 	orr.w	r3, r3, #16
 8018c8a:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	68fa      	ldr	r2, [r7, #12]
 8018c90:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8018c92:	2300      	movs	r3, #0
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3714      	adds	r7, #20
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b085      	sub	sp, #20
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
 8018ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018caa:	2300      	movs	r3, #0
 8018cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	689b      	ldr	r3, [r3, #8]
 8018cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	685b      	ldr	r3, [r3, #4]
 8018cc0:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018cc2:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	689b      	ldr	r3, [r3, #8]
 8018cc8:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018cca:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	68db      	ldr	r3, [r3, #12]
 8018cd0:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 8018cd2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018cd4:	68fa      	ldr	r2, [r7, #12]
 8018cd6:	4313      	orrs	r3, r2
 8018cd8:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	68fa      	ldr	r2, [r7, #12]
 8018cde:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 8018ce0:	2300      	movs	r3, #0
}
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	3714      	adds	r7, #20
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cec:	4770      	bx	lr

08018cee <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018cee:	b480      	push	{r7}
 8018cf0:	b085      	sub	sp, #20
 8018cf2:	af00      	add	r7, sp, #0
 8018cf4:	6078      	str	r0, [r7, #4]
 8018cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	68db      	ldr	r3, [r3, #12]
 8018d00:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 8018d02:	2300      	movs	r3, #0
 8018d04:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018d0a:	683b      	ldr	r3, [r7, #0]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018d10:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	689b      	ldr	r3, [r3, #8]
 8018d16:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018d18:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	68db      	ldr	r3, [r3, #12]
 8018d1e:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 8018d20:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018d22:	68fa      	ldr	r2, [r7, #12]
 8018d24:	4313      	orrs	r3, r2
 8018d26:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	68fa      	ldr	r2, [r7, #12]
 8018d2c:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 8018d2e:	2300      	movs	r3, #0
}
 8018d30:	4618      	mov	r0, r3
 8018d32:	3714      	adds	r7, #20
 8018d34:	46bd      	mov	sp, r7
 8018d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3a:	4770      	bx	lr

08018d3c <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018d3c:	b480      	push	{r7}
 8018d3e:	b085      	sub	sp, #20
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018d46:	2300      	movs	r3, #0
 8018d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	691b      	ldr	r3, [r3, #16]
 8018d4e:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 8018d50:	2300      	movs	r3, #0
 8018d52:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018d58:	683b      	ldr	r3, [r7, #0]
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018d5e:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	689b      	ldr	r3, [r3, #8]
 8018d64:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018d66:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	68db      	ldr	r3, [r3, #12]
 8018d6c:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018d6e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018d70:	68fa      	ldr	r2, [r7, #12]
 8018d72:	4313      	orrs	r3, r2
 8018d74:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018d7c:	2300      	movs	r3, #0
}
 8018d7e:	4618      	mov	r0, r3
 8018d80:	3714      	adds	r7, #20
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr

08018d8a <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 8018d8a:	b480      	push	{r7}
 8018d8c:	b083      	sub	sp, #12
 8018d8e:	af00      	add	r7, sp, #0
 8018d90:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	f023 0204 	bic.w	r2, r3, #4
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	2218      	movs	r2, #24
 8018da2:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	2200      	movs	r2, #0
 8018da8:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018db0:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018db8:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018dc0:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018dc2:	2300      	movs	r3, #0
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	370c      	adds	r7, #12
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dce:	4770      	bx	lr

08018dd0 <strlen>:
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018dd6:	2a00      	cmp	r2, #0
 8018dd8:	d1fb      	bne.n	8018dd2 <strlen+0x2>
 8018dda:	1a18      	subs	r0, r3, r0
 8018ddc:	3801      	subs	r0, #1
 8018dde:	4770      	bx	lr

08018de0 <memchr>:
 8018de0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018de4:	2a10      	cmp	r2, #16
 8018de6:	db2b      	blt.n	8018e40 <memchr+0x60>
 8018de8:	f010 0f07 	tst.w	r0, #7
 8018dec:	d008      	beq.n	8018e00 <memchr+0x20>
 8018dee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018df2:	3a01      	subs	r2, #1
 8018df4:	428b      	cmp	r3, r1
 8018df6:	d02d      	beq.n	8018e54 <memchr+0x74>
 8018df8:	f010 0f07 	tst.w	r0, #7
 8018dfc:	b342      	cbz	r2, 8018e50 <memchr+0x70>
 8018dfe:	d1f6      	bne.n	8018dee <memchr+0xe>
 8018e00:	b4f0      	push	{r4, r5, r6, r7}
 8018e02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018e06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8018e0a:	f022 0407 	bic.w	r4, r2, #7
 8018e0e:	f07f 0700 	mvns.w	r7, #0
 8018e12:	2300      	movs	r3, #0
 8018e14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018e18:	3c08      	subs	r4, #8
 8018e1a:	ea85 0501 	eor.w	r5, r5, r1
 8018e1e:	ea86 0601 	eor.w	r6, r6, r1
 8018e22:	fa85 f547 	uadd8	r5, r5, r7
 8018e26:	faa3 f587 	sel	r5, r3, r7
 8018e2a:	fa86 f647 	uadd8	r6, r6, r7
 8018e2e:	faa5 f687 	sel	r6, r5, r7
 8018e32:	b98e      	cbnz	r6, 8018e58 <memchr+0x78>
 8018e34:	d1ee      	bne.n	8018e14 <memchr+0x34>
 8018e36:	bcf0      	pop	{r4, r5, r6, r7}
 8018e38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018e3c:	f002 0207 	and.w	r2, r2, #7
 8018e40:	b132      	cbz	r2, 8018e50 <memchr+0x70>
 8018e42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018e46:	3a01      	subs	r2, #1
 8018e48:	ea83 0301 	eor.w	r3, r3, r1
 8018e4c:	b113      	cbz	r3, 8018e54 <memchr+0x74>
 8018e4e:	d1f8      	bne.n	8018e42 <memchr+0x62>
 8018e50:	2000      	movs	r0, #0
 8018e52:	4770      	bx	lr
 8018e54:	3801      	subs	r0, #1
 8018e56:	4770      	bx	lr
 8018e58:	2d00      	cmp	r5, #0
 8018e5a:	bf06      	itte	eq
 8018e5c:	4635      	moveq	r5, r6
 8018e5e:	3803      	subeq	r0, #3
 8018e60:	3807      	subne	r0, #7
 8018e62:	f015 0f01 	tst.w	r5, #1
 8018e66:	d107      	bne.n	8018e78 <memchr+0x98>
 8018e68:	3001      	adds	r0, #1
 8018e6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8018e6e:	bf02      	ittt	eq
 8018e70:	3001      	addeq	r0, #1
 8018e72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018e76:	3001      	addeq	r0, #1
 8018e78:	bcf0      	pop	{r4, r5, r6, r7}
 8018e7a:	3801      	subs	r0, #1
 8018e7c:	4770      	bx	lr
 8018e7e:	bf00      	nop

08018e80 <__aeabi_drsub>:
 8018e80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018e84:	e002      	b.n	8018e8c <__adddf3>
 8018e86:	bf00      	nop

08018e88 <__aeabi_dsub>:
 8018e88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08018e8c <__adddf3>:
 8018e8c:	b530      	push	{r4, r5, lr}
 8018e8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018e92:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018e96:	ea94 0f05 	teq	r4, r5
 8018e9a:	bf08      	it	eq
 8018e9c:	ea90 0f02 	teqeq	r0, r2
 8018ea0:	bf1f      	itttt	ne
 8018ea2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018ea6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8018eaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8018eae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018eb2:	f000 80e2 	beq.w	801907a <__adddf3+0x1ee>
 8018eb6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8018eba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8018ebe:	bfb8      	it	lt
 8018ec0:	426d      	neglt	r5, r5
 8018ec2:	dd0c      	ble.n	8018ede <__adddf3+0x52>
 8018ec4:	442c      	add	r4, r5
 8018ec6:	ea80 0202 	eor.w	r2, r0, r2
 8018eca:	ea81 0303 	eor.w	r3, r1, r3
 8018ece:	ea82 0000 	eor.w	r0, r2, r0
 8018ed2:	ea83 0101 	eor.w	r1, r3, r1
 8018ed6:	ea80 0202 	eor.w	r2, r0, r2
 8018eda:	ea81 0303 	eor.w	r3, r1, r3
 8018ede:	2d36      	cmp	r5, #54	; 0x36
 8018ee0:	bf88      	it	hi
 8018ee2:	bd30      	pophi	{r4, r5, pc}
 8018ee4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018ee8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018eec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018ef0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018ef4:	d002      	beq.n	8018efc <__adddf3+0x70>
 8018ef6:	4240      	negs	r0, r0
 8018ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018efc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018f04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018f08:	d002      	beq.n	8018f10 <__adddf3+0x84>
 8018f0a:	4252      	negs	r2, r2
 8018f0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018f10:	ea94 0f05 	teq	r4, r5
 8018f14:	f000 80a7 	beq.w	8019066 <__adddf3+0x1da>
 8018f18:	f1a4 0401 	sub.w	r4, r4, #1
 8018f1c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018f20:	db0d      	blt.n	8018f3e <__adddf3+0xb2>
 8018f22:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018f26:	fa22 f205 	lsr.w	r2, r2, r5
 8018f2a:	1880      	adds	r0, r0, r2
 8018f2c:	f141 0100 	adc.w	r1, r1, #0
 8018f30:	fa03 f20e 	lsl.w	r2, r3, lr
 8018f34:	1880      	adds	r0, r0, r2
 8018f36:	fa43 f305 	asr.w	r3, r3, r5
 8018f3a:	4159      	adcs	r1, r3
 8018f3c:	e00e      	b.n	8018f5c <__adddf3+0xd0>
 8018f3e:	f1a5 0520 	sub.w	r5, r5, #32
 8018f42:	f10e 0e20 	add.w	lr, lr, #32
 8018f46:	2a01      	cmp	r2, #1
 8018f48:	fa03 fc0e 	lsl.w	ip, r3, lr
 8018f4c:	bf28      	it	cs
 8018f4e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018f52:	fa43 f305 	asr.w	r3, r3, r5
 8018f56:	18c0      	adds	r0, r0, r3
 8018f58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8018f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018f60:	d507      	bpl.n	8018f72 <__adddf3+0xe6>
 8018f62:	f04f 0e00 	mov.w	lr, #0
 8018f66:	f1dc 0c00 	rsbs	ip, ip, #0
 8018f6a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8018f6e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018f72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018f76:	d31b      	bcc.n	8018fb0 <__adddf3+0x124>
 8018f78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018f7c:	d30c      	bcc.n	8018f98 <__adddf3+0x10c>
 8018f7e:	0849      	lsrs	r1, r1, #1
 8018f80:	ea5f 0030 	movs.w	r0, r0, rrx
 8018f84:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018f88:	f104 0401 	add.w	r4, r4, #1
 8018f8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018f90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018f94:	f080 809a 	bcs.w	80190cc <__adddf3+0x240>
 8018f98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8018f9c:	bf08      	it	eq
 8018f9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018fa2:	f150 0000 	adcs.w	r0, r0, #0
 8018fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018faa:	ea41 0105 	orr.w	r1, r1, r5
 8018fae:	bd30      	pop	{r4, r5, pc}
 8018fb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018fb4:	4140      	adcs	r0, r0
 8018fb6:	eb41 0101 	adc.w	r1, r1, r1
 8018fba:	3c01      	subs	r4, #1
 8018fbc:	bf28      	it	cs
 8018fbe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8018fc2:	d2e9      	bcs.n	8018f98 <__adddf3+0x10c>
 8018fc4:	f091 0f00 	teq	r1, #0
 8018fc8:	bf04      	itt	eq
 8018fca:	4601      	moveq	r1, r0
 8018fcc:	2000      	moveq	r0, #0
 8018fce:	fab1 f381 	clz	r3, r1
 8018fd2:	bf08      	it	eq
 8018fd4:	3320      	addeq	r3, #32
 8018fd6:	f1a3 030b 	sub.w	r3, r3, #11
 8018fda:	f1b3 0220 	subs.w	r2, r3, #32
 8018fde:	da0c      	bge.n	8018ffa <__adddf3+0x16e>
 8018fe0:	320c      	adds	r2, #12
 8018fe2:	dd08      	ble.n	8018ff6 <__adddf3+0x16a>
 8018fe4:	f102 0c14 	add.w	ip, r2, #20
 8018fe8:	f1c2 020c 	rsb	r2, r2, #12
 8018fec:	fa01 f00c 	lsl.w	r0, r1, ip
 8018ff0:	fa21 f102 	lsr.w	r1, r1, r2
 8018ff4:	e00c      	b.n	8019010 <__adddf3+0x184>
 8018ff6:	f102 0214 	add.w	r2, r2, #20
 8018ffa:	bfd8      	it	le
 8018ffc:	f1c2 0c20 	rsble	ip, r2, #32
 8019000:	fa01 f102 	lsl.w	r1, r1, r2
 8019004:	fa20 fc0c 	lsr.w	ip, r0, ip
 8019008:	bfdc      	itt	le
 801900a:	ea41 010c 	orrle.w	r1, r1, ip
 801900e:	4090      	lslle	r0, r2
 8019010:	1ae4      	subs	r4, r4, r3
 8019012:	bfa2      	ittt	ge
 8019014:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8019018:	4329      	orrge	r1, r5
 801901a:	bd30      	popge	{r4, r5, pc}
 801901c:	ea6f 0404 	mvn.w	r4, r4
 8019020:	3c1f      	subs	r4, #31
 8019022:	da1c      	bge.n	801905e <__adddf3+0x1d2>
 8019024:	340c      	adds	r4, #12
 8019026:	dc0e      	bgt.n	8019046 <__adddf3+0x1ba>
 8019028:	f104 0414 	add.w	r4, r4, #20
 801902c:	f1c4 0220 	rsb	r2, r4, #32
 8019030:	fa20 f004 	lsr.w	r0, r0, r4
 8019034:	fa01 f302 	lsl.w	r3, r1, r2
 8019038:	ea40 0003 	orr.w	r0, r0, r3
 801903c:	fa21 f304 	lsr.w	r3, r1, r4
 8019040:	ea45 0103 	orr.w	r1, r5, r3
 8019044:	bd30      	pop	{r4, r5, pc}
 8019046:	f1c4 040c 	rsb	r4, r4, #12
 801904a:	f1c4 0220 	rsb	r2, r4, #32
 801904e:	fa20 f002 	lsr.w	r0, r0, r2
 8019052:	fa01 f304 	lsl.w	r3, r1, r4
 8019056:	ea40 0003 	orr.w	r0, r0, r3
 801905a:	4629      	mov	r1, r5
 801905c:	bd30      	pop	{r4, r5, pc}
 801905e:	fa21 f004 	lsr.w	r0, r1, r4
 8019062:	4629      	mov	r1, r5
 8019064:	bd30      	pop	{r4, r5, pc}
 8019066:	f094 0f00 	teq	r4, #0
 801906a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801906e:	bf06      	itte	eq
 8019070:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8019074:	3401      	addeq	r4, #1
 8019076:	3d01      	subne	r5, #1
 8019078:	e74e      	b.n	8018f18 <__adddf3+0x8c>
 801907a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801907e:	bf18      	it	ne
 8019080:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019084:	d029      	beq.n	80190da <__adddf3+0x24e>
 8019086:	ea94 0f05 	teq	r4, r5
 801908a:	bf08      	it	eq
 801908c:	ea90 0f02 	teqeq	r0, r2
 8019090:	d005      	beq.n	801909e <__adddf3+0x212>
 8019092:	ea54 0c00 	orrs.w	ip, r4, r0
 8019096:	bf04      	itt	eq
 8019098:	4619      	moveq	r1, r3
 801909a:	4610      	moveq	r0, r2
 801909c:	bd30      	pop	{r4, r5, pc}
 801909e:	ea91 0f03 	teq	r1, r3
 80190a2:	bf1e      	ittt	ne
 80190a4:	2100      	movne	r1, #0
 80190a6:	2000      	movne	r0, #0
 80190a8:	bd30      	popne	{r4, r5, pc}
 80190aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80190ae:	d105      	bne.n	80190bc <__adddf3+0x230>
 80190b0:	0040      	lsls	r0, r0, #1
 80190b2:	4149      	adcs	r1, r1
 80190b4:	bf28      	it	cs
 80190b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80190ba:	bd30      	pop	{r4, r5, pc}
 80190bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80190c0:	bf3c      	itt	cc
 80190c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80190c6:	bd30      	popcc	{r4, r5, pc}
 80190c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80190cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80190d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80190d4:	f04f 0000 	mov.w	r0, #0
 80190d8:	bd30      	pop	{r4, r5, pc}
 80190da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80190de:	bf1a      	itte	ne
 80190e0:	4619      	movne	r1, r3
 80190e2:	4610      	movne	r0, r2
 80190e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80190e8:	bf1c      	itt	ne
 80190ea:	460b      	movne	r3, r1
 80190ec:	4602      	movne	r2, r0
 80190ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80190f2:	bf06      	itte	eq
 80190f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80190f8:	ea91 0f03 	teqeq	r1, r3
 80190fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8019100:	bd30      	pop	{r4, r5, pc}
 8019102:	bf00      	nop

08019104 <__aeabi_ui2d>:
 8019104:	f090 0f00 	teq	r0, #0
 8019108:	bf04      	itt	eq
 801910a:	2100      	moveq	r1, #0
 801910c:	4770      	bxeq	lr
 801910e:	b530      	push	{r4, r5, lr}
 8019110:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019114:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019118:	f04f 0500 	mov.w	r5, #0
 801911c:	f04f 0100 	mov.w	r1, #0
 8019120:	e750      	b.n	8018fc4 <__adddf3+0x138>
 8019122:	bf00      	nop

08019124 <__aeabi_i2d>:
 8019124:	f090 0f00 	teq	r0, #0
 8019128:	bf04      	itt	eq
 801912a:	2100      	moveq	r1, #0
 801912c:	4770      	bxeq	lr
 801912e:	b530      	push	{r4, r5, lr}
 8019130:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019134:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019138:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801913c:	bf48      	it	mi
 801913e:	4240      	negmi	r0, r0
 8019140:	f04f 0100 	mov.w	r1, #0
 8019144:	e73e      	b.n	8018fc4 <__adddf3+0x138>
 8019146:	bf00      	nop

08019148 <__aeabi_f2d>:
 8019148:	0042      	lsls	r2, r0, #1
 801914a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801914e:	ea4f 0131 	mov.w	r1, r1, rrx
 8019152:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8019156:	bf1f      	itttt	ne
 8019158:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801915c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8019160:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8019164:	4770      	bxne	lr
 8019166:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801916a:	bf08      	it	eq
 801916c:	4770      	bxeq	lr
 801916e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8019172:	bf04      	itt	eq
 8019174:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8019178:	4770      	bxeq	lr
 801917a:	b530      	push	{r4, r5, lr}
 801917c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8019180:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019184:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019188:	e71c      	b.n	8018fc4 <__adddf3+0x138>
 801918a:	bf00      	nop

0801918c <__aeabi_ul2d>:
 801918c:	ea50 0201 	orrs.w	r2, r0, r1
 8019190:	bf08      	it	eq
 8019192:	4770      	bxeq	lr
 8019194:	b530      	push	{r4, r5, lr}
 8019196:	f04f 0500 	mov.w	r5, #0
 801919a:	e00a      	b.n	80191b2 <__aeabi_l2d+0x16>

0801919c <__aeabi_l2d>:
 801919c:	ea50 0201 	orrs.w	r2, r0, r1
 80191a0:	bf08      	it	eq
 80191a2:	4770      	bxeq	lr
 80191a4:	b530      	push	{r4, r5, lr}
 80191a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80191aa:	d502      	bpl.n	80191b2 <__aeabi_l2d+0x16>
 80191ac:	4240      	negs	r0, r0
 80191ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80191b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80191b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80191ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80191be:	f43f aed8 	beq.w	8018f72 <__adddf3+0xe6>
 80191c2:	f04f 0203 	mov.w	r2, #3
 80191c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80191ca:	bf18      	it	ne
 80191cc:	3203      	addne	r2, #3
 80191ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80191d2:	bf18      	it	ne
 80191d4:	3203      	addne	r2, #3
 80191d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80191da:	f1c2 0320 	rsb	r3, r2, #32
 80191de:	fa00 fc03 	lsl.w	ip, r0, r3
 80191e2:	fa20 f002 	lsr.w	r0, r0, r2
 80191e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80191ea:	ea40 000e 	orr.w	r0, r0, lr
 80191ee:	fa21 f102 	lsr.w	r1, r1, r2
 80191f2:	4414      	add	r4, r2
 80191f4:	e6bd      	b.n	8018f72 <__adddf3+0xe6>
 80191f6:	bf00      	nop

080191f8 <__aeabi_dmul>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80191fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019202:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019206:	bf1d      	ittte	ne
 8019208:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801920c:	ea94 0f0c 	teqne	r4, ip
 8019210:	ea95 0f0c 	teqne	r5, ip
 8019214:	f000 f8de 	bleq	80193d4 <__aeabi_dmul+0x1dc>
 8019218:	442c      	add	r4, r5
 801921a:	ea81 0603 	eor.w	r6, r1, r3
 801921e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8019222:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8019226:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801922a:	bf18      	it	ne
 801922c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8019230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019238:	d038      	beq.n	80192ac <__aeabi_dmul+0xb4>
 801923a:	fba0 ce02 	umull	ip, lr, r0, r2
 801923e:	f04f 0500 	mov.w	r5, #0
 8019242:	fbe1 e502 	umlal	lr, r5, r1, r2
 8019246:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801924a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801924e:	f04f 0600 	mov.w	r6, #0
 8019252:	fbe1 5603 	umlal	r5, r6, r1, r3
 8019256:	f09c 0f00 	teq	ip, #0
 801925a:	bf18      	it	ne
 801925c:	f04e 0e01 	orrne.w	lr, lr, #1
 8019260:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8019264:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8019268:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801926c:	d204      	bcs.n	8019278 <__aeabi_dmul+0x80>
 801926e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8019272:	416d      	adcs	r5, r5
 8019274:	eb46 0606 	adc.w	r6, r6, r6
 8019278:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801927c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8019280:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8019284:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8019288:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801928c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8019290:	bf88      	it	hi
 8019292:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019296:	d81e      	bhi.n	80192d6 <__aeabi_dmul+0xde>
 8019298:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801929c:	bf08      	it	eq
 801929e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80192a2:	f150 0000 	adcs.w	r0, r0, #0
 80192a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80192aa:	bd70      	pop	{r4, r5, r6, pc}
 80192ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80192b0:	ea46 0101 	orr.w	r1, r6, r1
 80192b4:	ea40 0002 	orr.w	r0, r0, r2
 80192b8:	ea81 0103 	eor.w	r1, r1, r3
 80192bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80192c0:	bfc2      	ittt	gt
 80192c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80192c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80192ca:	bd70      	popgt	{r4, r5, r6, pc}
 80192cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80192d0:	f04f 0e00 	mov.w	lr, #0
 80192d4:	3c01      	subs	r4, #1
 80192d6:	f300 80ab 	bgt.w	8019430 <__aeabi_dmul+0x238>
 80192da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80192de:	bfde      	ittt	le
 80192e0:	2000      	movle	r0, #0
 80192e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80192e6:	bd70      	pople	{r4, r5, r6, pc}
 80192e8:	f1c4 0400 	rsb	r4, r4, #0
 80192ec:	3c20      	subs	r4, #32
 80192ee:	da35      	bge.n	801935c <__aeabi_dmul+0x164>
 80192f0:	340c      	adds	r4, #12
 80192f2:	dc1b      	bgt.n	801932c <__aeabi_dmul+0x134>
 80192f4:	f104 0414 	add.w	r4, r4, #20
 80192f8:	f1c4 0520 	rsb	r5, r4, #32
 80192fc:	fa00 f305 	lsl.w	r3, r0, r5
 8019300:	fa20 f004 	lsr.w	r0, r0, r4
 8019304:	fa01 f205 	lsl.w	r2, r1, r5
 8019308:	ea40 0002 	orr.w	r0, r0, r2
 801930c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8019310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019314:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019318:	fa21 f604 	lsr.w	r6, r1, r4
 801931c:	eb42 0106 	adc.w	r1, r2, r6
 8019320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019324:	bf08      	it	eq
 8019326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801932a:	bd70      	pop	{r4, r5, r6, pc}
 801932c:	f1c4 040c 	rsb	r4, r4, #12
 8019330:	f1c4 0520 	rsb	r5, r4, #32
 8019334:	fa00 f304 	lsl.w	r3, r0, r4
 8019338:	fa20 f005 	lsr.w	r0, r0, r5
 801933c:	fa01 f204 	lsl.w	r2, r1, r4
 8019340:	ea40 0002 	orr.w	r0, r0, r2
 8019344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019348:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801934c:	f141 0100 	adc.w	r1, r1, #0
 8019350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019354:	bf08      	it	eq
 8019356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801935a:	bd70      	pop	{r4, r5, r6, pc}
 801935c:	f1c4 0520 	rsb	r5, r4, #32
 8019360:	fa00 f205 	lsl.w	r2, r0, r5
 8019364:	ea4e 0e02 	orr.w	lr, lr, r2
 8019368:	fa20 f304 	lsr.w	r3, r0, r4
 801936c:	fa01 f205 	lsl.w	r2, r1, r5
 8019370:	ea43 0302 	orr.w	r3, r3, r2
 8019374:	fa21 f004 	lsr.w	r0, r1, r4
 8019378:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801937c:	fa21 f204 	lsr.w	r2, r1, r4
 8019380:	ea20 0002 	bic.w	r0, r0, r2
 8019384:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8019388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801938c:	bf08      	it	eq
 801938e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019392:	bd70      	pop	{r4, r5, r6, pc}
 8019394:	f094 0f00 	teq	r4, #0
 8019398:	d10f      	bne.n	80193ba <__aeabi_dmul+0x1c2>
 801939a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801939e:	0040      	lsls	r0, r0, #1
 80193a0:	eb41 0101 	adc.w	r1, r1, r1
 80193a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80193a8:	bf08      	it	eq
 80193aa:	3c01      	subeq	r4, #1
 80193ac:	d0f7      	beq.n	801939e <__aeabi_dmul+0x1a6>
 80193ae:	ea41 0106 	orr.w	r1, r1, r6
 80193b2:	f095 0f00 	teq	r5, #0
 80193b6:	bf18      	it	ne
 80193b8:	4770      	bxne	lr
 80193ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80193be:	0052      	lsls	r2, r2, #1
 80193c0:	eb43 0303 	adc.w	r3, r3, r3
 80193c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80193c8:	bf08      	it	eq
 80193ca:	3d01      	subeq	r5, #1
 80193cc:	d0f7      	beq.n	80193be <__aeabi_dmul+0x1c6>
 80193ce:	ea43 0306 	orr.w	r3, r3, r6
 80193d2:	4770      	bx	lr
 80193d4:	ea94 0f0c 	teq	r4, ip
 80193d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80193dc:	bf18      	it	ne
 80193de:	ea95 0f0c 	teqne	r5, ip
 80193e2:	d00c      	beq.n	80193fe <__aeabi_dmul+0x206>
 80193e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80193e8:	bf18      	it	ne
 80193ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80193ee:	d1d1      	bne.n	8019394 <__aeabi_dmul+0x19c>
 80193f0:	ea81 0103 	eor.w	r1, r1, r3
 80193f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80193f8:	f04f 0000 	mov.w	r0, #0
 80193fc:	bd70      	pop	{r4, r5, r6, pc}
 80193fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019402:	bf06      	itte	eq
 8019404:	4610      	moveq	r0, r2
 8019406:	4619      	moveq	r1, r3
 8019408:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801940c:	d019      	beq.n	8019442 <__aeabi_dmul+0x24a>
 801940e:	ea94 0f0c 	teq	r4, ip
 8019412:	d102      	bne.n	801941a <__aeabi_dmul+0x222>
 8019414:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019418:	d113      	bne.n	8019442 <__aeabi_dmul+0x24a>
 801941a:	ea95 0f0c 	teq	r5, ip
 801941e:	d105      	bne.n	801942c <__aeabi_dmul+0x234>
 8019420:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019424:	bf1c      	itt	ne
 8019426:	4610      	movne	r0, r2
 8019428:	4619      	movne	r1, r3
 801942a:	d10a      	bne.n	8019442 <__aeabi_dmul+0x24a>
 801942c:	ea81 0103 	eor.w	r1, r1, r3
 8019430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019434:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801943c:	f04f 0000 	mov.w	r0, #0
 8019440:	bd70      	pop	{r4, r5, r6, pc}
 8019442:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019446:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801944a:	bd70      	pop	{r4, r5, r6, pc}

0801944c <__aeabi_ddiv>:
 801944c:	b570      	push	{r4, r5, r6, lr}
 801944e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019452:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019456:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801945a:	bf1d      	ittte	ne
 801945c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019460:	ea94 0f0c 	teqne	r4, ip
 8019464:	ea95 0f0c 	teqne	r5, ip
 8019468:	f000 f8a7 	bleq	80195ba <__aeabi_ddiv+0x16e>
 801946c:	eba4 0405 	sub.w	r4, r4, r5
 8019470:	ea81 0e03 	eor.w	lr, r1, r3
 8019474:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019478:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801947c:	f000 8088 	beq.w	8019590 <__aeabi_ddiv+0x144>
 8019480:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019484:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019488:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801948c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019490:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019494:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019498:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801949c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80194a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80194a4:	429d      	cmp	r5, r3
 80194a6:	bf08      	it	eq
 80194a8:	4296      	cmpeq	r6, r2
 80194aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80194ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80194b2:	d202      	bcs.n	80194ba <__aeabi_ddiv+0x6e>
 80194b4:	085b      	lsrs	r3, r3, #1
 80194b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80194ba:	1ab6      	subs	r6, r6, r2
 80194bc:	eb65 0503 	sbc.w	r5, r5, r3
 80194c0:	085b      	lsrs	r3, r3, #1
 80194c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80194c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80194ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80194ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80194d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80194d6:	bf22      	ittt	cs
 80194d8:	1ab6      	subcs	r6, r6, r2
 80194da:	4675      	movcs	r5, lr
 80194dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80194e0:	085b      	lsrs	r3, r3, #1
 80194e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80194e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80194ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80194ee:	bf22      	ittt	cs
 80194f0:	1ab6      	subcs	r6, r6, r2
 80194f2:	4675      	movcs	r5, lr
 80194f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80194f8:	085b      	lsrs	r3, r3, #1
 80194fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80194fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8019502:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019506:	bf22      	ittt	cs
 8019508:	1ab6      	subcs	r6, r6, r2
 801950a:	4675      	movcs	r5, lr
 801950c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019510:	085b      	lsrs	r3, r3, #1
 8019512:	ea4f 0232 	mov.w	r2, r2, rrx
 8019516:	ebb6 0e02 	subs.w	lr, r6, r2
 801951a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801951e:	bf22      	ittt	cs
 8019520:	1ab6      	subcs	r6, r6, r2
 8019522:	4675      	movcs	r5, lr
 8019524:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019528:	ea55 0e06 	orrs.w	lr, r5, r6
 801952c:	d018      	beq.n	8019560 <__aeabi_ddiv+0x114>
 801952e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019532:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019536:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801953a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801953e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019542:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019546:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801954a:	d1c0      	bne.n	80194ce <__aeabi_ddiv+0x82>
 801954c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019550:	d10b      	bne.n	801956a <__aeabi_ddiv+0x11e>
 8019552:	ea41 0100 	orr.w	r1, r1, r0
 8019556:	f04f 0000 	mov.w	r0, #0
 801955a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801955e:	e7b6      	b.n	80194ce <__aeabi_ddiv+0x82>
 8019560:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019564:	bf04      	itt	eq
 8019566:	4301      	orreq	r1, r0
 8019568:	2000      	moveq	r0, #0
 801956a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801956e:	bf88      	it	hi
 8019570:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019574:	f63f aeaf 	bhi.w	80192d6 <__aeabi_dmul+0xde>
 8019578:	ebb5 0c03 	subs.w	ip, r5, r3
 801957c:	bf04      	itt	eq
 801957e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019586:	f150 0000 	adcs.w	r0, r0, #0
 801958a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801958e:	bd70      	pop	{r4, r5, r6, pc}
 8019590:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8019594:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019598:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801959c:	bfc2      	ittt	gt
 801959e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80195a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80195a6:	bd70      	popgt	{r4, r5, r6, pc}
 80195a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80195ac:	f04f 0e00 	mov.w	lr, #0
 80195b0:	3c01      	subs	r4, #1
 80195b2:	e690      	b.n	80192d6 <__aeabi_dmul+0xde>
 80195b4:	ea45 0e06 	orr.w	lr, r5, r6
 80195b8:	e68d      	b.n	80192d6 <__aeabi_dmul+0xde>
 80195ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80195be:	ea94 0f0c 	teq	r4, ip
 80195c2:	bf08      	it	eq
 80195c4:	ea95 0f0c 	teqeq	r5, ip
 80195c8:	f43f af3b 	beq.w	8019442 <__aeabi_dmul+0x24a>
 80195cc:	ea94 0f0c 	teq	r4, ip
 80195d0:	d10a      	bne.n	80195e8 <__aeabi_ddiv+0x19c>
 80195d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80195d6:	f47f af34 	bne.w	8019442 <__aeabi_dmul+0x24a>
 80195da:	ea95 0f0c 	teq	r5, ip
 80195de:	f47f af25 	bne.w	801942c <__aeabi_dmul+0x234>
 80195e2:	4610      	mov	r0, r2
 80195e4:	4619      	mov	r1, r3
 80195e6:	e72c      	b.n	8019442 <__aeabi_dmul+0x24a>
 80195e8:	ea95 0f0c 	teq	r5, ip
 80195ec:	d106      	bne.n	80195fc <__aeabi_ddiv+0x1b0>
 80195ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80195f2:	f43f aefd 	beq.w	80193f0 <__aeabi_dmul+0x1f8>
 80195f6:	4610      	mov	r0, r2
 80195f8:	4619      	mov	r1, r3
 80195fa:	e722      	b.n	8019442 <__aeabi_dmul+0x24a>
 80195fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019600:	bf18      	it	ne
 8019602:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019606:	f47f aec5 	bne.w	8019394 <__aeabi_dmul+0x19c>
 801960a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801960e:	f47f af0d 	bne.w	801942c <__aeabi_dmul+0x234>
 8019612:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019616:	f47f aeeb 	bne.w	80193f0 <__aeabi_dmul+0x1f8>
 801961a:	e712      	b.n	8019442 <__aeabi_dmul+0x24a>

0801961c <__gedf2>:
 801961c:	f04f 3cff 	mov.w	ip, #4294967295
 8019620:	e006      	b.n	8019630 <__cmpdf2+0x4>
 8019622:	bf00      	nop

08019624 <__ledf2>:
 8019624:	f04f 0c01 	mov.w	ip, #1
 8019628:	e002      	b.n	8019630 <__cmpdf2+0x4>
 801962a:	bf00      	nop

0801962c <__cmpdf2>:
 801962c:	f04f 0c01 	mov.w	ip, #1
 8019630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801963c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019640:	bf18      	it	ne
 8019642:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019646:	d01b      	beq.n	8019680 <__cmpdf2+0x54>
 8019648:	b001      	add	sp, #4
 801964a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801964e:	bf0c      	ite	eq
 8019650:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019654:	ea91 0f03 	teqne	r1, r3
 8019658:	bf02      	ittt	eq
 801965a:	ea90 0f02 	teqeq	r0, r2
 801965e:	2000      	moveq	r0, #0
 8019660:	4770      	bxeq	lr
 8019662:	f110 0f00 	cmn.w	r0, #0
 8019666:	ea91 0f03 	teq	r1, r3
 801966a:	bf58      	it	pl
 801966c:	4299      	cmppl	r1, r3
 801966e:	bf08      	it	eq
 8019670:	4290      	cmpeq	r0, r2
 8019672:	bf2c      	ite	cs
 8019674:	17d8      	asrcs	r0, r3, #31
 8019676:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801967a:	f040 0001 	orr.w	r0, r0, #1
 801967e:	4770      	bx	lr
 8019680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019688:	d102      	bne.n	8019690 <__cmpdf2+0x64>
 801968a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801968e:	d107      	bne.n	80196a0 <__cmpdf2+0x74>
 8019690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019698:	d1d6      	bne.n	8019648 <__cmpdf2+0x1c>
 801969a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801969e:	d0d3      	beq.n	8019648 <__cmpdf2+0x1c>
 80196a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80196a4:	4770      	bx	lr
 80196a6:	bf00      	nop

080196a8 <__aeabi_cdrcmple>:
 80196a8:	4684      	mov	ip, r0
 80196aa:	4610      	mov	r0, r2
 80196ac:	4662      	mov	r2, ip
 80196ae:	468c      	mov	ip, r1
 80196b0:	4619      	mov	r1, r3
 80196b2:	4663      	mov	r3, ip
 80196b4:	e000      	b.n	80196b8 <__aeabi_cdcmpeq>
 80196b6:	bf00      	nop

080196b8 <__aeabi_cdcmpeq>:
 80196b8:	b501      	push	{r0, lr}
 80196ba:	f7ff ffb7 	bl	801962c <__cmpdf2>
 80196be:	2800      	cmp	r0, #0
 80196c0:	bf48      	it	mi
 80196c2:	f110 0f00 	cmnmi.w	r0, #0
 80196c6:	bd01      	pop	{r0, pc}

080196c8 <__aeabi_dcmpeq>:
 80196c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80196cc:	f7ff fff4 	bl	80196b8 <__aeabi_cdcmpeq>
 80196d0:	bf0c      	ite	eq
 80196d2:	2001      	moveq	r0, #1
 80196d4:	2000      	movne	r0, #0
 80196d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80196da:	bf00      	nop

080196dc <__aeabi_dcmplt>:
 80196dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80196e0:	f7ff ffea 	bl	80196b8 <__aeabi_cdcmpeq>
 80196e4:	bf34      	ite	cc
 80196e6:	2001      	movcc	r0, #1
 80196e8:	2000      	movcs	r0, #0
 80196ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80196ee:	bf00      	nop

080196f0 <__aeabi_dcmple>:
 80196f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80196f4:	f7ff ffe0 	bl	80196b8 <__aeabi_cdcmpeq>
 80196f8:	bf94      	ite	ls
 80196fa:	2001      	movls	r0, #1
 80196fc:	2000      	movhi	r0, #0
 80196fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8019702:	bf00      	nop

08019704 <__aeabi_dcmpge>:
 8019704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019708:	f7ff ffce 	bl	80196a8 <__aeabi_cdrcmple>
 801970c:	bf94      	ite	ls
 801970e:	2001      	movls	r0, #1
 8019710:	2000      	movhi	r0, #0
 8019712:	f85d fb08 	ldr.w	pc, [sp], #8
 8019716:	bf00      	nop

08019718 <__aeabi_dcmpgt>:
 8019718:	f84d ed08 	str.w	lr, [sp, #-8]!
 801971c:	f7ff ffc4 	bl	80196a8 <__aeabi_cdrcmple>
 8019720:	bf34      	ite	cc
 8019722:	2001      	movcc	r0, #1
 8019724:	2000      	movcs	r0, #0
 8019726:	f85d fb08 	ldr.w	pc, [sp], #8
 801972a:	bf00      	nop

0801972c <__aeabi_dcmpun>:
 801972c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019734:	d102      	bne.n	801973c <__aeabi_dcmpun+0x10>
 8019736:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801973a:	d10a      	bne.n	8019752 <__aeabi_dcmpun+0x26>
 801973c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019744:	d102      	bne.n	801974c <__aeabi_dcmpun+0x20>
 8019746:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801974a:	d102      	bne.n	8019752 <__aeabi_dcmpun+0x26>
 801974c:	f04f 0000 	mov.w	r0, #0
 8019750:	4770      	bx	lr
 8019752:	f04f 0001 	mov.w	r0, #1
 8019756:	4770      	bx	lr

08019758 <__aeabi_d2iz>:
 8019758:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801975c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019760:	d215      	bcs.n	801978e <__aeabi_d2iz+0x36>
 8019762:	d511      	bpl.n	8019788 <__aeabi_d2iz+0x30>
 8019764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801976c:	d912      	bls.n	8019794 <__aeabi_d2iz+0x3c>
 801976e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801977a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801977e:	fa23 f002 	lsr.w	r0, r3, r2
 8019782:	bf18      	it	ne
 8019784:	4240      	negne	r0, r0
 8019786:	4770      	bx	lr
 8019788:	f04f 0000 	mov.w	r0, #0
 801978c:	4770      	bx	lr
 801978e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019792:	d105      	bne.n	80197a0 <__aeabi_d2iz+0x48>
 8019794:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8019798:	bf08      	it	eq
 801979a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801979e:	4770      	bx	lr
 80197a0:	f04f 0000 	mov.w	r0, #0
 80197a4:	4770      	bx	lr
 80197a6:	bf00      	nop

080197a8 <__aeabi_d2uiz>:
 80197a8:	004a      	lsls	r2, r1, #1
 80197aa:	d211      	bcs.n	80197d0 <__aeabi_d2uiz+0x28>
 80197ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80197b0:	d211      	bcs.n	80197d6 <__aeabi_d2uiz+0x2e>
 80197b2:	d50d      	bpl.n	80197d0 <__aeabi_d2uiz+0x28>
 80197b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80197b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80197bc:	d40e      	bmi.n	80197dc <__aeabi_d2uiz+0x34>
 80197be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80197c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80197c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80197ca:	fa23 f002 	lsr.w	r0, r3, r2
 80197ce:	4770      	bx	lr
 80197d0:	f04f 0000 	mov.w	r0, #0
 80197d4:	4770      	bx	lr
 80197d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80197da:	d102      	bne.n	80197e2 <__aeabi_d2uiz+0x3a>
 80197dc:	f04f 30ff 	mov.w	r0, #4294967295
 80197e0:	4770      	bx	lr
 80197e2:	f04f 0000 	mov.w	r0, #0
 80197e6:	4770      	bx	lr

080197e8 <__aeabi_d2f>:
 80197e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80197ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80197f0:	bf24      	itt	cs
 80197f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80197f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80197fa:	d90d      	bls.n	8019818 <__aeabi_d2f+0x30>
 80197fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019800:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019804:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019808:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801980c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019810:	bf08      	it	eq
 8019812:	f020 0001 	biceq.w	r0, r0, #1
 8019816:	4770      	bx	lr
 8019818:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801981c:	d121      	bne.n	8019862 <__aeabi_d2f+0x7a>
 801981e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019822:	bfbc      	itt	lt
 8019824:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019828:	4770      	bxlt	lr
 801982a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801982e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019832:	f1c2 0218 	rsb	r2, r2, #24
 8019836:	f1c2 0c20 	rsb	ip, r2, #32
 801983a:	fa10 f30c 	lsls.w	r3, r0, ip
 801983e:	fa20 f002 	lsr.w	r0, r0, r2
 8019842:	bf18      	it	ne
 8019844:	f040 0001 	orrne.w	r0, r0, #1
 8019848:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801984c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019850:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019854:	ea40 000c 	orr.w	r0, r0, ip
 8019858:	fa23 f302 	lsr.w	r3, r3, r2
 801985c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019860:	e7cc      	b.n	80197fc <__aeabi_d2f+0x14>
 8019862:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019866:	d107      	bne.n	8019878 <__aeabi_d2f+0x90>
 8019868:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801986c:	bf1e      	ittt	ne
 801986e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019872:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019876:	4770      	bxne	lr
 8019878:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801987c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019884:	4770      	bx	lr
 8019886:	bf00      	nop

08019888 <__aeabi_d2lz>:
 8019888:	b538      	push	{r3, r4, r5, lr}
 801988a:	2200      	movs	r2, #0
 801988c:	2300      	movs	r3, #0
 801988e:	4604      	mov	r4, r0
 8019890:	460d      	mov	r5, r1
 8019892:	f7ff ff23 	bl	80196dc <__aeabi_dcmplt>
 8019896:	b928      	cbnz	r0, 80198a4 <__aeabi_d2lz+0x1c>
 8019898:	4620      	mov	r0, r4
 801989a:	4629      	mov	r1, r5
 801989c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198a0:	f000 b80a 	b.w	80198b8 <__aeabi_d2ulz>
 80198a4:	4620      	mov	r0, r4
 80198a6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80198aa:	f000 f805 	bl	80198b8 <__aeabi_d2ulz>
 80198ae:	4240      	negs	r0, r0
 80198b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80198b4:	bd38      	pop	{r3, r4, r5, pc}
 80198b6:	bf00      	nop

080198b8 <__aeabi_d2ulz>:
 80198b8:	b5d0      	push	{r4, r6, r7, lr}
 80198ba:	4b0c      	ldr	r3, [pc, #48]	; (80198ec <__aeabi_d2ulz+0x34>)
 80198bc:	2200      	movs	r2, #0
 80198be:	4606      	mov	r6, r0
 80198c0:	460f      	mov	r7, r1
 80198c2:	f7ff fc99 	bl	80191f8 <__aeabi_dmul>
 80198c6:	f7ff ff6f 	bl	80197a8 <__aeabi_d2uiz>
 80198ca:	4604      	mov	r4, r0
 80198cc:	f7ff fc1a 	bl	8019104 <__aeabi_ui2d>
 80198d0:	4b07      	ldr	r3, [pc, #28]	; (80198f0 <__aeabi_d2ulz+0x38>)
 80198d2:	2200      	movs	r2, #0
 80198d4:	f7ff fc90 	bl	80191f8 <__aeabi_dmul>
 80198d8:	4602      	mov	r2, r0
 80198da:	460b      	mov	r3, r1
 80198dc:	4630      	mov	r0, r6
 80198de:	4639      	mov	r1, r7
 80198e0:	f7ff fad2 	bl	8018e88 <__aeabi_dsub>
 80198e4:	f7ff ff60 	bl	80197a8 <__aeabi_d2uiz>
 80198e8:	4621      	mov	r1, r4
 80198ea:	bdd0      	pop	{r4, r6, r7, pc}
 80198ec:	3df00000 	.word	0x3df00000
 80198f0:	41f00000 	.word	0x41f00000

080198f4 <__aeabi_uldivmod>:
 80198f4:	b953      	cbnz	r3, 801990c <__aeabi_uldivmod+0x18>
 80198f6:	b94a      	cbnz	r2, 801990c <__aeabi_uldivmod+0x18>
 80198f8:	2900      	cmp	r1, #0
 80198fa:	bf08      	it	eq
 80198fc:	2800      	cmpeq	r0, #0
 80198fe:	bf1c      	itt	ne
 8019900:	f04f 31ff 	movne.w	r1, #4294967295
 8019904:	f04f 30ff 	movne.w	r0, #4294967295
 8019908:	f000 b974 	b.w	8019bf4 <__aeabi_idiv0>
 801990c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019914:	f000 f806 	bl	8019924 <__udivmoddi4>
 8019918:	f8dd e004 	ldr.w	lr, [sp, #4]
 801991c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019920:	b004      	add	sp, #16
 8019922:	4770      	bx	lr

08019924 <__udivmoddi4>:
 8019924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019928:	9d08      	ldr	r5, [sp, #32]
 801992a:	4604      	mov	r4, r0
 801992c:	468e      	mov	lr, r1
 801992e:	2b00      	cmp	r3, #0
 8019930:	d14d      	bne.n	80199ce <__udivmoddi4+0xaa>
 8019932:	428a      	cmp	r2, r1
 8019934:	4694      	mov	ip, r2
 8019936:	d969      	bls.n	8019a0c <__udivmoddi4+0xe8>
 8019938:	fab2 f282 	clz	r2, r2
 801993c:	b152      	cbz	r2, 8019954 <__udivmoddi4+0x30>
 801993e:	fa01 f302 	lsl.w	r3, r1, r2
 8019942:	f1c2 0120 	rsb	r1, r2, #32
 8019946:	fa20 f101 	lsr.w	r1, r0, r1
 801994a:	fa0c fc02 	lsl.w	ip, ip, r2
 801994e:	ea41 0e03 	orr.w	lr, r1, r3
 8019952:	4094      	lsls	r4, r2
 8019954:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8019958:	0c21      	lsrs	r1, r4, #16
 801995a:	fbbe f6f8 	udiv	r6, lr, r8
 801995e:	fa1f f78c 	uxth.w	r7, ip
 8019962:	fb08 e316 	mls	r3, r8, r6, lr
 8019966:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801996a:	fb06 f107 	mul.w	r1, r6, r7
 801996e:	4299      	cmp	r1, r3
 8019970:	d90a      	bls.n	8019988 <__udivmoddi4+0x64>
 8019972:	eb1c 0303 	adds.w	r3, ip, r3
 8019976:	f106 30ff 	add.w	r0, r6, #4294967295
 801997a:	f080 811f 	bcs.w	8019bbc <__udivmoddi4+0x298>
 801997e:	4299      	cmp	r1, r3
 8019980:	f240 811c 	bls.w	8019bbc <__udivmoddi4+0x298>
 8019984:	3e02      	subs	r6, #2
 8019986:	4463      	add	r3, ip
 8019988:	1a5b      	subs	r3, r3, r1
 801998a:	b2a4      	uxth	r4, r4
 801998c:	fbb3 f0f8 	udiv	r0, r3, r8
 8019990:	fb08 3310 	mls	r3, r8, r0, r3
 8019994:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8019998:	fb00 f707 	mul.w	r7, r0, r7
 801999c:	42a7      	cmp	r7, r4
 801999e:	d90a      	bls.n	80199b6 <__udivmoddi4+0x92>
 80199a0:	eb1c 0404 	adds.w	r4, ip, r4
 80199a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80199a8:	f080 810a 	bcs.w	8019bc0 <__udivmoddi4+0x29c>
 80199ac:	42a7      	cmp	r7, r4
 80199ae:	f240 8107 	bls.w	8019bc0 <__udivmoddi4+0x29c>
 80199b2:	4464      	add	r4, ip
 80199b4:	3802      	subs	r0, #2
 80199b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80199ba:	1be4      	subs	r4, r4, r7
 80199bc:	2600      	movs	r6, #0
 80199be:	b11d      	cbz	r5, 80199c8 <__udivmoddi4+0xa4>
 80199c0:	40d4      	lsrs	r4, r2
 80199c2:	2300      	movs	r3, #0
 80199c4:	e9c5 4300 	strd	r4, r3, [r5]
 80199c8:	4631      	mov	r1, r6
 80199ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199ce:	428b      	cmp	r3, r1
 80199d0:	d909      	bls.n	80199e6 <__udivmoddi4+0xc2>
 80199d2:	2d00      	cmp	r5, #0
 80199d4:	f000 80ef 	beq.w	8019bb6 <__udivmoddi4+0x292>
 80199d8:	2600      	movs	r6, #0
 80199da:	e9c5 0100 	strd	r0, r1, [r5]
 80199de:	4630      	mov	r0, r6
 80199e0:	4631      	mov	r1, r6
 80199e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199e6:	fab3 f683 	clz	r6, r3
 80199ea:	2e00      	cmp	r6, #0
 80199ec:	d14a      	bne.n	8019a84 <__udivmoddi4+0x160>
 80199ee:	428b      	cmp	r3, r1
 80199f0:	d302      	bcc.n	80199f8 <__udivmoddi4+0xd4>
 80199f2:	4282      	cmp	r2, r0
 80199f4:	f200 80f9 	bhi.w	8019bea <__udivmoddi4+0x2c6>
 80199f8:	1a84      	subs	r4, r0, r2
 80199fa:	eb61 0303 	sbc.w	r3, r1, r3
 80199fe:	2001      	movs	r0, #1
 8019a00:	469e      	mov	lr, r3
 8019a02:	2d00      	cmp	r5, #0
 8019a04:	d0e0      	beq.n	80199c8 <__udivmoddi4+0xa4>
 8019a06:	e9c5 4e00 	strd	r4, lr, [r5]
 8019a0a:	e7dd      	b.n	80199c8 <__udivmoddi4+0xa4>
 8019a0c:	b902      	cbnz	r2, 8019a10 <__udivmoddi4+0xec>
 8019a0e:	deff      	udf	#255	; 0xff
 8019a10:	fab2 f282 	clz	r2, r2
 8019a14:	2a00      	cmp	r2, #0
 8019a16:	f040 8092 	bne.w	8019b3e <__udivmoddi4+0x21a>
 8019a1a:	eba1 010c 	sub.w	r1, r1, ip
 8019a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019a22:	fa1f fe8c 	uxth.w	lr, ip
 8019a26:	2601      	movs	r6, #1
 8019a28:	0c20      	lsrs	r0, r4, #16
 8019a2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8019a2e:	fb07 1113 	mls	r1, r7, r3, r1
 8019a32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019a36:	fb0e f003 	mul.w	r0, lr, r3
 8019a3a:	4288      	cmp	r0, r1
 8019a3c:	d908      	bls.n	8019a50 <__udivmoddi4+0x12c>
 8019a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8019a42:	f103 38ff 	add.w	r8, r3, #4294967295
 8019a46:	d202      	bcs.n	8019a4e <__udivmoddi4+0x12a>
 8019a48:	4288      	cmp	r0, r1
 8019a4a:	f200 80cb 	bhi.w	8019be4 <__udivmoddi4+0x2c0>
 8019a4e:	4643      	mov	r3, r8
 8019a50:	1a09      	subs	r1, r1, r0
 8019a52:	b2a4      	uxth	r4, r4
 8019a54:	fbb1 f0f7 	udiv	r0, r1, r7
 8019a58:	fb07 1110 	mls	r1, r7, r0, r1
 8019a5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019a60:	fb0e fe00 	mul.w	lr, lr, r0
 8019a64:	45a6      	cmp	lr, r4
 8019a66:	d908      	bls.n	8019a7a <__udivmoddi4+0x156>
 8019a68:	eb1c 0404 	adds.w	r4, ip, r4
 8019a6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8019a70:	d202      	bcs.n	8019a78 <__udivmoddi4+0x154>
 8019a72:	45a6      	cmp	lr, r4
 8019a74:	f200 80bb 	bhi.w	8019bee <__udivmoddi4+0x2ca>
 8019a78:	4608      	mov	r0, r1
 8019a7a:	eba4 040e 	sub.w	r4, r4, lr
 8019a7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8019a82:	e79c      	b.n	80199be <__udivmoddi4+0x9a>
 8019a84:	f1c6 0720 	rsb	r7, r6, #32
 8019a88:	40b3      	lsls	r3, r6
 8019a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8019a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8019a92:	fa20 f407 	lsr.w	r4, r0, r7
 8019a96:	fa01 f306 	lsl.w	r3, r1, r6
 8019a9a:	431c      	orrs	r4, r3
 8019a9c:	40f9      	lsrs	r1, r7
 8019a9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8019aa2:	fa00 f306 	lsl.w	r3, r0, r6
 8019aa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8019aaa:	0c20      	lsrs	r0, r4, #16
 8019aac:	fa1f fe8c 	uxth.w	lr, ip
 8019ab0:	fb09 1118 	mls	r1, r9, r8, r1
 8019ab4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019ab8:	fb08 f00e 	mul.w	r0, r8, lr
 8019abc:	4288      	cmp	r0, r1
 8019abe:	fa02 f206 	lsl.w	r2, r2, r6
 8019ac2:	d90b      	bls.n	8019adc <__udivmoddi4+0x1b8>
 8019ac4:	eb1c 0101 	adds.w	r1, ip, r1
 8019ac8:	f108 3aff 	add.w	sl, r8, #4294967295
 8019acc:	f080 8088 	bcs.w	8019be0 <__udivmoddi4+0x2bc>
 8019ad0:	4288      	cmp	r0, r1
 8019ad2:	f240 8085 	bls.w	8019be0 <__udivmoddi4+0x2bc>
 8019ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8019ada:	4461      	add	r1, ip
 8019adc:	1a09      	subs	r1, r1, r0
 8019ade:	b2a4      	uxth	r4, r4
 8019ae0:	fbb1 f0f9 	udiv	r0, r1, r9
 8019ae4:	fb09 1110 	mls	r1, r9, r0, r1
 8019ae8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8019aec:	fb00 fe0e 	mul.w	lr, r0, lr
 8019af0:	458e      	cmp	lr, r1
 8019af2:	d908      	bls.n	8019b06 <__udivmoddi4+0x1e2>
 8019af4:	eb1c 0101 	adds.w	r1, ip, r1
 8019af8:	f100 34ff 	add.w	r4, r0, #4294967295
 8019afc:	d26c      	bcs.n	8019bd8 <__udivmoddi4+0x2b4>
 8019afe:	458e      	cmp	lr, r1
 8019b00:	d96a      	bls.n	8019bd8 <__udivmoddi4+0x2b4>
 8019b02:	3802      	subs	r0, #2
 8019b04:	4461      	add	r1, ip
 8019b06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8019b0a:	fba0 9402 	umull	r9, r4, r0, r2
 8019b0e:	eba1 010e 	sub.w	r1, r1, lr
 8019b12:	42a1      	cmp	r1, r4
 8019b14:	46c8      	mov	r8, r9
 8019b16:	46a6      	mov	lr, r4
 8019b18:	d356      	bcc.n	8019bc8 <__udivmoddi4+0x2a4>
 8019b1a:	d053      	beq.n	8019bc4 <__udivmoddi4+0x2a0>
 8019b1c:	b15d      	cbz	r5, 8019b36 <__udivmoddi4+0x212>
 8019b1e:	ebb3 0208 	subs.w	r2, r3, r8
 8019b22:	eb61 010e 	sbc.w	r1, r1, lr
 8019b26:	fa01 f707 	lsl.w	r7, r1, r7
 8019b2a:	fa22 f306 	lsr.w	r3, r2, r6
 8019b2e:	40f1      	lsrs	r1, r6
 8019b30:	431f      	orrs	r7, r3
 8019b32:	e9c5 7100 	strd	r7, r1, [r5]
 8019b36:	2600      	movs	r6, #0
 8019b38:	4631      	mov	r1, r6
 8019b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b3e:	f1c2 0320 	rsb	r3, r2, #32
 8019b42:	40d8      	lsrs	r0, r3
 8019b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8019b48:	fa21 f303 	lsr.w	r3, r1, r3
 8019b4c:	4091      	lsls	r1, r2
 8019b4e:	4301      	orrs	r1, r0
 8019b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019b54:	fa1f fe8c 	uxth.w	lr, ip
 8019b58:	fbb3 f0f7 	udiv	r0, r3, r7
 8019b5c:	fb07 3610 	mls	r6, r7, r0, r3
 8019b60:	0c0b      	lsrs	r3, r1, #16
 8019b62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019b66:	fb00 f60e 	mul.w	r6, r0, lr
 8019b6a:	429e      	cmp	r6, r3
 8019b6c:	fa04 f402 	lsl.w	r4, r4, r2
 8019b70:	d908      	bls.n	8019b84 <__udivmoddi4+0x260>
 8019b72:	eb1c 0303 	adds.w	r3, ip, r3
 8019b76:	f100 38ff 	add.w	r8, r0, #4294967295
 8019b7a:	d22f      	bcs.n	8019bdc <__udivmoddi4+0x2b8>
 8019b7c:	429e      	cmp	r6, r3
 8019b7e:	d92d      	bls.n	8019bdc <__udivmoddi4+0x2b8>
 8019b80:	3802      	subs	r0, #2
 8019b82:	4463      	add	r3, ip
 8019b84:	1b9b      	subs	r3, r3, r6
 8019b86:	b289      	uxth	r1, r1
 8019b88:	fbb3 f6f7 	udiv	r6, r3, r7
 8019b8c:	fb07 3316 	mls	r3, r7, r6, r3
 8019b90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019b94:	fb06 f30e 	mul.w	r3, r6, lr
 8019b98:	428b      	cmp	r3, r1
 8019b9a:	d908      	bls.n	8019bae <__udivmoddi4+0x28a>
 8019b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8019ba0:	f106 38ff 	add.w	r8, r6, #4294967295
 8019ba4:	d216      	bcs.n	8019bd4 <__udivmoddi4+0x2b0>
 8019ba6:	428b      	cmp	r3, r1
 8019ba8:	d914      	bls.n	8019bd4 <__udivmoddi4+0x2b0>
 8019baa:	3e02      	subs	r6, #2
 8019bac:	4461      	add	r1, ip
 8019bae:	1ac9      	subs	r1, r1, r3
 8019bb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8019bb4:	e738      	b.n	8019a28 <__udivmoddi4+0x104>
 8019bb6:	462e      	mov	r6, r5
 8019bb8:	4628      	mov	r0, r5
 8019bba:	e705      	b.n	80199c8 <__udivmoddi4+0xa4>
 8019bbc:	4606      	mov	r6, r0
 8019bbe:	e6e3      	b.n	8019988 <__udivmoddi4+0x64>
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	e6f8      	b.n	80199b6 <__udivmoddi4+0x92>
 8019bc4:	454b      	cmp	r3, r9
 8019bc6:	d2a9      	bcs.n	8019b1c <__udivmoddi4+0x1f8>
 8019bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8019bcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8019bd0:	3801      	subs	r0, #1
 8019bd2:	e7a3      	b.n	8019b1c <__udivmoddi4+0x1f8>
 8019bd4:	4646      	mov	r6, r8
 8019bd6:	e7ea      	b.n	8019bae <__udivmoddi4+0x28a>
 8019bd8:	4620      	mov	r0, r4
 8019bda:	e794      	b.n	8019b06 <__udivmoddi4+0x1e2>
 8019bdc:	4640      	mov	r0, r8
 8019bde:	e7d1      	b.n	8019b84 <__udivmoddi4+0x260>
 8019be0:	46d0      	mov	r8, sl
 8019be2:	e77b      	b.n	8019adc <__udivmoddi4+0x1b8>
 8019be4:	3b02      	subs	r3, #2
 8019be6:	4461      	add	r1, ip
 8019be8:	e732      	b.n	8019a50 <__udivmoddi4+0x12c>
 8019bea:	4630      	mov	r0, r6
 8019bec:	e709      	b.n	8019a02 <__udivmoddi4+0xde>
 8019bee:	4464      	add	r4, ip
 8019bf0:	3802      	subs	r0, #2
 8019bf2:	e742      	b.n	8019a7a <__udivmoddi4+0x156>

08019bf4 <__aeabi_idiv0>:
 8019bf4:	4770      	bx	lr
 8019bf6:	bf00      	nop

08019bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8019bfc:	480d      	ldr	r0, [pc, #52]	; (8019c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8019bfe:	490e      	ldr	r1, [pc, #56]	; (8019c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019c00:	4a0e      	ldr	r2, [pc, #56]	; (8019c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019c04:	e002      	b.n	8019c0c <LoopCopyDataInit>

08019c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019c0a:	3304      	adds	r3, #4

08019c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019c10:	d3f9      	bcc.n	8019c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019c12:	4a0b      	ldr	r2, [pc, #44]	; (8019c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019c14:	4c0b      	ldr	r4, [pc, #44]	; (8019c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019c18:	e001      	b.n	8019c1e <LoopFillZerobss>

08019c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019c1c:	3204      	adds	r2, #4

08019c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019c20:	d3fb      	bcc.n	8019c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019c22:	f7ec f967 	bl	8005ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019c26:	f000 f81b 	bl	8019c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019c2a:	f7e7 fe95 	bl	8001958 <main>
  bx  lr    
 8019c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019c38:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8019c3c:	080528f0 	.word	0x080528f0
  ldr r2, =_sbss
 8019c40:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019c44:	20000a20 	.word	0x20000a20

08019c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019c48:	e7fe      	b.n	8019c48 <ADC_IRQHandler>

08019c4a <atoi>:
 8019c4a:	220a      	movs	r2, #10
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	f001 bd7f 	b.w	801b750 <strtol>
	...

08019c54 <__errno>:
 8019c54:	4b01      	ldr	r3, [pc, #4]	; (8019c5c <__errno+0x8>)
 8019c56:	6818      	ldr	r0, [r3, #0]
 8019c58:	4770      	bx	lr
 8019c5a:	bf00      	nop
 8019c5c:	20000064 	.word	0x20000064

08019c60 <__libc_init_array>:
 8019c60:	b570      	push	{r4, r5, r6, lr}
 8019c62:	4d0d      	ldr	r5, [pc, #52]	; (8019c98 <__libc_init_array+0x38>)
 8019c64:	4c0d      	ldr	r4, [pc, #52]	; (8019c9c <__libc_init_array+0x3c>)
 8019c66:	1b64      	subs	r4, r4, r5
 8019c68:	10a4      	asrs	r4, r4, #2
 8019c6a:	2600      	movs	r6, #0
 8019c6c:	42a6      	cmp	r6, r4
 8019c6e:	d109      	bne.n	8019c84 <__libc_init_array+0x24>
 8019c70:	4d0b      	ldr	r5, [pc, #44]	; (8019ca0 <__libc_init_array+0x40>)
 8019c72:	4c0c      	ldr	r4, [pc, #48]	; (8019ca4 <__libc_init_array+0x44>)
 8019c74:	f005 fc46 	bl	801f504 <_init>
 8019c78:	1b64      	subs	r4, r4, r5
 8019c7a:	10a4      	asrs	r4, r4, #2
 8019c7c:	2600      	movs	r6, #0
 8019c7e:	42a6      	cmp	r6, r4
 8019c80:	d105      	bne.n	8019c8e <__libc_init_array+0x2e>
 8019c82:	bd70      	pop	{r4, r5, r6, pc}
 8019c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c88:	4798      	blx	r3
 8019c8a:	3601      	adds	r6, #1
 8019c8c:	e7ee      	b.n	8019c6c <__libc_init_array+0xc>
 8019c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c92:	4798      	blx	r3
 8019c94:	3601      	adds	r6, #1
 8019c96:	e7f2      	b.n	8019c7e <__libc_init_array+0x1e>
 8019c98:	080528e8 	.word	0x080528e8
 8019c9c:	080528e8 	.word	0x080528e8
 8019ca0:	080528e8 	.word	0x080528e8
 8019ca4:	080528ec 	.word	0x080528ec

08019ca8 <memset>:
 8019ca8:	4402      	add	r2, r0
 8019caa:	4603      	mov	r3, r0
 8019cac:	4293      	cmp	r3, r2
 8019cae:	d100      	bne.n	8019cb2 <memset+0xa>
 8019cb0:	4770      	bx	lr
 8019cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8019cb6:	e7f9      	b.n	8019cac <memset+0x4>

08019cb8 <__cvt>:
 8019cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019cbc:	ec55 4b10 	vmov	r4, r5, d0
 8019cc0:	2d00      	cmp	r5, #0
 8019cc2:	460e      	mov	r6, r1
 8019cc4:	4619      	mov	r1, r3
 8019cc6:	462b      	mov	r3, r5
 8019cc8:	bfbb      	ittet	lt
 8019cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019cce:	461d      	movlt	r5, r3
 8019cd0:	2300      	movge	r3, #0
 8019cd2:	232d      	movlt	r3, #45	; 0x2d
 8019cd4:	700b      	strb	r3, [r1, #0]
 8019cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019cdc:	4691      	mov	r9, r2
 8019cde:	f023 0820 	bic.w	r8, r3, #32
 8019ce2:	bfbc      	itt	lt
 8019ce4:	4622      	movlt	r2, r4
 8019ce6:	4614      	movlt	r4, r2
 8019ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019cec:	d005      	beq.n	8019cfa <__cvt+0x42>
 8019cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019cf2:	d100      	bne.n	8019cf6 <__cvt+0x3e>
 8019cf4:	3601      	adds	r6, #1
 8019cf6:	2102      	movs	r1, #2
 8019cf8:	e000      	b.n	8019cfc <__cvt+0x44>
 8019cfa:	2103      	movs	r1, #3
 8019cfc:	ab03      	add	r3, sp, #12
 8019cfe:	9301      	str	r3, [sp, #4]
 8019d00:	ab02      	add	r3, sp, #8
 8019d02:	9300      	str	r3, [sp, #0]
 8019d04:	ec45 4b10 	vmov	d0, r4, r5
 8019d08:	4653      	mov	r3, sl
 8019d0a:	4632      	mov	r2, r6
 8019d0c:	f001 fdb8 	bl	801b880 <_dtoa_r>
 8019d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019d14:	4607      	mov	r7, r0
 8019d16:	d102      	bne.n	8019d1e <__cvt+0x66>
 8019d18:	f019 0f01 	tst.w	r9, #1
 8019d1c:	d022      	beq.n	8019d64 <__cvt+0xac>
 8019d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019d22:	eb07 0906 	add.w	r9, r7, r6
 8019d26:	d110      	bne.n	8019d4a <__cvt+0x92>
 8019d28:	783b      	ldrb	r3, [r7, #0]
 8019d2a:	2b30      	cmp	r3, #48	; 0x30
 8019d2c:	d10a      	bne.n	8019d44 <__cvt+0x8c>
 8019d2e:	2200      	movs	r2, #0
 8019d30:	2300      	movs	r3, #0
 8019d32:	4620      	mov	r0, r4
 8019d34:	4629      	mov	r1, r5
 8019d36:	f7ff fcc7 	bl	80196c8 <__aeabi_dcmpeq>
 8019d3a:	b918      	cbnz	r0, 8019d44 <__cvt+0x8c>
 8019d3c:	f1c6 0601 	rsb	r6, r6, #1
 8019d40:	f8ca 6000 	str.w	r6, [sl]
 8019d44:	f8da 3000 	ldr.w	r3, [sl]
 8019d48:	4499      	add	r9, r3
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	4620      	mov	r0, r4
 8019d50:	4629      	mov	r1, r5
 8019d52:	f7ff fcb9 	bl	80196c8 <__aeabi_dcmpeq>
 8019d56:	b108      	cbz	r0, 8019d5c <__cvt+0xa4>
 8019d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8019d5c:	2230      	movs	r2, #48	; 0x30
 8019d5e:	9b03      	ldr	r3, [sp, #12]
 8019d60:	454b      	cmp	r3, r9
 8019d62:	d307      	bcc.n	8019d74 <__cvt+0xbc>
 8019d64:	9b03      	ldr	r3, [sp, #12]
 8019d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d68:	1bdb      	subs	r3, r3, r7
 8019d6a:	4638      	mov	r0, r7
 8019d6c:	6013      	str	r3, [r2, #0]
 8019d6e:	b004      	add	sp, #16
 8019d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d74:	1c59      	adds	r1, r3, #1
 8019d76:	9103      	str	r1, [sp, #12]
 8019d78:	701a      	strb	r2, [r3, #0]
 8019d7a:	e7f0      	b.n	8019d5e <__cvt+0xa6>

08019d7c <__exponent>:
 8019d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d7e:	4603      	mov	r3, r0
 8019d80:	2900      	cmp	r1, #0
 8019d82:	bfb8      	it	lt
 8019d84:	4249      	neglt	r1, r1
 8019d86:	f803 2b02 	strb.w	r2, [r3], #2
 8019d8a:	bfb4      	ite	lt
 8019d8c:	222d      	movlt	r2, #45	; 0x2d
 8019d8e:	222b      	movge	r2, #43	; 0x2b
 8019d90:	2909      	cmp	r1, #9
 8019d92:	7042      	strb	r2, [r0, #1]
 8019d94:	dd2a      	ble.n	8019dec <__exponent+0x70>
 8019d96:	f10d 0407 	add.w	r4, sp, #7
 8019d9a:	46a4      	mov	ip, r4
 8019d9c:	270a      	movs	r7, #10
 8019d9e:	46a6      	mov	lr, r4
 8019da0:	460a      	mov	r2, r1
 8019da2:	fb91 f6f7 	sdiv	r6, r1, r7
 8019da6:	fb07 1516 	mls	r5, r7, r6, r1
 8019daa:	3530      	adds	r5, #48	; 0x30
 8019dac:	2a63      	cmp	r2, #99	; 0x63
 8019dae:	f104 34ff 	add.w	r4, r4, #4294967295
 8019db2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019db6:	4631      	mov	r1, r6
 8019db8:	dcf1      	bgt.n	8019d9e <__exponent+0x22>
 8019dba:	3130      	adds	r1, #48	; 0x30
 8019dbc:	f1ae 0502 	sub.w	r5, lr, #2
 8019dc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019dc4:	1c44      	adds	r4, r0, #1
 8019dc6:	4629      	mov	r1, r5
 8019dc8:	4561      	cmp	r1, ip
 8019dca:	d30a      	bcc.n	8019de2 <__exponent+0x66>
 8019dcc:	f10d 0209 	add.w	r2, sp, #9
 8019dd0:	eba2 020e 	sub.w	r2, r2, lr
 8019dd4:	4565      	cmp	r5, ip
 8019dd6:	bf88      	it	hi
 8019dd8:	2200      	movhi	r2, #0
 8019dda:	4413      	add	r3, r2
 8019ddc:	1a18      	subs	r0, r3, r0
 8019dde:	b003      	add	sp, #12
 8019de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019de6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019dea:	e7ed      	b.n	8019dc8 <__exponent+0x4c>
 8019dec:	2330      	movs	r3, #48	; 0x30
 8019dee:	3130      	adds	r1, #48	; 0x30
 8019df0:	7083      	strb	r3, [r0, #2]
 8019df2:	70c1      	strb	r1, [r0, #3]
 8019df4:	1d03      	adds	r3, r0, #4
 8019df6:	e7f1      	b.n	8019ddc <__exponent+0x60>

08019df8 <_printf_float>:
 8019df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dfc:	ed2d 8b02 	vpush	{d8}
 8019e00:	b08d      	sub	sp, #52	; 0x34
 8019e02:	460c      	mov	r4, r1
 8019e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019e08:	4616      	mov	r6, r2
 8019e0a:	461f      	mov	r7, r3
 8019e0c:	4605      	mov	r5, r0
 8019e0e:	f002 fe95 	bl	801cb3c <_localeconv_r>
 8019e12:	f8d0 a000 	ldr.w	sl, [r0]
 8019e16:	4650      	mov	r0, sl
 8019e18:	f7fe ffda 	bl	8018dd0 <strlen>
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8019e20:	6823      	ldr	r3, [r4, #0]
 8019e22:	9305      	str	r3, [sp, #20]
 8019e24:	f8d8 3000 	ldr.w	r3, [r8]
 8019e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019e2c:	3307      	adds	r3, #7
 8019e2e:	f023 0307 	bic.w	r3, r3, #7
 8019e32:	f103 0208 	add.w	r2, r3, #8
 8019e36:	f8c8 2000 	str.w	r2, [r8]
 8019e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019e42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019e4a:	9307      	str	r3, [sp, #28]
 8019e4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019e50:	ee08 0a10 	vmov	s16, r0
 8019e54:	4b9f      	ldr	r3, [pc, #636]	; (801a0d4 <_printf_float+0x2dc>)
 8019e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8019e5e:	f7ff fc65 	bl	801972c <__aeabi_dcmpun>
 8019e62:	bb88      	cbnz	r0, 8019ec8 <_printf_float+0xd0>
 8019e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019e68:	4b9a      	ldr	r3, [pc, #616]	; (801a0d4 <_printf_float+0x2dc>)
 8019e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8019e6e:	f7ff fc3f 	bl	80196f0 <__aeabi_dcmple>
 8019e72:	bb48      	cbnz	r0, 8019ec8 <_printf_float+0xd0>
 8019e74:	2200      	movs	r2, #0
 8019e76:	2300      	movs	r3, #0
 8019e78:	4640      	mov	r0, r8
 8019e7a:	4649      	mov	r1, r9
 8019e7c:	f7ff fc2e 	bl	80196dc <__aeabi_dcmplt>
 8019e80:	b110      	cbz	r0, 8019e88 <_printf_float+0x90>
 8019e82:	232d      	movs	r3, #45	; 0x2d
 8019e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e88:	4b93      	ldr	r3, [pc, #588]	; (801a0d8 <_printf_float+0x2e0>)
 8019e8a:	4894      	ldr	r0, [pc, #592]	; (801a0dc <_printf_float+0x2e4>)
 8019e8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019e90:	bf94      	ite	ls
 8019e92:	4698      	movls	r8, r3
 8019e94:	4680      	movhi	r8, r0
 8019e96:	2303      	movs	r3, #3
 8019e98:	6123      	str	r3, [r4, #16]
 8019e9a:	9b05      	ldr	r3, [sp, #20]
 8019e9c:	f023 0204 	bic.w	r2, r3, #4
 8019ea0:	6022      	str	r2, [r4, #0]
 8019ea2:	f04f 0900 	mov.w	r9, #0
 8019ea6:	9700      	str	r7, [sp, #0]
 8019ea8:	4633      	mov	r3, r6
 8019eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8019eac:	4621      	mov	r1, r4
 8019eae:	4628      	mov	r0, r5
 8019eb0:	f000 f9d8 	bl	801a264 <_printf_common>
 8019eb4:	3001      	adds	r0, #1
 8019eb6:	f040 8090 	bne.w	8019fda <_printf_float+0x1e2>
 8019eba:	f04f 30ff 	mov.w	r0, #4294967295
 8019ebe:	b00d      	add	sp, #52	; 0x34
 8019ec0:	ecbd 8b02 	vpop	{d8}
 8019ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec8:	4642      	mov	r2, r8
 8019eca:	464b      	mov	r3, r9
 8019ecc:	4640      	mov	r0, r8
 8019ece:	4649      	mov	r1, r9
 8019ed0:	f7ff fc2c 	bl	801972c <__aeabi_dcmpun>
 8019ed4:	b140      	cbz	r0, 8019ee8 <_printf_float+0xf0>
 8019ed6:	464b      	mov	r3, r9
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	bfbc      	itt	lt
 8019edc:	232d      	movlt	r3, #45	; 0x2d
 8019ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019ee2:	487f      	ldr	r0, [pc, #508]	; (801a0e0 <_printf_float+0x2e8>)
 8019ee4:	4b7f      	ldr	r3, [pc, #508]	; (801a0e4 <_printf_float+0x2ec>)
 8019ee6:	e7d1      	b.n	8019e8c <_printf_float+0x94>
 8019ee8:	6863      	ldr	r3, [r4, #4]
 8019eea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019eee:	9206      	str	r2, [sp, #24]
 8019ef0:	1c5a      	adds	r2, r3, #1
 8019ef2:	d13f      	bne.n	8019f74 <_printf_float+0x17c>
 8019ef4:	2306      	movs	r3, #6
 8019ef6:	6063      	str	r3, [r4, #4]
 8019ef8:	9b05      	ldr	r3, [sp, #20]
 8019efa:	6861      	ldr	r1, [r4, #4]
 8019efc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019f00:	2300      	movs	r3, #0
 8019f02:	9303      	str	r3, [sp, #12]
 8019f04:	ab0a      	add	r3, sp, #40	; 0x28
 8019f06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019f0a:	ab09      	add	r3, sp, #36	; 0x24
 8019f0c:	ec49 8b10 	vmov	d0, r8, r9
 8019f10:	9300      	str	r3, [sp, #0]
 8019f12:	6022      	str	r2, [r4, #0]
 8019f14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019f18:	4628      	mov	r0, r5
 8019f1a:	f7ff fecd 	bl	8019cb8 <__cvt>
 8019f1e:	9b06      	ldr	r3, [sp, #24]
 8019f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f22:	2b47      	cmp	r3, #71	; 0x47
 8019f24:	4680      	mov	r8, r0
 8019f26:	d108      	bne.n	8019f3a <_printf_float+0x142>
 8019f28:	1cc8      	adds	r0, r1, #3
 8019f2a:	db02      	blt.n	8019f32 <_printf_float+0x13a>
 8019f2c:	6863      	ldr	r3, [r4, #4]
 8019f2e:	4299      	cmp	r1, r3
 8019f30:	dd41      	ble.n	8019fb6 <_printf_float+0x1be>
 8019f32:	f1ab 0b02 	sub.w	fp, fp, #2
 8019f36:	fa5f fb8b 	uxtb.w	fp, fp
 8019f3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019f3e:	d820      	bhi.n	8019f82 <_printf_float+0x18a>
 8019f40:	3901      	subs	r1, #1
 8019f42:	465a      	mov	r2, fp
 8019f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019f48:	9109      	str	r1, [sp, #36]	; 0x24
 8019f4a:	f7ff ff17 	bl	8019d7c <__exponent>
 8019f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019f50:	1813      	adds	r3, r2, r0
 8019f52:	2a01      	cmp	r2, #1
 8019f54:	4681      	mov	r9, r0
 8019f56:	6123      	str	r3, [r4, #16]
 8019f58:	dc02      	bgt.n	8019f60 <_printf_float+0x168>
 8019f5a:	6822      	ldr	r2, [r4, #0]
 8019f5c:	07d2      	lsls	r2, r2, #31
 8019f5e:	d501      	bpl.n	8019f64 <_printf_float+0x16c>
 8019f60:	3301      	adds	r3, #1
 8019f62:	6123      	str	r3, [r4, #16]
 8019f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d09c      	beq.n	8019ea6 <_printf_float+0xae>
 8019f6c:	232d      	movs	r3, #45	; 0x2d
 8019f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f72:	e798      	b.n	8019ea6 <_printf_float+0xae>
 8019f74:	9a06      	ldr	r2, [sp, #24]
 8019f76:	2a47      	cmp	r2, #71	; 0x47
 8019f78:	d1be      	bne.n	8019ef8 <_printf_float+0x100>
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d1bc      	bne.n	8019ef8 <_printf_float+0x100>
 8019f7e:	2301      	movs	r3, #1
 8019f80:	e7b9      	b.n	8019ef6 <_printf_float+0xfe>
 8019f82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019f86:	d118      	bne.n	8019fba <_printf_float+0x1c2>
 8019f88:	2900      	cmp	r1, #0
 8019f8a:	6863      	ldr	r3, [r4, #4]
 8019f8c:	dd0b      	ble.n	8019fa6 <_printf_float+0x1ae>
 8019f8e:	6121      	str	r1, [r4, #16]
 8019f90:	b913      	cbnz	r3, 8019f98 <_printf_float+0x1a0>
 8019f92:	6822      	ldr	r2, [r4, #0]
 8019f94:	07d0      	lsls	r0, r2, #31
 8019f96:	d502      	bpl.n	8019f9e <_printf_float+0x1a6>
 8019f98:	3301      	adds	r3, #1
 8019f9a:	440b      	add	r3, r1
 8019f9c:	6123      	str	r3, [r4, #16]
 8019f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019fa0:	f04f 0900 	mov.w	r9, #0
 8019fa4:	e7de      	b.n	8019f64 <_printf_float+0x16c>
 8019fa6:	b913      	cbnz	r3, 8019fae <_printf_float+0x1b6>
 8019fa8:	6822      	ldr	r2, [r4, #0]
 8019faa:	07d2      	lsls	r2, r2, #31
 8019fac:	d501      	bpl.n	8019fb2 <_printf_float+0x1ba>
 8019fae:	3302      	adds	r3, #2
 8019fb0:	e7f4      	b.n	8019f9c <_printf_float+0x1a4>
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	e7f2      	b.n	8019f9c <_printf_float+0x1a4>
 8019fb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019fbc:	4299      	cmp	r1, r3
 8019fbe:	db05      	blt.n	8019fcc <_printf_float+0x1d4>
 8019fc0:	6823      	ldr	r3, [r4, #0]
 8019fc2:	6121      	str	r1, [r4, #16]
 8019fc4:	07d8      	lsls	r0, r3, #31
 8019fc6:	d5ea      	bpl.n	8019f9e <_printf_float+0x1a6>
 8019fc8:	1c4b      	adds	r3, r1, #1
 8019fca:	e7e7      	b.n	8019f9c <_printf_float+0x1a4>
 8019fcc:	2900      	cmp	r1, #0
 8019fce:	bfd4      	ite	le
 8019fd0:	f1c1 0202 	rsble	r2, r1, #2
 8019fd4:	2201      	movgt	r2, #1
 8019fd6:	4413      	add	r3, r2
 8019fd8:	e7e0      	b.n	8019f9c <_printf_float+0x1a4>
 8019fda:	6823      	ldr	r3, [r4, #0]
 8019fdc:	055a      	lsls	r2, r3, #21
 8019fde:	d407      	bmi.n	8019ff0 <_printf_float+0x1f8>
 8019fe0:	6923      	ldr	r3, [r4, #16]
 8019fe2:	4642      	mov	r2, r8
 8019fe4:	4631      	mov	r1, r6
 8019fe6:	4628      	mov	r0, r5
 8019fe8:	47b8      	blx	r7
 8019fea:	3001      	adds	r0, #1
 8019fec:	d12c      	bne.n	801a048 <_printf_float+0x250>
 8019fee:	e764      	b.n	8019eba <_printf_float+0xc2>
 8019ff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019ff4:	f240 80e0 	bls.w	801a1b8 <_printf_float+0x3c0>
 8019ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	2300      	movs	r3, #0
 801a000:	f7ff fb62 	bl	80196c8 <__aeabi_dcmpeq>
 801a004:	2800      	cmp	r0, #0
 801a006:	d034      	beq.n	801a072 <_printf_float+0x27a>
 801a008:	4a37      	ldr	r2, [pc, #220]	; (801a0e8 <_printf_float+0x2f0>)
 801a00a:	2301      	movs	r3, #1
 801a00c:	4631      	mov	r1, r6
 801a00e:	4628      	mov	r0, r5
 801a010:	47b8      	blx	r7
 801a012:	3001      	adds	r0, #1
 801a014:	f43f af51 	beq.w	8019eba <_printf_float+0xc2>
 801a018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a01c:	429a      	cmp	r2, r3
 801a01e:	db02      	blt.n	801a026 <_printf_float+0x22e>
 801a020:	6823      	ldr	r3, [r4, #0]
 801a022:	07d8      	lsls	r0, r3, #31
 801a024:	d510      	bpl.n	801a048 <_printf_float+0x250>
 801a026:	ee18 3a10 	vmov	r3, s16
 801a02a:	4652      	mov	r2, sl
 801a02c:	4631      	mov	r1, r6
 801a02e:	4628      	mov	r0, r5
 801a030:	47b8      	blx	r7
 801a032:	3001      	adds	r0, #1
 801a034:	f43f af41 	beq.w	8019eba <_printf_float+0xc2>
 801a038:	f04f 0800 	mov.w	r8, #0
 801a03c:	f104 091a 	add.w	r9, r4, #26
 801a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a042:	3b01      	subs	r3, #1
 801a044:	4543      	cmp	r3, r8
 801a046:	dc09      	bgt.n	801a05c <_printf_float+0x264>
 801a048:	6823      	ldr	r3, [r4, #0]
 801a04a:	079b      	lsls	r3, r3, #30
 801a04c:	f100 8105 	bmi.w	801a25a <_printf_float+0x462>
 801a050:	68e0      	ldr	r0, [r4, #12]
 801a052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a054:	4298      	cmp	r0, r3
 801a056:	bfb8      	it	lt
 801a058:	4618      	movlt	r0, r3
 801a05a:	e730      	b.n	8019ebe <_printf_float+0xc6>
 801a05c:	2301      	movs	r3, #1
 801a05e:	464a      	mov	r2, r9
 801a060:	4631      	mov	r1, r6
 801a062:	4628      	mov	r0, r5
 801a064:	47b8      	blx	r7
 801a066:	3001      	adds	r0, #1
 801a068:	f43f af27 	beq.w	8019eba <_printf_float+0xc2>
 801a06c:	f108 0801 	add.w	r8, r8, #1
 801a070:	e7e6      	b.n	801a040 <_printf_float+0x248>
 801a072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a074:	2b00      	cmp	r3, #0
 801a076:	dc39      	bgt.n	801a0ec <_printf_float+0x2f4>
 801a078:	4a1b      	ldr	r2, [pc, #108]	; (801a0e8 <_printf_float+0x2f0>)
 801a07a:	2301      	movs	r3, #1
 801a07c:	4631      	mov	r1, r6
 801a07e:	4628      	mov	r0, r5
 801a080:	47b8      	blx	r7
 801a082:	3001      	adds	r0, #1
 801a084:	f43f af19 	beq.w	8019eba <_printf_float+0xc2>
 801a088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a08c:	4313      	orrs	r3, r2
 801a08e:	d102      	bne.n	801a096 <_printf_float+0x29e>
 801a090:	6823      	ldr	r3, [r4, #0]
 801a092:	07d9      	lsls	r1, r3, #31
 801a094:	d5d8      	bpl.n	801a048 <_printf_float+0x250>
 801a096:	ee18 3a10 	vmov	r3, s16
 801a09a:	4652      	mov	r2, sl
 801a09c:	4631      	mov	r1, r6
 801a09e:	4628      	mov	r0, r5
 801a0a0:	47b8      	blx	r7
 801a0a2:	3001      	adds	r0, #1
 801a0a4:	f43f af09 	beq.w	8019eba <_printf_float+0xc2>
 801a0a8:	f04f 0900 	mov.w	r9, #0
 801a0ac:	f104 0a1a 	add.w	sl, r4, #26
 801a0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0b2:	425b      	negs	r3, r3
 801a0b4:	454b      	cmp	r3, r9
 801a0b6:	dc01      	bgt.n	801a0bc <_printf_float+0x2c4>
 801a0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0ba:	e792      	b.n	8019fe2 <_printf_float+0x1ea>
 801a0bc:	2301      	movs	r3, #1
 801a0be:	4652      	mov	r2, sl
 801a0c0:	4631      	mov	r1, r6
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	47b8      	blx	r7
 801a0c6:	3001      	adds	r0, #1
 801a0c8:	f43f aef7 	beq.w	8019eba <_printf_float+0xc2>
 801a0cc:	f109 0901 	add.w	r9, r9, #1
 801a0d0:	e7ee      	b.n	801a0b0 <_printf_float+0x2b8>
 801a0d2:	bf00      	nop
 801a0d4:	7fefffff 	.word	0x7fefffff
 801a0d8:	0805240c 	.word	0x0805240c
 801a0dc:	08052410 	.word	0x08052410
 801a0e0:	08052418 	.word	0x08052418
 801a0e4:	08052414 	.word	0x08052414
 801a0e8:	0805241c 	.word	0x0805241c
 801a0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	bfa8      	it	ge
 801a0f4:	461a      	movge	r2, r3
 801a0f6:	2a00      	cmp	r2, #0
 801a0f8:	4691      	mov	r9, r2
 801a0fa:	dc37      	bgt.n	801a16c <_printf_float+0x374>
 801a0fc:	f04f 0b00 	mov.w	fp, #0
 801a100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a104:	f104 021a 	add.w	r2, r4, #26
 801a108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a10a:	9305      	str	r3, [sp, #20]
 801a10c:	eba3 0309 	sub.w	r3, r3, r9
 801a110:	455b      	cmp	r3, fp
 801a112:	dc33      	bgt.n	801a17c <_printf_float+0x384>
 801a114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a118:	429a      	cmp	r2, r3
 801a11a:	db3b      	blt.n	801a194 <_printf_float+0x39c>
 801a11c:	6823      	ldr	r3, [r4, #0]
 801a11e:	07da      	lsls	r2, r3, #31
 801a120:	d438      	bmi.n	801a194 <_printf_float+0x39c>
 801a122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a124:	9a05      	ldr	r2, [sp, #20]
 801a126:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a128:	1a9a      	subs	r2, r3, r2
 801a12a:	eba3 0901 	sub.w	r9, r3, r1
 801a12e:	4591      	cmp	r9, r2
 801a130:	bfa8      	it	ge
 801a132:	4691      	movge	r9, r2
 801a134:	f1b9 0f00 	cmp.w	r9, #0
 801a138:	dc35      	bgt.n	801a1a6 <_printf_float+0x3ae>
 801a13a:	f04f 0800 	mov.w	r8, #0
 801a13e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a142:	f104 0a1a 	add.w	sl, r4, #26
 801a146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a14a:	1a9b      	subs	r3, r3, r2
 801a14c:	eba3 0309 	sub.w	r3, r3, r9
 801a150:	4543      	cmp	r3, r8
 801a152:	f77f af79 	ble.w	801a048 <_printf_float+0x250>
 801a156:	2301      	movs	r3, #1
 801a158:	4652      	mov	r2, sl
 801a15a:	4631      	mov	r1, r6
 801a15c:	4628      	mov	r0, r5
 801a15e:	47b8      	blx	r7
 801a160:	3001      	adds	r0, #1
 801a162:	f43f aeaa 	beq.w	8019eba <_printf_float+0xc2>
 801a166:	f108 0801 	add.w	r8, r8, #1
 801a16a:	e7ec      	b.n	801a146 <_printf_float+0x34e>
 801a16c:	4613      	mov	r3, r2
 801a16e:	4631      	mov	r1, r6
 801a170:	4642      	mov	r2, r8
 801a172:	4628      	mov	r0, r5
 801a174:	47b8      	blx	r7
 801a176:	3001      	adds	r0, #1
 801a178:	d1c0      	bne.n	801a0fc <_printf_float+0x304>
 801a17a:	e69e      	b.n	8019eba <_printf_float+0xc2>
 801a17c:	2301      	movs	r3, #1
 801a17e:	4631      	mov	r1, r6
 801a180:	4628      	mov	r0, r5
 801a182:	9205      	str	r2, [sp, #20]
 801a184:	47b8      	blx	r7
 801a186:	3001      	adds	r0, #1
 801a188:	f43f ae97 	beq.w	8019eba <_printf_float+0xc2>
 801a18c:	9a05      	ldr	r2, [sp, #20]
 801a18e:	f10b 0b01 	add.w	fp, fp, #1
 801a192:	e7b9      	b.n	801a108 <_printf_float+0x310>
 801a194:	ee18 3a10 	vmov	r3, s16
 801a198:	4652      	mov	r2, sl
 801a19a:	4631      	mov	r1, r6
 801a19c:	4628      	mov	r0, r5
 801a19e:	47b8      	blx	r7
 801a1a0:	3001      	adds	r0, #1
 801a1a2:	d1be      	bne.n	801a122 <_printf_float+0x32a>
 801a1a4:	e689      	b.n	8019eba <_printf_float+0xc2>
 801a1a6:	9a05      	ldr	r2, [sp, #20]
 801a1a8:	464b      	mov	r3, r9
 801a1aa:	4442      	add	r2, r8
 801a1ac:	4631      	mov	r1, r6
 801a1ae:	4628      	mov	r0, r5
 801a1b0:	47b8      	blx	r7
 801a1b2:	3001      	adds	r0, #1
 801a1b4:	d1c1      	bne.n	801a13a <_printf_float+0x342>
 801a1b6:	e680      	b.n	8019eba <_printf_float+0xc2>
 801a1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a1ba:	2a01      	cmp	r2, #1
 801a1bc:	dc01      	bgt.n	801a1c2 <_printf_float+0x3ca>
 801a1be:	07db      	lsls	r3, r3, #31
 801a1c0:	d538      	bpl.n	801a234 <_printf_float+0x43c>
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	4642      	mov	r2, r8
 801a1c6:	4631      	mov	r1, r6
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	47b8      	blx	r7
 801a1cc:	3001      	adds	r0, #1
 801a1ce:	f43f ae74 	beq.w	8019eba <_printf_float+0xc2>
 801a1d2:	ee18 3a10 	vmov	r3, s16
 801a1d6:	4652      	mov	r2, sl
 801a1d8:	4631      	mov	r1, r6
 801a1da:	4628      	mov	r0, r5
 801a1dc:	47b8      	blx	r7
 801a1de:	3001      	adds	r0, #1
 801a1e0:	f43f ae6b 	beq.w	8019eba <_printf_float+0xc2>
 801a1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	f7ff fa6c 	bl	80196c8 <__aeabi_dcmpeq>
 801a1f0:	b9d8      	cbnz	r0, 801a22a <_printf_float+0x432>
 801a1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1f4:	f108 0201 	add.w	r2, r8, #1
 801a1f8:	3b01      	subs	r3, #1
 801a1fa:	4631      	mov	r1, r6
 801a1fc:	4628      	mov	r0, r5
 801a1fe:	47b8      	blx	r7
 801a200:	3001      	adds	r0, #1
 801a202:	d10e      	bne.n	801a222 <_printf_float+0x42a>
 801a204:	e659      	b.n	8019eba <_printf_float+0xc2>
 801a206:	2301      	movs	r3, #1
 801a208:	4652      	mov	r2, sl
 801a20a:	4631      	mov	r1, r6
 801a20c:	4628      	mov	r0, r5
 801a20e:	47b8      	blx	r7
 801a210:	3001      	adds	r0, #1
 801a212:	f43f ae52 	beq.w	8019eba <_printf_float+0xc2>
 801a216:	f108 0801 	add.w	r8, r8, #1
 801a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a21c:	3b01      	subs	r3, #1
 801a21e:	4543      	cmp	r3, r8
 801a220:	dcf1      	bgt.n	801a206 <_printf_float+0x40e>
 801a222:	464b      	mov	r3, r9
 801a224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a228:	e6dc      	b.n	8019fe4 <_printf_float+0x1ec>
 801a22a:	f04f 0800 	mov.w	r8, #0
 801a22e:	f104 0a1a 	add.w	sl, r4, #26
 801a232:	e7f2      	b.n	801a21a <_printf_float+0x422>
 801a234:	2301      	movs	r3, #1
 801a236:	4642      	mov	r2, r8
 801a238:	e7df      	b.n	801a1fa <_printf_float+0x402>
 801a23a:	2301      	movs	r3, #1
 801a23c:	464a      	mov	r2, r9
 801a23e:	4631      	mov	r1, r6
 801a240:	4628      	mov	r0, r5
 801a242:	47b8      	blx	r7
 801a244:	3001      	adds	r0, #1
 801a246:	f43f ae38 	beq.w	8019eba <_printf_float+0xc2>
 801a24a:	f108 0801 	add.w	r8, r8, #1
 801a24e:	68e3      	ldr	r3, [r4, #12]
 801a250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a252:	1a5b      	subs	r3, r3, r1
 801a254:	4543      	cmp	r3, r8
 801a256:	dcf0      	bgt.n	801a23a <_printf_float+0x442>
 801a258:	e6fa      	b.n	801a050 <_printf_float+0x258>
 801a25a:	f04f 0800 	mov.w	r8, #0
 801a25e:	f104 0919 	add.w	r9, r4, #25
 801a262:	e7f4      	b.n	801a24e <_printf_float+0x456>

0801a264 <_printf_common>:
 801a264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a268:	4616      	mov	r6, r2
 801a26a:	4699      	mov	r9, r3
 801a26c:	688a      	ldr	r2, [r1, #8]
 801a26e:	690b      	ldr	r3, [r1, #16]
 801a270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a274:	4293      	cmp	r3, r2
 801a276:	bfb8      	it	lt
 801a278:	4613      	movlt	r3, r2
 801a27a:	6033      	str	r3, [r6, #0]
 801a27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a280:	4607      	mov	r7, r0
 801a282:	460c      	mov	r4, r1
 801a284:	b10a      	cbz	r2, 801a28a <_printf_common+0x26>
 801a286:	3301      	adds	r3, #1
 801a288:	6033      	str	r3, [r6, #0]
 801a28a:	6823      	ldr	r3, [r4, #0]
 801a28c:	0699      	lsls	r1, r3, #26
 801a28e:	bf42      	ittt	mi
 801a290:	6833      	ldrmi	r3, [r6, #0]
 801a292:	3302      	addmi	r3, #2
 801a294:	6033      	strmi	r3, [r6, #0]
 801a296:	6825      	ldr	r5, [r4, #0]
 801a298:	f015 0506 	ands.w	r5, r5, #6
 801a29c:	d106      	bne.n	801a2ac <_printf_common+0x48>
 801a29e:	f104 0a19 	add.w	sl, r4, #25
 801a2a2:	68e3      	ldr	r3, [r4, #12]
 801a2a4:	6832      	ldr	r2, [r6, #0]
 801a2a6:	1a9b      	subs	r3, r3, r2
 801a2a8:	42ab      	cmp	r3, r5
 801a2aa:	dc26      	bgt.n	801a2fa <_printf_common+0x96>
 801a2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a2b0:	1e13      	subs	r3, r2, #0
 801a2b2:	6822      	ldr	r2, [r4, #0]
 801a2b4:	bf18      	it	ne
 801a2b6:	2301      	movne	r3, #1
 801a2b8:	0692      	lsls	r2, r2, #26
 801a2ba:	d42b      	bmi.n	801a314 <_printf_common+0xb0>
 801a2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a2c0:	4649      	mov	r1, r9
 801a2c2:	4638      	mov	r0, r7
 801a2c4:	47c0      	blx	r8
 801a2c6:	3001      	adds	r0, #1
 801a2c8:	d01e      	beq.n	801a308 <_printf_common+0xa4>
 801a2ca:	6823      	ldr	r3, [r4, #0]
 801a2cc:	68e5      	ldr	r5, [r4, #12]
 801a2ce:	6832      	ldr	r2, [r6, #0]
 801a2d0:	f003 0306 	and.w	r3, r3, #6
 801a2d4:	2b04      	cmp	r3, #4
 801a2d6:	bf08      	it	eq
 801a2d8:	1aad      	subeq	r5, r5, r2
 801a2da:	68a3      	ldr	r3, [r4, #8]
 801a2dc:	6922      	ldr	r2, [r4, #16]
 801a2de:	bf0c      	ite	eq
 801a2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2e4:	2500      	movne	r5, #0
 801a2e6:	4293      	cmp	r3, r2
 801a2e8:	bfc4      	itt	gt
 801a2ea:	1a9b      	subgt	r3, r3, r2
 801a2ec:	18ed      	addgt	r5, r5, r3
 801a2ee:	2600      	movs	r6, #0
 801a2f0:	341a      	adds	r4, #26
 801a2f2:	42b5      	cmp	r5, r6
 801a2f4:	d11a      	bne.n	801a32c <_printf_common+0xc8>
 801a2f6:	2000      	movs	r0, #0
 801a2f8:	e008      	b.n	801a30c <_printf_common+0xa8>
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	4652      	mov	r2, sl
 801a2fe:	4649      	mov	r1, r9
 801a300:	4638      	mov	r0, r7
 801a302:	47c0      	blx	r8
 801a304:	3001      	adds	r0, #1
 801a306:	d103      	bne.n	801a310 <_printf_common+0xac>
 801a308:	f04f 30ff 	mov.w	r0, #4294967295
 801a30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a310:	3501      	adds	r5, #1
 801a312:	e7c6      	b.n	801a2a2 <_printf_common+0x3e>
 801a314:	18e1      	adds	r1, r4, r3
 801a316:	1c5a      	adds	r2, r3, #1
 801a318:	2030      	movs	r0, #48	; 0x30
 801a31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a31e:	4422      	add	r2, r4
 801a320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a328:	3302      	adds	r3, #2
 801a32a:	e7c7      	b.n	801a2bc <_printf_common+0x58>
 801a32c:	2301      	movs	r3, #1
 801a32e:	4622      	mov	r2, r4
 801a330:	4649      	mov	r1, r9
 801a332:	4638      	mov	r0, r7
 801a334:	47c0      	blx	r8
 801a336:	3001      	adds	r0, #1
 801a338:	d0e6      	beq.n	801a308 <_printf_common+0xa4>
 801a33a:	3601      	adds	r6, #1
 801a33c:	e7d9      	b.n	801a2f2 <_printf_common+0x8e>
	...

0801a340 <_printf_i>:
 801a340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a344:	7e0f      	ldrb	r7, [r1, #24]
 801a346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a348:	2f78      	cmp	r7, #120	; 0x78
 801a34a:	4691      	mov	r9, r2
 801a34c:	4680      	mov	r8, r0
 801a34e:	460c      	mov	r4, r1
 801a350:	469a      	mov	sl, r3
 801a352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a356:	d807      	bhi.n	801a368 <_printf_i+0x28>
 801a358:	2f62      	cmp	r7, #98	; 0x62
 801a35a:	d80a      	bhi.n	801a372 <_printf_i+0x32>
 801a35c:	2f00      	cmp	r7, #0
 801a35e:	f000 80d8 	beq.w	801a512 <_printf_i+0x1d2>
 801a362:	2f58      	cmp	r7, #88	; 0x58
 801a364:	f000 80a3 	beq.w	801a4ae <_printf_i+0x16e>
 801a368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a370:	e03a      	b.n	801a3e8 <_printf_i+0xa8>
 801a372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a376:	2b15      	cmp	r3, #21
 801a378:	d8f6      	bhi.n	801a368 <_printf_i+0x28>
 801a37a:	a101      	add	r1, pc, #4	; (adr r1, 801a380 <_printf_i+0x40>)
 801a37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a380:	0801a3d9 	.word	0x0801a3d9
 801a384:	0801a3ed 	.word	0x0801a3ed
 801a388:	0801a369 	.word	0x0801a369
 801a38c:	0801a369 	.word	0x0801a369
 801a390:	0801a369 	.word	0x0801a369
 801a394:	0801a369 	.word	0x0801a369
 801a398:	0801a3ed 	.word	0x0801a3ed
 801a39c:	0801a369 	.word	0x0801a369
 801a3a0:	0801a369 	.word	0x0801a369
 801a3a4:	0801a369 	.word	0x0801a369
 801a3a8:	0801a369 	.word	0x0801a369
 801a3ac:	0801a4f9 	.word	0x0801a4f9
 801a3b0:	0801a41d 	.word	0x0801a41d
 801a3b4:	0801a4db 	.word	0x0801a4db
 801a3b8:	0801a369 	.word	0x0801a369
 801a3bc:	0801a369 	.word	0x0801a369
 801a3c0:	0801a51b 	.word	0x0801a51b
 801a3c4:	0801a369 	.word	0x0801a369
 801a3c8:	0801a41d 	.word	0x0801a41d
 801a3cc:	0801a369 	.word	0x0801a369
 801a3d0:	0801a369 	.word	0x0801a369
 801a3d4:	0801a4e3 	.word	0x0801a4e3
 801a3d8:	682b      	ldr	r3, [r5, #0]
 801a3da:	1d1a      	adds	r2, r3, #4
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	602a      	str	r2, [r5, #0]
 801a3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3e8:	2301      	movs	r3, #1
 801a3ea:	e0a3      	b.n	801a534 <_printf_i+0x1f4>
 801a3ec:	6820      	ldr	r0, [r4, #0]
 801a3ee:	6829      	ldr	r1, [r5, #0]
 801a3f0:	0606      	lsls	r6, r0, #24
 801a3f2:	f101 0304 	add.w	r3, r1, #4
 801a3f6:	d50a      	bpl.n	801a40e <_printf_i+0xce>
 801a3f8:	680e      	ldr	r6, [r1, #0]
 801a3fa:	602b      	str	r3, [r5, #0]
 801a3fc:	2e00      	cmp	r6, #0
 801a3fe:	da03      	bge.n	801a408 <_printf_i+0xc8>
 801a400:	232d      	movs	r3, #45	; 0x2d
 801a402:	4276      	negs	r6, r6
 801a404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a408:	485e      	ldr	r0, [pc, #376]	; (801a584 <_printf_i+0x244>)
 801a40a:	230a      	movs	r3, #10
 801a40c:	e019      	b.n	801a442 <_printf_i+0x102>
 801a40e:	680e      	ldr	r6, [r1, #0]
 801a410:	602b      	str	r3, [r5, #0]
 801a412:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a416:	bf18      	it	ne
 801a418:	b236      	sxthne	r6, r6
 801a41a:	e7ef      	b.n	801a3fc <_printf_i+0xbc>
 801a41c:	682b      	ldr	r3, [r5, #0]
 801a41e:	6820      	ldr	r0, [r4, #0]
 801a420:	1d19      	adds	r1, r3, #4
 801a422:	6029      	str	r1, [r5, #0]
 801a424:	0601      	lsls	r1, r0, #24
 801a426:	d501      	bpl.n	801a42c <_printf_i+0xec>
 801a428:	681e      	ldr	r6, [r3, #0]
 801a42a:	e002      	b.n	801a432 <_printf_i+0xf2>
 801a42c:	0646      	lsls	r6, r0, #25
 801a42e:	d5fb      	bpl.n	801a428 <_printf_i+0xe8>
 801a430:	881e      	ldrh	r6, [r3, #0]
 801a432:	4854      	ldr	r0, [pc, #336]	; (801a584 <_printf_i+0x244>)
 801a434:	2f6f      	cmp	r7, #111	; 0x6f
 801a436:	bf0c      	ite	eq
 801a438:	2308      	moveq	r3, #8
 801a43a:	230a      	movne	r3, #10
 801a43c:	2100      	movs	r1, #0
 801a43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a442:	6865      	ldr	r5, [r4, #4]
 801a444:	60a5      	str	r5, [r4, #8]
 801a446:	2d00      	cmp	r5, #0
 801a448:	bfa2      	ittt	ge
 801a44a:	6821      	ldrge	r1, [r4, #0]
 801a44c:	f021 0104 	bicge.w	r1, r1, #4
 801a450:	6021      	strge	r1, [r4, #0]
 801a452:	b90e      	cbnz	r6, 801a458 <_printf_i+0x118>
 801a454:	2d00      	cmp	r5, #0
 801a456:	d04d      	beq.n	801a4f4 <_printf_i+0x1b4>
 801a458:	4615      	mov	r5, r2
 801a45a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a45e:	fb03 6711 	mls	r7, r3, r1, r6
 801a462:	5dc7      	ldrb	r7, [r0, r7]
 801a464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a468:	4637      	mov	r7, r6
 801a46a:	42bb      	cmp	r3, r7
 801a46c:	460e      	mov	r6, r1
 801a46e:	d9f4      	bls.n	801a45a <_printf_i+0x11a>
 801a470:	2b08      	cmp	r3, #8
 801a472:	d10b      	bne.n	801a48c <_printf_i+0x14c>
 801a474:	6823      	ldr	r3, [r4, #0]
 801a476:	07de      	lsls	r6, r3, #31
 801a478:	d508      	bpl.n	801a48c <_printf_i+0x14c>
 801a47a:	6923      	ldr	r3, [r4, #16]
 801a47c:	6861      	ldr	r1, [r4, #4]
 801a47e:	4299      	cmp	r1, r3
 801a480:	bfde      	ittt	le
 801a482:	2330      	movle	r3, #48	; 0x30
 801a484:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a488:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a48c:	1b52      	subs	r2, r2, r5
 801a48e:	6122      	str	r2, [r4, #16]
 801a490:	f8cd a000 	str.w	sl, [sp]
 801a494:	464b      	mov	r3, r9
 801a496:	aa03      	add	r2, sp, #12
 801a498:	4621      	mov	r1, r4
 801a49a:	4640      	mov	r0, r8
 801a49c:	f7ff fee2 	bl	801a264 <_printf_common>
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d14c      	bne.n	801a53e <_printf_i+0x1fe>
 801a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a4a8:	b004      	add	sp, #16
 801a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4ae:	4835      	ldr	r0, [pc, #212]	; (801a584 <_printf_i+0x244>)
 801a4b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a4b4:	6829      	ldr	r1, [r5, #0]
 801a4b6:	6823      	ldr	r3, [r4, #0]
 801a4b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801a4bc:	6029      	str	r1, [r5, #0]
 801a4be:	061d      	lsls	r5, r3, #24
 801a4c0:	d514      	bpl.n	801a4ec <_printf_i+0x1ac>
 801a4c2:	07df      	lsls	r7, r3, #31
 801a4c4:	bf44      	itt	mi
 801a4c6:	f043 0320 	orrmi.w	r3, r3, #32
 801a4ca:	6023      	strmi	r3, [r4, #0]
 801a4cc:	b91e      	cbnz	r6, 801a4d6 <_printf_i+0x196>
 801a4ce:	6823      	ldr	r3, [r4, #0]
 801a4d0:	f023 0320 	bic.w	r3, r3, #32
 801a4d4:	6023      	str	r3, [r4, #0]
 801a4d6:	2310      	movs	r3, #16
 801a4d8:	e7b0      	b.n	801a43c <_printf_i+0xfc>
 801a4da:	6823      	ldr	r3, [r4, #0]
 801a4dc:	f043 0320 	orr.w	r3, r3, #32
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	2378      	movs	r3, #120	; 0x78
 801a4e4:	4828      	ldr	r0, [pc, #160]	; (801a588 <_printf_i+0x248>)
 801a4e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a4ea:	e7e3      	b.n	801a4b4 <_printf_i+0x174>
 801a4ec:	0659      	lsls	r1, r3, #25
 801a4ee:	bf48      	it	mi
 801a4f0:	b2b6      	uxthmi	r6, r6
 801a4f2:	e7e6      	b.n	801a4c2 <_printf_i+0x182>
 801a4f4:	4615      	mov	r5, r2
 801a4f6:	e7bb      	b.n	801a470 <_printf_i+0x130>
 801a4f8:	682b      	ldr	r3, [r5, #0]
 801a4fa:	6826      	ldr	r6, [r4, #0]
 801a4fc:	6961      	ldr	r1, [r4, #20]
 801a4fe:	1d18      	adds	r0, r3, #4
 801a500:	6028      	str	r0, [r5, #0]
 801a502:	0635      	lsls	r5, r6, #24
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	d501      	bpl.n	801a50c <_printf_i+0x1cc>
 801a508:	6019      	str	r1, [r3, #0]
 801a50a:	e002      	b.n	801a512 <_printf_i+0x1d2>
 801a50c:	0670      	lsls	r0, r6, #25
 801a50e:	d5fb      	bpl.n	801a508 <_printf_i+0x1c8>
 801a510:	8019      	strh	r1, [r3, #0]
 801a512:	2300      	movs	r3, #0
 801a514:	6123      	str	r3, [r4, #16]
 801a516:	4615      	mov	r5, r2
 801a518:	e7ba      	b.n	801a490 <_printf_i+0x150>
 801a51a:	682b      	ldr	r3, [r5, #0]
 801a51c:	1d1a      	adds	r2, r3, #4
 801a51e:	602a      	str	r2, [r5, #0]
 801a520:	681d      	ldr	r5, [r3, #0]
 801a522:	6862      	ldr	r2, [r4, #4]
 801a524:	2100      	movs	r1, #0
 801a526:	4628      	mov	r0, r5
 801a528:	f7fe fc5a 	bl	8018de0 <memchr>
 801a52c:	b108      	cbz	r0, 801a532 <_printf_i+0x1f2>
 801a52e:	1b40      	subs	r0, r0, r5
 801a530:	6060      	str	r0, [r4, #4]
 801a532:	6863      	ldr	r3, [r4, #4]
 801a534:	6123      	str	r3, [r4, #16]
 801a536:	2300      	movs	r3, #0
 801a538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a53c:	e7a8      	b.n	801a490 <_printf_i+0x150>
 801a53e:	6923      	ldr	r3, [r4, #16]
 801a540:	462a      	mov	r2, r5
 801a542:	4649      	mov	r1, r9
 801a544:	4640      	mov	r0, r8
 801a546:	47d0      	blx	sl
 801a548:	3001      	adds	r0, #1
 801a54a:	d0ab      	beq.n	801a4a4 <_printf_i+0x164>
 801a54c:	6823      	ldr	r3, [r4, #0]
 801a54e:	079b      	lsls	r3, r3, #30
 801a550:	d413      	bmi.n	801a57a <_printf_i+0x23a>
 801a552:	68e0      	ldr	r0, [r4, #12]
 801a554:	9b03      	ldr	r3, [sp, #12]
 801a556:	4298      	cmp	r0, r3
 801a558:	bfb8      	it	lt
 801a55a:	4618      	movlt	r0, r3
 801a55c:	e7a4      	b.n	801a4a8 <_printf_i+0x168>
 801a55e:	2301      	movs	r3, #1
 801a560:	4632      	mov	r2, r6
 801a562:	4649      	mov	r1, r9
 801a564:	4640      	mov	r0, r8
 801a566:	47d0      	blx	sl
 801a568:	3001      	adds	r0, #1
 801a56a:	d09b      	beq.n	801a4a4 <_printf_i+0x164>
 801a56c:	3501      	adds	r5, #1
 801a56e:	68e3      	ldr	r3, [r4, #12]
 801a570:	9903      	ldr	r1, [sp, #12]
 801a572:	1a5b      	subs	r3, r3, r1
 801a574:	42ab      	cmp	r3, r5
 801a576:	dcf2      	bgt.n	801a55e <_printf_i+0x21e>
 801a578:	e7eb      	b.n	801a552 <_printf_i+0x212>
 801a57a:	2500      	movs	r5, #0
 801a57c:	f104 0619 	add.w	r6, r4, #25
 801a580:	e7f5      	b.n	801a56e <_printf_i+0x22e>
 801a582:	bf00      	nop
 801a584:	0805241e 	.word	0x0805241e
 801a588:	0805242f 	.word	0x0805242f

0801a58c <_scanf_float>:
 801a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a590:	b087      	sub	sp, #28
 801a592:	4617      	mov	r7, r2
 801a594:	9303      	str	r3, [sp, #12]
 801a596:	688b      	ldr	r3, [r1, #8]
 801a598:	1e5a      	subs	r2, r3, #1
 801a59a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a59e:	bf83      	ittte	hi
 801a5a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a5a4:	195b      	addhi	r3, r3, r5
 801a5a6:	9302      	strhi	r3, [sp, #8]
 801a5a8:	2300      	movls	r3, #0
 801a5aa:	bf86      	itte	hi
 801a5ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a5b0:	608b      	strhi	r3, [r1, #8]
 801a5b2:	9302      	strls	r3, [sp, #8]
 801a5b4:	680b      	ldr	r3, [r1, #0]
 801a5b6:	468b      	mov	fp, r1
 801a5b8:	2500      	movs	r5, #0
 801a5ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a5be:	f84b 3b1c 	str.w	r3, [fp], #28
 801a5c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a5c6:	4680      	mov	r8, r0
 801a5c8:	460c      	mov	r4, r1
 801a5ca:	465e      	mov	r6, fp
 801a5cc:	46aa      	mov	sl, r5
 801a5ce:	46a9      	mov	r9, r5
 801a5d0:	9501      	str	r5, [sp, #4]
 801a5d2:	68a2      	ldr	r2, [r4, #8]
 801a5d4:	b152      	cbz	r2, 801a5ec <_scanf_float+0x60>
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	781b      	ldrb	r3, [r3, #0]
 801a5da:	2b4e      	cmp	r3, #78	; 0x4e
 801a5dc:	d864      	bhi.n	801a6a8 <_scanf_float+0x11c>
 801a5de:	2b40      	cmp	r3, #64	; 0x40
 801a5e0:	d83c      	bhi.n	801a65c <_scanf_float+0xd0>
 801a5e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a5e6:	b2c8      	uxtb	r0, r1
 801a5e8:	280e      	cmp	r0, #14
 801a5ea:	d93a      	bls.n	801a662 <_scanf_float+0xd6>
 801a5ec:	f1b9 0f00 	cmp.w	r9, #0
 801a5f0:	d003      	beq.n	801a5fa <_scanf_float+0x6e>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a5f8:	6023      	str	r3, [r4, #0]
 801a5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a5fe:	f1ba 0f01 	cmp.w	sl, #1
 801a602:	f200 8113 	bhi.w	801a82c <_scanf_float+0x2a0>
 801a606:	455e      	cmp	r6, fp
 801a608:	f200 8105 	bhi.w	801a816 <_scanf_float+0x28a>
 801a60c:	2501      	movs	r5, #1
 801a60e:	4628      	mov	r0, r5
 801a610:	b007      	add	sp, #28
 801a612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a616:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a61a:	2a0d      	cmp	r2, #13
 801a61c:	d8e6      	bhi.n	801a5ec <_scanf_float+0x60>
 801a61e:	a101      	add	r1, pc, #4	; (adr r1, 801a624 <_scanf_float+0x98>)
 801a620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a624:	0801a763 	.word	0x0801a763
 801a628:	0801a5ed 	.word	0x0801a5ed
 801a62c:	0801a5ed 	.word	0x0801a5ed
 801a630:	0801a5ed 	.word	0x0801a5ed
 801a634:	0801a7c3 	.word	0x0801a7c3
 801a638:	0801a79b 	.word	0x0801a79b
 801a63c:	0801a5ed 	.word	0x0801a5ed
 801a640:	0801a5ed 	.word	0x0801a5ed
 801a644:	0801a771 	.word	0x0801a771
 801a648:	0801a5ed 	.word	0x0801a5ed
 801a64c:	0801a5ed 	.word	0x0801a5ed
 801a650:	0801a5ed 	.word	0x0801a5ed
 801a654:	0801a5ed 	.word	0x0801a5ed
 801a658:	0801a729 	.word	0x0801a729
 801a65c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a660:	e7db      	b.n	801a61a <_scanf_float+0x8e>
 801a662:	290e      	cmp	r1, #14
 801a664:	d8c2      	bhi.n	801a5ec <_scanf_float+0x60>
 801a666:	a001      	add	r0, pc, #4	; (adr r0, 801a66c <_scanf_float+0xe0>)
 801a668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a66c:	0801a71b 	.word	0x0801a71b
 801a670:	0801a5ed 	.word	0x0801a5ed
 801a674:	0801a71b 	.word	0x0801a71b
 801a678:	0801a7af 	.word	0x0801a7af
 801a67c:	0801a5ed 	.word	0x0801a5ed
 801a680:	0801a6c9 	.word	0x0801a6c9
 801a684:	0801a705 	.word	0x0801a705
 801a688:	0801a705 	.word	0x0801a705
 801a68c:	0801a705 	.word	0x0801a705
 801a690:	0801a705 	.word	0x0801a705
 801a694:	0801a705 	.word	0x0801a705
 801a698:	0801a705 	.word	0x0801a705
 801a69c:	0801a705 	.word	0x0801a705
 801a6a0:	0801a705 	.word	0x0801a705
 801a6a4:	0801a705 	.word	0x0801a705
 801a6a8:	2b6e      	cmp	r3, #110	; 0x6e
 801a6aa:	d809      	bhi.n	801a6c0 <_scanf_float+0x134>
 801a6ac:	2b60      	cmp	r3, #96	; 0x60
 801a6ae:	d8b2      	bhi.n	801a616 <_scanf_float+0x8a>
 801a6b0:	2b54      	cmp	r3, #84	; 0x54
 801a6b2:	d077      	beq.n	801a7a4 <_scanf_float+0x218>
 801a6b4:	2b59      	cmp	r3, #89	; 0x59
 801a6b6:	d199      	bne.n	801a5ec <_scanf_float+0x60>
 801a6b8:	2d07      	cmp	r5, #7
 801a6ba:	d197      	bne.n	801a5ec <_scanf_float+0x60>
 801a6bc:	2508      	movs	r5, #8
 801a6be:	e029      	b.n	801a714 <_scanf_float+0x188>
 801a6c0:	2b74      	cmp	r3, #116	; 0x74
 801a6c2:	d06f      	beq.n	801a7a4 <_scanf_float+0x218>
 801a6c4:	2b79      	cmp	r3, #121	; 0x79
 801a6c6:	e7f6      	b.n	801a6b6 <_scanf_float+0x12a>
 801a6c8:	6821      	ldr	r1, [r4, #0]
 801a6ca:	05c8      	lsls	r0, r1, #23
 801a6cc:	d51a      	bpl.n	801a704 <_scanf_float+0x178>
 801a6ce:	9b02      	ldr	r3, [sp, #8]
 801a6d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a6d4:	6021      	str	r1, [r4, #0]
 801a6d6:	f109 0901 	add.w	r9, r9, #1
 801a6da:	b11b      	cbz	r3, 801a6e4 <_scanf_float+0x158>
 801a6dc:	3b01      	subs	r3, #1
 801a6de:	3201      	adds	r2, #1
 801a6e0:	9302      	str	r3, [sp, #8]
 801a6e2:	60a2      	str	r2, [r4, #8]
 801a6e4:	68a3      	ldr	r3, [r4, #8]
 801a6e6:	3b01      	subs	r3, #1
 801a6e8:	60a3      	str	r3, [r4, #8]
 801a6ea:	6923      	ldr	r3, [r4, #16]
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	6123      	str	r3, [r4, #16]
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	3b01      	subs	r3, #1
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	607b      	str	r3, [r7, #4]
 801a6f8:	f340 8084 	ble.w	801a804 <_scanf_float+0x278>
 801a6fc:	683b      	ldr	r3, [r7, #0]
 801a6fe:	3301      	adds	r3, #1
 801a700:	603b      	str	r3, [r7, #0]
 801a702:	e766      	b.n	801a5d2 <_scanf_float+0x46>
 801a704:	eb1a 0f05 	cmn.w	sl, r5
 801a708:	f47f af70 	bne.w	801a5ec <_scanf_float+0x60>
 801a70c:	6822      	ldr	r2, [r4, #0]
 801a70e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a712:	6022      	str	r2, [r4, #0]
 801a714:	f806 3b01 	strb.w	r3, [r6], #1
 801a718:	e7e4      	b.n	801a6e4 <_scanf_float+0x158>
 801a71a:	6822      	ldr	r2, [r4, #0]
 801a71c:	0610      	lsls	r0, r2, #24
 801a71e:	f57f af65 	bpl.w	801a5ec <_scanf_float+0x60>
 801a722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a726:	e7f4      	b.n	801a712 <_scanf_float+0x186>
 801a728:	f1ba 0f00 	cmp.w	sl, #0
 801a72c:	d10e      	bne.n	801a74c <_scanf_float+0x1c0>
 801a72e:	f1b9 0f00 	cmp.w	r9, #0
 801a732:	d10e      	bne.n	801a752 <_scanf_float+0x1c6>
 801a734:	6822      	ldr	r2, [r4, #0]
 801a736:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a73a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a73e:	d108      	bne.n	801a752 <_scanf_float+0x1c6>
 801a740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a744:	6022      	str	r2, [r4, #0]
 801a746:	f04f 0a01 	mov.w	sl, #1
 801a74a:	e7e3      	b.n	801a714 <_scanf_float+0x188>
 801a74c:	f1ba 0f02 	cmp.w	sl, #2
 801a750:	d055      	beq.n	801a7fe <_scanf_float+0x272>
 801a752:	2d01      	cmp	r5, #1
 801a754:	d002      	beq.n	801a75c <_scanf_float+0x1d0>
 801a756:	2d04      	cmp	r5, #4
 801a758:	f47f af48 	bne.w	801a5ec <_scanf_float+0x60>
 801a75c:	3501      	adds	r5, #1
 801a75e:	b2ed      	uxtb	r5, r5
 801a760:	e7d8      	b.n	801a714 <_scanf_float+0x188>
 801a762:	f1ba 0f01 	cmp.w	sl, #1
 801a766:	f47f af41 	bne.w	801a5ec <_scanf_float+0x60>
 801a76a:	f04f 0a02 	mov.w	sl, #2
 801a76e:	e7d1      	b.n	801a714 <_scanf_float+0x188>
 801a770:	b97d      	cbnz	r5, 801a792 <_scanf_float+0x206>
 801a772:	f1b9 0f00 	cmp.w	r9, #0
 801a776:	f47f af3c 	bne.w	801a5f2 <_scanf_float+0x66>
 801a77a:	6822      	ldr	r2, [r4, #0]
 801a77c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a780:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a784:	f47f af39 	bne.w	801a5fa <_scanf_float+0x6e>
 801a788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a78c:	6022      	str	r2, [r4, #0]
 801a78e:	2501      	movs	r5, #1
 801a790:	e7c0      	b.n	801a714 <_scanf_float+0x188>
 801a792:	2d03      	cmp	r5, #3
 801a794:	d0e2      	beq.n	801a75c <_scanf_float+0x1d0>
 801a796:	2d05      	cmp	r5, #5
 801a798:	e7de      	b.n	801a758 <_scanf_float+0x1cc>
 801a79a:	2d02      	cmp	r5, #2
 801a79c:	f47f af26 	bne.w	801a5ec <_scanf_float+0x60>
 801a7a0:	2503      	movs	r5, #3
 801a7a2:	e7b7      	b.n	801a714 <_scanf_float+0x188>
 801a7a4:	2d06      	cmp	r5, #6
 801a7a6:	f47f af21 	bne.w	801a5ec <_scanf_float+0x60>
 801a7aa:	2507      	movs	r5, #7
 801a7ac:	e7b2      	b.n	801a714 <_scanf_float+0x188>
 801a7ae:	6822      	ldr	r2, [r4, #0]
 801a7b0:	0591      	lsls	r1, r2, #22
 801a7b2:	f57f af1b 	bpl.w	801a5ec <_scanf_float+0x60>
 801a7b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a7ba:	6022      	str	r2, [r4, #0]
 801a7bc:	f8cd 9004 	str.w	r9, [sp, #4]
 801a7c0:	e7a8      	b.n	801a714 <_scanf_float+0x188>
 801a7c2:	6822      	ldr	r2, [r4, #0]
 801a7c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a7c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a7cc:	d006      	beq.n	801a7dc <_scanf_float+0x250>
 801a7ce:	0550      	lsls	r0, r2, #21
 801a7d0:	f57f af0c 	bpl.w	801a5ec <_scanf_float+0x60>
 801a7d4:	f1b9 0f00 	cmp.w	r9, #0
 801a7d8:	f43f af0f 	beq.w	801a5fa <_scanf_float+0x6e>
 801a7dc:	0591      	lsls	r1, r2, #22
 801a7de:	bf58      	it	pl
 801a7e0:	9901      	ldrpl	r1, [sp, #4]
 801a7e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a7e6:	bf58      	it	pl
 801a7e8:	eba9 0101 	subpl.w	r1, r9, r1
 801a7ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a7f0:	bf58      	it	pl
 801a7f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a7f6:	6022      	str	r2, [r4, #0]
 801a7f8:	f04f 0900 	mov.w	r9, #0
 801a7fc:	e78a      	b.n	801a714 <_scanf_float+0x188>
 801a7fe:	f04f 0a03 	mov.w	sl, #3
 801a802:	e787      	b.n	801a714 <_scanf_float+0x188>
 801a804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a808:	4639      	mov	r1, r7
 801a80a:	4640      	mov	r0, r8
 801a80c:	4798      	blx	r3
 801a80e:	2800      	cmp	r0, #0
 801a810:	f43f aedf 	beq.w	801a5d2 <_scanf_float+0x46>
 801a814:	e6ea      	b.n	801a5ec <_scanf_float+0x60>
 801a816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a81a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a81e:	463a      	mov	r2, r7
 801a820:	4640      	mov	r0, r8
 801a822:	4798      	blx	r3
 801a824:	6923      	ldr	r3, [r4, #16]
 801a826:	3b01      	subs	r3, #1
 801a828:	6123      	str	r3, [r4, #16]
 801a82a:	e6ec      	b.n	801a606 <_scanf_float+0x7a>
 801a82c:	1e6b      	subs	r3, r5, #1
 801a82e:	2b06      	cmp	r3, #6
 801a830:	d825      	bhi.n	801a87e <_scanf_float+0x2f2>
 801a832:	2d02      	cmp	r5, #2
 801a834:	d836      	bhi.n	801a8a4 <_scanf_float+0x318>
 801a836:	455e      	cmp	r6, fp
 801a838:	f67f aee8 	bls.w	801a60c <_scanf_float+0x80>
 801a83c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a844:	463a      	mov	r2, r7
 801a846:	4640      	mov	r0, r8
 801a848:	4798      	blx	r3
 801a84a:	6923      	ldr	r3, [r4, #16]
 801a84c:	3b01      	subs	r3, #1
 801a84e:	6123      	str	r3, [r4, #16]
 801a850:	e7f1      	b.n	801a836 <_scanf_float+0x2aa>
 801a852:	9802      	ldr	r0, [sp, #8]
 801a854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a858:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a85c:	9002      	str	r0, [sp, #8]
 801a85e:	463a      	mov	r2, r7
 801a860:	4640      	mov	r0, r8
 801a862:	4798      	blx	r3
 801a864:	6923      	ldr	r3, [r4, #16]
 801a866:	3b01      	subs	r3, #1
 801a868:	6123      	str	r3, [r4, #16]
 801a86a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a86e:	fa5f fa8a 	uxtb.w	sl, sl
 801a872:	f1ba 0f02 	cmp.w	sl, #2
 801a876:	d1ec      	bne.n	801a852 <_scanf_float+0x2c6>
 801a878:	3d03      	subs	r5, #3
 801a87a:	b2ed      	uxtb	r5, r5
 801a87c:	1b76      	subs	r6, r6, r5
 801a87e:	6823      	ldr	r3, [r4, #0]
 801a880:	05da      	lsls	r2, r3, #23
 801a882:	d52f      	bpl.n	801a8e4 <_scanf_float+0x358>
 801a884:	055b      	lsls	r3, r3, #21
 801a886:	d510      	bpl.n	801a8aa <_scanf_float+0x31e>
 801a888:	455e      	cmp	r6, fp
 801a88a:	f67f aebf 	bls.w	801a60c <_scanf_float+0x80>
 801a88e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a896:	463a      	mov	r2, r7
 801a898:	4640      	mov	r0, r8
 801a89a:	4798      	blx	r3
 801a89c:	6923      	ldr	r3, [r4, #16]
 801a89e:	3b01      	subs	r3, #1
 801a8a0:	6123      	str	r3, [r4, #16]
 801a8a2:	e7f1      	b.n	801a888 <_scanf_float+0x2fc>
 801a8a4:	46aa      	mov	sl, r5
 801a8a6:	9602      	str	r6, [sp, #8]
 801a8a8:	e7df      	b.n	801a86a <_scanf_float+0x2de>
 801a8aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a8ae:	6923      	ldr	r3, [r4, #16]
 801a8b0:	2965      	cmp	r1, #101	; 0x65
 801a8b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a8b6:	f106 35ff 	add.w	r5, r6, #4294967295
 801a8ba:	6123      	str	r3, [r4, #16]
 801a8bc:	d00c      	beq.n	801a8d8 <_scanf_float+0x34c>
 801a8be:	2945      	cmp	r1, #69	; 0x45
 801a8c0:	d00a      	beq.n	801a8d8 <_scanf_float+0x34c>
 801a8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a8c6:	463a      	mov	r2, r7
 801a8c8:	4640      	mov	r0, r8
 801a8ca:	4798      	blx	r3
 801a8cc:	6923      	ldr	r3, [r4, #16]
 801a8ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a8d2:	3b01      	subs	r3, #1
 801a8d4:	1eb5      	subs	r5, r6, #2
 801a8d6:	6123      	str	r3, [r4, #16]
 801a8d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a8dc:	463a      	mov	r2, r7
 801a8de:	4640      	mov	r0, r8
 801a8e0:	4798      	blx	r3
 801a8e2:	462e      	mov	r6, r5
 801a8e4:	6825      	ldr	r5, [r4, #0]
 801a8e6:	f015 0510 	ands.w	r5, r5, #16
 801a8ea:	d159      	bne.n	801a9a0 <_scanf_float+0x414>
 801a8ec:	7035      	strb	r5, [r6, #0]
 801a8ee:	6823      	ldr	r3, [r4, #0]
 801a8f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a8f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a8f8:	d11b      	bne.n	801a932 <_scanf_float+0x3a6>
 801a8fa:	9b01      	ldr	r3, [sp, #4]
 801a8fc:	454b      	cmp	r3, r9
 801a8fe:	eba3 0209 	sub.w	r2, r3, r9
 801a902:	d123      	bne.n	801a94c <_scanf_float+0x3c0>
 801a904:	2200      	movs	r2, #0
 801a906:	4659      	mov	r1, fp
 801a908:	4640      	mov	r0, r8
 801a90a:	f000 fe97 	bl	801b63c <_strtod_r>
 801a90e:	6822      	ldr	r2, [r4, #0]
 801a910:	9b03      	ldr	r3, [sp, #12]
 801a912:	f012 0f02 	tst.w	r2, #2
 801a916:	ec57 6b10 	vmov	r6, r7, d0
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	d021      	beq.n	801a962 <_scanf_float+0x3d6>
 801a91e:	9903      	ldr	r1, [sp, #12]
 801a920:	1d1a      	adds	r2, r3, #4
 801a922:	600a      	str	r2, [r1, #0]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	e9c3 6700 	strd	r6, r7, [r3]
 801a92a:	68e3      	ldr	r3, [r4, #12]
 801a92c:	3301      	adds	r3, #1
 801a92e:	60e3      	str	r3, [r4, #12]
 801a930:	e66d      	b.n	801a60e <_scanf_float+0x82>
 801a932:	9b04      	ldr	r3, [sp, #16]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d0e5      	beq.n	801a904 <_scanf_float+0x378>
 801a938:	9905      	ldr	r1, [sp, #20]
 801a93a:	230a      	movs	r3, #10
 801a93c:	462a      	mov	r2, r5
 801a93e:	3101      	adds	r1, #1
 801a940:	4640      	mov	r0, r8
 801a942:	f000 ff03 	bl	801b74c <_strtol_r>
 801a946:	9b04      	ldr	r3, [sp, #16]
 801a948:	9e05      	ldr	r6, [sp, #20]
 801a94a:	1ac2      	subs	r2, r0, r3
 801a94c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a950:	429e      	cmp	r6, r3
 801a952:	bf28      	it	cs
 801a954:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a958:	4912      	ldr	r1, [pc, #72]	; (801a9a4 <_scanf_float+0x418>)
 801a95a:	4630      	mov	r0, r6
 801a95c:	f000 f82c 	bl	801a9b8 <siprintf>
 801a960:	e7d0      	b.n	801a904 <_scanf_float+0x378>
 801a962:	9903      	ldr	r1, [sp, #12]
 801a964:	f012 0f04 	tst.w	r2, #4
 801a968:	f103 0204 	add.w	r2, r3, #4
 801a96c:	600a      	str	r2, [r1, #0]
 801a96e:	d1d9      	bne.n	801a924 <_scanf_float+0x398>
 801a970:	f8d3 8000 	ldr.w	r8, [r3]
 801a974:	ee10 2a10 	vmov	r2, s0
 801a978:	ee10 0a10 	vmov	r0, s0
 801a97c:	463b      	mov	r3, r7
 801a97e:	4639      	mov	r1, r7
 801a980:	f7fe fed4 	bl	801972c <__aeabi_dcmpun>
 801a984:	b128      	cbz	r0, 801a992 <_scanf_float+0x406>
 801a986:	4808      	ldr	r0, [pc, #32]	; (801a9a8 <_scanf_float+0x41c>)
 801a988:	f000 f810 	bl	801a9ac <nanf>
 801a98c:	ed88 0a00 	vstr	s0, [r8]
 801a990:	e7cb      	b.n	801a92a <_scanf_float+0x39e>
 801a992:	4630      	mov	r0, r6
 801a994:	4639      	mov	r1, r7
 801a996:	f7fe ff27 	bl	80197e8 <__aeabi_d2f>
 801a99a:	f8c8 0000 	str.w	r0, [r8]
 801a99e:	e7c4      	b.n	801a92a <_scanf_float+0x39e>
 801a9a0:	2500      	movs	r5, #0
 801a9a2:	e634      	b.n	801a60e <_scanf_float+0x82>
 801a9a4:	08052440 	.word	0x08052440
 801a9a8:	08052848 	.word	0x08052848

0801a9ac <nanf>:
 801a9ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a9b4 <nanf+0x8>
 801a9b0:	4770      	bx	lr
 801a9b2:	bf00      	nop
 801a9b4:	7fc00000 	.word	0x7fc00000

0801a9b8 <siprintf>:
 801a9b8:	b40e      	push	{r1, r2, r3}
 801a9ba:	b500      	push	{lr}
 801a9bc:	b09c      	sub	sp, #112	; 0x70
 801a9be:	ab1d      	add	r3, sp, #116	; 0x74
 801a9c0:	9002      	str	r0, [sp, #8]
 801a9c2:	9006      	str	r0, [sp, #24]
 801a9c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a9c8:	4809      	ldr	r0, [pc, #36]	; (801a9f0 <siprintf+0x38>)
 801a9ca:	9107      	str	r1, [sp, #28]
 801a9cc:	9104      	str	r1, [sp, #16]
 801a9ce:	4909      	ldr	r1, [pc, #36]	; (801a9f4 <siprintf+0x3c>)
 801a9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9d4:	9105      	str	r1, [sp, #20]
 801a9d6:	6800      	ldr	r0, [r0, #0]
 801a9d8:	9301      	str	r3, [sp, #4]
 801a9da:	a902      	add	r1, sp, #8
 801a9dc:	f002 feee 	bl	801d7bc <_svfiprintf_r>
 801a9e0:	9b02      	ldr	r3, [sp, #8]
 801a9e2:	2200      	movs	r2, #0
 801a9e4:	701a      	strb	r2, [r3, #0]
 801a9e6:	b01c      	add	sp, #112	; 0x70
 801a9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9ec:	b003      	add	sp, #12
 801a9ee:	4770      	bx	lr
 801a9f0:	20000064 	.word	0x20000064
 801a9f4:	ffff0208 	.word	0xffff0208

0801a9f8 <sulp>:
 801a9f8:	b570      	push	{r4, r5, r6, lr}
 801a9fa:	4604      	mov	r4, r0
 801a9fc:	460d      	mov	r5, r1
 801a9fe:	ec45 4b10 	vmov	d0, r4, r5
 801aa02:	4616      	mov	r6, r2
 801aa04:	f002 fc38 	bl	801d278 <__ulp>
 801aa08:	ec51 0b10 	vmov	r0, r1, d0
 801aa0c:	b17e      	cbz	r6, 801aa2e <sulp+0x36>
 801aa0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801aa12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	dd09      	ble.n	801aa2e <sulp+0x36>
 801aa1a:	051b      	lsls	r3, r3, #20
 801aa1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801aa20:	2400      	movs	r4, #0
 801aa22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801aa26:	4622      	mov	r2, r4
 801aa28:	462b      	mov	r3, r5
 801aa2a:	f7fe fbe5 	bl	80191f8 <__aeabi_dmul>
 801aa2e:	bd70      	pop	{r4, r5, r6, pc}

0801aa30 <_strtod_l>:
 801aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa34:	ed2d 8b02 	vpush	{d8}
 801aa38:	b09d      	sub	sp, #116	; 0x74
 801aa3a:	461f      	mov	r7, r3
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	9318      	str	r3, [sp, #96]	; 0x60
 801aa40:	4ba2      	ldr	r3, [pc, #648]	; (801accc <_strtod_l+0x29c>)
 801aa42:	9213      	str	r2, [sp, #76]	; 0x4c
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	9305      	str	r3, [sp, #20]
 801aa48:	4604      	mov	r4, r0
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	4688      	mov	r8, r1
 801aa4e:	f7fe f9bf 	bl	8018dd0 <strlen>
 801aa52:	f04f 0a00 	mov.w	sl, #0
 801aa56:	4605      	mov	r5, r0
 801aa58:	f04f 0b00 	mov.w	fp, #0
 801aa5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801aa60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa62:	781a      	ldrb	r2, [r3, #0]
 801aa64:	2a2b      	cmp	r2, #43	; 0x2b
 801aa66:	d04e      	beq.n	801ab06 <_strtod_l+0xd6>
 801aa68:	d83b      	bhi.n	801aae2 <_strtod_l+0xb2>
 801aa6a:	2a0d      	cmp	r2, #13
 801aa6c:	d834      	bhi.n	801aad8 <_strtod_l+0xa8>
 801aa6e:	2a08      	cmp	r2, #8
 801aa70:	d834      	bhi.n	801aadc <_strtod_l+0xac>
 801aa72:	2a00      	cmp	r2, #0
 801aa74:	d03e      	beq.n	801aaf4 <_strtod_l+0xc4>
 801aa76:	2300      	movs	r3, #0
 801aa78:	930a      	str	r3, [sp, #40]	; 0x28
 801aa7a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801aa7c:	7833      	ldrb	r3, [r6, #0]
 801aa7e:	2b30      	cmp	r3, #48	; 0x30
 801aa80:	f040 80b0 	bne.w	801abe4 <_strtod_l+0x1b4>
 801aa84:	7873      	ldrb	r3, [r6, #1]
 801aa86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aa8a:	2b58      	cmp	r3, #88	; 0x58
 801aa8c:	d168      	bne.n	801ab60 <_strtod_l+0x130>
 801aa8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa90:	9301      	str	r3, [sp, #4]
 801aa92:	ab18      	add	r3, sp, #96	; 0x60
 801aa94:	9702      	str	r7, [sp, #8]
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	4a8d      	ldr	r2, [pc, #564]	; (801acd0 <_strtod_l+0x2a0>)
 801aa9a:	ab19      	add	r3, sp, #100	; 0x64
 801aa9c:	a917      	add	r1, sp, #92	; 0x5c
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	f001 fd44 	bl	801c52c <__gethex>
 801aaa4:	f010 0707 	ands.w	r7, r0, #7
 801aaa8:	4605      	mov	r5, r0
 801aaaa:	d005      	beq.n	801aab8 <_strtod_l+0x88>
 801aaac:	2f06      	cmp	r7, #6
 801aaae:	d12c      	bne.n	801ab0a <_strtod_l+0xda>
 801aab0:	3601      	adds	r6, #1
 801aab2:	2300      	movs	r3, #0
 801aab4:	9617      	str	r6, [sp, #92]	; 0x5c
 801aab6:	930a      	str	r3, [sp, #40]	; 0x28
 801aab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	f040 8590 	bne.w	801b5e0 <_strtod_l+0xbb0>
 801aac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aac2:	b1eb      	cbz	r3, 801ab00 <_strtod_l+0xd0>
 801aac4:	4652      	mov	r2, sl
 801aac6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801aaca:	ec43 2b10 	vmov	d0, r2, r3
 801aace:	b01d      	add	sp, #116	; 0x74
 801aad0:	ecbd 8b02 	vpop	{d8}
 801aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aad8:	2a20      	cmp	r2, #32
 801aada:	d1cc      	bne.n	801aa76 <_strtod_l+0x46>
 801aadc:	3301      	adds	r3, #1
 801aade:	9317      	str	r3, [sp, #92]	; 0x5c
 801aae0:	e7be      	b.n	801aa60 <_strtod_l+0x30>
 801aae2:	2a2d      	cmp	r2, #45	; 0x2d
 801aae4:	d1c7      	bne.n	801aa76 <_strtod_l+0x46>
 801aae6:	2201      	movs	r2, #1
 801aae8:	920a      	str	r2, [sp, #40]	; 0x28
 801aaea:	1c5a      	adds	r2, r3, #1
 801aaec:	9217      	str	r2, [sp, #92]	; 0x5c
 801aaee:	785b      	ldrb	r3, [r3, #1]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d1c2      	bne.n	801aa7a <_strtod_l+0x4a>
 801aaf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801aaf6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	f040 856e 	bne.w	801b5dc <_strtod_l+0xbac>
 801ab00:	4652      	mov	r2, sl
 801ab02:	465b      	mov	r3, fp
 801ab04:	e7e1      	b.n	801aaca <_strtod_l+0x9a>
 801ab06:	2200      	movs	r2, #0
 801ab08:	e7ee      	b.n	801aae8 <_strtod_l+0xb8>
 801ab0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab0c:	b13a      	cbz	r2, 801ab1e <_strtod_l+0xee>
 801ab0e:	2135      	movs	r1, #53	; 0x35
 801ab10:	a81a      	add	r0, sp, #104	; 0x68
 801ab12:	f002 fcbc 	bl	801d48e <__copybits>
 801ab16:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ab18:	4620      	mov	r0, r4
 801ab1a:	f002 f87b 	bl	801cc14 <_Bfree>
 801ab1e:	3f01      	subs	r7, #1
 801ab20:	2f04      	cmp	r7, #4
 801ab22:	d806      	bhi.n	801ab32 <_strtod_l+0x102>
 801ab24:	e8df f007 	tbb	[pc, r7]
 801ab28:	1714030a 	.word	0x1714030a
 801ab2c:	0a          	.byte	0x0a
 801ab2d:	00          	.byte	0x00
 801ab2e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801ab32:	0728      	lsls	r0, r5, #28
 801ab34:	d5c0      	bpl.n	801aab8 <_strtod_l+0x88>
 801ab36:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ab3a:	e7bd      	b.n	801aab8 <_strtod_l+0x88>
 801ab3c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801ab40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ab42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ab46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ab4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ab4e:	e7f0      	b.n	801ab32 <_strtod_l+0x102>
 801ab50:	f8df b180 	ldr.w	fp, [pc, #384]	; 801acd4 <_strtod_l+0x2a4>
 801ab54:	e7ed      	b.n	801ab32 <_strtod_l+0x102>
 801ab56:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ab5a:	f04f 3aff 	mov.w	sl, #4294967295
 801ab5e:	e7e8      	b.n	801ab32 <_strtod_l+0x102>
 801ab60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab62:	1c5a      	adds	r2, r3, #1
 801ab64:	9217      	str	r2, [sp, #92]	; 0x5c
 801ab66:	785b      	ldrb	r3, [r3, #1]
 801ab68:	2b30      	cmp	r3, #48	; 0x30
 801ab6a:	d0f9      	beq.n	801ab60 <_strtod_l+0x130>
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d0a3      	beq.n	801aab8 <_strtod_l+0x88>
 801ab70:	2301      	movs	r3, #1
 801ab72:	f04f 0900 	mov.w	r9, #0
 801ab76:	9304      	str	r3, [sp, #16]
 801ab78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab7a:	9308      	str	r3, [sp, #32]
 801ab7c:	f8cd 901c 	str.w	r9, [sp, #28]
 801ab80:	464f      	mov	r7, r9
 801ab82:	220a      	movs	r2, #10
 801ab84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ab86:	7806      	ldrb	r6, [r0, #0]
 801ab88:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ab8c:	b2d9      	uxtb	r1, r3
 801ab8e:	2909      	cmp	r1, #9
 801ab90:	d92a      	bls.n	801abe8 <_strtod_l+0x1b8>
 801ab92:	9905      	ldr	r1, [sp, #20]
 801ab94:	462a      	mov	r2, r5
 801ab96:	f002 ff2b 	bl	801d9f0 <strncmp>
 801ab9a:	b398      	cbz	r0, 801ac04 <_strtod_l+0x1d4>
 801ab9c:	2000      	movs	r0, #0
 801ab9e:	4632      	mov	r2, r6
 801aba0:	463d      	mov	r5, r7
 801aba2:	9005      	str	r0, [sp, #20]
 801aba4:	4603      	mov	r3, r0
 801aba6:	2a65      	cmp	r2, #101	; 0x65
 801aba8:	d001      	beq.n	801abae <_strtod_l+0x17e>
 801abaa:	2a45      	cmp	r2, #69	; 0x45
 801abac:	d118      	bne.n	801abe0 <_strtod_l+0x1b0>
 801abae:	b91d      	cbnz	r5, 801abb8 <_strtod_l+0x188>
 801abb0:	9a04      	ldr	r2, [sp, #16]
 801abb2:	4302      	orrs	r2, r0
 801abb4:	d09e      	beq.n	801aaf4 <_strtod_l+0xc4>
 801abb6:	2500      	movs	r5, #0
 801abb8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801abbc:	f108 0201 	add.w	r2, r8, #1
 801abc0:	9217      	str	r2, [sp, #92]	; 0x5c
 801abc2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801abc6:	2a2b      	cmp	r2, #43	; 0x2b
 801abc8:	d075      	beq.n	801acb6 <_strtod_l+0x286>
 801abca:	2a2d      	cmp	r2, #45	; 0x2d
 801abcc:	d07b      	beq.n	801acc6 <_strtod_l+0x296>
 801abce:	f04f 0c00 	mov.w	ip, #0
 801abd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801abd6:	2909      	cmp	r1, #9
 801abd8:	f240 8082 	bls.w	801ace0 <_strtod_l+0x2b0>
 801abdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801abe0:	2600      	movs	r6, #0
 801abe2:	e09d      	b.n	801ad20 <_strtod_l+0x2f0>
 801abe4:	2300      	movs	r3, #0
 801abe6:	e7c4      	b.n	801ab72 <_strtod_l+0x142>
 801abe8:	2f08      	cmp	r7, #8
 801abea:	bfd8      	it	le
 801abec:	9907      	ldrle	r1, [sp, #28]
 801abee:	f100 0001 	add.w	r0, r0, #1
 801abf2:	bfda      	itte	le
 801abf4:	fb02 3301 	mlale	r3, r2, r1, r3
 801abf8:	9307      	strle	r3, [sp, #28]
 801abfa:	fb02 3909 	mlagt	r9, r2, r9, r3
 801abfe:	3701      	adds	r7, #1
 801ac00:	9017      	str	r0, [sp, #92]	; 0x5c
 801ac02:	e7bf      	b.n	801ab84 <_strtod_l+0x154>
 801ac04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ac06:	195a      	adds	r2, r3, r5
 801ac08:	9217      	str	r2, [sp, #92]	; 0x5c
 801ac0a:	5d5a      	ldrb	r2, [r3, r5]
 801ac0c:	2f00      	cmp	r7, #0
 801ac0e:	d037      	beq.n	801ac80 <_strtod_l+0x250>
 801ac10:	9005      	str	r0, [sp, #20]
 801ac12:	463d      	mov	r5, r7
 801ac14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801ac18:	2b09      	cmp	r3, #9
 801ac1a:	d912      	bls.n	801ac42 <_strtod_l+0x212>
 801ac1c:	2301      	movs	r3, #1
 801ac1e:	e7c2      	b.n	801aba6 <_strtod_l+0x176>
 801ac20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ac22:	1c5a      	adds	r2, r3, #1
 801ac24:	9217      	str	r2, [sp, #92]	; 0x5c
 801ac26:	785a      	ldrb	r2, [r3, #1]
 801ac28:	3001      	adds	r0, #1
 801ac2a:	2a30      	cmp	r2, #48	; 0x30
 801ac2c:	d0f8      	beq.n	801ac20 <_strtod_l+0x1f0>
 801ac2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ac32:	2b08      	cmp	r3, #8
 801ac34:	f200 84d9 	bhi.w	801b5ea <_strtod_l+0xbba>
 801ac38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ac3a:	9005      	str	r0, [sp, #20]
 801ac3c:	2000      	movs	r0, #0
 801ac3e:	9308      	str	r3, [sp, #32]
 801ac40:	4605      	mov	r5, r0
 801ac42:	3a30      	subs	r2, #48	; 0x30
 801ac44:	f100 0301 	add.w	r3, r0, #1
 801ac48:	d014      	beq.n	801ac74 <_strtod_l+0x244>
 801ac4a:	9905      	ldr	r1, [sp, #20]
 801ac4c:	4419      	add	r1, r3
 801ac4e:	9105      	str	r1, [sp, #20]
 801ac50:	462b      	mov	r3, r5
 801ac52:	eb00 0e05 	add.w	lr, r0, r5
 801ac56:	210a      	movs	r1, #10
 801ac58:	4573      	cmp	r3, lr
 801ac5a:	d113      	bne.n	801ac84 <_strtod_l+0x254>
 801ac5c:	182b      	adds	r3, r5, r0
 801ac5e:	2b08      	cmp	r3, #8
 801ac60:	f105 0501 	add.w	r5, r5, #1
 801ac64:	4405      	add	r5, r0
 801ac66:	dc1c      	bgt.n	801aca2 <_strtod_l+0x272>
 801ac68:	9907      	ldr	r1, [sp, #28]
 801ac6a:	230a      	movs	r3, #10
 801ac6c:	fb03 2301 	mla	r3, r3, r1, r2
 801ac70:	9307      	str	r3, [sp, #28]
 801ac72:	2300      	movs	r3, #0
 801ac74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ac76:	1c51      	adds	r1, r2, #1
 801ac78:	9117      	str	r1, [sp, #92]	; 0x5c
 801ac7a:	7852      	ldrb	r2, [r2, #1]
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	e7c9      	b.n	801ac14 <_strtod_l+0x1e4>
 801ac80:	4638      	mov	r0, r7
 801ac82:	e7d2      	b.n	801ac2a <_strtod_l+0x1fa>
 801ac84:	2b08      	cmp	r3, #8
 801ac86:	dc04      	bgt.n	801ac92 <_strtod_l+0x262>
 801ac88:	9e07      	ldr	r6, [sp, #28]
 801ac8a:	434e      	muls	r6, r1
 801ac8c:	9607      	str	r6, [sp, #28]
 801ac8e:	3301      	adds	r3, #1
 801ac90:	e7e2      	b.n	801ac58 <_strtod_l+0x228>
 801ac92:	f103 0c01 	add.w	ip, r3, #1
 801ac96:	f1bc 0f10 	cmp.w	ip, #16
 801ac9a:	bfd8      	it	le
 801ac9c:	fb01 f909 	mulle.w	r9, r1, r9
 801aca0:	e7f5      	b.n	801ac8e <_strtod_l+0x25e>
 801aca2:	2d10      	cmp	r5, #16
 801aca4:	bfdc      	itt	le
 801aca6:	230a      	movle	r3, #10
 801aca8:	fb03 2909 	mlale	r9, r3, r9, r2
 801acac:	e7e1      	b.n	801ac72 <_strtod_l+0x242>
 801acae:	2300      	movs	r3, #0
 801acb0:	9305      	str	r3, [sp, #20]
 801acb2:	2301      	movs	r3, #1
 801acb4:	e77c      	b.n	801abb0 <_strtod_l+0x180>
 801acb6:	f04f 0c00 	mov.w	ip, #0
 801acba:	f108 0202 	add.w	r2, r8, #2
 801acbe:	9217      	str	r2, [sp, #92]	; 0x5c
 801acc0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801acc4:	e785      	b.n	801abd2 <_strtod_l+0x1a2>
 801acc6:	f04f 0c01 	mov.w	ip, #1
 801acca:	e7f6      	b.n	801acba <_strtod_l+0x28a>
 801accc:	08052690 	.word	0x08052690
 801acd0:	08052448 	.word	0x08052448
 801acd4:	7ff00000 	.word	0x7ff00000
 801acd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801acda:	1c51      	adds	r1, r2, #1
 801acdc:	9117      	str	r1, [sp, #92]	; 0x5c
 801acde:	7852      	ldrb	r2, [r2, #1]
 801ace0:	2a30      	cmp	r2, #48	; 0x30
 801ace2:	d0f9      	beq.n	801acd8 <_strtod_l+0x2a8>
 801ace4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801ace8:	2908      	cmp	r1, #8
 801acea:	f63f af79 	bhi.w	801abe0 <_strtod_l+0x1b0>
 801acee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801acf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801acf4:	9206      	str	r2, [sp, #24]
 801acf6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801acf8:	1c51      	adds	r1, r2, #1
 801acfa:	9117      	str	r1, [sp, #92]	; 0x5c
 801acfc:	7852      	ldrb	r2, [r2, #1]
 801acfe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801ad02:	2e09      	cmp	r6, #9
 801ad04:	d937      	bls.n	801ad76 <_strtod_l+0x346>
 801ad06:	9e06      	ldr	r6, [sp, #24]
 801ad08:	1b89      	subs	r1, r1, r6
 801ad0a:	2908      	cmp	r1, #8
 801ad0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801ad10:	dc02      	bgt.n	801ad18 <_strtod_l+0x2e8>
 801ad12:	4576      	cmp	r6, lr
 801ad14:	bfa8      	it	ge
 801ad16:	4676      	movge	r6, lr
 801ad18:	f1bc 0f00 	cmp.w	ip, #0
 801ad1c:	d000      	beq.n	801ad20 <_strtod_l+0x2f0>
 801ad1e:	4276      	negs	r6, r6
 801ad20:	2d00      	cmp	r5, #0
 801ad22:	d14d      	bne.n	801adc0 <_strtod_l+0x390>
 801ad24:	9904      	ldr	r1, [sp, #16]
 801ad26:	4301      	orrs	r1, r0
 801ad28:	f47f aec6 	bne.w	801aab8 <_strtod_l+0x88>
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	f47f aee1 	bne.w	801aaf4 <_strtod_l+0xc4>
 801ad32:	2a69      	cmp	r2, #105	; 0x69
 801ad34:	d027      	beq.n	801ad86 <_strtod_l+0x356>
 801ad36:	dc24      	bgt.n	801ad82 <_strtod_l+0x352>
 801ad38:	2a49      	cmp	r2, #73	; 0x49
 801ad3a:	d024      	beq.n	801ad86 <_strtod_l+0x356>
 801ad3c:	2a4e      	cmp	r2, #78	; 0x4e
 801ad3e:	f47f aed9 	bne.w	801aaf4 <_strtod_l+0xc4>
 801ad42:	499f      	ldr	r1, [pc, #636]	; (801afc0 <_strtod_l+0x590>)
 801ad44:	a817      	add	r0, sp, #92	; 0x5c
 801ad46:	f001 fe49 	bl	801c9dc <__match>
 801ad4a:	2800      	cmp	r0, #0
 801ad4c:	f43f aed2 	beq.w	801aaf4 <_strtod_l+0xc4>
 801ad50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ad52:	781b      	ldrb	r3, [r3, #0]
 801ad54:	2b28      	cmp	r3, #40	; 0x28
 801ad56:	d12d      	bne.n	801adb4 <_strtod_l+0x384>
 801ad58:	499a      	ldr	r1, [pc, #616]	; (801afc4 <_strtod_l+0x594>)
 801ad5a:	aa1a      	add	r2, sp, #104	; 0x68
 801ad5c:	a817      	add	r0, sp, #92	; 0x5c
 801ad5e:	f001 fe51 	bl	801ca04 <__hexnan>
 801ad62:	2805      	cmp	r0, #5
 801ad64:	d126      	bne.n	801adb4 <_strtod_l+0x384>
 801ad66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ad68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801ad6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ad70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ad74:	e6a0      	b.n	801aab8 <_strtod_l+0x88>
 801ad76:	210a      	movs	r1, #10
 801ad78:	fb01 2e0e 	mla	lr, r1, lr, r2
 801ad7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ad80:	e7b9      	b.n	801acf6 <_strtod_l+0x2c6>
 801ad82:	2a6e      	cmp	r2, #110	; 0x6e
 801ad84:	e7db      	b.n	801ad3e <_strtod_l+0x30e>
 801ad86:	4990      	ldr	r1, [pc, #576]	; (801afc8 <_strtod_l+0x598>)
 801ad88:	a817      	add	r0, sp, #92	; 0x5c
 801ad8a:	f001 fe27 	bl	801c9dc <__match>
 801ad8e:	2800      	cmp	r0, #0
 801ad90:	f43f aeb0 	beq.w	801aaf4 <_strtod_l+0xc4>
 801ad94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ad96:	498d      	ldr	r1, [pc, #564]	; (801afcc <_strtod_l+0x59c>)
 801ad98:	3b01      	subs	r3, #1
 801ad9a:	a817      	add	r0, sp, #92	; 0x5c
 801ad9c:	9317      	str	r3, [sp, #92]	; 0x5c
 801ad9e:	f001 fe1d 	bl	801c9dc <__match>
 801ada2:	b910      	cbnz	r0, 801adaa <_strtod_l+0x37a>
 801ada4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ada6:	3301      	adds	r3, #1
 801ada8:	9317      	str	r3, [sp, #92]	; 0x5c
 801adaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 801afdc <_strtod_l+0x5ac>
 801adae:	f04f 0a00 	mov.w	sl, #0
 801adb2:	e681      	b.n	801aab8 <_strtod_l+0x88>
 801adb4:	4886      	ldr	r0, [pc, #536]	; (801afd0 <_strtod_l+0x5a0>)
 801adb6:	f002 fe03 	bl	801d9c0 <nan>
 801adba:	ec5b ab10 	vmov	sl, fp, d0
 801adbe:	e67b      	b.n	801aab8 <_strtod_l+0x88>
 801adc0:	9b05      	ldr	r3, [sp, #20]
 801adc2:	9807      	ldr	r0, [sp, #28]
 801adc4:	1af3      	subs	r3, r6, r3
 801adc6:	2f00      	cmp	r7, #0
 801adc8:	bf08      	it	eq
 801adca:	462f      	moveq	r7, r5
 801adcc:	2d10      	cmp	r5, #16
 801adce:	9306      	str	r3, [sp, #24]
 801add0:	46a8      	mov	r8, r5
 801add2:	bfa8      	it	ge
 801add4:	f04f 0810 	movge.w	r8, #16
 801add8:	f7fe f994 	bl	8019104 <__aeabi_ui2d>
 801addc:	2d09      	cmp	r5, #9
 801adde:	4682      	mov	sl, r0
 801ade0:	468b      	mov	fp, r1
 801ade2:	dd13      	ble.n	801ae0c <_strtod_l+0x3dc>
 801ade4:	4b7b      	ldr	r3, [pc, #492]	; (801afd4 <_strtod_l+0x5a4>)
 801ade6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801adea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801adee:	f7fe fa03 	bl	80191f8 <__aeabi_dmul>
 801adf2:	4682      	mov	sl, r0
 801adf4:	4648      	mov	r0, r9
 801adf6:	468b      	mov	fp, r1
 801adf8:	f7fe f984 	bl	8019104 <__aeabi_ui2d>
 801adfc:	4602      	mov	r2, r0
 801adfe:	460b      	mov	r3, r1
 801ae00:	4650      	mov	r0, sl
 801ae02:	4659      	mov	r1, fp
 801ae04:	f7fe f842 	bl	8018e8c <__adddf3>
 801ae08:	4682      	mov	sl, r0
 801ae0a:	468b      	mov	fp, r1
 801ae0c:	2d0f      	cmp	r5, #15
 801ae0e:	dc38      	bgt.n	801ae82 <_strtod_l+0x452>
 801ae10:	9b06      	ldr	r3, [sp, #24]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	f43f ae50 	beq.w	801aab8 <_strtod_l+0x88>
 801ae18:	dd24      	ble.n	801ae64 <_strtod_l+0x434>
 801ae1a:	2b16      	cmp	r3, #22
 801ae1c:	dc0b      	bgt.n	801ae36 <_strtod_l+0x406>
 801ae1e:	496d      	ldr	r1, [pc, #436]	; (801afd4 <_strtod_l+0x5a4>)
 801ae20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ae24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae28:	4652      	mov	r2, sl
 801ae2a:	465b      	mov	r3, fp
 801ae2c:	f7fe f9e4 	bl	80191f8 <__aeabi_dmul>
 801ae30:	4682      	mov	sl, r0
 801ae32:	468b      	mov	fp, r1
 801ae34:	e640      	b.n	801aab8 <_strtod_l+0x88>
 801ae36:	9a06      	ldr	r2, [sp, #24]
 801ae38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ae3c:	4293      	cmp	r3, r2
 801ae3e:	db20      	blt.n	801ae82 <_strtod_l+0x452>
 801ae40:	4c64      	ldr	r4, [pc, #400]	; (801afd4 <_strtod_l+0x5a4>)
 801ae42:	f1c5 050f 	rsb	r5, r5, #15
 801ae46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ae4a:	4652      	mov	r2, sl
 801ae4c:	465b      	mov	r3, fp
 801ae4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae52:	f7fe f9d1 	bl	80191f8 <__aeabi_dmul>
 801ae56:	9b06      	ldr	r3, [sp, #24]
 801ae58:	1b5d      	subs	r5, r3, r5
 801ae5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ae5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ae62:	e7e3      	b.n	801ae2c <_strtod_l+0x3fc>
 801ae64:	9b06      	ldr	r3, [sp, #24]
 801ae66:	3316      	adds	r3, #22
 801ae68:	db0b      	blt.n	801ae82 <_strtod_l+0x452>
 801ae6a:	9b05      	ldr	r3, [sp, #20]
 801ae6c:	1b9e      	subs	r6, r3, r6
 801ae6e:	4b59      	ldr	r3, [pc, #356]	; (801afd4 <_strtod_l+0x5a4>)
 801ae70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ae74:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ae78:	4650      	mov	r0, sl
 801ae7a:	4659      	mov	r1, fp
 801ae7c:	f7fe fae6 	bl	801944c <__aeabi_ddiv>
 801ae80:	e7d6      	b.n	801ae30 <_strtod_l+0x400>
 801ae82:	9b06      	ldr	r3, [sp, #24]
 801ae84:	eba5 0808 	sub.w	r8, r5, r8
 801ae88:	4498      	add	r8, r3
 801ae8a:	f1b8 0f00 	cmp.w	r8, #0
 801ae8e:	dd74      	ble.n	801af7a <_strtod_l+0x54a>
 801ae90:	f018 030f 	ands.w	r3, r8, #15
 801ae94:	d00a      	beq.n	801aeac <_strtod_l+0x47c>
 801ae96:	494f      	ldr	r1, [pc, #316]	; (801afd4 <_strtod_l+0x5a4>)
 801ae98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ae9c:	4652      	mov	r2, sl
 801ae9e:	465b      	mov	r3, fp
 801aea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aea4:	f7fe f9a8 	bl	80191f8 <__aeabi_dmul>
 801aea8:	4682      	mov	sl, r0
 801aeaa:	468b      	mov	fp, r1
 801aeac:	f038 080f 	bics.w	r8, r8, #15
 801aeb0:	d04f      	beq.n	801af52 <_strtod_l+0x522>
 801aeb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801aeb6:	dd22      	ble.n	801aefe <_strtod_l+0x4ce>
 801aeb8:	2500      	movs	r5, #0
 801aeba:	462e      	mov	r6, r5
 801aebc:	9507      	str	r5, [sp, #28]
 801aebe:	9505      	str	r5, [sp, #20]
 801aec0:	2322      	movs	r3, #34	; 0x22
 801aec2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801afdc <_strtod_l+0x5ac>
 801aec6:	6023      	str	r3, [r4, #0]
 801aec8:	f04f 0a00 	mov.w	sl, #0
 801aecc:	9b07      	ldr	r3, [sp, #28]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	f43f adf2 	beq.w	801aab8 <_strtod_l+0x88>
 801aed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aed6:	4620      	mov	r0, r4
 801aed8:	f001 fe9c 	bl	801cc14 <_Bfree>
 801aedc:	9905      	ldr	r1, [sp, #20]
 801aede:	4620      	mov	r0, r4
 801aee0:	f001 fe98 	bl	801cc14 <_Bfree>
 801aee4:	4631      	mov	r1, r6
 801aee6:	4620      	mov	r0, r4
 801aee8:	f001 fe94 	bl	801cc14 <_Bfree>
 801aeec:	9907      	ldr	r1, [sp, #28]
 801aeee:	4620      	mov	r0, r4
 801aef0:	f001 fe90 	bl	801cc14 <_Bfree>
 801aef4:	4629      	mov	r1, r5
 801aef6:	4620      	mov	r0, r4
 801aef8:	f001 fe8c 	bl	801cc14 <_Bfree>
 801aefc:	e5dc      	b.n	801aab8 <_strtod_l+0x88>
 801aefe:	4b36      	ldr	r3, [pc, #216]	; (801afd8 <_strtod_l+0x5a8>)
 801af00:	9304      	str	r3, [sp, #16]
 801af02:	2300      	movs	r3, #0
 801af04:	ea4f 1828 	mov.w	r8, r8, asr #4
 801af08:	4650      	mov	r0, sl
 801af0a:	4659      	mov	r1, fp
 801af0c:	4699      	mov	r9, r3
 801af0e:	f1b8 0f01 	cmp.w	r8, #1
 801af12:	dc21      	bgt.n	801af58 <_strtod_l+0x528>
 801af14:	b10b      	cbz	r3, 801af1a <_strtod_l+0x4ea>
 801af16:	4682      	mov	sl, r0
 801af18:	468b      	mov	fp, r1
 801af1a:	4b2f      	ldr	r3, [pc, #188]	; (801afd8 <_strtod_l+0x5a8>)
 801af1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801af20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801af24:	4652      	mov	r2, sl
 801af26:	465b      	mov	r3, fp
 801af28:	e9d9 0100 	ldrd	r0, r1, [r9]
 801af2c:	f7fe f964 	bl	80191f8 <__aeabi_dmul>
 801af30:	4b2a      	ldr	r3, [pc, #168]	; (801afdc <_strtod_l+0x5ac>)
 801af32:	460a      	mov	r2, r1
 801af34:	400b      	ands	r3, r1
 801af36:	492a      	ldr	r1, [pc, #168]	; (801afe0 <_strtod_l+0x5b0>)
 801af38:	428b      	cmp	r3, r1
 801af3a:	4682      	mov	sl, r0
 801af3c:	d8bc      	bhi.n	801aeb8 <_strtod_l+0x488>
 801af3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801af42:	428b      	cmp	r3, r1
 801af44:	bf86      	itte	hi
 801af46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801afe4 <_strtod_l+0x5b4>
 801af4a:	f04f 3aff 	movhi.w	sl, #4294967295
 801af4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801af52:	2300      	movs	r3, #0
 801af54:	9304      	str	r3, [sp, #16]
 801af56:	e084      	b.n	801b062 <_strtod_l+0x632>
 801af58:	f018 0f01 	tst.w	r8, #1
 801af5c:	d005      	beq.n	801af6a <_strtod_l+0x53a>
 801af5e:	9b04      	ldr	r3, [sp, #16]
 801af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af64:	f7fe f948 	bl	80191f8 <__aeabi_dmul>
 801af68:	2301      	movs	r3, #1
 801af6a:	9a04      	ldr	r2, [sp, #16]
 801af6c:	3208      	adds	r2, #8
 801af6e:	f109 0901 	add.w	r9, r9, #1
 801af72:	ea4f 0868 	mov.w	r8, r8, asr #1
 801af76:	9204      	str	r2, [sp, #16]
 801af78:	e7c9      	b.n	801af0e <_strtod_l+0x4de>
 801af7a:	d0ea      	beq.n	801af52 <_strtod_l+0x522>
 801af7c:	f1c8 0800 	rsb	r8, r8, #0
 801af80:	f018 020f 	ands.w	r2, r8, #15
 801af84:	d00a      	beq.n	801af9c <_strtod_l+0x56c>
 801af86:	4b13      	ldr	r3, [pc, #76]	; (801afd4 <_strtod_l+0x5a4>)
 801af88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801af8c:	4650      	mov	r0, sl
 801af8e:	4659      	mov	r1, fp
 801af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af94:	f7fe fa5a 	bl	801944c <__aeabi_ddiv>
 801af98:	4682      	mov	sl, r0
 801af9a:	468b      	mov	fp, r1
 801af9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801afa0:	d0d7      	beq.n	801af52 <_strtod_l+0x522>
 801afa2:	f1b8 0f1f 	cmp.w	r8, #31
 801afa6:	dd1f      	ble.n	801afe8 <_strtod_l+0x5b8>
 801afa8:	2500      	movs	r5, #0
 801afaa:	462e      	mov	r6, r5
 801afac:	9507      	str	r5, [sp, #28]
 801afae:	9505      	str	r5, [sp, #20]
 801afb0:	2322      	movs	r3, #34	; 0x22
 801afb2:	f04f 0a00 	mov.w	sl, #0
 801afb6:	f04f 0b00 	mov.w	fp, #0
 801afba:	6023      	str	r3, [r4, #0]
 801afbc:	e786      	b.n	801aecc <_strtod_l+0x49c>
 801afbe:	bf00      	nop
 801afc0:	08052419 	.word	0x08052419
 801afc4:	0805245c 	.word	0x0805245c
 801afc8:	08052411 	.word	0x08052411
 801afcc:	0805259c 	.word	0x0805259c
 801afd0:	08052848 	.word	0x08052848
 801afd4:	08052728 	.word	0x08052728
 801afd8:	08052700 	.word	0x08052700
 801afdc:	7ff00000 	.word	0x7ff00000
 801afe0:	7ca00000 	.word	0x7ca00000
 801afe4:	7fefffff 	.word	0x7fefffff
 801afe8:	f018 0310 	ands.w	r3, r8, #16
 801afec:	bf18      	it	ne
 801afee:	236a      	movne	r3, #106	; 0x6a
 801aff0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b3a0 <_strtod_l+0x970>
 801aff4:	9304      	str	r3, [sp, #16]
 801aff6:	4650      	mov	r0, sl
 801aff8:	4659      	mov	r1, fp
 801affa:	2300      	movs	r3, #0
 801affc:	f018 0f01 	tst.w	r8, #1
 801b000:	d004      	beq.n	801b00c <_strtod_l+0x5dc>
 801b002:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b006:	f7fe f8f7 	bl	80191f8 <__aeabi_dmul>
 801b00a:	2301      	movs	r3, #1
 801b00c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b010:	f109 0908 	add.w	r9, r9, #8
 801b014:	d1f2      	bne.n	801affc <_strtod_l+0x5cc>
 801b016:	b10b      	cbz	r3, 801b01c <_strtod_l+0x5ec>
 801b018:	4682      	mov	sl, r0
 801b01a:	468b      	mov	fp, r1
 801b01c:	9b04      	ldr	r3, [sp, #16]
 801b01e:	b1c3      	cbz	r3, 801b052 <_strtod_l+0x622>
 801b020:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b024:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b028:	2b00      	cmp	r3, #0
 801b02a:	4659      	mov	r1, fp
 801b02c:	dd11      	ble.n	801b052 <_strtod_l+0x622>
 801b02e:	2b1f      	cmp	r3, #31
 801b030:	f340 8124 	ble.w	801b27c <_strtod_l+0x84c>
 801b034:	2b34      	cmp	r3, #52	; 0x34
 801b036:	bfde      	ittt	le
 801b038:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b03c:	f04f 33ff 	movle.w	r3, #4294967295
 801b040:	fa03 f202 	lslle.w	r2, r3, r2
 801b044:	f04f 0a00 	mov.w	sl, #0
 801b048:	bfcc      	ite	gt
 801b04a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b04e:	ea02 0b01 	andle.w	fp, r2, r1
 801b052:	2200      	movs	r2, #0
 801b054:	2300      	movs	r3, #0
 801b056:	4650      	mov	r0, sl
 801b058:	4659      	mov	r1, fp
 801b05a:	f7fe fb35 	bl	80196c8 <__aeabi_dcmpeq>
 801b05e:	2800      	cmp	r0, #0
 801b060:	d1a2      	bne.n	801afa8 <_strtod_l+0x578>
 801b062:	9b07      	ldr	r3, [sp, #28]
 801b064:	9300      	str	r3, [sp, #0]
 801b066:	9908      	ldr	r1, [sp, #32]
 801b068:	462b      	mov	r3, r5
 801b06a:	463a      	mov	r2, r7
 801b06c:	4620      	mov	r0, r4
 801b06e:	f001 fe39 	bl	801cce4 <__s2b>
 801b072:	9007      	str	r0, [sp, #28]
 801b074:	2800      	cmp	r0, #0
 801b076:	f43f af1f 	beq.w	801aeb8 <_strtod_l+0x488>
 801b07a:	9b05      	ldr	r3, [sp, #20]
 801b07c:	1b9e      	subs	r6, r3, r6
 801b07e:	9b06      	ldr	r3, [sp, #24]
 801b080:	2b00      	cmp	r3, #0
 801b082:	bfb4      	ite	lt
 801b084:	4633      	movlt	r3, r6
 801b086:	2300      	movge	r3, #0
 801b088:	930c      	str	r3, [sp, #48]	; 0x30
 801b08a:	9b06      	ldr	r3, [sp, #24]
 801b08c:	2500      	movs	r5, #0
 801b08e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b092:	9312      	str	r3, [sp, #72]	; 0x48
 801b094:	462e      	mov	r6, r5
 801b096:	9b07      	ldr	r3, [sp, #28]
 801b098:	4620      	mov	r0, r4
 801b09a:	6859      	ldr	r1, [r3, #4]
 801b09c:	f001 fd7a 	bl	801cb94 <_Balloc>
 801b0a0:	9005      	str	r0, [sp, #20]
 801b0a2:	2800      	cmp	r0, #0
 801b0a4:	f43f af0c 	beq.w	801aec0 <_strtod_l+0x490>
 801b0a8:	9b07      	ldr	r3, [sp, #28]
 801b0aa:	691a      	ldr	r2, [r3, #16]
 801b0ac:	3202      	adds	r2, #2
 801b0ae:	f103 010c 	add.w	r1, r3, #12
 801b0b2:	0092      	lsls	r2, r2, #2
 801b0b4:	300c      	adds	r0, #12
 801b0b6:	f001 fd5f 	bl	801cb78 <memcpy>
 801b0ba:	ec4b ab10 	vmov	d0, sl, fp
 801b0be:	aa1a      	add	r2, sp, #104	; 0x68
 801b0c0:	a919      	add	r1, sp, #100	; 0x64
 801b0c2:	4620      	mov	r0, r4
 801b0c4:	f002 f954 	bl	801d370 <__d2b>
 801b0c8:	ec4b ab18 	vmov	d8, sl, fp
 801b0cc:	9018      	str	r0, [sp, #96]	; 0x60
 801b0ce:	2800      	cmp	r0, #0
 801b0d0:	f43f aef6 	beq.w	801aec0 <_strtod_l+0x490>
 801b0d4:	2101      	movs	r1, #1
 801b0d6:	4620      	mov	r0, r4
 801b0d8:	f001 fe9e 	bl	801ce18 <__i2b>
 801b0dc:	4606      	mov	r6, r0
 801b0de:	2800      	cmp	r0, #0
 801b0e0:	f43f aeee 	beq.w	801aec0 <_strtod_l+0x490>
 801b0e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b0e6:	9904      	ldr	r1, [sp, #16]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	bfab      	itete	ge
 801b0ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b0ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b0f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b0f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801b0f6:	bfac      	ite	ge
 801b0f8:	eb03 0902 	addge.w	r9, r3, r2
 801b0fc:	1ad7      	sublt	r7, r2, r3
 801b0fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b100:	eba3 0801 	sub.w	r8, r3, r1
 801b104:	4490      	add	r8, r2
 801b106:	4ba1      	ldr	r3, [pc, #644]	; (801b38c <_strtod_l+0x95c>)
 801b108:	f108 38ff 	add.w	r8, r8, #4294967295
 801b10c:	4598      	cmp	r8, r3
 801b10e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b112:	f280 80c7 	bge.w	801b2a4 <_strtod_l+0x874>
 801b116:	eba3 0308 	sub.w	r3, r3, r8
 801b11a:	2b1f      	cmp	r3, #31
 801b11c:	eba2 0203 	sub.w	r2, r2, r3
 801b120:	f04f 0101 	mov.w	r1, #1
 801b124:	f300 80b1 	bgt.w	801b28a <_strtod_l+0x85a>
 801b128:	fa01 f303 	lsl.w	r3, r1, r3
 801b12c:	930d      	str	r3, [sp, #52]	; 0x34
 801b12e:	2300      	movs	r3, #0
 801b130:	9308      	str	r3, [sp, #32]
 801b132:	eb09 0802 	add.w	r8, r9, r2
 801b136:	9b04      	ldr	r3, [sp, #16]
 801b138:	45c1      	cmp	r9, r8
 801b13a:	4417      	add	r7, r2
 801b13c:	441f      	add	r7, r3
 801b13e:	464b      	mov	r3, r9
 801b140:	bfa8      	it	ge
 801b142:	4643      	movge	r3, r8
 801b144:	42bb      	cmp	r3, r7
 801b146:	bfa8      	it	ge
 801b148:	463b      	movge	r3, r7
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	bfc2      	ittt	gt
 801b14e:	eba8 0803 	subgt.w	r8, r8, r3
 801b152:	1aff      	subgt	r7, r7, r3
 801b154:	eba9 0903 	subgt.w	r9, r9, r3
 801b158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	dd17      	ble.n	801b18e <_strtod_l+0x75e>
 801b15e:	4631      	mov	r1, r6
 801b160:	461a      	mov	r2, r3
 801b162:	4620      	mov	r0, r4
 801b164:	f001 ff18 	bl	801cf98 <__pow5mult>
 801b168:	4606      	mov	r6, r0
 801b16a:	2800      	cmp	r0, #0
 801b16c:	f43f aea8 	beq.w	801aec0 <_strtod_l+0x490>
 801b170:	4601      	mov	r1, r0
 801b172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b174:	4620      	mov	r0, r4
 801b176:	f001 fe65 	bl	801ce44 <__multiply>
 801b17a:	900b      	str	r0, [sp, #44]	; 0x2c
 801b17c:	2800      	cmp	r0, #0
 801b17e:	f43f ae9f 	beq.w	801aec0 <_strtod_l+0x490>
 801b182:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b184:	4620      	mov	r0, r4
 801b186:	f001 fd45 	bl	801cc14 <_Bfree>
 801b18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b18c:	9318      	str	r3, [sp, #96]	; 0x60
 801b18e:	f1b8 0f00 	cmp.w	r8, #0
 801b192:	f300 808c 	bgt.w	801b2ae <_strtod_l+0x87e>
 801b196:	9b06      	ldr	r3, [sp, #24]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	dd08      	ble.n	801b1ae <_strtod_l+0x77e>
 801b19c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b19e:	9905      	ldr	r1, [sp, #20]
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	f001 fef9 	bl	801cf98 <__pow5mult>
 801b1a6:	9005      	str	r0, [sp, #20]
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	f43f ae89 	beq.w	801aec0 <_strtod_l+0x490>
 801b1ae:	2f00      	cmp	r7, #0
 801b1b0:	dd08      	ble.n	801b1c4 <_strtod_l+0x794>
 801b1b2:	9905      	ldr	r1, [sp, #20]
 801b1b4:	463a      	mov	r2, r7
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f001 ff48 	bl	801d04c <__lshift>
 801b1bc:	9005      	str	r0, [sp, #20]
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	f43f ae7e 	beq.w	801aec0 <_strtod_l+0x490>
 801b1c4:	f1b9 0f00 	cmp.w	r9, #0
 801b1c8:	dd08      	ble.n	801b1dc <_strtod_l+0x7ac>
 801b1ca:	4631      	mov	r1, r6
 801b1cc:	464a      	mov	r2, r9
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f001 ff3c 	bl	801d04c <__lshift>
 801b1d4:	4606      	mov	r6, r0
 801b1d6:	2800      	cmp	r0, #0
 801b1d8:	f43f ae72 	beq.w	801aec0 <_strtod_l+0x490>
 801b1dc:	9a05      	ldr	r2, [sp, #20]
 801b1de:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	f001 ffbf 	bl	801d164 <__mdiff>
 801b1e6:	4605      	mov	r5, r0
 801b1e8:	2800      	cmp	r0, #0
 801b1ea:	f43f ae69 	beq.w	801aec0 <_strtod_l+0x490>
 801b1ee:	68c3      	ldr	r3, [r0, #12]
 801b1f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	60c3      	str	r3, [r0, #12]
 801b1f6:	4631      	mov	r1, r6
 801b1f8:	f001 ff98 	bl	801d12c <__mcmp>
 801b1fc:	2800      	cmp	r0, #0
 801b1fe:	da60      	bge.n	801b2c2 <_strtod_l+0x892>
 801b200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b202:	ea53 030a 	orrs.w	r3, r3, sl
 801b206:	f040 8082 	bne.w	801b30e <_strtod_l+0x8de>
 801b20a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d17d      	bne.n	801b30e <_strtod_l+0x8de>
 801b212:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b216:	0d1b      	lsrs	r3, r3, #20
 801b218:	051b      	lsls	r3, r3, #20
 801b21a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b21e:	d976      	bls.n	801b30e <_strtod_l+0x8de>
 801b220:	696b      	ldr	r3, [r5, #20]
 801b222:	b913      	cbnz	r3, 801b22a <_strtod_l+0x7fa>
 801b224:	692b      	ldr	r3, [r5, #16]
 801b226:	2b01      	cmp	r3, #1
 801b228:	dd71      	ble.n	801b30e <_strtod_l+0x8de>
 801b22a:	4629      	mov	r1, r5
 801b22c:	2201      	movs	r2, #1
 801b22e:	4620      	mov	r0, r4
 801b230:	f001 ff0c 	bl	801d04c <__lshift>
 801b234:	4631      	mov	r1, r6
 801b236:	4605      	mov	r5, r0
 801b238:	f001 ff78 	bl	801d12c <__mcmp>
 801b23c:	2800      	cmp	r0, #0
 801b23e:	dd66      	ble.n	801b30e <_strtod_l+0x8de>
 801b240:	9904      	ldr	r1, [sp, #16]
 801b242:	4a53      	ldr	r2, [pc, #332]	; (801b390 <_strtod_l+0x960>)
 801b244:	465b      	mov	r3, fp
 801b246:	2900      	cmp	r1, #0
 801b248:	f000 8081 	beq.w	801b34e <_strtod_l+0x91e>
 801b24c:	ea02 010b 	and.w	r1, r2, fp
 801b250:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b254:	dc7b      	bgt.n	801b34e <_strtod_l+0x91e>
 801b256:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b25a:	f77f aea9 	ble.w	801afb0 <_strtod_l+0x580>
 801b25e:	4b4d      	ldr	r3, [pc, #308]	; (801b394 <_strtod_l+0x964>)
 801b260:	4650      	mov	r0, sl
 801b262:	4659      	mov	r1, fp
 801b264:	2200      	movs	r2, #0
 801b266:	f7fd ffc7 	bl	80191f8 <__aeabi_dmul>
 801b26a:	460b      	mov	r3, r1
 801b26c:	4303      	orrs	r3, r0
 801b26e:	bf08      	it	eq
 801b270:	2322      	moveq	r3, #34	; 0x22
 801b272:	4682      	mov	sl, r0
 801b274:	468b      	mov	fp, r1
 801b276:	bf08      	it	eq
 801b278:	6023      	streq	r3, [r4, #0]
 801b27a:	e62b      	b.n	801aed4 <_strtod_l+0x4a4>
 801b27c:	f04f 32ff 	mov.w	r2, #4294967295
 801b280:	fa02 f303 	lsl.w	r3, r2, r3
 801b284:	ea03 0a0a 	and.w	sl, r3, sl
 801b288:	e6e3      	b.n	801b052 <_strtod_l+0x622>
 801b28a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b28e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b292:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b296:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b29a:	fa01 f308 	lsl.w	r3, r1, r8
 801b29e:	9308      	str	r3, [sp, #32]
 801b2a0:	910d      	str	r1, [sp, #52]	; 0x34
 801b2a2:	e746      	b.n	801b132 <_strtod_l+0x702>
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	9308      	str	r3, [sp, #32]
 801b2a8:	2301      	movs	r3, #1
 801b2aa:	930d      	str	r3, [sp, #52]	; 0x34
 801b2ac:	e741      	b.n	801b132 <_strtod_l+0x702>
 801b2ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b2b0:	4642      	mov	r2, r8
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	f001 feca 	bl	801d04c <__lshift>
 801b2b8:	9018      	str	r0, [sp, #96]	; 0x60
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	f47f af6b 	bne.w	801b196 <_strtod_l+0x766>
 801b2c0:	e5fe      	b.n	801aec0 <_strtod_l+0x490>
 801b2c2:	465f      	mov	r7, fp
 801b2c4:	d16e      	bne.n	801b3a4 <_strtod_l+0x974>
 801b2c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b2c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b2cc:	b342      	cbz	r2, 801b320 <_strtod_l+0x8f0>
 801b2ce:	4a32      	ldr	r2, [pc, #200]	; (801b398 <_strtod_l+0x968>)
 801b2d0:	4293      	cmp	r3, r2
 801b2d2:	d128      	bne.n	801b326 <_strtod_l+0x8f6>
 801b2d4:	9b04      	ldr	r3, [sp, #16]
 801b2d6:	4651      	mov	r1, sl
 801b2d8:	b1eb      	cbz	r3, 801b316 <_strtod_l+0x8e6>
 801b2da:	4b2d      	ldr	r3, [pc, #180]	; (801b390 <_strtod_l+0x960>)
 801b2dc:	403b      	ands	r3, r7
 801b2de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b2e2:	f04f 32ff 	mov.w	r2, #4294967295
 801b2e6:	d819      	bhi.n	801b31c <_strtod_l+0x8ec>
 801b2e8:	0d1b      	lsrs	r3, r3, #20
 801b2ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b2ee:	fa02 f303 	lsl.w	r3, r2, r3
 801b2f2:	4299      	cmp	r1, r3
 801b2f4:	d117      	bne.n	801b326 <_strtod_l+0x8f6>
 801b2f6:	4b29      	ldr	r3, [pc, #164]	; (801b39c <_strtod_l+0x96c>)
 801b2f8:	429f      	cmp	r7, r3
 801b2fa:	d102      	bne.n	801b302 <_strtod_l+0x8d2>
 801b2fc:	3101      	adds	r1, #1
 801b2fe:	f43f addf 	beq.w	801aec0 <_strtod_l+0x490>
 801b302:	4b23      	ldr	r3, [pc, #140]	; (801b390 <_strtod_l+0x960>)
 801b304:	403b      	ands	r3, r7
 801b306:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b30a:	f04f 0a00 	mov.w	sl, #0
 801b30e:	9b04      	ldr	r3, [sp, #16]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d1a4      	bne.n	801b25e <_strtod_l+0x82e>
 801b314:	e5de      	b.n	801aed4 <_strtod_l+0x4a4>
 801b316:	f04f 33ff 	mov.w	r3, #4294967295
 801b31a:	e7ea      	b.n	801b2f2 <_strtod_l+0x8c2>
 801b31c:	4613      	mov	r3, r2
 801b31e:	e7e8      	b.n	801b2f2 <_strtod_l+0x8c2>
 801b320:	ea53 030a 	orrs.w	r3, r3, sl
 801b324:	d08c      	beq.n	801b240 <_strtod_l+0x810>
 801b326:	9b08      	ldr	r3, [sp, #32]
 801b328:	b1db      	cbz	r3, 801b362 <_strtod_l+0x932>
 801b32a:	423b      	tst	r3, r7
 801b32c:	d0ef      	beq.n	801b30e <_strtod_l+0x8de>
 801b32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b330:	9a04      	ldr	r2, [sp, #16]
 801b332:	4650      	mov	r0, sl
 801b334:	4659      	mov	r1, fp
 801b336:	b1c3      	cbz	r3, 801b36a <_strtod_l+0x93a>
 801b338:	f7ff fb5e 	bl	801a9f8 <sulp>
 801b33c:	4602      	mov	r2, r0
 801b33e:	460b      	mov	r3, r1
 801b340:	ec51 0b18 	vmov	r0, r1, d8
 801b344:	f7fd fda2 	bl	8018e8c <__adddf3>
 801b348:	4682      	mov	sl, r0
 801b34a:	468b      	mov	fp, r1
 801b34c:	e7df      	b.n	801b30e <_strtod_l+0x8de>
 801b34e:	4013      	ands	r3, r2
 801b350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b354:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b358:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b35c:	f04f 3aff 	mov.w	sl, #4294967295
 801b360:	e7d5      	b.n	801b30e <_strtod_l+0x8de>
 801b362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b364:	ea13 0f0a 	tst.w	r3, sl
 801b368:	e7e0      	b.n	801b32c <_strtod_l+0x8fc>
 801b36a:	f7ff fb45 	bl	801a9f8 <sulp>
 801b36e:	4602      	mov	r2, r0
 801b370:	460b      	mov	r3, r1
 801b372:	ec51 0b18 	vmov	r0, r1, d8
 801b376:	f7fd fd87 	bl	8018e88 <__aeabi_dsub>
 801b37a:	2200      	movs	r2, #0
 801b37c:	2300      	movs	r3, #0
 801b37e:	4682      	mov	sl, r0
 801b380:	468b      	mov	fp, r1
 801b382:	f7fe f9a1 	bl	80196c8 <__aeabi_dcmpeq>
 801b386:	2800      	cmp	r0, #0
 801b388:	d0c1      	beq.n	801b30e <_strtod_l+0x8de>
 801b38a:	e611      	b.n	801afb0 <_strtod_l+0x580>
 801b38c:	fffffc02 	.word	0xfffffc02
 801b390:	7ff00000 	.word	0x7ff00000
 801b394:	39500000 	.word	0x39500000
 801b398:	000fffff 	.word	0x000fffff
 801b39c:	7fefffff 	.word	0x7fefffff
 801b3a0:	08052470 	.word	0x08052470
 801b3a4:	4631      	mov	r1, r6
 801b3a6:	4628      	mov	r0, r5
 801b3a8:	f002 f83e 	bl	801d428 <__ratio>
 801b3ac:	ec59 8b10 	vmov	r8, r9, d0
 801b3b0:	ee10 0a10 	vmov	r0, s0
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b3ba:	4649      	mov	r1, r9
 801b3bc:	f7fe f998 	bl	80196f0 <__aeabi_dcmple>
 801b3c0:	2800      	cmp	r0, #0
 801b3c2:	d07a      	beq.n	801b4ba <_strtod_l+0xa8a>
 801b3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d04a      	beq.n	801b460 <_strtod_l+0xa30>
 801b3ca:	4b95      	ldr	r3, [pc, #596]	; (801b620 <_strtod_l+0xbf0>)
 801b3cc:	2200      	movs	r2, #0
 801b3ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b3d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b620 <_strtod_l+0xbf0>
 801b3d6:	f04f 0800 	mov.w	r8, #0
 801b3da:	4b92      	ldr	r3, [pc, #584]	; (801b624 <_strtod_l+0xbf4>)
 801b3dc:	403b      	ands	r3, r7
 801b3de:	930d      	str	r3, [sp, #52]	; 0x34
 801b3e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b3e2:	4b91      	ldr	r3, [pc, #580]	; (801b628 <_strtod_l+0xbf8>)
 801b3e4:	429a      	cmp	r2, r3
 801b3e6:	f040 80b0 	bne.w	801b54a <_strtod_l+0xb1a>
 801b3ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b3ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b3f2:	ec4b ab10 	vmov	d0, sl, fp
 801b3f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b3fa:	f001 ff3d 	bl	801d278 <__ulp>
 801b3fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b402:	ec53 2b10 	vmov	r2, r3, d0
 801b406:	f7fd fef7 	bl	80191f8 <__aeabi_dmul>
 801b40a:	4652      	mov	r2, sl
 801b40c:	465b      	mov	r3, fp
 801b40e:	f7fd fd3d 	bl	8018e8c <__adddf3>
 801b412:	460b      	mov	r3, r1
 801b414:	4983      	ldr	r1, [pc, #524]	; (801b624 <_strtod_l+0xbf4>)
 801b416:	4a85      	ldr	r2, [pc, #532]	; (801b62c <_strtod_l+0xbfc>)
 801b418:	4019      	ands	r1, r3
 801b41a:	4291      	cmp	r1, r2
 801b41c:	4682      	mov	sl, r0
 801b41e:	d960      	bls.n	801b4e2 <_strtod_l+0xab2>
 801b420:	ee18 3a90 	vmov	r3, s17
 801b424:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b428:	4293      	cmp	r3, r2
 801b42a:	d104      	bne.n	801b436 <_strtod_l+0xa06>
 801b42c:	ee18 3a10 	vmov	r3, s16
 801b430:	3301      	adds	r3, #1
 801b432:	f43f ad45 	beq.w	801aec0 <_strtod_l+0x490>
 801b436:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b638 <_strtod_l+0xc08>
 801b43a:	f04f 3aff 	mov.w	sl, #4294967295
 801b43e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b440:	4620      	mov	r0, r4
 801b442:	f001 fbe7 	bl	801cc14 <_Bfree>
 801b446:	9905      	ldr	r1, [sp, #20]
 801b448:	4620      	mov	r0, r4
 801b44a:	f001 fbe3 	bl	801cc14 <_Bfree>
 801b44e:	4631      	mov	r1, r6
 801b450:	4620      	mov	r0, r4
 801b452:	f001 fbdf 	bl	801cc14 <_Bfree>
 801b456:	4629      	mov	r1, r5
 801b458:	4620      	mov	r0, r4
 801b45a:	f001 fbdb 	bl	801cc14 <_Bfree>
 801b45e:	e61a      	b.n	801b096 <_strtod_l+0x666>
 801b460:	f1ba 0f00 	cmp.w	sl, #0
 801b464:	d11b      	bne.n	801b49e <_strtod_l+0xa6e>
 801b466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b46a:	b9f3      	cbnz	r3, 801b4aa <_strtod_l+0xa7a>
 801b46c:	4b6c      	ldr	r3, [pc, #432]	; (801b620 <_strtod_l+0xbf0>)
 801b46e:	2200      	movs	r2, #0
 801b470:	4640      	mov	r0, r8
 801b472:	4649      	mov	r1, r9
 801b474:	f7fe f932 	bl	80196dc <__aeabi_dcmplt>
 801b478:	b9d0      	cbnz	r0, 801b4b0 <_strtod_l+0xa80>
 801b47a:	4640      	mov	r0, r8
 801b47c:	4649      	mov	r1, r9
 801b47e:	4b6c      	ldr	r3, [pc, #432]	; (801b630 <_strtod_l+0xc00>)
 801b480:	2200      	movs	r2, #0
 801b482:	f7fd feb9 	bl	80191f8 <__aeabi_dmul>
 801b486:	4680      	mov	r8, r0
 801b488:	4689      	mov	r9, r1
 801b48a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b48e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b492:	9315      	str	r3, [sp, #84]	; 0x54
 801b494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b498:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b49c:	e79d      	b.n	801b3da <_strtod_l+0x9aa>
 801b49e:	f1ba 0f01 	cmp.w	sl, #1
 801b4a2:	d102      	bne.n	801b4aa <_strtod_l+0xa7a>
 801b4a4:	2f00      	cmp	r7, #0
 801b4a6:	f43f ad83 	beq.w	801afb0 <_strtod_l+0x580>
 801b4aa:	4b62      	ldr	r3, [pc, #392]	; (801b634 <_strtod_l+0xc04>)
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	e78e      	b.n	801b3ce <_strtod_l+0x99e>
 801b4b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b630 <_strtod_l+0xc00>
 801b4b4:	f04f 0800 	mov.w	r8, #0
 801b4b8:	e7e7      	b.n	801b48a <_strtod_l+0xa5a>
 801b4ba:	4b5d      	ldr	r3, [pc, #372]	; (801b630 <_strtod_l+0xc00>)
 801b4bc:	4640      	mov	r0, r8
 801b4be:	4649      	mov	r1, r9
 801b4c0:	2200      	movs	r2, #0
 801b4c2:	f7fd fe99 	bl	80191f8 <__aeabi_dmul>
 801b4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4c8:	4680      	mov	r8, r0
 801b4ca:	4689      	mov	r9, r1
 801b4cc:	b933      	cbnz	r3, 801b4dc <_strtod_l+0xaac>
 801b4ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4d2:	900e      	str	r0, [sp, #56]	; 0x38
 801b4d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b4d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b4da:	e7dd      	b.n	801b498 <_strtod_l+0xa68>
 801b4dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b4e0:	e7f9      	b.n	801b4d6 <_strtod_l+0xaa6>
 801b4e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b4e6:	9b04      	ldr	r3, [sp, #16]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d1a8      	bne.n	801b43e <_strtod_l+0xa0e>
 801b4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b4f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b4f2:	0d1b      	lsrs	r3, r3, #20
 801b4f4:	051b      	lsls	r3, r3, #20
 801b4f6:	429a      	cmp	r2, r3
 801b4f8:	d1a1      	bne.n	801b43e <_strtod_l+0xa0e>
 801b4fa:	4640      	mov	r0, r8
 801b4fc:	4649      	mov	r1, r9
 801b4fe:	f7fe f9c3 	bl	8019888 <__aeabi_d2lz>
 801b502:	f7fd fe4b 	bl	801919c <__aeabi_l2d>
 801b506:	4602      	mov	r2, r0
 801b508:	460b      	mov	r3, r1
 801b50a:	4640      	mov	r0, r8
 801b50c:	4649      	mov	r1, r9
 801b50e:	f7fd fcbb 	bl	8018e88 <__aeabi_dsub>
 801b512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b514:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b518:	ea43 030a 	orr.w	r3, r3, sl
 801b51c:	4313      	orrs	r3, r2
 801b51e:	4680      	mov	r8, r0
 801b520:	4689      	mov	r9, r1
 801b522:	d055      	beq.n	801b5d0 <_strtod_l+0xba0>
 801b524:	a336      	add	r3, pc, #216	; (adr r3, 801b600 <_strtod_l+0xbd0>)
 801b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b52a:	f7fe f8d7 	bl	80196dc <__aeabi_dcmplt>
 801b52e:	2800      	cmp	r0, #0
 801b530:	f47f acd0 	bne.w	801aed4 <_strtod_l+0x4a4>
 801b534:	a334      	add	r3, pc, #208	; (adr r3, 801b608 <_strtod_l+0xbd8>)
 801b536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b53a:	4640      	mov	r0, r8
 801b53c:	4649      	mov	r1, r9
 801b53e:	f7fe f8eb 	bl	8019718 <__aeabi_dcmpgt>
 801b542:	2800      	cmp	r0, #0
 801b544:	f43f af7b 	beq.w	801b43e <_strtod_l+0xa0e>
 801b548:	e4c4      	b.n	801aed4 <_strtod_l+0x4a4>
 801b54a:	9b04      	ldr	r3, [sp, #16]
 801b54c:	b333      	cbz	r3, 801b59c <_strtod_l+0xb6c>
 801b54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b550:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b554:	d822      	bhi.n	801b59c <_strtod_l+0xb6c>
 801b556:	a32e      	add	r3, pc, #184	; (adr r3, 801b610 <_strtod_l+0xbe0>)
 801b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55c:	4640      	mov	r0, r8
 801b55e:	4649      	mov	r1, r9
 801b560:	f7fe f8c6 	bl	80196f0 <__aeabi_dcmple>
 801b564:	b1a0      	cbz	r0, 801b590 <_strtod_l+0xb60>
 801b566:	4649      	mov	r1, r9
 801b568:	4640      	mov	r0, r8
 801b56a:	f7fe f91d 	bl	80197a8 <__aeabi_d2uiz>
 801b56e:	2801      	cmp	r0, #1
 801b570:	bf38      	it	cc
 801b572:	2001      	movcc	r0, #1
 801b574:	f7fd fdc6 	bl	8019104 <__aeabi_ui2d>
 801b578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b57a:	4680      	mov	r8, r0
 801b57c:	4689      	mov	r9, r1
 801b57e:	bb23      	cbnz	r3, 801b5ca <_strtod_l+0xb9a>
 801b580:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b584:	9010      	str	r0, [sp, #64]	; 0x40
 801b586:	9311      	str	r3, [sp, #68]	; 0x44
 801b588:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b58c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b594:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b598:	1a9b      	subs	r3, r3, r2
 801b59a:	9309      	str	r3, [sp, #36]	; 0x24
 801b59c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b5a0:	eeb0 0a48 	vmov.f32	s0, s16
 801b5a4:	eef0 0a68 	vmov.f32	s1, s17
 801b5a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b5ac:	f001 fe64 	bl	801d278 <__ulp>
 801b5b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b5b4:	ec53 2b10 	vmov	r2, r3, d0
 801b5b8:	f7fd fe1e 	bl	80191f8 <__aeabi_dmul>
 801b5bc:	ec53 2b18 	vmov	r2, r3, d8
 801b5c0:	f7fd fc64 	bl	8018e8c <__adddf3>
 801b5c4:	4682      	mov	sl, r0
 801b5c6:	468b      	mov	fp, r1
 801b5c8:	e78d      	b.n	801b4e6 <_strtod_l+0xab6>
 801b5ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b5ce:	e7db      	b.n	801b588 <_strtod_l+0xb58>
 801b5d0:	a311      	add	r3, pc, #68	; (adr r3, 801b618 <_strtod_l+0xbe8>)
 801b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5d6:	f7fe f881 	bl	80196dc <__aeabi_dcmplt>
 801b5da:	e7b2      	b.n	801b542 <_strtod_l+0xb12>
 801b5dc:	2300      	movs	r3, #0
 801b5de:	930a      	str	r3, [sp, #40]	; 0x28
 801b5e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5e4:	6013      	str	r3, [r2, #0]
 801b5e6:	f7ff ba6b 	b.w	801aac0 <_strtod_l+0x90>
 801b5ea:	2a65      	cmp	r2, #101	; 0x65
 801b5ec:	f43f ab5f 	beq.w	801acae <_strtod_l+0x27e>
 801b5f0:	2a45      	cmp	r2, #69	; 0x45
 801b5f2:	f43f ab5c 	beq.w	801acae <_strtod_l+0x27e>
 801b5f6:	2301      	movs	r3, #1
 801b5f8:	f7ff bb94 	b.w	801ad24 <_strtod_l+0x2f4>
 801b5fc:	f3af 8000 	nop.w
 801b600:	94a03595 	.word	0x94a03595
 801b604:	3fdfffff 	.word	0x3fdfffff
 801b608:	35afe535 	.word	0x35afe535
 801b60c:	3fe00000 	.word	0x3fe00000
 801b610:	ffc00000 	.word	0xffc00000
 801b614:	41dfffff 	.word	0x41dfffff
 801b618:	94a03595 	.word	0x94a03595
 801b61c:	3fcfffff 	.word	0x3fcfffff
 801b620:	3ff00000 	.word	0x3ff00000
 801b624:	7ff00000 	.word	0x7ff00000
 801b628:	7fe00000 	.word	0x7fe00000
 801b62c:	7c9fffff 	.word	0x7c9fffff
 801b630:	3fe00000 	.word	0x3fe00000
 801b634:	bff00000 	.word	0xbff00000
 801b638:	7fefffff 	.word	0x7fefffff

0801b63c <_strtod_r>:
 801b63c:	4b01      	ldr	r3, [pc, #4]	; (801b644 <_strtod_r+0x8>)
 801b63e:	f7ff b9f7 	b.w	801aa30 <_strtod_l>
 801b642:	bf00      	nop
 801b644:	200000cc 	.word	0x200000cc

0801b648 <_strtol_l.constprop.0>:
 801b648:	2b01      	cmp	r3, #1
 801b64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b64e:	d001      	beq.n	801b654 <_strtol_l.constprop.0+0xc>
 801b650:	2b24      	cmp	r3, #36	; 0x24
 801b652:	d906      	bls.n	801b662 <_strtol_l.constprop.0+0x1a>
 801b654:	f7fe fafe 	bl	8019c54 <__errno>
 801b658:	2316      	movs	r3, #22
 801b65a:	6003      	str	r3, [r0, #0]
 801b65c:	2000      	movs	r0, #0
 801b65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b662:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b748 <_strtol_l.constprop.0+0x100>
 801b666:	460d      	mov	r5, r1
 801b668:	462e      	mov	r6, r5
 801b66a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b66e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b672:	f017 0708 	ands.w	r7, r7, #8
 801b676:	d1f7      	bne.n	801b668 <_strtol_l.constprop.0+0x20>
 801b678:	2c2d      	cmp	r4, #45	; 0x2d
 801b67a:	d132      	bne.n	801b6e2 <_strtol_l.constprop.0+0x9a>
 801b67c:	782c      	ldrb	r4, [r5, #0]
 801b67e:	2701      	movs	r7, #1
 801b680:	1cb5      	adds	r5, r6, #2
 801b682:	2b00      	cmp	r3, #0
 801b684:	d05b      	beq.n	801b73e <_strtol_l.constprop.0+0xf6>
 801b686:	2b10      	cmp	r3, #16
 801b688:	d109      	bne.n	801b69e <_strtol_l.constprop.0+0x56>
 801b68a:	2c30      	cmp	r4, #48	; 0x30
 801b68c:	d107      	bne.n	801b69e <_strtol_l.constprop.0+0x56>
 801b68e:	782c      	ldrb	r4, [r5, #0]
 801b690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b694:	2c58      	cmp	r4, #88	; 0x58
 801b696:	d14d      	bne.n	801b734 <_strtol_l.constprop.0+0xec>
 801b698:	786c      	ldrb	r4, [r5, #1]
 801b69a:	2310      	movs	r3, #16
 801b69c:	3502      	adds	r5, #2
 801b69e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b6a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b6a6:	f04f 0c00 	mov.w	ip, #0
 801b6aa:	fbb8 f9f3 	udiv	r9, r8, r3
 801b6ae:	4666      	mov	r6, ip
 801b6b0:	fb03 8a19 	mls	sl, r3, r9, r8
 801b6b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b6b8:	f1be 0f09 	cmp.w	lr, #9
 801b6bc:	d816      	bhi.n	801b6ec <_strtol_l.constprop.0+0xa4>
 801b6be:	4674      	mov	r4, lr
 801b6c0:	42a3      	cmp	r3, r4
 801b6c2:	dd24      	ble.n	801b70e <_strtol_l.constprop.0+0xc6>
 801b6c4:	f1bc 0f00 	cmp.w	ip, #0
 801b6c8:	db1e      	blt.n	801b708 <_strtol_l.constprop.0+0xc0>
 801b6ca:	45b1      	cmp	r9, r6
 801b6cc:	d31c      	bcc.n	801b708 <_strtol_l.constprop.0+0xc0>
 801b6ce:	d101      	bne.n	801b6d4 <_strtol_l.constprop.0+0x8c>
 801b6d0:	45a2      	cmp	sl, r4
 801b6d2:	db19      	blt.n	801b708 <_strtol_l.constprop.0+0xc0>
 801b6d4:	fb06 4603 	mla	r6, r6, r3, r4
 801b6d8:	f04f 0c01 	mov.w	ip, #1
 801b6dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b6e0:	e7e8      	b.n	801b6b4 <_strtol_l.constprop.0+0x6c>
 801b6e2:	2c2b      	cmp	r4, #43	; 0x2b
 801b6e4:	bf04      	itt	eq
 801b6e6:	782c      	ldrbeq	r4, [r5, #0]
 801b6e8:	1cb5      	addeq	r5, r6, #2
 801b6ea:	e7ca      	b.n	801b682 <_strtol_l.constprop.0+0x3a>
 801b6ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b6f0:	f1be 0f19 	cmp.w	lr, #25
 801b6f4:	d801      	bhi.n	801b6fa <_strtol_l.constprop.0+0xb2>
 801b6f6:	3c37      	subs	r4, #55	; 0x37
 801b6f8:	e7e2      	b.n	801b6c0 <_strtol_l.constprop.0+0x78>
 801b6fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b6fe:	f1be 0f19 	cmp.w	lr, #25
 801b702:	d804      	bhi.n	801b70e <_strtol_l.constprop.0+0xc6>
 801b704:	3c57      	subs	r4, #87	; 0x57
 801b706:	e7db      	b.n	801b6c0 <_strtol_l.constprop.0+0x78>
 801b708:	f04f 3cff 	mov.w	ip, #4294967295
 801b70c:	e7e6      	b.n	801b6dc <_strtol_l.constprop.0+0x94>
 801b70e:	f1bc 0f00 	cmp.w	ip, #0
 801b712:	da05      	bge.n	801b720 <_strtol_l.constprop.0+0xd8>
 801b714:	2322      	movs	r3, #34	; 0x22
 801b716:	6003      	str	r3, [r0, #0]
 801b718:	4646      	mov	r6, r8
 801b71a:	b942      	cbnz	r2, 801b72e <_strtol_l.constprop.0+0xe6>
 801b71c:	4630      	mov	r0, r6
 801b71e:	e79e      	b.n	801b65e <_strtol_l.constprop.0+0x16>
 801b720:	b107      	cbz	r7, 801b724 <_strtol_l.constprop.0+0xdc>
 801b722:	4276      	negs	r6, r6
 801b724:	2a00      	cmp	r2, #0
 801b726:	d0f9      	beq.n	801b71c <_strtol_l.constprop.0+0xd4>
 801b728:	f1bc 0f00 	cmp.w	ip, #0
 801b72c:	d000      	beq.n	801b730 <_strtol_l.constprop.0+0xe8>
 801b72e:	1e69      	subs	r1, r5, #1
 801b730:	6011      	str	r1, [r2, #0]
 801b732:	e7f3      	b.n	801b71c <_strtol_l.constprop.0+0xd4>
 801b734:	2430      	movs	r4, #48	; 0x30
 801b736:	2b00      	cmp	r3, #0
 801b738:	d1b1      	bne.n	801b69e <_strtol_l.constprop.0+0x56>
 801b73a:	2308      	movs	r3, #8
 801b73c:	e7af      	b.n	801b69e <_strtol_l.constprop.0+0x56>
 801b73e:	2c30      	cmp	r4, #48	; 0x30
 801b740:	d0a5      	beq.n	801b68e <_strtol_l.constprop.0+0x46>
 801b742:	230a      	movs	r3, #10
 801b744:	e7ab      	b.n	801b69e <_strtol_l.constprop.0+0x56>
 801b746:	bf00      	nop
 801b748:	08052499 	.word	0x08052499

0801b74c <_strtol_r>:
 801b74c:	f7ff bf7c 	b.w	801b648 <_strtol_l.constprop.0>

0801b750 <strtol>:
 801b750:	4613      	mov	r3, r2
 801b752:	460a      	mov	r2, r1
 801b754:	4601      	mov	r1, r0
 801b756:	4802      	ldr	r0, [pc, #8]	; (801b760 <strtol+0x10>)
 801b758:	6800      	ldr	r0, [r0, #0]
 801b75a:	f7ff bf75 	b.w	801b648 <_strtol_l.constprop.0>
 801b75e:	bf00      	nop
 801b760:	20000064 	.word	0x20000064

0801b764 <quorem>:
 801b764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b768:	6903      	ldr	r3, [r0, #16]
 801b76a:	690c      	ldr	r4, [r1, #16]
 801b76c:	42a3      	cmp	r3, r4
 801b76e:	4607      	mov	r7, r0
 801b770:	f2c0 8081 	blt.w	801b876 <quorem+0x112>
 801b774:	3c01      	subs	r4, #1
 801b776:	f101 0814 	add.w	r8, r1, #20
 801b77a:	f100 0514 	add.w	r5, r0, #20
 801b77e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b782:	9301      	str	r3, [sp, #4]
 801b784:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b78c:	3301      	adds	r3, #1
 801b78e:	429a      	cmp	r2, r3
 801b790:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b794:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b798:	fbb2 f6f3 	udiv	r6, r2, r3
 801b79c:	d331      	bcc.n	801b802 <quorem+0x9e>
 801b79e:	f04f 0e00 	mov.w	lr, #0
 801b7a2:	4640      	mov	r0, r8
 801b7a4:	46ac      	mov	ip, r5
 801b7a6:	46f2      	mov	sl, lr
 801b7a8:	f850 2b04 	ldr.w	r2, [r0], #4
 801b7ac:	b293      	uxth	r3, r2
 801b7ae:	fb06 e303 	mla	r3, r6, r3, lr
 801b7b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b7b6:	b29b      	uxth	r3, r3
 801b7b8:	ebaa 0303 	sub.w	r3, sl, r3
 801b7bc:	f8dc a000 	ldr.w	sl, [ip]
 801b7c0:	0c12      	lsrs	r2, r2, #16
 801b7c2:	fa13 f38a 	uxtah	r3, r3, sl
 801b7c6:	fb06 e202 	mla	r2, r6, r2, lr
 801b7ca:	9300      	str	r3, [sp, #0]
 801b7cc:	9b00      	ldr	r3, [sp, #0]
 801b7ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b7d2:	b292      	uxth	r2, r2
 801b7d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b7d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b7dc:	f8bd 3000 	ldrh.w	r3, [sp]
 801b7e0:	4581      	cmp	r9, r0
 801b7e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7e6:	f84c 3b04 	str.w	r3, [ip], #4
 801b7ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b7ee:	d2db      	bcs.n	801b7a8 <quorem+0x44>
 801b7f0:	f855 300b 	ldr.w	r3, [r5, fp]
 801b7f4:	b92b      	cbnz	r3, 801b802 <quorem+0x9e>
 801b7f6:	9b01      	ldr	r3, [sp, #4]
 801b7f8:	3b04      	subs	r3, #4
 801b7fa:	429d      	cmp	r5, r3
 801b7fc:	461a      	mov	r2, r3
 801b7fe:	d32e      	bcc.n	801b85e <quorem+0xfa>
 801b800:	613c      	str	r4, [r7, #16]
 801b802:	4638      	mov	r0, r7
 801b804:	f001 fc92 	bl	801d12c <__mcmp>
 801b808:	2800      	cmp	r0, #0
 801b80a:	db24      	blt.n	801b856 <quorem+0xf2>
 801b80c:	3601      	adds	r6, #1
 801b80e:	4628      	mov	r0, r5
 801b810:	f04f 0c00 	mov.w	ip, #0
 801b814:	f858 2b04 	ldr.w	r2, [r8], #4
 801b818:	f8d0 e000 	ldr.w	lr, [r0]
 801b81c:	b293      	uxth	r3, r2
 801b81e:	ebac 0303 	sub.w	r3, ip, r3
 801b822:	0c12      	lsrs	r2, r2, #16
 801b824:	fa13 f38e 	uxtah	r3, r3, lr
 801b828:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b82c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b830:	b29b      	uxth	r3, r3
 801b832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b836:	45c1      	cmp	r9, r8
 801b838:	f840 3b04 	str.w	r3, [r0], #4
 801b83c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b840:	d2e8      	bcs.n	801b814 <quorem+0xb0>
 801b842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b84a:	b922      	cbnz	r2, 801b856 <quorem+0xf2>
 801b84c:	3b04      	subs	r3, #4
 801b84e:	429d      	cmp	r5, r3
 801b850:	461a      	mov	r2, r3
 801b852:	d30a      	bcc.n	801b86a <quorem+0x106>
 801b854:	613c      	str	r4, [r7, #16]
 801b856:	4630      	mov	r0, r6
 801b858:	b003      	add	sp, #12
 801b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b85e:	6812      	ldr	r2, [r2, #0]
 801b860:	3b04      	subs	r3, #4
 801b862:	2a00      	cmp	r2, #0
 801b864:	d1cc      	bne.n	801b800 <quorem+0x9c>
 801b866:	3c01      	subs	r4, #1
 801b868:	e7c7      	b.n	801b7fa <quorem+0x96>
 801b86a:	6812      	ldr	r2, [r2, #0]
 801b86c:	3b04      	subs	r3, #4
 801b86e:	2a00      	cmp	r2, #0
 801b870:	d1f0      	bne.n	801b854 <quorem+0xf0>
 801b872:	3c01      	subs	r4, #1
 801b874:	e7eb      	b.n	801b84e <quorem+0xea>
 801b876:	2000      	movs	r0, #0
 801b878:	e7ee      	b.n	801b858 <quorem+0xf4>
 801b87a:	0000      	movs	r0, r0
 801b87c:	0000      	movs	r0, r0
	...

0801b880 <_dtoa_r>:
 801b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b884:	ed2d 8b04 	vpush	{d8-d9}
 801b888:	ec57 6b10 	vmov	r6, r7, d0
 801b88c:	b093      	sub	sp, #76	; 0x4c
 801b88e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b890:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b894:	9106      	str	r1, [sp, #24]
 801b896:	ee10 aa10 	vmov	sl, s0
 801b89a:	4604      	mov	r4, r0
 801b89c:	9209      	str	r2, [sp, #36]	; 0x24
 801b89e:	930c      	str	r3, [sp, #48]	; 0x30
 801b8a0:	46bb      	mov	fp, r7
 801b8a2:	b975      	cbnz	r5, 801b8c2 <_dtoa_r+0x42>
 801b8a4:	2010      	movs	r0, #16
 801b8a6:	f001 f94d 	bl	801cb44 <malloc>
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	6260      	str	r0, [r4, #36]	; 0x24
 801b8ae:	b920      	cbnz	r0, 801b8ba <_dtoa_r+0x3a>
 801b8b0:	4ba7      	ldr	r3, [pc, #668]	; (801bb50 <_dtoa_r+0x2d0>)
 801b8b2:	21ea      	movs	r1, #234	; 0xea
 801b8b4:	48a7      	ldr	r0, [pc, #668]	; (801bb54 <_dtoa_r+0x2d4>)
 801b8b6:	f002 f8bd 	bl	801da34 <__assert_func>
 801b8ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b8be:	6005      	str	r5, [r0, #0]
 801b8c0:	60c5      	str	r5, [r0, #12]
 801b8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8c4:	6819      	ldr	r1, [r3, #0]
 801b8c6:	b151      	cbz	r1, 801b8de <_dtoa_r+0x5e>
 801b8c8:	685a      	ldr	r2, [r3, #4]
 801b8ca:	604a      	str	r2, [r1, #4]
 801b8cc:	2301      	movs	r3, #1
 801b8ce:	4093      	lsls	r3, r2
 801b8d0:	608b      	str	r3, [r1, #8]
 801b8d2:	4620      	mov	r0, r4
 801b8d4:	f001 f99e 	bl	801cc14 <_Bfree>
 801b8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8da:	2200      	movs	r2, #0
 801b8dc:	601a      	str	r2, [r3, #0]
 801b8de:	1e3b      	subs	r3, r7, #0
 801b8e0:	bfaa      	itet	ge
 801b8e2:	2300      	movge	r3, #0
 801b8e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b8e8:	f8c8 3000 	strge.w	r3, [r8]
 801b8ec:	4b9a      	ldr	r3, [pc, #616]	; (801bb58 <_dtoa_r+0x2d8>)
 801b8ee:	bfbc      	itt	lt
 801b8f0:	2201      	movlt	r2, #1
 801b8f2:	f8c8 2000 	strlt.w	r2, [r8]
 801b8f6:	ea33 030b 	bics.w	r3, r3, fp
 801b8fa:	d11b      	bne.n	801b934 <_dtoa_r+0xb4>
 801b8fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8fe:	f242 730f 	movw	r3, #9999	; 0x270f
 801b902:	6013      	str	r3, [r2, #0]
 801b904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b908:	4333      	orrs	r3, r6
 801b90a:	f000 8592 	beq.w	801c432 <_dtoa_r+0xbb2>
 801b90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b910:	b963      	cbnz	r3, 801b92c <_dtoa_r+0xac>
 801b912:	4b92      	ldr	r3, [pc, #584]	; (801bb5c <_dtoa_r+0x2dc>)
 801b914:	e022      	b.n	801b95c <_dtoa_r+0xdc>
 801b916:	4b92      	ldr	r3, [pc, #584]	; (801bb60 <_dtoa_r+0x2e0>)
 801b918:	9301      	str	r3, [sp, #4]
 801b91a:	3308      	adds	r3, #8
 801b91c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b91e:	6013      	str	r3, [r2, #0]
 801b920:	9801      	ldr	r0, [sp, #4]
 801b922:	b013      	add	sp, #76	; 0x4c
 801b924:	ecbd 8b04 	vpop	{d8-d9}
 801b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92c:	4b8b      	ldr	r3, [pc, #556]	; (801bb5c <_dtoa_r+0x2dc>)
 801b92e:	9301      	str	r3, [sp, #4]
 801b930:	3303      	adds	r3, #3
 801b932:	e7f3      	b.n	801b91c <_dtoa_r+0x9c>
 801b934:	2200      	movs	r2, #0
 801b936:	2300      	movs	r3, #0
 801b938:	4650      	mov	r0, sl
 801b93a:	4659      	mov	r1, fp
 801b93c:	f7fd fec4 	bl	80196c8 <__aeabi_dcmpeq>
 801b940:	ec4b ab19 	vmov	d9, sl, fp
 801b944:	4680      	mov	r8, r0
 801b946:	b158      	cbz	r0, 801b960 <_dtoa_r+0xe0>
 801b948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b94a:	2301      	movs	r3, #1
 801b94c:	6013      	str	r3, [r2, #0]
 801b94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b950:	2b00      	cmp	r3, #0
 801b952:	f000 856b 	beq.w	801c42c <_dtoa_r+0xbac>
 801b956:	4883      	ldr	r0, [pc, #524]	; (801bb64 <_dtoa_r+0x2e4>)
 801b958:	6018      	str	r0, [r3, #0]
 801b95a:	1e43      	subs	r3, r0, #1
 801b95c:	9301      	str	r3, [sp, #4]
 801b95e:	e7df      	b.n	801b920 <_dtoa_r+0xa0>
 801b960:	ec4b ab10 	vmov	d0, sl, fp
 801b964:	aa10      	add	r2, sp, #64	; 0x40
 801b966:	a911      	add	r1, sp, #68	; 0x44
 801b968:	4620      	mov	r0, r4
 801b96a:	f001 fd01 	bl	801d370 <__d2b>
 801b96e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b972:	ee08 0a10 	vmov	s16, r0
 801b976:	2d00      	cmp	r5, #0
 801b978:	f000 8084 	beq.w	801ba84 <_dtoa_r+0x204>
 801b97c:	ee19 3a90 	vmov	r3, s19
 801b980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b984:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b988:	4656      	mov	r6, sl
 801b98a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b992:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b996:	4b74      	ldr	r3, [pc, #464]	; (801bb68 <_dtoa_r+0x2e8>)
 801b998:	2200      	movs	r2, #0
 801b99a:	4630      	mov	r0, r6
 801b99c:	4639      	mov	r1, r7
 801b99e:	f7fd fa73 	bl	8018e88 <__aeabi_dsub>
 801b9a2:	a365      	add	r3, pc, #404	; (adr r3, 801bb38 <_dtoa_r+0x2b8>)
 801b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9a8:	f7fd fc26 	bl	80191f8 <__aeabi_dmul>
 801b9ac:	a364      	add	r3, pc, #400	; (adr r3, 801bb40 <_dtoa_r+0x2c0>)
 801b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b2:	f7fd fa6b 	bl	8018e8c <__adddf3>
 801b9b6:	4606      	mov	r6, r0
 801b9b8:	4628      	mov	r0, r5
 801b9ba:	460f      	mov	r7, r1
 801b9bc:	f7fd fbb2 	bl	8019124 <__aeabi_i2d>
 801b9c0:	a361      	add	r3, pc, #388	; (adr r3, 801bb48 <_dtoa_r+0x2c8>)
 801b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c6:	f7fd fc17 	bl	80191f8 <__aeabi_dmul>
 801b9ca:	4602      	mov	r2, r0
 801b9cc:	460b      	mov	r3, r1
 801b9ce:	4630      	mov	r0, r6
 801b9d0:	4639      	mov	r1, r7
 801b9d2:	f7fd fa5b 	bl	8018e8c <__adddf3>
 801b9d6:	4606      	mov	r6, r0
 801b9d8:	460f      	mov	r7, r1
 801b9da:	f7fd febd 	bl	8019758 <__aeabi_d2iz>
 801b9de:	2200      	movs	r2, #0
 801b9e0:	9000      	str	r0, [sp, #0]
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	4630      	mov	r0, r6
 801b9e6:	4639      	mov	r1, r7
 801b9e8:	f7fd fe78 	bl	80196dc <__aeabi_dcmplt>
 801b9ec:	b150      	cbz	r0, 801ba04 <_dtoa_r+0x184>
 801b9ee:	9800      	ldr	r0, [sp, #0]
 801b9f0:	f7fd fb98 	bl	8019124 <__aeabi_i2d>
 801b9f4:	4632      	mov	r2, r6
 801b9f6:	463b      	mov	r3, r7
 801b9f8:	f7fd fe66 	bl	80196c8 <__aeabi_dcmpeq>
 801b9fc:	b910      	cbnz	r0, 801ba04 <_dtoa_r+0x184>
 801b9fe:	9b00      	ldr	r3, [sp, #0]
 801ba00:	3b01      	subs	r3, #1
 801ba02:	9300      	str	r3, [sp, #0]
 801ba04:	9b00      	ldr	r3, [sp, #0]
 801ba06:	2b16      	cmp	r3, #22
 801ba08:	d85a      	bhi.n	801bac0 <_dtoa_r+0x240>
 801ba0a:	9a00      	ldr	r2, [sp, #0]
 801ba0c:	4b57      	ldr	r3, [pc, #348]	; (801bb6c <_dtoa_r+0x2ec>)
 801ba0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba16:	ec51 0b19 	vmov	r0, r1, d9
 801ba1a:	f7fd fe5f 	bl	80196dc <__aeabi_dcmplt>
 801ba1e:	2800      	cmp	r0, #0
 801ba20:	d050      	beq.n	801bac4 <_dtoa_r+0x244>
 801ba22:	9b00      	ldr	r3, [sp, #0]
 801ba24:	3b01      	subs	r3, #1
 801ba26:	9300      	str	r3, [sp, #0]
 801ba28:	2300      	movs	r3, #0
 801ba2a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba2e:	1b5d      	subs	r5, r3, r5
 801ba30:	1e6b      	subs	r3, r5, #1
 801ba32:	9305      	str	r3, [sp, #20]
 801ba34:	bf45      	ittet	mi
 801ba36:	f1c5 0301 	rsbmi	r3, r5, #1
 801ba3a:	9304      	strmi	r3, [sp, #16]
 801ba3c:	2300      	movpl	r3, #0
 801ba3e:	2300      	movmi	r3, #0
 801ba40:	bf4c      	ite	mi
 801ba42:	9305      	strmi	r3, [sp, #20]
 801ba44:	9304      	strpl	r3, [sp, #16]
 801ba46:	9b00      	ldr	r3, [sp, #0]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	db3d      	blt.n	801bac8 <_dtoa_r+0x248>
 801ba4c:	9b05      	ldr	r3, [sp, #20]
 801ba4e:	9a00      	ldr	r2, [sp, #0]
 801ba50:	920a      	str	r2, [sp, #40]	; 0x28
 801ba52:	4413      	add	r3, r2
 801ba54:	9305      	str	r3, [sp, #20]
 801ba56:	2300      	movs	r3, #0
 801ba58:	9307      	str	r3, [sp, #28]
 801ba5a:	9b06      	ldr	r3, [sp, #24]
 801ba5c:	2b09      	cmp	r3, #9
 801ba5e:	f200 8089 	bhi.w	801bb74 <_dtoa_r+0x2f4>
 801ba62:	2b05      	cmp	r3, #5
 801ba64:	bfc4      	itt	gt
 801ba66:	3b04      	subgt	r3, #4
 801ba68:	9306      	strgt	r3, [sp, #24]
 801ba6a:	9b06      	ldr	r3, [sp, #24]
 801ba6c:	f1a3 0302 	sub.w	r3, r3, #2
 801ba70:	bfcc      	ite	gt
 801ba72:	2500      	movgt	r5, #0
 801ba74:	2501      	movle	r5, #1
 801ba76:	2b03      	cmp	r3, #3
 801ba78:	f200 8087 	bhi.w	801bb8a <_dtoa_r+0x30a>
 801ba7c:	e8df f003 	tbb	[pc, r3]
 801ba80:	59383a2d 	.word	0x59383a2d
 801ba84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ba88:	441d      	add	r5, r3
 801ba8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ba8e:	2b20      	cmp	r3, #32
 801ba90:	bfc1      	itttt	gt
 801ba92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ba96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ba9a:	fa0b f303 	lslgt.w	r3, fp, r3
 801ba9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801baa2:	bfda      	itte	le
 801baa4:	f1c3 0320 	rsble	r3, r3, #32
 801baa8:	fa06 f003 	lslle.w	r0, r6, r3
 801baac:	4318      	orrgt	r0, r3
 801baae:	f7fd fb29 	bl	8019104 <__aeabi_ui2d>
 801bab2:	2301      	movs	r3, #1
 801bab4:	4606      	mov	r6, r0
 801bab6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801baba:	3d01      	subs	r5, #1
 801babc:	930e      	str	r3, [sp, #56]	; 0x38
 801babe:	e76a      	b.n	801b996 <_dtoa_r+0x116>
 801bac0:	2301      	movs	r3, #1
 801bac2:	e7b2      	b.n	801ba2a <_dtoa_r+0x1aa>
 801bac4:	900b      	str	r0, [sp, #44]	; 0x2c
 801bac6:	e7b1      	b.n	801ba2c <_dtoa_r+0x1ac>
 801bac8:	9b04      	ldr	r3, [sp, #16]
 801baca:	9a00      	ldr	r2, [sp, #0]
 801bacc:	1a9b      	subs	r3, r3, r2
 801bace:	9304      	str	r3, [sp, #16]
 801bad0:	4253      	negs	r3, r2
 801bad2:	9307      	str	r3, [sp, #28]
 801bad4:	2300      	movs	r3, #0
 801bad6:	930a      	str	r3, [sp, #40]	; 0x28
 801bad8:	e7bf      	b.n	801ba5a <_dtoa_r+0x1da>
 801bada:	2300      	movs	r3, #0
 801badc:	9308      	str	r3, [sp, #32]
 801bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	dc55      	bgt.n	801bb90 <_dtoa_r+0x310>
 801bae4:	2301      	movs	r3, #1
 801bae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801baea:	461a      	mov	r2, r3
 801baec:	9209      	str	r2, [sp, #36]	; 0x24
 801baee:	e00c      	b.n	801bb0a <_dtoa_r+0x28a>
 801baf0:	2301      	movs	r3, #1
 801baf2:	e7f3      	b.n	801badc <_dtoa_r+0x25c>
 801baf4:	2300      	movs	r3, #0
 801baf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801baf8:	9308      	str	r3, [sp, #32]
 801bafa:	9b00      	ldr	r3, [sp, #0]
 801bafc:	4413      	add	r3, r2
 801bafe:	9302      	str	r3, [sp, #8]
 801bb00:	3301      	adds	r3, #1
 801bb02:	2b01      	cmp	r3, #1
 801bb04:	9303      	str	r3, [sp, #12]
 801bb06:	bfb8      	it	lt
 801bb08:	2301      	movlt	r3, #1
 801bb0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	6042      	str	r2, [r0, #4]
 801bb10:	2204      	movs	r2, #4
 801bb12:	f102 0614 	add.w	r6, r2, #20
 801bb16:	429e      	cmp	r6, r3
 801bb18:	6841      	ldr	r1, [r0, #4]
 801bb1a:	d93d      	bls.n	801bb98 <_dtoa_r+0x318>
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	f001 f839 	bl	801cb94 <_Balloc>
 801bb22:	9001      	str	r0, [sp, #4]
 801bb24:	2800      	cmp	r0, #0
 801bb26:	d13b      	bne.n	801bba0 <_dtoa_r+0x320>
 801bb28:	4b11      	ldr	r3, [pc, #68]	; (801bb70 <_dtoa_r+0x2f0>)
 801bb2a:	4602      	mov	r2, r0
 801bb2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bb30:	e6c0      	b.n	801b8b4 <_dtoa_r+0x34>
 801bb32:	2301      	movs	r3, #1
 801bb34:	e7df      	b.n	801baf6 <_dtoa_r+0x276>
 801bb36:	bf00      	nop
 801bb38:	636f4361 	.word	0x636f4361
 801bb3c:	3fd287a7 	.word	0x3fd287a7
 801bb40:	8b60c8b3 	.word	0x8b60c8b3
 801bb44:	3fc68a28 	.word	0x3fc68a28
 801bb48:	509f79fb 	.word	0x509f79fb
 801bb4c:	3fd34413 	.word	0x3fd34413
 801bb50:	080525a6 	.word	0x080525a6
 801bb54:	080525bd 	.word	0x080525bd
 801bb58:	7ff00000 	.word	0x7ff00000
 801bb5c:	080525a2 	.word	0x080525a2
 801bb60:	08052599 	.word	0x08052599
 801bb64:	0805241d 	.word	0x0805241d
 801bb68:	3ff80000 	.word	0x3ff80000
 801bb6c:	08052728 	.word	0x08052728
 801bb70:	08052618 	.word	0x08052618
 801bb74:	2501      	movs	r5, #1
 801bb76:	2300      	movs	r3, #0
 801bb78:	9306      	str	r3, [sp, #24]
 801bb7a:	9508      	str	r5, [sp, #32]
 801bb7c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bb84:	2200      	movs	r2, #0
 801bb86:	2312      	movs	r3, #18
 801bb88:	e7b0      	b.n	801baec <_dtoa_r+0x26c>
 801bb8a:	2301      	movs	r3, #1
 801bb8c:	9308      	str	r3, [sp, #32]
 801bb8e:	e7f5      	b.n	801bb7c <_dtoa_r+0x2fc>
 801bb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bb96:	e7b8      	b.n	801bb0a <_dtoa_r+0x28a>
 801bb98:	3101      	adds	r1, #1
 801bb9a:	6041      	str	r1, [r0, #4]
 801bb9c:	0052      	lsls	r2, r2, #1
 801bb9e:	e7b8      	b.n	801bb12 <_dtoa_r+0x292>
 801bba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bba2:	9a01      	ldr	r2, [sp, #4]
 801bba4:	601a      	str	r2, [r3, #0]
 801bba6:	9b03      	ldr	r3, [sp, #12]
 801bba8:	2b0e      	cmp	r3, #14
 801bbaa:	f200 809d 	bhi.w	801bce8 <_dtoa_r+0x468>
 801bbae:	2d00      	cmp	r5, #0
 801bbb0:	f000 809a 	beq.w	801bce8 <_dtoa_r+0x468>
 801bbb4:	9b00      	ldr	r3, [sp, #0]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	dd32      	ble.n	801bc20 <_dtoa_r+0x3a0>
 801bbba:	4ab7      	ldr	r2, [pc, #732]	; (801be98 <_dtoa_r+0x618>)
 801bbbc:	f003 030f 	and.w	r3, r3, #15
 801bbc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bbc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bbc8:	9b00      	ldr	r3, [sp, #0]
 801bbca:	05d8      	lsls	r0, r3, #23
 801bbcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bbd0:	d516      	bpl.n	801bc00 <_dtoa_r+0x380>
 801bbd2:	4bb2      	ldr	r3, [pc, #712]	; (801be9c <_dtoa_r+0x61c>)
 801bbd4:	ec51 0b19 	vmov	r0, r1, d9
 801bbd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bbdc:	f7fd fc36 	bl	801944c <__aeabi_ddiv>
 801bbe0:	f007 070f 	and.w	r7, r7, #15
 801bbe4:	4682      	mov	sl, r0
 801bbe6:	468b      	mov	fp, r1
 801bbe8:	2503      	movs	r5, #3
 801bbea:	4eac      	ldr	r6, [pc, #688]	; (801be9c <_dtoa_r+0x61c>)
 801bbec:	b957      	cbnz	r7, 801bc04 <_dtoa_r+0x384>
 801bbee:	4642      	mov	r2, r8
 801bbf0:	464b      	mov	r3, r9
 801bbf2:	4650      	mov	r0, sl
 801bbf4:	4659      	mov	r1, fp
 801bbf6:	f7fd fc29 	bl	801944c <__aeabi_ddiv>
 801bbfa:	4682      	mov	sl, r0
 801bbfc:	468b      	mov	fp, r1
 801bbfe:	e028      	b.n	801bc52 <_dtoa_r+0x3d2>
 801bc00:	2502      	movs	r5, #2
 801bc02:	e7f2      	b.n	801bbea <_dtoa_r+0x36a>
 801bc04:	07f9      	lsls	r1, r7, #31
 801bc06:	d508      	bpl.n	801bc1a <_dtoa_r+0x39a>
 801bc08:	4640      	mov	r0, r8
 801bc0a:	4649      	mov	r1, r9
 801bc0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bc10:	f7fd faf2 	bl	80191f8 <__aeabi_dmul>
 801bc14:	3501      	adds	r5, #1
 801bc16:	4680      	mov	r8, r0
 801bc18:	4689      	mov	r9, r1
 801bc1a:	107f      	asrs	r7, r7, #1
 801bc1c:	3608      	adds	r6, #8
 801bc1e:	e7e5      	b.n	801bbec <_dtoa_r+0x36c>
 801bc20:	f000 809b 	beq.w	801bd5a <_dtoa_r+0x4da>
 801bc24:	9b00      	ldr	r3, [sp, #0]
 801bc26:	4f9d      	ldr	r7, [pc, #628]	; (801be9c <_dtoa_r+0x61c>)
 801bc28:	425e      	negs	r6, r3
 801bc2a:	4b9b      	ldr	r3, [pc, #620]	; (801be98 <_dtoa_r+0x618>)
 801bc2c:	f006 020f 	and.w	r2, r6, #15
 801bc30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc38:	ec51 0b19 	vmov	r0, r1, d9
 801bc3c:	f7fd fadc 	bl	80191f8 <__aeabi_dmul>
 801bc40:	1136      	asrs	r6, r6, #4
 801bc42:	4682      	mov	sl, r0
 801bc44:	468b      	mov	fp, r1
 801bc46:	2300      	movs	r3, #0
 801bc48:	2502      	movs	r5, #2
 801bc4a:	2e00      	cmp	r6, #0
 801bc4c:	d17a      	bne.n	801bd44 <_dtoa_r+0x4c4>
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d1d3      	bne.n	801bbfa <_dtoa_r+0x37a>
 801bc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	f000 8082 	beq.w	801bd5e <_dtoa_r+0x4de>
 801bc5a:	4b91      	ldr	r3, [pc, #580]	; (801bea0 <_dtoa_r+0x620>)
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	4650      	mov	r0, sl
 801bc60:	4659      	mov	r1, fp
 801bc62:	f7fd fd3b 	bl	80196dc <__aeabi_dcmplt>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	d079      	beq.n	801bd5e <_dtoa_r+0x4de>
 801bc6a:	9b03      	ldr	r3, [sp, #12]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d076      	beq.n	801bd5e <_dtoa_r+0x4de>
 801bc70:	9b02      	ldr	r3, [sp, #8]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	dd36      	ble.n	801bce4 <_dtoa_r+0x464>
 801bc76:	9b00      	ldr	r3, [sp, #0]
 801bc78:	4650      	mov	r0, sl
 801bc7a:	4659      	mov	r1, fp
 801bc7c:	1e5f      	subs	r7, r3, #1
 801bc7e:	2200      	movs	r2, #0
 801bc80:	4b88      	ldr	r3, [pc, #544]	; (801bea4 <_dtoa_r+0x624>)
 801bc82:	f7fd fab9 	bl	80191f8 <__aeabi_dmul>
 801bc86:	9e02      	ldr	r6, [sp, #8]
 801bc88:	4682      	mov	sl, r0
 801bc8a:	468b      	mov	fp, r1
 801bc8c:	3501      	adds	r5, #1
 801bc8e:	4628      	mov	r0, r5
 801bc90:	f7fd fa48 	bl	8019124 <__aeabi_i2d>
 801bc94:	4652      	mov	r2, sl
 801bc96:	465b      	mov	r3, fp
 801bc98:	f7fd faae 	bl	80191f8 <__aeabi_dmul>
 801bc9c:	4b82      	ldr	r3, [pc, #520]	; (801bea8 <_dtoa_r+0x628>)
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f7fd f8f4 	bl	8018e8c <__adddf3>
 801bca4:	46d0      	mov	r8, sl
 801bca6:	46d9      	mov	r9, fp
 801bca8:	4682      	mov	sl, r0
 801bcaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bcae:	2e00      	cmp	r6, #0
 801bcb0:	d158      	bne.n	801bd64 <_dtoa_r+0x4e4>
 801bcb2:	4b7e      	ldr	r3, [pc, #504]	; (801beac <_dtoa_r+0x62c>)
 801bcb4:	2200      	movs	r2, #0
 801bcb6:	4640      	mov	r0, r8
 801bcb8:	4649      	mov	r1, r9
 801bcba:	f7fd f8e5 	bl	8018e88 <__aeabi_dsub>
 801bcbe:	4652      	mov	r2, sl
 801bcc0:	465b      	mov	r3, fp
 801bcc2:	4680      	mov	r8, r0
 801bcc4:	4689      	mov	r9, r1
 801bcc6:	f7fd fd27 	bl	8019718 <__aeabi_dcmpgt>
 801bcca:	2800      	cmp	r0, #0
 801bccc:	f040 8295 	bne.w	801c1fa <_dtoa_r+0x97a>
 801bcd0:	4652      	mov	r2, sl
 801bcd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bcd6:	4640      	mov	r0, r8
 801bcd8:	4649      	mov	r1, r9
 801bcda:	f7fd fcff 	bl	80196dc <__aeabi_dcmplt>
 801bcde:	2800      	cmp	r0, #0
 801bce0:	f040 8289 	bne.w	801c1f6 <_dtoa_r+0x976>
 801bce4:	ec5b ab19 	vmov	sl, fp, d9
 801bce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	f2c0 8148 	blt.w	801bf80 <_dtoa_r+0x700>
 801bcf0:	9a00      	ldr	r2, [sp, #0]
 801bcf2:	2a0e      	cmp	r2, #14
 801bcf4:	f300 8144 	bgt.w	801bf80 <_dtoa_r+0x700>
 801bcf8:	4b67      	ldr	r3, [pc, #412]	; (801be98 <_dtoa_r+0x618>)
 801bcfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bcfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	f280 80d5 	bge.w	801beb4 <_dtoa_r+0x634>
 801bd0a:	9b03      	ldr	r3, [sp, #12]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	f300 80d1 	bgt.w	801beb4 <_dtoa_r+0x634>
 801bd12:	f040 826f 	bne.w	801c1f4 <_dtoa_r+0x974>
 801bd16:	4b65      	ldr	r3, [pc, #404]	; (801beac <_dtoa_r+0x62c>)
 801bd18:	2200      	movs	r2, #0
 801bd1a:	4640      	mov	r0, r8
 801bd1c:	4649      	mov	r1, r9
 801bd1e:	f7fd fa6b 	bl	80191f8 <__aeabi_dmul>
 801bd22:	4652      	mov	r2, sl
 801bd24:	465b      	mov	r3, fp
 801bd26:	f7fd fced 	bl	8019704 <__aeabi_dcmpge>
 801bd2a:	9e03      	ldr	r6, [sp, #12]
 801bd2c:	4637      	mov	r7, r6
 801bd2e:	2800      	cmp	r0, #0
 801bd30:	f040 8245 	bne.w	801c1be <_dtoa_r+0x93e>
 801bd34:	9d01      	ldr	r5, [sp, #4]
 801bd36:	2331      	movs	r3, #49	; 0x31
 801bd38:	f805 3b01 	strb.w	r3, [r5], #1
 801bd3c:	9b00      	ldr	r3, [sp, #0]
 801bd3e:	3301      	adds	r3, #1
 801bd40:	9300      	str	r3, [sp, #0]
 801bd42:	e240      	b.n	801c1c6 <_dtoa_r+0x946>
 801bd44:	07f2      	lsls	r2, r6, #31
 801bd46:	d505      	bpl.n	801bd54 <_dtoa_r+0x4d4>
 801bd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bd4c:	f7fd fa54 	bl	80191f8 <__aeabi_dmul>
 801bd50:	3501      	adds	r5, #1
 801bd52:	2301      	movs	r3, #1
 801bd54:	1076      	asrs	r6, r6, #1
 801bd56:	3708      	adds	r7, #8
 801bd58:	e777      	b.n	801bc4a <_dtoa_r+0x3ca>
 801bd5a:	2502      	movs	r5, #2
 801bd5c:	e779      	b.n	801bc52 <_dtoa_r+0x3d2>
 801bd5e:	9f00      	ldr	r7, [sp, #0]
 801bd60:	9e03      	ldr	r6, [sp, #12]
 801bd62:	e794      	b.n	801bc8e <_dtoa_r+0x40e>
 801bd64:	9901      	ldr	r1, [sp, #4]
 801bd66:	4b4c      	ldr	r3, [pc, #304]	; (801be98 <_dtoa_r+0x618>)
 801bd68:	4431      	add	r1, r6
 801bd6a:	910d      	str	r1, [sp, #52]	; 0x34
 801bd6c:	9908      	ldr	r1, [sp, #32]
 801bd6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bd72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bd76:	2900      	cmp	r1, #0
 801bd78:	d043      	beq.n	801be02 <_dtoa_r+0x582>
 801bd7a:	494d      	ldr	r1, [pc, #308]	; (801beb0 <_dtoa_r+0x630>)
 801bd7c:	2000      	movs	r0, #0
 801bd7e:	f7fd fb65 	bl	801944c <__aeabi_ddiv>
 801bd82:	4652      	mov	r2, sl
 801bd84:	465b      	mov	r3, fp
 801bd86:	f7fd f87f 	bl	8018e88 <__aeabi_dsub>
 801bd8a:	9d01      	ldr	r5, [sp, #4]
 801bd8c:	4682      	mov	sl, r0
 801bd8e:	468b      	mov	fp, r1
 801bd90:	4649      	mov	r1, r9
 801bd92:	4640      	mov	r0, r8
 801bd94:	f7fd fce0 	bl	8019758 <__aeabi_d2iz>
 801bd98:	4606      	mov	r6, r0
 801bd9a:	f7fd f9c3 	bl	8019124 <__aeabi_i2d>
 801bd9e:	4602      	mov	r2, r0
 801bda0:	460b      	mov	r3, r1
 801bda2:	4640      	mov	r0, r8
 801bda4:	4649      	mov	r1, r9
 801bda6:	f7fd f86f 	bl	8018e88 <__aeabi_dsub>
 801bdaa:	3630      	adds	r6, #48	; 0x30
 801bdac:	f805 6b01 	strb.w	r6, [r5], #1
 801bdb0:	4652      	mov	r2, sl
 801bdb2:	465b      	mov	r3, fp
 801bdb4:	4680      	mov	r8, r0
 801bdb6:	4689      	mov	r9, r1
 801bdb8:	f7fd fc90 	bl	80196dc <__aeabi_dcmplt>
 801bdbc:	2800      	cmp	r0, #0
 801bdbe:	d163      	bne.n	801be88 <_dtoa_r+0x608>
 801bdc0:	4642      	mov	r2, r8
 801bdc2:	464b      	mov	r3, r9
 801bdc4:	4936      	ldr	r1, [pc, #216]	; (801bea0 <_dtoa_r+0x620>)
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	f7fd f85e 	bl	8018e88 <__aeabi_dsub>
 801bdcc:	4652      	mov	r2, sl
 801bdce:	465b      	mov	r3, fp
 801bdd0:	f7fd fc84 	bl	80196dc <__aeabi_dcmplt>
 801bdd4:	2800      	cmp	r0, #0
 801bdd6:	f040 80b5 	bne.w	801bf44 <_dtoa_r+0x6c4>
 801bdda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bddc:	429d      	cmp	r5, r3
 801bdde:	d081      	beq.n	801bce4 <_dtoa_r+0x464>
 801bde0:	4b30      	ldr	r3, [pc, #192]	; (801bea4 <_dtoa_r+0x624>)
 801bde2:	2200      	movs	r2, #0
 801bde4:	4650      	mov	r0, sl
 801bde6:	4659      	mov	r1, fp
 801bde8:	f7fd fa06 	bl	80191f8 <__aeabi_dmul>
 801bdec:	4b2d      	ldr	r3, [pc, #180]	; (801bea4 <_dtoa_r+0x624>)
 801bdee:	4682      	mov	sl, r0
 801bdf0:	468b      	mov	fp, r1
 801bdf2:	4640      	mov	r0, r8
 801bdf4:	4649      	mov	r1, r9
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	f7fd f9fe 	bl	80191f8 <__aeabi_dmul>
 801bdfc:	4680      	mov	r8, r0
 801bdfe:	4689      	mov	r9, r1
 801be00:	e7c6      	b.n	801bd90 <_dtoa_r+0x510>
 801be02:	4650      	mov	r0, sl
 801be04:	4659      	mov	r1, fp
 801be06:	f7fd f9f7 	bl	80191f8 <__aeabi_dmul>
 801be0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be0c:	9d01      	ldr	r5, [sp, #4]
 801be0e:	930f      	str	r3, [sp, #60]	; 0x3c
 801be10:	4682      	mov	sl, r0
 801be12:	468b      	mov	fp, r1
 801be14:	4649      	mov	r1, r9
 801be16:	4640      	mov	r0, r8
 801be18:	f7fd fc9e 	bl	8019758 <__aeabi_d2iz>
 801be1c:	4606      	mov	r6, r0
 801be1e:	f7fd f981 	bl	8019124 <__aeabi_i2d>
 801be22:	3630      	adds	r6, #48	; 0x30
 801be24:	4602      	mov	r2, r0
 801be26:	460b      	mov	r3, r1
 801be28:	4640      	mov	r0, r8
 801be2a:	4649      	mov	r1, r9
 801be2c:	f7fd f82c 	bl	8018e88 <__aeabi_dsub>
 801be30:	f805 6b01 	strb.w	r6, [r5], #1
 801be34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be36:	429d      	cmp	r5, r3
 801be38:	4680      	mov	r8, r0
 801be3a:	4689      	mov	r9, r1
 801be3c:	f04f 0200 	mov.w	r2, #0
 801be40:	d124      	bne.n	801be8c <_dtoa_r+0x60c>
 801be42:	4b1b      	ldr	r3, [pc, #108]	; (801beb0 <_dtoa_r+0x630>)
 801be44:	4650      	mov	r0, sl
 801be46:	4659      	mov	r1, fp
 801be48:	f7fd f820 	bl	8018e8c <__adddf3>
 801be4c:	4602      	mov	r2, r0
 801be4e:	460b      	mov	r3, r1
 801be50:	4640      	mov	r0, r8
 801be52:	4649      	mov	r1, r9
 801be54:	f7fd fc60 	bl	8019718 <__aeabi_dcmpgt>
 801be58:	2800      	cmp	r0, #0
 801be5a:	d173      	bne.n	801bf44 <_dtoa_r+0x6c4>
 801be5c:	4652      	mov	r2, sl
 801be5e:	465b      	mov	r3, fp
 801be60:	4913      	ldr	r1, [pc, #76]	; (801beb0 <_dtoa_r+0x630>)
 801be62:	2000      	movs	r0, #0
 801be64:	f7fd f810 	bl	8018e88 <__aeabi_dsub>
 801be68:	4602      	mov	r2, r0
 801be6a:	460b      	mov	r3, r1
 801be6c:	4640      	mov	r0, r8
 801be6e:	4649      	mov	r1, r9
 801be70:	f7fd fc34 	bl	80196dc <__aeabi_dcmplt>
 801be74:	2800      	cmp	r0, #0
 801be76:	f43f af35 	beq.w	801bce4 <_dtoa_r+0x464>
 801be7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801be7c:	1e6b      	subs	r3, r5, #1
 801be7e:	930f      	str	r3, [sp, #60]	; 0x3c
 801be80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801be84:	2b30      	cmp	r3, #48	; 0x30
 801be86:	d0f8      	beq.n	801be7a <_dtoa_r+0x5fa>
 801be88:	9700      	str	r7, [sp, #0]
 801be8a:	e049      	b.n	801bf20 <_dtoa_r+0x6a0>
 801be8c:	4b05      	ldr	r3, [pc, #20]	; (801bea4 <_dtoa_r+0x624>)
 801be8e:	f7fd f9b3 	bl	80191f8 <__aeabi_dmul>
 801be92:	4680      	mov	r8, r0
 801be94:	4689      	mov	r9, r1
 801be96:	e7bd      	b.n	801be14 <_dtoa_r+0x594>
 801be98:	08052728 	.word	0x08052728
 801be9c:	08052700 	.word	0x08052700
 801bea0:	3ff00000 	.word	0x3ff00000
 801bea4:	40240000 	.word	0x40240000
 801bea8:	401c0000 	.word	0x401c0000
 801beac:	40140000 	.word	0x40140000
 801beb0:	3fe00000 	.word	0x3fe00000
 801beb4:	9d01      	ldr	r5, [sp, #4]
 801beb6:	4656      	mov	r6, sl
 801beb8:	465f      	mov	r7, fp
 801beba:	4642      	mov	r2, r8
 801bebc:	464b      	mov	r3, r9
 801bebe:	4630      	mov	r0, r6
 801bec0:	4639      	mov	r1, r7
 801bec2:	f7fd fac3 	bl	801944c <__aeabi_ddiv>
 801bec6:	f7fd fc47 	bl	8019758 <__aeabi_d2iz>
 801beca:	4682      	mov	sl, r0
 801becc:	f7fd f92a 	bl	8019124 <__aeabi_i2d>
 801bed0:	4642      	mov	r2, r8
 801bed2:	464b      	mov	r3, r9
 801bed4:	f7fd f990 	bl	80191f8 <__aeabi_dmul>
 801bed8:	4602      	mov	r2, r0
 801beda:	460b      	mov	r3, r1
 801bedc:	4630      	mov	r0, r6
 801bede:	4639      	mov	r1, r7
 801bee0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bee4:	f7fc ffd0 	bl	8018e88 <__aeabi_dsub>
 801bee8:	f805 6b01 	strb.w	r6, [r5], #1
 801beec:	9e01      	ldr	r6, [sp, #4]
 801beee:	9f03      	ldr	r7, [sp, #12]
 801bef0:	1bae      	subs	r6, r5, r6
 801bef2:	42b7      	cmp	r7, r6
 801bef4:	4602      	mov	r2, r0
 801bef6:	460b      	mov	r3, r1
 801bef8:	d135      	bne.n	801bf66 <_dtoa_r+0x6e6>
 801befa:	f7fc ffc7 	bl	8018e8c <__adddf3>
 801befe:	4642      	mov	r2, r8
 801bf00:	464b      	mov	r3, r9
 801bf02:	4606      	mov	r6, r0
 801bf04:	460f      	mov	r7, r1
 801bf06:	f7fd fc07 	bl	8019718 <__aeabi_dcmpgt>
 801bf0a:	b9d0      	cbnz	r0, 801bf42 <_dtoa_r+0x6c2>
 801bf0c:	4642      	mov	r2, r8
 801bf0e:	464b      	mov	r3, r9
 801bf10:	4630      	mov	r0, r6
 801bf12:	4639      	mov	r1, r7
 801bf14:	f7fd fbd8 	bl	80196c8 <__aeabi_dcmpeq>
 801bf18:	b110      	cbz	r0, 801bf20 <_dtoa_r+0x6a0>
 801bf1a:	f01a 0f01 	tst.w	sl, #1
 801bf1e:	d110      	bne.n	801bf42 <_dtoa_r+0x6c2>
 801bf20:	4620      	mov	r0, r4
 801bf22:	ee18 1a10 	vmov	r1, s16
 801bf26:	f000 fe75 	bl	801cc14 <_Bfree>
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	9800      	ldr	r0, [sp, #0]
 801bf2e:	702b      	strb	r3, [r5, #0]
 801bf30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf32:	3001      	adds	r0, #1
 801bf34:	6018      	str	r0, [r3, #0]
 801bf36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	f43f acf1 	beq.w	801b920 <_dtoa_r+0xa0>
 801bf3e:	601d      	str	r5, [r3, #0]
 801bf40:	e4ee      	b.n	801b920 <_dtoa_r+0xa0>
 801bf42:	9f00      	ldr	r7, [sp, #0]
 801bf44:	462b      	mov	r3, r5
 801bf46:	461d      	mov	r5, r3
 801bf48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bf4c:	2a39      	cmp	r2, #57	; 0x39
 801bf4e:	d106      	bne.n	801bf5e <_dtoa_r+0x6de>
 801bf50:	9a01      	ldr	r2, [sp, #4]
 801bf52:	429a      	cmp	r2, r3
 801bf54:	d1f7      	bne.n	801bf46 <_dtoa_r+0x6c6>
 801bf56:	9901      	ldr	r1, [sp, #4]
 801bf58:	2230      	movs	r2, #48	; 0x30
 801bf5a:	3701      	adds	r7, #1
 801bf5c:	700a      	strb	r2, [r1, #0]
 801bf5e:	781a      	ldrb	r2, [r3, #0]
 801bf60:	3201      	adds	r2, #1
 801bf62:	701a      	strb	r2, [r3, #0]
 801bf64:	e790      	b.n	801be88 <_dtoa_r+0x608>
 801bf66:	4ba6      	ldr	r3, [pc, #664]	; (801c200 <_dtoa_r+0x980>)
 801bf68:	2200      	movs	r2, #0
 801bf6a:	f7fd f945 	bl	80191f8 <__aeabi_dmul>
 801bf6e:	2200      	movs	r2, #0
 801bf70:	2300      	movs	r3, #0
 801bf72:	4606      	mov	r6, r0
 801bf74:	460f      	mov	r7, r1
 801bf76:	f7fd fba7 	bl	80196c8 <__aeabi_dcmpeq>
 801bf7a:	2800      	cmp	r0, #0
 801bf7c:	d09d      	beq.n	801beba <_dtoa_r+0x63a>
 801bf7e:	e7cf      	b.n	801bf20 <_dtoa_r+0x6a0>
 801bf80:	9a08      	ldr	r2, [sp, #32]
 801bf82:	2a00      	cmp	r2, #0
 801bf84:	f000 80d7 	beq.w	801c136 <_dtoa_r+0x8b6>
 801bf88:	9a06      	ldr	r2, [sp, #24]
 801bf8a:	2a01      	cmp	r2, #1
 801bf8c:	f300 80ba 	bgt.w	801c104 <_dtoa_r+0x884>
 801bf90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bf92:	2a00      	cmp	r2, #0
 801bf94:	f000 80b2 	beq.w	801c0fc <_dtoa_r+0x87c>
 801bf98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bf9c:	9e07      	ldr	r6, [sp, #28]
 801bf9e:	9d04      	ldr	r5, [sp, #16]
 801bfa0:	9a04      	ldr	r2, [sp, #16]
 801bfa2:	441a      	add	r2, r3
 801bfa4:	9204      	str	r2, [sp, #16]
 801bfa6:	9a05      	ldr	r2, [sp, #20]
 801bfa8:	2101      	movs	r1, #1
 801bfaa:	441a      	add	r2, r3
 801bfac:	4620      	mov	r0, r4
 801bfae:	9205      	str	r2, [sp, #20]
 801bfb0:	f000 ff32 	bl	801ce18 <__i2b>
 801bfb4:	4607      	mov	r7, r0
 801bfb6:	2d00      	cmp	r5, #0
 801bfb8:	dd0c      	ble.n	801bfd4 <_dtoa_r+0x754>
 801bfba:	9b05      	ldr	r3, [sp, #20]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	dd09      	ble.n	801bfd4 <_dtoa_r+0x754>
 801bfc0:	42ab      	cmp	r3, r5
 801bfc2:	9a04      	ldr	r2, [sp, #16]
 801bfc4:	bfa8      	it	ge
 801bfc6:	462b      	movge	r3, r5
 801bfc8:	1ad2      	subs	r2, r2, r3
 801bfca:	9204      	str	r2, [sp, #16]
 801bfcc:	9a05      	ldr	r2, [sp, #20]
 801bfce:	1aed      	subs	r5, r5, r3
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	9305      	str	r3, [sp, #20]
 801bfd4:	9b07      	ldr	r3, [sp, #28]
 801bfd6:	b31b      	cbz	r3, 801c020 <_dtoa_r+0x7a0>
 801bfd8:	9b08      	ldr	r3, [sp, #32]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	f000 80af 	beq.w	801c13e <_dtoa_r+0x8be>
 801bfe0:	2e00      	cmp	r6, #0
 801bfe2:	dd13      	ble.n	801c00c <_dtoa_r+0x78c>
 801bfe4:	4639      	mov	r1, r7
 801bfe6:	4632      	mov	r2, r6
 801bfe8:	4620      	mov	r0, r4
 801bfea:	f000 ffd5 	bl	801cf98 <__pow5mult>
 801bfee:	ee18 2a10 	vmov	r2, s16
 801bff2:	4601      	mov	r1, r0
 801bff4:	4607      	mov	r7, r0
 801bff6:	4620      	mov	r0, r4
 801bff8:	f000 ff24 	bl	801ce44 <__multiply>
 801bffc:	ee18 1a10 	vmov	r1, s16
 801c000:	4680      	mov	r8, r0
 801c002:	4620      	mov	r0, r4
 801c004:	f000 fe06 	bl	801cc14 <_Bfree>
 801c008:	ee08 8a10 	vmov	s16, r8
 801c00c:	9b07      	ldr	r3, [sp, #28]
 801c00e:	1b9a      	subs	r2, r3, r6
 801c010:	d006      	beq.n	801c020 <_dtoa_r+0x7a0>
 801c012:	ee18 1a10 	vmov	r1, s16
 801c016:	4620      	mov	r0, r4
 801c018:	f000 ffbe 	bl	801cf98 <__pow5mult>
 801c01c:	ee08 0a10 	vmov	s16, r0
 801c020:	2101      	movs	r1, #1
 801c022:	4620      	mov	r0, r4
 801c024:	f000 fef8 	bl	801ce18 <__i2b>
 801c028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	4606      	mov	r6, r0
 801c02e:	f340 8088 	ble.w	801c142 <_dtoa_r+0x8c2>
 801c032:	461a      	mov	r2, r3
 801c034:	4601      	mov	r1, r0
 801c036:	4620      	mov	r0, r4
 801c038:	f000 ffae 	bl	801cf98 <__pow5mult>
 801c03c:	9b06      	ldr	r3, [sp, #24]
 801c03e:	2b01      	cmp	r3, #1
 801c040:	4606      	mov	r6, r0
 801c042:	f340 8081 	ble.w	801c148 <_dtoa_r+0x8c8>
 801c046:	f04f 0800 	mov.w	r8, #0
 801c04a:	6933      	ldr	r3, [r6, #16]
 801c04c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c050:	6918      	ldr	r0, [r3, #16]
 801c052:	f000 fe91 	bl	801cd78 <__hi0bits>
 801c056:	f1c0 0020 	rsb	r0, r0, #32
 801c05a:	9b05      	ldr	r3, [sp, #20]
 801c05c:	4418      	add	r0, r3
 801c05e:	f010 001f 	ands.w	r0, r0, #31
 801c062:	f000 8092 	beq.w	801c18a <_dtoa_r+0x90a>
 801c066:	f1c0 0320 	rsb	r3, r0, #32
 801c06a:	2b04      	cmp	r3, #4
 801c06c:	f340 808a 	ble.w	801c184 <_dtoa_r+0x904>
 801c070:	f1c0 001c 	rsb	r0, r0, #28
 801c074:	9b04      	ldr	r3, [sp, #16]
 801c076:	4403      	add	r3, r0
 801c078:	9304      	str	r3, [sp, #16]
 801c07a:	9b05      	ldr	r3, [sp, #20]
 801c07c:	4403      	add	r3, r0
 801c07e:	4405      	add	r5, r0
 801c080:	9305      	str	r3, [sp, #20]
 801c082:	9b04      	ldr	r3, [sp, #16]
 801c084:	2b00      	cmp	r3, #0
 801c086:	dd07      	ble.n	801c098 <_dtoa_r+0x818>
 801c088:	ee18 1a10 	vmov	r1, s16
 801c08c:	461a      	mov	r2, r3
 801c08e:	4620      	mov	r0, r4
 801c090:	f000 ffdc 	bl	801d04c <__lshift>
 801c094:	ee08 0a10 	vmov	s16, r0
 801c098:	9b05      	ldr	r3, [sp, #20]
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	dd05      	ble.n	801c0aa <_dtoa_r+0x82a>
 801c09e:	4631      	mov	r1, r6
 801c0a0:	461a      	mov	r2, r3
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	f000 ffd2 	bl	801d04c <__lshift>
 801c0a8:	4606      	mov	r6, r0
 801c0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d06e      	beq.n	801c18e <_dtoa_r+0x90e>
 801c0b0:	ee18 0a10 	vmov	r0, s16
 801c0b4:	4631      	mov	r1, r6
 801c0b6:	f001 f839 	bl	801d12c <__mcmp>
 801c0ba:	2800      	cmp	r0, #0
 801c0bc:	da67      	bge.n	801c18e <_dtoa_r+0x90e>
 801c0be:	9b00      	ldr	r3, [sp, #0]
 801c0c0:	3b01      	subs	r3, #1
 801c0c2:	ee18 1a10 	vmov	r1, s16
 801c0c6:	9300      	str	r3, [sp, #0]
 801c0c8:	220a      	movs	r2, #10
 801c0ca:	2300      	movs	r3, #0
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	f000 fdc3 	bl	801cc58 <__multadd>
 801c0d2:	9b08      	ldr	r3, [sp, #32]
 801c0d4:	ee08 0a10 	vmov	s16, r0
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	f000 81b1 	beq.w	801c440 <_dtoa_r+0xbc0>
 801c0de:	2300      	movs	r3, #0
 801c0e0:	4639      	mov	r1, r7
 801c0e2:	220a      	movs	r2, #10
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f000 fdb7 	bl	801cc58 <__multadd>
 801c0ea:	9b02      	ldr	r3, [sp, #8]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	4607      	mov	r7, r0
 801c0f0:	f300 808e 	bgt.w	801c210 <_dtoa_r+0x990>
 801c0f4:	9b06      	ldr	r3, [sp, #24]
 801c0f6:	2b02      	cmp	r3, #2
 801c0f8:	dc51      	bgt.n	801c19e <_dtoa_r+0x91e>
 801c0fa:	e089      	b.n	801c210 <_dtoa_r+0x990>
 801c0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c0fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c102:	e74b      	b.n	801bf9c <_dtoa_r+0x71c>
 801c104:	9b03      	ldr	r3, [sp, #12]
 801c106:	1e5e      	subs	r6, r3, #1
 801c108:	9b07      	ldr	r3, [sp, #28]
 801c10a:	42b3      	cmp	r3, r6
 801c10c:	bfbf      	itttt	lt
 801c10e:	9b07      	ldrlt	r3, [sp, #28]
 801c110:	9607      	strlt	r6, [sp, #28]
 801c112:	1af2      	sublt	r2, r6, r3
 801c114:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c116:	bfb6      	itet	lt
 801c118:	189b      	addlt	r3, r3, r2
 801c11a:	1b9e      	subge	r6, r3, r6
 801c11c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c11e:	9b03      	ldr	r3, [sp, #12]
 801c120:	bfb8      	it	lt
 801c122:	2600      	movlt	r6, #0
 801c124:	2b00      	cmp	r3, #0
 801c126:	bfb7      	itett	lt
 801c128:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c12c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c130:	1a9d      	sublt	r5, r3, r2
 801c132:	2300      	movlt	r3, #0
 801c134:	e734      	b.n	801bfa0 <_dtoa_r+0x720>
 801c136:	9e07      	ldr	r6, [sp, #28]
 801c138:	9d04      	ldr	r5, [sp, #16]
 801c13a:	9f08      	ldr	r7, [sp, #32]
 801c13c:	e73b      	b.n	801bfb6 <_dtoa_r+0x736>
 801c13e:	9a07      	ldr	r2, [sp, #28]
 801c140:	e767      	b.n	801c012 <_dtoa_r+0x792>
 801c142:	9b06      	ldr	r3, [sp, #24]
 801c144:	2b01      	cmp	r3, #1
 801c146:	dc18      	bgt.n	801c17a <_dtoa_r+0x8fa>
 801c148:	f1ba 0f00 	cmp.w	sl, #0
 801c14c:	d115      	bne.n	801c17a <_dtoa_r+0x8fa>
 801c14e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c152:	b993      	cbnz	r3, 801c17a <_dtoa_r+0x8fa>
 801c154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c158:	0d1b      	lsrs	r3, r3, #20
 801c15a:	051b      	lsls	r3, r3, #20
 801c15c:	b183      	cbz	r3, 801c180 <_dtoa_r+0x900>
 801c15e:	9b04      	ldr	r3, [sp, #16]
 801c160:	3301      	adds	r3, #1
 801c162:	9304      	str	r3, [sp, #16]
 801c164:	9b05      	ldr	r3, [sp, #20]
 801c166:	3301      	adds	r3, #1
 801c168:	9305      	str	r3, [sp, #20]
 801c16a:	f04f 0801 	mov.w	r8, #1
 801c16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c170:	2b00      	cmp	r3, #0
 801c172:	f47f af6a 	bne.w	801c04a <_dtoa_r+0x7ca>
 801c176:	2001      	movs	r0, #1
 801c178:	e76f      	b.n	801c05a <_dtoa_r+0x7da>
 801c17a:	f04f 0800 	mov.w	r8, #0
 801c17e:	e7f6      	b.n	801c16e <_dtoa_r+0x8ee>
 801c180:	4698      	mov	r8, r3
 801c182:	e7f4      	b.n	801c16e <_dtoa_r+0x8ee>
 801c184:	f43f af7d 	beq.w	801c082 <_dtoa_r+0x802>
 801c188:	4618      	mov	r0, r3
 801c18a:	301c      	adds	r0, #28
 801c18c:	e772      	b.n	801c074 <_dtoa_r+0x7f4>
 801c18e:	9b03      	ldr	r3, [sp, #12]
 801c190:	2b00      	cmp	r3, #0
 801c192:	dc37      	bgt.n	801c204 <_dtoa_r+0x984>
 801c194:	9b06      	ldr	r3, [sp, #24]
 801c196:	2b02      	cmp	r3, #2
 801c198:	dd34      	ble.n	801c204 <_dtoa_r+0x984>
 801c19a:	9b03      	ldr	r3, [sp, #12]
 801c19c:	9302      	str	r3, [sp, #8]
 801c19e:	9b02      	ldr	r3, [sp, #8]
 801c1a0:	b96b      	cbnz	r3, 801c1be <_dtoa_r+0x93e>
 801c1a2:	4631      	mov	r1, r6
 801c1a4:	2205      	movs	r2, #5
 801c1a6:	4620      	mov	r0, r4
 801c1a8:	f000 fd56 	bl	801cc58 <__multadd>
 801c1ac:	4601      	mov	r1, r0
 801c1ae:	4606      	mov	r6, r0
 801c1b0:	ee18 0a10 	vmov	r0, s16
 801c1b4:	f000 ffba 	bl	801d12c <__mcmp>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	f73f adbb 	bgt.w	801bd34 <_dtoa_r+0x4b4>
 801c1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1c0:	9d01      	ldr	r5, [sp, #4]
 801c1c2:	43db      	mvns	r3, r3
 801c1c4:	9300      	str	r3, [sp, #0]
 801c1c6:	f04f 0800 	mov.w	r8, #0
 801c1ca:	4631      	mov	r1, r6
 801c1cc:	4620      	mov	r0, r4
 801c1ce:	f000 fd21 	bl	801cc14 <_Bfree>
 801c1d2:	2f00      	cmp	r7, #0
 801c1d4:	f43f aea4 	beq.w	801bf20 <_dtoa_r+0x6a0>
 801c1d8:	f1b8 0f00 	cmp.w	r8, #0
 801c1dc:	d005      	beq.n	801c1ea <_dtoa_r+0x96a>
 801c1de:	45b8      	cmp	r8, r7
 801c1e0:	d003      	beq.n	801c1ea <_dtoa_r+0x96a>
 801c1e2:	4641      	mov	r1, r8
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	f000 fd15 	bl	801cc14 <_Bfree>
 801c1ea:	4639      	mov	r1, r7
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f000 fd11 	bl	801cc14 <_Bfree>
 801c1f2:	e695      	b.n	801bf20 <_dtoa_r+0x6a0>
 801c1f4:	2600      	movs	r6, #0
 801c1f6:	4637      	mov	r7, r6
 801c1f8:	e7e1      	b.n	801c1be <_dtoa_r+0x93e>
 801c1fa:	9700      	str	r7, [sp, #0]
 801c1fc:	4637      	mov	r7, r6
 801c1fe:	e599      	b.n	801bd34 <_dtoa_r+0x4b4>
 801c200:	40240000 	.word	0x40240000
 801c204:	9b08      	ldr	r3, [sp, #32]
 801c206:	2b00      	cmp	r3, #0
 801c208:	f000 80ca 	beq.w	801c3a0 <_dtoa_r+0xb20>
 801c20c:	9b03      	ldr	r3, [sp, #12]
 801c20e:	9302      	str	r3, [sp, #8]
 801c210:	2d00      	cmp	r5, #0
 801c212:	dd05      	ble.n	801c220 <_dtoa_r+0x9a0>
 801c214:	4639      	mov	r1, r7
 801c216:	462a      	mov	r2, r5
 801c218:	4620      	mov	r0, r4
 801c21a:	f000 ff17 	bl	801d04c <__lshift>
 801c21e:	4607      	mov	r7, r0
 801c220:	f1b8 0f00 	cmp.w	r8, #0
 801c224:	d05b      	beq.n	801c2de <_dtoa_r+0xa5e>
 801c226:	6879      	ldr	r1, [r7, #4]
 801c228:	4620      	mov	r0, r4
 801c22a:	f000 fcb3 	bl	801cb94 <_Balloc>
 801c22e:	4605      	mov	r5, r0
 801c230:	b928      	cbnz	r0, 801c23e <_dtoa_r+0x9be>
 801c232:	4b87      	ldr	r3, [pc, #540]	; (801c450 <_dtoa_r+0xbd0>)
 801c234:	4602      	mov	r2, r0
 801c236:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c23a:	f7ff bb3b 	b.w	801b8b4 <_dtoa_r+0x34>
 801c23e:	693a      	ldr	r2, [r7, #16]
 801c240:	3202      	adds	r2, #2
 801c242:	0092      	lsls	r2, r2, #2
 801c244:	f107 010c 	add.w	r1, r7, #12
 801c248:	300c      	adds	r0, #12
 801c24a:	f000 fc95 	bl	801cb78 <memcpy>
 801c24e:	2201      	movs	r2, #1
 801c250:	4629      	mov	r1, r5
 801c252:	4620      	mov	r0, r4
 801c254:	f000 fefa 	bl	801d04c <__lshift>
 801c258:	9b01      	ldr	r3, [sp, #4]
 801c25a:	f103 0901 	add.w	r9, r3, #1
 801c25e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c262:	4413      	add	r3, r2
 801c264:	9305      	str	r3, [sp, #20]
 801c266:	f00a 0301 	and.w	r3, sl, #1
 801c26a:	46b8      	mov	r8, r7
 801c26c:	9304      	str	r3, [sp, #16]
 801c26e:	4607      	mov	r7, r0
 801c270:	4631      	mov	r1, r6
 801c272:	ee18 0a10 	vmov	r0, s16
 801c276:	f7ff fa75 	bl	801b764 <quorem>
 801c27a:	4641      	mov	r1, r8
 801c27c:	9002      	str	r0, [sp, #8]
 801c27e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c282:	ee18 0a10 	vmov	r0, s16
 801c286:	f000 ff51 	bl	801d12c <__mcmp>
 801c28a:	463a      	mov	r2, r7
 801c28c:	9003      	str	r0, [sp, #12]
 801c28e:	4631      	mov	r1, r6
 801c290:	4620      	mov	r0, r4
 801c292:	f000 ff67 	bl	801d164 <__mdiff>
 801c296:	68c2      	ldr	r2, [r0, #12]
 801c298:	f109 3bff 	add.w	fp, r9, #4294967295
 801c29c:	4605      	mov	r5, r0
 801c29e:	bb02      	cbnz	r2, 801c2e2 <_dtoa_r+0xa62>
 801c2a0:	4601      	mov	r1, r0
 801c2a2:	ee18 0a10 	vmov	r0, s16
 801c2a6:	f000 ff41 	bl	801d12c <__mcmp>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	4629      	mov	r1, r5
 801c2ae:	4620      	mov	r0, r4
 801c2b0:	9207      	str	r2, [sp, #28]
 801c2b2:	f000 fcaf 	bl	801cc14 <_Bfree>
 801c2b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c2ba:	ea43 0102 	orr.w	r1, r3, r2
 801c2be:	9b04      	ldr	r3, [sp, #16]
 801c2c0:	430b      	orrs	r3, r1
 801c2c2:	464d      	mov	r5, r9
 801c2c4:	d10f      	bne.n	801c2e6 <_dtoa_r+0xa66>
 801c2c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c2ca:	d02a      	beq.n	801c322 <_dtoa_r+0xaa2>
 801c2cc:	9b03      	ldr	r3, [sp, #12]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	dd02      	ble.n	801c2d8 <_dtoa_r+0xa58>
 801c2d2:	9b02      	ldr	r3, [sp, #8]
 801c2d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c2d8:	f88b a000 	strb.w	sl, [fp]
 801c2dc:	e775      	b.n	801c1ca <_dtoa_r+0x94a>
 801c2de:	4638      	mov	r0, r7
 801c2e0:	e7ba      	b.n	801c258 <_dtoa_r+0x9d8>
 801c2e2:	2201      	movs	r2, #1
 801c2e4:	e7e2      	b.n	801c2ac <_dtoa_r+0xa2c>
 801c2e6:	9b03      	ldr	r3, [sp, #12]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	db04      	blt.n	801c2f6 <_dtoa_r+0xa76>
 801c2ec:	9906      	ldr	r1, [sp, #24]
 801c2ee:	430b      	orrs	r3, r1
 801c2f0:	9904      	ldr	r1, [sp, #16]
 801c2f2:	430b      	orrs	r3, r1
 801c2f4:	d122      	bne.n	801c33c <_dtoa_r+0xabc>
 801c2f6:	2a00      	cmp	r2, #0
 801c2f8:	ddee      	ble.n	801c2d8 <_dtoa_r+0xa58>
 801c2fa:	ee18 1a10 	vmov	r1, s16
 801c2fe:	2201      	movs	r2, #1
 801c300:	4620      	mov	r0, r4
 801c302:	f000 fea3 	bl	801d04c <__lshift>
 801c306:	4631      	mov	r1, r6
 801c308:	ee08 0a10 	vmov	s16, r0
 801c30c:	f000 ff0e 	bl	801d12c <__mcmp>
 801c310:	2800      	cmp	r0, #0
 801c312:	dc03      	bgt.n	801c31c <_dtoa_r+0xa9c>
 801c314:	d1e0      	bne.n	801c2d8 <_dtoa_r+0xa58>
 801c316:	f01a 0f01 	tst.w	sl, #1
 801c31a:	d0dd      	beq.n	801c2d8 <_dtoa_r+0xa58>
 801c31c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c320:	d1d7      	bne.n	801c2d2 <_dtoa_r+0xa52>
 801c322:	2339      	movs	r3, #57	; 0x39
 801c324:	f88b 3000 	strb.w	r3, [fp]
 801c328:	462b      	mov	r3, r5
 801c32a:	461d      	mov	r5, r3
 801c32c:	3b01      	subs	r3, #1
 801c32e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c332:	2a39      	cmp	r2, #57	; 0x39
 801c334:	d071      	beq.n	801c41a <_dtoa_r+0xb9a>
 801c336:	3201      	adds	r2, #1
 801c338:	701a      	strb	r2, [r3, #0]
 801c33a:	e746      	b.n	801c1ca <_dtoa_r+0x94a>
 801c33c:	2a00      	cmp	r2, #0
 801c33e:	dd07      	ble.n	801c350 <_dtoa_r+0xad0>
 801c340:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c344:	d0ed      	beq.n	801c322 <_dtoa_r+0xaa2>
 801c346:	f10a 0301 	add.w	r3, sl, #1
 801c34a:	f88b 3000 	strb.w	r3, [fp]
 801c34e:	e73c      	b.n	801c1ca <_dtoa_r+0x94a>
 801c350:	9b05      	ldr	r3, [sp, #20]
 801c352:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c356:	4599      	cmp	r9, r3
 801c358:	d047      	beq.n	801c3ea <_dtoa_r+0xb6a>
 801c35a:	ee18 1a10 	vmov	r1, s16
 801c35e:	2300      	movs	r3, #0
 801c360:	220a      	movs	r2, #10
 801c362:	4620      	mov	r0, r4
 801c364:	f000 fc78 	bl	801cc58 <__multadd>
 801c368:	45b8      	cmp	r8, r7
 801c36a:	ee08 0a10 	vmov	s16, r0
 801c36e:	f04f 0300 	mov.w	r3, #0
 801c372:	f04f 020a 	mov.w	r2, #10
 801c376:	4641      	mov	r1, r8
 801c378:	4620      	mov	r0, r4
 801c37a:	d106      	bne.n	801c38a <_dtoa_r+0xb0a>
 801c37c:	f000 fc6c 	bl	801cc58 <__multadd>
 801c380:	4680      	mov	r8, r0
 801c382:	4607      	mov	r7, r0
 801c384:	f109 0901 	add.w	r9, r9, #1
 801c388:	e772      	b.n	801c270 <_dtoa_r+0x9f0>
 801c38a:	f000 fc65 	bl	801cc58 <__multadd>
 801c38e:	4639      	mov	r1, r7
 801c390:	4680      	mov	r8, r0
 801c392:	2300      	movs	r3, #0
 801c394:	220a      	movs	r2, #10
 801c396:	4620      	mov	r0, r4
 801c398:	f000 fc5e 	bl	801cc58 <__multadd>
 801c39c:	4607      	mov	r7, r0
 801c39e:	e7f1      	b.n	801c384 <_dtoa_r+0xb04>
 801c3a0:	9b03      	ldr	r3, [sp, #12]
 801c3a2:	9302      	str	r3, [sp, #8]
 801c3a4:	9d01      	ldr	r5, [sp, #4]
 801c3a6:	ee18 0a10 	vmov	r0, s16
 801c3aa:	4631      	mov	r1, r6
 801c3ac:	f7ff f9da 	bl	801b764 <quorem>
 801c3b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c3b4:	9b01      	ldr	r3, [sp, #4]
 801c3b6:	f805 ab01 	strb.w	sl, [r5], #1
 801c3ba:	1aea      	subs	r2, r5, r3
 801c3bc:	9b02      	ldr	r3, [sp, #8]
 801c3be:	4293      	cmp	r3, r2
 801c3c0:	dd09      	ble.n	801c3d6 <_dtoa_r+0xb56>
 801c3c2:	ee18 1a10 	vmov	r1, s16
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	220a      	movs	r2, #10
 801c3ca:	4620      	mov	r0, r4
 801c3cc:	f000 fc44 	bl	801cc58 <__multadd>
 801c3d0:	ee08 0a10 	vmov	s16, r0
 801c3d4:	e7e7      	b.n	801c3a6 <_dtoa_r+0xb26>
 801c3d6:	9b02      	ldr	r3, [sp, #8]
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	bfc8      	it	gt
 801c3dc:	461d      	movgt	r5, r3
 801c3de:	9b01      	ldr	r3, [sp, #4]
 801c3e0:	bfd8      	it	le
 801c3e2:	2501      	movle	r5, #1
 801c3e4:	441d      	add	r5, r3
 801c3e6:	f04f 0800 	mov.w	r8, #0
 801c3ea:	ee18 1a10 	vmov	r1, s16
 801c3ee:	2201      	movs	r2, #1
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	f000 fe2b 	bl	801d04c <__lshift>
 801c3f6:	4631      	mov	r1, r6
 801c3f8:	ee08 0a10 	vmov	s16, r0
 801c3fc:	f000 fe96 	bl	801d12c <__mcmp>
 801c400:	2800      	cmp	r0, #0
 801c402:	dc91      	bgt.n	801c328 <_dtoa_r+0xaa8>
 801c404:	d102      	bne.n	801c40c <_dtoa_r+0xb8c>
 801c406:	f01a 0f01 	tst.w	sl, #1
 801c40a:	d18d      	bne.n	801c328 <_dtoa_r+0xaa8>
 801c40c:	462b      	mov	r3, r5
 801c40e:	461d      	mov	r5, r3
 801c410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c414:	2a30      	cmp	r2, #48	; 0x30
 801c416:	d0fa      	beq.n	801c40e <_dtoa_r+0xb8e>
 801c418:	e6d7      	b.n	801c1ca <_dtoa_r+0x94a>
 801c41a:	9a01      	ldr	r2, [sp, #4]
 801c41c:	429a      	cmp	r2, r3
 801c41e:	d184      	bne.n	801c32a <_dtoa_r+0xaaa>
 801c420:	9b00      	ldr	r3, [sp, #0]
 801c422:	3301      	adds	r3, #1
 801c424:	9300      	str	r3, [sp, #0]
 801c426:	2331      	movs	r3, #49	; 0x31
 801c428:	7013      	strb	r3, [r2, #0]
 801c42a:	e6ce      	b.n	801c1ca <_dtoa_r+0x94a>
 801c42c:	4b09      	ldr	r3, [pc, #36]	; (801c454 <_dtoa_r+0xbd4>)
 801c42e:	f7ff ba95 	b.w	801b95c <_dtoa_r+0xdc>
 801c432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c434:	2b00      	cmp	r3, #0
 801c436:	f47f aa6e 	bne.w	801b916 <_dtoa_r+0x96>
 801c43a:	4b07      	ldr	r3, [pc, #28]	; (801c458 <_dtoa_r+0xbd8>)
 801c43c:	f7ff ba8e 	b.w	801b95c <_dtoa_r+0xdc>
 801c440:	9b02      	ldr	r3, [sp, #8]
 801c442:	2b00      	cmp	r3, #0
 801c444:	dcae      	bgt.n	801c3a4 <_dtoa_r+0xb24>
 801c446:	9b06      	ldr	r3, [sp, #24]
 801c448:	2b02      	cmp	r3, #2
 801c44a:	f73f aea8 	bgt.w	801c19e <_dtoa_r+0x91e>
 801c44e:	e7a9      	b.n	801c3a4 <_dtoa_r+0xb24>
 801c450:	08052618 	.word	0x08052618
 801c454:	0805241c 	.word	0x0805241c
 801c458:	08052599 	.word	0x08052599

0801c45c <rshift>:
 801c45c:	6903      	ldr	r3, [r0, #16]
 801c45e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c466:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c46a:	f100 0414 	add.w	r4, r0, #20
 801c46e:	dd45      	ble.n	801c4fc <rshift+0xa0>
 801c470:	f011 011f 	ands.w	r1, r1, #31
 801c474:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c478:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c47c:	d10c      	bne.n	801c498 <rshift+0x3c>
 801c47e:	f100 0710 	add.w	r7, r0, #16
 801c482:	4629      	mov	r1, r5
 801c484:	42b1      	cmp	r1, r6
 801c486:	d334      	bcc.n	801c4f2 <rshift+0x96>
 801c488:	1a9b      	subs	r3, r3, r2
 801c48a:	009b      	lsls	r3, r3, #2
 801c48c:	1eea      	subs	r2, r5, #3
 801c48e:	4296      	cmp	r6, r2
 801c490:	bf38      	it	cc
 801c492:	2300      	movcc	r3, #0
 801c494:	4423      	add	r3, r4
 801c496:	e015      	b.n	801c4c4 <rshift+0x68>
 801c498:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c49c:	f1c1 0820 	rsb	r8, r1, #32
 801c4a0:	40cf      	lsrs	r7, r1
 801c4a2:	f105 0e04 	add.w	lr, r5, #4
 801c4a6:	46a1      	mov	r9, r4
 801c4a8:	4576      	cmp	r6, lr
 801c4aa:	46f4      	mov	ip, lr
 801c4ac:	d815      	bhi.n	801c4da <rshift+0x7e>
 801c4ae:	1a9a      	subs	r2, r3, r2
 801c4b0:	0092      	lsls	r2, r2, #2
 801c4b2:	3a04      	subs	r2, #4
 801c4b4:	3501      	adds	r5, #1
 801c4b6:	42ae      	cmp	r6, r5
 801c4b8:	bf38      	it	cc
 801c4ba:	2200      	movcc	r2, #0
 801c4bc:	18a3      	adds	r3, r4, r2
 801c4be:	50a7      	str	r7, [r4, r2]
 801c4c0:	b107      	cbz	r7, 801c4c4 <rshift+0x68>
 801c4c2:	3304      	adds	r3, #4
 801c4c4:	1b1a      	subs	r2, r3, r4
 801c4c6:	42a3      	cmp	r3, r4
 801c4c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c4cc:	bf08      	it	eq
 801c4ce:	2300      	moveq	r3, #0
 801c4d0:	6102      	str	r2, [r0, #16]
 801c4d2:	bf08      	it	eq
 801c4d4:	6143      	streq	r3, [r0, #20]
 801c4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c4da:	f8dc c000 	ldr.w	ip, [ip]
 801c4de:	fa0c fc08 	lsl.w	ip, ip, r8
 801c4e2:	ea4c 0707 	orr.w	r7, ip, r7
 801c4e6:	f849 7b04 	str.w	r7, [r9], #4
 801c4ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c4ee:	40cf      	lsrs	r7, r1
 801c4f0:	e7da      	b.n	801c4a8 <rshift+0x4c>
 801c4f2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c4f6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c4fa:	e7c3      	b.n	801c484 <rshift+0x28>
 801c4fc:	4623      	mov	r3, r4
 801c4fe:	e7e1      	b.n	801c4c4 <rshift+0x68>

0801c500 <__hexdig_fun>:
 801c500:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c504:	2b09      	cmp	r3, #9
 801c506:	d802      	bhi.n	801c50e <__hexdig_fun+0xe>
 801c508:	3820      	subs	r0, #32
 801c50a:	b2c0      	uxtb	r0, r0
 801c50c:	4770      	bx	lr
 801c50e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c512:	2b05      	cmp	r3, #5
 801c514:	d801      	bhi.n	801c51a <__hexdig_fun+0x1a>
 801c516:	3847      	subs	r0, #71	; 0x47
 801c518:	e7f7      	b.n	801c50a <__hexdig_fun+0xa>
 801c51a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c51e:	2b05      	cmp	r3, #5
 801c520:	d801      	bhi.n	801c526 <__hexdig_fun+0x26>
 801c522:	3827      	subs	r0, #39	; 0x27
 801c524:	e7f1      	b.n	801c50a <__hexdig_fun+0xa>
 801c526:	2000      	movs	r0, #0
 801c528:	4770      	bx	lr
	...

0801c52c <__gethex>:
 801c52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c530:	ed2d 8b02 	vpush	{d8}
 801c534:	b089      	sub	sp, #36	; 0x24
 801c536:	ee08 0a10 	vmov	s16, r0
 801c53a:	9304      	str	r3, [sp, #16]
 801c53c:	4bb4      	ldr	r3, [pc, #720]	; (801c810 <__gethex+0x2e4>)
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	9301      	str	r3, [sp, #4]
 801c542:	4618      	mov	r0, r3
 801c544:	468b      	mov	fp, r1
 801c546:	4690      	mov	r8, r2
 801c548:	f7fc fc42 	bl	8018dd0 <strlen>
 801c54c:	9b01      	ldr	r3, [sp, #4]
 801c54e:	f8db 2000 	ldr.w	r2, [fp]
 801c552:	4403      	add	r3, r0
 801c554:	4682      	mov	sl, r0
 801c556:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c55a:	9305      	str	r3, [sp, #20]
 801c55c:	1c93      	adds	r3, r2, #2
 801c55e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c562:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c566:	32fe      	adds	r2, #254	; 0xfe
 801c568:	18d1      	adds	r1, r2, r3
 801c56a:	461f      	mov	r7, r3
 801c56c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c570:	9100      	str	r1, [sp, #0]
 801c572:	2830      	cmp	r0, #48	; 0x30
 801c574:	d0f8      	beq.n	801c568 <__gethex+0x3c>
 801c576:	f7ff ffc3 	bl	801c500 <__hexdig_fun>
 801c57a:	4604      	mov	r4, r0
 801c57c:	2800      	cmp	r0, #0
 801c57e:	d13a      	bne.n	801c5f6 <__gethex+0xca>
 801c580:	9901      	ldr	r1, [sp, #4]
 801c582:	4652      	mov	r2, sl
 801c584:	4638      	mov	r0, r7
 801c586:	f001 fa33 	bl	801d9f0 <strncmp>
 801c58a:	4605      	mov	r5, r0
 801c58c:	2800      	cmp	r0, #0
 801c58e:	d168      	bne.n	801c662 <__gethex+0x136>
 801c590:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c594:	eb07 060a 	add.w	r6, r7, sl
 801c598:	f7ff ffb2 	bl	801c500 <__hexdig_fun>
 801c59c:	2800      	cmp	r0, #0
 801c59e:	d062      	beq.n	801c666 <__gethex+0x13a>
 801c5a0:	4633      	mov	r3, r6
 801c5a2:	7818      	ldrb	r0, [r3, #0]
 801c5a4:	2830      	cmp	r0, #48	; 0x30
 801c5a6:	461f      	mov	r7, r3
 801c5a8:	f103 0301 	add.w	r3, r3, #1
 801c5ac:	d0f9      	beq.n	801c5a2 <__gethex+0x76>
 801c5ae:	f7ff ffa7 	bl	801c500 <__hexdig_fun>
 801c5b2:	2301      	movs	r3, #1
 801c5b4:	fab0 f480 	clz	r4, r0
 801c5b8:	0964      	lsrs	r4, r4, #5
 801c5ba:	4635      	mov	r5, r6
 801c5bc:	9300      	str	r3, [sp, #0]
 801c5be:	463a      	mov	r2, r7
 801c5c0:	4616      	mov	r6, r2
 801c5c2:	3201      	adds	r2, #1
 801c5c4:	7830      	ldrb	r0, [r6, #0]
 801c5c6:	f7ff ff9b 	bl	801c500 <__hexdig_fun>
 801c5ca:	2800      	cmp	r0, #0
 801c5cc:	d1f8      	bne.n	801c5c0 <__gethex+0x94>
 801c5ce:	9901      	ldr	r1, [sp, #4]
 801c5d0:	4652      	mov	r2, sl
 801c5d2:	4630      	mov	r0, r6
 801c5d4:	f001 fa0c 	bl	801d9f0 <strncmp>
 801c5d8:	b980      	cbnz	r0, 801c5fc <__gethex+0xd0>
 801c5da:	b94d      	cbnz	r5, 801c5f0 <__gethex+0xc4>
 801c5dc:	eb06 050a 	add.w	r5, r6, sl
 801c5e0:	462a      	mov	r2, r5
 801c5e2:	4616      	mov	r6, r2
 801c5e4:	3201      	adds	r2, #1
 801c5e6:	7830      	ldrb	r0, [r6, #0]
 801c5e8:	f7ff ff8a 	bl	801c500 <__hexdig_fun>
 801c5ec:	2800      	cmp	r0, #0
 801c5ee:	d1f8      	bne.n	801c5e2 <__gethex+0xb6>
 801c5f0:	1bad      	subs	r5, r5, r6
 801c5f2:	00ad      	lsls	r5, r5, #2
 801c5f4:	e004      	b.n	801c600 <__gethex+0xd4>
 801c5f6:	2400      	movs	r4, #0
 801c5f8:	4625      	mov	r5, r4
 801c5fa:	e7e0      	b.n	801c5be <__gethex+0x92>
 801c5fc:	2d00      	cmp	r5, #0
 801c5fe:	d1f7      	bne.n	801c5f0 <__gethex+0xc4>
 801c600:	7833      	ldrb	r3, [r6, #0]
 801c602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c606:	2b50      	cmp	r3, #80	; 0x50
 801c608:	d13b      	bne.n	801c682 <__gethex+0x156>
 801c60a:	7873      	ldrb	r3, [r6, #1]
 801c60c:	2b2b      	cmp	r3, #43	; 0x2b
 801c60e:	d02c      	beq.n	801c66a <__gethex+0x13e>
 801c610:	2b2d      	cmp	r3, #45	; 0x2d
 801c612:	d02e      	beq.n	801c672 <__gethex+0x146>
 801c614:	1c71      	adds	r1, r6, #1
 801c616:	f04f 0900 	mov.w	r9, #0
 801c61a:	7808      	ldrb	r0, [r1, #0]
 801c61c:	f7ff ff70 	bl	801c500 <__hexdig_fun>
 801c620:	1e43      	subs	r3, r0, #1
 801c622:	b2db      	uxtb	r3, r3
 801c624:	2b18      	cmp	r3, #24
 801c626:	d82c      	bhi.n	801c682 <__gethex+0x156>
 801c628:	f1a0 0210 	sub.w	r2, r0, #16
 801c62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c630:	f7ff ff66 	bl	801c500 <__hexdig_fun>
 801c634:	1e43      	subs	r3, r0, #1
 801c636:	b2db      	uxtb	r3, r3
 801c638:	2b18      	cmp	r3, #24
 801c63a:	d91d      	bls.n	801c678 <__gethex+0x14c>
 801c63c:	f1b9 0f00 	cmp.w	r9, #0
 801c640:	d000      	beq.n	801c644 <__gethex+0x118>
 801c642:	4252      	negs	r2, r2
 801c644:	4415      	add	r5, r2
 801c646:	f8cb 1000 	str.w	r1, [fp]
 801c64a:	b1e4      	cbz	r4, 801c686 <__gethex+0x15a>
 801c64c:	9b00      	ldr	r3, [sp, #0]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	bf14      	ite	ne
 801c652:	2700      	movne	r7, #0
 801c654:	2706      	moveq	r7, #6
 801c656:	4638      	mov	r0, r7
 801c658:	b009      	add	sp, #36	; 0x24
 801c65a:	ecbd 8b02 	vpop	{d8}
 801c65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c662:	463e      	mov	r6, r7
 801c664:	4625      	mov	r5, r4
 801c666:	2401      	movs	r4, #1
 801c668:	e7ca      	b.n	801c600 <__gethex+0xd4>
 801c66a:	f04f 0900 	mov.w	r9, #0
 801c66e:	1cb1      	adds	r1, r6, #2
 801c670:	e7d3      	b.n	801c61a <__gethex+0xee>
 801c672:	f04f 0901 	mov.w	r9, #1
 801c676:	e7fa      	b.n	801c66e <__gethex+0x142>
 801c678:	230a      	movs	r3, #10
 801c67a:	fb03 0202 	mla	r2, r3, r2, r0
 801c67e:	3a10      	subs	r2, #16
 801c680:	e7d4      	b.n	801c62c <__gethex+0x100>
 801c682:	4631      	mov	r1, r6
 801c684:	e7df      	b.n	801c646 <__gethex+0x11a>
 801c686:	1bf3      	subs	r3, r6, r7
 801c688:	3b01      	subs	r3, #1
 801c68a:	4621      	mov	r1, r4
 801c68c:	2b07      	cmp	r3, #7
 801c68e:	dc0b      	bgt.n	801c6a8 <__gethex+0x17c>
 801c690:	ee18 0a10 	vmov	r0, s16
 801c694:	f000 fa7e 	bl	801cb94 <_Balloc>
 801c698:	4604      	mov	r4, r0
 801c69a:	b940      	cbnz	r0, 801c6ae <__gethex+0x182>
 801c69c:	4b5d      	ldr	r3, [pc, #372]	; (801c814 <__gethex+0x2e8>)
 801c69e:	4602      	mov	r2, r0
 801c6a0:	21de      	movs	r1, #222	; 0xde
 801c6a2:	485d      	ldr	r0, [pc, #372]	; (801c818 <__gethex+0x2ec>)
 801c6a4:	f001 f9c6 	bl	801da34 <__assert_func>
 801c6a8:	3101      	adds	r1, #1
 801c6aa:	105b      	asrs	r3, r3, #1
 801c6ac:	e7ee      	b.n	801c68c <__gethex+0x160>
 801c6ae:	f100 0914 	add.w	r9, r0, #20
 801c6b2:	f04f 0b00 	mov.w	fp, #0
 801c6b6:	f1ca 0301 	rsb	r3, sl, #1
 801c6ba:	f8cd 9008 	str.w	r9, [sp, #8]
 801c6be:	f8cd b000 	str.w	fp, [sp]
 801c6c2:	9306      	str	r3, [sp, #24]
 801c6c4:	42b7      	cmp	r7, r6
 801c6c6:	d340      	bcc.n	801c74a <__gethex+0x21e>
 801c6c8:	9802      	ldr	r0, [sp, #8]
 801c6ca:	9b00      	ldr	r3, [sp, #0]
 801c6cc:	f840 3b04 	str.w	r3, [r0], #4
 801c6d0:	eba0 0009 	sub.w	r0, r0, r9
 801c6d4:	1080      	asrs	r0, r0, #2
 801c6d6:	0146      	lsls	r6, r0, #5
 801c6d8:	6120      	str	r0, [r4, #16]
 801c6da:	4618      	mov	r0, r3
 801c6dc:	f000 fb4c 	bl	801cd78 <__hi0bits>
 801c6e0:	1a30      	subs	r0, r6, r0
 801c6e2:	f8d8 6000 	ldr.w	r6, [r8]
 801c6e6:	42b0      	cmp	r0, r6
 801c6e8:	dd63      	ble.n	801c7b2 <__gethex+0x286>
 801c6ea:	1b87      	subs	r7, r0, r6
 801c6ec:	4639      	mov	r1, r7
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f000 fef0 	bl	801d4d4 <__any_on>
 801c6f4:	4682      	mov	sl, r0
 801c6f6:	b1a8      	cbz	r0, 801c724 <__gethex+0x1f8>
 801c6f8:	1e7b      	subs	r3, r7, #1
 801c6fa:	1159      	asrs	r1, r3, #5
 801c6fc:	f003 021f 	and.w	r2, r3, #31
 801c700:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c704:	f04f 0a01 	mov.w	sl, #1
 801c708:	fa0a f202 	lsl.w	r2, sl, r2
 801c70c:	420a      	tst	r2, r1
 801c70e:	d009      	beq.n	801c724 <__gethex+0x1f8>
 801c710:	4553      	cmp	r3, sl
 801c712:	dd05      	ble.n	801c720 <__gethex+0x1f4>
 801c714:	1eb9      	subs	r1, r7, #2
 801c716:	4620      	mov	r0, r4
 801c718:	f000 fedc 	bl	801d4d4 <__any_on>
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d145      	bne.n	801c7ac <__gethex+0x280>
 801c720:	f04f 0a02 	mov.w	sl, #2
 801c724:	4639      	mov	r1, r7
 801c726:	4620      	mov	r0, r4
 801c728:	f7ff fe98 	bl	801c45c <rshift>
 801c72c:	443d      	add	r5, r7
 801c72e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c732:	42ab      	cmp	r3, r5
 801c734:	da4c      	bge.n	801c7d0 <__gethex+0x2a4>
 801c736:	ee18 0a10 	vmov	r0, s16
 801c73a:	4621      	mov	r1, r4
 801c73c:	f000 fa6a 	bl	801cc14 <_Bfree>
 801c740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c742:	2300      	movs	r3, #0
 801c744:	6013      	str	r3, [r2, #0]
 801c746:	27a3      	movs	r7, #163	; 0xa3
 801c748:	e785      	b.n	801c656 <__gethex+0x12a>
 801c74a:	1e73      	subs	r3, r6, #1
 801c74c:	9a05      	ldr	r2, [sp, #20]
 801c74e:	9303      	str	r3, [sp, #12]
 801c750:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c754:	4293      	cmp	r3, r2
 801c756:	d019      	beq.n	801c78c <__gethex+0x260>
 801c758:	f1bb 0f20 	cmp.w	fp, #32
 801c75c:	d107      	bne.n	801c76e <__gethex+0x242>
 801c75e:	9b02      	ldr	r3, [sp, #8]
 801c760:	9a00      	ldr	r2, [sp, #0]
 801c762:	f843 2b04 	str.w	r2, [r3], #4
 801c766:	9302      	str	r3, [sp, #8]
 801c768:	2300      	movs	r3, #0
 801c76a:	9300      	str	r3, [sp, #0]
 801c76c:	469b      	mov	fp, r3
 801c76e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c772:	f7ff fec5 	bl	801c500 <__hexdig_fun>
 801c776:	9b00      	ldr	r3, [sp, #0]
 801c778:	f000 000f 	and.w	r0, r0, #15
 801c77c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c780:	4303      	orrs	r3, r0
 801c782:	9300      	str	r3, [sp, #0]
 801c784:	f10b 0b04 	add.w	fp, fp, #4
 801c788:	9b03      	ldr	r3, [sp, #12]
 801c78a:	e00d      	b.n	801c7a8 <__gethex+0x27c>
 801c78c:	9b03      	ldr	r3, [sp, #12]
 801c78e:	9a06      	ldr	r2, [sp, #24]
 801c790:	4413      	add	r3, r2
 801c792:	42bb      	cmp	r3, r7
 801c794:	d3e0      	bcc.n	801c758 <__gethex+0x22c>
 801c796:	4618      	mov	r0, r3
 801c798:	9901      	ldr	r1, [sp, #4]
 801c79a:	9307      	str	r3, [sp, #28]
 801c79c:	4652      	mov	r2, sl
 801c79e:	f001 f927 	bl	801d9f0 <strncmp>
 801c7a2:	9b07      	ldr	r3, [sp, #28]
 801c7a4:	2800      	cmp	r0, #0
 801c7a6:	d1d7      	bne.n	801c758 <__gethex+0x22c>
 801c7a8:	461e      	mov	r6, r3
 801c7aa:	e78b      	b.n	801c6c4 <__gethex+0x198>
 801c7ac:	f04f 0a03 	mov.w	sl, #3
 801c7b0:	e7b8      	b.n	801c724 <__gethex+0x1f8>
 801c7b2:	da0a      	bge.n	801c7ca <__gethex+0x29e>
 801c7b4:	1a37      	subs	r7, r6, r0
 801c7b6:	4621      	mov	r1, r4
 801c7b8:	ee18 0a10 	vmov	r0, s16
 801c7bc:	463a      	mov	r2, r7
 801c7be:	f000 fc45 	bl	801d04c <__lshift>
 801c7c2:	1bed      	subs	r5, r5, r7
 801c7c4:	4604      	mov	r4, r0
 801c7c6:	f100 0914 	add.w	r9, r0, #20
 801c7ca:	f04f 0a00 	mov.w	sl, #0
 801c7ce:	e7ae      	b.n	801c72e <__gethex+0x202>
 801c7d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c7d4:	42a8      	cmp	r0, r5
 801c7d6:	dd72      	ble.n	801c8be <__gethex+0x392>
 801c7d8:	1b45      	subs	r5, r0, r5
 801c7da:	42ae      	cmp	r6, r5
 801c7dc:	dc36      	bgt.n	801c84c <__gethex+0x320>
 801c7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c7e2:	2b02      	cmp	r3, #2
 801c7e4:	d02a      	beq.n	801c83c <__gethex+0x310>
 801c7e6:	2b03      	cmp	r3, #3
 801c7e8:	d02c      	beq.n	801c844 <__gethex+0x318>
 801c7ea:	2b01      	cmp	r3, #1
 801c7ec:	d11c      	bne.n	801c828 <__gethex+0x2fc>
 801c7ee:	42ae      	cmp	r6, r5
 801c7f0:	d11a      	bne.n	801c828 <__gethex+0x2fc>
 801c7f2:	2e01      	cmp	r6, #1
 801c7f4:	d112      	bne.n	801c81c <__gethex+0x2f0>
 801c7f6:	9a04      	ldr	r2, [sp, #16]
 801c7f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c7fc:	6013      	str	r3, [r2, #0]
 801c7fe:	2301      	movs	r3, #1
 801c800:	6123      	str	r3, [r4, #16]
 801c802:	f8c9 3000 	str.w	r3, [r9]
 801c806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c808:	2762      	movs	r7, #98	; 0x62
 801c80a:	601c      	str	r4, [r3, #0]
 801c80c:	e723      	b.n	801c656 <__gethex+0x12a>
 801c80e:	bf00      	nop
 801c810:	08052690 	.word	0x08052690
 801c814:	08052618 	.word	0x08052618
 801c818:	08052629 	.word	0x08052629
 801c81c:	1e71      	subs	r1, r6, #1
 801c81e:	4620      	mov	r0, r4
 801c820:	f000 fe58 	bl	801d4d4 <__any_on>
 801c824:	2800      	cmp	r0, #0
 801c826:	d1e6      	bne.n	801c7f6 <__gethex+0x2ca>
 801c828:	ee18 0a10 	vmov	r0, s16
 801c82c:	4621      	mov	r1, r4
 801c82e:	f000 f9f1 	bl	801cc14 <_Bfree>
 801c832:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c834:	2300      	movs	r3, #0
 801c836:	6013      	str	r3, [r2, #0]
 801c838:	2750      	movs	r7, #80	; 0x50
 801c83a:	e70c      	b.n	801c656 <__gethex+0x12a>
 801c83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d1f2      	bne.n	801c828 <__gethex+0x2fc>
 801c842:	e7d8      	b.n	801c7f6 <__gethex+0x2ca>
 801c844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c846:	2b00      	cmp	r3, #0
 801c848:	d1d5      	bne.n	801c7f6 <__gethex+0x2ca>
 801c84a:	e7ed      	b.n	801c828 <__gethex+0x2fc>
 801c84c:	1e6f      	subs	r7, r5, #1
 801c84e:	f1ba 0f00 	cmp.w	sl, #0
 801c852:	d131      	bne.n	801c8b8 <__gethex+0x38c>
 801c854:	b127      	cbz	r7, 801c860 <__gethex+0x334>
 801c856:	4639      	mov	r1, r7
 801c858:	4620      	mov	r0, r4
 801c85a:	f000 fe3b 	bl	801d4d4 <__any_on>
 801c85e:	4682      	mov	sl, r0
 801c860:	117b      	asrs	r3, r7, #5
 801c862:	2101      	movs	r1, #1
 801c864:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c868:	f007 071f 	and.w	r7, r7, #31
 801c86c:	fa01 f707 	lsl.w	r7, r1, r7
 801c870:	421f      	tst	r7, r3
 801c872:	4629      	mov	r1, r5
 801c874:	4620      	mov	r0, r4
 801c876:	bf18      	it	ne
 801c878:	f04a 0a02 	orrne.w	sl, sl, #2
 801c87c:	1b76      	subs	r6, r6, r5
 801c87e:	f7ff fded 	bl	801c45c <rshift>
 801c882:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c886:	2702      	movs	r7, #2
 801c888:	f1ba 0f00 	cmp.w	sl, #0
 801c88c:	d048      	beq.n	801c920 <__gethex+0x3f4>
 801c88e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c892:	2b02      	cmp	r3, #2
 801c894:	d015      	beq.n	801c8c2 <__gethex+0x396>
 801c896:	2b03      	cmp	r3, #3
 801c898:	d017      	beq.n	801c8ca <__gethex+0x39e>
 801c89a:	2b01      	cmp	r3, #1
 801c89c:	d109      	bne.n	801c8b2 <__gethex+0x386>
 801c89e:	f01a 0f02 	tst.w	sl, #2
 801c8a2:	d006      	beq.n	801c8b2 <__gethex+0x386>
 801c8a4:	f8d9 0000 	ldr.w	r0, [r9]
 801c8a8:	ea4a 0a00 	orr.w	sl, sl, r0
 801c8ac:	f01a 0f01 	tst.w	sl, #1
 801c8b0:	d10e      	bne.n	801c8d0 <__gethex+0x3a4>
 801c8b2:	f047 0710 	orr.w	r7, r7, #16
 801c8b6:	e033      	b.n	801c920 <__gethex+0x3f4>
 801c8b8:	f04f 0a01 	mov.w	sl, #1
 801c8bc:	e7d0      	b.n	801c860 <__gethex+0x334>
 801c8be:	2701      	movs	r7, #1
 801c8c0:	e7e2      	b.n	801c888 <__gethex+0x35c>
 801c8c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c8c4:	f1c3 0301 	rsb	r3, r3, #1
 801c8c8:	9315      	str	r3, [sp, #84]	; 0x54
 801c8ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d0f0      	beq.n	801c8b2 <__gethex+0x386>
 801c8d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c8d4:	f104 0314 	add.w	r3, r4, #20
 801c8d8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c8dc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c8e0:	f04f 0c00 	mov.w	ip, #0
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c8ee:	d01c      	beq.n	801c92a <__gethex+0x3fe>
 801c8f0:	3201      	adds	r2, #1
 801c8f2:	6002      	str	r2, [r0, #0]
 801c8f4:	2f02      	cmp	r7, #2
 801c8f6:	f104 0314 	add.w	r3, r4, #20
 801c8fa:	d13f      	bne.n	801c97c <__gethex+0x450>
 801c8fc:	f8d8 2000 	ldr.w	r2, [r8]
 801c900:	3a01      	subs	r2, #1
 801c902:	42b2      	cmp	r2, r6
 801c904:	d10a      	bne.n	801c91c <__gethex+0x3f0>
 801c906:	1171      	asrs	r1, r6, #5
 801c908:	2201      	movs	r2, #1
 801c90a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c90e:	f006 061f 	and.w	r6, r6, #31
 801c912:	fa02 f606 	lsl.w	r6, r2, r6
 801c916:	421e      	tst	r6, r3
 801c918:	bf18      	it	ne
 801c91a:	4617      	movne	r7, r2
 801c91c:	f047 0720 	orr.w	r7, r7, #32
 801c920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c922:	601c      	str	r4, [r3, #0]
 801c924:	9b04      	ldr	r3, [sp, #16]
 801c926:	601d      	str	r5, [r3, #0]
 801c928:	e695      	b.n	801c656 <__gethex+0x12a>
 801c92a:	4299      	cmp	r1, r3
 801c92c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c930:	d8d8      	bhi.n	801c8e4 <__gethex+0x3b8>
 801c932:	68a3      	ldr	r3, [r4, #8]
 801c934:	459b      	cmp	fp, r3
 801c936:	db19      	blt.n	801c96c <__gethex+0x440>
 801c938:	6861      	ldr	r1, [r4, #4]
 801c93a:	ee18 0a10 	vmov	r0, s16
 801c93e:	3101      	adds	r1, #1
 801c940:	f000 f928 	bl	801cb94 <_Balloc>
 801c944:	4681      	mov	r9, r0
 801c946:	b918      	cbnz	r0, 801c950 <__gethex+0x424>
 801c948:	4b1a      	ldr	r3, [pc, #104]	; (801c9b4 <__gethex+0x488>)
 801c94a:	4602      	mov	r2, r0
 801c94c:	2184      	movs	r1, #132	; 0x84
 801c94e:	e6a8      	b.n	801c6a2 <__gethex+0x176>
 801c950:	6922      	ldr	r2, [r4, #16]
 801c952:	3202      	adds	r2, #2
 801c954:	f104 010c 	add.w	r1, r4, #12
 801c958:	0092      	lsls	r2, r2, #2
 801c95a:	300c      	adds	r0, #12
 801c95c:	f000 f90c 	bl	801cb78 <memcpy>
 801c960:	4621      	mov	r1, r4
 801c962:	ee18 0a10 	vmov	r0, s16
 801c966:	f000 f955 	bl	801cc14 <_Bfree>
 801c96a:	464c      	mov	r4, r9
 801c96c:	6923      	ldr	r3, [r4, #16]
 801c96e:	1c5a      	adds	r2, r3, #1
 801c970:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c974:	6122      	str	r2, [r4, #16]
 801c976:	2201      	movs	r2, #1
 801c978:	615a      	str	r2, [r3, #20]
 801c97a:	e7bb      	b.n	801c8f4 <__gethex+0x3c8>
 801c97c:	6922      	ldr	r2, [r4, #16]
 801c97e:	455a      	cmp	r2, fp
 801c980:	dd0b      	ble.n	801c99a <__gethex+0x46e>
 801c982:	2101      	movs	r1, #1
 801c984:	4620      	mov	r0, r4
 801c986:	f7ff fd69 	bl	801c45c <rshift>
 801c98a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c98e:	3501      	adds	r5, #1
 801c990:	42ab      	cmp	r3, r5
 801c992:	f6ff aed0 	blt.w	801c736 <__gethex+0x20a>
 801c996:	2701      	movs	r7, #1
 801c998:	e7c0      	b.n	801c91c <__gethex+0x3f0>
 801c99a:	f016 061f 	ands.w	r6, r6, #31
 801c99e:	d0fa      	beq.n	801c996 <__gethex+0x46a>
 801c9a0:	4453      	add	r3, sl
 801c9a2:	f1c6 0620 	rsb	r6, r6, #32
 801c9a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c9aa:	f000 f9e5 	bl	801cd78 <__hi0bits>
 801c9ae:	42b0      	cmp	r0, r6
 801c9b0:	dbe7      	blt.n	801c982 <__gethex+0x456>
 801c9b2:	e7f0      	b.n	801c996 <__gethex+0x46a>
 801c9b4:	08052618 	.word	0x08052618

0801c9b8 <L_shift>:
 801c9b8:	f1c2 0208 	rsb	r2, r2, #8
 801c9bc:	0092      	lsls	r2, r2, #2
 801c9be:	b570      	push	{r4, r5, r6, lr}
 801c9c0:	f1c2 0620 	rsb	r6, r2, #32
 801c9c4:	6843      	ldr	r3, [r0, #4]
 801c9c6:	6804      	ldr	r4, [r0, #0]
 801c9c8:	fa03 f506 	lsl.w	r5, r3, r6
 801c9cc:	432c      	orrs	r4, r5
 801c9ce:	40d3      	lsrs	r3, r2
 801c9d0:	6004      	str	r4, [r0, #0]
 801c9d2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c9d6:	4288      	cmp	r0, r1
 801c9d8:	d3f4      	bcc.n	801c9c4 <L_shift+0xc>
 801c9da:	bd70      	pop	{r4, r5, r6, pc}

0801c9dc <__match>:
 801c9dc:	b530      	push	{r4, r5, lr}
 801c9de:	6803      	ldr	r3, [r0, #0]
 801c9e0:	3301      	adds	r3, #1
 801c9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c9e6:	b914      	cbnz	r4, 801c9ee <__match+0x12>
 801c9e8:	6003      	str	r3, [r0, #0]
 801c9ea:	2001      	movs	r0, #1
 801c9ec:	bd30      	pop	{r4, r5, pc}
 801c9ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c9f6:	2d19      	cmp	r5, #25
 801c9f8:	bf98      	it	ls
 801c9fa:	3220      	addls	r2, #32
 801c9fc:	42a2      	cmp	r2, r4
 801c9fe:	d0f0      	beq.n	801c9e2 <__match+0x6>
 801ca00:	2000      	movs	r0, #0
 801ca02:	e7f3      	b.n	801c9ec <__match+0x10>

0801ca04 <__hexnan>:
 801ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca08:	680b      	ldr	r3, [r1, #0]
 801ca0a:	115e      	asrs	r6, r3, #5
 801ca0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ca10:	f013 031f 	ands.w	r3, r3, #31
 801ca14:	b087      	sub	sp, #28
 801ca16:	bf18      	it	ne
 801ca18:	3604      	addne	r6, #4
 801ca1a:	2500      	movs	r5, #0
 801ca1c:	1f37      	subs	r7, r6, #4
 801ca1e:	4690      	mov	r8, r2
 801ca20:	6802      	ldr	r2, [r0, #0]
 801ca22:	9301      	str	r3, [sp, #4]
 801ca24:	4682      	mov	sl, r0
 801ca26:	f846 5c04 	str.w	r5, [r6, #-4]
 801ca2a:	46b9      	mov	r9, r7
 801ca2c:	463c      	mov	r4, r7
 801ca2e:	9502      	str	r5, [sp, #8]
 801ca30:	46ab      	mov	fp, r5
 801ca32:	7851      	ldrb	r1, [r2, #1]
 801ca34:	1c53      	adds	r3, r2, #1
 801ca36:	9303      	str	r3, [sp, #12]
 801ca38:	b341      	cbz	r1, 801ca8c <__hexnan+0x88>
 801ca3a:	4608      	mov	r0, r1
 801ca3c:	9205      	str	r2, [sp, #20]
 801ca3e:	9104      	str	r1, [sp, #16]
 801ca40:	f7ff fd5e 	bl	801c500 <__hexdig_fun>
 801ca44:	2800      	cmp	r0, #0
 801ca46:	d14f      	bne.n	801cae8 <__hexnan+0xe4>
 801ca48:	9904      	ldr	r1, [sp, #16]
 801ca4a:	9a05      	ldr	r2, [sp, #20]
 801ca4c:	2920      	cmp	r1, #32
 801ca4e:	d818      	bhi.n	801ca82 <__hexnan+0x7e>
 801ca50:	9b02      	ldr	r3, [sp, #8]
 801ca52:	459b      	cmp	fp, r3
 801ca54:	dd13      	ble.n	801ca7e <__hexnan+0x7a>
 801ca56:	454c      	cmp	r4, r9
 801ca58:	d206      	bcs.n	801ca68 <__hexnan+0x64>
 801ca5a:	2d07      	cmp	r5, #7
 801ca5c:	dc04      	bgt.n	801ca68 <__hexnan+0x64>
 801ca5e:	462a      	mov	r2, r5
 801ca60:	4649      	mov	r1, r9
 801ca62:	4620      	mov	r0, r4
 801ca64:	f7ff ffa8 	bl	801c9b8 <L_shift>
 801ca68:	4544      	cmp	r4, r8
 801ca6a:	d950      	bls.n	801cb0e <__hexnan+0x10a>
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	f1a4 0904 	sub.w	r9, r4, #4
 801ca72:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca76:	f8cd b008 	str.w	fp, [sp, #8]
 801ca7a:	464c      	mov	r4, r9
 801ca7c:	461d      	mov	r5, r3
 801ca7e:	9a03      	ldr	r2, [sp, #12]
 801ca80:	e7d7      	b.n	801ca32 <__hexnan+0x2e>
 801ca82:	2929      	cmp	r1, #41	; 0x29
 801ca84:	d156      	bne.n	801cb34 <__hexnan+0x130>
 801ca86:	3202      	adds	r2, #2
 801ca88:	f8ca 2000 	str.w	r2, [sl]
 801ca8c:	f1bb 0f00 	cmp.w	fp, #0
 801ca90:	d050      	beq.n	801cb34 <__hexnan+0x130>
 801ca92:	454c      	cmp	r4, r9
 801ca94:	d206      	bcs.n	801caa4 <__hexnan+0xa0>
 801ca96:	2d07      	cmp	r5, #7
 801ca98:	dc04      	bgt.n	801caa4 <__hexnan+0xa0>
 801ca9a:	462a      	mov	r2, r5
 801ca9c:	4649      	mov	r1, r9
 801ca9e:	4620      	mov	r0, r4
 801caa0:	f7ff ff8a 	bl	801c9b8 <L_shift>
 801caa4:	4544      	cmp	r4, r8
 801caa6:	d934      	bls.n	801cb12 <__hexnan+0x10e>
 801caa8:	f1a8 0204 	sub.w	r2, r8, #4
 801caac:	4623      	mov	r3, r4
 801caae:	f853 1b04 	ldr.w	r1, [r3], #4
 801cab2:	f842 1f04 	str.w	r1, [r2, #4]!
 801cab6:	429f      	cmp	r7, r3
 801cab8:	d2f9      	bcs.n	801caae <__hexnan+0xaa>
 801caba:	1b3b      	subs	r3, r7, r4
 801cabc:	f023 0303 	bic.w	r3, r3, #3
 801cac0:	3304      	adds	r3, #4
 801cac2:	3401      	adds	r4, #1
 801cac4:	3e03      	subs	r6, #3
 801cac6:	42b4      	cmp	r4, r6
 801cac8:	bf88      	it	hi
 801caca:	2304      	movhi	r3, #4
 801cacc:	4443      	add	r3, r8
 801cace:	2200      	movs	r2, #0
 801cad0:	f843 2b04 	str.w	r2, [r3], #4
 801cad4:	429f      	cmp	r7, r3
 801cad6:	d2fb      	bcs.n	801cad0 <__hexnan+0xcc>
 801cad8:	683b      	ldr	r3, [r7, #0]
 801cada:	b91b      	cbnz	r3, 801cae4 <__hexnan+0xe0>
 801cadc:	4547      	cmp	r7, r8
 801cade:	d127      	bne.n	801cb30 <__hexnan+0x12c>
 801cae0:	2301      	movs	r3, #1
 801cae2:	603b      	str	r3, [r7, #0]
 801cae4:	2005      	movs	r0, #5
 801cae6:	e026      	b.n	801cb36 <__hexnan+0x132>
 801cae8:	3501      	adds	r5, #1
 801caea:	2d08      	cmp	r5, #8
 801caec:	f10b 0b01 	add.w	fp, fp, #1
 801caf0:	dd06      	ble.n	801cb00 <__hexnan+0xfc>
 801caf2:	4544      	cmp	r4, r8
 801caf4:	d9c3      	bls.n	801ca7e <__hexnan+0x7a>
 801caf6:	2300      	movs	r3, #0
 801caf8:	f844 3c04 	str.w	r3, [r4, #-4]
 801cafc:	2501      	movs	r5, #1
 801cafe:	3c04      	subs	r4, #4
 801cb00:	6822      	ldr	r2, [r4, #0]
 801cb02:	f000 000f 	and.w	r0, r0, #15
 801cb06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801cb0a:	6022      	str	r2, [r4, #0]
 801cb0c:	e7b7      	b.n	801ca7e <__hexnan+0x7a>
 801cb0e:	2508      	movs	r5, #8
 801cb10:	e7b5      	b.n	801ca7e <__hexnan+0x7a>
 801cb12:	9b01      	ldr	r3, [sp, #4]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d0df      	beq.n	801cad8 <__hexnan+0xd4>
 801cb18:	f04f 32ff 	mov.w	r2, #4294967295
 801cb1c:	f1c3 0320 	rsb	r3, r3, #32
 801cb20:	fa22 f303 	lsr.w	r3, r2, r3
 801cb24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cb28:	401a      	ands	r2, r3
 801cb2a:	f846 2c04 	str.w	r2, [r6, #-4]
 801cb2e:	e7d3      	b.n	801cad8 <__hexnan+0xd4>
 801cb30:	3f04      	subs	r7, #4
 801cb32:	e7d1      	b.n	801cad8 <__hexnan+0xd4>
 801cb34:	2004      	movs	r0, #4
 801cb36:	b007      	add	sp, #28
 801cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb3c <_localeconv_r>:
 801cb3c:	4800      	ldr	r0, [pc, #0]	; (801cb40 <_localeconv_r+0x4>)
 801cb3e:	4770      	bx	lr
 801cb40:	200001bc 	.word	0x200001bc

0801cb44 <malloc>:
 801cb44:	4b02      	ldr	r3, [pc, #8]	; (801cb50 <malloc+0xc>)
 801cb46:	4601      	mov	r1, r0
 801cb48:	6818      	ldr	r0, [r3, #0]
 801cb4a:	f000 bd67 	b.w	801d61c <_malloc_r>
 801cb4e:	bf00      	nop
 801cb50:	20000064 	.word	0x20000064

0801cb54 <__ascii_mbtowc>:
 801cb54:	b082      	sub	sp, #8
 801cb56:	b901      	cbnz	r1, 801cb5a <__ascii_mbtowc+0x6>
 801cb58:	a901      	add	r1, sp, #4
 801cb5a:	b142      	cbz	r2, 801cb6e <__ascii_mbtowc+0x1a>
 801cb5c:	b14b      	cbz	r3, 801cb72 <__ascii_mbtowc+0x1e>
 801cb5e:	7813      	ldrb	r3, [r2, #0]
 801cb60:	600b      	str	r3, [r1, #0]
 801cb62:	7812      	ldrb	r2, [r2, #0]
 801cb64:	1e10      	subs	r0, r2, #0
 801cb66:	bf18      	it	ne
 801cb68:	2001      	movne	r0, #1
 801cb6a:	b002      	add	sp, #8
 801cb6c:	4770      	bx	lr
 801cb6e:	4610      	mov	r0, r2
 801cb70:	e7fb      	b.n	801cb6a <__ascii_mbtowc+0x16>
 801cb72:	f06f 0001 	mvn.w	r0, #1
 801cb76:	e7f8      	b.n	801cb6a <__ascii_mbtowc+0x16>

0801cb78 <memcpy>:
 801cb78:	440a      	add	r2, r1
 801cb7a:	4291      	cmp	r1, r2
 801cb7c:	f100 33ff 	add.w	r3, r0, #4294967295
 801cb80:	d100      	bne.n	801cb84 <memcpy+0xc>
 801cb82:	4770      	bx	lr
 801cb84:	b510      	push	{r4, lr}
 801cb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cb8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cb8e:	4291      	cmp	r1, r2
 801cb90:	d1f9      	bne.n	801cb86 <memcpy+0xe>
 801cb92:	bd10      	pop	{r4, pc}

0801cb94 <_Balloc>:
 801cb94:	b570      	push	{r4, r5, r6, lr}
 801cb96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cb98:	4604      	mov	r4, r0
 801cb9a:	460d      	mov	r5, r1
 801cb9c:	b976      	cbnz	r6, 801cbbc <_Balloc+0x28>
 801cb9e:	2010      	movs	r0, #16
 801cba0:	f7ff ffd0 	bl	801cb44 <malloc>
 801cba4:	4602      	mov	r2, r0
 801cba6:	6260      	str	r0, [r4, #36]	; 0x24
 801cba8:	b920      	cbnz	r0, 801cbb4 <_Balloc+0x20>
 801cbaa:	4b18      	ldr	r3, [pc, #96]	; (801cc0c <_Balloc+0x78>)
 801cbac:	4818      	ldr	r0, [pc, #96]	; (801cc10 <_Balloc+0x7c>)
 801cbae:	2166      	movs	r1, #102	; 0x66
 801cbb0:	f000 ff40 	bl	801da34 <__assert_func>
 801cbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cbb8:	6006      	str	r6, [r0, #0]
 801cbba:	60c6      	str	r6, [r0, #12]
 801cbbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cbbe:	68f3      	ldr	r3, [r6, #12]
 801cbc0:	b183      	cbz	r3, 801cbe4 <_Balloc+0x50>
 801cbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cbc4:	68db      	ldr	r3, [r3, #12]
 801cbc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cbca:	b9b8      	cbnz	r0, 801cbfc <_Balloc+0x68>
 801cbcc:	2101      	movs	r1, #1
 801cbce:	fa01 f605 	lsl.w	r6, r1, r5
 801cbd2:	1d72      	adds	r2, r6, #5
 801cbd4:	0092      	lsls	r2, r2, #2
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	f000 fc9d 	bl	801d516 <_calloc_r>
 801cbdc:	b160      	cbz	r0, 801cbf8 <_Balloc+0x64>
 801cbde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cbe2:	e00e      	b.n	801cc02 <_Balloc+0x6e>
 801cbe4:	2221      	movs	r2, #33	; 0x21
 801cbe6:	2104      	movs	r1, #4
 801cbe8:	4620      	mov	r0, r4
 801cbea:	f000 fc94 	bl	801d516 <_calloc_r>
 801cbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cbf0:	60f0      	str	r0, [r6, #12]
 801cbf2:	68db      	ldr	r3, [r3, #12]
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d1e4      	bne.n	801cbc2 <_Balloc+0x2e>
 801cbf8:	2000      	movs	r0, #0
 801cbfa:	bd70      	pop	{r4, r5, r6, pc}
 801cbfc:	6802      	ldr	r2, [r0, #0]
 801cbfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc02:	2300      	movs	r3, #0
 801cc04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cc08:	e7f7      	b.n	801cbfa <_Balloc+0x66>
 801cc0a:	bf00      	nop
 801cc0c:	080525a6 	.word	0x080525a6
 801cc10:	080526a4 	.word	0x080526a4

0801cc14 <_Bfree>:
 801cc14:	b570      	push	{r4, r5, r6, lr}
 801cc16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cc18:	4605      	mov	r5, r0
 801cc1a:	460c      	mov	r4, r1
 801cc1c:	b976      	cbnz	r6, 801cc3c <_Bfree+0x28>
 801cc1e:	2010      	movs	r0, #16
 801cc20:	f7ff ff90 	bl	801cb44 <malloc>
 801cc24:	4602      	mov	r2, r0
 801cc26:	6268      	str	r0, [r5, #36]	; 0x24
 801cc28:	b920      	cbnz	r0, 801cc34 <_Bfree+0x20>
 801cc2a:	4b09      	ldr	r3, [pc, #36]	; (801cc50 <_Bfree+0x3c>)
 801cc2c:	4809      	ldr	r0, [pc, #36]	; (801cc54 <_Bfree+0x40>)
 801cc2e:	218a      	movs	r1, #138	; 0x8a
 801cc30:	f000 ff00 	bl	801da34 <__assert_func>
 801cc34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cc38:	6006      	str	r6, [r0, #0]
 801cc3a:	60c6      	str	r6, [r0, #12]
 801cc3c:	b13c      	cbz	r4, 801cc4e <_Bfree+0x3a>
 801cc3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cc40:	6862      	ldr	r2, [r4, #4]
 801cc42:	68db      	ldr	r3, [r3, #12]
 801cc44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cc48:	6021      	str	r1, [r4, #0]
 801cc4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cc4e:	bd70      	pop	{r4, r5, r6, pc}
 801cc50:	080525a6 	.word	0x080525a6
 801cc54:	080526a4 	.word	0x080526a4

0801cc58 <__multadd>:
 801cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc5c:	690d      	ldr	r5, [r1, #16]
 801cc5e:	4607      	mov	r7, r0
 801cc60:	460c      	mov	r4, r1
 801cc62:	461e      	mov	r6, r3
 801cc64:	f101 0c14 	add.w	ip, r1, #20
 801cc68:	2000      	movs	r0, #0
 801cc6a:	f8dc 3000 	ldr.w	r3, [ip]
 801cc6e:	b299      	uxth	r1, r3
 801cc70:	fb02 6101 	mla	r1, r2, r1, r6
 801cc74:	0c1e      	lsrs	r6, r3, #16
 801cc76:	0c0b      	lsrs	r3, r1, #16
 801cc78:	fb02 3306 	mla	r3, r2, r6, r3
 801cc7c:	b289      	uxth	r1, r1
 801cc7e:	3001      	adds	r0, #1
 801cc80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cc84:	4285      	cmp	r5, r0
 801cc86:	f84c 1b04 	str.w	r1, [ip], #4
 801cc8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cc8e:	dcec      	bgt.n	801cc6a <__multadd+0x12>
 801cc90:	b30e      	cbz	r6, 801ccd6 <__multadd+0x7e>
 801cc92:	68a3      	ldr	r3, [r4, #8]
 801cc94:	42ab      	cmp	r3, r5
 801cc96:	dc19      	bgt.n	801cccc <__multadd+0x74>
 801cc98:	6861      	ldr	r1, [r4, #4]
 801cc9a:	4638      	mov	r0, r7
 801cc9c:	3101      	adds	r1, #1
 801cc9e:	f7ff ff79 	bl	801cb94 <_Balloc>
 801cca2:	4680      	mov	r8, r0
 801cca4:	b928      	cbnz	r0, 801ccb2 <__multadd+0x5a>
 801cca6:	4602      	mov	r2, r0
 801cca8:	4b0c      	ldr	r3, [pc, #48]	; (801ccdc <__multadd+0x84>)
 801ccaa:	480d      	ldr	r0, [pc, #52]	; (801cce0 <__multadd+0x88>)
 801ccac:	21b5      	movs	r1, #181	; 0xb5
 801ccae:	f000 fec1 	bl	801da34 <__assert_func>
 801ccb2:	6922      	ldr	r2, [r4, #16]
 801ccb4:	3202      	adds	r2, #2
 801ccb6:	f104 010c 	add.w	r1, r4, #12
 801ccba:	0092      	lsls	r2, r2, #2
 801ccbc:	300c      	adds	r0, #12
 801ccbe:	f7ff ff5b 	bl	801cb78 <memcpy>
 801ccc2:	4621      	mov	r1, r4
 801ccc4:	4638      	mov	r0, r7
 801ccc6:	f7ff ffa5 	bl	801cc14 <_Bfree>
 801ccca:	4644      	mov	r4, r8
 801cccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ccd0:	3501      	adds	r5, #1
 801ccd2:	615e      	str	r6, [r3, #20]
 801ccd4:	6125      	str	r5, [r4, #16]
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccdc:	08052618 	.word	0x08052618
 801cce0:	080526a4 	.word	0x080526a4

0801cce4 <__s2b>:
 801cce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cce8:	460c      	mov	r4, r1
 801ccea:	4615      	mov	r5, r2
 801ccec:	461f      	mov	r7, r3
 801ccee:	2209      	movs	r2, #9
 801ccf0:	3308      	adds	r3, #8
 801ccf2:	4606      	mov	r6, r0
 801ccf4:	fb93 f3f2 	sdiv	r3, r3, r2
 801ccf8:	2100      	movs	r1, #0
 801ccfa:	2201      	movs	r2, #1
 801ccfc:	429a      	cmp	r2, r3
 801ccfe:	db09      	blt.n	801cd14 <__s2b+0x30>
 801cd00:	4630      	mov	r0, r6
 801cd02:	f7ff ff47 	bl	801cb94 <_Balloc>
 801cd06:	b940      	cbnz	r0, 801cd1a <__s2b+0x36>
 801cd08:	4602      	mov	r2, r0
 801cd0a:	4b19      	ldr	r3, [pc, #100]	; (801cd70 <__s2b+0x8c>)
 801cd0c:	4819      	ldr	r0, [pc, #100]	; (801cd74 <__s2b+0x90>)
 801cd0e:	21ce      	movs	r1, #206	; 0xce
 801cd10:	f000 fe90 	bl	801da34 <__assert_func>
 801cd14:	0052      	lsls	r2, r2, #1
 801cd16:	3101      	adds	r1, #1
 801cd18:	e7f0      	b.n	801ccfc <__s2b+0x18>
 801cd1a:	9b08      	ldr	r3, [sp, #32]
 801cd1c:	6143      	str	r3, [r0, #20]
 801cd1e:	2d09      	cmp	r5, #9
 801cd20:	f04f 0301 	mov.w	r3, #1
 801cd24:	6103      	str	r3, [r0, #16]
 801cd26:	dd16      	ble.n	801cd56 <__s2b+0x72>
 801cd28:	f104 0909 	add.w	r9, r4, #9
 801cd2c:	46c8      	mov	r8, r9
 801cd2e:	442c      	add	r4, r5
 801cd30:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cd34:	4601      	mov	r1, r0
 801cd36:	3b30      	subs	r3, #48	; 0x30
 801cd38:	220a      	movs	r2, #10
 801cd3a:	4630      	mov	r0, r6
 801cd3c:	f7ff ff8c 	bl	801cc58 <__multadd>
 801cd40:	45a0      	cmp	r8, r4
 801cd42:	d1f5      	bne.n	801cd30 <__s2b+0x4c>
 801cd44:	f1a5 0408 	sub.w	r4, r5, #8
 801cd48:	444c      	add	r4, r9
 801cd4a:	1b2d      	subs	r5, r5, r4
 801cd4c:	1963      	adds	r3, r4, r5
 801cd4e:	42bb      	cmp	r3, r7
 801cd50:	db04      	blt.n	801cd5c <__s2b+0x78>
 801cd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd56:	340a      	adds	r4, #10
 801cd58:	2509      	movs	r5, #9
 801cd5a:	e7f6      	b.n	801cd4a <__s2b+0x66>
 801cd5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cd60:	4601      	mov	r1, r0
 801cd62:	3b30      	subs	r3, #48	; 0x30
 801cd64:	220a      	movs	r2, #10
 801cd66:	4630      	mov	r0, r6
 801cd68:	f7ff ff76 	bl	801cc58 <__multadd>
 801cd6c:	e7ee      	b.n	801cd4c <__s2b+0x68>
 801cd6e:	bf00      	nop
 801cd70:	08052618 	.word	0x08052618
 801cd74:	080526a4 	.word	0x080526a4

0801cd78 <__hi0bits>:
 801cd78:	0c03      	lsrs	r3, r0, #16
 801cd7a:	041b      	lsls	r3, r3, #16
 801cd7c:	b9d3      	cbnz	r3, 801cdb4 <__hi0bits+0x3c>
 801cd7e:	0400      	lsls	r0, r0, #16
 801cd80:	2310      	movs	r3, #16
 801cd82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cd86:	bf04      	itt	eq
 801cd88:	0200      	lsleq	r0, r0, #8
 801cd8a:	3308      	addeq	r3, #8
 801cd8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cd90:	bf04      	itt	eq
 801cd92:	0100      	lsleq	r0, r0, #4
 801cd94:	3304      	addeq	r3, #4
 801cd96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cd9a:	bf04      	itt	eq
 801cd9c:	0080      	lsleq	r0, r0, #2
 801cd9e:	3302      	addeq	r3, #2
 801cda0:	2800      	cmp	r0, #0
 801cda2:	db05      	blt.n	801cdb0 <__hi0bits+0x38>
 801cda4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cda8:	f103 0301 	add.w	r3, r3, #1
 801cdac:	bf08      	it	eq
 801cdae:	2320      	moveq	r3, #32
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	4770      	bx	lr
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	e7e4      	b.n	801cd82 <__hi0bits+0xa>

0801cdb8 <__lo0bits>:
 801cdb8:	6803      	ldr	r3, [r0, #0]
 801cdba:	f013 0207 	ands.w	r2, r3, #7
 801cdbe:	4601      	mov	r1, r0
 801cdc0:	d00b      	beq.n	801cdda <__lo0bits+0x22>
 801cdc2:	07da      	lsls	r2, r3, #31
 801cdc4:	d423      	bmi.n	801ce0e <__lo0bits+0x56>
 801cdc6:	0798      	lsls	r0, r3, #30
 801cdc8:	bf49      	itett	mi
 801cdca:	085b      	lsrmi	r3, r3, #1
 801cdcc:	089b      	lsrpl	r3, r3, #2
 801cdce:	2001      	movmi	r0, #1
 801cdd0:	600b      	strmi	r3, [r1, #0]
 801cdd2:	bf5c      	itt	pl
 801cdd4:	600b      	strpl	r3, [r1, #0]
 801cdd6:	2002      	movpl	r0, #2
 801cdd8:	4770      	bx	lr
 801cdda:	b298      	uxth	r0, r3
 801cddc:	b9a8      	cbnz	r0, 801ce0a <__lo0bits+0x52>
 801cdde:	0c1b      	lsrs	r3, r3, #16
 801cde0:	2010      	movs	r0, #16
 801cde2:	b2da      	uxtb	r2, r3
 801cde4:	b90a      	cbnz	r2, 801cdea <__lo0bits+0x32>
 801cde6:	3008      	adds	r0, #8
 801cde8:	0a1b      	lsrs	r3, r3, #8
 801cdea:	071a      	lsls	r2, r3, #28
 801cdec:	bf04      	itt	eq
 801cdee:	091b      	lsreq	r3, r3, #4
 801cdf0:	3004      	addeq	r0, #4
 801cdf2:	079a      	lsls	r2, r3, #30
 801cdf4:	bf04      	itt	eq
 801cdf6:	089b      	lsreq	r3, r3, #2
 801cdf8:	3002      	addeq	r0, #2
 801cdfa:	07da      	lsls	r2, r3, #31
 801cdfc:	d403      	bmi.n	801ce06 <__lo0bits+0x4e>
 801cdfe:	085b      	lsrs	r3, r3, #1
 801ce00:	f100 0001 	add.w	r0, r0, #1
 801ce04:	d005      	beq.n	801ce12 <__lo0bits+0x5a>
 801ce06:	600b      	str	r3, [r1, #0]
 801ce08:	4770      	bx	lr
 801ce0a:	4610      	mov	r0, r2
 801ce0c:	e7e9      	b.n	801cde2 <__lo0bits+0x2a>
 801ce0e:	2000      	movs	r0, #0
 801ce10:	4770      	bx	lr
 801ce12:	2020      	movs	r0, #32
 801ce14:	4770      	bx	lr
	...

0801ce18 <__i2b>:
 801ce18:	b510      	push	{r4, lr}
 801ce1a:	460c      	mov	r4, r1
 801ce1c:	2101      	movs	r1, #1
 801ce1e:	f7ff feb9 	bl	801cb94 <_Balloc>
 801ce22:	4602      	mov	r2, r0
 801ce24:	b928      	cbnz	r0, 801ce32 <__i2b+0x1a>
 801ce26:	4b05      	ldr	r3, [pc, #20]	; (801ce3c <__i2b+0x24>)
 801ce28:	4805      	ldr	r0, [pc, #20]	; (801ce40 <__i2b+0x28>)
 801ce2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ce2e:	f000 fe01 	bl	801da34 <__assert_func>
 801ce32:	2301      	movs	r3, #1
 801ce34:	6144      	str	r4, [r0, #20]
 801ce36:	6103      	str	r3, [r0, #16]
 801ce38:	bd10      	pop	{r4, pc}
 801ce3a:	bf00      	nop
 801ce3c:	08052618 	.word	0x08052618
 801ce40:	080526a4 	.word	0x080526a4

0801ce44 <__multiply>:
 801ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce48:	4691      	mov	r9, r2
 801ce4a:	690a      	ldr	r2, [r1, #16]
 801ce4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ce50:	429a      	cmp	r2, r3
 801ce52:	bfb8      	it	lt
 801ce54:	460b      	movlt	r3, r1
 801ce56:	460c      	mov	r4, r1
 801ce58:	bfbc      	itt	lt
 801ce5a:	464c      	movlt	r4, r9
 801ce5c:	4699      	movlt	r9, r3
 801ce5e:	6927      	ldr	r7, [r4, #16]
 801ce60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ce64:	68a3      	ldr	r3, [r4, #8]
 801ce66:	6861      	ldr	r1, [r4, #4]
 801ce68:	eb07 060a 	add.w	r6, r7, sl
 801ce6c:	42b3      	cmp	r3, r6
 801ce6e:	b085      	sub	sp, #20
 801ce70:	bfb8      	it	lt
 801ce72:	3101      	addlt	r1, #1
 801ce74:	f7ff fe8e 	bl	801cb94 <_Balloc>
 801ce78:	b930      	cbnz	r0, 801ce88 <__multiply+0x44>
 801ce7a:	4602      	mov	r2, r0
 801ce7c:	4b44      	ldr	r3, [pc, #272]	; (801cf90 <__multiply+0x14c>)
 801ce7e:	4845      	ldr	r0, [pc, #276]	; (801cf94 <__multiply+0x150>)
 801ce80:	f240 115d 	movw	r1, #349	; 0x15d
 801ce84:	f000 fdd6 	bl	801da34 <__assert_func>
 801ce88:	f100 0514 	add.w	r5, r0, #20
 801ce8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ce90:	462b      	mov	r3, r5
 801ce92:	2200      	movs	r2, #0
 801ce94:	4543      	cmp	r3, r8
 801ce96:	d321      	bcc.n	801cedc <__multiply+0x98>
 801ce98:	f104 0314 	add.w	r3, r4, #20
 801ce9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cea0:	f109 0314 	add.w	r3, r9, #20
 801cea4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cea8:	9202      	str	r2, [sp, #8]
 801ceaa:	1b3a      	subs	r2, r7, r4
 801ceac:	3a15      	subs	r2, #21
 801ceae:	f022 0203 	bic.w	r2, r2, #3
 801ceb2:	3204      	adds	r2, #4
 801ceb4:	f104 0115 	add.w	r1, r4, #21
 801ceb8:	428f      	cmp	r7, r1
 801ceba:	bf38      	it	cc
 801cebc:	2204      	movcc	r2, #4
 801cebe:	9201      	str	r2, [sp, #4]
 801cec0:	9a02      	ldr	r2, [sp, #8]
 801cec2:	9303      	str	r3, [sp, #12]
 801cec4:	429a      	cmp	r2, r3
 801cec6:	d80c      	bhi.n	801cee2 <__multiply+0x9e>
 801cec8:	2e00      	cmp	r6, #0
 801ceca:	dd03      	ble.n	801ced4 <__multiply+0x90>
 801cecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d05a      	beq.n	801cf8a <__multiply+0x146>
 801ced4:	6106      	str	r6, [r0, #16]
 801ced6:	b005      	add	sp, #20
 801ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cedc:	f843 2b04 	str.w	r2, [r3], #4
 801cee0:	e7d8      	b.n	801ce94 <__multiply+0x50>
 801cee2:	f8b3 a000 	ldrh.w	sl, [r3]
 801cee6:	f1ba 0f00 	cmp.w	sl, #0
 801ceea:	d024      	beq.n	801cf36 <__multiply+0xf2>
 801ceec:	f104 0e14 	add.w	lr, r4, #20
 801cef0:	46a9      	mov	r9, r5
 801cef2:	f04f 0c00 	mov.w	ip, #0
 801cef6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cefa:	f8d9 1000 	ldr.w	r1, [r9]
 801cefe:	fa1f fb82 	uxth.w	fp, r2
 801cf02:	b289      	uxth	r1, r1
 801cf04:	fb0a 110b 	mla	r1, sl, fp, r1
 801cf08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cf0c:	f8d9 2000 	ldr.w	r2, [r9]
 801cf10:	4461      	add	r1, ip
 801cf12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cf16:	fb0a c20b 	mla	r2, sl, fp, ip
 801cf1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cf1e:	b289      	uxth	r1, r1
 801cf20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cf24:	4577      	cmp	r7, lr
 801cf26:	f849 1b04 	str.w	r1, [r9], #4
 801cf2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cf2e:	d8e2      	bhi.n	801cef6 <__multiply+0xb2>
 801cf30:	9a01      	ldr	r2, [sp, #4]
 801cf32:	f845 c002 	str.w	ip, [r5, r2]
 801cf36:	9a03      	ldr	r2, [sp, #12]
 801cf38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cf3c:	3304      	adds	r3, #4
 801cf3e:	f1b9 0f00 	cmp.w	r9, #0
 801cf42:	d020      	beq.n	801cf86 <__multiply+0x142>
 801cf44:	6829      	ldr	r1, [r5, #0]
 801cf46:	f104 0c14 	add.w	ip, r4, #20
 801cf4a:	46ae      	mov	lr, r5
 801cf4c:	f04f 0a00 	mov.w	sl, #0
 801cf50:	f8bc b000 	ldrh.w	fp, [ip]
 801cf54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cf58:	fb09 220b 	mla	r2, r9, fp, r2
 801cf5c:	4492      	add	sl, r2
 801cf5e:	b289      	uxth	r1, r1
 801cf60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cf64:	f84e 1b04 	str.w	r1, [lr], #4
 801cf68:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cf6c:	f8be 1000 	ldrh.w	r1, [lr]
 801cf70:	0c12      	lsrs	r2, r2, #16
 801cf72:	fb09 1102 	mla	r1, r9, r2, r1
 801cf76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cf7a:	4567      	cmp	r7, ip
 801cf7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cf80:	d8e6      	bhi.n	801cf50 <__multiply+0x10c>
 801cf82:	9a01      	ldr	r2, [sp, #4]
 801cf84:	50a9      	str	r1, [r5, r2]
 801cf86:	3504      	adds	r5, #4
 801cf88:	e79a      	b.n	801cec0 <__multiply+0x7c>
 801cf8a:	3e01      	subs	r6, #1
 801cf8c:	e79c      	b.n	801cec8 <__multiply+0x84>
 801cf8e:	bf00      	nop
 801cf90:	08052618 	.word	0x08052618
 801cf94:	080526a4 	.word	0x080526a4

0801cf98 <__pow5mult>:
 801cf98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf9c:	4615      	mov	r5, r2
 801cf9e:	f012 0203 	ands.w	r2, r2, #3
 801cfa2:	4606      	mov	r6, r0
 801cfa4:	460f      	mov	r7, r1
 801cfa6:	d007      	beq.n	801cfb8 <__pow5mult+0x20>
 801cfa8:	4c25      	ldr	r4, [pc, #148]	; (801d040 <__pow5mult+0xa8>)
 801cfaa:	3a01      	subs	r2, #1
 801cfac:	2300      	movs	r3, #0
 801cfae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cfb2:	f7ff fe51 	bl	801cc58 <__multadd>
 801cfb6:	4607      	mov	r7, r0
 801cfb8:	10ad      	asrs	r5, r5, #2
 801cfba:	d03d      	beq.n	801d038 <__pow5mult+0xa0>
 801cfbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cfbe:	b97c      	cbnz	r4, 801cfe0 <__pow5mult+0x48>
 801cfc0:	2010      	movs	r0, #16
 801cfc2:	f7ff fdbf 	bl	801cb44 <malloc>
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	6270      	str	r0, [r6, #36]	; 0x24
 801cfca:	b928      	cbnz	r0, 801cfd8 <__pow5mult+0x40>
 801cfcc:	4b1d      	ldr	r3, [pc, #116]	; (801d044 <__pow5mult+0xac>)
 801cfce:	481e      	ldr	r0, [pc, #120]	; (801d048 <__pow5mult+0xb0>)
 801cfd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cfd4:	f000 fd2e 	bl	801da34 <__assert_func>
 801cfd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cfdc:	6004      	str	r4, [r0, #0]
 801cfde:	60c4      	str	r4, [r0, #12]
 801cfe0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cfe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cfe8:	b94c      	cbnz	r4, 801cffe <__pow5mult+0x66>
 801cfea:	f240 2171 	movw	r1, #625	; 0x271
 801cfee:	4630      	mov	r0, r6
 801cff0:	f7ff ff12 	bl	801ce18 <__i2b>
 801cff4:	2300      	movs	r3, #0
 801cff6:	f8c8 0008 	str.w	r0, [r8, #8]
 801cffa:	4604      	mov	r4, r0
 801cffc:	6003      	str	r3, [r0, #0]
 801cffe:	f04f 0900 	mov.w	r9, #0
 801d002:	07eb      	lsls	r3, r5, #31
 801d004:	d50a      	bpl.n	801d01c <__pow5mult+0x84>
 801d006:	4639      	mov	r1, r7
 801d008:	4622      	mov	r2, r4
 801d00a:	4630      	mov	r0, r6
 801d00c:	f7ff ff1a 	bl	801ce44 <__multiply>
 801d010:	4639      	mov	r1, r7
 801d012:	4680      	mov	r8, r0
 801d014:	4630      	mov	r0, r6
 801d016:	f7ff fdfd 	bl	801cc14 <_Bfree>
 801d01a:	4647      	mov	r7, r8
 801d01c:	106d      	asrs	r5, r5, #1
 801d01e:	d00b      	beq.n	801d038 <__pow5mult+0xa0>
 801d020:	6820      	ldr	r0, [r4, #0]
 801d022:	b938      	cbnz	r0, 801d034 <__pow5mult+0x9c>
 801d024:	4622      	mov	r2, r4
 801d026:	4621      	mov	r1, r4
 801d028:	4630      	mov	r0, r6
 801d02a:	f7ff ff0b 	bl	801ce44 <__multiply>
 801d02e:	6020      	str	r0, [r4, #0]
 801d030:	f8c0 9000 	str.w	r9, [r0]
 801d034:	4604      	mov	r4, r0
 801d036:	e7e4      	b.n	801d002 <__pow5mult+0x6a>
 801d038:	4638      	mov	r0, r7
 801d03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d03e:	bf00      	nop
 801d040:	080527f0 	.word	0x080527f0
 801d044:	080525a6 	.word	0x080525a6
 801d048:	080526a4 	.word	0x080526a4

0801d04c <__lshift>:
 801d04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d050:	460c      	mov	r4, r1
 801d052:	6849      	ldr	r1, [r1, #4]
 801d054:	6923      	ldr	r3, [r4, #16]
 801d056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d05a:	68a3      	ldr	r3, [r4, #8]
 801d05c:	4607      	mov	r7, r0
 801d05e:	4691      	mov	r9, r2
 801d060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d064:	f108 0601 	add.w	r6, r8, #1
 801d068:	42b3      	cmp	r3, r6
 801d06a:	db0b      	blt.n	801d084 <__lshift+0x38>
 801d06c:	4638      	mov	r0, r7
 801d06e:	f7ff fd91 	bl	801cb94 <_Balloc>
 801d072:	4605      	mov	r5, r0
 801d074:	b948      	cbnz	r0, 801d08a <__lshift+0x3e>
 801d076:	4602      	mov	r2, r0
 801d078:	4b2a      	ldr	r3, [pc, #168]	; (801d124 <__lshift+0xd8>)
 801d07a:	482b      	ldr	r0, [pc, #172]	; (801d128 <__lshift+0xdc>)
 801d07c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d080:	f000 fcd8 	bl	801da34 <__assert_func>
 801d084:	3101      	adds	r1, #1
 801d086:	005b      	lsls	r3, r3, #1
 801d088:	e7ee      	b.n	801d068 <__lshift+0x1c>
 801d08a:	2300      	movs	r3, #0
 801d08c:	f100 0114 	add.w	r1, r0, #20
 801d090:	f100 0210 	add.w	r2, r0, #16
 801d094:	4618      	mov	r0, r3
 801d096:	4553      	cmp	r3, sl
 801d098:	db37      	blt.n	801d10a <__lshift+0xbe>
 801d09a:	6920      	ldr	r0, [r4, #16]
 801d09c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d0a0:	f104 0314 	add.w	r3, r4, #20
 801d0a4:	f019 091f 	ands.w	r9, r9, #31
 801d0a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d0ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d0b0:	d02f      	beq.n	801d112 <__lshift+0xc6>
 801d0b2:	f1c9 0e20 	rsb	lr, r9, #32
 801d0b6:	468a      	mov	sl, r1
 801d0b8:	f04f 0c00 	mov.w	ip, #0
 801d0bc:	681a      	ldr	r2, [r3, #0]
 801d0be:	fa02 f209 	lsl.w	r2, r2, r9
 801d0c2:	ea42 020c 	orr.w	r2, r2, ip
 801d0c6:	f84a 2b04 	str.w	r2, [sl], #4
 801d0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0ce:	4298      	cmp	r0, r3
 801d0d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d0d4:	d8f2      	bhi.n	801d0bc <__lshift+0x70>
 801d0d6:	1b03      	subs	r3, r0, r4
 801d0d8:	3b15      	subs	r3, #21
 801d0da:	f023 0303 	bic.w	r3, r3, #3
 801d0de:	3304      	adds	r3, #4
 801d0e0:	f104 0215 	add.w	r2, r4, #21
 801d0e4:	4290      	cmp	r0, r2
 801d0e6:	bf38      	it	cc
 801d0e8:	2304      	movcc	r3, #4
 801d0ea:	f841 c003 	str.w	ip, [r1, r3]
 801d0ee:	f1bc 0f00 	cmp.w	ip, #0
 801d0f2:	d001      	beq.n	801d0f8 <__lshift+0xac>
 801d0f4:	f108 0602 	add.w	r6, r8, #2
 801d0f8:	3e01      	subs	r6, #1
 801d0fa:	4638      	mov	r0, r7
 801d0fc:	612e      	str	r6, [r5, #16]
 801d0fe:	4621      	mov	r1, r4
 801d100:	f7ff fd88 	bl	801cc14 <_Bfree>
 801d104:	4628      	mov	r0, r5
 801d106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d10a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d10e:	3301      	adds	r3, #1
 801d110:	e7c1      	b.n	801d096 <__lshift+0x4a>
 801d112:	3904      	subs	r1, #4
 801d114:	f853 2b04 	ldr.w	r2, [r3], #4
 801d118:	f841 2f04 	str.w	r2, [r1, #4]!
 801d11c:	4298      	cmp	r0, r3
 801d11e:	d8f9      	bhi.n	801d114 <__lshift+0xc8>
 801d120:	e7ea      	b.n	801d0f8 <__lshift+0xac>
 801d122:	bf00      	nop
 801d124:	08052618 	.word	0x08052618
 801d128:	080526a4 	.word	0x080526a4

0801d12c <__mcmp>:
 801d12c:	b530      	push	{r4, r5, lr}
 801d12e:	6902      	ldr	r2, [r0, #16]
 801d130:	690c      	ldr	r4, [r1, #16]
 801d132:	1b12      	subs	r2, r2, r4
 801d134:	d10e      	bne.n	801d154 <__mcmp+0x28>
 801d136:	f100 0314 	add.w	r3, r0, #20
 801d13a:	3114      	adds	r1, #20
 801d13c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d144:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d148:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d14c:	42a5      	cmp	r5, r4
 801d14e:	d003      	beq.n	801d158 <__mcmp+0x2c>
 801d150:	d305      	bcc.n	801d15e <__mcmp+0x32>
 801d152:	2201      	movs	r2, #1
 801d154:	4610      	mov	r0, r2
 801d156:	bd30      	pop	{r4, r5, pc}
 801d158:	4283      	cmp	r3, r0
 801d15a:	d3f3      	bcc.n	801d144 <__mcmp+0x18>
 801d15c:	e7fa      	b.n	801d154 <__mcmp+0x28>
 801d15e:	f04f 32ff 	mov.w	r2, #4294967295
 801d162:	e7f7      	b.n	801d154 <__mcmp+0x28>

0801d164 <__mdiff>:
 801d164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d168:	460c      	mov	r4, r1
 801d16a:	4606      	mov	r6, r0
 801d16c:	4611      	mov	r1, r2
 801d16e:	4620      	mov	r0, r4
 801d170:	4690      	mov	r8, r2
 801d172:	f7ff ffdb 	bl	801d12c <__mcmp>
 801d176:	1e05      	subs	r5, r0, #0
 801d178:	d110      	bne.n	801d19c <__mdiff+0x38>
 801d17a:	4629      	mov	r1, r5
 801d17c:	4630      	mov	r0, r6
 801d17e:	f7ff fd09 	bl	801cb94 <_Balloc>
 801d182:	b930      	cbnz	r0, 801d192 <__mdiff+0x2e>
 801d184:	4b3a      	ldr	r3, [pc, #232]	; (801d270 <__mdiff+0x10c>)
 801d186:	4602      	mov	r2, r0
 801d188:	f240 2132 	movw	r1, #562	; 0x232
 801d18c:	4839      	ldr	r0, [pc, #228]	; (801d274 <__mdiff+0x110>)
 801d18e:	f000 fc51 	bl	801da34 <__assert_func>
 801d192:	2301      	movs	r3, #1
 801d194:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d19c:	bfa4      	itt	ge
 801d19e:	4643      	movge	r3, r8
 801d1a0:	46a0      	movge	r8, r4
 801d1a2:	4630      	mov	r0, r6
 801d1a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d1a8:	bfa6      	itte	ge
 801d1aa:	461c      	movge	r4, r3
 801d1ac:	2500      	movge	r5, #0
 801d1ae:	2501      	movlt	r5, #1
 801d1b0:	f7ff fcf0 	bl	801cb94 <_Balloc>
 801d1b4:	b920      	cbnz	r0, 801d1c0 <__mdiff+0x5c>
 801d1b6:	4b2e      	ldr	r3, [pc, #184]	; (801d270 <__mdiff+0x10c>)
 801d1b8:	4602      	mov	r2, r0
 801d1ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d1be:	e7e5      	b.n	801d18c <__mdiff+0x28>
 801d1c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d1c4:	6926      	ldr	r6, [r4, #16]
 801d1c6:	60c5      	str	r5, [r0, #12]
 801d1c8:	f104 0914 	add.w	r9, r4, #20
 801d1cc:	f108 0514 	add.w	r5, r8, #20
 801d1d0:	f100 0e14 	add.w	lr, r0, #20
 801d1d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d1d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d1dc:	f108 0210 	add.w	r2, r8, #16
 801d1e0:	46f2      	mov	sl, lr
 801d1e2:	2100      	movs	r1, #0
 801d1e4:	f859 3b04 	ldr.w	r3, [r9], #4
 801d1e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d1ec:	fa1f f883 	uxth.w	r8, r3
 801d1f0:	fa11 f18b 	uxtah	r1, r1, fp
 801d1f4:	0c1b      	lsrs	r3, r3, #16
 801d1f6:	eba1 0808 	sub.w	r8, r1, r8
 801d1fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d1fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d202:	fa1f f888 	uxth.w	r8, r8
 801d206:	1419      	asrs	r1, r3, #16
 801d208:	454e      	cmp	r6, r9
 801d20a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d20e:	f84a 3b04 	str.w	r3, [sl], #4
 801d212:	d8e7      	bhi.n	801d1e4 <__mdiff+0x80>
 801d214:	1b33      	subs	r3, r6, r4
 801d216:	3b15      	subs	r3, #21
 801d218:	f023 0303 	bic.w	r3, r3, #3
 801d21c:	3304      	adds	r3, #4
 801d21e:	3415      	adds	r4, #21
 801d220:	42a6      	cmp	r6, r4
 801d222:	bf38      	it	cc
 801d224:	2304      	movcc	r3, #4
 801d226:	441d      	add	r5, r3
 801d228:	4473      	add	r3, lr
 801d22a:	469e      	mov	lr, r3
 801d22c:	462e      	mov	r6, r5
 801d22e:	4566      	cmp	r6, ip
 801d230:	d30e      	bcc.n	801d250 <__mdiff+0xec>
 801d232:	f10c 0203 	add.w	r2, ip, #3
 801d236:	1b52      	subs	r2, r2, r5
 801d238:	f022 0203 	bic.w	r2, r2, #3
 801d23c:	3d03      	subs	r5, #3
 801d23e:	45ac      	cmp	ip, r5
 801d240:	bf38      	it	cc
 801d242:	2200      	movcc	r2, #0
 801d244:	441a      	add	r2, r3
 801d246:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d24a:	b17b      	cbz	r3, 801d26c <__mdiff+0x108>
 801d24c:	6107      	str	r7, [r0, #16]
 801d24e:	e7a3      	b.n	801d198 <__mdiff+0x34>
 801d250:	f856 8b04 	ldr.w	r8, [r6], #4
 801d254:	fa11 f288 	uxtah	r2, r1, r8
 801d258:	1414      	asrs	r4, r2, #16
 801d25a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d25e:	b292      	uxth	r2, r2
 801d260:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d264:	f84e 2b04 	str.w	r2, [lr], #4
 801d268:	1421      	asrs	r1, r4, #16
 801d26a:	e7e0      	b.n	801d22e <__mdiff+0xca>
 801d26c:	3f01      	subs	r7, #1
 801d26e:	e7ea      	b.n	801d246 <__mdiff+0xe2>
 801d270:	08052618 	.word	0x08052618
 801d274:	080526a4 	.word	0x080526a4

0801d278 <__ulp>:
 801d278:	b082      	sub	sp, #8
 801d27a:	ed8d 0b00 	vstr	d0, [sp]
 801d27e:	9b01      	ldr	r3, [sp, #4]
 801d280:	4912      	ldr	r1, [pc, #72]	; (801d2cc <__ulp+0x54>)
 801d282:	4019      	ands	r1, r3
 801d284:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d288:	2900      	cmp	r1, #0
 801d28a:	dd05      	ble.n	801d298 <__ulp+0x20>
 801d28c:	2200      	movs	r2, #0
 801d28e:	460b      	mov	r3, r1
 801d290:	ec43 2b10 	vmov	d0, r2, r3
 801d294:	b002      	add	sp, #8
 801d296:	4770      	bx	lr
 801d298:	4249      	negs	r1, r1
 801d29a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d29e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d2a2:	f04f 0200 	mov.w	r2, #0
 801d2a6:	f04f 0300 	mov.w	r3, #0
 801d2aa:	da04      	bge.n	801d2b6 <__ulp+0x3e>
 801d2ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d2b0:	fa41 f300 	asr.w	r3, r1, r0
 801d2b4:	e7ec      	b.n	801d290 <__ulp+0x18>
 801d2b6:	f1a0 0114 	sub.w	r1, r0, #20
 801d2ba:	291e      	cmp	r1, #30
 801d2bc:	bfda      	itte	le
 801d2be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d2c2:	fa20 f101 	lsrle.w	r1, r0, r1
 801d2c6:	2101      	movgt	r1, #1
 801d2c8:	460a      	mov	r2, r1
 801d2ca:	e7e1      	b.n	801d290 <__ulp+0x18>
 801d2cc:	7ff00000 	.word	0x7ff00000

0801d2d0 <__b2d>:
 801d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2d2:	6905      	ldr	r5, [r0, #16]
 801d2d4:	f100 0714 	add.w	r7, r0, #20
 801d2d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d2dc:	1f2e      	subs	r6, r5, #4
 801d2de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d2e2:	4620      	mov	r0, r4
 801d2e4:	f7ff fd48 	bl	801cd78 <__hi0bits>
 801d2e8:	f1c0 0320 	rsb	r3, r0, #32
 801d2ec:	280a      	cmp	r0, #10
 801d2ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d36c <__b2d+0x9c>
 801d2f2:	600b      	str	r3, [r1, #0]
 801d2f4:	dc14      	bgt.n	801d320 <__b2d+0x50>
 801d2f6:	f1c0 0e0b 	rsb	lr, r0, #11
 801d2fa:	fa24 f10e 	lsr.w	r1, r4, lr
 801d2fe:	42b7      	cmp	r7, r6
 801d300:	ea41 030c 	orr.w	r3, r1, ip
 801d304:	bf34      	ite	cc
 801d306:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d30a:	2100      	movcs	r1, #0
 801d30c:	3015      	adds	r0, #21
 801d30e:	fa04 f000 	lsl.w	r0, r4, r0
 801d312:	fa21 f10e 	lsr.w	r1, r1, lr
 801d316:	ea40 0201 	orr.w	r2, r0, r1
 801d31a:	ec43 2b10 	vmov	d0, r2, r3
 801d31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d320:	42b7      	cmp	r7, r6
 801d322:	bf3a      	itte	cc
 801d324:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d328:	f1a5 0608 	subcc.w	r6, r5, #8
 801d32c:	2100      	movcs	r1, #0
 801d32e:	380b      	subs	r0, #11
 801d330:	d017      	beq.n	801d362 <__b2d+0x92>
 801d332:	f1c0 0c20 	rsb	ip, r0, #32
 801d336:	fa04 f500 	lsl.w	r5, r4, r0
 801d33a:	42be      	cmp	r6, r7
 801d33c:	fa21 f40c 	lsr.w	r4, r1, ip
 801d340:	ea45 0504 	orr.w	r5, r5, r4
 801d344:	bf8c      	ite	hi
 801d346:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d34a:	2400      	movls	r4, #0
 801d34c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d350:	fa01 f000 	lsl.w	r0, r1, r0
 801d354:	fa24 f40c 	lsr.w	r4, r4, ip
 801d358:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d35c:	ea40 0204 	orr.w	r2, r0, r4
 801d360:	e7db      	b.n	801d31a <__b2d+0x4a>
 801d362:	ea44 030c 	orr.w	r3, r4, ip
 801d366:	460a      	mov	r2, r1
 801d368:	e7d7      	b.n	801d31a <__b2d+0x4a>
 801d36a:	bf00      	nop
 801d36c:	3ff00000 	.word	0x3ff00000

0801d370 <__d2b>:
 801d370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d374:	4689      	mov	r9, r1
 801d376:	2101      	movs	r1, #1
 801d378:	ec57 6b10 	vmov	r6, r7, d0
 801d37c:	4690      	mov	r8, r2
 801d37e:	f7ff fc09 	bl	801cb94 <_Balloc>
 801d382:	4604      	mov	r4, r0
 801d384:	b930      	cbnz	r0, 801d394 <__d2b+0x24>
 801d386:	4602      	mov	r2, r0
 801d388:	4b25      	ldr	r3, [pc, #148]	; (801d420 <__d2b+0xb0>)
 801d38a:	4826      	ldr	r0, [pc, #152]	; (801d424 <__d2b+0xb4>)
 801d38c:	f240 310a 	movw	r1, #778	; 0x30a
 801d390:	f000 fb50 	bl	801da34 <__assert_func>
 801d394:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d39c:	bb35      	cbnz	r5, 801d3ec <__d2b+0x7c>
 801d39e:	2e00      	cmp	r6, #0
 801d3a0:	9301      	str	r3, [sp, #4]
 801d3a2:	d028      	beq.n	801d3f6 <__d2b+0x86>
 801d3a4:	4668      	mov	r0, sp
 801d3a6:	9600      	str	r6, [sp, #0]
 801d3a8:	f7ff fd06 	bl	801cdb8 <__lo0bits>
 801d3ac:	9900      	ldr	r1, [sp, #0]
 801d3ae:	b300      	cbz	r0, 801d3f2 <__d2b+0x82>
 801d3b0:	9a01      	ldr	r2, [sp, #4]
 801d3b2:	f1c0 0320 	rsb	r3, r0, #32
 801d3b6:	fa02 f303 	lsl.w	r3, r2, r3
 801d3ba:	430b      	orrs	r3, r1
 801d3bc:	40c2      	lsrs	r2, r0
 801d3be:	6163      	str	r3, [r4, #20]
 801d3c0:	9201      	str	r2, [sp, #4]
 801d3c2:	9b01      	ldr	r3, [sp, #4]
 801d3c4:	61a3      	str	r3, [r4, #24]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	bf14      	ite	ne
 801d3ca:	2202      	movne	r2, #2
 801d3cc:	2201      	moveq	r2, #1
 801d3ce:	6122      	str	r2, [r4, #16]
 801d3d0:	b1d5      	cbz	r5, 801d408 <__d2b+0x98>
 801d3d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d3d6:	4405      	add	r5, r0
 801d3d8:	f8c9 5000 	str.w	r5, [r9]
 801d3dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d3e0:	f8c8 0000 	str.w	r0, [r8]
 801d3e4:	4620      	mov	r0, r4
 801d3e6:	b003      	add	sp, #12
 801d3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d3f0:	e7d5      	b.n	801d39e <__d2b+0x2e>
 801d3f2:	6161      	str	r1, [r4, #20]
 801d3f4:	e7e5      	b.n	801d3c2 <__d2b+0x52>
 801d3f6:	a801      	add	r0, sp, #4
 801d3f8:	f7ff fcde 	bl	801cdb8 <__lo0bits>
 801d3fc:	9b01      	ldr	r3, [sp, #4]
 801d3fe:	6163      	str	r3, [r4, #20]
 801d400:	2201      	movs	r2, #1
 801d402:	6122      	str	r2, [r4, #16]
 801d404:	3020      	adds	r0, #32
 801d406:	e7e3      	b.n	801d3d0 <__d2b+0x60>
 801d408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d40c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d410:	f8c9 0000 	str.w	r0, [r9]
 801d414:	6918      	ldr	r0, [r3, #16]
 801d416:	f7ff fcaf 	bl	801cd78 <__hi0bits>
 801d41a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d41e:	e7df      	b.n	801d3e0 <__d2b+0x70>
 801d420:	08052618 	.word	0x08052618
 801d424:	080526a4 	.word	0x080526a4

0801d428 <__ratio>:
 801d428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d42c:	4688      	mov	r8, r1
 801d42e:	4669      	mov	r1, sp
 801d430:	4681      	mov	r9, r0
 801d432:	f7ff ff4d 	bl	801d2d0 <__b2d>
 801d436:	a901      	add	r1, sp, #4
 801d438:	4640      	mov	r0, r8
 801d43a:	ec55 4b10 	vmov	r4, r5, d0
 801d43e:	f7ff ff47 	bl	801d2d0 <__b2d>
 801d442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d446:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d44a:	eba3 0c02 	sub.w	ip, r3, r2
 801d44e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d452:	1a9b      	subs	r3, r3, r2
 801d454:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d458:	ec51 0b10 	vmov	r0, r1, d0
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	bfd6      	itet	le
 801d460:	460a      	movle	r2, r1
 801d462:	462a      	movgt	r2, r5
 801d464:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d468:	468b      	mov	fp, r1
 801d46a:	462f      	mov	r7, r5
 801d46c:	bfd4      	ite	le
 801d46e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d472:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d476:	4620      	mov	r0, r4
 801d478:	ee10 2a10 	vmov	r2, s0
 801d47c:	465b      	mov	r3, fp
 801d47e:	4639      	mov	r1, r7
 801d480:	f7fb ffe4 	bl	801944c <__aeabi_ddiv>
 801d484:	ec41 0b10 	vmov	d0, r0, r1
 801d488:	b003      	add	sp, #12
 801d48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d48e <__copybits>:
 801d48e:	3901      	subs	r1, #1
 801d490:	b570      	push	{r4, r5, r6, lr}
 801d492:	1149      	asrs	r1, r1, #5
 801d494:	6914      	ldr	r4, [r2, #16]
 801d496:	3101      	adds	r1, #1
 801d498:	f102 0314 	add.w	r3, r2, #20
 801d49c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d4a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d4a4:	1f05      	subs	r5, r0, #4
 801d4a6:	42a3      	cmp	r3, r4
 801d4a8:	d30c      	bcc.n	801d4c4 <__copybits+0x36>
 801d4aa:	1aa3      	subs	r3, r4, r2
 801d4ac:	3b11      	subs	r3, #17
 801d4ae:	f023 0303 	bic.w	r3, r3, #3
 801d4b2:	3211      	adds	r2, #17
 801d4b4:	42a2      	cmp	r2, r4
 801d4b6:	bf88      	it	hi
 801d4b8:	2300      	movhi	r3, #0
 801d4ba:	4418      	add	r0, r3
 801d4bc:	2300      	movs	r3, #0
 801d4be:	4288      	cmp	r0, r1
 801d4c0:	d305      	bcc.n	801d4ce <__copybits+0x40>
 801d4c2:	bd70      	pop	{r4, r5, r6, pc}
 801d4c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801d4c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801d4cc:	e7eb      	b.n	801d4a6 <__copybits+0x18>
 801d4ce:	f840 3b04 	str.w	r3, [r0], #4
 801d4d2:	e7f4      	b.n	801d4be <__copybits+0x30>

0801d4d4 <__any_on>:
 801d4d4:	f100 0214 	add.w	r2, r0, #20
 801d4d8:	6900      	ldr	r0, [r0, #16]
 801d4da:	114b      	asrs	r3, r1, #5
 801d4dc:	4298      	cmp	r0, r3
 801d4de:	b510      	push	{r4, lr}
 801d4e0:	db11      	blt.n	801d506 <__any_on+0x32>
 801d4e2:	dd0a      	ble.n	801d4fa <__any_on+0x26>
 801d4e4:	f011 011f 	ands.w	r1, r1, #31
 801d4e8:	d007      	beq.n	801d4fa <__any_on+0x26>
 801d4ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d4ee:	fa24 f001 	lsr.w	r0, r4, r1
 801d4f2:	fa00 f101 	lsl.w	r1, r0, r1
 801d4f6:	428c      	cmp	r4, r1
 801d4f8:	d10b      	bne.n	801d512 <__any_on+0x3e>
 801d4fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d4fe:	4293      	cmp	r3, r2
 801d500:	d803      	bhi.n	801d50a <__any_on+0x36>
 801d502:	2000      	movs	r0, #0
 801d504:	bd10      	pop	{r4, pc}
 801d506:	4603      	mov	r3, r0
 801d508:	e7f7      	b.n	801d4fa <__any_on+0x26>
 801d50a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d50e:	2900      	cmp	r1, #0
 801d510:	d0f5      	beq.n	801d4fe <__any_on+0x2a>
 801d512:	2001      	movs	r0, #1
 801d514:	e7f6      	b.n	801d504 <__any_on+0x30>

0801d516 <_calloc_r>:
 801d516:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d518:	fba1 2402 	umull	r2, r4, r1, r2
 801d51c:	b94c      	cbnz	r4, 801d532 <_calloc_r+0x1c>
 801d51e:	4611      	mov	r1, r2
 801d520:	9201      	str	r2, [sp, #4]
 801d522:	f000 f87b 	bl	801d61c <_malloc_r>
 801d526:	9a01      	ldr	r2, [sp, #4]
 801d528:	4605      	mov	r5, r0
 801d52a:	b930      	cbnz	r0, 801d53a <_calloc_r+0x24>
 801d52c:	4628      	mov	r0, r5
 801d52e:	b003      	add	sp, #12
 801d530:	bd30      	pop	{r4, r5, pc}
 801d532:	220c      	movs	r2, #12
 801d534:	6002      	str	r2, [r0, #0]
 801d536:	2500      	movs	r5, #0
 801d538:	e7f8      	b.n	801d52c <_calloc_r+0x16>
 801d53a:	4621      	mov	r1, r4
 801d53c:	f7fc fbb4 	bl	8019ca8 <memset>
 801d540:	e7f4      	b.n	801d52c <_calloc_r+0x16>
	...

0801d544 <_free_r>:
 801d544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d546:	2900      	cmp	r1, #0
 801d548:	d044      	beq.n	801d5d4 <_free_r+0x90>
 801d54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d54e:	9001      	str	r0, [sp, #4]
 801d550:	2b00      	cmp	r3, #0
 801d552:	f1a1 0404 	sub.w	r4, r1, #4
 801d556:	bfb8      	it	lt
 801d558:	18e4      	addlt	r4, r4, r3
 801d55a:	f000 fab5 	bl	801dac8 <__malloc_lock>
 801d55e:	4a1e      	ldr	r2, [pc, #120]	; (801d5d8 <_free_r+0x94>)
 801d560:	9801      	ldr	r0, [sp, #4]
 801d562:	6813      	ldr	r3, [r2, #0]
 801d564:	b933      	cbnz	r3, 801d574 <_free_r+0x30>
 801d566:	6063      	str	r3, [r4, #4]
 801d568:	6014      	str	r4, [r2, #0]
 801d56a:	b003      	add	sp, #12
 801d56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d570:	f000 bab0 	b.w	801dad4 <__malloc_unlock>
 801d574:	42a3      	cmp	r3, r4
 801d576:	d908      	bls.n	801d58a <_free_r+0x46>
 801d578:	6825      	ldr	r5, [r4, #0]
 801d57a:	1961      	adds	r1, r4, r5
 801d57c:	428b      	cmp	r3, r1
 801d57e:	bf01      	itttt	eq
 801d580:	6819      	ldreq	r1, [r3, #0]
 801d582:	685b      	ldreq	r3, [r3, #4]
 801d584:	1949      	addeq	r1, r1, r5
 801d586:	6021      	streq	r1, [r4, #0]
 801d588:	e7ed      	b.n	801d566 <_free_r+0x22>
 801d58a:	461a      	mov	r2, r3
 801d58c:	685b      	ldr	r3, [r3, #4]
 801d58e:	b10b      	cbz	r3, 801d594 <_free_r+0x50>
 801d590:	42a3      	cmp	r3, r4
 801d592:	d9fa      	bls.n	801d58a <_free_r+0x46>
 801d594:	6811      	ldr	r1, [r2, #0]
 801d596:	1855      	adds	r5, r2, r1
 801d598:	42a5      	cmp	r5, r4
 801d59a:	d10b      	bne.n	801d5b4 <_free_r+0x70>
 801d59c:	6824      	ldr	r4, [r4, #0]
 801d59e:	4421      	add	r1, r4
 801d5a0:	1854      	adds	r4, r2, r1
 801d5a2:	42a3      	cmp	r3, r4
 801d5a4:	6011      	str	r1, [r2, #0]
 801d5a6:	d1e0      	bne.n	801d56a <_free_r+0x26>
 801d5a8:	681c      	ldr	r4, [r3, #0]
 801d5aa:	685b      	ldr	r3, [r3, #4]
 801d5ac:	6053      	str	r3, [r2, #4]
 801d5ae:	4421      	add	r1, r4
 801d5b0:	6011      	str	r1, [r2, #0]
 801d5b2:	e7da      	b.n	801d56a <_free_r+0x26>
 801d5b4:	d902      	bls.n	801d5bc <_free_r+0x78>
 801d5b6:	230c      	movs	r3, #12
 801d5b8:	6003      	str	r3, [r0, #0]
 801d5ba:	e7d6      	b.n	801d56a <_free_r+0x26>
 801d5bc:	6825      	ldr	r5, [r4, #0]
 801d5be:	1961      	adds	r1, r4, r5
 801d5c0:	428b      	cmp	r3, r1
 801d5c2:	bf04      	itt	eq
 801d5c4:	6819      	ldreq	r1, [r3, #0]
 801d5c6:	685b      	ldreq	r3, [r3, #4]
 801d5c8:	6063      	str	r3, [r4, #4]
 801d5ca:	bf04      	itt	eq
 801d5cc:	1949      	addeq	r1, r1, r5
 801d5ce:	6021      	streq	r1, [r4, #0]
 801d5d0:	6054      	str	r4, [r2, #4]
 801d5d2:	e7ca      	b.n	801d56a <_free_r+0x26>
 801d5d4:	b003      	add	sp, #12
 801d5d6:	bd30      	pop	{r4, r5, pc}
 801d5d8:	20000a10 	.word	0x20000a10

0801d5dc <sbrk_aligned>:
 801d5dc:	b570      	push	{r4, r5, r6, lr}
 801d5de:	4e0e      	ldr	r6, [pc, #56]	; (801d618 <sbrk_aligned+0x3c>)
 801d5e0:	460c      	mov	r4, r1
 801d5e2:	6831      	ldr	r1, [r6, #0]
 801d5e4:	4605      	mov	r5, r0
 801d5e6:	b911      	cbnz	r1, 801d5ee <sbrk_aligned+0x12>
 801d5e8:	f000 f9f2 	bl	801d9d0 <_sbrk_r>
 801d5ec:	6030      	str	r0, [r6, #0]
 801d5ee:	4621      	mov	r1, r4
 801d5f0:	4628      	mov	r0, r5
 801d5f2:	f000 f9ed 	bl	801d9d0 <_sbrk_r>
 801d5f6:	1c43      	adds	r3, r0, #1
 801d5f8:	d00a      	beq.n	801d610 <sbrk_aligned+0x34>
 801d5fa:	1cc4      	adds	r4, r0, #3
 801d5fc:	f024 0403 	bic.w	r4, r4, #3
 801d600:	42a0      	cmp	r0, r4
 801d602:	d007      	beq.n	801d614 <sbrk_aligned+0x38>
 801d604:	1a21      	subs	r1, r4, r0
 801d606:	4628      	mov	r0, r5
 801d608:	f000 f9e2 	bl	801d9d0 <_sbrk_r>
 801d60c:	3001      	adds	r0, #1
 801d60e:	d101      	bne.n	801d614 <sbrk_aligned+0x38>
 801d610:	f04f 34ff 	mov.w	r4, #4294967295
 801d614:	4620      	mov	r0, r4
 801d616:	bd70      	pop	{r4, r5, r6, pc}
 801d618:	20000a14 	.word	0x20000a14

0801d61c <_malloc_r>:
 801d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d620:	1ccd      	adds	r5, r1, #3
 801d622:	f025 0503 	bic.w	r5, r5, #3
 801d626:	3508      	adds	r5, #8
 801d628:	2d0c      	cmp	r5, #12
 801d62a:	bf38      	it	cc
 801d62c:	250c      	movcc	r5, #12
 801d62e:	2d00      	cmp	r5, #0
 801d630:	4607      	mov	r7, r0
 801d632:	db01      	blt.n	801d638 <_malloc_r+0x1c>
 801d634:	42a9      	cmp	r1, r5
 801d636:	d905      	bls.n	801d644 <_malloc_r+0x28>
 801d638:	230c      	movs	r3, #12
 801d63a:	603b      	str	r3, [r7, #0]
 801d63c:	2600      	movs	r6, #0
 801d63e:	4630      	mov	r0, r6
 801d640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d644:	4e2e      	ldr	r6, [pc, #184]	; (801d700 <_malloc_r+0xe4>)
 801d646:	f000 fa3f 	bl	801dac8 <__malloc_lock>
 801d64a:	6833      	ldr	r3, [r6, #0]
 801d64c:	461c      	mov	r4, r3
 801d64e:	bb34      	cbnz	r4, 801d69e <_malloc_r+0x82>
 801d650:	4629      	mov	r1, r5
 801d652:	4638      	mov	r0, r7
 801d654:	f7ff ffc2 	bl	801d5dc <sbrk_aligned>
 801d658:	1c43      	adds	r3, r0, #1
 801d65a:	4604      	mov	r4, r0
 801d65c:	d14d      	bne.n	801d6fa <_malloc_r+0xde>
 801d65e:	6834      	ldr	r4, [r6, #0]
 801d660:	4626      	mov	r6, r4
 801d662:	2e00      	cmp	r6, #0
 801d664:	d140      	bne.n	801d6e8 <_malloc_r+0xcc>
 801d666:	6823      	ldr	r3, [r4, #0]
 801d668:	4631      	mov	r1, r6
 801d66a:	4638      	mov	r0, r7
 801d66c:	eb04 0803 	add.w	r8, r4, r3
 801d670:	f000 f9ae 	bl	801d9d0 <_sbrk_r>
 801d674:	4580      	cmp	r8, r0
 801d676:	d13a      	bne.n	801d6ee <_malloc_r+0xd2>
 801d678:	6821      	ldr	r1, [r4, #0]
 801d67a:	3503      	adds	r5, #3
 801d67c:	1a6d      	subs	r5, r5, r1
 801d67e:	f025 0503 	bic.w	r5, r5, #3
 801d682:	3508      	adds	r5, #8
 801d684:	2d0c      	cmp	r5, #12
 801d686:	bf38      	it	cc
 801d688:	250c      	movcc	r5, #12
 801d68a:	4629      	mov	r1, r5
 801d68c:	4638      	mov	r0, r7
 801d68e:	f7ff ffa5 	bl	801d5dc <sbrk_aligned>
 801d692:	3001      	adds	r0, #1
 801d694:	d02b      	beq.n	801d6ee <_malloc_r+0xd2>
 801d696:	6823      	ldr	r3, [r4, #0]
 801d698:	442b      	add	r3, r5
 801d69a:	6023      	str	r3, [r4, #0]
 801d69c:	e00e      	b.n	801d6bc <_malloc_r+0xa0>
 801d69e:	6822      	ldr	r2, [r4, #0]
 801d6a0:	1b52      	subs	r2, r2, r5
 801d6a2:	d41e      	bmi.n	801d6e2 <_malloc_r+0xc6>
 801d6a4:	2a0b      	cmp	r2, #11
 801d6a6:	d916      	bls.n	801d6d6 <_malloc_r+0xba>
 801d6a8:	1961      	adds	r1, r4, r5
 801d6aa:	42a3      	cmp	r3, r4
 801d6ac:	6025      	str	r5, [r4, #0]
 801d6ae:	bf18      	it	ne
 801d6b0:	6059      	strne	r1, [r3, #4]
 801d6b2:	6863      	ldr	r3, [r4, #4]
 801d6b4:	bf08      	it	eq
 801d6b6:	6031      	streq	r1, [r6, #0]
 801d6b8:	5162      	str	r2, [r4, r5]
 801d6ba:	604b      	str	r3, [r1, #4]
 801d6bc:	4638      	mov	r0, r7
 801d6be:	f104 060b 	add.w	r6, r4, #11
 801d6c2:	f000 fa07 	bl	801dad4 <__malloc_unlock>
 801d6c6:	f026 0607 	bic.w	r6, r6, #7
 801d6ca:	1d23      	adds	r3, r4, #4
 801d6cc:	1af2      	subs	r2, r6, r3
 801d6ce:	d0b6      	beq.n	801d63e <_malloc_r+0x22>
 801d6d0:	1b9b      	subs	r3, r3, r6
 801d6d2:	50a3      	str	r3, [r4, r2]
 801d6d4:	e7b3      	b.n	801d63e <_malloc_r+0x22>
 801d6d6:	6862      	ldr	r2, [r4, #4]
 801d6d8:	42a3      	cmp	r3, r4
 801d6da:	bf0c      	ite	eq
 801d6dc:	6032      	streq	r2, [r6, #0]
 801d6de:	605a      	strne	r2, [r3, #4]
 801d6e0:	e7ec      	b.n	801d6bc <_malloc_r+0xa0>
 801d6e2:	4623      	mov	r3, r4
 801d6e4:	6864      	ldr	r4, [r4, #4]
 801d6e6:	e7b2      	b.n	801d64e <_malloc_r+0x32>
 801d6e8:	4634      	mov	r4, r6
 801d6ea:	6876      	ldr	r6, [r6, #4]
 801d6ec:	e7b9      	b.n	801d662 <_malloc_r+0x46>
 801d6ee:	230c      	movs	r3, #12
 801d6f0:	603b      	str	r3, [r7, #0]
 801d6f2:	4638      	mov	r0, r7
 801d6f4:	f000 f9ee 	bl	801dad4 <__malloc_unlock>
 801d6f8:	e7a1      	b.n	801d63e <_malloc_r+0x22>
 801d6fa:	6025      	str	r5, [r4, #0]
 801d6fc:	e7de      	b.n	801d6bc <_malloc_r+0xa0>
 801d6fe:	bf00      	nop
 801d700:	20000a10 	.word	0x20000a10

0801d704 <__ssputs_r>:
 801d704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d708:	688e      	ldr	r6, [r1, #8]
 801d70a:	429e      	cmp	r6, r3
 801d70c:	4682      	mov	sl, r0
 801d70e:	460c      	mov	r4, r1
 801d710:	4690      	mov	r8, r2
 801d712:	461f      	mov	r7, r3
 801d714:	d838      	bhi.n	801d788 <__ssputs_r+0x84>
 801d716:	898a      	ldrh	r2, [r1, #12]
 801d718:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d71c:	d032      	beq.n	801d784 <__ssputs_r+0x80>
 801d71e:	6825      	ldr	r5, [r4, #0]
 801d720:	6909      	ldr	r1, [r1, #16]
 801d722:	eba5 0901 	sub.w	r9, r5, r1
 801d726:	6965      	ldr	r5, [r4, #20]
 801d728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d72c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d730:	3301      	adds	r3, #1
 801d732:	444b      	add	r3, r9
 801d734:	106d      	asrs	r5, r5, #1
 801d736:	429d      	cmp	r5, r3
 801d738:	bf38      	it	cc
 801d73a:	461d      	movcc	r5, r3
 801d73c:	0553      	lsls	r3, r2, #21
 801d73e:	d531      	bpl.n	801d7a4 <__ssputs_r+0xa0>
 801d740:	4629      	mov	r1, r5
 801d742:	f7ff ff6b 	bl	801d61c <_malloc_r>
 801d746:	4606      	mov	r6, r0
 801d748:	b950      	cbnz	r0, 801d760 <__ssputs_r+0x5c>
 801d74a:	230c      	movs	r3, #12
 801d74c:	f8ca 3000 	str.w	r3, [sl]
 801d750:	89a3      	ldrh	r3, [r4, #12]
 801d752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d756:	81a3      	strh	r3, [r4, #12]
 801d758:	f04f 30ff 	mov.w	r0, #4294967295
 801d75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d760:	6921      	ldr	r1, [r4, #16]
 801d762:	464a      	mov	r2, r9
 801d764:	f7ff fa08 	bl	801cb78 <memcpy>
 801d768:	89a3      	ldrh	r3, [r4, #12]
 801d76a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d772:	81a3      	strh	r3, [r4, #12]
 801d774:	6126      	str	r6, [r4, #16]
 801d776:	6165      	str	r5, [r4, #20]
 801d778:	444e      	add	r6, r9
 801d77a:	eba5 0509 	sub.w	r5, r5, r9
 801d77e:	6026      	str	r6, [r4, #0]
 801d780:	60a5      	str	r5, [r4, #8]
 801d782:	463e      	mov	r6, r7
 801d784:	42be      	cmp	r6, r7
 801d786:	d900      	bls.n	801d78a <__ssputs_r+0x86>
 801d788:	463e      	mov	r6, r7
 801d78a:	6820      	ldr	r0, [r4, #0]
 801d78c:	4632      	mov	r2, r6
 801d78e:	4641      	mov	r1, r8
 801d790:	f000 f980 	bl	801da94 <memmove>
 801d794:	68a3      	ldr	r3, [r4, #8]
 801d796:	1b9b      	subs	r3, r3, r6
 801d798:	60a3      	str	r3, [r4, #8]
 801d79a:	6823      	ldr	r3, [r4, #0]
 801d79c:	4433      	add	r3, r6
 801d79e:	6023      	str	r3, [r4, #0]
 801d7a0:	2000      	movs	r0, #0
 801d7a2:	e7db      	b.n	801d75c <__ssputs_r+0x58>
 801d7a4:	462a      	mov	r2, r5
 801d7a6:	f000 f99b 	bl	801dae0 <_realloc_r>
 801d7aa:	4606      	mov	r6, r0
 801d7ac:	2800      	cmp	r0, #0
 801d7ae:	d1e1      	bne.n	801d774 <__ssputs_r+0x70>
 801d7b0:	6921      	ldr	r1, [r4, #16]
 801d7b2:	4650      	mov	r0, sl
 801d7b4:	f7ff fec6 	bl	801d544 <_free_r>
 801d7b8:	e7c7      	b.n	801d74a <__ssputs_r+0x46>
	...

0801d7bc <_svfiprintf_r>:
 801d7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c0:	4698      	mov	r8, r3
 801d7c2:	898b      	ldrh	r3, [r1, #12]
 801d7c4:	061b      	lsls	r3, r3, #24
 801d7c6:	b09d      	sub	sp, #116	; 0x74
 801d7c8:	4607      	mov	r7, r0
 801d7ca:	460d      	mov	r5, r1
 801d7cc:	4614      	mov	r4, r2
 801d7ce:	d50e      	bpl.n	801d7ee <_svfiprintf_r+0x32>
 801d7d0:	690b      	ldr	r3, [r1, #16]
 801d7d2:	b963      	cbnz	r3, 801d7ee <_svfiprintf_r+0x32>
 801d7d4:	2140      	movs	r1, #64	; 0x40
 801d7d6:	f7ff ff21 	bl	801d61c <_malloc_r>
 801d7da:	6028      	str	r0, [r5, #0]
 801d7dc:	6128      	str	r0, [r5, #16]
 801d7de:	b920      	cbnz	r0, 801d7ea <_svfiprintf_r+0x2e>
 801d7e0:	230c      	movs	r3, #12
 801d7e2:	603b      	str	r3, [r7, #0]
 801d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801d7e8:	e0d1      	b.n	801d98e <_svfiprintf_r+0x1d2>
 801d7ea:	2340      	movs	r3, #64	; 0x40
 801d7ec:	616b      	str	r3, [r5, #20]
 801d7ee:	2300      	movs	r3, #0
 801d7f0:	9309      	str	r3, [sp, #36]	; 0x24
 801d7f2:	2320      	movs	r3, #32
 801d7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7fc:	2330      	movs	r3, #48	; 0x30
 801d7fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d9a8 <_svfiprintf_r+0x1ec>
 801d802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d806:	f04f 0901 	mov.w	r9, #1
 801d80a:	4623      	mov	r3, r4
 801d80c:	469a      	mov	sl, r3
 801d80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d812:	b10a      	cbz	r2, 801d818 <_svfiprintf_r+0x5c>
 801d814:	2a25      	cmp	r2, #37	; 0x25
 801d816:	d1f9      	bne.n	801d80c <_svfiprintf_r+0x50>
 801d818:	ebba 0b04 	subs.w	fp, sl, r4
 801d81c:	d00b      	beq.n	801d836 <_svfiprintf_r+0x7a>
 801d81e:	465b      	mov	r3, fp
 801d820:	4622      	mov	r2, r4
 801d822:	4629      	mov	r1, r5
 801d824:	4638      	mov	r0, r7
 801d826:	f7ff ff6d 	bl	801d704 <__ssputs_r>
 801d82a:	3001      	adds	r0, #1
 801d82c:	f000 80aa 	beq.w	801d984 <_svfiprintf_r+0x1c8>
 801d830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d832:	445a      	add	r2, fp
 801d834:	9209      	str	r2, [sp, #36]	; 0x24
 801d836:	f89a 3000 	ldrb.w	r3, [sl]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	f000 80a2 	beq.w	801d984 <_svfiprintf_r+0x1c8>
 801d840:	2300      	movs	r3, #0
 801d842:	f04f 32ff 	mov.w	r2, #4294967295
 801d846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d84a:	f10a 0a01 	add.w	sl, sl, #1
 801d84e:	9304      	str	r3, [sp, #16]
 801d850:	9307      	str	r3, [sp, #28]
 801d852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d856:	931a      	str	r3, [sp, #104]	; 0x68
 801d858:	4654      	mov	r4, sl
 801d85a:	2205      	movs	r2, #5
 801d85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d860:	4851      	ldr	r0, [pc, #324]	; (801d9a8 <_svfiprintf_r+0x1ec>)
 801d862:	f7fb fabd 	bl	8018de0 <memchr>
 801d866:	9a04      	ldr	r2, [sp, #16]
 801d868:	b9d8      	cbnz	r0, 801d8a2 <_svfiprintf_r+0xe6>
 801d86a:	06d0      	lsls	r0, r2, #27
 801d86c:	bf44      	itt	mi
 801d86e:	2320      	movmi	r3, #32
 801d870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d874:	0711      	lsls	r1, r2, #28
 801d876:	bf44      	itt	mi
 801d878:	232b      	movmi	r3, #43	; 0x2b
 801d87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d87e:	f89a 3000 	ldrb.w	r3, [sl]
 801d882:	2b2a      	cmp	r3, #42	; 0x2a
 801d884:	d015      	beq.n	801d8b2 <_svfiprintf_r+0xf6>
 801d886:	9a07      	ldr	r2, [sp, #28]
 801d888:	4654      	mov	r4, sl
 801d88a:	2000      	movs	r0, #0
 801d88c:	f04f 0c0a 	mov.w	ip, #10
 801d890:	4621      	mov	r1, r4
 801d892:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d896:	3b30      	subs	r3, #48	; 0x30
 801d898:	2b09      	cmp	r3, #9
 801d89a:	d94e      	bls.n	801d93a <_svfiprintf_r+0x17e>
 801d89c:	b1b0      	cbz	r0, 801d8cc <_svfiprintf_r+0x110>
 801d89e:	9207      	str	r2, [sp, #28]
 801d8a0:	e014      	b.n	801d8cc <_svfiprintf_r+0x110>
 801d8a2:	eba0 0308 	sub.w	r3, r0, r8
 801d8a6:	fa09 f303 	lsl.w	r3, r9, r3
 801d8aa:	4313      	orrs	r3, r2
 801d8ac:	9304      	str	r3, [sp, #16]
 801d8ae:	46a2      	mov	sl, r4
 801d8b0:	e7d2      	b.n	801d858 <_svfiprintf_r+0x9c>
 801d8b2:	9b03      	ldr	r3, [sp, #12]
 801d8b4:	1d19      	adds	r1, r3, #4
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	9103      	str	r1, [sp, #12]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	bfbb      	ittet	lt
 801d8be:	425b      	neglt	r3, r3
 801d8c0:	f042 0202 	orrlt.w	r2, r2, #2
 801d8c4:	9307      	strge	r3, [sp, #28]
 801d8c6:	9307      	strlt	r3, [sp, #28]
 801d8c8:	bfb8      	it	lt
 801d8ca:	9204      	strlt	r2, [sp, #16]
 801d8cc:	7823      	ldrb	r3, [r4, #0]
 801d8ce:	2b2e      	cmp	r3, #46	; 0x2e
 801d8d0:	d10c      	bne.n	801d8ec <_svfiprintf_r+0x130>
 801d8d2:	7863      	ldrb	r3, [r4, #1]
 801d8d4:	2b2a      	cmp	r3, #42	; 0x2a
 801d8d6:	d135      	bne.n	801d944 <_svfiprintf_r+0x188>
 801d8d8:	9b03      	ldr	r3, [sp, #12]
 801d8da:	1d1a      	adds	r2, r3, #4
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	9203      	str	r2, [sp, #12]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	bfb8      	it	lt
 801d8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 801d8e8:	3402      	adds	r4, #2
 801d8ea:	9305      	str	r3, [sp, #20]
 801d8ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d9b8 <_svfiprintf_r+0x1fc>
 801d8f0:	7821      	ldrb	r1, [r4, #0]
 801d8f2:	2203      	movs	r2, #3
 801d8f4:	4650      	mov	r0, sl
 801d8f6:	f7fb fa73 	bl	8018de0 <memchr>
 801d8fa:	b140      	cbz	r0, 801d90e <_svfiprintf_r+0x152>
 801d8fc:	2340      	movs	r3, #64	; 0x40
 801d8fe:	eba0 000a 	sub.w	r0, r0, sl
 801d902:	fa03 f000 	lsl.w	r0, r3, r0
 801d906:	9b04      	ldr	r3, [sp, #16]
 801d908:	4303      	orrs	r3, r0
 801d90a:	3401      	adds	r4, #1
 801d90c:	9304      	str	r3, [sp, #16]
 801d90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d912:	4826      	ldr	r0, [pc, #152]	; (801d9ac <_svfiprintf_r+0x1f0>)
 801d914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d918:	2206      	movs	r2, #6
 801d91a:	f7fb fa61 	bl	8018de0 <memchr>
 801d91e:	2800      	cmp	r0, #0
 801d920:	d038      	beq.n	801d994 <_svfiprintf_r+0x1d8>
 801d922:	4b23      	ldr	r3, [pc, #140]	; (801d9b0 <_svfiprintf_r+0x1f4>)
 801d924:	bb1b      	cbnz	r3, 801d96e <_svfiprintf_r+0x1b2>
 801d926:	9b03      	ldr	r3, [sp, #12]
 801d928:	3307      	adds	r3, #7
 801d92a:	f023 0307 	bic.w	r3, r3, #7
 801d92e:	3308      	adds	r3, #8
 801d930:	9303      	str	r3, [sp, #12]
 801d932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d934:	4433      	add	r3, r6
 801d936:	9309      	str	r3, [sp, #36]	; 0x24
 801d938:	e767      	b.n	801d80a <_svfiprintf_r+0x4e>
 801d93a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d93e:	460c      	mov	r4, r1
 801d940:	2001      	movs	r0, #1
 801d942:	e7a5      	b.n	801d890 <_svfiprintf_r+0xd4>
 801d944:	2300      	movs	r3, #0
 801d946:	3401      	adds	r4, #1
 801d948:	9305      	str	r3, [sp, #20]
 801d94a:	4619      	mov	r1, r3
 801d94c:	f04f 0c0a 	mov.w	ip, #10
 801d950:	4620      	mov	r0, r4
 801d952:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d956:	3a30      	subs	r2, #48	; 0x30
 801d958:	2a09      	cmp	r2, #9
 801d95a:	d903      	bls.n	801d964 <_svfiprintf_r+0x1a8>
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d0c5      	beq.n	801d8ec <_svfiprintf_r+0x130>
 801d960:	9105      	str	r1, [sp, #20]
 801d962:	e7c3      	b.n	801d8ec <_svfiprintf_r+0x130>
 801d964:	fb0c 2101 	mla	r1, ip, r1, r2
 801d968:	4604      	mov	r4, r0
 801d96a:	2301      	movs	r3, #1
 801d96c:	e7f0      	b.n	801d950 <_svfiprintf_r+0x194>
 801d96e:	ab03      	add	r3, sp, #12
 801d970:	9300      	str	r3, [sp, #0]
 801d972:	462a      	mov	r2, r5
 801d974:	4b0f      	ldr	r3, [pc, #60]	; (801d9b4 <_svfiprintf_r+0x1f8>)
 801d976:	a904      	add	r1, sp, #16
 801d978:	4638      	mov	r0, r7
 801d97a:	f7fc fa3d 	bl	8019df8 <_printf_float>
 801d97e:	1c42      	adds	r2, r0, #1
 801d980:	4606      	mov	r6, r0
 801d982:	d1d6      	bne.n	801d932 <_svfiprintf_r+0x176>
 801d984:	89ab      	ldrh	r3, [r5, #12]
 801d986:	065b      	lsls	r3, r3, #25
 801d988:	f53f af2c 	bmi.w	801d7e4 <_svfiprintf_r+0x28>
 801d98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d98e:	b01d      	add	sp, #116	; 0x74
 801d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d994:	ab03      	add	r3, sp, #12
 801d996:	9300      	str	r3, [sp, #0]
 801d998:	462a      	mov	r2, r5
 801d99a:	4b06      	ldr	r3, [pc, #24]	; (801d9b4 <_svfiprintf_r+0x1f8>)
 801d99c:	a904      	add	r1, sp, #16
 801d99e:	4638      	mov	r0, r7
 801d9a0:	f7fc fcce 	bl	801a340 <_printf_i>
 801d9a4:	e7eb      	b.n	801d97e <_svfiprintf_r+0x1c2>
 801d9a6:	bf00      	nop
 801d9a8:	080527fc 	.word	0x080527fc
 801d9ac:	08052806 	.word	0x08052806
 801d9b0:	08019df9 	.word	0x08019df9
 801d9b4:	0801d705 	.word	0x0801d705
 801d9b8:	08052802 	.word	0x08052802
 801d9bc:	00000000 	.word	0x00000000

0801d9c0 <nan>:
 801d9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d9c8 <nan+0x8>
 801d9c4:	4770      	bx	lr
 801d9c6:	bf00      	nop
 801d9c8:	00000000 	.word	0x00000000
 801d9cc:	7ff80000 	.word	0x7ff80000

0801d9d0 <_sbrk_r>:
 801d9d0:	b538      	push	{r3, r4, r5, lr}
 801d9d2:	4d06      	ldr	r5, [pc, #24]	; (801d9ec <_sbrk_r+0x1c>)
 801d9d4:	2300      	movs	r3, #0
 801d9d6:	4604      	mov	r4, r0
 801d9d8:	4608      	mov	r0, r1
 801d9da:	602b      	str	r3, [r5, #0]
 801d9dc:	f7e8 fa54 	bl	8005e88 <_sbrk>
 801d9e0:	1c43      	adds	r3, r0, #1
 801d9e2:	d102      	bne.n	801d9ea <_sbrk_r+0x1a>
 801d9e4:	682b      	ldr	r3, [r5, #0]
 801d9e6:	b103      	cbz	r3, 801d9ea <_sbrk_r+0x1a>
 801d9e8:	6023      	str	r3, [r4, #0]
 801d9ea:	bd38      	pop	{r3, r4, r5, pc}
 801d9ec:	20000a18 	.word	0x20000a18

0801d9f0 <strncmp>:
 801d9f0:	b510      	push	{r4, lr}
 801d9f2:	b17a      	cbz	r2, 801da14 <strncmp+0x24>
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	3901      	subs	r1, #1
 801d9f8:	1884      	adds	r4, r0, r2
 801d9fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d9fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801da02:	4290      	cmp	r0, r2
 801da04:	d101      	bne.n	801da0a <strncmp+0x1a>
 801da06:	42a3      	cmp	r3, r4
 801da08:	d101      	bne.n	801da0e <strncmp+0x1e>
 801da0a:	1a80      	subs	r0, r0, r2
 801da0c:	bd10      	pop	{r4, pc}
 801da0e:	2800      	cmp	r0, #0
 801da10:	d1f3      	bne.n	801d9fa <strncmp+0xa>
 801da12:	e7fa      	b.n	801da0a <strncmp+0x1a>
 801da14:	4610      	mov	r0, r2
 801da16:	e7f9      	b.n	801da0c <strncmp+0x1c>

0801da18 <__ascii_wctomb>:
 801da18:	b149      	cbz	r1, 801da2e <__ascii_wctomb+0x16>
 801da1a:	2aff      	cmp	r2, #255	; 0xff
 801da1c:	bf85      	ittet	hi
 801da1e:	238a      	movhi	r3, #138	; 0x8a
 801da20:	6003      	strhi	r3, [r0, #0]
 801da22:	700a      	strbls	r2, [r1, #0]
 801da24:	f04f 30ff 	movhi.w	r0, #4294967295
 801da28:	bf98      	it	ls
 801da2a:	2001      	movls	r0, #1
 801da2c:	4770      	bx	lr
 801da2e:	4608      	mov	r0, r1
 801da30:	4770      	bx	lr
	...

0801da34 <__assert_func>:
 801da34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da36:	4614      	mov	r4, r2
 801da38:	461a      	mov	r2, r3
 801da3a:	4b09      	ldr	r3, [pc, #36]	; (801da60 <__assert_func+0x2c>)
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	4605      	mov	r5, r0
 801da40:	68d8      	ldr	r0, [r3, #12]
 801da42:	b14c      	cbz	r4, 801da58 <__assert_func+0x24>
 801da44:	4b07      	ldr	r3, [pc, #28]	; (801da64 <__assert_func+0x30>)
 801da46:	9100      	str	r1, [sp, #0]
 801da48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da4c:	4906      	ldr	r1, [pc, #24]	; (801da68 <__assert_func+0x34>)
 801da4e:	462b      	mov	r3, r5
 801da50:	f000 f80e 	bl	801da70 <fiprintf>
 801da54:	f000 fa8c 	bl	801df70 <abort>
 801da58:	4b04      	ldr	r3, [pc, #16]	; (801da6c <__assert_func+0x38>)
 801da5a:	461c      	mov	r4, r3
 801da5c:	e7f3      	b.n	801da46 <__assert_func+0x12>
 801da5e:	bf00      	nop
 801da60:	20000064 	.word	0x20000064
 801da64:	0805280d 	.word	0x0805280d
 801da68:	0805281a 	.word	0x0805281a
 801da6c:	08052848 	.word	0x08052848

0801da70 <fiprintf>:
 801da70:	b40e      	push	{r1, r2, r3}
 801da72:	b503      	push	{r0, r1, lr}
 801da74:	4601      	mov	r1, r0
 801da76:	ab03      	add	r3, sp, #12
 801da78:	4805      	ldr	r0, [pc, #20]	; (801da90 <fiprintf+0x20>)
 801da7a:	f853 2b04 	ldr.w	r2, [r3], #4
 801da7e:	6800      	ldr	r0, [r0, #0]
 801da80:	9301      	str	r3, [sp, #4]
 801da82:	f000 f885 	bl	801db90 <_vfiprintf_r>
 801da86:	b002      	add	sp, #8
 801da88:	f85d eb04 	ldr.w	lr, [sp], #4
 801da8c:	b003      	add	sp, #12
 801da8e:	4770      	bx	lr
 801da90:	20000064 	.word	0x20000064

0801da94 <memmove>:
 801da94:	4288      	cmp	r0, r1
 801da96:	b510      	push	{r4, lr}
 801da98:	eb01 0402 	add.w	r4, r1, r2
 801da9c:	d902      	bls.n	801daa4 <memmove+0x10>
 801da9e:	4284      	cmp	r4, r0
 801daa0:	4623      	mov	r3, r4
 801daa2:	d807      	bhi.n	801dab4 <memmove+0x20>
 801daa4:	1e43      	subs	r3, r0, #1
 801daa6:	42a1      	cmp	r1, r4
 801daa8:	d008      	beq.n	801dabc <memmove+0x28>
 801daaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801daae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dab2:	e7f8      	b.n	801daa6 <memmove+0x12>
 801dab4:	4402      	add	r2, r0
 801dab6:	4601      	mov	r1, r0
 801dab8:	428a      	cmp	r2, r1
 801daba:	d100      	bne.n	801dabe <memmove+0x2a>
 801dabc:	bd10      	pop	{r4, pc}
 801dabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dac6:	e7f7      	b.n	801dab8 <memmove+0x24>

0801dac8 <__malloc_lock>:
 801dac8:	4801      	ldr	r0, [pc, #4]	; (801dad0 <__malloc_lock+0x8>)
 801daca:	f000 bc11 	b.w	801e2f0 <__retarget_lock_acquire_recursive>
 801dace:	bf00      	nop
 801dad0:	20000a1c 	.word	0x20000a1c

0801dad4 <__malloc_unlock>:
 801dad4:	4801      	ldr	r0, [pc, #4]	; (801dadc <__malloc_unlock+0x8>)
 801dad6:	f000 bc0c 	b.w	801e2f2 <__retarget_lock_release_recursive>
 801dada:	bf00      	nop
 801dadc:	20000a1c 	.word	0x20000a1c

0801dae0 <_realloc_r>:
 801dae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dae4:	4680      	mov	r8, r0
 801dae6:	4614      	mov	r4, r2
 801dae8:	460e      	mov	r6, r1
 801daea:	b921      	cbnz	r1, 801daf6 <_realloc_r+0x16>
 801daec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801daf0:	4611      	mov	r1, r2
 801daf2:	f7ff bd93 	b.w	801d61c <_malloc_r>
 801daf6:	b92a      	cbnz	r2, 801db04 <_realloc_r+0x24>
 801daf8:	f7ff fd24 	bl	801d544 <_free_r>
 801dafc:	4625      	mov	r5, r4
 801dafe:	4628      	mov	r0, r5
 801db00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db04:	f000 fc5c 	bl	801e3c0 <_malloc_usable_size_r>
 801db08:	4284      	cmp	r4, r0
 801db0a:	4607      	mov	r7, r0
 801db0c:	d802      	bhi.n	801db14 <_realloc_r+0x34>
 801db0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801db12:	d812      	bhi.n	801db3a <_realloc_r+0x5a>
 801db14:	4621      	mov	r1, r4
 801db16:	4640      	mov	r0, r8
 801db18:	f7ff fd80 	bl	801d61c <_malloc_r>
 801db1c:	4605      	mov	r5, r0
 801db1e:	2800      	cmp	r0, #0
 801db20:	d0ed      	beq.n	801dafe <_realloc_r+0x1e>
 801db22:	42bc      	cmp	r4, r7
 801db24:	4622      	mov	r2, r4
 801db26:	4631      	mov	r1, r6
 801db28:	bf28      	it	cs
 801db2a:	463a      	movcs	r2, r7
 801db2c:	f7ff f824 	bl	801cb78 <memcpy>
 801db30:	4631      	mov	r1, r6
 801db32:	4640      	mov	r0, r8
 801db34:	f7ff fd06 	bl	801d544 <_free_r>
 801db38:	e7e1      	b.n	801dafe <_realloc_r+0x1e>
 801db3a:	4635      	mov	r5, r6
 801db3c:	e7df      	b.n	801dafe <_realloc_r+0x1e>

0801db3e <__sfputc_r>:
 801db3e:	6893      	ldr	r3, [r2, #8]
 801db40:	3b01      	subs	r3, #1
 801db42:	2b00      	cmp	r3, #0
 801db44:	b410      	push	{r4}
 801db46:	6093      	str	r3, [r2, #8]
 801db48:	da08      	bge.n	801db5c <__sfputc_r+0x1e>
 801db4a:	6994      	ldr	r4, [r2, #24]
 801db4c:	42a3      	cmp	r3, r4
 801db4e:	db01      	blt.n	801db54 <__sfputc_r+0x16>
 801db50:	290a      	cmp	r1, #10
 801db52:	d103      	bne.n	801db5c <__sfputc_r+0x1e>
 801db54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db58:	f000 b94a 	b.w	801ddf0 <__swbuf_r>
 801db5c:	6813      	ldr	r3, [r2, #0]
 801db5e:	1c58      	adds	r0, r3, #1
 801db60:	6010      	str	r0, [r2, #0]
 801db62:	7019      	strb	r1, [r3, #0]
 801db64:	4608      	mov	r0, r1
 801db66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db6a:	4770      	bx	lr

0801db6c <__sfputs_r>:
 801db6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db6e:	4606      	mov	r6, r0
 801db70:	460f      	mov	r7, r1
 801db72:	4614      	mov	r4, r2
 801db74:	18d5      	adds	r5, r2, r3
 801db76:	42ac      	cmp	r4, r5
 801db78:	d101      	bne.n	801db7e <__sfputs_r+0x12>
 801db7a:	2000      	movs	r0, #0
 801db7c:	e007      	b.n	801db8e <__sfputs_r+0x22>
 801db7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db82:	463a      	mov	r2, r7
 801db84:	4630      	mov	r0, r6
 801db86:	f7ff ffda 	bl	801db3e <__sfputc_r>
 801db8a:	1c43      	adds	r3, r0, #1
 801db8c:	d1f3      	bne.n	801db76 <__sfputs_r+0xa>
 801db8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801db90 <_vfiprintf_r>:
 801db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db94:	460d      	mov	r5, r1
 801db96:	b09d      	sub	sp, #116	; 0x74
 801db98:	4614      	mov	r4, r2
 801db9a:	4698      	mov	r8, r3
 801db9c:	4606      	mov	r6, r0
 801db9e:	b118      	cbz	r0, 801dba8 <_vfiprintf_r+0x18>
 801dba0:	6983      	ldr	r3, [r0, #24]
 801dba2:	b90b      	cbnz	r3, 801dba8 <_vfiprintf_r+0x18>
 801dba4:	f000 fb06 	bl	801e1b4 <__sinit>
 801dba8:	4b89      	ldr	r3, [pc, #548]	; (801ddd0 <_vfiprintf_r+0x240>)
 801dbaa:	429d      	cmp	r5, r3
 801dbac:	d11b      	bne.n	801dbe6 <_vfiprintf_r+0x56>
 801dbae:	6875      	ldr	r5, [r6, #4]
 801dbb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dbb2:	07d9      	lsls	r1, r3, #31
 801dbb4:	d405      	bmi.n	801dbc2 <_vfiprintf_r+0x32>
 801dbb6:	89ab      	ldrh	r3, [r5, #12]
 801dbb8:	059a      	lsls	r2, r3, #22
 801dbba:	d402      	bmi.n	801dbc2 <_vfiprintf_r+0x32>
 801dbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dbbe:	f000 fb97 	bl	801e2f0 <__retarget_lock_acquire_recursive>
 801dbc2:	89ab      	ldrh	r3, [r5, #12]
 801dbc4:	071b      	lsls	r3, r3, #28
 801dbc6:	d501      	bpl.n	801dbcc <_vfiprintf_r+0x3c>
 801dbc8:	692b      	ldr	r3, [r5, #16]
 801dbca:	b9eb      	cbnz	r3, 801dc08 <_vfiprintf_r+0x78>
 801dbcc:	4629      	mov	r1, r5
 801dbce:	4630      	mov	r0, r6
 801dbd0:	f000 f960 	bl	801de94 <__swsetup_r>
 801dbd4:	b1c0      	cbz	r0, 801dc08 <_vfiprintf_r+0x78>
 801dbd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dbd8:	07dc      	lsls	r4, r3, #31
 801dbda:	d50e      	bpl.n	801dbfa <_vfiprintf_r+0x6a>
 801dbdc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbe0:	b01d      	add	sp, #116	; 0x74
 801dbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbe6:	4b7b      	ldr	r3, [pc, #492]	; (801ddd4 <_vfiprintf_r+0x244>)
 801dbe8:	429d      	cmp	r5, r3
 801dbea:	d101      	bne.n	801dbf0 <_vfiprintf_r+0x60>
 801dbec:	68b5      	ldr	r5, [r6, #8]
 801dbee:	e7df      	b.n	801dbb0 <_vfiprintf_r+0x20>
 801dbf0:	4b79      	ldr	r3, [pc, #484]	; (801ddd8 <_vfiprintf_r+0x248>)
 801dbf2:	429d      	cmp	r5, r3
 801dbf4:	bf08      	it	eq
 801dbf6:	68f5      	ldreq	r5, [r6, #12]
 801dbf8:	e7da      	b.n	801dbb0 <_vfiprintf_r+0x20>
 801dbfa:	89ab      	ldrh	r3, [r5, #12]
 801dbfc:	0598      	lsls	r0, r3, #22
 801dbfe:	d4ed      	bmi.n	801dbdc <_vfiprintf_r+0x4c>
 801dc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc02:	f000 fb76 	bl	801e2f2 <__retarget_lock_release_recursive>
 801dc06:	e7e9      	b.n	801dbdc <_vfiprintf_r+0x4c>
 801dc08:	2300      	movs	r3, #0
 801dc0a:	9309      	str	r3, [sp, #36]	; 0x24
 801dc0c:	2320      	movs	r3, #32
 801dc0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dc12:	f8cd 800c 	str.w	r8, [sp, #12]
 801dc16:	2330      	movs	r3, #48	; 0x30
 801dc18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801dddc <_vfiprintf_r+0x24c>
 801dc1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dc20:	f04f 0901 	mov.w	r9, #1
 801dc24:	4623      	mov	r3, r4
 801dc26:	469a      	mov	sl, r3
 801dc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc2c:	b10a      	cbz	r2, 801dc32 <_vfiprintf_r+0xa2>
 801dc2e:	2a25      	cmp	r2, #37	; 0x25
 801dc30:	d1f9      	bne.n	801dc26 <_vfiprintf_r+0x96>
 801dc32:	ebba 0b04 	subs.w	fp, sl, r4
 801dc36:	d00b      	beq.n	801dc50 <_vfiprintf_r+0xc0>
 801dc38:	465b      	mov	r3, fp
 801dc3a:	4622      	mov	r2, r4
 801dc3c:	4629      	mov	r1, r5
 801dc3e:	4630      	mov	r0, r6
 801dc40:	f7ff ff94 	bl	801db6c <__sfputs_r>
 801dc44:	3001      	adds	r0, #1
 801dc46:	f000 80aa 	beq.w	801dd9e <_vfiprintf_r+0x20e>
 801dc4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc4c:	445a      	add	r2, fp
 801dc4e:	9209      	str	r2, [sp, #36]	; 0x24
 801dc50:	f89a 3000 	ldrb.w	r3, [sl]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	f000 80a2 	beq.w	801dd9e <_vfiprintf_r+0x20e>
 801dc5a:	2300      	movs	r3, #0
 801dc5c:	f04f 32ff 	mov.w	r2, #4294967295
 801dc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc64:	f10a 0a01 	add.w	sl, sl, #1
 801dc68:	9304      	str	r3, [sp, #16]
 801dc6a:	9307      	str	r3, [sp, #28]
 801dc6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dc70:	931a      	str	r3, [sp, #104]	; 0x68
 801dc72:	4654      	mov	r4, sl
 801dc74:	2205      	movs	r2, #5
 801dc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc7a:	4858      	ldr	r0, [pc, #352]	; (801dddc <_vfiprintf_r+0x24c>)
 801dc7c:	f7fb f8b0 	bl	8018de0 <memchr>
 801dc80:	9a04      	ldr	r2, [sp, #16]
 801dc82:	b9d8      	cbnz	r0, 801dcbc <_vfiprintf_r+0x12c>
 801dc84:	06d1      	lsls	r1, r2, #27
 801dc86:	bf44      	itt	mi
 801dc88:	2320      	movmi	r3, #32
 801dc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc8e:	0713      	lsls	r3, r2, #28
 801dc90:	bf44      	itt	mi
 801dc92:	232b      	movmi	r3, #43	; 0x2b
 801dc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc98:	f89a 3000 	ldrb.w	r3, [sl]
 801dc9c:	2b2a      	cmp	r3, #42	; 0x2a
 801dc9e:	d015      	beq.n	801dccc <_vfiprintf_r+0x13c>
 801dca0:	9a07      	ldr	r2, [sp, #28]
 801dca2:	4654      	mov	r4, sl
 801dca4:	2000      	movs	r0, #0
 801dca6:	f04f 0c0a 	mov.w	ip, #10
 801dcaa:	4621      	mov	r1, r4
 801dcac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dcb0:	3b30      	subs	r3, #48	; 0x30
 801dcb2:	2b09      	cmp	r3, #9
 801dcb4:	d94e      	bls.n	801dd54 <_vfiprintf_r+0x1c4>
 801dcb6:	b1b0      	cbz	r0, 801dce6 <_vfiprintf_r+0x156>
 801dcb8:	9207      	str	r2, [sp, #28]
 801dcba:	e014      	b.n	801dce6 <_vfiprintf_r+0x156>
 801dcbc:	eba0 0308 	sub.w	r3, r0, r8
 801dcc0:	fa09 f303 	lsl.w	r3, r9, r3
 801dcc4:	4313      	orrs	r3, r2
 801dcc6:	9304      	str	r3, [sp, #16]
 801dcc8:	46a2      	mov	sl, r4
 801dcca:	e7d2      	b.n	801dc72 <_vfiprintf_r+0xe2>
 801dccc:	9b03      	ldr	r3, [sp, #12]
 801dcce:	1d19      	adds	r1, r3, #4
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	9103      	str	r1, [sp, #12]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	bfbb      	ittet	lt
 801dcd8:	425b      	neglt	r3, r3
 801dcda:	f042 0202 	orrlt.w	r2, r2, #2
 801dcde:	9307      	strge	r3, [sp, #28]
 801dce0:	9307      	strlt	r3, [sp, #28]
 801dce2:	bfb8      	it	lt
 801dce4:	9204      	strlt	r2, [sp, #16]
 801dce6:	7823      	ldrb	r3, [r4, #0]
 801dce8:	2b2e      	cmp	r3, #46	; 0x2e
 801dcea:	d10c      	bne.n	801dd06 <_vfiprintf_r+0x176>
 801dcec:	7863      	ldrb	r3, [r4, #1]
 801dcee:	2b2a      	cmp	r3, #42	; 0x2a
 801dcf0:	d135      	bne.n	801dd5e <_vfiprintf_r+0x1ce>
 801dcf2:	9b03      	ldr	r3, [sp, #12]
 801dcf4:	1d1a      	adds	r2, r3, #4
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	9203      	str	r2, [sp, #12]
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	bfb8      	it	lt
 801dcfe:	f04f 33ff 	movlt.w	r3, #4294967295
 801dd02:	3402      	adds	r4, #2
 801dd04:	9305      	str	r3, [sp, #20]
 801dd06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ddec <_vfiprintf_r+0x25c>
 801dd0a:	7821      	ldrb	r1, [r4, #0]
 801dd0c:	2203      	movs	r2, #3
 801dd0e:	4650      	mov	r0, sl
 801dd10:	f7fb f866 	bl	8018de0 <memchr>
 801dd14:	b140      	cbz	r0, 801dd28 <_vfiprintf_r+0x198>
 801dd16:	2340      	movs	r3, #64	; 0x40
 801dd18:	eba0 000a 	sub.w	r0, r0, sl
 801dd1c:	fa03 f000 	lsl.w	r0, r3, r0
 801dd20:	9b04      	ldr	r3, [sp, #16]
 801dd22:	4303      	orrs	r3, r0
 801dd24:	3401      	adds	r4, #1
 801dd26:	9304      	str	r3, [sp, #16]
 801dd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd2c:	482c      	ldr	r0, [pc, #176]	; (801dde0 <_vfiprintf_r+0x250>)
 801dd2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dd32:	2206      	movs	r2, #6
 801dd34:	f7fb f854 	bl	8018de0 <memchr>
 801dd38:	2800      	cmp	r0, #0
 801dd3a:	d03f      	beq.n	801ddbc <_vfiprintf_r+0x22c>
 801dd3c:	4b29      	ldr	r3, [pc, #164]	; (801dde4 <_vfiprintf_r+0x254>)
 801dd3e:	bb1b      	cbnz	r3, 801dd88 <_vfiprintf_r+0x1f8>
 801dd40:	9b03      	ldr	r3, [sp, #12]
 801dd42:	3307      	adds	r3, #7
 801dd44:	f023 0307 	bic.w	r3, r3, #7
 801dd48:	3308      	adds	r3, #8
 801dd4a:	9303      	str	r3, [sp, #12]
 801dd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd4e:	443b      	add	r3, r7
 801dd50:	9309      	str	r3, [sp, #36]	; 0x24
 801dd52:	e767      	b.n	801dc24 <_vfiprintf_r+0x94>
 801dd54:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd58:	460c      	mov	r4, r1
 801dd5a:	2001      	movs	r0, #1
 801dd5c:	e7a5      	b.n	801dcaa <_vfiprintf_r+0x11a>
 801dd5e:	2300      	movs	r3, #0
 801dd60:	3401      	adds	r4, #1
 801dd62:	9305      	str	r3, [sp, #20]
 801dd64:	4619      	mov	r1, r3
 801dd66:	f04f 0c0a 	mov.w	ip, #10
 801dd6a:	4620      	mov	r0, r4
 801dd6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd70:	3a30      	subs	r2, #48	; 0x30
 801dd72:	2a09      	cmp	r2, #9
 801dd74:	d903      	bls.n	801dd7e <_vfiprintf_r+0x1ee>
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d0c5      	beq.n	801dd06 <_vfiprintf_r+0x176>
 801dd7a:	9105      	str	r1, [sp, #20]
 801dd7c:	e7c3      	b.n	801dd06 <_vfiprintf_r+0x176>
 801dd7e:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd82:	4604      	mov	r4, r0
 801dd84:	2301      	movs	r3, #1
 801dd86:	e7f0      	b.n	801dd6a <_vfiprintf_r+0x1da>
 801dd88:	ab03      	add	r3, sp, #12
 801dd8a:	9300      	str	r3, [sp, #0]
 801dd8c:	462a      	mov	r2, r5
 801dd8e:	4b16      	ldr	r3, [pc, #88]	; (801dde8 <_vfiprintf_r+0x258>)
 801dd90:	a904      	add	r1, sp, #16
 801dd92:	4630      	mov	r0, r6
 801dd94:	f7fc f830 	bl	8019df8 <_printf_float>
 801dd98:	4607      	mov	r7, r0
 801dd9a:	1c78      	adds	r0, r7, #1
 801dd9c:	d1d6      	bne.n	801dd4c <_vfiprintf_r+0x1bc>
 801dd9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dda0:	07d9      	lsls	r1, r3, #31
 801dda2:	d405      	bmi.n	801ddb0 <_vfiprintf_r+0x220>
 801dda4:	89ab      	ldrh	r3, [r5, #12]
 801dda6:	059a      	lsls	r2, r3, #22
 801dda8:	d402      	bmi.n	801ddb0 <_vfiprintf_r+0x220>
 801ddaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddac:	f000 faa1 	bl	801e2f2 <__retarget_lock_release_recursive>
 801ddb0:	89ab      	ldrh	r3, [r5, #12]
 801ddb2:	065b      	lsls	r3, r3, #25
 801ddb4:	f53f af12 	bmi.w	801dbdc <_vfiprintf_r+0x4c>
 801ddb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ddba:	e711      	b.n	801dbe0 <_vfiprintf_r+0x50>
 801ddbc:	ab03      	add	r3, sp, #12
 801ddbe:	9300      	str	r3, [sp, #0]
 801ddc0:	462a      	mov	r2, r5
 801ddc2:	4b09      	ldr	r3, [pc, #36]	; (801dde8 <_vfiprintf_r+0x258>)
 801ddc4:	a904      	add	r1, sp, #16
 801ddc6:	4630      	mov	r0, r6
 801ddc8:	f7fc faba 	bl	801a340 <_printf_i>
 801ddcc:	e7e4      	b.n	801dd98 <_vfiprintf_r+0x208>
 801ddce:	bf00      	nop
 801ddd0:	0805286c 	.word	0x0805286c
 801ddd4:	0805288c 	.word	0x0805288c
 801ddd8:	0805284c 	.word	0x0805284c
 801dddc:	080527fc 	.word	0x080527fc
 801dde0:	08052806 	.word	0x08052806
 801dde4:	08019df9 	.word	0x08019df9
 801dde8:	0801db6d 	.word	0x0801db6d
 801ddec:	08052802 	.word	0x08052802

0801ddf0 <__swbuf_r>:
 801ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddf2:	460e      	mov	r6, r1
 801ddf4:	4614      	mov	r4, r2
 801ddf6:	4605      	mov	r5, r0
 801ddf8:	b118      	cbz	r0, 801de02 <__swbuf_r+0x12>
 801ddfa:	6983      	ldr	r3, [r0, #24]
 801ddfc:	b90b      	cbnz	r3, 801de02 <__swbuf_r+0x12>
 801ddfe:	f000 f9d9 	bl	801e1b4 <__sinit>
 801de02:	4b21      	ldr	r3, [pc, #132]	; (801de88 <__swbuf_r+0x98>)
 801de04:	429c      	cmp	r4, r3
 801de06:	d12b      	bne.n	801de60 <__swbuf_r+0x70>
 801de08:	686c      	ldr	r4, [r5, #4]
 801de0a:	69a3      	ldr	r3, [r4, #24]
 801de0c:	60a3      	str	r3, [r4, #8]
 801de0e:	89a3      	ldrh	r3, [r4, #12]
 801de10:	071a      	lsls	r2, r3, #28
 801de12:	d52f      	bpl.n	801de74 <__swbuf_r+0x84>
 801de14:	6923      	ldr	r3, [r4, #16]
 801de16:	b36b      	cbz	r3, 801de74 <__swbuf_r+0x84>
 801de18:	6923      	ldr	r3, [r4, #16]
 801de1a:	6820      	ldr	r0, [r4, #0]
 801de1c:	1ac0      	subs	r0, r0, r3
 801de1e:	6963      	ldr	r3, [r4, #20]
 801de20:	b2f6      	uxtb	r6, r6
 801de22:	4283      	cmp	r3, r0
 801de24:	4637      	mov	r7, r6
 801de26:	dc04      	bgt.n	801de32 <__swbuf_r+0x42>
 801de28:	4621      	mov	r1, r4
 801de2a:	4628      	mov	r0, r5
 801de2c:	f000 f92e 	bl	801e08c <_fflush_r>
 801de30:	bb30      	cbnz	r0, 801de80 <__swbuf_r+0x90>
 801de32:	68a3      	ldr	r3, [r4, #8]
 801de34:	3b01      	subs	r3, #1
 801de36:	60a3      	str	r3, [r4, #8]
 801de38:	6823      	ldr	r3, [r4, #0]
 801de3a:	1c5a      	adds	r2, r3, #1
 801de3c:	6022      	str	r2, [r4, #0]
 801de3e:	701e      	strb	r6, [r3, #0]
 801de40:	6963      	ldr	r3, [r4, #20]
 801de42:	3001      	adds	r0, #1
 801de44:	4283      	cmp	r3, r0
 801de46:	d004      	beq.n	801de52 <__swbuf_r+0x62>
 801de48:	89a3      	ldrh	r3, [r4, #12]
 801de4a:	07db      	lsls	r3, r3, #31
 801de4c:	d506      	bpl.n	801de5c <__swbuf_r+0x6c>
 801de4e:	2e0a      	cmp	r6, #10
 801de50:	d104      	bne.n	801de5c <__swbuf_r+0x6c>
 801de52:	4621      	mov	r1, r4
 801de54:	4628      	mov	r0, r5
 801de56:	f000 f919 	bl	801e08c <_fflush_r>
 801de5a:	b988      	cbnz	r0, 801de80 <__swbuf_r+0x90>
 801de5c:	4638      	mov	r0, r7
 801de5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de60:	4b0a      	ldr	r3, [pc, #40]	; (801de8c <__swbuf_r+0x9c>)
 801de62:	429c      	cmp	r4, r3
 801de64:	d101      	bne.n	801de6a <__swbuf_r+0x7a>
 801de66:	68ac      	ldr	r4, [r5, #8]
 801de68:	e7cf      	b.n	801de0a <__swbuf_r+0x1a>
 801de6a:	4b09      	ldr	r3, [pc, #36]	; (801de90 <__swbuf_r+0xa0>)
 801de6c:	429c      	cmp	r4, r3
 801de6e:	bf08      	it	eq
 801de70:	68ec      	ldreq	r4, [r5, #12]
 801de72:	e7ca      	b.n	801de0a <__swbuf_r+0x1a>
 801de74:	4621      	mov	r1, r4
 801de76:	4628      	mov	r0, r5
 801de78:	f000 f80c 	bl	801de94 <__swsetup_r>
 801de7c:	2800      	cmp	r0, #0
 801de7e:	d0cb      	beq.n	801de18 <__swbuf_r+0x28>
 801de80:	f04f 37ff 	mov.w	r7, #4294967295
 801de84:	e7ea      	b.n	801de5c <__swbuf_r+0x6c>
 801de86:	bf00      	nop
 801de88:	0805286c 	.word	0x0805286c
 801de8c:	0805288c 	.word	0x0805288c
 801de90:	0805284c 	.word	0x0805284c

0801de94 <__swsetup_r>:
 801de94:	4b32      	ldr	r3, [pc, #200]	; (801df60 <__swsetup_r+0xcc>)
 801de96:	b570      	push	{r4, r5, r6, lr}
 801de98:	681d      	ldr	r5, [r3, #0]
 801de9a:	4606      	mov	r6, r0
 801de9c:	460c      	mov	r4, r1
 801de9e:	b125      	cbz	r5, 801deaa <__swsetup_r+0x16>
 801dea0:	69ab      	ldr	r3, [r5, #24]
 801dea2:	b913      	cbnz	r3, 801deaa <__swsetup_r+0x16>
 801dea4:	4628      	mov	r0, r5
 801dea6:	f000 f985 	bl	801e1b4 <__sinit>
 801deaa:	4b2e      	ldr	r3, [pc, #184]	; (801df64 <__swsetup_r+0xd0>)
 801deac:	429c      	cmp	r4, r3
 801deae:	d10f      	bne.n	801ded0 <__swsetup_r+0x3c>
 801deb0:	686c      	ldr	r4, [r5, #4]
 801deb2:	89a3      	ldrh	r3, [r4, #12]
 801deb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801deb8:	0719      	lsls	r1, r3, #28
 801deba:	d42c      	bmi.n	801df16 <__swsetup_r+0x82>
 801debc:	06dd      	lsls	r5, r3, #27
 801debe:	d411      	bmi.n	801dee4 <__swsetup_r+0x50>
 801dec0:	2309      	movs	r3, #9
 801dec2:	6033      	str	r3, [r6, #0]
 801dec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dec8:	81a3      	strh	r3, [r4, #12]
 801deca:	f04f 30ff 	mov.w	r0, #4294967295
 801dece:	e03e      	b.n	801df4e <__swsetup_r+0xba>
 801ded0:	4b25      	ldr	r3, [pc, #148]	; (801df68 <__swsetup_r+0xd4>)
 801ded2:	429c      	cmp	r4, r3
 801ded4:	d101      	bne.n	801deda <__swsetup_r+0x46>
 801ded6:	68ac      	ldr	r4, [r5, #8]
 801ded8:	e7eb      	b.n	801deb2 <__swsetup_r+0x1e>
 801deda:	4b24      	ldr	r3, [pc, #144]	; (801df6c <__swsetup_r+0xd8>)
 801dedc:	429c      	cmp	r4, r3
 801dede:	bf08      	it	eq
 801dee0:	68ec      	ldreq	r4, [r5, #12]
 801dee2:	e7e6      	b.n	801deb2 <__swsetup_r+0x1e>
 801dee4:	0758      	lsls	r0, r3, #29
 801dee6:	d512      	bpl.n	801df0e <__swsetup_r+0x7a>
 801dee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801deea:	b141      	cbz	r1, 801defe <__swsetup_r+0x6a>
 801deec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801def0:	4299      	cmp	r1, r3
 801def2:	d002      	beq.n	801defa <__swsetup_r+0x66>
 801def4:	4630      	mov	r0, r6
 801def6:	f7ff fb25 	bl	801d544 <_free_r>
 801defa:	2300      	movs	r3, #0
 801defc:	6363      	str	r3, [r4, #52]	; 0x34
 801defe:	89a3      	ldrh	r3, [r4, #12]
 801df00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801df04:	81a3      	strh	r3, [r4, #12]
 801df06:	2300      	movs	r3, #0
 801df08:	6063      	str	r3, [r4, #4]
 801df0a:	6923      	ldr	r3, [r4, #16]
 801df0c:	6023      	str	r3, [r4, #0]
 801df0e:	89a3      	ldrh	r3, [r4, #12]
 801df10:	f043 0308 	orr.w	r3, r3, #8
 801df14:	81a3      	strh	r3, [r4, #12]
 801df16:	6923      	ldr	r3, [r4, #16]
 801df18:	b94b      	cbnz	r3, 801df2e <__swsetup_r+0x9a>
 801df1a:	89a3      	ldrh	r3, [r4, #12]
 801df1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801df20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801df24:	d003      	beq.n	801df2e <__swsetup_r+0x9a>
 801df26:	4621      	mov	r1, r4
 801df28:	4630      	mov	r0, r6
 801df2a:	f000 fa09 	bl	801e340 <__smakebuf_r>
 801df2e:	89a0      	ldrh	r0, [r4, #12]
 801df30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801df34:	f010 0301 	ands.w	r3, r0, #1
 801df38:	d00a      	beq.n	801df50 <__swsetup_r+0xbc>
 801df3a:	2300      	movs	r3, #0
 801df3c:	60a3      	str	r3, [r4, #8]
 801df3e:	6963      	ldr	r3, [r4, #20]
 801df40:	425b      	negs	r3, r3
 801df42:	61a3      	str	r3, [r4, #24]
 801df44:	6923      	ldr	r3, [r4, #16]
 801df46:	b943      	cbnz	r3, 801df5a <__swsetup_r+0xc6>
 801df48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801df4c:	d1ba      	bne.n	801dec4 <__swsetup_r+0x30>
 801df4e:	bd70      	pop	{r4, r5, r6, pc}
 801df50:	0781      	lsls	r1, r0, #30
 801df52:	bf58      	it	pl
 801df54:	6963      	ldrpl	r3, [r4, #20]
 801df56:	60a3      	str	r3, [r4, #8]
 801df58:	e7f4      	b.n	801df44 <__swsetup_r+0xb0>
 801df5a:	2000      	movs	r0, #0
 801df5c:	e7f7      	b.n	801df4e <__swsetup_r+0xba>
 801df5e:	bf00      	nop
 801df60:	20000064 	.word	0x20000064
 801df64:	0805286c 	.word	0x0805286c
 801df68:	0805288c 	.word	0x0805288c
 801df6c:	0805284c 	.word	0x0805284c

0801df70 <abort>:
 801df70:	b508      	push	{r3, lr}
 801df72:	2006      	movs	r0, #6
 801df74:	f000 fa54 	bl	801e420 <raise>
 801df78:	2001      	movs	r0, #1
 801df7a:	f7e7 fe9a 	bl	8005cb2 <_exit>
	...

0801df80 <__sflush_r>:
 801df80:	898a      	ldrh	r2, [r1, #12]
 801df82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df86:	4605      	mov	r5, r0
 801df88:	0710      	lsls	r0, r2, #28
 801df8a:	460c      	mov	r4, r1
 801df8c:	d458      	bmi.n	801e040 <__sflush_r+0xc0>
 801df8e:	684b      	ldr	r3, [r1, #4]
 801df90:	2b00      	cmp	r3, #0
 801df92:	dc05      	bgt.n	801dfa0 <__sflush_r+0x20>
 801df94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801df96:	2b00      	cmp	r3, #0
 801df98:	dc02      	bgt.n	801dfa0 <__sflush_r+0x20>
 801df9a:	2000      	movs	r0, #0
 801df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dfa2:	2e00      	cmp	r6, #0
 801dfa4:	d0f9      	beq.n	801df9a <__sflush_r+0x1a>
 801dfa6:	2300      	movs	r3, #0
 801dfa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dfac:	682f      	ldr	r7, [r5, #0]
 801dfae:	602b      	str	r3, [r5, #0]
 801dfb0:	d032      	beq.n	801e018 <__sflush_r+0x98>
 801dfb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dfb4:	89a3      	ldrh	r3, [r4, #12]
 801dfb6:	075a      	lsls	r2, r3, #29
 801dfb8:	d505      	bpl.n	801dfc6 <__sflush_r+0x46>
 801dfba:	6863      	ldr	r3, [r4, #4]
 801dfbc:	1ac0      	subs	r0, r0, r3
 801dfbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dfc0:	b10b      	cbz	r3, 801dfc6 <__sflush_r+0x46>
 801dfc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dfc4:	1ac0      	subs	r0, r0, r3
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	4602      	mov	r2, r0
 801dfca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dfcc:	6a21      	ldr	r1, [r4, #32]
 801dfce:	4628      	mov	r0, r5
 801dfd0:	47b0      	blx	r6
 801dfd2:	1c43      	adds	r3, r0, #1
 801dfd4:	89a3      	ldrh	r3, [r4, #12]
 801dfd6:	d106      	bne.n	801dfe6 <__sflush_r+0x66>
 801dfd8:	6829      	ldr	r1, [r5, #0]
 801dfda:	291d      	cmp	r1, #29
 801dfdc:	d82c      	bhi.n	801e038 <__sflush_r+0xb8>
 801dfde:	4a2a      	ldr	r2, [pc, #168]	; (801e088 <__sflush_r+0x108>)
 801dfe0:	40ca      	lsrs	r2, r1
 801dfe2:	07d6      	lsls	r6, r2, #31
 801dfe4:	d528      	bpl.n	801e038 <__sflush_r+0xb8>
 801dfe6:	2200      	movs	r2, #0
 801dfe8:	6062      	str	r2, [r4, #4]
 801dfea:	04d9      	lsls	r1, r3, #19
 801dfec:	6922      	ldr	r2, [r4, #16]
 801dfee:	6022      	str	r2, [r4, #0]
 801dff0:	d504      	bpl.n	801dffc <__sflush_r+0x7c>
 801dff2:	1c42      	adds	r2, r0, #1
 801dff4:	d101      	bne.n	801dffa <__sflush_r+0x7a>
 801dff6:	682b      	ldr	r3, [r5, #0]
 801dff8:	b903      	cbnz	r3, 801dffc <__sflush_r+0x7c>
 801dffa:	6560      	str	r0, [r4, #84]	; 0x54
 801dffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dffe:	602f      	str	r7, [r5, #0]
 801e000:	2900      	cmp	r1, #0
 801e002:	d0ca      	beq.n	801df9a <__sflush_r+0x1a>
 801e004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e008:	4299      	cmp	r1, r3
 801e00a:	d002      	beq.n	801e012 <__sflush_r+0x92>
 801e00c:	4628      	mov	r0, r5
 801e00e:	f7ff fa99 	bl	801d544 <_free_r>
 801e012:	2000      	movs	r0, #0
 801e014:	6360      	str	r0, [r4, #52]	; 0x34
 801e016:	e7c1      	b.n	801df9c <__sflush_r+0x1c>
 801e018:	6a21      	ldr	r1, [r4, #32]
 801e01a:	2301      	movs	r3, #1
 801e01c:	4628      	mov	r0, r5
 801e01e:	47b0      	blx	r6
 801e020:	1c41      	adds	r1, r0, #1
 801e022:	d1c7      	bne.n	801dfb4 <__sflush_r+0x34>
 801e024:	682b      	ldr	r3, [r5, #0]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d0c4      	beq.n	801dfb4 <__sflush_r+0x34>
 801e02a:	2b1d      	cmp	r3, #29
 801e02c:	d001      	beq.n	801e032 <__sflush_r+0xb2>
 801e02e:	2b16      	cmp	r3, #22
 801e030:	d101      	bne.n	801e036 <__sflush_r+0xb6>
 801e032:	602f      	str	r7, [r5, #0]
 801e034:	e7b1      	b.n	801df9a <__sflush_r+0x1a>
 801e036:	89a3      	ldrh	r3, [r4, #12]
 801e038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e03c:	81a3      	strh	r3, [r4, #12]
 801e03e:	e7ad      	b.n	801df9c <__sflush_r+0x1c>
 801e040:	690f      	ldr	r7, [r1, #16]
 801e042:	2f00      	cmp	r7, #0
 801e044:	d0a9      	beq.n	801df9a <__sflush_r+0x1a>
 801e046:	0793      	lsls	r3, r2, #30
 801e048:	680e      	ldr	r6, [r1, #0]
 801e04a:	bf08      	it	eq
 801e04c:	694b      	ldreq	r3, [r1, #20]
 801e04e:	600f      	str	r7, [r1, #0]
 801e050:	bf18      	it	ne
 801e052:	2300      	movne	r3, #0
 801e054:	eba6 0807 	sub.w	r8, r6, r7
 801e058:	608b      	str	r3, [r1, #8]
 801e05a:	f1b8 0f00 	cmp.w	r8, #0
 801e05e:	dd9c      	ble.n	801df9a <__sflush_r+0x1a>
 801e060:	6a21      	ldr	r1, [r4, #32]
 801e062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e064:	4643      	mov	r3, r8
 801e066:	463a      	mov	r2, r7
 801e068:	4628      	mov	r0, r5
 801e06a:	47b0      	blx	r6
 801e06c:	2800      	cmp	r0, #0
 801e06e:	dc06      	bgt.n	801e07e <__sflush_r+0xfe>
 801e070:	89a3      	ldrh	r3, [r4, #12]
 801e072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e076:	81a3      	strh	r3, [r4, #12]
 801e078:	f04f 30ff 	mov.w	r0, #4294967295
 801e07c:	e78e      	b.n	801df9c <__sflush_r+0x1c>
 801e07e:	4407      	add	r7, r0
 801e080:	eba8 0800 	sub.w	r8, r8, r0
 801e084:	e7e9      	b.n	801e05a <__sflush_r+0xda>
 801e086:	bf00      	nop
 801e088:	20400001 	.word	0x20400001

0801e08c <_fflush_r>:
 801e08c:	b538      	push	{r3, r4, r5, lr}
 801e08e:	690b      	ldr	r3, [r1, #16]
 801e090:	4605      	mov	r5, r0
 801e092:	460c      	mov	r4, r1
 801e094:	b913      	cbnz	r3, 801e09c <_fflush_r+0x10>
 801e096:	2500      	movs	r5, #0
 801e098:	4628      	mov	r0, r5
 801e09a:	bd38      	pop	{r3, r4, r5, pc}
 801e09c:	b118      	cbz	r0, 801e0a6 <_fflush_r+0x1a>
 801e09e:	6983      	ldr	r3, [r0, #24]
 801e0a0:	b90b      	cbnz	r3, 801e0a6 <_fflush_r+0x1a>
 801e0a2:	f000 f887 	bl	801e1b4 <__sinit>
 801e0a6:	4b14      	ldr	r3, [pc, #80]	; (801e0f8 <_fflush_r+0x6c>)
 801e0a8:	429c      	cmp	r4, r3
 801e0aa:	d11b      	bne.n	801e0e4 <_fflush_r+0x58>
 801e0ac:	686c      	ldr	r4, [r5, #4]
 801e0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d0ef      	beq.n	801e096 <_fflush_r+0xa>
 801e0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e0b8:	07d0      	lsls	r0, r2, #31
 801e0ba:	d404      	bmi.n	801e0c6 <_fflush_r+0x3a>
 801e0bc:	0599      	lsls	r1, r3, #22
 801e0be:	d402      	bmi.n	801e0c6 <_fflush_r+0x3a>
 801e0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0c2:	f000 f915 	bl	801e2f0 <__retarget_lock_acquire_recursive>
 801e0c6:	4628      	mov	r0, r5
 801e0c8:	4621      	mov	r1, r4
 801e0ca:	f7ff ff59 	bl	801df80 <__sflush_r>
 801e0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0d0:	07da      	lsls	r2, r3, #31
 801e0d2:	4605      	mov	r5, r0
 801e0d4:	d4e0      	bmi.n	801e098 <_fflush_r+0xc>
 801e0d6:	89a3      	ldrh	r3, [r4, #12]
 801e0d8:	059b      	lsls	r3, r3, #22
 801e0da:	d4dd      	bmi.n	801e098 <_fflush_r+0xc>
 801e0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0de:	f000 f908 	bl	801e2f2 <__retarget_lock_release_recursive>
 801e0e2:	e7d9      	b.n	801e098 <_fflush_r+0xc>
 801e0e4:	4b05      	ldr	r3, [pc, #20]	; (801e0fc <_fflush_r+0x70>)
 801e0e6:	429c      	cmp	r4, r3
 801e0e8:	d101      	bne.n	801e0ee <_fflush_r+0x62>
 801e0ea:	68ac      	ldr	r4, [r5, #8]
 801e0ec:	e7df      	b.n	801e0ae <_fflush_r+0x22>
 801e0ee:	4b04      	ldr	r3, [pc, #16]	; (801e100 <_fflush_r+0x74>)
 801e0f0:	429c      	cmp	r4, r3
 801e0f2:	bf08      	it	eq
 801e0f4:	68ec      	ldreq	r4, [r5, #12]
 801e0f6:	e7da      	b.n	801e0ae <_fflush_r+0x22>
 801e0f8:	0805286c 	.word	0x0805286c
 801e0fc:	0805288c 	.word	0x0805288c
 801e100:	0805284c 	.word	0x0805284c

0801e104 <std>:
 801e104:	2300      	movs	r3, #0
 801e106:	b510      	push	{r4, lr}
 801e108:	4604      	mov	r4, r0
 801e10a:	e9c0 3300 	strd	r3, r3, [r0]
 801e10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e112:	6083      	str	r3, [r0, #8]
 801e114:	8181      	strh	r1, [r0, #12]
 801e116:	6643      	str	r3, [r0, #100]	; 0x64
 801e118:	81c2      	strh	r2, [r0, #14]
 801e11a:	6183      	str	r3, [r0, #24]
 801e11c:	4619      	mov	r1, r3
 801e11e:	2208      	movs	r2, #8
 801e120:	305c      	adds	r0, #92	; 0x5c
 801e122:	f7fb fdc1 	bl	8019ca8 <memset>
 801e126:	4b05      	ldr	r3, [pc, #20]	; (801e13c <std+0x38>)
 801e128:	6263      	str	r3, [r4, #36]	; 0x24
 801e12a:	4b05      	ldr	r3, [pc, #20]	; (801e140 <std+0x3c>)
 801e12c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e12e:	4b05      	ldr	r3, [pc, #20]	; (801e144 <std+0x40>)
 801e130:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e132:	4b05      	ldr	r3, [pc, #20]	; (801e148 <std+0x44>)
 801e134:	6224      	str	r4, [r4, #32]
 801e136:	6323      	str	r3, [r4, #48]	; 0x30
 801e138:	bd10      	pop	{r4, pc}
 801e13a:	bf00      	nop
 801e13c:	0801e459 	.word	0x0801e459
 801e140:	0801e47b 	.word	0x0801e47b
 801e144:	0801e4b3 	.word	0x0801e4b3
 801e148:	0801e4d7 	.word	0x0801e4d7

0801e14c <_cleanup_r>:
 801e14c:	4901      	ldr	r1, [pc, #4]	; (801e154 <_cleanup_r+0x8>)
 801e14e:	f000 b8af 	b.w	801e2b0 <_fwalk_reent>
 801e152:	bf00      	nop
 801e154:	0801e08d 	.word	0x0801e08d

0801e158 <__sfmoreglue>:
 801e158:	b570      	push	{r4, r5, r6, lr}
 801e15a:	2268      	movs	r2, #104	; 0x68
 801e15c:	1e4d      	subs	r5, r1, #1
 801e15e:	4355      	muls	r5, r2
 801e160:	460e      	mov	r6, r1
 801e162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e166:	f7ff fa59 	bl	801d61c <_malloc_r>
 801e16a:	4604      	mov	r4, r0
 801e16c:	b140      	cbz	r0, 801e180 <__sfmoreglue+0x28>
 801e16e:	2100      	movs	r1, #0
 801e170:	e9c0 1600 	strd	r1, r6, [r0]
 801e174:	300c      	adds	r0, #12
 801e176:	60a0      	str	r0, [r4, #8]
 801e178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e17c:	f7fb fd94 	bl	8019ca8 <memset>
 801e180:	4620      	mov	r0, r4
 801e182:	bd70      	pop	{r4, r5, r6, pc}

0801e184 <__sfp_lock_acquire>:
 801e184:	4801      	ldr	r0, [pc, #4]	; (801e18c <__sfp_lock_acquire+0x8>)
 801e186:	f000 b8b3 	b.w	801e2f0 <__retarget_lock_acquire_recursive>
 801e18a:	bf00      	nop
 801e18c:	20000a1d 	.word	0x20000a1d

0801e190 <__sfp_lock_release>:
 801e190:	4801      	ldr	r0, [pc, #4]	; (801e198 <__sfp_lock_release+0x8>)
 801e192:	f000 b8ae 	b.w	801e2f2 <__retarget_lock_release_recursive>
 801e196:	bf00      	nop
 801e198:	20000a1d 	.word	0x20000a1d

0801e19c <__sinit_lock_acquire>:
 801e19c:	4801      	ldr	r0, [pc, #4]	; (801e1a4 <__sinit_lock_acquire+0x8>)
 801e19e:	f000 b8a7 	b.w	801e2f0 <__retarget_lock_acquire_recursive>
 801e1a2:	bf00      	nop
 801e1a4:	20000a1e 	.word	0x20000a1e

0801e1a8 <__sinit_lock_release>:
 801e1a8:	4801      	ldr	r0, [pc, #4]	; (801e1b0 <__sinit_lock_release+0x8>)
 801e1aa:	f000 b8a2 	b.w	801e2f2 <__retarget_lock_release_recursive>
 801e1ae:	bf00      	nop
 801e1b0:	20000a1e 	.word	0x20000a1e

0801e1b4 <__sinit>:
 801e1b4:	b510      	push	{r4, lr}
 801e1b6:	4604      	mov	r4, r0
 801e1b8:	f7ff fff0 	bl	801e19c <__sinit_lock_acquire>
 801e1bc:	69a3      	ldr	r3, [r4, #24]
 801e1be:	b11b      	cbz	r3, 801e1c8 <__sinit+0x14>
 801e1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1c4:	f7ff bff0 	b.w	801e1a8 <__sinit_lock_release>
 801e1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e1cc:	6523      	str	r3, [r4, #80]	; 0x50
 801e1ce:	4b13      	ldr	r3, [pc, #76]	; (801e21c <__sinit+0x68>)
 801e1d0:	4a13      	ldr	r2, [pc, #76]	; (801e220 <__sinit+0x6c>)
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801e1d6:	42a3      	cmp	r3, r4
 801e1d8:	bf04      	itt	eq
 801e1da:	2301      	moveq	r3, #1
 801e1dc:	61a3      	streq	r3, [r4, #24]
 801e1de:	4620      	mov	r0, r4
 801e1e0:	f000 f820 	bl	801e224 <__sfp>
 801e1e4:	6060      	str	r0, [r4, #4]
 801e1e6:	4620      	mov	r0, r4
 801e1e8:	f000 f81c 	bl	801e224 <__sfp>
 801e1ec:	60a0      	str	r0, [r4, #8]
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	f000 f818 	bl	801e224 <__sfp>
 801e1f4:	2200      	movs	r2, #0
 801e1f6:	60e0      	str	r0, [r4, #12]
 801e1f8:	2104      	movs	r1, #4
 801e1fa:	6860      	ldr	r0, [r4, #4]
 801e1fc:	f7ff ff82 	bl	801e104 <std>
 801e200:	68a0      	ldr	r0, [r4, #8]
 801e202:	2201      	movs	r2, #1
 801e204:	2109      	movs	r1, #9
 801e206:	f7ff ff7d 	bl	801e104 <std>
 801e20a:	68e0      	ldr	r0, [r4, #12]
 801e20c:	2202      	movs	r2, #2
 801e20e:	2112      	movs	r1, #18
 801e210:	f7ff ff78 	bl	801e104 <std>
 801e214:	2301      	movs	r3, #1
 801e216:	61a3      	str	r3, [r4, #24]
 801e218:	e7d2      	b.n	801e1c0 <__sinit+0xc>
 801e21a:	bf00      	nop
 801e21c:	08052408 	.word	0x08052408
 801e220:	0801e14d 	.word	0x0801e14d

0801e224 <__sfp>:
 801e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e226:	4607      	mov	r7, r0
 801e228:	f7ff ffac 	bl	801e184 <__sfp_lock_acquire>
 801e22c:	4b1e      	ldr	r3, [pc, #120]	; (801e2a8 <__sfp+0x84>)
 801e22e:	681e      	ldr	r6, [r3, #0]
 801e230:	69b3      	ldr	r3, [r6, #24]
 801e232:	b913      	cbnz	r3, 801e23a <__sfp+0x16>
 801e234:	4630      	mov	r0, r6
 801e236:	f7ff ffbd 	bl	801e1b4 <__sinit>
 801e23a:	3648      	adds	r6, #72	; 0x48
 801e23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e240:	3b01      	subs	r3, #1
 801e242:	d503      	bpl.n	801e24c <__sfp+0x28>
 801e244:	6833      	ldr	r3, [r6, #0]
 801e246:	b30b      	cbz	r3, 801e28c <__sfp+0x68>
 801e248:	6836      	ldr	r6, [r6, #0]
 801e24a:	e7f7      	b.n	801e23c <__sfp+0x18>
 801e24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e250:	b9d5      	cbnz	r5, 801e288 <__sfp+0x64>
 801e252:	4b16      	ldr	r3, [pc, #88]	; (801e2ac <__sfp+0x88>)
 801e254:	60e3      	str	r3, [r4, #12]
 801e256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e25a:	6665      	str	r5, [r4, #100]	; 0x64
 801e25c:	f000 f847 	bl	801e2ee <__retarget_lock_init_recursive>
 801e260:	f7ff ff96 	bl	801e190 <__sfp_lock_release>
 801e264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e26c:	6025      	str	r5, [r4, #0]
 801e26e:	61a5      	str	r5, [r4, #24]
 801e270:	2208      	movs	r2, #8
 801e272:	4629      	mov	r1, r5
 801e274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e278:	f7fb fd16 	bl	8019ca8 <memset>
 801e27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e284:	4620      	mov	r0, r4
 801e286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e288:	3468      	adds	r4, #104	; 0x68
 801e28a:	e7d9      	b.n	801e240 <__sfp+0x1c>
 801e28c:	2104      	movs	r1, #4
 801e28e:	4638      	mov	r0, r7
 801e290:	f7ff ff62 	bl	801e158 <__sfmoreglue>
 801e294:	4604      	mov	r4, r0
 801e296:	6030      	str	r0, [r6, #0]
 801e298:	2800      	cmp	r0, #0
 801e29a:	d1d5      	bne.n	801e248 <__sfp+0x24>
 801e29c:	f7ff ff78 	bl	801e190 <__sfp_lock_release>
 801e2a0:	230c      	movs	r3, #12
 801e2a2:	603b      	str	r3, [r7, #0]
 801e2a4:	e7ee      	b.n	801e284 <__sfp+0x60>
 801e2a6:	bf00      	nop
 801e2a8:	08052408 	.word	0x08052408
 801e2ac:	ffff0001 	.word	0xffff0001

0801e2b0 <_fwalk_reent>:
 801e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2b4:	4606      	mov	r6, r0
 801e2b6:	4688      	mov	r8, r1
 801e2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e2bc:	2700      	movs	r7, #0
 801e2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e2c2:	f1b9 0901 	subs.w	r9, r9, #1
 801e2c6:	d505      	bpl.n	801e2d4 <_fwalk_reent+0x24>
 801e2c8:	6824      	ldr	r4, [r4, #0]
 801e2ca:	2c00      	cmp	r4, #0
 801e2cc:	d1f7      	bne.n	801e2be <_fwalk_reent+0xe>
 801e2ce:	4638      	mov	r0, r7
 801e2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2d4:	89ab      	ldrh	r3, [r5, #12]
 801e2d6:	2b01      	cmp	r3, #1
 801e2d8:	d907      	bls.n	801e2ea <_fwalk_reent+0x3a>
 801e2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e2de:	3301      	adds	r3, #1
 801e2e0:	d003      	beq.n	801e2ea <_fwalk_reent+0x3a>
 801e2e2:	4629      	mov	r1, r5
 801e2e4:	4630      	mov	r0, r6
 801e2e6:	47c0      	blx	r8
 801e2e8:	4307      	orrs	r7, r0
 801e2ea:	3568      	adds	r5, #104	; 0x68
 801e2ec:	e7e9      	b.n	801e2c2 <_fwalk_reent+0x12>

0801e2ee <__retarget_lock_init_recursive>:
 801e2ee:	4770      	bx	lr

0801e2f0 <__retarget_lock_acquire_recursive>:
 801e2f0:	4770      	bx	lr

0801e2f2 <__retarget_lock_release_recursive>:
 801e2f2:	4770      	bx	lr

0801e2f4 <__swhatbuf_r>:
 801e2f4:	b570      	push	{r4, r5, r6, lr}
 801e2f6:	460e      	mov	r6, r1
 801e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2fc:	2900      	cmp	r1, #0
 801e2fe:	b096      	sub	sp, #88	; 0x58
 801e300:	4614      	mov	r4, r2
 801e302:	461d      	mov	r5, r3
 801e304:	da08      	bge.n	801e318 <__swhatbuf_r+0x24>
 801e306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e30a:	2200      	movs	r2, #0
 801e30c:	602a      	str	r2, [r5, #0]
 801e30e:	061a      	lsls	r2, r3, #24
 801e310:	d410      	bmi.n	801e334 <__swhatbuf_r+0x40>
 801e312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e316:	e00e      	b.n	801e336 <__swhatbuf_r+0x42>
 801e318:	466a      	mov	r2, sp
 801e31a:	f000 f903 	bl	801e524 <_fstat_r>
 801e31e:	2800      	cmp	r0, #0
 801e320:	dbf1      	blt.n	801e306 <__swhatbuf_r+0x12>
 801e322:	9a01      	ldr	r2, [sp, #4]
 801e324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e32c:	425a      	negs	r2, r3
 801e32e:	415a      	adcs	r2, r3
 801e330:	602a      	str	r2, [r5, #0]
 801e332:	e7ee      	b.n	801e312 <__swhatbuf_r+0x1e>
 801e334:	2340      	movs	r3, #64	; 0x40
 801e336:	2000      	movs	r0, #0
 801e338:	6023      	str	r3, [r4, #0]
 801e33a:	b016      	add	sp, #88	; 0x58
 801e33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e340 <__smakebuf_r>:
 801e340:	898b      	ldrh	r3, [r1, #12]
 801e342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e344:	079d      	lsls	r5, r3, #30
 801e346:	4606      	mov	r6, r0
 801e348:	460c      	mov	r4, r1
 801e34a:	d507      	bpl.n	801e35c <__smakebuf_r+0x1c>
 801e34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e350:	6023      	str	r3, [r4, #0]
 801e352:	6123      	str	r3, [r4, #16]
 801e354:	2301      	movs	r3, #1
 801e356:	6163      	str	r3, [r4, #20]
 801e358:	b002      	add	sp, #8
 801e35a:	bd70      	pop	{r4, r5, r6, pc}
 801e35c:	ab01      	add	r3, sp, #4
 801e35e:	466a      	mov	r2, sp
 801e360:	f7ff ffc8 	bl	801e2f4 <__swhatbuf_r>
 801e364:	9900      	ldr	r1, [sp, #0]
 801e366:	4605      	mov	r5, r0
 801e368:	4630      	mov	r0, r6
 801e36a:	f7ff f957 	bl	801d61c <_malloc_r>
 801e36e:	b948      	cbnz	r0, 801e384 <__smakebuf_r+0x44>
 801e370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e374:	059a      	lsls	r2, r3, #22
 801e376:	d4ef      	bmi.n	801e358 <__smakebuf_r+0x18>
 801e378:	f023 0303 	bic.w	r3, r3, #3
 801e37c:	f043 0302 	orr.w	r3, r3, #2
 801e380:	81a3      	strh	r3, [r4, #12]
 801e382:	e7e3      	b.n	801e34c <__smakebuf_r+0xc>
 801e384:	4b0d      	ldr	r3, [pc, #52]	; (801e3bc <__smakebuf_r+0x7c>)
 801e386:	62b3      	str	r3, [r6, #40]	; 0x28
 801e388:	89a3      	ldrh	r3, [r4, #12]
 801e38a:	6020      	str	r0, [r4, #0]
 801e38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e390:	81a3      	strh	r3, [r4, #12]
 801e392:	9b00      	ldr	r3, [sp, #0]
 801e394:	6163      	str	r3, [r4, #20]
 801e396:	9b01      	ldr	r3, [sp, #4]
 801e398:	6120      	str	r0, [r4, #16]
 801e39a:	b15b      	cbz	r3, 801e3b4 <__smakebuf_r+0x74>
 801e39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e3a0:	4630      	mov	r0, r6
 801e3a2:	f000 f8d1 	bl	801e548 <_isatty_r>
 801e3a6:	b128      	cbz	r0, 801e3b4 <__smakebuf_r+0x74>
 801e3a8:	89a3      	ldrh	r3, [r4, #12]
 801e3aa:	f023 0303 	bic.w	r3, r3, #3
 801e3ae:	f043 0301 	orr.w	r3, r3, #1
 801e3b2:	81a3      	strh	r3, [r4, #12]
 801e3b4:	89a0      	ldrh	r0, [r4, #12]
 801e3b6:	4305      	orrs	r5, r0
 801e3b8:	81a5      	strh	r5, [r4, #12]
 801e3ba:	e7cd      	b.n	801e358 <__smakebuf_r+0x18>
 801e3bc:	0801e14d 	.word	0x0801e14d

0801e3c0 <_malloc_usable_size_r>:
 801e3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e3c4:	1f18      	subs	r0, r3, #4
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	bfbc      	itt	lt
 801e3ca:	580b      	ldrlt	r3, [r1, r0]
 801e3cc:	18c0      	addlt	r0, r0, r3
 801e3ce:	4770      	bx	lr

0801e3d0 <_raise_r>:
 801e3d0:	291f      	cmp	r1, #31
 801e3d2:	b538      	push	{r3, r4, r5, lr}
 801e3d4:	4604      	mov	r4, r0
 801e3d6:	460d      	mov	r5, r1
 801e3d8:	d904      	bls.n	801e3e4 <_raise_r+0x14>
 801e3da:	2316      	movs	r3, #22
 801e3dc:	6003      	str	r3, [r0, #0]
 801e3de:	f04f 30ff 	mov.w	r0, #4294967295
 801e3e2:	bd38      	pop	{r3, r4, r5, pc}
 801e3e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e3e6:	b112      	cbz	r2, 801e3ee <_raise_r+0x1e>
 801e3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e3ec:	b94b      	cbnz	r3, 801e402 <_raise_r+0x32>
 801e3ee:	4620      	mov	r0, r4
 801e3f0:	f000 f830 	bl	801e454 <_getpid_r>
 801e3f4:	462a      	mov	r2, r5
 801e3f6:	4601      	mov	r1, r0
 801e3f8:	4620      	mov	r0, r4
 801e3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e3fe:	f000 b817 	b.w	801e430 <_kill_r>
 801e402:	2b01      	cmp	r3, #1
 801e404:	d00a      	beq.n	801e41c <_raise_r+0x4c>
 801e406:	1c59      	adds	r1, r3, #1
 801e408:	d103      	bne.n	801e412 <_raise_r+0x42>
 801e40a:	2316      	movs	r3, #22
 801e40c:	6003      	str	r3, [r0, #0]
 801e40e:	2001      	movs	r0, #1
 801e410:	e7e7      	b.n	801e3e2 <_raise_r+0x12>
 801e412:	2400      	movs	r4, #0
 801e414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e418:	4628      	mov	r0, r5
 801e41a:	4798      	blx	r3
 801e41c:	2000      	movs	r0, #0
 801e41e:	e7e0      	b.n	801e3e2 <_raise_r+0x12>

0801e420 <raise>:
 801e420:	4b02      	ldr	r3, [pc, #8]	; (801e42c <raise+0xc>)
 801e422:	4601      	mov	r1, r0
 801e424:	6818      	ldr	r0, [r3, #0]
 801e426:	f7ff bfd3 	b.w	801e3d0 <_raise_r>
 801e42a:	bf00      	nop
 801e42c:	20000064 	.word	0x20000064

0801e430 <_kill_r>:
 801e430:	b538      	push	{r3, r4, r5, lr}
 801e432:	4d07      	ldr	r5, [pc, #28]	; (801e450 <_kill_r+0x20>)
 801e434:	2300      	movs	r3, #0
 801e436:	4604      	mov	r4, r0
 801e438:	4608      	mov	r0, r1
 801e43a:	4611      	mov	r1, r2
 801e43c:	602b      	str	r3, [r5, #0]
 801e43e:	f7e7 fc28 	bl	8005c92 <_kill>
 801e442:	1c43      	adds	r3, r0, #1
 801e444:	d102      	bne.n	801e44c <_kill_r+0x1c>
 801e446:	682b      	ldr	r3, [r5, #0]
 801e448:	b103      	cbz	r3, 801e44c <_kill_r+0x1c>
 801e44a:	6023      	str	r3, [r4, #0]
 801e44c:	bd38      	pop	{r3, r4, r5, pc}
 801e44e:	bf00      	nop
 801e450:	20000a18 	.word	0x20000a18

0801e454 <_getpid_r>:
 801e454:	f7e7 bc15 	b.w	8005c82 <_getpid>

0801e458 <__sread>:
 801e458:	b510      	push	{r4, lr}
 801e45a:	460c      	mov	r4, r1
 801e45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e460:	f000 f894 	bl	801e58c <_read_r>
 801e464:	2800      	cmp	r0, #0
 801e466:	bfab      	itete	ge
 801e468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e46a:	89a3      	ldrhlt	r3, [r4, #12]
 801e46c:	181b      	addge	r3, r3, r0
 801e46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e472:	bfac      	ite	ge
 801e474:	6563      	strge	r3, [r4, #84]	; 0x54
 801e476:	81a3      	strhlt	r3, [r4, #12]
 801e478:	bd10      	pop	{r4, pc}

0801e47a <__swrite>:
 801e47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e47e:	461f      	mov	r7, r3
 801e480:	898b      	ldrh	r3, [r1, #12]
 801e482:	05db      	lsls	r3, r3, #23
 801e484:	4605      	mov	r5, r0
 801e486:	460c      	mov	r4, r1
 801e488:	4616      	mov	r6, r2
 801e48a:	d505      	bpl.n	801e498 <__swrite+0x1e>
 801e48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e490:	2302      	movs	r3, #2
 801e492:	2200      	movs	r2, #0
 801e494:	f000 f868 	bl	801e568 <_lseek_r>
 801e498:	89a3      	ldrh	r3, [r4, #12]
 801e49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e4a2:	81a3      	strh	r3, [r4, #12]
 801e4a4:	4632      	mov	r2, r6
 801e4a6:	463b      	mov	r3, r7
 801e4a8:	4628      	mov	r0, r5
 801e4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e4ae:	f000 b817 	b.w	801e4e0 <_write_r>

0801e4b2 <__sseek>:
 801e4b2:	b510      	push	{r4, lr}
 801e4b4:	460c      	mov	r4, r1
 801e4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4ba:	f000 f855 	bl	801e568 <_lseek_r>
 801e4be:	1c43      	adds	r3, r0, #1
 801e4c0:	89a3      	ldrh	r3, [r4, #12]
 801e4c2:	bf15      	itete	ne
 801e4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e4ce:	81a3      	strheq	r3, [r4, #12]
 801e4d0:	bf18      	it	ne
 801e4d2:	81a3      	strhne	r3, [r4, #12]
 801e4d4:	bd10      	pop	{r4, pc}

0801e4d6 <__sclose>:
 801e4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4da:	f000 b813 	b.w	801e504 <_close_r>
	...

0801e4e0 <_write_r>:
 801e4e0:	b538      	push	{r3, r4, r5, lr}
 801e4e2:	4d07      	ldr	r5, [pc, #28]	; (801e500 <_write_r+0x20>)
 801e4e4:	4604      	mov	r4, r0
 801e4e6:	4608      	mov	r0, r1
 801e4e8:	4611      	mov	r1, r2
 801e4ea:	2200      	movs	r2, #0
 801e4ec:	602a      	str	r2, [r5, #0]
 801e4ee:	461a      	mov	r2, r3
 801e4f0:	f7e7 fc06 	bl	8005d00 <_write>
 801e4f4:	1c43      	adds	r3, r0, #1
 801e4f6:	d102      	bne.n	801e4fe <_write_r+0x1e>
 801e4f8:	682b      	ldr	r3, [r5, #0]
 801e4fa:	b103      	cbz	r3, 801e4fe <_write_r+0x1e>
 801e4fc:	6023      	str	r3, [r4, #0]
 801e4fe:	bd38      	pop	{r3, r4, r5, pc}
 801e500:	20000a18 	.word	0x20000a18

0801e504 <_close_r>:
 801e504:	b538      	push	{r3, r4, r5, lr}
 801e506:	4d06      	ldr	r5, [pc, #24]	; (801e520 <_close_r+0x1c>)
 801e508:	2300      	movs	r3, #0
 801e50a:	4604      	mov	r4, r0
 801e50c:	4608      	mov	r0, r1
 801e50e:	602b      	str	r3, [r5, #0]
 801e510:	f7e7 fc12 	bl	8005d38 <_close>
 801e514:	1c43      	adds	r3, r0, #1
 801e516:	d102      	bne.n	801e51e <_close_r+0x1a>
 801e518:	682b      	ldr	r3, [r5, #0]
 801e51a:	b103      	cbz	r3, 801e51e <_close_r+0x1a>
 801e51c:	6023      	str	r3, [r4, #0]
 801e51e:	bd38      	pop	{r3, r4, r5, pc}
 801e520:	20000a18 	.word	0x20000a18

0801e524 <_fstat_r>:
 801e524:	b538      	push	{r3, r4, r5, lr}
 801e526:	4d07      	ldr	r5, [pc, #28]	; (801e544 <_fstat_r+0x20>)
 801e528:	2300      	movs	r3, #0
 801e52a:	4604      	mov	r4, r0
 801e52c:	4608      	mov	r0, r1
 801e52e:	4611      	mov	r1, r2
 801e530:	602b      	str	r3, [r5, #0]
 801e532:	f7e7 fc0d 	bl	8005d50 <_fstat>
 801e536:	1c43      	adds	r3, r0, #1
 801e538:	d102      	bne.n	801e540 <_fstat_r+0x1c>
 801e53a:	682b      	ldr	r3, [r5, #0]
 801e53c:	b103      	cbz	r3, 801e540 <_fstat_r+0x1c>
 801e53e:	6023      	str	r3, [r4, #0]
 801e540:	bd38      	pop	{r3, r4, r5, pc}
 801e542:	bf00      	nop
 801e544:	20000a18 	.word	0x20000a18

0801e548 <_isatty_r>:
 801e548:	b538      	push	{r3, r4, r5, lr}
 801e54a:	4d06      	ldr	r5, [pc, #24]	; (801e564 <_isatty_r+0x1c>)
 801e54c:	2300      	movs	r3, #0
 801e54e:	4604      	mov	r4, r0
 801e550:	4608      	mov	r0, r1
 801e552:	602b      	str	r3, [r5, #0]
 801e554:	f7e7 fc0c 	bl	8005d70 <_isatty>
 801e558:	1c43      	adds	r3, r0, #1
 801e55a:	d102      	bne.n	801e562 <_isatty_r+0x1a>
 801e55c:	682b      	ldr	r3, [r5, #0]
 801e55e:	b103      	cbz	r3, 801e562 <_isatty_r+0x1a>
 801e560:	6023      	str	r3, [r4, #0]
 801e562:	bd38      	pop	{r3, r4, r5, pc}
 801e564:	20000a18 	.word	0x20000a18

0801e568 <_lseek_r>:
 801e568:	b538      	push	{r3, r4, r5, lr}
 801e56a:	4d07      	ldr	r5, [pc, #28]	; (801e588 <_lseek_r+0x20>)
 801e56c:	4604      	mov	r4, r0
 801e56e:	4608      	mov	r0, r1
 801e570:	4611      	mov	r1, r2
 801e572:	2200      	movs	r2, #0
 801e574:	602a      	str	r2, [r5, #0]
 801e576:	461a      	mov	r2, r3
 801e578:	f7e7 fc05 	bl	8005d86 <_lseek>
 801e57c:	1c43      	adds	r3, r0, #1
 801e57e:	d102      	bne.n	801e586 <_lseek_r+0x1e>
 801e580:	682b      	ldr	r3, [r5, #0]
 801e582:	b103      	cbz	r3, 801e586 <_lseek_r+0x1e>
 801e584:	6023      	str	r3, [r4, #0]
 801e586:	bd38      	pop	{r3, r4, r5, pc}
 801e588:	20000a18 	.word	0x20000a18

0801e58c <_read_r>:
 801e58c:	b538      	push	{r3, r4, r5, lr}
 801e58e:	4d07      	ldr	r5, [pc, #28]	; (801e5ac <_read_r+0x20>)
 801e590:	4604      	mov	r4, r0
 801e592:	4608      	mov	r0, r1
 801e594:	4611      	mov	r1, r2
 801e596:	2200      	movs	r2, #0
 801e598:	602a      	str	r2, [r5, #0]
 801e59a:	461a      	mov	r2, r3
 801e59c:	f7e7 fb93 	bl	8005cc6 <_read>
 801e5a0:	1c43      	adds	r3, r0, #1
 801e5a2:	d102      	bne.n	801e5aa <_read_r+0x1e>
 801e5a4:	682b      	ldr	r3, [r5, #0]
 801e5a6:	b103      	cbz	r3, 801e5aa <_read_r+0x1e>
 801e5a8:	6023      	str	r3, [r4, #0]
 801e5aa:	bd38      	pop	{r3, r4, r5, pc}
 801e5ac:	20000a18 	.word	0x20000a18

0801e5b0 <memcmp>:
 801e5b0:	b510      	push	{r4, lr}
 801e5b2:	3901      	subs	r1, #1
 801e5b4:	4402      	add	r2, r0
 801e5b6:	4290      	cmp	r0, r2
 801e5b8:	d101      	bne.n	801e5be <memcmp+0xe>
 801e5ba:	2000      	movs	r0, #0
 801e5bc:	e005      	b.n	801e5ca <memcmp+0x1a>
 801e5be:	7803      	ldrb	r3, [r0, #0]
 801e5c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e5c4:	42a3      	cmp	r3, r4
 801e5c6:	d001      	beq.n	801e5cc <memcmp+0x1c>
 801e5c8:	1b18      	subs	r0, r3, r4
 801e5ca:	bd10      	pop	{r4, pc}
 801e5cc:	3001      	adds	r0, #1
 801e5ce:	e7f2      	b.n	801e5b6 <memcmp+0x6>

0801e5d0 <floor>:
 801e5d0:	ec51 0b10 	vmov	r0, r1, d0
 801e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e5dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e5e0:	2e13      	cmp	r6, #19
 801e5e2:	ee10 5a10 	vmov	r5, s0
 801e5e6:	ee10 8a10 	vmov	r8, s0
 801e5ea:	460c      	mov	r4, r1
 801e5ec:	dc32      	bgt.n	801e654 <floor+0x84>
 801e5ee:	2e00      	cmp	r6, #0
 801e5f0:	da14      	bge.n	801e61c <floor+0x4c>
 801e5f2:	a333      	add	r3, pc, #204	; (adr r3, 801e6c0 <floor+0xf0>)
 801e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f8:	f7fa fc48 	bl	8018e8c <__adddf3>
 801e5fc:	2200      	movs	r2, #0
 801e5fe:	2300      	movs	r3, #0
 801e600:	f7fb f88a 	bl	8019718 <__aeabi_dcmpgt>
 801e604:	b138      	cbz	r0, 801e616 <floor+0x46>
 801e606:	2c00      	cmp	r4, #0
 801e608:	da57      	bge.n	801e6ba <floor+0xea>
 801e60a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e60e:	431d      	orrs	r5, r3
 801e610:	d001      	beq.n	801e616 <floor+0x46>
 801e612:	4c2d      	ldr	r4, [pc, #180]	; (801e6c8 <floor+0xf8>)
 801e614:	2500      	movs	r5, #0
 801e616:	4621      	mov	r1, r4
 801e618:	4628      	mov	r0, r5
 801e61a:	e025      	b.n	801e668 <floor+0x98>
 801e61c:	4f2b      	ldr	r7, [pc, #172]	; (801e6cc <floor+0xfc>)
 801e61e:	4137      	asrs	r7, r6
 801e620:	ea01 0307 	and.w	r3, r1, r7
 801e624:	4303      	orrs	r3, r0
 801e626:	d01f      	beq.n	801e668 <floor+0x98>
 801e628:	a325      	add	r3, pc, #148	; (adr r3, 801e6c0 <floor+0xf0>)
 801e62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62e:	f7fa fc2d 	bl	8018e8c <__adddf3>
 801e632:	2200      	movs	r2, #0
 801e634:	2300      	movs	r3, #0
 801e636:	f7fb f86f 	bl	8019718 <__aeabi_dcmpgt>
 801e63a:	2800      	cmp	r0, #0
 801e63c:	d0eb      	beq.n	801e616 <floor+0x46>
 801e63e:	2c00      	cmp	r4, #0
 801e640:	bfbe      	ittt	lt
 801e642:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e646:	fa43 f606 	asrlt.w	r6, r3, r6
 801e64a:	19a4      	addlt	r4, r4, r6
 801e64c:	ea24 0407 	bic.w	r4, r4, r7
 801e650:	2500      	movs	r5, #0
 801e652:	e7e0      	b.n	801e616 <floor+0x46>
 801e654:	2e33      	cmp	r6, #51	; 0x33
 801e656:	dd0b      	ble.n	801e670 <floor+0xa0>
 801e658:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e65c:	d104      	bne.n	801e668 <floor+0x98>
 801e65e:	ee10 2a10 	vmov	r2, s0
 801e662:	460b      	mov	r3, r1
 801e664:	f7fa fc12 	bl	8018e8c <__adddf3>
 801e668:	ec41 0b10 	vmov	d0, r0, r1
 801e66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e670:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e674:	f04f 33ff 	mov.w	r3, #4294967295
 801e678:	fa23 f707 	lsr.w	r7, r3, r7
 801e67c:	4207      	tst	r7, r0
 801e67e:	d0f3      	beq.n	801e668 <floor+0x98>
 801e680:	a30f      	add	r3, pc, #60	; (adr r3, 801e6c0 <floor+0xf0>)
 801e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e686:	f7fa fc01 	bl	8018e8c <__adddf3>
 801e68a:	2200      	movs	r2, #0
 801e68c:	2300      	movs	r3, #0
 801e68e:	f7fb f843 	bl	8019718 <__aeabi_dcmpgt>
 801e692:	2800      	cmp	r0, #0
 801e694:	d0bf      	beq.n	801e616 <floor+0x46>
 801e696:	2c00      	cmp	r4, #0
 801e698:	da02      	bge.n	801e6a0 <floor+0xd0>
 801e69a:	2e14      	cmp	r6, #20
 801e69c:	d103      	bne.n	801e6a6 <floor+0xd6>
 801e69e:	3401      	adds	r4, #1
 801e6a0:	ea25 0507 	bic.w	r5, r5, r7
 801e6a4:	e7b7      	b.n	801e616 <floor+0x46>
 801e6a6:	2301      	movs	r3, #1
 801e6a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e6ac:	fa03 f606 	lsl.w	r6, r3, r6
 801e6b0:	4435      	add	r5, r6
 801e6b2:	4545      	cmp	r5, r8
 801e6b4:	bf38      	it	cc
 801e6b6:	18e4      	addcc	r4, r4, r3
 801e6b8:	e7f2      	b.n	801e6a0 <floor+0xd0>
 801e6ba:	2500      	movs	r5, #0
 801e6bc:	462c      	mov	r4, r5
 801e6be:	e7aa      	b.n	801e616 <floor+0x46>
 801e6c0:	8800759c 	.word	0x8800759c
 801e6c4:	7e37e43c 	.word	0x7e37e43c
 801e6c8:	bff00000 	.word	0xbff00000
 801e6cc:	000fffff 	.word	0x000fffff

0801e6d0 <pow>:
 801e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6d2:	ed2d 8b02 	vpush	{d8}
 801e6d6:	eeb0 8a40 	vmov.f32	s16, s0
 801e6da:	eef0 8a60 	vmov.f32	s17, s1
 801e6de:	ec55 4b11 	vmov	r4, r5, d1
 801e6e2:	f000 f865 	bl	801e7b0 <__ieee754_pow>
 801e6e6:	4622      	mov	r2, r4
 801e6e8:	462b      	mov	r3, r5
 801e6ea:	4620      	mov	r0, r4
 801e6ec:	4629      	mov	r1, r5
 801e6ee:	ec57 6b10 	vmov	r6, r7, d0
 801e6f2:	f7fb f81b 	bl	801972c <__aeabi_dcmpun>
 801e6f6:	2800      	cmp	r0, #0
 801e6f8:	d13b      	bne.n	801e772 <pow+0xa2>
 801e6fa:	ec51 0b18 	vmov	r0, r1, d8
 801e6fe:	2200      	movs	r2, #0
 801e700:	2300      	movs	r3, #0
 801e702:	f7fa ffe1 	bl	80196c8 <__aeabi_dcmpeq>
 801e706:	b1b8      	cbz	r0, 801e738 <pow+0x68>
 801e708:	2200      	movs	r2, #0
 801e70a:	2300      	movs	r3, #0
 801e70c:	4620      	mov	r0, r4
 801e70e:	4629      	mov	r1, r5
 801e710:	f7fa ffda 	bl	80196c8 <__aeabi_dcmpeq>
 801e714:	2800      	cmp	r0, #0
 801e716:	d146      	bne.n	801e7a6 <pow+0xd6>
 801e718:	ec45 4b10 	vmov	d0, r4, r5
 801e71c:	f000 fe61 	bl	801f3e2 <finite>
 801e720:	b338      	cbz	r0, 801e772 <pow+0xa2>
 801e722:	2200      	movs	r2, #0
 801e724:	2300      	movs	r3, #0
 801e726:	4620      	mov	r0, r4
 801e728:	4629      	mov	r1, r5
 801e72a:	f7fa ffd7 	bl	80196dc <__aeabi_dcmplt>
 801e72e:	b300      	cbz	r0, 801e772 <pow+0xa2>
 801e730:	f7fb fa90 	bl	8019c54 <__errno>
 801e734:	2322      	movs	r3, #34	; 0x22
 801e736:	e01b      	b.n	801e770 <pow+0xa0>
 801e738:	ec47 6b10 	vmov	d0, r6, r7
 801e73c:	f000 fe51 	bl	801f3e2 <finite>
 801e740:	b9e0      	cbnz	r0, 801e77c <pow+0xac>
 801e742:	eeb0 0a48 	vmov.f32	s0, s16
 801e746:	eef0 0a68 	vmov.f32	s1, s17
 801e74a:	f000 fe4a 	bl	801f3e2 <finite>
 801e74e:	b1a8      	cbz	r0, 801e77c <pow+0xac>
 801e750:	ec45 4b10 	vmov	d0, r4, r5
 801e754:	f000 fe45 	bl	801f3e2 <finite>
 801e758:	b180      	cbz	r0, 801e77c <pow+0xac>
 801e75a:	4632      	mov	r2, r6
 801e75c:	463b      	mov	r3, r7
 801e75e:	4630      	mov	r0, r6
 801e760:	4639      	mov	r1, r7
 801e762:	f7fa ffe3 	bl	801972c <__aeabi_dcmpun>
 801e766:	2800      	cmp	r0, #0
 801e768:	d0e2      	beq.n	801e730 <pow+0x60>
 801e76a:	f7fb fa73 	bl	8019c54 <__errno>
 801e76e:	2321      	movs	r3, #33	; 0x21
 801e770:	6003      	str	r3, [r0, #0]
 801e772:	ecbd 8b02 	vpop	{d8}
 801e776:	ec47 6b10 	vmov	d0, r6, r7
 801e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e77c:	2200      	movs	r2, #0
 801e77e:	2300      	movs	r3, #0
 801e780:	4630      	mov	r0, r6
 801e782:	4639      	mov	r1, r7
 801e784:	f7fa ffa0 	bl	80196c8 <__aeabi_dcmpeq>
 801e788:	2800      	cmp	r0, #0
 801e78a:	d0f2      	beq.n	801e772 <pow+0xa2>
 801e78c:	eeb0 0a48 	vmov.f32	s0, s16
 801e790:	eef0 0a68 	vmov.f32	s1, s17
 801e794:	f000 fe25 	bl	801f3e2 <finite>
 801e798:	2800      	cmp	r0, #0
 801e79a:	d0ea      	beq.n	801e772 <pow+0xa2>
 801e79c:	ec45 4b10 	vmov	d0, r4, r5
 801e7a0:	f000 fe1f 	bl	801f3e2 <finite>
 801e7a4:	e7c3      	b.n	801e72e <pow+0x5e>
 801e7a6:	4f01      	ldr	r7, [pc, #4]	; (801e7ac <pow+0xdc>)
 801e7a8:	2600      	movs	r6, #0
 801e7aa:	e7e2      	b.n	801e772 <pow+0xa2>
 801e7ac:	3ff00000 	.word	0x3ff00000

0801e7b0 <__ieee754_pow>:
 801e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7b4:	ed2d 8b06 	vpush	{d8-d10}
 801e7b8:	b089      	sub	sp, #36	; 0x24
 801e7ba:	ed8d 1b00 	vstr	d1, [sp]
 801e7be:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e7c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e7c6:	ea58 0102 	orrs.w	r1, r8, r2
 801e7ca:	ec57 6b10 	vmov	r6, r7, d0
 801e7ce:	d115      	bne.n	801e7fc <__ieee754_pow+0x4c>
 801e7d0:	19b3      	adds	r3, r6, r6
 801e7d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801e7d6:	4152      	adcs	r2, r2
 801e7d8:	4299      	cmp	r1, r3
 801e7da:	4b89      	ldr	r3, [pc, #548]	; (801ea00 <__ieee754_pow+0x250>)
 801e7dc:	4193      	sbcs	r3, r2
 801e7de:	f080 84d2 	bcs.w	801f186 <__ieee754_pow+0x9d6>
 801e7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7e6:	4630      	mov	r0, r6
 801e7e8:	4639      	mov	r1, r7
 801e7ea:	f7fa fb4f 	bl	8018e8c <__adddf3>
 801e7ee:	ec41 0b10 	vmov	d0, r0, r1
 801e7f2:	b009      	add	sp, #36	; 0x24
 801e7f4:	ecbd 8b06 	vpop	{d8-d10}
 801e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7fc:	4b81      	ldr	r3, [pc, #516]	; (801ea04 <__ieee754_pow+0x254>)
 801e7fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e802:	429c      	cmp	r4, r3
 801e804:	ee10 aa10 	vmov	sl, s0
 801e808:	463d      	mov	r5, r7
 801e80a:	dc06      	bgt.n	801e81a <__ieee754_pow+0x6a>
 801e80c:	d101      	bne.n	801e812 <__ieee754_pow+0x62>
 801e80e:	2e00      	cmp	r6, #0
 801e810:	d1e7      	bne.n	801e7e2 <__ieee754_pow+0x32>
 801e812:	4598      	cmp	r8, r3
 801e814:	dc01      	bgt.n	801e81a <__ieee754_pow+0x6a>
 801e816:	d10f      	bne.n	801e838 <__ieee754_pow+0x88>
 801e818:	b172      	cbz	r2, 801e838 <__ieee754_pow+0x88>
 801e81a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e81e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e822:	ea55 050a 	orrs.w	r5, r5, sl
 801e826:	d1dc      	bne.n	801e7e2 <__ieee754_pow+0x32>
 801e828:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e82c:	18db      	adds	r3, r3, r3
 801e82e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e832:	4152      	adcs	r2, r2
 801e834:	429d      	cmp	r5, r3
 801e836:	e7d0      	b.n	801e7da <__ieee754_pow+0x2a>
 801e838:	2d00      	cmp	r5, #0
 801e83a:	da3b      	bge.n	801e8b4 <__ieee754_pow+0x104>
 801e83c:	4b72      	ldr	r3, [pc, #456]	; (801ea08 <__ieee754_pow+0x258>)
 801e83e:	4598      	cmp	r8, r3
 801e840:	dc51      	bgt.n	801e8e6 <__ieee754_pow+0x136>
 801e842:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e846:	4598      	cmp	r8, r3
 801e848:	f340 84ac 	ble.w	801f1a4 <__ieee754_pow+0x9f4>
 801e84c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e850:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e854:	2b14      	cmp	r3, #20
 801e856:	dd0f      	ble.n	801e878 <__ieee754_pow+0xc8>
 801e858:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e85c:	fa22 f103 	lsr.w	r1, r2, r3
 801e860:	fa01 f303 	lsl.w	r3, r1, r3
 801e864:	4293      	cmp	r3, r2
 801e866:	f040 849d 	bne.w	801f1a4 <__ieee754_pow+0x9f4>
 801e86a:	f001 0101 	and.w	r1, r1, #1
 801e86e:	f1c1 0302 	rsb	r3, r1, #2
 801e872:	9304      	str	r3, [sp, #16]
 801e874:	b182      	cbz	r2, 801e898 <__ieee754_pow+0xe8>
 801e876:	e05f      	b.n	801e938 <__ieee754_pow+0x188>
 801e878:	2a00      	cmp	r2, #0
 801e87a:	d15b      	bne.n	801e934 <__ieee754_pow+0x184>
 801e87c:	f1c3 0314 	rsb	r3, r3, #20
 801e880:	fa48 f103 	asr.w	r1, r8, r3
 801e884:	fa01 f303 	lsl.w	r3, r1, r3
 801e888:	4543      	cmp	r3, r8
 801e88a:	f040 8488 	bne.w	801f19e <__ieee754_pow+0x9ee>
 801e88e:	f001 0101 	and.w	r1, r1, #1
 801e892:	f1c1 0302 	rsb	r3, r1, #2
 801e896:	9304      	str	r3, [sp, #16]
 801e898:	4b5c      	ldr	r3, [pc, #368]	; (801ea0c <__ieee754_pow+0x25c>)
 801e89a:	4598      	cmp	r8, r3
 801e89c:	d132      	bne.n	801e904 <__ieee754_pow+0x154>
 801e89e:	f1b9 0f00 	cmp.w	r9, #0
 801e8a2:	f280 8478 	bge.w	801f196 <__ieee754_pow+0x9e6>
 801e8a6:	4959      	ldr	r1, [pc, #356]	; (801ea0c <__ieee754_pow+0x25c>)
 801e8a8:	4632      	mov	r2, r6
 801e8aa:	463b      	mov	r3, r7
 801e8ac:	2000      	movs	r0, #0
 801e8ae:	f7fa fdcd 	bl	801944c <__aeabi_ddiv>
 801e8b2:	e79c      	b.n	801e7ee <__ieee754_pow+0x3e>
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	9304      	str	r3, [sp, #16]
 801e8b8:	2a00      	cmp	r2, #0
 801e8ba:	d13d      	bne.n	801e938 <__ieee754_pow+0x188>
 801e8bc:	4b51      	ldr	r3, [pc, #324]	; (801ea04 <__ieee754_pow+0x254>)
 801e8be:	4598      	cmp	r8, r3
 801e8c0:	d1ea      	bne.n	801e898 <__ieee754_pow+0xe8>
 801e8c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e8c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e8ca:	ea53 030a 	orrs.w	r3, r3, sl
 801e8ce:	f000 845a 	beq.w	801f186 <__ieee754_pow+0x9d6>
 801e8d2:	4b4f      	ldr	r3, [pc, #316]	; (801ea10 <__ieee754_pow+0x260>)
 801e8d4:	429c      	cmp	r4, r3
 801e8d6:	dd08      	ble.n	801e8ea <__ieee754_pow+0x13a>
 801e8d8:	f1b9 0f00 	cmp.w	r9, #0
 801e8dc:	f2c0 8457 	blt.w	801f18e <__ieee754_pow+0x9de>
 801e8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e8e4:	e783      	b.n	801e7ee <__ieee754_pow+0x3e>
 801e8e6:	2302      	movs	r3, #2
 801e8e8:	e7e5      	b.n	801e8b6 <__ieee754_pow+0x106>
 801e8ea:	f1b9 0f00 	cmp.w	r9, #0
 801e8ee:	f04f 0000 	mov.w	r0, #0
 801e8f2:	f04f 0100 	mov.w	r1, #0
 801e8f6:	f6bf af7a 	bge.w	801e7ee <__ieee754_pow+0x3e>
 801e8fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e8fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e902:	e774      	b.n	801e7ee <__ieee754_pow+0x3e>
 801e904:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e908:	d106      	bne.n	801e918 <__ieee754_pow+0x168>
 801e90a:	4632      	mov	r2, r6
 801e90c:	463b      	mov	r3, r7
 801e90e:	4630      	mov	r0, r6
 801e910:	4639      	mov	r1, r7
 801e912:	f7fa fc71 	bl	80191f8 <__aeabi_dmul>
 801e916:	e76a      	b.n	801e7ee <__ieee754_pow+0x3e>
 801e918:	4b3e      	ldr	r3, [pc, #248]	; (801ea14 <__ieee754_pow+0x264>)
 801e91a:	4599      	cmp	r9, r3
 801e91c:	d10c      	bne.n	801e938 <__ieee754_pow+0x188>
 801e91e:	2d00      	cmp	r5, #0
 801e920:	db0a      	blt.n	801e938 <__ieee754_pow+0x188>
 801e922:	ec47 6b10 	vmov	d0, r6, r7
 801e926:	b009      	add	sp, #36	; 0x24
 801e928:	ecbd 8b06 	vpop	{d8-d10}
 801e92c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e930:	f000 bc6c 	b.w	801f20c <__ieee754_sqrt>
 801e934:	2300      	movs	r3, #0
 801e936:	9304      	str	r3, [sp, #16]
 801e938:	ec47 6b10 	vmov	d0, r6, r7
 801e93c:	f000 fd48 	bl	801f3d0 <fabs>
 801e940:	ec51 0b10 	vmov	r0, r1, d0
 801e944:	f1ba 0f00 	cmp.w	sl, #0
 801e948:	d129      	bne.n	801e99e <__ieee754_pow+0x1ee>
 801e94a:	b124      	cbz	r4, 801e956 <__ieee754_pow+0x1a6>
 801e94c:	4b2f      	ldr	r3, [pc, #188]	; (801ea0c <__ieee754_pow+0x25c>)
 801e94e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e952:	429a      	cmp	r2, r3
 801e954:	d123      	bne.n	801e99e <__ieee754_pow+0x1ee>
 801e956:	f1b9 0f00 	cmp.w	r9, #0
 801e95a:	da05      	bge.n	801e968 <__ieee754_pow+0x1b8>
 801e95c:	4602      	mov	r2, r0
 801e95e:	460b      	mov	r3, r1
 801e960:	2000      	movs	r0, #0
 801e962:	492a      	ldr	r1, [pc, #168]	; (801ea0c <__ieee754_pow+0x25c>)
 801e964:	f7fa fd72 	bl	801944c <__aeabi_ddiv>
 801e968:	2d00      	cmp	r5, #0
 801e96a:	f6bf af40 	bge.w	801e7ee <__ieee754_pow+0x3e>
 801e96e:	9b04      	ldr	r3, [sp, #16]
 801e970:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e974:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e978:	4323      	orrs	r3, r4
 801e97a:	d108      	bne.n	801e98e <__ieee754_pow+0x1de>
 801e97c:	4602      	mov	r2, r0
 801e97e:	460b      	mov	r3, r1
 801e980:	4610      	mov	r0, r2
 801e982:	4619      	mov	r1, r3
 801e984:	f7fa fa80 	bl	8018e88 <__aeabi_dsub>
 801e988:	4602      	mov	r2, r0
 801e98a:	460b      	mov	r3, r1
 801e98c:	e78f      	b.n	801e8ae <__ieee754_pow+0xfe>
 801e98e:	9b04      	ldr	r3, [sp, #16]
 801e990:	2b01      	cmp	r3, #1
 801e992:	f47f af2c 	bne.w	801e7ee <__ieee754_pow+0x3e>
 801e996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e99a:	4619      	mov	r1, r3
 801e99c:	e727      	b.n	801e7ee <__ieee754_pow+0x3e>
 801e99e:	0feb      	lsrs	r3, r5, #31
 801e9a0:	3b01      	subs	r3, #1
 801e9a2:	9306      	str	r3, [sp, #24]
 801e9a4:	9a06      	ldr	r2, [sp, #24]
 801e9a6:	9b04      	ldr	r3, [sp, #16]
 801e9a8:	4313      	orrs	r3, r2
 801e9aa:	d102      	bne.n	801e9b2 <__ieee754_pow+0x202>
 801e9ac:	4632      	mov	r2, r6
 801e9ae:	463b      	mov	r3, r7
 801e9b0:	e7e6      	b.n	801e980 <__ieee754_pow+0x1d0>
 801e9b2:	4b19      	ldr	r3, [pc, #100]	; (801ea18 <__ieee754_pow+0x268>)
 801e9b4:	4598      	cmp	r8, r3
 801e9b6:	f340 80fb 	ble.w	801ebb0 <__ieee754_pow+0x400>
 801e9ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e9be:	4598      	cmp	r8, r3
 801e9c0:	4b13      	ldr	r3, [pc, #76]	; (801ea10 <__ieee754_pow+0x260>)
 801e9c2:	dd0c      	ble.n	801e9de <__ieee754_pow+0x22e>
 801e9c4:	429c      	cmp	r4, r3
 801e9c6:	dc0f      	bgt.n	801e9e8 <__ieee754_pow+0x238>
 801e9c8:	f1b9 0f00 	cmp.w	r9, #0
 801e9cc:	da0f      	bge.n	801e9ee <__ieee754_pow+0x23e>
 801e9ce:	2000      	movs	r0, #0
 801e9d0:	b009      	add	sp, #36	; 0x24
 801e9d2:	ecbd 8b06 	vpop	{d8-d10}
 801e9d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9da:	f000 bcf0 	b.w	801f3be <__math_oflow>
 801e9de:	429c      	cmp	r4, r3
 801e9e0:	dbf2      	blt.n	801e9c8 <__ieee754_pow+0x218>
 801e9e2:	4b0a      	ldr	r3, [pc, #40]	; (801ea0c <__ieee754_pow+0x25c>)
 801e9e4:	429c      	cmp	r4, r3
 801e9e6:	dd19      	ble.n	801ea1c <__ieee754_pow+0x26c>
 801e9e8:	f1b9 0f00 	cmp.w	r9, #0
 801e9ec:	dcef      	bgt.n	801e9ce <__ieee754_pow+0x21e>
 801e9ee:	2000      	movs	r0, #0
 801e9f0:	b009      	add	sp, #36	; 0x24
 801e9f2:	ecbd 8b06 	vpop	{d8-d10}
 801e9f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9fa:	f000 bcd7 	b.w	801f3ac <__math_uflow>
 801e9fe:	bf00      	nop
 801ea00:	fff00000 	.word	0xfff00000
 801ea04:	7ff00000 	.word	0x7ff00000
 801ea08:	433fffff 	.word	0x433fffff
 801ea0c:	3ff00000 	.word	0x3ff00000
 801ea10:	3fefffff 	.word	0x3fefffff
 801ea14:	3fe00000 	.word	0x3fe00000
 801ea18:	41e00000 	.word	0x41e00000
 801ea1c:	4b60      	ldr	r3, [pc, #384]	; (801eba0 <__ieee754_pow+0x3f0>)
 801ea1e:	2200      	movs	r2, #0
 801ea20:	f7fa fa32 	bl	8018e88 <__aeabi_dsub>
 801ea24:	a354      	add	r3, pc, #336	; (adr r3, 801eb78 <__ieee754_pow+0x3c8>)
 801ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2a:	4604      	mov	r4, r0
 801ea2c:	460d      	mov	r5, r1
 801ea2e:	f7fa fbe3 	bl	80191f8 <__aeabi_dmul>
 801ea32:	a353      	add	r3, pc, #332	; (adr r3, 801eb80 <__ieee754_pow+0x3d0>)
 801ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea38:	4606      	mov	r6, r0
 801ea3a:	460f      	mov	r7, r1
 801ea3c:	4620      	mov	r0, r4
 801ea3e:	4629      	mov	r1, r5
 801ea40:	f7fa fbda 	bl	80191f8 <__aeabi_dmul>
 801ea44:	4b57      	ldr	r3, [pc, #348]	; (801eba4 <__ieee754_pow+0x3f4>)
 801ea46:	4682      	mov	sl, r0
 801ea48:	468b      	mov	fp, r1
 801ea4a:	2200      	movs	r2, #0
 801ea4c:	4620      	mov	r0, r4
 801ea4e:	4629      	mov	r1, r5
 801ea50:	f7fa fbd2 	bl	80191f8 <__aeabi_dmul>
 801ea54:	4602      	mov	r2, r0
 801ea56:	460b      	mov	r3, r1
 801ea58:	a14b      	add	r1, pc, #300	; (adr r1, 801eb88 <__ieee754_pow+0x3d8>)
 801ea5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ea5e:	f7fa fa13 	bl	8018e88 <__aeabi_dsub>
 801ea62:	4622      	mov	r2, r4
 801ea64:	462b      	mov	r3, r5
 801ea66:	f7fa fbc7 	bl	80191f8 <__aeabi_dmul>
 801ea6a:	4602      	mov	r2, r0
 801ea6c:	460b      	mov	r3, r1
 801ea6e:	2000      	movs	r0, #0
 801ea70:	494d      	ldr	r1, [pc, #308]	; (801eba8 <__ieee754_pow+0x3f8>)
 801ea72:	f7fa fa09 	bl	8018e88 <__aeabi_dsub>
 801ea76:	4622      	mov	r2, r4
 801ea78:	4680      	mov	r8, r0
 801ea7a:	4689      	mov	r9, r1
 801ea7c:	462b      	mov	r3, r5
 801ea7e:	4620      	mov	r0, r4
 801ea80:	4629      	mov	r1, r5
 801ea82:	f7fa fbb9 	bl	80191f8 <__aeabi_dmul>
 801ea86:	4602      	mov	r2, r0
 801ea88:	460b      	mov	r3, r1
 801ea8a:	4640      	mov	r0, r8
 801ea8c:	4649      	mov	r1, r9
 801ea8e:	f7fa fbb3 	bl	80191f8 <__aeabi_dmul>
 801ea92:	a33f      	add	r3, pc, #252	; (adr r3, 801eb90 <__ieee754_pow+0x3e0>)
 801ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea98:	f7fa fbae 	bl	80191f8 <__aeabi_dmul>
 801ea9c:	4602      	mov	r2, r0
 801ea9e:	460b      	mov	r3, r1
 801eaa0:	4650      	mov	r0, sl
 801eaa2:	4659      	mov	r1, fp
 801eaa4:	f7fa f9f0 	bl	8018e88 <__aeabi_dsub>
 801eaa8:	4602      	mov	r2, r0
 801eaaa:	460b      	mov	r3, r1
 801eaac:	4680      	mov	r8, r0
 801eaae:	4689      	mov	r9, r1
 801eab0:	4630      	mov	r0, r6
 801eab2:	4639      	mov	r1, r7
 801eab4:	f7fa f9ea 	bl	8018e8c <__adddf3>
 801eab8:	2000      	movs	r0, #0
 801eaba:	4632      	mov	r2, r6
 801eabc:	463b      	mov	r3, r7
 801eabe:	4604      	mov	r4, r0
 801eac0:	460d      	mov	r5, r1
 801eac2:	f7fa f9e1 	bl	8018e88 <__aeabi_dsub>
 801eac6:	4602      	mov	r2, r0
 801eac8:	460b      	mov	r3, r1
 801eaca:	4640      	mov	r0, r8
 801eacc:	4649      	mov	r1, r9
 801eace:	f7fa f9db 	bl	8018e88 <__aeabi_dsub>
 801ead2:	9b04      	ldr	r3, [sp, #16]
 801ead4:	9a06      	ldr	r2, [sp, #24]
 801ead6:	3b01      	subs	r3, #1
 801ead8:	4313      	orrs	r3, r2
 801eada:	4682      	mov	sl, r0
 801eadc:	468b      	mov	fp, r1
 801eade:	f040 81e7 	bne.w	801eeb0 <__ieee754_pow+0x700>
 801eae2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801eb98 <__ieee754_pow+0x3e8>
 801eae6:	eeb0 8a47 	vmov.f32	s16, s14
 801eaea:	eef0 8a67 	vmov.f32	s17, s15
 801eaee:	e9dd 6700 	ldrd	r6, r7, [sp]
 801eaf2:	2600      	movs	r6, #0
 801eaf4:	4632      	mov	r2, r6
 801eaf6:	463b      	mov	r3, r7
 801eaf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801eafc:	f7fa f9c4 	bl	8018e88 <__aeabi_dsub>
 801eb00:	4622      	mov	r2, r4
 801eb02:	462b      	mov	r3, r5
 801eb04:	f7fa fb78 	bl	80191f8 <__aeabi_dmul>
 801eb08:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eb0c:	4680      	mov	r8, r0
 801eb0e:	4689      	mov	r9, r1
 801eb10:	4650      	mov	r0, sl
 801eb12:	4659      	mov	r1, fp
 801eb14:	f7fa fb70 	bl	80191f8 <__aeabi_dmul>
 801eb18:	4602      	mov	r2, r0
 801eb1a:	460b      	mov	r3, r1
 801eb1c:	4640      	mov	r0, r8
 801eb1e:	4649      	mov	r1, r9
 801eb20:	f7fa f9b4 	bl	8018e8c <__adddf3>
 801eb24:	4632      	mov	r2, r6
 801eb26:	463b      	mov	r3, r7
 801eb28:	4680      	mov	r8, r0
 801eb2a:	4689      	mov	r9, r1
 801eb2c:	4620      	mov	r0, r4
 801eb2e:	4629      	mov	r1, r5
 801eb30:	f7fa fb62 	bl	80191f8 <__aeabi_dmul>
 801eb34:	460b      	mov	r3, r1
 801eb36:	4604      	mov	r4, r0
 801eb38:	460d      	mov	r5, r1
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	4649      	mov	r1, r9
 801eb3e:	4640      	mov	r0, r8
 801eb40:	f7fa f9a4 	bl	8018e8c <__adddf3>
 801eb44:	4b19      	ldr	r3, [pc, #100]	; (801ebac <__ieee754_pow+0x3fc>)
 801eb46:	4299      	cmp	r1, r3
 801eb48:	ec45 4b19 	vmov	d9, r4, r5
 801eb4c:	4606      	mov	r6, r0
 801eb4e:	460f      	mov	r7, r1
 801eb50:	468b      	mov	fp, r1
 801eb52:	f340 82f1 	ble.w	801f138 <__ieee754_pow+0x988>
 801eb56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801eb5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801eb5e:	4303      	orrs	r3, r0
 801eb60:	f000 81e4 	beq.w	801ef2c <__ieee754_pow+0x77c>
 801eb64:	ec51 0b18 	vmov	r0, r1, d8
 801eb68:	2200      	movs	r2, #0
 801eb6a:	2300      	movs	r3, #0
 801eb6c:	f7fa fdb6 	bl	80196dc <__aeabi_dcmplt>
 801eb70:	3800      	subs	r0, #0
 801eb72:	bf18      	it	ne
 801eb74:	2001      	movne	r0, #1
 801eb76:	e72b      	b.n	801e9d0 <__ieee754_pow+0x220>
 801eb78:	60000000 	.word	0x60000000
 801eb7c:	3ff71547 	.word	0x3ff71547
 801eb80:	f85ddf44 	.word	0xf85ddf44
 801eb84:	3e54ae0b 	.word	0x3e54ae0b
 801eb88:	55555555 	.word	0x55555555
 801eb8c:	3fd55555 	.word	0x3fd55555
 801eb90:	652b82fe 	.word	0x652b82fe
 801eb94:	3ff71547 	.word	0x3ff71547
 801eb98:	00000000 	.word	0x00000000
 801eb9c:	bff00000 	.word	0xbff00000
 801eba0:	3ff00000 	.word	0x3ff00000
 801eba4:	3fd00000 	.word	0x3fd00000
 801eba8:	3fe00000 	.word	0x3fe00000
 801ebac:	408fffff 	.word	0x408fffff
 801ebb0:	4bd5      	ldr	r3, [pc, #852]	; (801ef08 <__ieee754_pow+0x758>)
 801ebb2:	402b      	ands	r3, r5
 801ebb4:	2200      	movs	r2, #0
 801ebb6:	b92b      	cbnz	r3, 801ebc4 <__ieee754_pow+0x414>
 801ebb8:	4bd4      	ldr	r3, [pc, #848]	; (801ef0c <__ieee754_pow+0x75c>)
 801ebba:	f7fa fb1d 	bl	80191f8 <__aeabi_dmul>
 801ebbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ebc2:	460c      	mov	r4, r1
 801ebc4:	1523      	asrs	r3, r4, #20
 801ebc6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ebca:	4413      	add	r3, r2
 801ebcc:	9305      	str	r3, [sp, #20]
 801ebce:	4bd0      	ldr	r3, [pc, #832]	; (801ef10 <__ieee754_pow+0x760>)
 801ebd0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ebd4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ebd8:	429c      	cmp	r4, r3
 801ebda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ebde:	dd08      	ble.n	801ebf2 <__ieee754_pow+0x442>
 801ebe0:	4bcc      	ldr	r3, [pc, #816]	; (801ef14 <__ieee754_pow+0x764>)
 801ebe2:	429c      	cmp	r4, r3
 801ebe4:	f340 8162 	ble.w	801eeac <__ieee754_pow+0x6fc>
 801ebe8:	9b05      	ldr	r3, [sp, #20]
 801ebea:	3301      	adds	r3, #1
 801ebec:	9305      	str	r3, [sp, #20]
 801ebee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ebf2:	2400      	movs	r4, #0
 801ebf4:	00e3      	lsls	r3, r4, #3
 801ebf6:	9307      	str	r3, [sp, #28]
 801ebf8:	4bc7      	ldr	r3, [pc, #796]	; (801ef18 <__ieee754_pow+0x768>)
 801ebfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ebfe:	ed93 7b00 	vldr	d7, [r3]
 801ec02:	4629      	mov	r1, r5
 801ec04:	ec53 2b17 	vmov	r2, r3, d7
 801ec08:	eeb0 9a47 	vmov.f32	s18, s14
 801ec0c:	eef0 9a67 	vmov.f32	s19, s15
 801ec10:	4682      	mov	sl, r0
 801ec12:	f7fa f939 	bl	8018e88 <__aeabi_dsub>
 801ec16:	4652      	mov	r2, sl
 801ec18:	4606      	mov	r6, r0
 801ec1a:	460f      	mov	r7, r1
 801ec1c:	462b      	mov	r3, r5
 801ec1e:	ec51 0b19 	vmov	r0, r1, d9
 801ec22:	f7fa f933 	bl	8018e8c <__adddf3>
 801ec26:	4602      	mov	r2, r0
 801ec28:	460b      	mov	r3, r1
 801ec2a:	2000      	movs	r0, #0
 801ec2c:	49bb      	ldr	r1, [pc, #748]	; (801ef1c <__ieee754_pow+0x76c>)
 801ec2e:	f7fa fc0d 	bl	801944c <__aeabi_ddiv>
 801ec32:	ec41 0b1a 	vmov	d10, r0, r1
 801ec36:	4602      	mov	r2, r0
 801ec38:	460b      	mov	r3, r1
 801ec3a:	4630      	mov	r0, r6
 801ec3c:	4639      	mov	r1, r7
 801ec3e:	f7fa fadb 	bl	80191f8 <__aeabi_dmul>
 801ec42:	2300      	movs	r3, #0
 801ec44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec48:	9302      	str	r3, [sp, #8]
 801ec4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ec4e:	46ab      	mov	fp, r5
 801ec50:	106d      	asrs	r5, r5, #1
 801ec52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ec56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ec5a:	ec41 0b18 	vmov	d8, r0, r1
 801ec5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801ec62:	2200      	movs	r2, #0
 801ec64:	4640      	mov	r0, r8
 801ec66:	4649      	mov	r1, r9
 801ec68:	4614      	mov	r4, r2
 801ec6a:	461d      	mov	r5, r3
 801ec6c:	f7fa fac4 	bl	80191f8 <__aeabi_dmul>
 801ec70:	4602      	mov	r2, r0
 801ec72:	460b      	mov	r3, r1
 801ec74:	4630      	mov	r0, r6
 801ec76:	4639      	mov	r1, r7
 801ec78:	f7fa f906 	bl	8018e88 <__aeabi_dsub>
 801ec7c:	ec53 2b19 	vmov	r2, r3, d9
 801ec80:	4606      	mov	r6, r0
 801ec82:	460f      	mov	r7, r1
 801ec84:	4620      	mov	r0, r4
 801ec86:	4629      	mov	r1, r5
 801ec88:	f7fa f8fe 	bl	8018e88 <__aeabi_dsub>
 801ec8c:	4602      	mov	r2, r0
 801ec8e:	460b      	mov	r3, r1
 801ec90:	4650      	mov	r0, sl
 801ec92:	4659      	mov	r1, fp
 801ec94:	f7fa f8f8 	bl	8018e88 <__aeabi_dsub>
 801ec98:	4642      	mov	r2, r8
 801ec9a:	464b      	mov	r3, r9
 801ec9c:	f7fa faac 	bl	80191f8 <__aeabi_dmul>
 801eca0:	4602      	mov	r2, r0
 801eca2:	460b      	mov	r3, r1
 801eca4:	4630      	mov	r0, r6
 801eca6:	4639      	mov	r1, r7
 801eca8:	f7fa f8ee 	bl	8018e88 <__aeabi_dsub>
 801ecac:	ec53 2b1a 	vmov	r2, r3, d10
 801ecb0:	f7fa faa2 	bl	80191f8 <__aeabi_dmul>
 801ecb4:	ec53 2b18 	vmov	r2, r3, d8
 801ecb8:	ec41 0b19 	vmov	d9, r0, r1
 801ecbc:	ec51 0b18 	vmov	r0, r1, d8
 801ecc0:	f7fa fa9a 	bl	80191f8 <__aeabi_dmul>
 801ecc4:	a37c      	add	r3, pc, #496	; (adr r3, 801eeb8 <__ieee754_pow+0x708>)
 801ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecca:	4604      	mov	r4, r0
 801eccc:	460d      	mov	r5, r1
 801ecce:	f7fa fa93 	bl	80191f8 <__aeabi_dmul>
 801ecd2:	a37b      	add	r3, pc, #492	; (adr r3, 801eec0 <__ieee754_pow+0x710>)
 801ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecd8:	f7fa f8d8 	bl	8018e8c <__adddf3>
 801ecdc:	4622      	mov	r2, r4
 801ecde:	462b      	mov	r3, r5
 801ece0:	f7fa fa8a 	bl	80191f8 <__aeabi_dmul>
 801ece4:	a378      	add	r3, pc, #480	; (adr r3, 801eec8 <__ieee754_pow+0x718>)
 801ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecea:	f7fa f8cf 	bl	8018e8c <__adddf3>
 801ecee:	4622      	mov	r2, r4
 801ecf0:	462b      	mov	r3, r5
 801ecf2:	f7fa fa81 	bl	80191f8 <__aeabi_dmul>
 801ecf6:	a376      	add	r3, pc, #472	; (adr r3, 801eed0 <__ieee754_pow+0x720>)
 801ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecfc:	f7fa f8c6 	bl	8018e8c <__adddf3>
 801ed00:	4622      	mov	r2, r4
 801ed02:	462b      	mov	r3, r5
 801ed04:	f7fa fa78 	bl	80191f8 <__aeabi_dmul>
 801ed08:	a373      	add	r3, pc, #460	; (adr r3, 801eed8 <__ieee754_pow+0x728>)
 801ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed0e:	f7fa f8bd 	bl	8018e8c <__adddf3>
 801ed12:	4622      	mov	r2, r4
 801ed14:	462b      	mov	r3, r5
 801ed16:	f7fa fa6f 	bl	80191f8 <__aeabi_dmul>
 801ed1a:	a371      	add	r3, pc, #452	; (adr r3, 801eee0 <__ieee754_pow+0x730>)
 801ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed20:	f7fa f8b4 	bl	8018e8c <__adddf3>
 801ed24:	4622      	mov	r2, r4
 801ed26:	4606      	mov	r6, r0
 801ed28:	460f      	mov	r7, r1
 801ed2a:	462b      	mov	r3, r5
 801ed2c:	4620      	mov	r0, r4
 801ed2e:	4629      	mov	r1, r5
 801ed30:	f7fa fa62 	bl	80191f8 <__aeabi_dmul>
 801ed34:	4602      	mov	r2, r0
 801ed36:	460b      	mov	r3, r1
 801ed38:	4630      	mov	r0, r6
 801ed3a:	4639      	mov	r1, r7
 801ed3c:	f7fa fa5c 	bl	80191f8 <__aeabi_dmul>
 801ed40:	4642      	mov	r2, r8
 801ed42:	4604      	mov	r4, r0
 801ed44:	460d      	mov	r5, r1
 801ed46:	464b      	mov	r3, r9
 801ed48:	ec51 0b18 	vmov	r0, r1, d8
 801ed4c:	f7fa f89e 	bl	8018e8c <__adddf3>
 801ed50:	ec53 2b19 	vmov	r2, r3, d9
 801ed54:	f7fa fa50 	bl	80191f8 <__aeabi_dmul>
 801ed58:	4622      	mov	r2, r4
 801ed5a:	462b      	mov	r3, r5
 801ed5c:	f7fa f896 	bl	8018e8c <__adddf3>
 801ed60:	4642      	mov	r2, r8
 801ed62:	4682      	mov	sl, r0
 801ed64:	468b      	mov	fp, r1
 801ed66:	464b      	mov	r3, r9
 801ed68:	4640      	mov	r0, r8
 801ed6a:	4649      	mov	r1, r9
 801ed6c:	f7fa fa44 	bl	80191f8 <__aeabi_dmul>
 801ed70:	4b6b      	ldr	r3, [pc, #428]	; (801ef20 <__ieee754_pow+0x770>)
 801ed72:	2200      	movs	r2, #0
 801ed74:	4606      	mov	r6, r0
 801ed76:	460f      	mov	r7, r1
 801ed78:	f7fa f888 	bl	8018e8c <__adddf3>
 801ed7c:	4652      	mov	r2, sl
 801ed7e:	465b      	mov	r3, fp
 801ed80:	f7fa f884 	bl	8018e8c <__adddf3>
 801ed84:	2000      	movs	r0, #0
 801ed86:	4604      	mov	r4, r0
 801ed88:	460d      	mov	r5, r1
 801ed8a:	4602      	mov	r2, r0
 801ed8c:	460b      	mov	r3, r1
 801ed8e:	4640      	mov	r0, r8
 801ed90:	4649      	mov	r1, r9
 801ed92:	f7fa fa31 	bl	80191f8 <__aeabi_dmul>
 801ed96:	4b62      	ldr	r3, [pc, #392]	; (801ef20 <__ieee754_pow+0x770>)
 801ed98:	4680      	mov	r8, r0
 801ed9a:	4689      	mov	r9, r1
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	4620      	mov	r0, r4
 801eda0:	4629      	mov	r1, r5
 801eda2:	f7fa f871 	bl	8018e88 <__aeabi_dsub>
 801eda6:	4632      	mov	r2, r6
 801eda8:	463b      	mov	r3, r7
 801edaa:	f7fa f86d 	bl	8018e88 <__aeabi_dsub>
 801edae:	4602      	mov	r2, r0
 801edb0:	460b      	mov	r3, r1
 801edb2:	4650      	mov	r0, sl
 801edb4:	4659      	mov	r1, fp
 801edb6:	f7fa f867 	bl	8018e88 <__aeabi_dsub>
 801edba:	ec53 2b18 	vmov	r2, r3, d8
 801edbe:	f7fa fa1b 	bl	80191f8 <__aeabi_dmul>
 801edc2:	4622      	mov	r2, r4
 801edc4:	4606      	mov	r6, r0
 801edc6:	460f      	mov	r7, r1
 801edc8:	462b      	mov	r3, r5
 801edca:	ec51 0b19 	vmov	r0, r1, d9
 801edce:	f7fa fa13 	bl	80191f8 <__aeabi_dmul>
 801edd2:	4602      	mov	r2, r0
 801edd4:	460b      	mov	r3, r1
 801edd6:	4630      	mov	r0, r6
 801edd8:	4639      	mov	r1, r7
 801edda:	f7fa f857 	bl	8018e8c <__adddf3>
 801edde:	4606      	mov	r6, r0
 801ede0:	460f      	mov	r7, r1
 801ede2:	4602      	mov	r2, r0
 801ede4:	460b      	mov	r3, r1
 801ede6:	4640      	mov	r0, r8
 801ede8:	4649      	mov	r1, r9
 801edea:	f7fa f84f 	bl	8018e8c <__adddf3>
 801edee:	a33e      	add	r3, pc, #248	; (adr r3, 801eee8 <__ieee754_pow+0x738>)
 801edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf4:	2000      	movs	r0, #0
 801edf6:	4604      	mov	r4, r0
 801edf8:	460d      	mov	r5, r1
 801edfa:	f7fa f9fd 	bl	80191f8 <__aeabi_dmul>
 801edfe:	4642      	mov	r2, r8
 801ee00:	ec41 0b18 	vmov	d8, r0, r1
 801ee04:	464b      	mov	r3, r9
 801ee06:	4620      	mov	r0, r4
 801ee08:	4629      	mov	r1, r5
 801ee0a:	f7fa f83d 	bl	8018e88 <__aeabi_dsub>
 801ee0e:	4602      	mov	r2, r0
 801ee10:	460b      	mov	r3, r1
 801ee12:	4630      	mov	r0, r6
 801ee14:	4639      	mov	r1, r7
 801ee16:	f7fa f837 	bl	8018e88 <__aeabi_dsub>
 801ee1a:	a335      	add	r3, pc, #212	; (adr r3, 801eef0 <__ieee754_pow+0x740>)
 801ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee20:	f7fa f9ea 	bl	80191f8 <__aeabi_dmul>
 801ee24:	a334      	add	r3, pc, #208	; (adr r3, 801eef8 <__ieee754_pow+0x748>)
 801ee26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee2a:	4606      	mov	r6, r0
 801ee2c:	460f      	mov	r7, r1
 801ee2e:	4620      	mov	r0, r4
 801ee30:	4629      	mov	r1, r5
 801ee32:	f7fa f9e1 	bl	80191f8 <__aeabi_dmul>
 801ee36:	4602      	mov	r2, r0
 801ee38:	460b      	mov	r3, r1
 801ee3a:	4630      	mov	r0, r6
 801ee3c:	4639      	mov	r1, r7
 801ee3e:	f7fa f825 	bl	8018e8c <__adddf3>
 801ee42:	9a07      	ldr	r2, [sp, #28]
 801ee44:	4b37      	ldr	r3, [pc, #220]	; (801ef24 <__ieee754_pow+0x774>)
 801ee46:	4413      	add	r3, r2
 801ee48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee4c:	f7fa f81e 	bl	8018e8c <__adddf3>
 801ee50:	4682      	mov	sl, r0
 801ee52:	9805      	ldr	r0, [sp, #20]
 801ee54:	468b      	mov	fp, r1
 801ee56:	f7fa f965 	bl	8019124 <__aeabi_i2d>
 801ee5a:	9a07      	ldr	r2, [sp, #28]
 801ee5c:	4b32      	ldr	r3, [pc, #200]	; (801ef28 <__ieee754_pow+0x778>)
 801ee5e:	4413      	add	r3, r2
 801ee60:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ee64:	4606      	mov	r6, r0
 801ee66:	460f      	mov	r7, r1
 801ee68:	4652      	mov	r2, sl
 801ee6a:	465b      	mov	r3, fp
 801ee6c:	ec51 0b18 	vmov	r0, r1, d8
 801ee70:	f7fa f80c 	bl	8018e8c <__adddf3>
 801ee74:	4642      	mov	r2, r8
 801ee76:	464b      	mov	r3, r9
 801ee78:	f7fa f808 	bl	8018e8c <__adddf3>
 801ee7c:	4632      	mov	r2, r6
 801ee7e:	463b      	mov	r3, r7
 801ee80:	f7fa f804 	bl	8018e8c <__adddf3>
 801ee84:	2000      	movs	r0, #0
 801ee86:	4632      	mov	r2, r6
 801ee88:	463b      	mov	r3, r7
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	460d      	mov	r5, r1
 801ee8e:	f7f9 fffb 	bl	8018e88 <__aeabi_dsub>
 801ee92:	4642      	mov	r2, r8
 801ee94:	464b      	mov	r3, r9
 801ee96:	f7f9 fff7 	bl	8018e88 <__aeabi_dsub>
 801ee9a:	ec53 2b18 	vmov	r2, r3, d8
 801ee9e:	f7f9 fff3 	bl	8018e88 <__aeabi_dsub>
 801eea2:	4602      	mov	r2, r0
 801eea4:	460b      	mov	r3, r1
 801eea6:	4650      	mov	r0, sl
 801eea8:	4659      	mov	r1, fp
 801eeaa:	e610      	b.n	801eace <__ieee754_pow+0x31e>
 801eeac:	2401      	movs	r4, #1
 801eeae:	e6a1      	b.n	801ebf4 <__ieee754_pow+0x444>
 801eeb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801ef00 <__ieee754_pow+0x750>
 801eeb4:	e617      	b.n	801eae6 <__ieee754_pow+0x336>
 801eeb6:	bf00      	nop
 801eeb8:	4a454eef 	.word	0x4a454eef
 801eebc:	3fca7e28 	.word	0x3fca7e28
 801eec0:	93c9db65 	.word	0x93c9db65
 801eec4:	3fcd864a 	.word	0x3fcd864a
 801eec8:	a91d4101 	.word	0xa91d4101
 801eecc:	3fd17460 	.word	0x3fd17460
 801eed0:	518f264d 	.word	0x518f264d
 801eed4:	3fd55555 	.word	0x3fd55555
 801eed8:	db6fabff 	.word	0xdb6fabff
 801eedc:	3fdb6db6 	.word	0x3fdb6db6
 801eee0:	33333303 	.word	0x33333303
 801eee4:	3fe33333 	.word	0x3fe33333
 801eee8:	e0000000 	.word	0xe0000000
 801eeec:	3feec709 	.word	0x3feec709
 801eef0:	dc3a03fd 	.word	0xdc3a03fd
 801eef4:	3feec709 	.word	0x3feec709
 801eef8:	145b01f5 	.word	0x145b01f5
 801eefc:	be3e2fe0 	.word	0xbe3e2fe0
 801ef00:	00000000 	.word	0x00000000
 801ef04:	3ff00000 	.word	0x3ff00000
 801ef08:	7ff00000 	.word	0x7ff00000
 801ef0c:	43400000 	.word	0x43400000
 801ef10:	0003988e 	.word	0x0003988e
 801ef14:	000bb679 	.word	0x000bb679
 801ef18:	080528b0 	.word	0x080528b0
 801ef1c:	3ff00000 	.word	0x3ff00000
 801ef20:	40080000 	.word	0x40080000
 801ef24:	080528d0 	.word	0x080528d0
 801ef28:	080528c0 	.word	0x080528c0
 801ef2c:	a3b5      	add	r3, pc, #724	; (adr r3, 801f204 <__ieee754_pow+0xa54>)
 801ef2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef32:	4640      	mov	r0, r8
 801ef34:	4649      	mov	r1, r9
 801ef36:	f7f9 ffa9 	bl	8018e8c <__adddf3>
 801ef3a:	4622      	mov	r2, r4
 801ef3c:	ec41 0b1a 	vmov	d10, r0, r1
 801ef40:	462b      	mov	r3, r5
 801ef42:	4630      	mov	r0, r6
 801ef44:	4639      	mov	r1, r7
 801ef46:	f7f9 ff9f 	bl	8018e88 <__aeabi_dsub>
 801ef4a:	4602      	mov	r2, r0
 801ef4c:	460b      	mov	r3, r1
 801ef4e:	ec51 0b1a 	vmov	r0, r1, d10
 801ef52:	f7fa fbe1 	bl	8019718 <__aeabi_dcmpgt>
 801ef56:	2800      	cmp	r0, #0
 801ef58:	f47f ae04 	bne.w	801eb64 <__ieee754_pow+0x3b4>
 801ef5c:	4aa4      	ldr	r2, [pc, #656]	; (801f1f0 <__ieee754_pow+0xa40>)
 801ef5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ef62:	4293      	cmp	r3, r2
 801ef64:	f340 8108 	ble.w	801f178 <__ieee754_pow+0x9c8>
 801ef68:	151b      	asrs	r3, r3, #20
 801ef6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ef6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ef72:	fa4a f303 	asr.w	r3, sl, r3
 801ef76:	445b      	add	r3, fp
 801ef78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ef7c:	4e9d      	ldr	r6, [pc, #628]	; (801f1f4 <__ieee754_pow+0xa44>)
 801ef7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ef82:	4116      	asrs	r6, r2
 801ef84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ef88:	2000      	movs	r0, #0
 801ef8a:	ea23 0106 	bic.w	r1, r3, r6
 801ef8e:	f1c2 0214 	rsb	r2, r2, #20
 801ef92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ef96:	fa4a fa02 	asr.w	sl, sl, r2
 801ef9a:	f1bb 0f00 	cmp.w	fp, #0
 801ef9e:	4602      	mov	r2, r0
 801efa0:	460b      	mov	r3, r1
 801efa2:	4620      	mov	r0, r4
 801efa4:	4629      	mov	r1, r5
 801efa6:	bfb8      	it	lt
 801efa8:	f1ca 0a00 	rsblt	sl, sl, #0
 801efac:	f7f9 ff6c 	bl	8018e88 <__aeabi_dsub>
 801efb0:	ec41 0b19 	vmov	d9, r0, r1
 801efb4:	4642      	mov	r2, r8
 801efb6:	464b      	mov	r3, r9
 801efb8:	ec51 0b19 	vmov	r0, r1, d9
 801efbc:	f7f9 ff66 	bl	8018e8c <__adddf3>
 801efc0:	a37b      	add	r3, pc, #492	; (adr r3, 801f1b0 <__ieee754_pow+0xa00>)
 801efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efc6:	2000      	movs	r0, #0
 801efc8:	4604      	mov	r4, r0
 801efca:	460d      	mov	r5, r1
 801efcc:	f7fa f914 	bl	80191f8 <__aeabi_dmul>
 801efd0:	ec53 2b19 	vmov	r2, r3, d9
 801efd4:	4606      	mov	r6, r0
 801efd6:	460f      	mov	r7, r1
 801efd8:	4620      	mov	r0, r4
 801efda:	4629      	mov	r1, r5
 801efdc:	f7f9 ff54 	bl	8018e88 <__aeabi_dsub>
 801efe0:	4602      	mov	r2, r0
 801efe2:	460b      	mov	r3, r1
 801efe4:	4640      	mov	r0, r8
 801efe6:	4649      	mov	r1, r9
 801efe8:	f7f9 ff4e 	bl	8018e88 <__aeabi_dsub>
 801efec:	a372      	add	r3, pc, #456	; (adr r3, 801f1b8 <__ieee754_pow+0xa08>)
 801efee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eff2:	f7fa f901 	bl	80191f8 <__aeabi_dmul>
 801eff6:	a372      	add	r3, pc, #456	; (adr r3, 801f1c0 <__ieee754_pow+0xa10>)
 801eff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801effc:	4680      	mov	r8, r0
 801effe:	4689      	mov	r9, r1
 801f000:	4620      	mov	r0, r4
 801f002:	4629      	mov	r1, r5
 801f004:	f7fa f8f8 	bl	80191f8 <__aeabi_dmul>
 801f008:	4602      	mov	r2, r0
 801f00a:	460b      	mov	r3, r1
 801f00c:	4640      	mov	r0, r8
 801f00e:	4649      	mov	r1, r9
 801f010:	f7f9 ff3c 	bl	8018e8c <__adddf3>
 801f014:	4604      	mov	r4, r0
 801f016:	460d      	mov	r5, r1
 801f018:	4602      	mov	r2, r0
 801f01a:	460b      	mov	r3, r1
 801f01c:	4630      	mov	r0, r6
 801f01e:	4639      	mov	r1, r7
 801f020:	f7f9 ff34 	bl	8018e8c <__adddf3>
 801f024:	4632      	mov	r2, r6
 801f026:	463b      	mov	r3, r7
 801f028:	4680      	mov	r8, r0
 801f02a:	4689      	mov	r9, r1
 801f02c:	f7f9 ff2c 	bl	8018e88 <__aeabi_dsub>
 801f030:	4602      	mov	r2, r0
 801f032:	460b      	mov	r3, r1
 801f034:	4620      	mov	r0, r4
 801f036:	4629      	mov	r1, r5
 801f038:	f7f9 ff26 	bl	8018e88 <__aeabi_dsub>
 801f03c:	4642      	mov	r2, r8
 801f03e:	4606      	mov	r6, r0
 801f040:	460f      	mov	r7, r1
 801f042:	464b      	mov	r3, r9
 801f044:	4640      	mov	r0, r8
 801f046:	4649      	mov	r1, r9
 801f048:	f7fa f8d6 	bl	80191f8 <__aeabi_dmul>
 801f04c:	a35e      	add	r3, pc, #376	; (adr r3, 801f1c8 <__ieee754_pow+0xa18>)
 801f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f052:	4604      	mov	r4, r0
 801f054:	460d      	mov	r5, r1
 801f056:	f7fa f8cf 	bl	80191f8 <__aeabi_dmul>
 801f05a:	a35d      	add	r3, pc, #372	; (adr r3, 801f1d0 <__ieee754_pow+0xa20>)
 801f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f060:	f7f9 ff12 	bl	8018e88 <__aeabi_dsub>
 801f064:	4622      	mov	r2, r4
 801f066:	462b      	mov	r3, r5
 801f068:	f7fa f8c6 	bl	80191f8 <__aeabi_dmul>
 801f06c:	a35a      	add	r3, pc, #360	; (adr r3, 801f1d8 <__ieee754_pow+0xa28>)
 801f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f072:	f7f9 ff0b 	bl	8018e8c <__adddf3>
 801f076:	4622      	mov	r2, r4
 801f078:	462b      	mov	r3, r5
 801f07a:	f7fa f8bd 	bl	80191f8 <__aeabi_dmul>
 801f07e:	a358      	add	r3, pc, #352	; (adr r3, 801f1e0 <__ieee754_pow+0xa30>)
 801f080:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f084:	f7f9 ff00 	bl	8018e88 <__aeabi_dsub>
 801f088:	4622      	mov	r2, r4
 801f08a:	462b      	mov	r3, r5
 801f08c:	f7fa f8b4 	bl	80191f8 <__aeabi_dmul>
 801f090:	a355      	add	r3, pc, #340	; (adr r3, 801f1e8 <__ieee754_pow+0xa38>)
 801f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f096:	f7f9 fef9 	bl	8018e8c <__adddf3>
 801f09a:	4622      	mov	r2, r4
 801f09c:	462b      	mov	r3, r5
 801f09e:	f7fa f8ab 	bl	80191f8 <__aeabi_dmul>
 801f0a2:	4602      	mov	r2, r0
 801f0a4:	460b      	mov	r3, r1
 801f0a6:	4640      	mov	r0, r8
 801f0a8:	4649      	mov	r1, r9
 801f0aa:	f7f9 feed 	bl	8018e88 <__aeabi_dsub>
 801f0ae:	4604      	mov	r4, r0
 801f0b0:	460d      	mov	r5, r1
 801f0b2:	4602      	mov	r2, r0
 801f0b4:	460b      	mov	r3, r1
 801f0b6:	4640      	mov	r0, r8
 801f0b8:	4649      	mov	r1, r9
 801f0ba:	f7fa f89d 	bl	80191f8 <__aeabi_dmul>
 801f0be:	2200      	movs	r2, #0
 801f0c0:	ec41 0b19 	vmov	d9, r0, r1
 801f0c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f0c8:	4620      	mov	r0, r4
 801f0ca:	4629      	mov	r1, r5
 801f0cc:	f7f9 fedc 	bl	8018e88 <__aeabi_dsub>
 801f0d0:	4602      	mov	r2, r0
 801f0d2:	460b      	mov	r3, r1
 801f0d4:	ec51 0b19 	vmov	r0, r1, d9
 801f0d8:	f7fa f9b8 	bl	801944c <__aeabi_ddiv>
 801f0dc:	4632      	mov	r2, r6
 801f0de:	4604      	mov	r4, r0
 801f0e0:	460d      	mov	r5, r1
 801f0e2:	463b      	mov	r3, r7
 801f0e4:	4640      	mov	r0, r8
 801f0e6:	4649      	mov	r1, r9
 801f0e8:	f7fa f886 	bl	80191f8 <__aeabi_dmul>
 801f0ec:	4632      	mov	r2, r6
 801f0ee:	463b      	mov	r3, r7
 801f0f0:	f7f9 fecc 	bl	8018e8c <__adddf3>
 801f0f4:	4602      	mov	r2, r0
 801f0f6:	460b      	mov	r3, r1
 801f0f8:	4620      	mov	r0, r4
 801f0fa:	4629      	mov	r1, r5
 801f0fc:	f7f9 fec4 	bl	8018e88 <__aeabi_dsub>
 801f100:	4642      	mov	r2, r8
 801f102:	464b      	mov	r3, r9
 801f104:	f7f9 fec0 	bl	8018e88 <__aeabi_dsub>
 801f108:	460b      	mov	r3, r1
 801f10a:	4602      	mov	r2, r0
 801f10c:	493a      	ldr	r1, [pc, #232]	; (801f1f8 <__ieee754_pow+0xa48>)
 801f10e:	2000      	movs	r0, #0
 801f110:	f7f9 feba 	bl	8018e88 <__aeabi_dsub>
 801f114:	ec41 0b10 	vmov	d0, r0, r1
 801f118:	ee10 3a90 	vmov	r3, s1
 801f11c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f124:	da2b      	bge.n	801f17e <__ieee754_pow+0x9ce>
 801f126:	4650      	mov	r0, sl
 801f128:	f000 f966 	bl	801f3f8 <scalbn>
 801f12c:	ec51 0b10 	vmov	r0, r1, d0
 801f130:	ec53 2b18 	vmov	r2, r3, d8
 801f134:	f7ff bbed 	b.w	801e912 <__ieee754_pow+0x162>
 801f138:	4b30      	ldr	r3, [pc, #192]	; (801f1fc <__ieee754_pow+0xa4c>)
 801f13a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801f13e:	429e      	cmp	r6, r3
 801f140:	f77f af0c 	ble.w	801ef5c <__ieee754_pow+0x7ac>
 801f144:	4b2e      	ldr	r3, [pc, #184]	; (801f200 <__ieee754_pow+0xa50>)
 801f146:	440b      	add	r3, r1
 801f148:	4303      	orrs	r3, r0
 801f14a:	d009      	beq.n	801f160 <__ieee754_pow+0x9b0>
 801f14c:	ec51 0b18 	vmov	r0, r1, d8
 801f150:	2200      	movs	r2, #0
 801f152:	2300      	movs	r3, #0
 801f154:	f7fa fac2 	bl	80196dc <__aeabi_dcmplt>
 801f158:	3800      	subs	r0, #0
 801f15a:	bf18      	it	ne
 801f15c:	2001      	movne	r0, #1
 801f15e:	e447      	b.n	801e9f0 <__ieee754_pow+0x240>
 801f160:	4622      	mov	r2, r4
 801f162:	462b      	mov	r3, r5
 801f164:	f7f9 fe90 	bl	8018e88 <__aeabi_dsub>
 801f168:	4642      	mov	r2, r8
 801f16a:	464b      	mov	r3, r9
 801f16c:	f7fa faca 	bl	8019704 <__aeabi_dcmpge>
 801f170:	2800      	cmp	r0, #0
 801f172:	f43f aef3 	beq.w	801ef5c <__ieee754_pow+0x7ac>
 801f176:	e7e9      	b.n	801f14c <__ieee754_pow+0x99c>
 801f178:	f04f 0a00 	mov.w	sl, #0
 801f17c:	e71a      	b.n	801efb4 <__ieee754_pow+0x804>
 801f17e:	ec51 0b10 	vmov	r0, r1, d0
 801f182:	4619      	mov	r1, r3
 801f184:	e7d4      	b.n	801f130 <__ieee754_pow+0x980>
 801f186:	491c      	ldr	r1, [pc, #112]	; (801f1f8 <__ieee754_pow+0xa48>)
 801f188:	2000      	movs	r0, #0
 801f18a:	f7ff bb30 	b.w	801e7ee <__ieee754_pow+0x3e>
 801f18e:	2000      	movs	r0, #0
 801f190:	2100      	movs	r1, #0
 801f192:	f7ff bb2c 	b.w	801e7ee <__ieee754_pow+0x3e>
 801f196:	4630      	mov	r0, r6
 801f198:	4639      	mov	r1, r7
 801f19a:	f7ff bb28 	b.w	801e7ee <__ieee754_pow+0x3e>
 801f19e:	9204      	str	r2, [sp, #16]
 801f1a0:	f7ff bb7a 	b.w	801e898 <__ieee754_pow+0xe8>
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	f7ff bb64 	b.w	801e872 <__ieee754_pow+0xc2>
 801f1aa:	bf00      	nop
 801f1ac:	f3af 8000 	nop.w
 801f1b0:	00000000 	.word	0x00000000
 801f1b4:	3fe62e43 	.word	0x3fe62e43
 801f1b8:	fefa39ef 	.word	0xfefa39ef
 801f1bc:	3fe62e42 	.word	0x3fe62e42
 801f1c0:	0ca86c39 	.word	0x0ca86c39
 801f1c4:	be205c61 	.word	0xbe205c61
 801f1c8:	72bea4d0 	.word	0x72bea4d0
 801f1cc:	3e663769 	.word	0x3e663769
 801f1d0:	c5d26bf1 	.word	0xc5d26bf1
 801f1d4:	3ebbbd41 	.word	0x3ebbbd41
 801f1d8:	af25de2c 	.word	0xaf25de2c
 801f1dc:	3f11566a 	.word	0x3f11566a
 801f1e0:	16bebd93 	.word	0x16bebd93
 801f1e4:	3f66c16c 	.word	0x3f66c16c
 801f1e8:	5555553e 	.word	0x5555553e
 801f1ec:	3fc55555 	.word	0x3fc55555
 801f1f0:	3fe00000 	.word	0x3fe00000
 801f1f4:	000fffff 	.word	0x000fffff
 801f1f8:	3ff00000 	.word	0x3ff00000
 801f1fc:	4090cbff 	.word	0x4090cbff
 801f200:	3f6f3400 	.word	0x3f6f3400
 801f204:	652b82fe 	.word	0x652b82fe
 801f208:	3c971547 	.word	0x3c971547

0801f20c <__ieee754_sqrt>:
 801f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f210:	ec55 4b10 	vmov	r4, r5, d0
 801f214:	4e55      	ldr	r6, [pc, #340]	; (801f36c <__ieee754_sqrt+0x160>)
 801f216:	43ae      	bics	r6, r5
 801f218:	ee10 0a10 	vmov	r0, s0
 801f21c:	ee10 3a10 	vmov	r3, s0
 801f220:	462a      	mov	r2, r5
 801f222:	4629      	mov	r1, r5
 801f224:	d110      	bne.n	801f248 <__ieee754_sqrt+0x3c>
 801f226:	ee10 2a10 	vmov	r2, s0
 801f22a:	462b      	mov	r3, r5
 801f22c:	f7f9 ffe4 	bl	80191f8 <__aeabi_dmul>
 801f230:	4602      	mov	r2, r0
 801f232:	460b      	mov	r3, r1
 801f234:	4620      	mov	r0, r4
 801f236:	4629      	mov	r1, r5
 801f238:	f7f9 fe28 	bl	8018e8c <__adddf3>
 801f23c:	4604      	mov	r4, r0
 801f23e:	460d      	mov	r5, r1
 801f240:	ec45 4b10 	vmov	d0, r4, r5
 801f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f248:	2d00      	cmp	r5, #0
 801f24a:	dc10      	bgt.n	801f26e <__ieee754_sqrt+0x62>
 801f24c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f250:	4330      	orrs	r0, r6
 801f252:	d0f5      	beq.n	801f240 <__ieee754_sqrt+0x34>
 801f254:	b15d      	cbz	r5, 801f26e <__ieee754_sqrt+0x62>
 801f256:	ee10 2a10 	vmov	r2, s0
 801f25a:	462b      	mov	r3, r5
 801f25c:	ee10 0a10 	vmov	r0, s0
 801f260:	f7f9 fe12 	bl	8018e88 <__aeabi_dsub>
 801f264:	4602      	mov	r2, r0
 801f266:	460b      	mov	r3, r1
 801f268:	f7fa f8f0 	bl	801944c <__aeabi_ddiv>
 801f26c:	e7e6      	b.n	801f23c <__ieee754_sqrt+0x30>
 801f26e:	1512      	asrs	r2, r2, #20
 801f270:	d074      	beq.n	801f35c <__ieee754_sqrt+0x150>
 801f272:	07d4      	lsls	r4, r2, #31
 801f274:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801f278:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801f27c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801f280:	bf5e      	ittt	pl
 801f282:	0fda      	lsrpl	r2, r3, #31
 801f284:	005b      	lslpl	r3, r3, #1
 801f286:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801f28a:	2400      	movs	r4, #0
 801f28c:	0fda      	lsrs	r2, r3, #31
 801f28e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f292:	107f      	asrs	r7, r7, #1
 801f294:	005b      	lsls	r3, r3, #1
 801f296:	2516      	movs	r5, #22
 801f298:	4620      	mov	r0, r4
 801f29a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f29e:	1886      	adds	r6, r0, r2
 801f2a0:	428e      	cmp	r6, r1
 801f2a2:	bfde      	ittt	le
 801f2a4:	1b89      	suble	r1, r1, r6
 801f2a6:	18b0      	addle	r0, r6, r2
 801f2a8:	18a4      	addle	r4, r4, r2
 801f2aa:	0049      	lsls	r1, r1, #1
 801f2ac:	3d01      	subs	r5, #1
 801f2ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801f2b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801f2b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f2ba:	d1f0      	bne.n	801f29e <__ieee754_sqrt+0x92>
 801f2bc:	462a      	mov	r2, r5
 801f2be:	f04f 0e20 	mov.w	lr, #32
 801f2c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f2c6:	4281      	cmp	r1, r0
 801f2c8:	eb06 0c05 	add.w	ip, r6, r5
 801f2cc:	dc02      	bgt.n	801f2d4 <__ieee754_sqrt+0xc8>
 801f2ce:	d113      	bne.n	801f2f8 <__ieee754_sqrt+0xec>
 801f2d0:	459c      	cmp	ip, r3
 801f2d2:	d811      	bhi.n	801f2f8 <__ieee754_sqrt+0xec>
 801f2d4:	f1bc 0f00 	cmp.w	ip, #0
 801f2d8:	eb0c 0506 	add.w	r5, ip, r6
 801f2dc:	da43      	bge.n	801f366 <__ieee754_sqrt+0x15a>
 801f2de:	2d00      	cmp	r5, #0
 801f2e0:	db41      	blt.n	801f366 <__ieee754_sqrt+0x15a>
 801f2e2:	f100 0801 	add.w	r8, r0, #1
 801f2e6:	1a09      	subs	r1, r1, r0
 801f2e8:	459c      	cmp	ip, r3
 801f2ea:	bf88      	it	hi
 801f2ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801f2f0:	eba3 030c 	sub.w	r3, r3, ip
 801f2f4:	4432      	add	r2, r6
 801f2f6:	4640      	mov	r0, r8
 801f2f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801f2fc:	f1be 0e01 	subs.w	lr, lr, #1
 801f300:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801f304:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f308:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f30c:	d1db      	bne.n	801f2c6 <__ieee754_sqrt+0xba>
 801f30e:	430b      	orrs	r3, r1
 801f310:	d006      	beq.n	801f320 <__ieee754_sqrt+0x114>
 801f312:	1c50      	adds	r0, r2, #1
 801f314:	bf13      	iteet	ne
 801f316:	3201      	addne	r2, #1
 801f318:	3401      	addeq	r4, #1
 801f31a:	4672      	moveq	r2, lr
 801f31c:	f022 0201 	bicne.w	r2, r2, #1
 801f320:	1063      	asrs	r3, r4, #1
 801f322:	0852      	lsrs	r2, r2, #1
 801f324:	07e1      	lsls	r1, r4, #31
 801f326:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f32a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f32e:	bf48      	it	mi
 801f330:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801f334:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801f338:	4614      	mov	r4, r2
 801f33a:	e781      	b.n	801f240 <__ieee754_sqrt+0x34>
 801f33c:	0ad9      	lsrs	r1, r3, #11
 801f33e:	3815      	subs	r0, #21
 801f340:	055b      	lsls	r3, r3, #21
 801f342:	2900      	cmp	r1, #0
 801f344:	d0fa      	beq.n	801f33c <__ieee754_sqrt+0x130>
 801f346:	02cd      	lsls	r5, r1, #11
 801f348:	d50a      	bpl.n	801f360 <__ieee754_sqrt+0x154>
 801f34a:	f1c2 0420 	rsb	r4, r2, #32
 801f34e:	fa23 f404 	lsr.w	r4, r3, r4
 801f352:	1e55      	subs	r5, r2, #1
 801f354:	4093      	lsls	r3, r2
 801f356:	4321      	orrs	r1, r4
 801f358:	1b42      	subs	r2, r0, r5
 801f35a:	e78a      	b.n	801f272 <__ieee754_sqrt+0x66>
 801f35c:	4610      	mov	r0, r2
 801f35e:	e7f0      	b.n	801f342 <__ieee754_sqrt+0x136>
 801f360:	0049      	lsls	r1, r1, #1
 801f362:	3201      	adds	r2, #1
 801f364:	e7ef      	b.n	801f346 <__ieee754_sqrt+0x13a>
 801f366:	4680      	mov	r8, r0
 801f368:	e7bd      	b.n	801f2e6 <__ieee754_sqrt+0xda>
 801f36a:	bf00      	nop
 801f36c:	7ff00000 	.word	0x7ff00000

0801f370 <with_errno>:
 801f370:	b570      	push	{r4, r5, r6, lr}
 801f372:	4604      	mov	r4, r0
 801f374:	460d      	mov	r5, r1
 801f376:	4616      	mov	r6, r2
 801f378:	f7fa fc6c 	bl	8019c54 <__errno>
 801f37c:	4629      	mov	r1, r5
 801f37e:	6006      	str	r6, [r0, #0]
 801f380:	4620      	mov	r0, r4
 801f382:	bd70      	pop	{r4, r5, r6, pc}

0801f384 <xflow>:
 801f384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f386:	4614      	mov	r4, r2
 801f388:	461d      	mov	r5, r3
 801f38a:	b108      	cbz	r0, 801f390 <xflow+0xc>
 801f38c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f390:	e9cd 2300 	strd	r2, r3, [sp]
 801f394:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f398:	4620      	mov	r0, r4
 801f39a:	4629      	mov	r1, r5
 801f39c:	f7f9 ff2c 	bl	80191f8 <__aeabi_dmul>
 801f3a0:	2222      	movs	r2, #34	; 0x22
 801f3a2:	b003      	add	sp, #12
 801f3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f3a8:	f7ff bfe2 	b.w	801f370 <with_errno>

0801f3ac <__math_uflow>:
 801f3ac:	b508      	push	{r3, lr}
 801f3ae:	2200      	movs	r2, #0
 801f3b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f3b4:	f7ff ffe6 	bl	801f384 <xflow>
 801f3b8:	ec41 0b10 	vmov	d0, r0, r1
 801f3bc:	bd08      	pop	{r3, pc}

0801f3be <__math_oflow>:
 801f3be:	b508      	push	{r3, lr}
 801f3c0:	2200      	movs	r2, #0
 801f3c2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f3c6:	f7ff ffdd 	bl	801f384 <xflow>
 801f3ca:	ec41 0b10 	vmov	d0, r0, r1
 801f3ce:	bd08      	pop	{r3, pc}

0801f3d0 <fabs>:
 801f3d0:	ec51 0b10 	vmov	r0, r1, d0
 801f3d4:	ee10 2a10 	vmov	r2, s0
 801f3d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f3dc:	ec43 2b10 	vmov	d0, r2, r3
 801f3e0:	4770      	bx	lr

0801f3e2 <finite>:
 801f3e2:	b082      	sub	sp, #8
 801f3e4:	ed8d 0b00 	vstr	d0, [sp]
 801f3e8:	9801      	ldr	r0, [sp, #4]
 801f3ea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f3ee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f3f2:	0fc0      	lsrs	r0, r0, #31
 801f3f4:	b002      	add	sp, #8
 801f3f6:	4770      	bx	lr

0801f3f8 <scalbn>:
 801f3f8:	b570      	push	{r4, r5, r6, lr}
 801f3fa:	ec55 4b10 	vmov	r4, r5, d0
 801f3fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f402:	4606      	mov	r6, r0
 801f404:	462b      	mov	r3, r5
 801f406:	b99a      	cbnz	r2, 801f430 <scalbn+0x38>
 801f408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f40c:	4323      	orrs	r3, r4
 801f40e:	d036      	beq.n	801f47e <scalbn+0x86>
 801f410:	4b39      	ldr	r3, [pc, #228]	; (801f4f8 <scalbn+0x100>)
 801f412:	4629      	mov	r1, r5
 801f414:	ee10 0a10 	vmov	r0, s0
 801f418:	2200      	movs	r2, #0
 801f41a:	f7f9 feed 	bl	80191f8 <__aeabi_dmul>
 801f41e:	4b37      	ldr	r3, [pc, #220]	; (801f4fc <scalbn+0x104>)
 801f420:	429e      	cmp	r6, r3
 801f422:	4604      	mov	r4, r0
 801f424:	460d      	mov	r5, r1
 801f426:	da10      	bge.n	801f44a <scalbn+0x52>
 801f428:	a32b      	add	r3, pc, #172	; (adr r3, 801f4d8 <scalbn+0xe0>)
 801f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f42e:	e03a      	b.n	801f4a6 <scalbn+0xae>
 801f430:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f434:	428a      	cmp	r2, r1
 801f436:	d10c      	bne.n	801f452 <scalbn+0x5a>
 801f438:	ee10 2a10 	vmov	r2, s0
 801f43c:	4620      	mov	r0, r4
 801f43e:	4629      	mov	r1, r5
 801f440:	f7f9 fd24 	bl	8018e8c <__adddf3>
 801f444:	4604      	mov	r4, r0
 801f446:	460d      	mov	r5, r1
 801f448:	e019      	b.n	801f47e <scalbn+0x86>
 801f44a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f44e:	460b      	mov	r3, r1
 801f450:	3a36      	subs	r2, #54	; 0x36
 801f452:	4432      	add	r2, r6
 801f454:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f458:	428a      	cmp	r2, r1
 801f45a:	dd08      	ble.n	801f46e <scalbn+0x76>
 801f45c:	2d00      	cmp	r5, #0
 801f45e:	a120      	add	r1, pc, #128	; (adr r1, 801f4e0 <scalbn+0xe8>)
 801f460:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f464:	da1c      	bge.n	801f4a0 <scalbn+0xa8>
 801f466:	a120      	add	r1, pc, #128	; (adr r1, 801f4e8 <scalbn+0xf0>)
 801f468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f46c:	e018      	b.n	801f4a0 <scalbn+0xa8>
 801f46e:	2a00      	cmp	r2, #0
 801f470:	dd08      	ble.n	801f484 <scalbn+0x8c>
 801f472:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f47a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f47e:	ec45 4b10 	vmov	d0, r4, r5
 801f482:	bd70      	pop	{r4, r5, r6, pc}
 801f484:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f488:	da19      	bge.n	801f4be <scalbn+0xc6>
 801f48a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f48e:	429e      	cmp	r6, r3
 801f490:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f494:	dd0a      	ble.n	801f4ac <scalbn+0xb4>
 801f496:	a112      	add	r1, pc, #72	; (adr r1, 801f4e0 <scalbn+0xe8>)
 801f498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d1e2      	bne.n	801f466 <scalbn+0x6e>
 801f4a0:	a30f      	add	r3, pc, #60	; (adr r3, 801f4e0 <scalbn+0xe8>)
 801f4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4a6:	f7f9 fea7 	bl	80191f8 <__aeabi_dmul>
 801f4aa:	e7cb      	b.n	801f444 <scalbn+0x4c>
 801f4ac:	a10a      	add	r1, pc, #40	; (adr r1, 801f4d8 <scalbn+0xe0>)
 801f4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d0b8      	beq.n	801f428 <scalbn+0x30>
 801f4b6:	a10e      	add	r1, pc, #56	; (adr r1, 801f4f0 <scalbn+0xf8>)
 801f4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f4bc:	e7b4      	b.n	801f428 <scalbn+0x30>
 801f4be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f4c2:	3236      	adds	r2, #54	; 0x36
 801f4c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f4c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f4cc:	4620      	mov	r0, r4
 801f4ce:	4b0c      	ldr	r3, [pc, #48]	; (801f500 <scalbn+0x108>)
 801f4d0:	2200      	movs	r2, #0
 801f4d2:	e7e8      	b.n	801f4a6 <scalbn+0xae>
 801f4d4:	f3af 8000 	nop.w
 801f4d8:	c2f8f359 	.word	0xc2f8f359
 801f4dc:	01a56e1f 	.word	0x01a56e1f
 801f4e0:	8800759c 	.word	0x8800759c
 801f4e4:	7e37e43c 	.word	0x7e37e43c
 801f4e8:	8800759c 	.word	0x8800759c
 801f4ec:	fe37e43c 	.word	0xfe37e43c
 801f4f0:	c2f8f359 	.word	0xc2f8f359
 801f4f4:	81a56e1f 	.word	0x81a56e1f
 801f4f8:	43500000 	.word	0x43500000
 801f4fc:	ffff3cb0 	.word	0xffff3cb0
 801f500:	3c900000 	.word	0x3c900000

0801f504 <_init>:
 801f504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f506:	bf00      	nop
 801f508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f50a:	bc08      	pop	{r3}
 801f50c:	469e      	mov	lr, r3
 801f50e:	4770      	bx	lr

0801f510 <_fini>:
 801f510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f512:	bf00      	nop
 801f514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f516:	bc08      	pop	{r3}
 801f518:	469e      	mov	lr, r3
 801f51a:	4770      	bx	lr
