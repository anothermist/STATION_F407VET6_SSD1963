
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e9ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000333c8  0801eb40  0801eb40  0002eb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08051f08  08051f08  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08051f08  08051f08  00061f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08051f10  08051f10  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08051f10  08051f10  00061f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08051f14  08051f14  00061f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08051f18  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          0000072c  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000964  20000964  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb73  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003275  00000000  00000000  0008bddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  0008f050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  0008f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019711  00000000  00000000  0008f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf93e  00000000  00000000  000a8821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017815f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  001781b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024b72  00000000  00000000  0017ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801eb24 	.word	0x0801eb24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801eb24 	.word	0x0801eb24

080001d0 <AT24XX_IsConnected>:

#if (FREERTOS_IS_ENABLE == 1)
#include "cmsis_os.h"
#endif

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, 100) == HAL_OK)
 80001d4:	2364      	movs	r3, #100	; 0x64
 80001d6:	2201      	movs	r2, #1
 80001d8:	21ae      	movs	r1, #174	; 0xae
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001dc:	f00d f934 	bl	800d448 <HAL_I2C_IsDeviceReady>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <AT24XX_IsConnected+0x1a>
        return true;
 80001e6:	2301      	movs	r3, #1
 80001e8:	e001      	b.n	80001ee <AT24XX_IsConnected+0x1e>
    else
        return false;
 80001ea:	2300      	movs	r3, #0
 80001ec:	bf00      	nop
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
    if(size_of_data > 16)
        return false;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
    if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
        return false;
 800020c:	2300      	movs	r3, #0
 800020e:	e016      	b.n	800023e <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
    if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, 100) == HAL_OK)
#else
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	2164      	movs	r1, #100	; 0x64
 8000218:	9102      	str	r1, [sp, #8]
 800021a:	9301      	str	r3, [sp, #4]
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2310      	movs	r3, #16
 8000222:	21ae      	movs	r1, #174	; 0xae
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000226:	f00c f989 	bl	800c53c <HAL_I2C_Mem_Write>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d104      	bne.n	800023a <AT24XX_Save+0x42>
#endif
    {
#if (FREERTOS_IS_ENABLE == 1)
        osDelay(5);
#else
        HAL_Delay(5);
 8000230:	2005      	movs	r0, #5
 8000232:	f006 f84b 	bl	80062cc <HAL_Delay>
#endif
        return true;
 8000236:	2301      	movs	r3, #1
 8000238:	e001      	b.n	800023e <AT24XX_Save+0x46>
    } else
        return false;
 800023a:	2300      	movs	r3, #0
 800023c:	bf00      	nop
}
 800023e:	4618      	mov	r0, r3
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
    if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, 100) == HAL_OK)
#else
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	2164      	movs	r1, #100	; 0x64
 8000262:	9102      	str	r1, [sp, #8]
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2310      	movs	r3, #16
 800026c:	21ae      	movs	r1, #174	; 0xae
 800026e:	4807      	ldr	r0, [pc, #28]	; (800028c <AT24XX_Load+0x40>)
 8000270:	f00c fa5e 	bl	800c730 <HAL_I2C_Mem_Read>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d101      	bne.n	800027e <AT24XX_Load+0x32>
                         size_of_data, 100) == HAL_OK)
#endif
    {
        return true;
 800027a:	2301      	movs	r3, #1
 800027c:	e001      	b.n	8000282 <AT24XX_Load+0x36>
    } else
        return false;
 800027e:	2300      	movs	r3, #0
 8000280:	bf00      	nop
}
 8000282:	4618      	mov	r0, r3
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
    uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
    AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
    return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
    uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
    AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 fb9c 	bl	8018a6c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 f8b3 	bl	80184ac <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d fc4b 	bl	801dbf0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 fa59 	bl	8018818 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f018 fd4b 	bl	8018e08 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 f9e6 	bl	8018768 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 f9cd 	bl	8018744 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d fc9b 	bl	801dcf0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00a fd1f 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00a fe12 	bl	800b040 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a fca7 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00a fd9a 	bl	800b040 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a fc0a 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00a fcfe 	bl	800b040 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fb26 	bl	800ae46 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fb1a 	bl	800ae46 <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fb0e 	bl	800ae46 <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fb04 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a fbf9 	bl	800b040 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fad6 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a fbcb 	bl	800b040 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a fa72 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fb67 	bl	800b040 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a fa5f 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fb53 	bl	800b040 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f017 febc 	bl	8018818 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f017 fcfb 	bl	80184ac <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f017 ffd5 	bl	8018a6c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d f90b 	bl	801dcf0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f017 fe98 	bl	8018818 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f017 fe90 	bl	8018818 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f017 ffb1 	bl	8018a6c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 fcc4 	bl	80184a8 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f017 fe73 	bl	8018818 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 fcb7 	bl	80184ac <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f017 fe38 	bl	8018818 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 fc77 	bl	80184ac <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f017 ff51 	bl	8018a6c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f017 fe1f 	bl	8018818 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f017 fe16 	bl	8018818 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d f876 	bl	801dcf0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f017 fe03 	bl	8018818 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 fc42 	bl	80184ac <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f017 ff1c 	bl	8018a6c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	21d0      	movs	r1, #208	; 0xd0
 8000d0a:	4827      	ldr	r0, [pc, #156]	; (8000da8 <DS3231_Update+0xb2>)
 8000d0c:	f00a f89b 	bl	800ae46 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2313      	movs	r3, #19
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <DS3231_Update+0xb6>)
 8000d18:	21d0      	movs	r1, #208	; 0xd0
 8000d1a:	4823      	ldr	r0, [pc, #140]	; (8000da8 <DS3231_Update+0xb2>)
 8000d1c:	f00a f990 	bl	800b040 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <DS3231_Update+0xb6>)
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <DS3231_Update+0xb6>)
 8000d2a:	785a      	ldrb	r2, [r3, #1]
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <DS3231_Update+0xb6>)
 8000d32:	789a      	ldrb	r2, [r3, #2]
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <DS3231_Update+0xb6>)
 8000d3a:	78da      	ldrb	r2, [r3, #3]
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <DS3231_Update+0xb6>)
 8000d42:	791a      	ldrb	r2, [r3, #4]
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <DS3231_Update+0xb6>)
 8000d4a:	795a      	ldrb	r2, [r3, #5]
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <DS3231_Update+0xb6>)
 8000d52:	799a      	ldrb	r2, [r3, #6]
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <DS3231_Update+0xb6>)
 8000d5a:	79da      	ldrb	r2, [r3, #7]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <DS3231_Update+0xb6>)
 8000d62:	7a1a      	ldrb	r2, [r3, #8]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <DS3231_Update+0xb6>)
 8000d6a:	7a5a      	ldrb	r2, [r3, #9]
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <DS3231_Update+0xb6>)
 8000d72:	7a9a      	ldrb	r2, [r3, #10]
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <DS3231_Update+0xb6>)
 8000d7a:	7ada      	ldrb	r2, [r3, #11]
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <DS3231_Update+0xb6>)
 8000d82:	7b1a      	ldrb	r2, [r3, #12]
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <DS3231_Update+0xb6>)
 8000d8a:	7b5a      	ldrb	r2, [r3, #13]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <DS3231_Update+0xb6>)
 8000d92:	7b9a      	ldrb	r2, [r3, #14]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <DS3231_Update+0xb6>)
 8000d9a:	7bda      	ldrb	r2, [r3, #15]
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	741a      	strb	r2, [r3, #16]
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200002bc 	.word	0x200002bc
 8000dac:	20000280 	.word	0x20000280
 8000db0:	20000294 	.word	0x20000294

08000db4 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000db8:	f7ff ff9d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <DS3231_getSec+0x18>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff7f 	bl	8000cc4 <bcdToDec>
 8000dc6:	4603      	mov	r3, r0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000280 	.word	0x20000280

08000dd0 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd4:	f7ff ff8f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DS3231_getMin+0x18>)
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff71 	bl	8000cc4 <bcdToDec>
 8000de2:	4603      	mov	r3, r0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000280 	.word	0x20000280

08000dec <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df0:	f7ff ff81 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <DS3231_getHrs+0x18>)
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff63 	bl	8000cc4 <bcdToDec>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000280 	.word	0x20000280

08000e08 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e0c:	f7ff ff73 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <DS3231_getDay+0x18>)
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff55 	bl	8000cc4 <bcdToDec>
 8000e1a:	4603      	mov	r3, r0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000280 	.word	0x20000280

08000e24 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e28:	f7ff ff65 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <DS3231_getDate+0x18>)
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff47 	bl	8000cc4 <bcdToDec>
 8000e36:	4603      	mov	r3, r0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000280 	.word	0x20000280

08000e40 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e44:	f7ff ff57 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <DS3231_getMonth+0x18>)
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff39 	bl	8000cc4 <bcdToDec>
 8000e52:	4603      	mov	r3, r0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000280 	.word	0x20000280

08000e5c <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e60:	f7ff ff49 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <DS3231_getYear+0x18>)
 8000e66:	799b      	ldrb	r3, [r3, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff2b 	bl	8000cc4 <bcdToDec>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000280 	.word	0x20000280

08000e78 <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e7c:	f7ff ff3b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <DS3231_getAlarm1Sec+0x18>)
 8000e82:	79db      	ldrb	r3, [r3, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff1d 	bl	8000cc4 <bcdToDec>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000280 	.word	0x20000280

08000e94 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e98:	f7ff ff2d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <DS3231_getAlarm1Min+0x18>)
 8000e9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff0f 	bl	8000cc4 <bcdToDec>
 8000ea6:	4603      	mov	r3, r0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000280 	.word	0x20000280

08000eb0 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb4:	f7ff ff1f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <DS3231_getAlarm1Hour+0x18>)
 8000eba:	7a5b      	ldrb	r3, [r3, #9]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff01 	bl	8000cc4 <bcdToDec>
 8000ec2:	4603      	mov	r3, r0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000280 	.word	0x20000280

08000ecc <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed0:	f7ff ff11 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <DS3231_getAlarm1Day+0x18>)
 8000ed6:	7a9b      	ldrb	r3, [r3, #10]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fef3 	bl	8000cc4 <bcdToDec>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000280 	.word	0x20000280

08000ee8 <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eec:	f7ff ff03 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <DS3231_getAlarm1Date+0x18>)
 8000ef2:	7adb      	ldrb	r3, [r3, #11]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fee5 	bl	8000cc4 <bcdToDec>
 8000efa:	4603      	mov	r3, r0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000280 	.word	0x20000280

08000f04 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f08:	f7ff fef5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <DS3231_getAlarm2Min+0x18>)
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fed7 	bl	8000cc4 <bcdToDec>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000280 	.word	0x20000280

08000f20 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f24:	f7ff fee7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <DS3231_getAlarm2Hour+0x18>)
 8000f2a:	7b5b      	ldrb	r3, [r3, #13]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fec9 	bl	8000cc4 <bcdToDec>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000280 	.word	0x20000280

08000f3c <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f40:	f7ff fed9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <DS3231_getAlarm2Day+0x18>)
 8000f46:	7b9b      	ldrb	r3, [r3, #14]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff febb 	bl	8000cc4 <bcdToDec>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000280 	.word	0x20000280

08000f58 <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f5c:	f7ff fecb 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <DS3231_getAlarm2Date+0x18>)
 8000f62:	7bdb      	ldrb	r3, [r3, #15]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fead 	bl	8000cc4 <bcdToDec>
 8000f6a:	4603      	mov	r3, r0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000280 	.word	0x20000280

08000f74 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7a:	f7ff febc 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <DS3231_getTemp+0x88>)
 8000f80:	7c5b      	ldrb	r3, [r3, #17]
 8000f82:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <DS3231_getTemp+0x88>)
 8000f86:	7c9b      	ldrb	r3, [r3, #18]
 8000f88:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	099b      	lsrs	r3, r3, #6
 8000f9a:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f017 fbbc 	bl	8018724 <__aeabi_ui2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <DS3231_getTemp+0x8c>)
 8000fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fbe:	f017 fc2b 	bl	8018818 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f017 fbb9 	bl	8018744 <__aeabi_i2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fda:	f017 fa67 	bl	80184ac <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fea:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fee:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff2:	eef0 0a67 	vmov.f32	s1, s15
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000280 	.word	0x20000280
 8001000:	3fd00000 	.word	0x3fd00000

08001004 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800100e:	f7ff fe72 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe33 	bl	8000c80 <decToBcd>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <DS3231_setSec+0x38>)
 8001020:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2311      	movs	r3, #17
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <DS3231_setSec+0x38>)
 800102a:	21d0      	movs	r1, #208	; 0xd0
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <DS3231_setSec+0x3c>)
 800102e:	f009 ff0a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000294 	.word	0x20000294
 8001040:	200002bc 	.word	0x200002bc

08001044 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800104e:	f7ff fe52 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe13 	bl	8000c80 <decToBcd>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <DS3231_setMin+0x38>)
 8001060:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2311      	movs	r3, #17
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <DS3231_setMin+0x38>)
 800106a:	21d0      	movs	r1, #208	; 0xd0
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <DS3231_setMin+0x3c>)
 800106e:	f009 feea 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000294 	.word	0x20000294
 8001080:	200002bc 	.word	0x200002bc

08001084 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af02      	add	r7, sp, #8
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800108e:	f7ff fe32 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fdf3 	bl	8000c80 <decToBcd>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <DS3231_setHrs+0x38>)
 80010a0:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2311      	movs	r3, #17
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <DS3231_setHrs+0x38>)
 80010aa:	21d0      	movs	r1, #208	; 0xd0
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <DS3231_setHrs+0x3c>)
 80010ae:	f009 feca 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000294 	.word	0x20000294
 80010c0:	200002bc 	.word	0x200002bc

080010c4 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010ce:	f7ff fe12 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fdd3 	bl	8000c80 <decToBcd>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <DS3231_setDay+0x38>)
 80010e0:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2311      	movs	r3, #17
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <DS3231_setDay+0x38>)
 80010ea:	21d0      	movs	r1, #208	; 0xd0
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <DS3231_setDay+0x3c>)
 80010ee:	f009 feaa 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000294 	.word	0x20000294
 8001100:	200002bc 	.word	0x200002bc

08001104 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800110e:	f7ff fdf2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fdb3 	bl	8000c80 <decToBcd>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <DS3231_setDate+0x38>)
 8001120:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2311      	movs	r3, #17
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <DS3231_setDate+0x38>)
 800112a:	21d0      	movs	r1, #208	; 0xd0
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <DS3231_setDate+0x3c>)
 800112e:	f009 fe8a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000294 	.word	0x20000294
 8001140:	200002bc 	.word	0x200002bc

08001144 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800114e:	f7ff fdd2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fd93 	bl	8000c80 <decToBcd>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <DS3231_setMonth+0x38>)
 8001160:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2311      	movs	r3, #17
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <DS3231_setMonth+0x38>)
 800116a:	21d0      	movs	r1, #208	; 0xd0
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <DS3231_setMonth+0x3c>)
 800116e:	f009 fe6a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000294 	.word	0x20000294
 8001180:	200002bc 	.word	0x200002bc

08001184 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800118e:	f7ff fdb2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd73 	bl	8000c80 <decToBcd>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <DS3231_setYear+0x38>)
 80011a0:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2311      	movs	r3, #17
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <DS3231_setYear+0x38>)
 80011aa:	21d0      	movs	r1, #208	; 0xd0
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <DS3231_setYear+0x3c>)
 80011ae:	f009 fe4a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000294 	.word	0x20000294
 80011c0:	200002bc 	.word	0x200002bc

080011c4 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011ce:	f7ff fd92 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd53 	bl	8000c80 <decToBcd>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <DS3231_setAlarm1Sec+0x38>)
 80011e0:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2311      	movs	r3, #17
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <DS3231_setAlarm1Sec+0x38>)
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x3c>)
 80011ee:	f009 fe2a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000294 	.word	0x20000294
 8001200:	200002bc 	.word	0x200002bc

08001204 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800120e:	f7ff fd72 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd33 	bl	8000c80 <decToBcd>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <DS3231_setAlarm1Min+0x38>)
 8001220:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2311      	movs	r3, #17
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <DS3231_setAlarm1Min+0x38>)
 800122a:	21d0      	movs	r1, #208	; 0xd0
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x3c>)
 800122e:	f009 fe0a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000294 	.word	0x20000294
 8001240:	200002bc 	.word	0x200002bc

08001244 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800124e:	f7ff fd52 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd13 	bl	8000c80 <decToBcd>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <DS3231_setAlarm1Hour+0x38>)
 8001260:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2311      	movs	r3, #17
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <DS3231_setAlarm1Hour+0x38>)
 800126a:	21d0      	movs	r1, #208	; 0xd0
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x3c>)
 800126e:	f009 fdea 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000294 	.word	0x20000294
 8001280:	200002bc 	.word	0x200002bc

08001284 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800128e:	f7ff fd32 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fcf3 	bl	8000c80 <decToBcd>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <DS3231_setAlarm1Day+0x38>)
 80012a0:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2311      	movs	r3, #17
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <DS3231_setAlarm1Day+0x38>)
 80012aa:	21d0      	movs	r1, #208	; 0xd0
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x3c>)
 80012ae:	f009 fdca 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000294 	.word	0x20000294
 80012c0:	200002bc 	.word	0x200002bc

080012c4 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012ce:	f7ff fd12 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fcd3 	bl	8000c80 <decToBcd>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <DS3231_setAlarm1Date+0x38>)
 80012e0:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2311      	movs	r3, #17
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <DS3231_setAlarm1Date+0x38>)
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x3c>)
 80012ee:	f009 fdaa 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000294 	.word	0x20000294
 8001300:	200002bc 	.word	0x200002bc

08001304 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800130e:	f7ff fcf2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fcb3 	bl	8000c80 <decToBcd>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <DS3231_setAlarm2Min+0x38>)
 8001320:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2311      	movs	r3, #17
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <DS3231_setAlarm2Min+0x38>)
 800132a:	21d0      	movs	r1, #208	; 0xd0
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x3c>)
 800132e:	f009 fd8a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000294 	.word	0x20000294
 8001340:	200002bc 	.word	0x200002bc

08001344 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800134e:	f7ff fcd2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc93 	bl	8000c80 <decToBcd>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <DS3231_setAlarm2Hour+0x38>)
 8001360:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2311      	movs	r3, #17
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <DS3231_setAlarm2Hour+0x38>)
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x3c>)
 800136e:	f009 fd6a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000294 	.word	0x20000294
 8001380:	200002bc 	.word	0x200002bc

08001384 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af02      	add	r7, sp, #8
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800138e:	f7ff fcb2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fc73 	bl	8000c80 <decToBcd>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <DS3231_setAlarm2Day+0x38>)
 80013a0:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2311      	movs	r3, #17
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <DS3231_setAlarm2Day+0x38>)
 80013aa:	21d0      	movs	r1, #208	; 0xd0
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x3c>)
 80013ae:	f009 fd4a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000294 	.word	0x20000294
 80013c0:	200002bc 	.word	0x200002bc

080013c4 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013ce:	f7ff fc92 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fc53 	bl	8000c80 <decToBcd>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <DS3231_setAlarm2Date+0x38>)
 80013e0:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e2:	2364      	movs	r3, #100	; 0x64
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2311      	movs	r3, #17
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <DS3231_setAlarm2Date+0x38>)
 80013ea:	21d0      	movs	r1, #208	; 0xd0
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x3c>)
 80013ee:	f009 fd2a 	bl	800ae46 <HAL_I2C_Master_Transmit>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000294 	.word	0x20000294
 8001400:	200002bc 	.word	0x200002bc

08001404 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001408:	b088      	sub	sp, #32
 800140a:	af00      	add	r7, sp, #0
 800140c:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001410:	f7ff fd24 	bl	8000e5c <DS3231_getYear>
 8001414:	4603      	mov	r3, r0
 8001416:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 8001418:	f7ff fd12 	bl	8000e40 <DS3231_getMonth>
 800141c:	4603      	mov	r3, r0
 800141e:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001420:	f7ff fd00 	bl	8000e24 <DS3231_getDate>
 8001424:	4603      	mov	r3, r0
 8001426:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 8001428:	f7ff fce0 	bl	8000dec <DS3231_getHrs>
 800142c:	4603      	mov	r3, r0
 800142e:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001430:	f7ff fcce 	bl	8000dd0 <DS3231_getMin>
 8001434:	4603      	mov	r3, r0
 8001436:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 8001438:	f7ff fcbc 	bl	8000db4 <DS3231_getSec>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001440:	4a35      	ldr	r2, [pc, #212]	; (8001518 <DS3231_getUnix+0x114>)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	ca07      	ldmia	r2, {r0, r1, r2}
 8001448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 800144c:	7ebb      	ldrb	r3, [r7, #26]
 800144e:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001450:	2300      	movs	r3, #0
 8001452:	777b      	strb	r3, [r7, #29]
 8001454:	e00b      	b.n	800146e <DS3231_getUnix+0x6a>
        dc += dim[i];
 8001456:	7f7b      	ldrb	r3, [r7, #29]
 8001458:	3320      	adds	r3, #32
 800145a:	443b      	add	r3, r7
 800145c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001460:	b29a      	uxth	r2, r3
 8001462:	8bfb      	ldrh	r3, [r7, #30]
 8001464:	4413      	add	r3, r2
 8001466:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001468:	7f7b      	ldrb	r3, [r7, #29]
 800146a:	3301      	adds	r3, #1
 800146c:	777b      	strb	r3, [r7, #29]
 800146e:	7f7a      	ldrb	r2, [r7, #29]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	3b01      	subs	r3, #1
 8001474:	429a      	cmp	r2, r3
 8001476:	dbee      	blt.n	8001456 <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 8001478:	7efb      	ldrb	r3, [r7, #27]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d908      	bls.n	8001490 <DS3231_getUnix+0x8c>
 800147e:	7f3b      	ldrb	r3, [r7, #28]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <DS3231_getUnix+0x8c>
        ++dc;
 800148a:	8bfb      	ldrh	r3, [r7, #30]
 800148c:	3301      	adds	r3, #1
 800148e:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001490:	7f3b      	ldrb	r3, [r7, #28]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	00d2      	lsls	r2, r2, #3
 8001498:	441a      	add	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	0091      	lsls	r1, r2, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	4413      	add	r3, r2
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	8bfb      	ldrh	r3, [r7, #30]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	7f3b      	ldrb	r3, [r7, #28]
 80014b2:	3303      	adds	r3, #3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da00      	bge.n	80014ba <DS3231_getUnix+0xb6>
 80014b8:	3303      	adds	r3, #3
 80014ba:	109b      	asrs	r3, r3, #2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014c6:	8bfa      	ldrh	r2, [r7, #30]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	461a      	mov	r2, r3
 80014d2:	7e7b      	ldrb	r3, [r7, #25]
 80014d4:	441a      	add	r2, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	7e3b      	ldrb	r3, [r7, #24]
 80014e2:	441a      	add	r2, r3
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	461a      	mov	r2, r3
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	441a      	add	r2, r3
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <DS3231_getUnix+0x118>)
 80014f4:	4413      	add	r3, r2
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	461c      	mov	r4, r3
 80014fa:	4615      	mov	r5, r2
 80014fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001500:	eb14 0802 	adds.w	r8, r4, r2
 8001504:	eb45 0903 	adc.w	r9, r5, r3
 8001508:	4642      	mov	r2, r8
 800150a:	464b      	mov	r3, r9
}
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001518:	0805193c 	.word	0x0805193c
 800151c:	386d4380 	.word	0x386d4380

08001520 <normalize>:

double normalize(double v) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152a:	ed97 0b00 	vldr	d0, [r7]
 800152e:	f01c fb5f 	bl	801dbf0 <floor>
 8001532:	ec53 2b10 	vmov	r2, r3, d0
 8001536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153a:	f016 ffb5 	bl	80184a8 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001552:	f017 fbd3 	bl	8018cfc <__aeabi_dcmplt>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <normalize+0x52>
        v = v + 1;
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <normalize+0x68>)
 8001562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001566:	f016 ffa1 	bl	80184ac <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001576:	ec43 2b17 	vmov	d7, r2, r3
}
 800157a:	eeb0 0a47 	vmov.f32	s0, s14
 800157e:	eef0 0a67 	vmov.f32	s1, s15
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	3ff00000 	.word	0x3ff00000

0800158c <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 800158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001590:	b0a0      	sub	sp, #128	; 0x80
 8001592:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001594:	f7ff fc62 	bl	8000e5c <DS3231_getYear>
 8001598:	4603      	mov	r3, r0
 800159a:	b29b      	uxth	r3, r3
 800159c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a4:	f7ff fc4c 	bl	8000e40 <DS3231_getMonth>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015ae:	f7ff fc39 	bl	8000e24 <DS3231_getDate>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015bc:	4618      	mov	r0, r3
 80015be:	f017 f8c1 	bl	8018744 <__aeabi_i2d>
 80015c2:	4604      	mov	r4, r0
 80015c4:	460d      	mov	r5, r1
 80015c6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ca:	f1c3 010c 	rsb	r1, r3, #12
 80015ce:	4b9a      	ldr	r3, [pc, #616]	; (8001838 <DS3231_getMoonDay+0x2ac>)
 80015d0:	fb83 2301 	smull	r2, r3, r3, r1
 80015d4:	109a      	asrs	r2, r3, #2
 80015d6:	17cb      	asrs	r3, r1, #31
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f017 f8b2 	bl	8018744 <__aeabi_i2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f016 ff5e 	bl	80184a8 <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f017 fc70 	bl	8018ed8 <__aeabi_d2ulz>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001600:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001604:	3309      	adds	r3, #9
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	61fa      	str	r2, [r7, #28]
 800160c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001610:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001614:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001618:	2a0c      	cmp	r2, #12
 800161a:	f173 0300 	sbcs.w	r3, r3, #0
 800161e:	d30b      	bcc.n	8001638 <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001620:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001624:	f1b2 010c 	subs.w	r1, r2, #12
 8001628:	6139      	str	r1, [r7, #16]
 800162a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001634:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 8001638:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800163c:	f241 2168 	movw	r1, #4712	; 0x1268
 8001640:	1851      	adds	r1, r2, r1
 8001642:	6339      	str	r1, [r7, #48]	; 0x30
 8001644:	f143 0300 	adc.w	r3, r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
 800164a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800164e:	f017 f8ad 	bl	80187ac <__aeabi_ul2d>
 8001652:	a36f      	add	r3, pc, #444	; (adr r3, 8001810 <DS3231_getMoonDay+0x284>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f017 f8de 	bl	8018818 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	ec43 2b17 	vmov	d7, r2, r3
 8001664:	eeb0 0a47 	vmov.f32	s0, s14
 8001668:	eef0 0a67 	vmov.f32	s1, s15
 800166c:	f01c fac0 	bl	801dbf0 <floor>
 8001670:	ec53 2b10 	vmov	r2, r3, d0
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f017 fc2e 	bl	8018ed8 <__aeabi_d2ulz>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001684:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001688:	f017 f890 	bl	80187ac <__aeabi_ul2d>
 800168c:	a362      	add	r3, pc, #392	; (adr r3, 8001818 <DS3231_getMoonDay+0x28c>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f017 f8c1 	bl	8018818 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b66      	ldr	r3, [pc, #408]	; (800183c <DS3231_getMoonDay+0x2b0>)
 80016a4:	f016 ff02 	bl	80184ac <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	ec43 2b17 	vmov	d7, r2, r3
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	eef0 0a67 	vmov.f32	s1, s15
 80016b8:	f01c fa9a 	bl	801dbf0 <floor>
 80016bc:	ec53 2b10 	vmov	r2, r3, d0
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f017 fc08 	bl	8018ed8 <__aeabi_d2ulz>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d4:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	f017 fc1a 	bl	8018f14 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ea:	f143 0300 	adc.w	r3, r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f4:	f017 f85a 	bl	80187ac <__aeabi_ul2d>
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <DS3231_getMoonDay+0x2b4>)
 80016fe:	f017 f88b 	bl	8018818 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ec43 2b17 	vmov	d7, r2, r3
 800170a:	eeb0 0a47 	vmov.f32	s0, s14
 800170e:	eef0 0a67 	vmov.f32	s1, s15
 8001712:	f01c fa6d 	bl	801dbf0 <floor>
 8001716:	ec51 0b10 	vmov	r0, r1, d0
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <DS3231_getMoonDay+0x2b8>)
 8001720:	f016 fec2 	bl	80184a8 <__aeabi_dsub>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f017 fbd4 	bl	8018ed8 <__aeabi_d2ulz>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 8001738:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800173c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001740:	eb10 0a02 	adds.w	sl, r0, r2
 8001744:	eb41 0b03 	adc.w	fp, r1, r3
 8001748:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800174c:	2200      	movs	r2, #0
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	627a      	str	r2, [r7, #36]	; 0x24
 8001752:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001756:	460b      	mov	r3, r1
 8001758:	eb1a 0803 	adds.w	r8, sl, r3
 800175c:	4613      	mov	r3, r2
 800175e:	eb4b 0903 	adc.w	r9, fp, r3
 8001762:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	f149 0300 	adc.w	r3, r9, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001772:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 8001776:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177a:	4933      	ldr	r1, [pc, #204]	; (8001848 <DS3231_getMoonDay+0x2bc>)
 800177c:	428a      	cmp	r2, r1
 800177e:	f173 0300 	sbcs.w	r3, r3, #0
 8001782:	d30c      	bcc.n	800179e <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001784:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800178c:	1a84      	subs	r4, r0, r2
 800178e:	603c      	str	r4, [r7, #0]
 8001790:	eb61 0303 	sbc.w	r3, r1, r3
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 800179e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a2:	f017 f803 	bl	80187ac <__aeabi_ul2d>
 80017a6:	a31e      	add	r3, pc, #120	; (adr r3, 8001820 <DS3231_getMoonDay+0x294>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f016 fe7c 	bl	80184a8 <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a31b      	add	r3, pc, #108	; (adr r3, 8001828 <DS3231_getMoonDay+0x29c>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f017 f955 	bl	8018a6c <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	ec43 2b17 	vmov	d7, r2, r3
 80017ca:	eeb0 0a47 	vmov.f32	s0, s14
 80017ce:	eef0 0a67 	vmov.f32	s1, s15
 80017d2:	f7ff fea5 	bl	8001520 <normalize>
 80017d6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017da:	a315      	add	r3, pc, #84	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a4>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e4:	f017 f818 	bl	8018818 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f017 fb0a 	bl	8018e08 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fa:	ee07 3a90 	vmov	s15, r3
}
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	3780      	adds	r7, #128	; 0x80
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f016 ff5b 	bl	8018744 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f013 feb5 	bl	80156a4 <HAL_UART_Receive_DMA>
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	2000091c 	.word	0x2000091c
 800194c:	2000091d 	.word	0x2000091d
 8001950:	2000090c 	.word	0x2000090c
 8001954:	200003c0 	.word	0x200003c0

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0af      	sub	sp, #188	; 0xbc
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f004 fbcf 	bl	8006100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f001 ff33 	bl	80037cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 f8bb 	bl	8003ae0 <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 f97f 	bl	8003c6c <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f001 ffcb 	bl	8003908 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 f863 	bl	8003a3c <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 f82b 	bl	80039d0 <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f001 fff3 	bl	8003964 <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 f887 	bl	8003a90 <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f001 ff8d 	bl	80038a0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 8001986:	f003 fc8d 	bl	80052a4 <LCD_Init>
	XPT2046_Init();
 800198a:	f004 fac1 	bl	8005f10 <XPT2046_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800198e:	23ff      	movs	r3, #255	; 0xff
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001996:	f44f 7248 	mov.w	r2, #800	; 0x320
 800199a:	2100      	movs	r1, #0
 800199c:	2000      	movs	r0, #0
 800199e:	f002 faad 	bl	8003efc <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019aa:	f240 321e 	movw	r2, #798	; 0x31e
 80019ae:	2101      	movs	r1, #1
 80019b0:	2001      	movs	r0, #1
 80019b2:	f002 faa3 	bl	8003efc <LCD_Rect_Fill>

	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80019b6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2301      	movs	r3, #1
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <main+0x2f8>)
 80019c2:	4aa4      	ldr	r2, [pc, #656]	; (8001c54 <main+0x2fc>)
 80019c4:	217f      	movs	r1, #127	; 0x7f
 80019c6:	2014      	movs	r0, #20
 80019c8:	f003 fbf2 	bl	80051b0 <LCD_Font>
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80019d2:	e027      	b.n	8001a24 <main+0xcc>
 80019d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019dc:	b29b      	uxth	r3, r3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fc54 	bl	8000290 <AT24XX_Read>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461c      	mov	r4, r3
 80019ec:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fc48 	bl	8000290 <AT24XX_Read>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff ff69 	bl	80018dc <byteS>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a12:	b211      	sxth	r1, r2
 8001a14:	4a90      	ldr	r2, [pc, #576]	; (8001c58 <main+0x300>)
 8001a16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a1a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a24:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001a28:	2b9a      	cmp	r3, #154	; 0x9a
 8001a2a:	d9d3      	bls.n	80019d4 <main+0x7c>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001a32:	e027      	b.n	8001a84 <main+0x12c>
 8001a34:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001a38:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fc24 	bl	8000290 <AT24XX_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461c      	mov	r4, r3
 8001a4c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fc18 	bl	8000290 <AT24XX_Read>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff ff39 	bl	80018dc <byteS>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001a72:	b211      	sxth	r1, r2
 8001a74:	4a79      	ldr	r2, [pc, #484]	; (8001c5c <main+0x304>)
 8001a76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a7a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001a84:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001a88:	2b9a      	cmp	r3, #154	; 0x9a
 8001a8a:	d9d3      	bls.n	8001a34 <main+0xdc>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8001a92:	e027      	b.n	8001ae4 <main+0x18c>
 8001a94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001a98:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fbf4 	bl	8000290 <AT24XX_Read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461c      	mov	r4, r3
 8001aac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fbe8 	bl	8000290 <AT24XX_Read>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f7ff ff09 	bl	80018dc <byteS>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001ad2:	b211      	sxth	r1, r2
 8001ad4:	4a62      	ldr	r2, [pc, #392]	; (8001c60 <main+0x308>)
 8001ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ada:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8001ae4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001ae8:	2b9a      	cmp	r3, #154	; 0x9a
 8001aea:	d9d3      	bls.n	8001a94 <main+0x13c>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2301      	movs	r3, #1
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <main+0x2f8>)
 8001af6:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <main+0x2fc>)
 8001af8:	217f      	movs	r1, #127	; 0x7f
 8001afa:	2014      	movs	r0, #20
 8001afc:	f003 fb58 	bl	80051b0 <LCD_Font>

	BME280_Init();
 8001b00:	f7fe fe6c 	bl	80007dc <BME280_Init>

//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	//	uint8_t uartTransmit[] = "UART OK\r\n";
	//	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
	uint8_t uartTransmitDMA[] = "UART DMA OK\r\n";
 8001b04:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <main+0x30c>)
 8001b06:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b0e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit_DMA(&huart1, uartTransmitDMA, sizeof(uartTransmitDMA));
 8001b10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b14:	220e      	movs	r2, #14
 8001b16:	4619      	mov	r1, r3
 8001b18:	4853      	ldr	r0, [pc, #332]	; (8001c68 <main+0x310>)
 8001b1a:	f013 fd45 	bl	80155a8 <HAL_UART_Transmit_DMA>

	//	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
	HAL_UART_Receive_DMA (&huart1, rx_buffer, UART_RX_BUFFER_SIZE);
 8001b1e:	2210      	movs	r2, #16
 8001b20:	4952      	ldr	r1, [pc, #328]	; (8001c6c <main+0x314>)
 8001b22:	4851      	ldr	r0, [pc, #324]	; (8001c68 <main+0x310>)
 8001b24:	f013 fdbe 	bl	80156a4 <HAL_UART_Receive_DMA>

	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b2e:	e008      	b.n	8001b42 <main+0x1ea>
 8001b30:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <main+0x318>)
 8001b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b36:	6353      	str	r3, [r2, #52]	; 0x34
 8001b38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4a:	d9f1      	bls.n	8001b30 <main+0x1d8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	4849      	ldr	r0, [pc, #292]	; (8001c74 <main+0x31c>)
 8001b50:	f008 ff70 	bl	800aa34 <HAL_GPIO_ReadPin>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d12c      	bne.n	8001bb4 <main+0x25c>

			uint16_t touchX = getX();
 8001b5a:	f004 fa9d 	bl	8006098 <getX>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			uint16_t touchY = getY();
 8001b64:	f004 fab2 	bl	80060cc <getY>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			if (touchX && touchY && touchX != 0x0DB)
 8001b6e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <main+0x244>
 8001b76:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00e      	beq.n	8001b9c <main+0x244>
 8001b7e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001b82:	2bdb      	cmp	r3, #219	; 0xdb
 8001b84:	d00a      	beq.n	8001b9c <main+0x244>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001b86:	f8b7 1076 	ldrh.w	r1, [r7, #118]	; 0x76
 8001b8a:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
 8001b8e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2301      	movs	r3, #1
 8001b96:	2201      	movs	r2, #1
 8001b98:	f002 f9b0 	bl	8003efc <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	4835      	ldr	r0, [pc, #212]	; (8001c78 <main+0x320>)
 8001ba2:	f008 ff5f 	bl	800aa64 <HAL_GPIO_WritePin>
			touchX = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
			touchY = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001bb2:	e004      	b.n	8001bbe <main+0x266>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	482f      	ldr	r0, [pc, #188]	; (8001c78 <main+0x320>)
 8001bba:	f008 ff53 	bl	800aa64 <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001bbe:	f7ff f8f9 	bl	8000db4 <DS3231_getSec>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <main+0x324>)
 8001bc8:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <main+0x328>)
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <main+0x324>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d0ba      	beq.n	8001b4c <main+0x1f4>

			rtcMin = DS3231_getMin();
 8001bd6:	f7ff f8fb 	bl	8000dd0 <DS3231_getMin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <main+0x32c>)
 8001be0:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <main+0x330>)
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	2301      	movs	r3, #1
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	2208      	movs	r2, #8
 8001bee:	2123      	movs	r1, #35	; 0x23
 8001bf0:	20aa      	movs	r0, #170	; 0xaa
 8001bf2:	f002 fdc7 	bl	8004784 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <main+0x330>)
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2208      	movs	r2, #8
 8001c02:	214b      	movs	r1, #75	; 0x4b
 8001c04:	20aa      	movs	r0, #170	; 0xaa
 8001c06:	f002 fdbd 	bl	8004784 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <main+0x324>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d039      	beq.n	8001c8c <main+0x334>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <main+0x330>)
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	2207      	movs	r2, #7
 8001c24:	2123      	movs	r1, #35	; 0x23
 8001c26:	20aa      	movs	r0, #170	; 0xaa
 8001c28:	f002 fdac 	bl	8004784 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <main+0x330>)
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2301      	movs	r3, #1
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	2207      	movs	r2, #7
 8001c38:	214b      	movs	r1, #75	; 0x4b
 8001c3a:	20aa      	movs	r0, #170	; 0xaa
 8001c3c:	f002 fda2 	bl	8004784 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c46:	480b      	ldr	r0, [pc, #44]	; (8001c74 <main+0x31c>)
 8001c48:	f008 ff0c 	bl	800aa64 <HAL_GPIO_WritePin>
 8001c4c:	e038      	b.n	8001cc0 <main+0x368>
 8001c4e:	bf00      	nop
 8001c50:	08029270 	.word	0x08029270
 8001c54:	0805194c 	.word	0x0805194c
 8001c58:	20000564 	.word	0x20000564
 8001c5c:	2000069c 	.word	0x2000069c
 8001c60:	200007d4 	.word	0x200007d4
 8001c64:	080519bc 	.word	0x080519bc
 8001c68:	200003c0 	.word	0x200003c0
 8001c6c:	2000090c 	.word	0x2000090c
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	20000515 	.word	0x20000515
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000516 	.word	0x20000516
 8001c88:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2301      	movs	r3, #1
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2301      	movs	r3, #1
 8001c96:	2207      	movs	r2, #7
 8001c98:	2123      	movs	r1, #35	; 0x23
 8001c9a:	20aa      	movs	r0, #170	; 0xaa
 8001c9c:	f002 fd72 	bl	8004784 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2207      	movs	r2, #7
 8001cac:	214b      	movs	r1, #75	; 0x4b
 8001cae:	20aa      	movs	r0, #170	; 0xaa
 8001cb0:	f002 fd68 	bl	8004784 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cba:	48bb      	ldr	r0, [pc, #748]	; (8001fa8 <main+0x650>)
 8001cbc:	f008 fed2 	bl	800aa64 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001cc0:	4bba      	ldr	r3, [pc, #744]	; (8001fac <main+0x654>)
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	4bba      	ldr	r3, [pc, #744]	; (8001fb0 <main+0x658>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f001 8082 	beq.w	8002dd2 <main+0x147a>

				rtcHrs = DS3231_getHrs();
 8001cce:	f7ff f88d 	bl	8000dec <DS3231_getHrs>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4bb7      	ldr	r3, [pc, #732]	; (8001fb4 <main+0x65c>)
 8001cd8:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8001cda:	4bb4      	ldr	r3, [pc, #720]	; (8001fac <main+0x654>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ce4:	49b4      	ldr	r1, [pc, #720]	; (8001fb8 <main+0x660>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f018 f976 	bl	8019fd8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001cec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4bb0      	ldr	r3, [pc, #704]	; (8001fbc <main+0x664>)
 8001cfa:	2164      	movs	r1, #100	; 0x64
 8001cfc:	20b2      	movs	r0, #178	; 0xb2
 8001cfe:	f003 fa57 	bl	80051b0 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8001d02:	4bab      	ldr	r3, [pc, #684]	; (8001fb0 <main+0x658>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d0c:	49aa      	ldr	r1, [pc, #680]	; (8001fb8 <main+0x660>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f018 f962 	bl	8019fd8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d18:	4ba9      	ldr	r3, [pc, #676]	; (8001fc0 <main+0x668>)
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <main+0x664>)
 8001d22:	2164      	movs	r1, #100	; 0x64
 8001d24:	20b2      	movs	r0, #178	; 0xb2
 8001d26:	f003 fa43 	bl	80051b0 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8001d2a:	4ba6      	ldr	r3, [pc, #664]	; (8001fc4 <main+0x66c>)
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	4ba1      	ldr	r3, [pc, #644]	; (8001fb4 <main+0x65c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	f000 80fb 	beq.w	8001f2e <main+0x5d6>

					rtcDay = DS3231_getDay();
 8001d38:	f7ff f866 	bl	8000e08 <DS3231_getDay>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4ba1      	ldr	r3, [pc, #644]	; (8001fc8 <main+0x670>)
 8001d42:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8001d44:	f7ff f86e 	bl	8000e24 <DS3231_getDate>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b9f      	ldr	r3, [pc, #636]	; (8001fcc <main+0x674>)
 8001d4e:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8001d50:	f7ff f876 	bl	8000e40 <DS3231_getMonth>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <main+0x678>)
 8001d5a:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8001d5c:	f7ff f87e 	bl	8000e5c <DS3231_getYear>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b9b      	ldr	r3, [pc, #620]	; (8001fd4 <main+0x67c>)
 8001d66:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8001d68:	4b96      	ldr	r3, [pc, #600]	; (8001fc4 <main+0x66c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d72:	4991      	ldr	r1, [pc, #580]	; (8001fb8 <main+0x660>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f018 f92f 	bl	8019fd8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d7a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <main+0x664>)
 8001d88:	2164      	movs	r1, #100	; 0x64
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f003 fa10 	bl	80051b0 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8001d90:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <main+0x65c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d9a:	4987      	ldr	r1, [pc, #540]	; (8001fb8 <main+0x660>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f018 f91b 	bl	8019fd8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001da2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001da6:	4b86      	ldr	r3, [pc, #536]	; (8001fc0 <main+0x668>)
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <main+0x664>)
 8001db0:	2164      	movs	r1, #100	; 0x64
 8001db2:	2000      	movs	r0, #0
 8001db4:	f003 f9fc 	bl	80051b0 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8001db8:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <main+0x680>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <main+0x670>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f000 80a8 	beq.w	8001f16 <main+0x5be>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8001dc6:	4b80      	ldr	r3, [pc, #512]	; (8001fc8 <main+0x670>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	1d5a      	adds	r2, r3, #5
 8001dcc:	4b83      	ldr	r3, [pc, #524]	; (8001fdc <main+0x684>)
 8001dce:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	1099      	asrs	r1, r3, #2
 8001dd6:	17d3      	asrs	r3, r2, #31
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a5b      	subs	r3, r3, r1
 8001de0:	1ad1      	subs	r1, r2, r3
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <main+0x688>)
 8001de4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	2301      	movs	r3, #1
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <main+0x68c>)
 8001df2:	218c      	movs	r1, #140	; 0x8c
 8001df4:	2005      	movs	r0, #5
 8001df6:	f003 f9db 	bl	80051b0 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <main+0x670>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	1d9a      	adds	r2, r3, #6
 8001e00:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <main+0x684>)
 8001e02:	fb83 1302 	smull	r1, r3, r3, r2
 8001e06:	4413      	add	r3, r2
 8001e08:	1099      	asrs	r1, r3, #2
 8001e0a:	17d3      	asrs	r3, r2, #31
 8001e0c:	1ac9      	subs	r1, r1, r3
 8001e0e:	460b      	mov	r3, r1
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a5b      	subs	r3, r3, r1
 8001e14:	1ad1      	subs	r1, r2, r3
 8001e16:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <main+0x688>)
 8001e18:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e1c:	23ff      	movs	r3, #255	; 0xff
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2301      	movs	r3, #1
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <main+0x68c>)
 8001e26:	218c      	movs	r1, #140	; 0x8c
 8001e28:	2005      	movs	r0, #5
 8001e2a:	f003 f9c1 	bl	80051b0 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8001e2e:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <main+0x678>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f103 010a 	add.w	r1, r3, #10
 8001e36:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <main+0x690>)
 8001e38:	fb83 2301 	smull	r2, r3, r3, r1
 8001e3c:	105a      	asrs	r2, r3, #1
 8001e3e:	17cb      	asrs	r3, r1, #31
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	1aca      	subs	r2, r1, r3
 8001e4c:	4b67      	ldr	r3, [pc, #412]	; (8001fec <main+0x694>)
 8001e4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	2301      	movs	r3, #1
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <main+0x68c>)
 8001e5c:	218c      	movs	r1, #140	; 0x8c
 8001e5e:	2096      	movs	r0, #150	; 0x96
 8001e60:	f003 f9a6 	bl	80051b0 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8001e64:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <main+0x678>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f103 010b 	add.w	r1, r3, #11
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <main+0x690>)
 8001e6e:	fb83 2301 	smull	r2, r3, r3, r1
 8001e72:	105a      	asrs	r2, r3, #1
 8001e74:	17cb      	asrs	r3, r1, #31
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	1aca      	subs	r2, r1, r3
 8001e82:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <main+0x694>)
 8001e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <main+0x68c>)
 8001e94:	218c      	movs	r1, #140	; 0x8c
 8001e96:	2096      	movs	r0, #150	; 0x96
 8001e98:	f003 f98a 	bl	80051b0 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8001e9c:	4b54      	ldr	r3, [pc, #336]	; (8001ff0 <main+0x698>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <main+0x69c>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <main+0x6a0>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4951      	ldr	r1, [pc, #324]	; (8001ffc <main+0x6a4>)
 8001eb6:	f018 f88f 	bl	8019fd8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8001eba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <main+0x68c>)
 8001ec8:	218c      	movs	r1, #140	; 0x8c
 8001eca:	20fa      	movs	r0, #250	; 0xfa
 8001ecc:	f003 f970 	bl	80051b0 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <main+0x674>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <main+0x678>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <main+0x67c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4944      	ldr	r1, [pc, #272]	; (8001ffc <main+0x6a4>)
 8001eea:	f018 f875 	bl	8019fd8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8001eee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <main+0x68c>)
 8001efe:	218c      	movs	r1, #140	; 0x8c
 8001f00:	20fa      	movs	r0, #250	; 0xfa
 8001f02:	f003 f955 	bl	80051b0 <LCD_Font>

						rtcDayLast = rtcDay;
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <main+0x670>)
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <main+0x680>)
 8001f0c:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <main+0x674>)
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <main+0x698>)
 8001f14:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <main+0x678>)
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <main+0x69c>)
 8001f1c:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <main+0x67c>)
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <main+0x6a0>)
 8001f24:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <main+0x65c>)
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <main+0x66c>)
 8001f2c:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <main+0x658>)
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <main+0x654>)
 8001f34:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3a:	f7fe fa55 	bl	80003e8 <BME280_getTemperature>
 8001f3e:	ee10 3a10 	vmov	r3, s0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f016 fc10 	bl	8018768 <__aeabi_f2d>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	492c      	ldr	r1, [pc, #176]	; (8002000 <main+0x6a8>)
 8001f4e:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295
 8001f56:	f7fe fabf 	bl	80004d8 <BME280_getHumidity>
 8001f5a:	ee10 3a10 	vmov	r3, s0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f016 fc02 	bl	8018768 <__aeabi_f2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4926      	ldr	r1, [pc, #152]	; (8002004 <main+0x6ac>)
 8001f6a:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8001f6e:	f7fe fb53 	bl	8000618 <BME280_getPressure>
 8001f72:	eef0 7a40 	vmov.f32	s15, s0
 8001f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7a:	ee17 3a90 	vmov	r3, s15
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <main+0x6b0>)
 8001f82:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <main+0x6b0>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f8c:	f240 8721 	bls.w	8002dd2 <main+0x147a>
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <main+0x6b0>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	f240 424b 	movw	r2, #1099	; 0x44b
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f200 871a 	bhi.w	8002dd2 <main+0x147a>
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <main+0x6a8>)
 8001fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa4:	e032      	b.n	800200c <main+0x6b4>
 8001fa6:	bf00      	nop
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	20000001 	.word	0x20000001
 8001fb0:	20000516 	.word	0x20000516
 8001fb4:	20000517 	.word	0x20000517
 8001fb8:	0805195c 	.word	0x0805195c
 8001fbc:	08051908 	.word	0x08051908
 8001fc0:	00ffa500 	.word	0x00ffa500
 8001fc4:	20000002 	.word	0x20000002
 8001fc8:	20000518 	.word	0x20000518
 8001fcc:	20000519 	.word	0x20000519
 8001fd0:	2000051a 	.word	0x2000051a
 8001fd4:	2000051b 	.word	0x2000051b
 8001fd8:	2000051c 	.word	0x2000051c
 8001fdc:	92492493 	.word	0x92492493
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	08029270 	.word	0x08029270
 8001fe8:	2aaaaaab 	.word	0x2aaaaaab
 8001fec:	20000024 	.word	0x20000024
 8001ff0:	2000051d 	.word	0x2000051d
 8001ff4:	2000051e 	.word	0x2000051e
 8001ff8:	2000051f 	.word	0x2000051f
 8001ffc:	08051964 	.word	0x08051964
 8002000:	20000520 	.word	0x20000520
 8002004:	20000530 	.word	0x20000530
 8002008:	20000560 	.word	0x20000560
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b8a      	ldr	r3, [pc, #552]	; (800223c <main+0x8e4>)
 8002012:	f016 fe73 	bl	8018cfc <__aeabi_dcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 86da 	beq.w	8002dd2 <main+0x147a>
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <main+0x8e8>)
 8002020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b86      	ldr	r3, [pc, #536]	; (8002244 <main+0x8ec>)
 800202a:	f016 fe85 	bl	8018d38 <__aeabi_dcmpgt>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 86ce 	beq.w	8002dd2 <main+0x147a>
 8002036:	4b84      	ldr	r3, [pc, #528]	; (8002248 <main+0x8f0>)
 8002038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f016 fe78 	bl	8018d38 <__aeabi_dcmpgt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 86c1 	beq.w	8002dd2 <main+0x147a>
 8002050:	4b7d      	ldr	r3, [pc, #500]	; (8002248 <main+0x8f0>)
 8002052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b7c      	ldr	r3, [pc, #496]	; (800224c <main+0x8f4>)
 800205c:	f016 fe4e 	bl	8018cfc <__aeabi_dcmplt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 86b5 	beq.w	8002dd2 <main+0x147a>

					if (temperature != temperatureLast) {
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <main+0x8e8>)
 800206a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206e:	4b78      	ldr	r3, [pc, #480]	; (8002250 <main+0x8f8>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f016 fe38 	bl	8018ce8 <__aeabi_dcmpeq>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8120 	bne.w	80022c0 <main+0x968>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 8002080:	4b73      	ldr	r3, [pc, #460]	; (8002250 <main+0x8f8>)
 8002082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <main+0x8fc>)
 800208c:	f016 fe4a 	bl	8018d24 <__aeabi_dcmpge>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <main+0x76c>
 8002096:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <main+0x8f8>)
 8002098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f016 fe2a 	bl	8018cfc <__aeabi_dcmplt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01c      	beq.n	80020e8 <main+0x790>
 80020ae:	4b68      	ldr	r3, [pc, #416]	; (8002250 <main+0x8f8>)
 80020b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	4b67      	ldr	r3, [pc, #412]	; (8002258 <main+0x900>)
 80020ba:	f016 fe3d 	bl	8018d38 <__aeabi_dcmpgt>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d011      	beq.n	80020e8 <main+0x790>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80020c4:	4b62      	ldr	r3, [pc, #392]	; (8002250 <main+0x8f8>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	1d38      	adds	r0, r7, #4
 80020cc:	4963      	ldr	r1, [pc, #396]	; (800225c <main+0x904>)
 80020ce:	f017 ff83 	bl	8019fd8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80020d2:	1d3a      	adds	r2, r7, #4
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2301      	movs	r3, #1
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4b60      	ldr	r3, [pc, #384]	; (8002260 <main+0x908>)
 80020de:	21bb      	movs	r1, #187	; 0xbb
 80020e0:	2001      	movs	r0, #1
 80020e2:	f003 f865 	bl	80051b0 <LCD_Font>
 80020e6:	e04c      	b.n	8002182 <main+0x82a>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <main+0x8f8>)
 80020ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	4b58      	ldr	r3, [pc, #352]	; (8002254 <main+0x8fc>)
 80020f4:	f016 fe02 	bl	8018cfc <__aeabi_dcmplt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01d      	beq.n	800213a <main+0x7e2>
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <main+0x8f8>)
 8002100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f016 fe14 	bl	8018d38 <__aeabi_dcmpgt>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d011      	beq.n	800213a <main+0x7e2>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002116:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <main+0x8f8>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	1d38      	adds	r0, r7, #4
 800211e:	494f      	ldr	r1, [pc, #316]	; (800225c <main+0x904>)
 8002120:	f017 ff5a 	bl	8019fd8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002124:	1d3a      	adds	r2, r7, #4
 8002126:	2300      	movs	r3, #0
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2301      	movs	r3, #1
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <main+0x908>)
 8002130:	21bb      	movs	r1, #187	; 0xbb
 8002132:	201b      	movs	r0, #27
 8002134:	f003 f83c 	bl	80051b0 <LCD_Font>
 8002138:	e023      	b.n	8002182 <main+0x82a>
						}
						else if (temperatureLast <= -10) {
 800213a:	4b45      	ldr	r3, [pc, #276]	; (8002250 <main+0x8f8>)
 800213c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b44      	ldr	r3, [pc, #272]	; (8002258 <main+0x900>)
 8002146:	f016 fde3 	bl	8018d10 <__aeabi_dcmple>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d018      	beq.n	8002182 <main+0x82a>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <main+0x8f8>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f016 fe0d 	bl	8018d78 <__aeabi_d2iz>
 800215e:	4603      	mov	r3, r0
 8002160:	b25b      	sxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	493f      	ldr	r1, [pc, #252]	; (8002264 <main+0x90c>)
 8002168:	4618      	mov	r0, r3
 800216a:	f017 ff35 	bl	8019fd8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800216e:	1d3a      	adds	r2, r7, #4
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2301      	movs	r3, #1
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <main+0x908>)
 800217a:	21bb      	movs	r1, #187	; 0xbb
 800217c:	2001      	movs	r0, #1
 800217e:	f003 f817 	bl	80051b0 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <main+0x8e8>)
 8002184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b31      	ldr	r3, [pc, #196]	; (8002254 <main+0x8fc>)
 800218e:	f016 fdc9 	bl	8018d24 <__aeabi_dcmpge>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d116      	bne.n	80021c6 <main+0x86e>
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <main+0x8e8>)
 800219a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f016 fda9 	bl	8018cfc <__aeabi_dcmplt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01c      	beq.n	80021ea <main+0x892>
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <main+0x8e8>)
 80021b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <main+0x900>)
 80021bc:	f016 fdbc 	bl	8018d38 <__aeabi_dcmpgt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d011      	beq.n	80021ea <main+0x892>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <main+0x8e8>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	1d38      	adds	r0, r7, #4
 80021ce:	4923      	ldr	r1, [pc, #140]	; (800225c <main+0x904>)
 80021d0:	f017 ff02 	bl	8019fd8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80021d4:	1d3a      	adds	r2, r7, #4
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <main+0x910>)
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	2301      	movs	r3, #1
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <main+0x908>)
 80021e0:	21bb      	movs	r1, #187	; 0xbb
 80021e2:	2001      	movs	r0, #1
 80021e4:	f002 ffe4 	bl	80051b0 <LCD_Font>
 80021e8:	e064      	b.n	80022b4 <main+0x95c>
						}
						else if (temperature < 10 && temperature > 0) {
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <main+0x8e8>)
 80021ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <main+0x8fc>)
 80021f6:	f016 fd81 	bl	8018cfc <__aeabi_dcmplt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d035      	beq.n	800226c <main+0x914>
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <main+0x8e8>)
 8002202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	f016 fd93 	bl	8018d38 <__aeabi_dcmpgt>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d029      	beq.n	800226c <main+0x914>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <main+0x8e8>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	1d38      	adds	r0, r7, #4
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <main+0x904>)
 8002222:	f017 fed9 	bl	8019fd8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002226:	1d3a      	adds	r2, r7, #4
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <main+0x910>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2301      	movs	r3, #1
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <main+0x908>)
 8002232:	21bb      	movs	r1, #187	; 0xbb
 8002234:	201b      	movs	r0, #27
 8002236:	f002 ffbb 	bl	80051b0 <LCD_Font>
 800223a:	e03b      	b.n	80022b4 <main+0x95c>
 800223c:	40554000 	.word	0x40554000
 8002240:	20000520 	.word	0x20000520
 8002244:	c0440000 	.word	0xc0440000
 8002248:	20000530 	.word	0x20000530
 800224c:	40590000 	.word	0x40590000
 8002250:	20000528 	.word	0x20000528
 8002254:	40240000 	.word	0x40240000
 8002258:	c0240000 	.word	0xc0240000
 800225c:	08051974 	.word	0x08051974
 8002260:	08029270 	.word	0x08029270
 8002264:	0805197c 	.word	0x0805197c
 8002268:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 800226c:	4bae      	ldr	r3, [pc, #696]	; (8002528 <main+0xbd0>)
 800226e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4bad      	ldr	r3, [pc, #692]	; (800252c <main+0xbd4>)
 8002278:	f016 fd4a 	bl	8018d10 <__aeabi_dcmple>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d018      	beq.n	80022b4 <main+0x95c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 8002282:	4ba9      	ldr	r3, [pc, #676]	; (8002528 <main+0xbd0>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f016 fd74 	bl	8018d78 <__aeabi_d2iz>
 8002290:	4603      	mov	r3, r0
 8002292:	b25b      	sxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	49a5      	ldr	r1, [pc, #660]	; (8002530 <main+0xbd8>)
 800229a:	4618      	mov	r0, r3
 800229c:	f017 fe9c 	bl	8019fd8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80022a0:	1d3a      	adds	r2, r7, #4
 80022a2:	4ba4      	ldr	r3, [pc, #656]	; (8002534 <main+0xbdc>)
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2301      	movs	r3, #1
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	4ba3      	ldr	r3, [pc, #652]	; (8002538 <main+0xbe0>)
 80022ac:	21bb      	movs	r1, #187	; 0xbb
 80022ae:	2001      	movs	r0, #1
 80022b0:	f002 ff7e 	bl	80051b0 <LCD_Font>
						}

						temperatureLast = temperature;
 80022b4:	4b9c      	ldr	r3, [pc, #624]	; (8002528 <main+0xbd0>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	49a0      	ldr	r1, [pc, #640]	; (800253c <main+0xbe4>)
 80022bc:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80022c0:	4b9f      	ldr	r3, [pc, #636]	; (8002540 <main+0xbe8>)
 80022c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c6:	4b9f      	ldr	r3, [pc, #636]	; (8002544 <main+0xbec>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f016 fd0c 	bl	8018ce8 <__aeabi_dcmpeq>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d15b      	bne.n	800238e <main+0xa36>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80022d6:	4b9b      	ldr	r3, [pc, #620]	; (8002544 <main+0xbec>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f107 000c 	add.w	r0, r7, #12
 80022e0:	4999      	ldr	r1, [pc, #612]	; (8002548 <main+0xbf0>)
 80022e2:	f017 fe79 	bl	8019fd8 <siprintf>
						if (humidityLast >= 10)
 80022e6:	4b97      	ldr	r3, [pc, #604]	; (8002544 <main+0xbec>)
 80022e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b96      	ldr	r3, [pc, #600]	; (800254c <main+0xbf4>)
 80022f2:	f016 fd17 	bl	8018d24 <__aeabi_dcmpge>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00b      	beq.n	8002314 <main+0x9bc>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 80022fc:	f107 020c 	add.w	r2, r7, #12
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2301      	movs	r3, #1
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <main+0xbe0>)
 800230a:	21bb      	movs	r1, #187	; 0xbb
 800230c:	20a0      	movs	r0, #160	; 0xa0
 800230e:	f002 ff4f 	bl	80051b0 <LCD_Font>
 8002312:	e00a      	b.n	800232a <main+0x9d2>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002314:	f107 020c 	add.w	r2, r7, #12
 8002318:	2300      	movs	r3, #0
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2301      	movs	r3, #1
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4b85      	ldr	r3, [pc, #532]	; (8002538 <main+0xbe0>)
 8002322:	21bb      	movs	r1, #187	; 0xbb
 8002324:	20ba      	movs	r0, #186	; 0xba
 8002326:	f002 ff43 	bl	80051b0 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <main+0xbe8>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f107 000c 	add.w	r0, r7, #12
 8002334:	4984      	ldr	r1, [pc, #528]	; (8002548 <main+0xbf0>)
 8002336:	f017 fe4f 	bl	8019fd8 <siprintf>
						if (humidity >= 10)
 800233a:	4b81      	ldr	r3, [pc, #516]	; (8002540 <main+0xbe8>)
 800233c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <main+0xbf4>)
 8002346:	f016 fced 	bl	8018d24 <__aeabi_dcmpge>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00c      	beq.n	800236a <main+0xa12>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002350:	f107 020c 	add.w	r2, r7, #12
 8002354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2301      	movs	r3, #1
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <main+0xbe0>)
 8002360:	21bb      	movs	r1, #187	; 0xbb
 8002362:	20a0      	movs	r0, #160	; 0xa0
 8002364:	f002 ff24 	bl	80051b0 <LCD_Font>
 8002368:	e00b      	b.n	8002382 <main+0xa2a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800236a:	f107 020c 	add.w	r2, r7, #12
 800236e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2301      	movs	r3, #1
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <main+0xbe0>)
 800237a:	21bb      	movs	r1, #187	; 0xbb
 800237c:	20ba      	movs	r0, #186	; 0xba
 800237e:	f002 ff17 	bl	80051b0 <LCD_Font>

						humidityLast = humidity;
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <main+0xbe8>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	496e      	ldr	r1, [pc, #440]	; (8002544 <main+0xbec>)
 800238a:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 800238e:	4b70      	ldr	r3, [pc, #448]	; (8002550 <main+0xbf8>)
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	4b70      	ldr	r3, [pc, #448]	; (8002554 <main+0xbfc>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d057      	beq.n	800244a <main+0xaf2>

						char weatherPrintP[11];

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <main+0xbf8>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a2:	d309      	bcc.n	80023b8 <main+0xa60>
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <main+0xbf8>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	496a      	ldr	r1, [pc, #424]	; (8002558 <main+0xc00>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f017 fe11 	bl	8019fd8 <siprintf>
 80023b6:	e008      	b.n	80023ca <main+0xa72>
						else sprintf(weatherPrintP, "%02dP", pressureLast);
 80023b8:	4b65      	ldr	r3, [pc, #404]	; (8002550 <main+0xbf8>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4966      	ldr	r1, [pc, #408]	; (800255c <main+0xc04>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f017 fe07 	bl	8019fd8 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023ca:	f107 0214 	add.w	r2, r7, #20
 80023ce:	2300      	movs	r3, #0
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2301      	movs	r3, #1
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4b58      	ldr	r3, [pc, #352]	; (8002538 <main+0xbe0>)
 80023d8:	21bb      	movs	r1, #187	; 0xbb
 80023da:	f240 1041 	movw	r0, #321	; 0x141
 80023de:	f002 fee7 	bl	80051b0 <LCD_Font>

						if (pressure <= 1000) sprintf(weatherPrintP, "%02d", pressure);
 80023e2:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <main+0xbfc>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ea:	d809      	bhi.n	8002400 <main+0xaa8>
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <main+0xbfc>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4958      	ldr	r1, [pc, #352]	; (8002558 <main+0xc00>)
 80023f8:	4618      	mov	r0, r3
 80023fa:	f017 fded 	bl	8019fd8 <siprintf>
 80023fe:	e008      	b.n	8002412 <main+0xaba>
						else sprintf(weatherPrintP, "0%02dP", pressure);
 8002400:	4b54      	ldr	r3, [pc, #336]	; (8002554 <main+0xbfc>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4955      	ldr	r1, [pc, #340]	; (8002560 <main+0xc08>)
 800240c:	4618      	mov	r0, r3
 800240e:	f017 fde3 	bl	8019fd8 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002412:	f107 0214 	add.w	r2, r7, #20
 8002416:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2301      	movs	r3, #1
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4b45      	ldr	r3, [pc, #276]	; (8002538 <main+0xbe0>)
 8002422:	21bb      	movs	r1, #187	; 0xbb
 8002424:	f240 1041 	movw	r0, #321	; 0x141
 8002428:	f002 fec2 	bl	80051b0 <LCD_Font>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2301      	movs	r3, #1
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4b40      	ldr	r3, [pc, #256]	; (8002538 <main+0xbe0>)
 8002436:	4a4b      	ldr	r2, [pc, #300]	; (8002564 <main+0xc0c>)
 8002438:	21bb      	movs	r1, #187	; 0xbb
 800243a:	f240 1041 	movw	r0, #321	; 0x141
 800243e:	f002 feb7 	bl	80051b0 <LCD_Font>

						pressureLast = pressure;
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <main+0xbfc>)
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <main+0xbf8>)
 8002448:	801a      	strh	r2, [r3, #0]
					}

					if (AT24XX_Read(0) != rtcHrs) {
 800244a:	2000      	movs	r0, #0
 800244c:	f7fd ff20 	bl	8000290 <AT24XX_Read>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b44      	ldr	r3, [pc, #272]	; (8002568 <main+0xc10>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	f000 81e1 	beq.w	8002820 <main+0xec8>

						AT24XX_Update(0, rtcHrs);
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <main+0xc10>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	2000      	movs	r0, #0
 8002466:	f7fd ff3d 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 800246a:	2300      	movs	r3, #0
 800246c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002470:	e027      	b.n	80024c2 <main+0xb6a>
 8002472:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002476:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800247a:	b29b      	uxth	r3, r3
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	b29b      	uxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd ff05 	bl	8000290 <AT24XX_Read>
 8002486:	4603      	mov	r3, r0
 8002488:	461c      	mov	r4, r3
 800248a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	b29b      	uxth	r3, r3
 8002492:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002496:	b29b      	uxth	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd fef9 	bl	8000290 <AT24XX_Read>
 800249e:	4603      	mov	r3, r0
 80024a0:	4619      	mov	r1, r3
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fa1a 	bl	80018dc <byteS>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80024b0:	b211      	sxth	r1, r2
 80024b2:	4a2e      	ldr	r2, [pc, #184]	; (800256c <main+0xc14>)
 80024b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024b8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80024bc:	3301      	adds	r3, #1
 80024be:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80024c2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80024c6:	2b9a      	cmp	r3, #154	; 0x9a
 80024c8:	d9d3      	bls.n	8002472 <main+0xb1a>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 80024ca:	239a      	movs	r3, #154	; 0x9a
 80024cc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 80024d0:	e00f      	b.n	80024f2 <main+0xb9a>
 80024d2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80024dc:	4923      	ldr	r1, [pc, #140]	; (800256c <main+0xc14>)
 80024de:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <main+0xc14>)
 80024e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024e8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80024ec:	3b01      	subs	r3, #1
 80024ee:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 80024f2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1eb      	bne.n	80024d2 <main+0xb7a>
						hT[0] = (uint16_t) (temperature * 10);
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <main+0xbd0>)
 80024fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <main+0xbf4>)
 8002506:	f016 f987 	bl	8018818 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f016 fc59 	bl	8018dc8 <__aeabi_d2uiz>
 8002516:	4603      	mov	r3, r0
 8002518:	b29b      	uxth	r3, r3
 800251a:	b21a      	sxth	r2, r3
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <main+0xc14>)
 800251e:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002520:	2300      	movs	r3, #0
 8002522:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002526:	e052      	b.n	80025ce <main+0xc76>
 8002528:	20000520 	.word	0x20000520
 800252c:	c0240000 	.word	0xc0240000
 8002530:	0805197c 	.word	0x0805197c
 8002534:	00ffa500 	.word	0x00ffa500
 8002538:	08029270 	.word	0x08029270
 800253c:	20000528 	.word	0x20000528
 8002540:	20000530 	.word	0x20000530
 8002544:	20000538 	.word	0x20000538
 8002548:	08051984 	.word	0x08051984
 800254c:	40240000 	.word	0x40240000
 8002550:	20000562 	.word	0x20000562
 8002554:	20000560 	.word	0x20000560
 8002558:	0805195c 	.word	0x0805195c
 800255c:	0805198c 	.word	0x0805198c
 8002560:	08051994 	.word	0x08051994
 8002564:	0805199c 	.word	0x0805199c
 8002568:	20000517 	.word	0x20000517
 800256c:	20000564 	.word	0x20000564
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 8002570:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002574:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002578:	b29b      	uxth	r3, r3
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	b29c      	uxth	r4, r3
 800257e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002582:	4a86      	ldr	r2, [pc, #536]	; (800279c <main+0xe44>)
 8002584:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002588:	b29b      	uxth	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f98a 	bl	80018a4 <byteL>
 8002590:	4603      	mov	r3, r0
 8002592:	4619      	mov	r1, r3
 8002594:	4620      	mov	r0, r4
 8002596:	f7fd fea5 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 800259a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80025a6:	b29c      	uxth	r4, r3
 80025a8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80025ac:	4a7b      	ldr	r2, [pc, #492]	; (800279c <main+0xe44>)
 80025ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f982 	bl	80018be <byteH>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4620      	mov	r0, r4
 80025c0:	f7fd fe90 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80025c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80025ce:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80025d2:	2b9a      	cmp	r3, #154	; 0x9a
 80025d4:	d9cc      	bls.n	8002570 <main+0xc18>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80025dc:	e027      	b.n	800262e <main+0xcd6>
 80025de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd fe4f 	bl	8000290 <AT24XX_Read>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461c      	mov	r4, r3
 80025f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd fe43 	bl	8000290 <AT24XX_Read>
 800260a:	4603      	mov	r3, r0
 800260c:	4619      	mov	r1, r3
 800260e:	4620      	mov	r0, r4
 8002610:	f7ff f964 	bl	80018dc <byteS>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800261c:	b211      	sxth	r1, r2
 800261e:	4a60      	ldr	r2, [pc, #384]	; (80027a0 <main+0xe48>)
 8002620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002624:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002628:	3301      	adds	r3, #1
 800262a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800262e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002632:	2b9a      	cmp	r3, #154	; 0x9a
 8002634:	d9d3      	bls.n	80025de <main+0xc86>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8002636:	239a      	movs	r3, #154	; 0x9a
 8002638:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800263c:	e00f      	b.n	800265e <main+0xd06>
 800263e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002648:	4955      	ldr	r1, [pc, #340]	; (80027a0 <main+0xe48>)
 800264a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800264e:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <main+0xe48>)
 8002650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002654:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002658:	3b01      	subs	r3, #1
 800265a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800265e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1eb      	bne.n	800263e <main+0xce6>
						hH[0] = (uint16_t) (humidity * 10);
 8002666:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <main+0xe4c>)
 8002668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <main+0xe50>)
 8002672:	f016 f8d1 	bl	8018818 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f016 fba3 	bl	8018dc8 <__aeabi_d2uiz>
 8002682:	4603      	mov	r3, r0
 8002684:	b29b      	uxth	r3, r3
 8002686:	b21a      	sxth	r2, r3
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <main+0xe48>)
 800268a:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 800268c:	2300      	movs	r3, #0
 800268e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002692:	e02e      	b.n	80026f2 <main+0xd9a>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8002694:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002698:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800269c:	b29b      	uxth	r3, r3
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	b29c      	uxth	r4, r3
 80026a2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80026a6:	4a3e      	ldr	r2, [pc, #248]	; (80027a0 <main+0xe48>)
 80026a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f8f8 	bl	80018a4 <byteL>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4619      	mov	r1, r3
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7fd fe13 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80026be:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 80026ca:	b29c      	uxth	r4, r3
 80026cc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80026d0:	4a33      	ldr	r2, [pc, #204]	; (80027a0 <main+0xe48>)
 80026d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f8f0 	bl	80018be <byteH>
 80026de:	4603      	mov	r3, r0
 80026e0:	4619      	mov	r1, r3
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7fd fdfe 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80026e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80026f2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80026f6:	2b9a      	cmp	r3, #154	; 0x9a
 80026f8:	d9cc      	bls.n	8002694 <main+0xd3c>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002700:	e027      	b.n	8002752 <main+0xdfa>
 8002702:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002706:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800270a:	b29b      	uxth	r3, r3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fdbd 	bl	8000290 <AT24XX_Read>
 8002716:	4603      	mov	r3, r0
 8002718:	461c      	mov	r4, r3
 800271a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	b29b      	uxth	r3, r3
 8002722:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fdb1 	bl	8000290 <AT24XX_Read>
 800272e:	4603      	mov	r3, r0
 8002730:	4619      	mov	r1, r3
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff f8d2 	bl	80018dc <byteS>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002740:	b211      	sxth	r1, r2
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <main+0xe54>)
 8002744:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002748:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800274c:	3301      	adds	r3, #1
 800274e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002756:	2b9a      	cmp	r3, #154	; 0x9a
 8002758:	d9d3      	bls.n	8002702 <main+0xdaa>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 800275a:	239a      	movs	r3, #154	; 0x9a
 800275c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002760:	e00f      	b.n	8002782 <main+0xe2a>
 8002762:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002766:	1e5a      	subs	r2, r3, #1
 8002768:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800276c:	490f      	ldr	r1, [pc, #60]	; (80027ac <main+0xe54>)
 800276e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <main+0xe54>)
 8002774:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002778:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800277c:	3b01      	subs	r3, #1
 800277e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002782:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1eb      	bne.n	8002762 <main+0xe0a>
						hP[0] = (uint16_t)pressure;
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <main+0xe58>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b21a      	sxth	r2, r3
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <main+0xe54>)
 8002792:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002794:	2300      	movs	r3, #0
 8002796:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800279a:	e03a      	b.n	8002812 <main+0xeba>
 800279c:	20000564 	.word	0x20000564
 80027a0:	2000069c 	.word	0x2000069c
 80027a4:	20000530 	.word	0x20000530
 80027a8:	40240000 	.word	0x40240000
 80027ac:	200007d4 	.word	0x200007d4
 80027b0:	20000560 	.word	0x20000560
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80027b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80027b8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80027bc:	b29b      	uxth	r3, r3
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	b29c      	uxth	r4, r3
 80027c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80027c6:	4abc      	ldr	r2, [pc, #752]	; (8002ab8 <main+0x1160>)
 80027c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f868 	bl	80018a4 <byteL>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4620      	mov	r0, r4
 80027da:	f7fd fd83 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80027de:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 80027ea:	b29c      	uxth	r4, r3
 80027ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80027f0:	4ab1      	ldr	r2, [pc, #708]	; (8002ab8 <main+0x1160>)
 80027f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f860 	bl	80018be <byteH>
 80027fe:	4603      	mov	r3, r0
 8002800:	4619      	mov	r1, r3
 8002802:	4620      	mov	r0, r4
 8002804:	f7fd fd6e 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002808:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800280c:	3301      	adds	r3, #1
 800280e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002812:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002816:	2b9a      	cmp	r3, #154	; 0x9a
 8002818:	d9cc      	bls.n	80027b4 <main+0xe5c>
						}

						viewGraphs = 0;
 800281a:	4ba8      	ldr	r3, [pc, #672]	; (8002abc <main+0x1164>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002820:	23ff      	movs	r3, #255	; 0xff
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2301      	movs	r3, #1
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2381      	movs	r3, #129	; 0x81
 800282a:	229d      	movs	r2, #157	; 0x9d
 800282c:	21bd      	movs	r1, #189	; 0xbd
 800282e:	2002      	movs	r0, #2
 8002830:	f001 fd0a 	bl	8004248 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002834:	4ba2      	ldr	r3, [pc, #648]	; (8002ac0 <main+0x1168>)
 8002836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	4ba1      	ldr	r3, [pc, #644]	; (8002ac4 <main+0x116c>)
 8002840:	f015 ffea 	bl	8018818 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f016 fa94 	bl	8018d78 <__aeabi_d2iz>
 8002850:	4603      	mov	r3, r0
 8002852:	b21b      	sxth	r3, r3
 8002854:	b298      	uxth	r0, r3
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002860:	21e2      	movs	r1, #226	; 0xe2
 8002862:	f7fe fff3 	bl	800184c <map>
 8002866:	ec53 2b10 	vmov	r2, r3, d0
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f016 fa83 	bl	8018d78 <__aeabi_d2iz>
 8002872:	4603      	mov	r3, r0
 8002874:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					if (valMap < 0) valMap = 0;
 8002878:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800287c:	2b00      	cmp	r3, #0
 800287e:	da02      	bge.n	8002886 <main+0xf2e>
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					if (valMap > 127) valMap = 127;
 8002886:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800288a:	2b7f      	cmp	r3, #127	; 0x7f
 800288c:	dd02      	ble.n	8002894 <main+0xf3c>
 800288e:	237f      	movs	r3, #127	; 0x7f
 8002890:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002894:	2300      	movs	r3, #0
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	2301      	movs	r3, #1
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f240 133d 	movw	r3, #317	; 0x13d
 80028a0:	229e      	movs	r2, #158	; 0x9e
 80028a2:	21bf      	movs	r1, #191	; 0xbf
 80028a4:	209e      	movs	r0, #158	; 0x9e
 80028a6:	f001 fb67 	bl	8003f78 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028aa:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d023      	beq.n	80028fa <main+0xfa2>
 80028b2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80028b6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028ba:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028bc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80028c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028ce:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80028d2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	2100      	movs	r1, #0
 80028e0:	f001 fa29 	bl	8003d36 <RGB>
 80028e4:	4603      	mov	r3, r0
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	2301      	movs	r3, #1
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f240 133d 	movw	r3, #317	; 0x13d
 80028f0:	229e      	movs	r2, #158	; 0x9e
 80028f2:	4621      	mov	r1, r4
 80028f4:	209e      	movs	r0, #158	; 0x9e
 80028f6:	f001 fb3f 	bl	8003f78 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 80028fa:	23ff      	movs	r3, #255	; 0xff
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2301      	movs	r3, #1
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2381      	movs	r3, #129	; 0x81
 8002904:	229d      	movs	r2, #157	; 0x9d
 8002906:	21bd      	movs	r1, #189	; 0xbd
 8002908:	20a1      	movs	r0, #161	; 0xa1
 800290a:	f001 fc9d 	bl	8004248 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 800290e:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <main+0x1170>)
 8002910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <main+0x116c>)
 800291a:	f015 ff7d 	bl	8018818 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	f016 fa27 	bl	8018d78 <__aeabi_d2iz>
 800292a:	4603      	mov	r3, r0
 800292c:	b21b      	sxth	r3, r3
 800292e:	b298      	uxth	r0, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800293a:	2150      	movs	r1, #80	; 0x50
 800293c:	f7fe ff86 	bl	800184c <map>
 8002940:	ec53 2b10 	vmov	r2, r3, d0
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f016 fa16 	bl	8018d78 <__aeabi_d2iz>
 800294c:	4603      	mov	r3, r0
 800294e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					if (valMap < 0) valMap = 0;
 8002952:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002956:	2b00      	cmp	r3, #0
 8002958:	da02      	bge.n	8002960 <main+0x1008>
 800295a:	2300      	movs	r3, #0
 800295c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					if (valMap > 127) valMap = 127;
 8002960:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002964:	2b7f      	cmp	r3, #127	; 0x7f
 8002966:	dd02      	ble.n	800296e <main+0x1016>
 8002968:	237f      	movs	r3, #127	; 0x7f
 800296a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800296e:	2300      	movs	r3, #0
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2301      	movs	r3, #1
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f240 133d 	movw	r3, #317	; 0x13d
 800297a:	f240 123d 	movw	r2, #317	; 0x13d
 800297e:	21bf      	movs	r1, #191	; 0xbf
 8002980:	f240 103d 	movw	r0, #317	; 0x13d
 8002984:	f001 faf8 	bl	8003f78 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002988:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800298c:	2b00      	cmp	r3, #0
 800298e:	d025      	beq.n	80029dc <main+0x1084>
 8002990:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002994:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002998:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 800299a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800299e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029ac:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80029b0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	2100      	movs	r1, #0
 80029be:	f001 f9ba 	bl	8003d36 <RGB>
 80029c2:	4603      	mov	r3, r0
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	2301      	movs	r3, #1
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f240 133d 	movw	r3, #317	; 0x13d
 80029ce:	f240 123d 	movw	r2, #317	; 0x13d
 80029d2:	4621      	mov	r1, r4
 80029d4:	f240 103d 	movw	r0, #317	; 0x13d
 80029d8:	f001 face 	bl	8003f78 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80029dc:	23ff      	movs	r3, #255	; 0xff
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	2301      	movs	r3, #1
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2381      	movs	r3, #129	; 0x81
 80029e6:	229d      	movs	r2, #157	; 0x9d
 80029e8:	21bd      	movs	r1, #189	; 0xbd
 80029ea:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80029ee:	f001 fc2b 	bl	8004248 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <main+0x1174>)
 80029f4:	8818      	ldrh	r0, [r3, #0]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	f240 4229 	movw	r2, #1065	; 0x429
 8002a00:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002a04:	f7fe ff22 	bl	800184c <map>
 8002a08:	ec53 2b10 	vmov	r2, r3, d0
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f016 f9b2 	bl	8018d78 <__aeabi_d2iz>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					if (valMap < 0) valMap = 0;
 8002a1a:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da02      	bge.n	8002a28 <main+0x10d0>
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					if (valMap > 127) valMap = 127;
 8002a28:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a2e:	dd02      	ble.n	8002a36 <main+0x10de>
 8002a30:	237f      	movs	r3, #127	; 0x7f
 8002a32:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f240 133d 	movw	r3, #317	; 0x13d
 8002a42:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002a46:	21bf      	movs	r1, #191	; 0xbf
 8002a48:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002a4c:	f001 fa94 	bl	8003f78 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a50:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d025      	beq.n	8002aa4 <main+0x114c>
 8002a58:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002a5c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002a60:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a62:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002a66:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a74:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002a78:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	2100      	movs	r1, #0
 8002a86:	f001 f956 	bl	8003d36 <RGB>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	f240 133d 	movw	r3, #317	; 0x13d
 8002a96:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002aa0:	f001 fa6a 	bl	8003f78 <LCD_Line>

					if (!viewGraphs) {
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <main+0x1164>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 8192 	bne.w	8002dd2 <main+0x147a>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002ab4:	e07b      	b.n	8002bae <main+0x1256>
 8002ab6:	bf00      	nop
 8002ab8:	200007d4 	.word	0x200007d4
 8002abc:	20000514 	.word	0x20000514
 8002ac0:	20000520 	.word	0x20000520
 8002ac4:	40240000 	.word	0x40240000
 8002ac8:	20000530 	.word	0x20000530
 8002acc:	20000560 	.word	0x20000560
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002ad0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ad4:	4ab3      	ldr	r2, [pc, #716]	; (8002da4 <main+0x144c>)
 8002ad6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ada:	b298      	uxth	r0, r3
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002ae6:	21e2      	movs	r1, #226	; 0xe2
 8002ae8:	f7fe feb0 	bl	800184c <map>
 8002aec:	ec53 2b10 	vmov	r2, r3, d0
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f016 f940 	bl	8018d78 <__aeabi_d2iz>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							if (valMap < 0) valMap = 0;
 8002afe:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da02      	bge.n	8002b0c <main+0x11b4>
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							if (valMap > 127) valMap = 127;
 8002b0c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002b10:	2b7f      	cmp	r3, #127	; 0x7f
 8002b12:	dd02      	ble.n	8002b1a <main+0x11c2>
 8002b14:	237f      	movs	r3, #127	; 0x7f
 8002b16:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002b1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b1e:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b22:	b298      	uxth	r0, r3
 8002b24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b28:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	2301      	movs	r3, #1
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	f240 133d 	movw	r3, #317	; 0x13d
 8002b3a:	21bf      	movs	r1, #191	; 0xbf
 8002b3c:	f001 fa1c 	bl	8003f78 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b40:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d02d      	beq.n	8002ba4 <main+0x124c>
 8002b48:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b4c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b50:	b29c      	uxth	r4, r3
 8002b52:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002b56:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b5a:	b29d      	uxth	r5, r3
 8002b5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002b60:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b64:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b66:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002b6a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b78:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002b7c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	2100      	movs	r1, #0
 8002b8a:	f001 f8d4 	bl	8003d36 <RGB>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f240 133d 	movw	r3, #317	; 0x13d
 8002b9a:	4632      	mov	r2, r6
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f001 f9ea 	bl	8003f78 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002ba4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002bae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002bb2:	2b9a      	cmp	r3, #154	; 0x9a
 8002bb4:	d98c      	bls.n	8002ad0 <main+0x1178>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8002bbc:	e06e      	b.n	8002c9c <main+0x1344>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002bbe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002bc2:	4a79      	ldr	r2, [pc, #484]	; (8002da8 <main+0x1450>)
 8002bc4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002bd4:	2150      	movs	r1, #80	; 0x50
 8002bd6:	f7fe fe39 	bl	800184c <map>
 8002bda:	ec53 2b10 	vmov	r2, r3, d0
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f016 f8c9 	bl	8018d78 <__aeabi_d2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							if (valMap < 0) valMap = 0;
 8002bec:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da02      	bge.n	8002bfa <main+0x12a2>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							if (valMap > 127) valMap = 127;
 8002bfa:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002c00:	dd02      	ble.n	8002c08 <main+0x12b0>
 8002c02:	237f      	movs	r3, #127	; 0x7f
 8002c04:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002c08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c0c:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c10:	b298      	uxth	r0, r3
 8002c12:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c16:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	2301      	movs	r3, #1
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f240 133d 	movw	r3, #317	; 0x13d
 8002c28:	21bf      	movs	r1, #191	; 0xbf
 8002c2a:	f001 f9a5 	bl	8003f78 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c2e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d02d      	beq.n	8002c92 <main+0x133a>
 8002c36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c3a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c3e:	b29c      	uxth	r4, r3
 8002c40:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002c44:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c48:	b29d      	uxth	r5, r3
 8002c4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c4e:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c52:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c54:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002c58:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c66:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002c6a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	2100      	movs	r1, #0
 8002c78:	f001 f85d 	bl	8003d36 <RGB>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2301      	movs	r3, #1
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f240 133d 	movw	r3, #317	; 0x13d
 8002c88:	4632      	mov	r2, r6
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f001 f973 	bl	8003f78 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002c92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002c96:	3301      	adds	r3, #1
 8002c98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8002c9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002ca0:	2b9a      	cmp	r3, #154	; 0x9a
 8002ca2:	d98c      	bls.n	8002bbe <main+0x1266>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002caa:	e073      	b.n	8002d94 <main+0x143c>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002cac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002cb0:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <main+0x1454>)
 8002cb2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cb6:	b298      	uxth	r0, r3
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f240 4229 	movw	r2, #1065	; 0x429
 8002cc2:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002cc6:	f7fe fdc1 	bl	800184c <map>
 8002cca:	ec53 2b10 	vmov	r2, r3, d0
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f016 f851 	bl	8018d78 <__aeabi_d2iz>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							if (valMap < 0) valMap = 0;
 8002cdc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da02      	bge.n	8002cea <main+0x1392>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							if (valMap > 127) valMap = 127;
 8002cea:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002cee:	2b7f      	cmp	r3, #127	; 0x7f
 8002cf0:	dd02      	ble.n	8002cf8 <main+0x13a0>
 8002cf2:	237f      	movs	r3, #127	; 0x7f
 8002cf4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8002cf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002cfc:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d00:	3301      	adds	r3, #1
 8002d02:	b298      	uxth	r0, r3
 8002d04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d08:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2301      	movs	r3, #1
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f240 133d 	movw	r3, #317	; 0x13d
 8002d1c:	21bf      	movs	r1, #191	; 0xbf
 8002d1e:	f001 f92b 	bl	8003f78 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d22:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02f      	beq.n	8002d8a <main+0x1432>
 8002d2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d2e:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d32:	3301      	adds	r3, #1
 8002d34:	b29c      	uxth	r4, r3
 8002d36:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002d3a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d3e:	b29d      	uxth	r5, r3
 8002d40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d44:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d4c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002d50:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d5e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8002d62:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f000 ffe1 	bl	8003d36 <RGB>
 8002d74:	4603      	mov	r3, r0
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f240 133d 	movw	r3, #317	; 0x13d
 8002d80:	4632      	mov	r2, r6
 8002d82:	4629      	mov	r1, r5
 8002d84:	4620      	mov	r0, r4
 8002d86:	f001 f8f7 	bl	8003f78 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002d8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002d94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d98:	2b9a      	cmp	r3, #154	; 0x9a
 8002d9a:	d987      	bls.n	8002cac <main+0x1354>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002da2:	e00e      	b.n	8002dc2 <main+0x146a>
 8002da4:	20000564 	.word	0x20000564
 8002da8:	2000069c 	.word	0x2000069c
 8002dac:	200007d4 	.word	0x200007d4
 8002db0:	4a8e      	ldr	r2, [pc, #568]	; (8002fec <main+0x1694>)
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db6:	6353      	str	r3, [r2, #52]	; 0x34
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dca:	d9f1      	bls.n	8002db0 <main+0x1458>
						viewGraphs = 1;
 8002dcc:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <main+0x1698>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8002dd2:	4b88      	ldr	r3, [pc, #544]	; (8002ff4 <main+0x169c>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8393 	beq.w	8003502 <main+0x1baa>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8002ddc:	2202      	movs	r2, #2
 8002dde:	4986      	ldr	r1, [pc, #536]	; (8002ff8 <main+0x16a0>)
 8002de0:	4886      	ldr	r0, [pc, #536]	; (8002ffc <main+0x16a4>)
 8002de2:	f01a fef5 	bl	801dbd0 <memcmp>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 808a 	bne.w	8002f02 <main+0x15aa>

					char val[2];

					val[0] = rx_buffer[2];
 8002dee:	4b83      	ldr	r3, [pc, #524]	; (8002ffc <main+0x16a4>)
 8002df0:	789b      	ldrb	r3, [r3, #2]
 8002df2:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <main+0x16a4>)
 8002df8:	78db      	ldrb	r3, [r3, #3]
 8002dfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 8002dfe:	f107 0320 	add.w	r3, r7, #32
 8002e02:	4618      	mov	r0, r3
 8002e04:	f016 fa31 	bl	801926a <atoi>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f939 	bl	8001084 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8002e12:	4b7a      	ldr	r3, [pc, #488]	; (8002ffc <main+0x16a4>)
 8002e14:	791b      	ldrb	r3, [r3, #4]
 8002e16:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 8002e1a:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <main+0x16a4>)
 8002e1c:	795b      	ldrb	r3, [r3, #5]
 8002e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 8002e22:	f107 0320 	add.w	r3, r7, #32
 8002e26:	4618      	mov	r0, r3
 8002e28:	f016 fa1f 	bl	801926a <atoi>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f907 	bl	8001044 <DS3231_setMin>

					val[0] = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 8002e42:	f107 0320 	add.w	r3, r7, #32
 8002e46:	4618      	mov	r0, r3
 8002e48:	f016 fa0f 	bl	801926a <atoi>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe f8d7 	bl	8001004 <DS3231_setSec>

					val[0] = rx_buffer[6];
 8002e56:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <main+0x16a4>)
 8002e58:	799b      	ldrb	r3, [r3, #6]
 8002e5a:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <main+0x16a4>)
 8002e60:	79db      	ldrb	r3, [r3, #7]
 8002e62:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 8002e66:	f107 0320 	add.w	r3, r7, #32
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f016 f9fd 	bl	801926a <atoi>
 8002e70:	4603      	mov	r3, r0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f945 	bl	8001104 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8002e7a:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <main+0x16a4>)
 8002e7c:	7a1b      	ldrb	r3, [r3, #8]
 8002e7e:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 8002e82:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <main+0x16a4>)
 8002e84:	7a5b      	ldrb	r3, [r3, #9]
 8002e86:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 8002e8a:	f107 0320 	add.w	r3, r7, #32
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f016 f9eb 	bl	801926a <atoi>
 8002e94:	4603      	mov	r3, r0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe f953 	bl	8001144 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8002e9e:	4b57      	ldr	r3, [pc, #348]	; (8002ffc <main+0x16a4>)
 8002ea0:	7a9b      	ldrb	r3, [r3, #10]
 8002ea2:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 8002ea6:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <main+0x16a4>)
 8002ea8:	7adb      	ldrb	r3, [r3, #11]
 8002eaa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 8002eae:	f107 0320 	add.w	r3, r7, #32
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f016 f9d9 	bl	801926a <atoi>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f961 	bl	8001184 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8002ec2:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <main+0x16a4>)
 8002ec4:	7b1b      	ldrb	r3, [r3, #12]
 8002ec6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f016 f9cb 	bl	801926a <atoi>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe f8f3 	bl	80010c4 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ee4:	e008      	b.n	8002ef8 <main+0x15a0>
 8002ee6:	4a41      	ldr	r2, [pc, #260]	; (8002fec <main+0x1694>)
 8002ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eec:	6353      	str	r3, [r2, #52]	; 0x34
 8002eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d9f1      	bls.n	8002ee6 <main+0x158e>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002f02:	2202      	movs	r2, #2
 8002f04:	493e      	ldr	r1, [pc, #248]	; (8003000 <main+0x16a8>)
 8002f06:	483d      	ldr	r0, [pc, #244]	; (8002ffc <main+0x16a4>)
 8002f08:	f01a fe62 	bl	801dbd0 <memcmp>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d122      	bne.n	8002f58 <main+0x1600>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002f18:	e00a      	b.n	8002f30 <main+0x15d8>
 8002f1a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd f9df 	bl	80002e4 <AT24XX_Update>
 8002f26:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002f30:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d3ef      	bcc.n	8002f1a <main+0x15c2>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <main+0x16ac>)
 8002f3c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002f40:	461d      	mov	r5, r3
 8002f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002f4a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002f4e:	2364      	movs	r3, #100	; 0x64
 8002f50:	2214      	movs	r2, #20
 8002f52:	482d      	ldr	r0, [pc, #180]	; (8003008 <main+0x16b0>)
 8002f54:	f012 f97f 	bl	8015256 <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8002f58:	2202      	movs	r2, #2
 8002f5a:	492c      	ldr	r1, [pc, #176]	; (800300c <main+0x16b4>)
 8002f5c:	4827      	ldr	r0, [pc, #156]	; (8002ffc <main+0x16a4>)
 8002f5e:	f01a fe37 	bl	801dbd0 <memcmp>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 82b7 	bne.w	80034d8 <main+0x1b80>

					char valT[4] = { 0 };
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002f74:	e00f      	b.n	8002f96 <main+0x163e>
 8002f76:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002f7a:	1c9a      	adds	r2, r3, #2
 8002f7c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002f80:	491e      	ldr	r1, [pc, #120]	; (8002ffc <main+0x16a4>)
 8002f82:	5c8a      	ldrb	r2, [r1, r2]
 8002f84:	33b0      	adds	r3, #176	; 0xb0
 8002f86:	443b      	add	r3, r7
 8002f88:	f803 2c68 	strb.w	r2, [r3, #-104]
 8002f8c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002f90:	3301      	adds	r3, #1
 8002f92:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002f96:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d9eb      	bls.n	8002f76 <main+0x161e>

					temperatureRemote = atoi(valT);
 8002f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f016 f961 	bl	801926a <atoi>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f015 fbca 	bl	8018744 <__aeabi_i2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <main+0x16b8>)
 8002fb6:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <main+0x16b8>)
 8002fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <main+0x16bc>)
 8002fc6:	f015 fd51 	bl	8018a6c <__aeabi_ddiv>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4910      	ldr	r1, [pc, #64]	; (8003010 <main+0x16b8>)
 8002fd0:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <main+0x16c0>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8002fe8:	e028      	b.n	800303c <main+0x16e4>
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	20000514 	.word	0x20000514
 8002ff4:	2000091c 	.word	0x2000091c
 8002ff8:	080519a0 	.word	0x080519a0
 8002ffc:	2000090c 	.word	0x2000090c
 8003000:	080519a4 	.word	0x080519a4
 8003004:	080519cc 	.word	0x080519cc
 8003008:	200003c0 	.word	0x200003c0
 800300c:	080519a8 	.word	0x080519a8
 8003010:	20000540 	.word	0x20000540
 8003014:	40240000 	.word	0x40240000
 8003018:	08051914 	.word	0x08051914
 800301c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003020:	1d9a      	adds	r2, r3, #6
 8003022:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003026:	499d      	ldr	r1, [pc, #628]	; (800329c <main+0x1944>)
 8003028:	5c8a      	ldrb	r2, [r1, r2]
 800302a:	33b0      	adds	r3, #176	; 0xb0
 800302c:	443b      	add	r3, r7
 800302e:	f803 2c6c 	strb.w	r2, [r3, #-108]
 8003032:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003036:	3301      	adds	r3, #1
 8003038:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800303c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8003040:	2b02      	cmp	r3, #2
 8003042:	d9eb      	bls.n	800301c <main+0x16c4>

					humidityRemote = atoi(valH);
 8003044:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003048:	4618      	mov	r0, r3
 800304a:	f016 f90e 	bl	801926a <atoi>
 800304e:	4603      	mov	r3, r0
 8003050:	4618      	mov	r0, r3
 8003052:	f015 fb77 	bl	8018744 <__aeabi_i2d>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4991      	ldr	r1, [pc, #580]	; (80032a0 <main+0x1948>)
 800305c:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 8003060:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <main+0x1948>)
 8003062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	4b8e      	ldr	r3, [pc, #568]	; (80032a4 <main+0x194c>)
 800306c:	f015 fcfe 	bl	8018a6c <__aeabi_ddiv>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	498a      	ldr	r1, [pc, #552]	; (80032a0 <main+0x1948>)
 8003076:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 800307a:	4b8b      	ldr	r3, [pc, #556]	; (80032a8 <main+0x1950>)
 800307c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003080:	4b8a      	ldr	r3, [pc, #552]	; (80032ac <main+0x1954>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f015 fe2f 	bl	8018ce8 <__aeabi_dcmpeq>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d115      	bne.n	80030bc <main+0x1764>
 8003090:	4b85      	ldr	r3, [pc, #532]	; (80032a8 <main+0x1950>)
 8003092:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	4b85      	ldr	r3, [pc, #532]	; (80032b0 <main+0x1958>)
 800309c:	f015 fe2e 	bl	8018cfc <__aeabi_dcmplt>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <main+0x1764>
 80030a6:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <main+0x1950>)
 80030a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	4b80      	ldr	r3, [pc, #512]	; (80032b4 <main+0x195c>)
 80030b2:	f015 fe41 	bl	8018d38 <__aeabi_dcmpgt>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d118      	bne.n	80030ee <main+0x1796>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030bc:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <main+0x1948>)
 80030be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c2:	4b7d      	ldr	r3, [pc, #500]	; (80032b8 <main+0x1960>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80030c8:	f015 fe0e 	bl	8018ce8 <__aeabi_dcmpeq>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 8202 	bne.w	80034d8 <main+0x1b80>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030d4:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <main+0x1948>)
 80030d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	f015 fe29 	bl	8018d38 <__aeabi_dcmpgt>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 81f5 	beq.w	80034d8 <main+0x1b80>

						remoteSensorLastUpdate = 0;
 80030ee:	4b73      	ldr	r3, [pc, #460]	; (80032bc <main+0x1964>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 80030f4:	4b72      	ldr	r3, [pc, #456]	; (80032c0 <main+0x1968>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030fe:	4971      	ldr	r1, [pc, #452]	; (80032c4 <main+0x196c>)
 8003100:	4618      	mov	r0, r3
 8003102:	f016 ff69 	bl	8019fd8 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003106:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800310a:	2300      	movs	r3, #0
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2301      	movs	r3, #1
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <main+0x1970>)
 8003114:	2128      	movs	r1, #40	; 0x28
 8003116:	f240 1077 	movw	r0, #375	; 0x177
 800311a:	f002 f849 	bl	80051b0 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 800311e:	4b63      	ldr	r3, [pc, #396]	; (80032ac <main+0x1954>)
 8003120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <main+0x1974>)
 800312a:	f015 fdf1 	bl	8018d10 <__aeabi_dcmple>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d014      	beq.n	800315e <main+0x1806>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003134:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <main+0x1954>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800313e:	4964      	ldr	r1, [pc, #400]	; (80032d0 <main+0x1978>)
 8003140:	f016 ff4a 	bl	8019fd8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003144:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003148:	2300      	movs	r3, #0
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	2301      	movs	r3, #1
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <main+0x1970>)
 8003152:	215a      	movs	r1, #90	; 0x5a
 8003154:	f240 1061 	movw	r0, #353	; 0x161
 8003158:	f002 f82a 	bl	80051b0 <LCD_Font>
 800315c:	e076      	b.n	800324c <main+0x18f4>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <main+0x1954>)
 8003160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	f015 fdc6 	bl	8018cfc <__aeabi_dcmplt>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01f      	beq.n	80031b6 <main+0x185e>
 8003176:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <main+0x1954>)
 8003178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	4b52      	ldr	r3, [pc, #328]	; (80032cc <main+0x1974>)
 8003182:	f015 fdd9 	bl	8018d38 <__aeabi_dcmpgt>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d014      	beq.n	80031b6 <main+0x185e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800318c:	4b47      	ldr	r3, [pc, #284]	; (80032ac <main+0x1954>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003196:	494e      	ldr	r1, [pc, #312]	; (80032d0 <main+0x1978>)
 8003198:	f016 ff1e 	bl	8019fd8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800319c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031a0:	2300      	movs	r3, #0
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	2301      	movs	r3, #1
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <main+0x1970>)
 80031aa:	215a      	movs	r1, #90	; 0x5a
 80031ac:	f240 1081 	movw	r0, #385	; 0x181
 80031b0:	f001 fffe 	bl	80051b0 <LCD_Font>
 80031b4:	e04a      	b.n	800324c <main+0x18f4>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <main+0x1954>)
 80031b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f015 fdb8 	bl	8018d38 <__aeabi_dcmpgt>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01f      	beq.n	800320e <main+0x18b6>
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <main+0x1954>)
 80031d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <main+0x194c>)
 80031da:	f015 fd8f 	bl	8018cfc <__aeabi_dcmplt>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d014      	beq.n	800320e <main+0x18b6>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80031e4:	4b31      	ldr	r3, [pc, #196]	; (80032ac <main+0x1954>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80031ee:	4939      	ldr	r1, [pc, #228]	; (80032d4 <main+0x197c>)
 80031f0:	f016 fef2 	bl	8019fd8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80031f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031f8:	2300      	movs	r3, #0
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	2301      	movs	r3, #1
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <main+0x1970>)
 8003202:	215a      	movs	r1, #90	; 0x5a
 8003204:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003208:	f001 ffd2 	bl	80051b0 <LCD_Font>
 800320c:	e01e      	b.n	800324c <main+0x18f4>
						}
						else if (temperatureRemoteLast >= 10) {
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <main+0x1954>)
 8003210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <main+0x194c>)
 800321a:	f015 fd83 	bl	8018d24 <__aeabi_dcmpge>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <main+0x18f4>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <main+0x1954>)
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800322e:	4929      	ldr	r1, [pc, #164]	; (80032d4 <main+0x197c>)
 8003230:	f016 fed2 	bl	8019fd8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003234:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003238:	2300      	movs	r3, #0
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2301      	movs	r3, #1
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <main+0x1970>)
 8003242:	215a      	movs	r1, #90	; 0x5a
 8003244:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003248:	f001 ffb2 	bl	80051b0 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <main+0x1950>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	4916      	ldr	r1, [pc, #88]	; (80032ac <main+0x1954>)
 8003254:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <main+0x1954>)
 800325a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <main+0x1974>)
 8003264:	f015 fd54 	bl	8018d10 <__aeabi_dcmple>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d034      	beq.n	80032d8 <main+0x1980>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <main+0x1954>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003278:	4915      	ldr	r1, [pc, #84]	; (80032d0 <main+0x1978>)
 800327a:	f016 fead 	bl	8019fd8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800327e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	2301      	movs	r3, #1
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <main+0x1970>)
 800328e:	215a      	movs	r1, #90	; 0x5a
 8003290:	f240 1061 	movw	r0, #353	; 0x161
 8003294:	f001 ff8c 	bl	80051b0 <LCD_Font>
 8003298:	e098      	b.n	80033cc <main+0x1a74>
 800329a:	bf00      	nop
 800329c:	2000090c 	.word	0x2000090c
 80032a0:	20000550 	.word	0x20000550
 80032a4:	40240000 	.word	0x40240000
 80032a8:	20000540 	.word	0x20000540
 80032ac:	20000548 	.word	0x20000548
 80032b0:	40554000 	.word	0x40554000
 80032b4:	c0440000 	.word	0xc0440000
 80032b8:	20000558 	.word	0x20000558
 80032bc:	20000004 	.word	0x20000004
 80032c0:	20000000 	.word	0x20000000
 80032c4:	0805195c 	.word	0x0805195c
 80032c8:	08029270 	.word	0x08029270
 80032cc:	c0240000 	.word	0xc0240000
 80032d0:	080519ac 	.word	0x080519ac
 80032d4:	080519b4 	.word	0x080519b4
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80032d8:	4bac      	ldr	r3, [pc, #688]	; (800358c <main+0x1c34>)
 80032da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f015 fd09 	bl	8018cfc <__aeabi_dcmplt>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <main+0x19da>
 80032f0:	4ba6      	ldr	r3, [pc, #664]	; (800358c <main+0x1c34>)
 80032f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	4ba5      	ldr	r3, [pc, #660]	; (8003590 <main+0x1c38>)
 80032fc:	f015 fd1c 	bl	8018d38 <__aeabi_dcmpgt>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d015      	beq.n	8003332 <main+0x19da>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003306:	4ba1      	ldr	r3, [pc, #644]	; (800358c <main+0x1c34>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003310:	49a0      	ldr	r1, [pc, #640]	; (8003594 <main+0x1c3c>)
 8003312:	f016 fe61 	bl	8019fd8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003316:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800331a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	2301      	movs	r3, #1
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4b9c      	ldr	r3, [pc, #624]	; (8003598 <main+0x1c40>)
 8003326:	215a      	movs	r1, #90	; 0x5a
 8003328:	f240 1081 	movw	r0, #385	; 0x181
 800332c:	f001 ff40 	bl	80051b0 <LCD_Font>
 8003330:	e04c      	b.n	80033cc <main+0x1a74>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003332:	4b96      	ldr	r3, [pc, #600]	; (800358c <main+0x1c34>)
 8003334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f015 fcfa 	bl	8018d38 <__aeabi_dcmpgt>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <main+0x1a34>
 800334a:	4b90      	ldr	r3, [pc, #576]	; (800358c <main+0x1c34>)
 800334c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	4b91      	ldr	r3, [pc, #580]	; (800359c <main+0x1c44>)
 8003356:	f015 fcd1 	bl	8018cfc <__aeabi_dcmplt>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <main+0x1a34>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003360:	4b8a      	ldr	r3, [pc, #552]	; (800358c <main+0x1c34>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800336a:	498d      	ldr	r1, [pc, #564]	; (80035a0 <main+0x1c48>)
 800336c:	f016 fe34 	bl	8019fd8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003370:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	2301      	movs	r3, #1
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4b86      	ldr	r3, [pc, #536]	; (8003598 <main+0x1c40>)
 8003380:	215a      	movs	r1, #90	; 0x5a
 8003382:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003386:	f001 ff13 	bl	80051b0 <LCD_Font>
 800338a:	e01f      	b.n	80033cc <main+0x1a74>
						}
						else if (temperatureRemoteLast >= 10) {
 800338c:	4b7f      	ldr	r3, [pc, #508]	; (800358c <main+0x1c34>)
 800338e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	4b81      	ldr	r3, [pc, #516]	; (800359c <main+0x1c44>)
 8003398:	f015 fcc4 	bl	8018d24 <__aeabi_dcmpge>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d014      	beq.n	80033cc <main+0x1a74>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80033a2:	4b7a      	ldr	r3, [pc, #488]	; (800358c <main+0x1c34>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80033ac:	497c      	ldr	r1, [pc, #496]	; (80035a0 <main+0x1c48>)
 80033ae:	f016 fe13 	bl	8019fd8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80033b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	2301      	movs	r3, #1
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <main+0x1c40>)
 80033c2:	215a      	movs	r1, #90	; 0x5a
 80033c4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80033c8:	f001 fef2 	bl	80051b0 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 80033cc:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <main+0x1c4c>)
 80033ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	4b71      	ldr	r3, [pc, #452]	; (800359c <main+0x1c44>)
 80033d8:	f015 fca4 	bl	8018d24 <__aeabi_dcmpge>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <main+0x1ab4>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80033e2:	4b70      	ldr	r3, [pc, #448]	; (80035a4 <main+0x1c4c>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80033ec:	4969      	ldr	r1, [pc, #420]	; (8003594 <main+0x1c3c>)
 80033ee:	f016 fdf3 	bl	8019fd8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80033f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033f6:	2300      	movs	r3, #0
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	2301      	movs	r3, #1
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	4b66      	ldr	r3, [pc, #408]	; (8003598 <main+0x1c40>)
 8003400:	2128      	movs	r1, #40	; 0x28
 8003402:	f240 1073 	movw	r0, #371	; 0x173
 8003406:	f001 fed3 	bl	80051b0 <LCD_Font>
 800340a:	e01e      	b.n	800344a <main+0x1af2>
						}
						else if (humidityRemoteLast < 10) {
 800340c:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <main+0x1c4c>)
 800340e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <main+0x1c44>)
 8003418:	f015 fc70 	bl	8018cfc <__aeabi_dcmplt>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d013      	beq.n	800344a <main+0x1af2>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003422:	4b60      	ldr	r3, [pc, #384]	; (80035a4 <main+0x1c4c>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800342c:	4959      	ldr	r1, [pc, #356]	; (8003594 <main+0x1c3c>)
 800342e:	f016 fdd3 	bl	8019fd8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003432:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003436:	2300      	movs	r3, #0
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2301      	movs	r3, #1
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <main+0x1c40>)
 8003440:	2128      	movs	r1, #40	; 0x28
 8003442:	f240 1093 	movw	r0, #403	; 0x193
 8003446:	f001 feb3 	bl	80051b0 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 800344a:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <main+0x1c50>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	4954      	ldr	r1, [pc, #336]	; (80035a4 <main+0x1c4c>)
 8003452:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <main+0x1c4c>)
 8003458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4b4e      	ldr	r3, [pc, #312]	; (800359c <main+0x1c44>)
 8003462:	f015 fc5f 	bl	8018d24 <__aeabi_dcmpge>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <main+0x1b40>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800346c:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <main+0x1c4c>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003476:	4947      	ldr	r1, [pc, #284]	; (8003594 <main+0x1c3c>)
 8003478:	f016 fdae 	bl	8019fd8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800347c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2301      	movs	r3, #1
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <main+0x1c40>)
 800348c:	2128      	movs	r1, #40	; 0x28
 800348e:	f240 1073 	movw	r0, #371	; 0x173
 8003492:	f001 fe8d 	bl	80051b0 <LCD_Font>
 8003496:	e01f      	b.n	80034d8 <main+0x1b80>
						}
						else if (humidityRemoteLast < 10) {
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <main+0x1c4c>)
 800349a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	4b3e      	ldr	r3, [pc, #248]	; (800359c <main+0x1c44>)
 80034a4:	f015 fc2a 	bl	8018cfc <__aeabi_dcmplt>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <main+0x1b80>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80034ae:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <main+0x1c4c>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80034b8:	4936      	ldr	r1, [pc, #216]	; (8003594 <main+0x1c3c>)
 80034ba:	f016 fd8d 	bl	8019fd8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80034be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80034c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	2301      	movs	r3, #1
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <main+0x1c40>)
 80034ce:	2128      	movs	r1, #40	; 0x28
 80034d0:	f240 1093 	movw	r0, #403	; 0x193
 80034d4:	f001 fe6c 	bl	80051b0 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <main+0x1c54>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80034e4:	e009      	b.n	80034fa <main+0x1ba2>
 80034e6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80034ea:	4a31      	ldr	r2, [pc, #196]	; (80035b0 <main+0x1c58>)
 80034ec:	2100      	movs	r1, #0
 80034ee:	54d1      	strb	r1, [r2, r3]
 80034f0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80034f4:	3301      	adds	r3, #1
 80034f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80034fa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	d9f1      	bls.n	80034e6 <main+0x1b8e>
			}

			remoteSensorLastUpdate++;
 8003502:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <main+0x1c5c>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	3301      	adds	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <main+0x1c5c>)
 800350c:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <main+0x1c5c>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	f240 813e 	bls.w	8003794 <main+0x1e3c>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <main+0x1c34>)
 800351a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f015 fbdf 	bl	8018ce8 <__aeabi_dcmpeq>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f040 8107 	bne.w	8003740 <main+0x1de8>
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <main+0x1c4c>)
 8003534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f015 fbd2 	bl	8018ce8 <__aeabi_dcmpeq>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 80fa 	bne.w	8003740 <main+0x1de8>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <main+0x1c34>)
 800354e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <main+0x1c38>)
 8003558:	f015 fbda 	bl	8018d10 <__aeabi_dcmple>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02a      	beq.n	80035b8 <main+0x1c60>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <main+0x1c34>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800356c:	4909      	ldr	r1, [pc, #36]	; (8003594 <main+0x1c3c>)
 800356e:	f016 fd33 	bl	8019fd8 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003572:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003576:	2300      	movs	r3, #0
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2301      	movs	r3, #1
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <main+0x1c40>)
 8003580:	215a      	movs	r1, #90	; 0x5a
 8003582:	f240 1061 	movw	r0, #353	; 0x161
 8003586:	f001 fe13 	bl	80051b0 <LCD_Font>
 800358a:	e08c      	b.n	80036a6 <main+0x1d4e>
 800358c:	20000548 	.word	0x20000548
 8003590:	c0240000 	.word	0xc0240000
 8003594:	080519ac 	.word	0x080519ac
 8003598:	08029270 	.word	0x08029270
 800359c:	40240000 	.word	0x40240000
 80035a0:	080519b4 	.word	0x080519b4
 80035a4:	20000558 	.word	0x20000558
 80035a8:	20000550 	.word	0x20000550
 80035ac:	2000091c 	.word	0x2000091c
 80035b0:	2000090c 	.word	0x2000090c
 80035b4:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80035b8:	4b79      	ldr	r3, [pc, #484]	; (80037a0 <main+0x1e48>)
 80035ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	f015 fb99 	bl	8018cfc <__aeabi_dcmplt>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01f      	beq.n	8003610 <main+0x1cb8>
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <main+0x1e48>)
 80035d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	4b72      	ldr	r3, [pc, #456]	; (80037a4 <main+0x1e4c>)
 80035dc:	f015 fbac 	bl	8018d38 <__aeabi_dcmpgt>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d014      	beq.n	8003610 <main+0x1cb8>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <main+0x1e48>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80035f0:	496d      	ldr	r1, [pc, #436]	; (80037a8 <main+0x1e50>)
 80035f2:	f016 fcf1 	bl	8019fd8 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80035fa:	2300      	movs	r3, #0
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2301      	movs	r3, #1
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <main+0x1e54>)
 8003604:	215a      	movs	r1, #90	; 0x5a
 8003606:	f240 1081 	movw	r0, #385	; 0x181
 800360a:	f001 fdd1 	bl	80051b0 <LCD_Font>
 800360e:	e04a      	b.n	80036a6 <main+0x1d4e>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003610:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <main+0x1e48>)
 8003612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	f015 fb8b 	bl	8018d38 <__aeabi_dcmpgt>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01f      	beq.n	8003668 <main+0x1d10>
 8003628:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <main+0x1e48>)
 800362a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <main+0x1e58>)
 8003634:	f015 fb62 	bl	8018cfc <__aeabi_dcmplt>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d014      	beq.n	8003668 <main+0x1d10>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <main+0x1e48>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003648:	495a      	ldr	r1, [pc, #360]	; (80037b4 <main+0x1e5c>)
 800364a:	f016 fcc5 	bl	8019fd8 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800364e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003652:	2300      	movs	r3, #0
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2301      	movs	r3, #1
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4b54      	ldr	r3, [pc, #336]	; (80037ac <main+0x1e54>)
 800365c:	215a      	movs	r1, #90	; 0x5a
 800365e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003662:	f001 fda5 	bl	80051b0 <LCD_Font>
 8003666:	e01e      	b.n	80036a6 <main+0x1d4e>
					}
					else if (temperatureRemoteLast >= 10) {
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <main+0x1e48>)
 800366a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <main+0x1e58>)
 8003674:	f015 fb56 	bl	8018d24 <__aeabi_dcmpge>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d013      	beq.n	80036a6 <main+0x1d4e>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800367e:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <main+0x1e48>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003688:	494a      	ldr	r1, [pc, #296]	; (80037b4 <main+0x1e5c>)
 800368a:	f016 fca5 	bl	8019fd8 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800368e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003692:	2300      	movs	r3, #0
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2301      	movs	r3, #1
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4b44      	ldr	r3, [pc, #272]	; (80037ac <main+0x1e54>)
 800369c:	215a      	movs	r1, #90	; 0x5a
 800369e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80036a2:	f001 fd85 	bl	80051b0 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 80036a6:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <main+0x1e60>)
 80036a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <main+0x1e58>)
 80036b2:	f015 fb37 	bl	8018d24 <__aeabi_dcmpge>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d014      	beq.n	80036e6 <main+0x1d8e>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036bc:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <main+0x1e60>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80036c6:	4938      	ldr	r1, [pc, #224]	; (80037a8 <main+0x1e50>)
 80036c8:	f016 fc86 	bl	8019fd8 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80036d0:	2300      	movs	r3, #0
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2301      	movs	r3, #1
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <main+0x1e54>)
 80036da:	2128      	movs	r1, #40	; 0x28
 80036dc:	f240 1073 	movw	r0, #371	; 0x173
 80036e0:	f001 fd66 	bl	80051b0 <LCD_Font>
 80036e4:	e01e      	b.n	8003724 <main+0x1dcc>
					}
					else if (humidityRemoteLast < 10) {
 80036e6:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <main+0x1e60>)
 80036e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <main+0x1e58>)
 80036f2:	f015 fb03 	bl	8018cfc <__aeabi_dcmplt>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <main+0x1dcc>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036fc:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <main+0x1e60>)
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003706:	4928      	ldr	r1, [pc, #160]	; (80037a8 <main+0x1e50>)
 8003708:	f016 fc66 	bl	8019fd8 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800370c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003710:	2300      	movs	r3, #0
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2301      	movs	r3, #1
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4b24      	ldr	r3, [pc, #144]	; (80037ac <main+0x1e54>)
 800371a:	2128      	movs	r1, #40	; 0x28
 800371c:	f240 1093 	movw	r0, #403	; 0x193
 8003720:	f001 fd46 	bl	80051b0 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003724:	491e      	ldr	r1, [pc, #120]	; (80037a0 <main+0x1e48>)
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003732:	4921      	ldr	r1, [pc, #132]	; (80037b8 <main+0x1e60>)
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <main+0x1e64>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800374a:	491d      	ldr	r1, [pc, #116]	; (80037c0 <main+0x1e68>)
 800374c:	4618      	mov	r0, r3
 800374e:	f016 fc43 	bl	8019fd8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003752:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003756:	2300      	movs	r3, #0
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	2301      	movs	r3, #1
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <main+0x1e54>)
 8003760:	2128      	movs	r1, #40	; 0x28
 8003762:	f240 1077 	movw	r0, #375	; 0x177
 8003766:	f001 fd23 	bl	80051b0 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <main+0x1e6c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003774:	4912      	ldr	r1, [pc, #72]	; (80037c0 <main+0x1e68>)
 8003776:	4618      	mov	r0, r3
 8003778:	f016 fc2e 	bl	8019fd8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 800377c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <main+0x1e70>)
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2301      	movs	r3, #1
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <main+0x1e54>)
 800378a:	2128      	movs	r1, #40	; 0x28
 800378c:	f240 1077 	movw	r0, #375	; 0x177
 8003790:	f001 fd0e 	bl	80051b0 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <main+0x1e6c>)
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <main+0x1e64>)
 800379a:	701a      	strb	r2, [r3, #0]
	{
 800379c:	f7fe b9d6 	b.w	8001b4c <main+0x1f4>
 80037a0:	20000548 	.word	0x20000548
 80037a4:	c0240000 	.word	0xc0240000
 80037a8:	080519ac 	.word	0x080519ac
 80037ac:	08029270 	.word	0x08029270
 80037b0:	40240000 	.word	0x40240000
 80037b4:	080519b4 	.word	0x080519b4
 80037b8:	20000558 	.word	0x20000558
 80037bc:	20000000 	.word	0x20000000
 80037c0:	0805195c 	.word	0x0805195c
 80037c4:	20000515 	.word	0x20000515
 80037c8:	00ffa500 	.word	0x00ffa500

080037cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b094      	sub	sp, #80	; 0x50
 80037d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037d2:	f107 0320 	add.w	r3, r7, #32
 80037d6:	2230      	movs	r2, #48	; 0x30
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f015 fd74 	bl	80192c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	2300      	movs	r3, #0
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <SystemClock_Config+0xcc>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a27      	ldr	r2, [pc, #156]	; (8003898 <SystemClock_Config+0xcc>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <SystemClock_Config+0xcc>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <SystemClock_Config+0xd0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a21      	ldr	r2, [pc, #132]	; (800389c <SystemClock_Config+0xd0>)
 8003816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <SystemClock_Config+0xd0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003828:	2301      	movs	r3, #1
 800382a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800382c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003832:	2302      	movs	r3, #2
 8003834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800383c:	2304      	movs	r3, #4
 800383e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003840:	23a8      	movs	r3, #168	; 0xa8
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003844:	2302      	movs	r3, #2
 8003846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003848:	2307      	movs	r3, #7
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800384c:	f107 0320 	add.w	r3, r7, #32
 8003850:	4618      	mov	r0, r3
 8003852:	f00d fd5b 	bl	801130c <HAL_RCC_OscConfig>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800385c:	f000 fa66 	bl	8003d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003860:	230f      	movs	r3, #15
 8003862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003864:	2302      	movs	r3, #2
 8003866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800386c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2105      	movs	r1, #5
 800387e:	4618      	mov	r0, r3
 8003880:	f00d ffbc 	bl	80117fc <HAL_RCC_ClockConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800388a:	f000 fa4f 	bl	8003d2c <Error_Handler>
  }
}
 800388e:	bf00      	nop
 8003890:	3750      	adds	r7, #80	; 0x50
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000

080038a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80038a6:	463b      	mov	r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <MX_DAC_Init+0x60>)
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <MX_DAC_Init+0x64>)
 80038b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038b4:	4812      	ldr	r0, [pc, #72]	; (8003900 <MX_DAC_Init+0x60>)
 80038b6:	f003 f944 	bl	8006b42 <HAL_DAC_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038c0:	f000 fa34 	bl	8003d2c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038cc:	463b      	mov	r3, r7
 80038ce:	2200      	movs	r2, #0
 80038d0:	4619      	mov	r1, r3
 80038d2:	480b      	ldr	r0, [pc, #44]	; (8003900 <MX_DAC_Init+0x60>)
 80038d4:	f003 fbb9 	bl	800704a <HAL_DAC_ConfigChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038de:	f000 fa25 	bl	8003d2c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80038e2:	463b      	mov	r3, r7
 80038e4:	2210      	movs	r2, #16
 80038e6:	4619      	mov	r1, r3
 80038e8:	4805      	ldr	r0, [pc, #20]	; (8003900 <MX_DAC_Init+0x60>)
 80038ea:	f003 fbae 	bl	800704a <HAL_DAC_ConfigChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80038f4:	f000 fa1a 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200002a8 	.word	0x200002a8
 8003904:	40007400 	.word	0x40007400

08003908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <MX_I2C1_Init+0x50>)
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <MX_I2C1_Init+0x54>)
 8003910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <MX_I2C1_Init+0x50>)
 8003914:	4a12      	ldr	r2, [pc, #72]	; (8003960 <MX_I2C1_Init+0x58>)
 8003916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_I2C1_Init+0x50>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <MX_I2C1_Init+0x50>)
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <MX_I2C1_Init+0x50>)
 8003926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800392a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <MX_I2C1_Init+0x50>)
 800392e:	2200      	movs	r2, #0
 8003930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <MX_I2C1_Init+0x50>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <MX_I2C1_Init+0x50>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <MX_I2C1_Init+0x50>)
 8003940:	2200      	movs	r2, #0
 8003942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003944:	4804      	ldr	r0, [pc, #16]	; (8003958 <MX_I2C1_Init+0x50>)
 8003946:	f007 f90c 	bl	800ab62 <HAL_I2C_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003950:	f000 f9ec 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}
 8003958:	200002bc 	.word	0x200002bc
 800395c:	40005400 	.word	0x40005400
 8003960:	000186a0 	.word	0x000186a0

08003964 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003968:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <MX_SPI2_Init+0x64>)
 800396a:	4a18      	ldr	r2, [pc, #96]	; (80039cc <MX_SPI2_Init+0x68>)
 800396c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <MX_SPI2_Init+0x64>)
 8003970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003974:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <MX_SPI2_Init+0x64>)
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <MX_SPI2_Init+0x64>)
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003982:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <MX_SPI2_Init+0x64>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <MX_SPI2_Init+0x64>)
 800398a:	2200      	movs	r2, #0
 800398c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <MX_SPI2_Init+0x64>)
 8003990:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003994:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <MX_SPI2_Init+0x64>)
 8003998:	2238      	movs	r2, #56	; 0x38
 800399a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <MX_SPI2_Init+0x64>)
 800399e:	2200      	movs	r2, #0
 80039a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <MX_SPI2_Init+0x64>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <MX_SPI2_Init+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <MX_SPI2_Init+0x64>)
 80039b0:	220a      	movs	r2, #10
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039b4:	4804      	ldr	r0, [pc, #16]	; (80039c8 <MX_SPI2_Init+0x64>)
 80039b6:	f00e fd41 	bl	801243c <HAL_SPI_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80039c0:	f000 f9b4 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000310 	.word	0x20000310
 80039cc:	40003800 	.word	0x40003800

080039d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80039d4:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <MX_SPI3_Init+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <MX_SPI3_Init+0x64>)
 80039fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <MX_SPI3_Init+0x64>)
 8003a04:	2238      	movs	r2, #56	; 0x38
 8003a06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <MX_SPI3_Init+0x64>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <MX_SPI3_Init+0x64>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a14:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <MX_SPI3_Init+0x64>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_SPI3_Init+0x64>)
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a20:	4804      	ldr	r0, [pc, #16]	; (8003a34 <MX_SPI3_Init+0x64>)
 8003a22:	f00e fd0b 	bl	801243c <HAL_SPI_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a2c:	f000 f97e 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000368 	.word	0x20000368
 8003a38:	40003c00 	.word	0x40003c00

08003a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <MX_USART1_UART_Init+0x50>)
 8003a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a62:	220c      	movs	r2, #12
 8003a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <MX_USART1_UART_Init+0x4c>)
 8003a74:	f011 fa48 	bl	8014f08 <HAL_UART_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a7e:	f000 f955 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200003c0 	.word	0x200003c0
 8003a8c:	40011000 	.word	0x40011000

08003a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <MX_DMA_Init+0x4c>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	; (8003adc <MX_DMA_Init+0x4c>)
 8003aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <MX_DMA_Init+0x4c>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	203a      	movs	r0, #58	; 0x3a
 8003ab8:	f002 feff 	bl	80068ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003abc:	203a      	movs	r0, #58	; 0x3a
 8003abe:	f002 ff18 	bl	80068f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2046      	movs	r0, #70	; 0x46
 8003ac8:	f002 fef7 	bl	80068ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003acc:	2046      	movs	r0, #70	; 0x46
 8003ace:	f002 ff10 	bl	80068f2 <HAL_NVIC_EnableIRQ>

}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800

08003ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	60da      	str	r2, [r3, #12]
 8003af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a56      	ldr	r2, [pc, #344]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a4f      	ldr	r2, [pc, #316]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a48      	ldr	r2, [pc, #288]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	4b42      	ldr	r3, [pc, #264]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a41      	ldr	r2, [pc, #260]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a33      	ldr	r2, [pc, #204]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b8c:	f043 0308 	orr.w	r3, r3, #8
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <MX_GPIO_Init+0x178>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2140      	movs	r1, #64	; 0x40
 8003ba2:	482e      	ldr	r0, [pc, #184]	; (8003c5c <MX_GPIO_Init+0x17c>)
 8003ba4:	f006 ff5e 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	482b      	ldr	r0, [pc, #172]	; (8003c5c <MX_GPIO_Init+0x17c>)
 8003bae:	f006 ff59 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003bb8:	4829      	ldr	r0, [pc, #164]	; (8003c60 <MX_GPIO_Init+0x180>)
 8003bba:	f006 ff53 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2104      	movs	r1, #4
 8003bc2:	4828      	ldr	r0, [pc, #160]	; (8003c64 <MX_GPIO_Init+0x184>)
 8003bc4:	f006 ff4e 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003bc8:	2318      	movs	r3, #24
 8003bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4823      	ldr	r0, [pc, #140]	; (8003c68 <MX_GPIO_Init+0x188>)
 8003bdc:	f006 fc92 	bl	800a504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003be0:	23c0      	movs	r3, #192	; 0xc0
 8003be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be4:	2301      	movs	r3, #1
 8003be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf0:	f107 031c 	add.w	r3, r7, #28
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4819      	ldr	r0, [pc, #100]	; (8003c5c <MX_GPIO_Init+0x17c>)
 8003bf8:	f006 fc84 	bl	800a504 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c04:	2301      	movs	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003c08:	f107 031c 	add.w	r3, r7, #28
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <MX_GPIO_Init+0x180>)
 8003c10:	f006 fc78 	bl	800a504 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003c14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c26:	f107 031c 	add.w	r3, r7, #28
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	480c      	ldr	r0, [pc, #48]	; (8003c60 <MX_GPIO_Init+0x180>)
 8003c2e:	f006 fc69 	bl	800a504 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8003c32:	2304      	movs	r3, #4
 8003c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c36:	2301      	movs	r3, #1
 8003c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003c42:	f107 031c 	add.w	r3, r7, #28
 8003c46:	4619      	mov	r1, r3
 8003c48:	4806      	ldr	r0, [pc, #24]	; (8003c64 <MX_GPIO_Init+0x184>)
 8003c4a:	f006 fc5b 	bl	800a504 <HAL_GPIO_Init>

}
 8003c4e:	bf00      	nop
 8003c50:	3730      	adds	r7, #48	; 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40020800 	.word	0x40020800
 8003c64:	40020c00 	.word	0x40020c00
 8003c68:	40021000 	.word	0x40021000

08003c6c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
 8003c80:	615a      	str	r2, [r3, #20]
 8003c82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003c86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003c8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003c8e:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <MX_FSMC_Init+0xbc>)
 8003c90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003cec:	230f      	movs	r3, #15
 8003cee:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8003cf0:	2305      	movs	r3, #5
 8003cf2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003cfc:	2311      	movs	r3, #17
 8003cfe:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	2200      	movs	r2, #0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4806      	ldr	r0, [pc, #24]	; (8003d24 <MX_FSMC_Init+0xb8>)
 8003d0c:	f010 fe52 	bl	80149b4 <HAL_SRAM_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003d16:	f000 f809 	bl	8003d2c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003d1a:	bf00      	nop
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200004c4 	.word	0x200004c4
 8003d28:	a0000104 	.word	0xa0000104

08003d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d30:	b672      	cpsid	i
}
 8003d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003d34:	e7fe      	b.n	8003d34 <Error_Handler+0x8>

08003d36 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	71fb      	strb	r3, [r7, #7]
 8003d40:	460b      	mov	r3, r1
 8003d42:	71bb      	strb	r3, [r7, #6]
 8003d44:	4613      	mov	r3, r2
 8003d46:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	041a      	lsls	r2, r3, #16
 8003d4c:	79bb      	ldrb	r3, [r7, #6]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	441a      	add	r2, r3
 8003d52:	797b      	ldrb	r3, [r7, #5]
 8003d54:	4413      	add	r3, r2
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <H24_RGB565+0x4a>
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	08db      	lsrs	r3, r3, #3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	02db      	lsls	r3, r3, #11
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	015b      	lsls	r3, r3, #5
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b21a      	sxth	r2, r3
 8003d9c:	7b7b      	ldrb	r3, [r7, #13]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	e012      	b.n	8003dd2 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8003dac:	7b7b      	ldrb	r3, [r7, #13]
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	02db      	lsls	r3, r3, #11
 8003db4:	b21a      	sxth	r2, r3
 8003db6:	7bbb      	ldrb	r3, [r7, #14]
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	015b      	lsls	r3, r3, #5
 8003dbe:	b21b      	sxth	r3, r3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b21a      	sxth	r2, r3
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	08db      	lsrs	r3, r3, #3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	b29b      	uxth	r3, r3
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8003de8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	8013      	strh	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	e005      	b.n	8003e18 <LCD_Send_Dat+0x1c>
	DAT = dat;
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <LCD_Send_Dat+0x30>)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	3301      	adds	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f6      	beq.n	8003e0c <LCD_Send_Dat+0x10>
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	60080000 	.word	0x60080000

08003e30 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	80fb      	strh	r3, [r7, #6]
 8003e42:	4603      	mov	r3, r0
 8003e44:	80bb      	strh	r3, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8003e4e:	202a      	movs	r0, #42	; 0x2a
 8003e50:	f7ff ffc5 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8003e54:	88bb      	ldrh	r3, [r7, #4]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ffce 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8003e60:	88bb      	ldrh	r3, [r7, #4]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ffc8 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8003e6c:	883b      	ldrh	r3, [r7, #0]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ffc2 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8003e78:	883b      	ldrh	r3, [r7, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ffbc 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8003e84:	202b      	movs	r0, #43	; 0x2b
 8003e86:	f7ff ffaa 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ffb3 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ffad 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ffa7 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffa1 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8003eba:	202c      	movs	r0, #44	; 0x2c
 8003ebc:	f7ff ff8f 	bl	8003dde <LCD_Send_Cmd>
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd90      	pop	{r4, r7, pc}

08003ec8 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	603a      	str	r2, [r7, #0]
 8003ed2:	80fb      	strh	r3, [r7, #6]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 8003ed8:	88bb      	ldrh	r3, [r7, #4]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	88b9      	ldrh	r1, [r7, #4]
 8003ede:	88f8      	ldrh	r0, [r7, #6]
 8003ee0:	f7ff ffa6 	bl	8003e30 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f7ff ff3b 	bl	8003d62 <H24_RGB565>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff84 	bl	8003dfc <LCD_Send_Dat>
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	80fb      	strh	r3, [r7, #6]
 8003f0e:	4603      	mov	r3, r0
 8003f10:	80bb      	strh	r3, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	807b      	strh	r3, [r7, #2]
 8003f16:	4613      	mov	r3, r2
 8003f18:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	883a      	ldrh	r2, [r7, #0]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8003f28:	88ba      	ldrh	r2, [r7, #4]
 8003f2a:	883b      	ldrh	r3, [r7, #0]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29c      	uxth	r4, r3
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	4413      	add	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	88f9      	ldrh	r1, [r7, #6]
 8003f42:	88b8      	ldrh	r0, [r7, #4]
 8003f44:	4622      	mov	r2, r4
 8003f46:	f7ff ff73 	bl	8003e30 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e00a      	b.n	8003f66 <LCD_Rect_Fill+0x6a>
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	2001      	movs	r0, #1
 8003f54:	f7ff ff05 	bl	8003d62 <H24_RGB565>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff4e 	bl	8003dfc <LCD_Send_Dat>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3f0      	bcc.n	8003f50 <LCD_Rect_Fill+0x54>
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd90      	pop	{r4, r7, pc}

08003f78 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b08b      	sub	sp, #44	; 0x2c
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4623      	mov	r3, r4
 8003f88:	80fb      	strh	r3, [r7, #6]
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80bb      	strh	r3, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	807b      	strh	r3, [r7, #2]
 8003f92:	4613      	mov	r3, r2
 8003f94:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bfb8      	it	lt
 8003fa0:	425b      	neglt	r3, r3
 8003fa2:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8003fa4:	883a      	ldrh	r2, [r7, #0]
 8003fa6:	88bb      	ldrh	r3, [r7, #4]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfb8      	it	lt
 8003fae:	425b      	neglt	r3, r3
 8003fb0:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d201      	bcs.n	8003fbe <LCD_Line+0x46>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e001      	b.n	8003fc2 <LCD_Line+0x4a>
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8003fc4:	88ba      	ldrh	r2, [r7, #4]
 8003fc6:	883b      	ldrh	r3, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d201      	bcs.n	8003fd0 <LCD_Line+0x58>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e001      	b.n	8003fd4 <LCD_Line+0x5c>
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8003fe2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fec:	b29c      	uxth	r4, r3
 8003fee:	88b9      	ldrh	r1, [r7, #4]
 8003ff0:	88f8      	ldrh	r0, [r7, #6]
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	f7ff ff80 	bl	8003efc <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	429a      	cmp	r2, r3
 8004002:	d103      	bne.n	800400c <LCD_Line+0x94>
 8004004:	88ba      	ldrh	r2, [r7, #4]
 8004006:	883b      	ldrh	r3, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d01e      	beq.n	800404a <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	425b      	negs	r3, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	dd08      	ble.n	800402e <LCD_Line+0xb6>
		{
			error -= deltaY;
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	b29a      	uxth	r2, r3
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	4413      	add	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	429a      	cmp	r2, r3
 8004034:	dad5      	bge.n	8003fe2 <LCD_Line+0x6a>
		{
			error += deltaX;
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	4413      	add	r3, r2
 800403c:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	b29a      	uxth	r2, r3
 8004042:	88bb      	ldrh	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004048:	e7cb      	b.n	8003fe2 <LCD_Line+0x6a>
		break;
 800404a:	bf00      	nop
		}
	}
}
 800404c:	bf00      	nop
 800404e:	3724      	adds	r7, #36	; 0x24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd90      	pop	{r4, r7, pc}

08004054 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b085      	sub	sp, #20
 8004058:	af02      	add	r7, sp, #8
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4623      	mov	r3, r4
 8004064:	80fb      	strh	r3, [r7, #6]
 8004066:	4603      	mov	r3, r0
 8004068:	80bb      	strh	r3, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	807b      	strh	r3, [r7, #2]
 800406e:	4613      	mov	r3, r2
 8004070:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 8004072:	883c      	ldrh	r4, [r7, #0]
 8004074:	887a      	ldrh	r2, [r7, #2]
 8004076:	88b9      	ldrh	r1, [r7, #4]
 8004078:	88f8      	ldrh	r0, [r7, #6]
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4623      	mov	r3, r4
 8004086:	f7ff ff77 	bl	8003f78 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 800408a:	8bbc      	ldrh	r4, [r7, #28]
 800408c:	8b3a      	ldrh	r2, [r7, #24]
 800408e:	8839      	ldrh	r1, [r7, #0]
 8004090:	8878      	ldrh	r0, [r7, #2]
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	4623      	mov	r3, r4
 800409e:	f7ff ff6b 	bl	8003f78 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 80040a2:	88bc      	ldrh	r4, [r7, #4]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	8bb9      	ldrh	r1, [r7, #28]
 80040a8:	8b38      	ldrh	r0, [r7, #24]
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4623      	mov	r3, r4
 80040b6:	f7ff ff5f 	bl	8003f78 <LCD_Line>
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}

080040c2 <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 80040c2:	b590      	push	{r4, r7, lr}
 80040c4:	b08d      	sub	sp, #52	; 0x34
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	4604      	mov	r4, r0
 80040ca:	4608      	mov	r0, r1
 80040cc:	4611      	mov	r1, r2
 80040ce:	461a      	mov	r2, r3
 80040d0:	4623      	mov	r3, r4
 80040d2:	80fb      	strh	r3, [r7, #6]
 80040d4:	4603      	mov	r3, r0
 80040d6:	80bb      	strh	r3, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80040e0:	2300      	movs	r3, #0
 80040e2:	823b      	strh	r3, [r7, #16]
 80040e4:	2300      	movs	r3, #0
 80040e6:	81fb      	strh	r3, [r7, #14]
 80040e8:	2300      	movs	r3, #0
 80040ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040ec:	2300      	movs	r3, #0
 80040ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80040f0:	2300      	movs	r3, #0
 80040f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80040f4:	2300      	movs	r3, #0
 80040f6:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80040f8:	2300      	movs	r3, #0
 80040fa:	83fb      	strh	r3, [r7, #30]
 80040fc:	2300      	movs	r3, #0
 80040fe:	83bb      	strh	r3, [r7, #28]
 8004100:	2300      	movs	r3, #0
 8004102:	837b      	strh	r3, [r7, #26]
 8004104:	2300      	movs	r3, #0
 8004106:	833b      	strh	r3, [r7, #24]
 8004108:	2300      	movs	r3, #0
 800410a:	82fb      	strh	r3, [r7, #22]
 800410c:	2300      	movs	r3, #0
 800410e:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfb8      	it	lt
 800411e:	425b      	neglt	r3, r3
 8004120:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8004122:	883a      	ldrh	r2, [r7, #0]
 8004124:	88bb      	ldrh	r3, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfb8      	it	lt
 800412c:	425b      	neglt	r3, r3
 800412e:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8004134:	88bb      	ldrh	r3, [r7, #4]
 8004136:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	429a      	cmp	r2, r3
 800413e:	d304      	bcc.n	800414a <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8004140:	2301      	movs	r3, #1
 8004142:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8004144:	2301      	movs	r3, #1
 8004146:	843b      	strh	r3, [r7, #32]
 8004148:	e005      	b.n	8004156 <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 800414a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800414e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8004150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004154:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 8004156:	883a      	ldrh	r2, [r7, #0]
 8004158:	88bb      	ldrh	r3, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d304      	bcc.n	8004168 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	83bb      	strh	r3, [r7, #28]
 8004166:	e005      	b.n	8004174 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8004168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800416c:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800416e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004172:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004174:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004178:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800417c:	429a      	cmp	r2, r3
 800417e:	db10      	blt.n	80041a2 <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8004188:	8a3b      	ldrh	r3, [r7, #16]
 800418a:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 800418c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004190:	0fda      	lsrs	r2, r3, #31
 8004192:	4413      	add	r3, r2
 8004194:	105b      	asrs	r3, r3, #1
 8004196:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 800419c:	8a3b      	ldrh	r3, [r7, #16]
 800419e:	82bb      	strh	r3, [r7, #20]
 80041a0:	e00f      	b.n	80041c2 <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80041aa:	89fb      	ldrh	r3, [r7, #14]
 80041ac:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80041ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041b2:	0fda      	lsrs	r2, r3, #31
 80041b4:	4413      	add	r3, r2
 80041b6:	105b      	asrs	r3, r3, #1
 80041b8:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80041ba:	8a3b      	ldrh	r3, [r7, #16]
 80041bc:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	827b      	strh	r3, [r7, #18]
 80041c6:	e034      	b.n	8004232 <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 80041c8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80041ca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80041cc:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80041ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	2301      	movs	r3, #1
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4623      	mov	r3, r4
 80041da:	f7ff fecd 	bl	8003f78 <LCD_Line>

		num += numadd;
 80041de:	8b3a      	ldrh	r2, [r7, #24]
 80041e0:	8afb      	ldrh	r3, [r7, #22]
 80041e2:	4413      	add	r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 80041e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80041ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	db0e      	blt.n	8004212 <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 80041f4:	8b3a      	ldrh	r2, [r7, #24]
 80041f6:	8b7b      	ldrh	r3, [r7, #26]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80041fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004202:	4413      	add	r3, r2
 8004204:	b29b      	uxth	r3, r3
 8004206:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8004208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800420a:	8bfb      	ldrh	r3, [r7, #30]
 800420c:	4413      	add	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8004212:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004214:	8c3b      	ldrh	r3, [r7, #32]
 8004216:	4413      	add	r3, r2
 8004218:	b29b      	uxth	r3, r3
 800421a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 800421c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800421e:	8bbb      	ldrh	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	b29b      	uxth	r3, r3
 8004224:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800422a:	b29b      	uxth	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	b29b      	uxth	r3, r3
 8004230:	827b      	strh	r3, [r7, #18]
 8004232:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004236:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800423a:	429a      	cmp	r2, r3
 800423c:	ddc4      	ble.n	80041c8 <LCD_Triangle_Fill+0x106>
	}
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	372c      	adds	r7, #44	; 0x2c
 8004244:	46bd      	mov	sp, r7
 8004246:	bd90      	pop	{r4, r7, pc}

08004248 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b085      	sub	sp, #20
 800424c:	af02      	add	r7, sp, #8
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	80fb      	strh	r3, [r7, #6]
 800425a:	4603      	mov	r3, r0
 800425c:	80bb      	strh	r3, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	807b      	strh	r3, [r7, #2]
 8004262:	4613      	mov	r3, r2
 8004264:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	887b      	ldrh	r3, [r7, #2]
 800426a:	4413      	add	r3, r2
 800426c:	b29a      	uxth	r2, r3
 800426e:	88bc      	ldrh	r4, [r7, #4]
 8004270:	88b9      	ldrh	r1, [r7, #4]
 8004272:	88f8      	ldrh	r0, [r7, #6]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	7e3b      	ldrb	r3, [r7, #24]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4623      	mov	r3, r4
 800427e:	f7ff fe7b 	bl	8003f78 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8004282:	88ba      	ldrh	r2, [r7, #4]
 8004284:	883b      	ldrh	r3, [r7, #0]
 8004286:	4413      	add	r3, r2
 8004288:	b299      	uxth	r1, r3
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	4413      	add	r3, r2
 8004290:	b29c      	uxth	r4, r3
 8004292:	88ba      	ldrh	r2, [r7, #4]
 8004294:	883b      	ldrh	r3, [r7, #0]
 8004296:	4413      	add	r3, r2
 8004298:	b29a      	uxth	r2, r3
 800429a:	88f8      	ldrh	r0, [r7, #6]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	7e3b      	ldrb	r3, [r7, #24]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	4622      	mov	r2, r4
 80042a8:	f7ff fe66 	bl	8003f78 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 80042ac:	88ba      	ldrh	r2, [r7, #4]
 80042ae:	883b      	ldrh	r3, [r7, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	b29c      	uxth	r4, r3
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	88b9      	ldrh	r1, [r7, #4]
 80042b8:	88f8      	ldrh	r0, [r7, #6]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	7e3b      	ldrb	r3, [r7, #24]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4623      	mov	r3, r4
 80042c4:	f7ff fe58 	bl	8003f78 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	4413      	add	r3, r2
 80042ce:	b298      	uxth	r0, r3
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	4413      	add	r3, r2
 80042d6:	b29c      	uxth	r4, r3
 80042d8:	88ba      	ldrh	r2, [r7, #4]
 80042da:	883b      	ldrh	r3, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	b29a      	uxth	r2, r3
 80042e0:	88b9      	ldrh	r1, [r7, #4]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	7e3b      	ldrb	r3, [r7, #24]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	4622      	mov	r2, r4
 80042ee:	f7ff fe43 	bl	8003f78 <LCD_Line>
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd90      	pop	{r4, r7, pc}

080042fa <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 80042fa:	b590      	push	{r4, r7, lr}
 80042fc:	b08b      	sub	sp, #44	; 0x2c
 80042fe:	af02      	add	r7, sp, #8
 8004300:	4604      	mov	r4, r0
 8004302:	4608      	mov	r0, r1
 8004304:	4611      	mov	r1, r2
 8004306:	461a      	mov	r2, r3
 8004308:	4623      	mov	r3, r4
 800430a:	80fb      	strh	r3, [r7, #6]
 800430c:	4603      	mov	r3, r0
 800430e:	80bb      	strh	r3, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	807b      	strh	r3, [r7, #2]
 8004314:	4613      	mov	r3, r2
 8004316:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 8004318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800431c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 8004326:	f9b7 3000 	ldrsh.w	r3, [r7]
 800432a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8004340:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8101 	beq.w	800454c <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800434a:	2300      	movs	r3, #0
 800434c:	83fb      	strh	r3, [r7, #30]
 800434e:	883b      	ldrh	r3, [r7, #0]
 8004350:	83bb      	strh	r3, [r7, #28]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	005a      	lsls	r2, r3, #1
 8004356:	f9b7 3000 	ldrsh.w	r3, [r7]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	f1c3 0301 	rsb	r3, r3, #1
 8004360:	6979      	ldr	r1, [r7, #20]
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e062      	b.n	8004432 <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	8bfb      	ldrh	r3, [r7, #30]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	b298      	uxth	r0, r3
 8004374:	88ba      	ldrh	r2, [r7, #4]
 8004376:	8bbb      	ldrh	r3, [r7, #28]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	b299      	uxth	r1, r3
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	8bfb      	ldrh	r3, [r7, #30]
 8004380:	4413      	add	r3, r2
 8004382:	b29a      	uxth	r2, r3
 8004384:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004388:	b29b      	uxth	r3, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	b29b      	uxth	r3, r3
 800438e:	3301      	adds	r3, #1
 8004390:	b29c      	uxth	r4, r3
 8004392:	88ba      	ldrh	r2, [r7, #4]
 8004394:	8bbb      	ldrh	r3, [r7, #28]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	b29a      	uxth	r2, r3
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	4622      	mov	r2, r4
 80043a8:	f7ff fde6 	bl	8003f78 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	8bfb      	ldrh	r3, [r7, #30]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	b298      	uxth	r0, r3
 80043b4:	88ba      	ldrh	r2, [r7, #4]
 80043b6:	8bbb      	ldrh	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	b299      	uxth	r1, r3
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	8bfb      	ldrh	r3, [r7, #30]
 80043c0:	4413      	add	r3, r2
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	b29c      	uxth	r4, r3
 80043d2:	88ba      	ldrh	r2, [r7, #4]
 80043d4:	8bbb      	ldrh	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	4622      	mov	r2, r4
 80043e8:	f7ff fdc6 	bl	8003f78 <LCD_Line>
			if (s >= 0)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	db0f      	blt.n	8004412 <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 80043f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80043f6:	f1c3 0301 	rsb	r3, r3, #1
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	fb02 f303 	mul.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4413      	add	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
				y--;
 8004406:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29b      	uxth	r3, r3
 8004410:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8004412:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	3306      	adds	r3, #6
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4413      	add	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004426:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800442a:	b29b      	uxth	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	b29b      	uxth	r3, r3
 8004430:	83fb      	strh	r3, [r7, #30]
 8004432:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	fb03 f202 	mul.w	r2, r3, r2
 800443c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	429a      	cmp	r2, r3
 8004448:	dd90      	ble.n	800436c <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	83fb      	strh	r3, [r7, #30]
 800444e:	2300      	movs	r3, #0
 8004450:	83bb      	strh	r3, [r7, #28]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	005a      	lsls	r2, r3, #1
 8004456:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	f1c3 0301 	rsb	r3, r3, #1
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e062      	b.n	8004532 <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	8bfb      	ldrh	r3, [r7, #30]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	b298      	uxth	r0, r3
 8004474:	88ba      	ldrh	r2, [r7, #4]
 8004476:	8bbb      	ldrh	r3, [r7, #28]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	b299      	uxth	r1, r3
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	8bfb      	ldrh	r3, [r7, #30]
 8004480:	4413      	add	r3, r2
 8004482:	b29a      	uxth	r2, r3
 8004484:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004488:	b29b      	uxth	r3, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	b29b      	uxth	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	b29c      	uxth	r4, r3
 8004492:	88ba      	ldrh	r2, [r7, #4]
 8004494:	8bbb      	ldrh	r3, [r7, #28]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29a      	uxth	r2, r3
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	4622      	mov	r2, r4
 80044a8:	f7ff fd66 	bl	8003f78 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	8bfb      	ldrh	r3, [r7, #30]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	b298      	uxth	r0, r3
 80044b4:	88ba      	ldrh	r2, [r7, #4]
 80044b6:	8bbb      	ldrh	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	b299      	uxth	r1, r3
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	8bfb      	ldrh	r3, [r7, #30]
 80044c0:	4413      	add	r3, r2
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	b29c      	uxth	r4, r3
 80044d2:	88ba      	ldrh	r2, [r7, #4]
 80044d4:	8bbb      	ldrh	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	b29a      	uxth	r2, r3
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	4622      	mov	r2, r4
 80044e8:	f7ff fd46 	bl	8003f78 <LCD_Line>
			if (s >= 0)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	db0f      	blt.n	8004512 <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 80044f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044f6:	f1c3 0301 	rsb	r3, r3, #1
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
				x--;
 8004506:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8004512:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	3306      	adds	r3, #6
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4413      	add	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8004526:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800452a:	b29b      	uxth	r3, r3
 800452c:	3301      	adds	r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	83bb      	strh	r3, [r7, #28]
 8004532:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	fb03 f202 	mul.w	r2, r3, r2
 800453c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	429a      	cmp	r2, r3
 8004548:	dd90      	ble.n	800446c <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 800454a:	e117      	b.n	800477c <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800454c:	2300      	movs	r3, #0
 800454e:	83fb      	strh	r3, [r7, #30]
 8004550:	883b      	ldrh	r3, [r7, #0]
 8004552:	83bb      	strh	r3, [r7, #28]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	005a      	lsls	r2, r3, #1
 8004558:	f9b7 3000 	ldrsh.w	r3, [r7]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	f1c3 0301 	rsb	r3, r3, #1
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e06e      	b.n	800464c <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	8bfb      	ldrh	r3, [r7, #30]
 8004572:	4413      	add	r3, r2
 8004574:	b298      	uxth	r0, r3
 8004576:	88ba      	ldrh	r2, [r7, #4]
 8004578:	8bbb      	ldrh	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	b299      	uxth	r1, r3
 800457e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004582:	b29a      	uxth	r2, r3
 8004584:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004588:	b29c      	uxth	r4, r3
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	4623      	mov	r3, r4
 8004590:	f7ff fcb4 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004594:	88fa      	ldrh	r2, [r7, #6]
 8004596:	8bfb      	ldrh	r3, [r7, #30]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	b298      	uxth	r0, r3
 800459c:	88ba      	ldrh	r2, [r7, #4]
 800459e:	8bbb      	ldrh	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	b299      	uxth	r1, r3
 80045a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045ae:	b29c      	uxth	r4, r3
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4623      	mov	r3, r4
 80045b6:	f7ff fca1 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	4413      	add	r3, r2
 80045c0:	b298      	uxth	r0, r3
 80045c2:	88ba      	ldrh	r2, [r7, #4]
 80045c4:	8bbb      	ldrh	r3, [r7, #28]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	b299      	uxth	r1, r3
 80045ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045d4:	b29c      	uxth	r4, r3
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4623      	mov	r3, r4
 80045dc:	f7ff fc8e 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	8bfb      	ldrh	r3, [r7, #30]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	b298      	uxth	r0, r3
 80045e8:	88ba      	ldrh	r2, [r7, #4]
 80045ea:	8bbb      	ldrh	r3, [r7, #28]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	b299      	uxth	r1, r3
 80045f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045fa:	b29c      	uxth	r4, r3
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	4623      	mov	r3, r4
 8004602:	f7ff fc7b 	bl	8003efc <LCD_Rect_Fill>
			if (s >= 0)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	db0f      	blt.n	800462c <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 800460c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004610:	f1c3 0301 	rsb	r3, r3, #1
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	fb02 f303 	mul.w	r3, r2, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4413      	add	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
				y--;
 8004620:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 800462c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	3306      	adds	r3, #6
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4413      	add	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004640:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004644:	b29b      	uxth	r3, r3
 8004646:	3301      	adds	r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	83fb      	strh	r3, [r7, #30]
 800464c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	fb03 f202 	mul.w	r2, r3, r2
 8004656:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800465a:	6979      	ldr	r1, [r7, #20]
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	429a      	cmp	r2, r3
 8004662:	dd84      	ble.n	800456e <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	83fb      	strh	r3, [r7, #30]
 8004668:	2300      	movs	r3, #0
 800466a:	83bb      	strh	r3, [r7, #28]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005a      	lsls	r2, r3, #1
 8004670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	f1c3 0301 	rsb	r3, r3, #1
 800467a:	6939      	ldr	r1, [r7, #16]
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e06e      	b.n	8004764 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	8bfb      	ldrh	r3, [r7, #30]
 800468a:	4413      	add	r3, r2
 800468c:	b298      	uxth	r0, r3
 800468e:	88ba      	ldrh	r2, [r7, #4]
 8004690:	8bbb      	ldrh	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	b299      	uxth	r1, r3
 8004696:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800469a:	b29a      	uxth	r2, r3
 800469c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046a0:	b29c      	uxth	r4, r3
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4623      	mov	r3, r4
 80046a8:	f7ff fc28 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	8bfb      	ldrh	r3, [r7, #30]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	b298      	uxth	r0, r3
 80046b4:	88ba      	ldrh	r2, [r7, #4]
 80046b6:	8bbb      	ldrh	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	b299      	uxth	r1, r3
 80046bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046c6:	b29c      	uxth	r4, r3
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4623      	mov	r3, r4
 80046ce:	f7ff fc15 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	8bfb      	ldrh	r3, [r7, #30]
 80046d6:	4413      	add	r3, r2
 80046d8:	b298      	uxth	r0, r3
 80046da:	88ba      	ldrh	r2, [r7, #4]
 80046dc:	8bbb      	ldrh	r3, [r7, #28]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	b299      	uxth	r1, r3
 80046e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046ec:	b29c      	uxth	r4, r3
 80046ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4623      	mov	r3, r4
 80046f4:	f7ff fc02 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	8bfb      	ldrh	r3, [r7, #30]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	b298      	uxth	r0, r3
 8004700:	88ba      	ldrh	r2, [r7, #4]
 8004702:	8bbb      	ldrh	r3, [r7, #28]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	b299      	uxth	r1, r3
 8004708:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800470c:	b29a      	uxth	r2, r3
 800470e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004712:	b29c      	uxth	r4, r3
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4623      	mov	r3, r4
 800471a:	f7ff fbef 	bl	8003efc <LCD_Rect_Fill>
			if (s >= 0)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	db0f      	blt.n	8004744 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8004724:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004728:	f1c3 0301 	rsb	r3, r3, #1
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4413      	add	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
				x--;
 8004738:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004744:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	3306      	adds	r3, #6
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4413      	add	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004758:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800475c:	b29b      	uxth	r3, r3
 800475e:	3301      	adds	r3, #1
 8004760:	b29b      	uxth	r3, r3
 8004762:	83bb      	strh	r3, [r7, #28]
 8004764:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	fb03 f202 	mul.w	r2, r3, r2
 800476e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004772:	6939      	ldr	r1, [r7, #16]
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	429a      	cmp	r2, r3
 800477a:	dd84      	ble.n	8004686 <LCD_Ellipse+0x38c>
}
 800477c:	bf00      	nop
 800477e:	3724      	adds	r7, #36	; 0x24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af02      	add	r7, sp, #8
 800478a:	4604      	mov	r4, r0
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4623      	mov	r3, r4
 8004794:	80fb      	strh	r3, [r7, #6]
 8004796:	4603      	mov	r3, r0
 8004798:	80bb      	strh	r3, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
 800479e:	4613      	mov	r3, r2
 80047a0:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
	b_ = radius;
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	f1c3 0301 	rsb	r3, r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 80047b2:	e0fc      	b.n	80049ae <LCD_Circle+0x22a>
	{
		if (fill == 1)
 80047b4:	78bb      	ldrb	r3, [r7, #2]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d136      	bne.n	8004828 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b298      	uxth	r0, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	88ba      	ldrh	r2, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b299      	uxth	r1, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3301      	adds	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	b29c      	uxth	r4, r3
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4623      	mov	r3, r4
 80047ec:	f7ff fb86 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b298      	uxth	r0, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	88ba      	ldrh	r2, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	b299      	uxth	r1, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b29b      	uxth	r3, r3
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	3301      	adds	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	b29b      	uxth	r3, r3
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	b29c      	uxth	r4, r3
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4623      	mov	r3, r4
 8004822:	f7ff fb6b 	bl	8003efc <LCD_Rect_Fill>
 8004826:	e0a7      	b.n	8004978 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	b29a      	uxth	r2, r3
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	4413      	add	r3, r2
 8004830:	b298      	uxth	r0, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	b29a      	uxth	r2, r3
 8004836:	88bb      	ldrh	r3, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	b299      	uxth	r1, r3
 800483c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004840:	b29a      	uxth	r2, r3
 8004842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004846:	b29c      	uxth	r4, r3
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4623      	mov	r3, r4
 800484e:	f7ff fb55 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	b29a      	uxth	r2, r3
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	4413      	add	r3, r2
 800485a:	b298      	uxth	r0, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	b29a      	uxth	r2, r3
 8004860:	88bb      	ldrh	r3, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	b299      	uxth	r1, r3
 8004866:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800486a:	b29a      	uxth	r2, r3
 800486c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004870:	b29c      	uxth	r4, r3
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	4623      	mov	r3, r4
 8004878:	f7ff fb40 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	b29b      	uxth	r3, r3
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	b298      	uxth	r0, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	b29a      	uxth	r2, r3
 800488a:	88bb      	ldrh	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	b299      	uxth	r1, r3
 8004890:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004894:	b29a      	uxth	r2, r3
 8004896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800489a:	b29c      	uxth	r4, r3
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	4623      	mov	r3, r4
 80048a2:	f7ff fb2b 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	b298      	uxth	r0, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	88bb      	ldrh	r3, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	b299      	uxth	r1, r3
 80048ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048be:	b29a      	uxth	r2, r3
 80048c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048c4:	b29c      	uxth	r4, r3
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4623      	mov	r3, r4
 80048cc:	f7ff fb16 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	4413      	add	r3, r2
 80048d8:	b298      	uxth	r0, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	88ba      	ldrh	r2, [r7, #4]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	b299      	uxth	r1, r3
 80048e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ee:	b29c      	uxth	r4, r3
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4623      	mov	r3, r4
 80048f6:	f7ff fb01 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	4413      	add	r3, r2
 8004902:	b298      	uxth	r0, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	b29b      	uxth	r3, r3
 8004908:	88ba      	ldrh	r2, [r7, #4]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	b299      	uxth	r1, r3
 800490e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004912:	b29a      	uxth	r2, r3
 8004914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004918:	b29c      	uxth	r4, r3
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	4623      	mov	r3, r4
 8004920:	f7ff faec 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	b29b      	uxth	r3, r3
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	b298      	uxth	r0, r3
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	b29b      	uxth	r3, r3
 8004932:	88ba      	ldrh	r2, [r7, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b299      	uxth	r1, r3
 8004938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800493c:	b29a      	uxth	r2, r3
 800493e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004942:	b29c      	uxth	r4, r3
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4623      	mov	r3, r4
 800494a:	f7ff fad7 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	b29b      	uxth	r3, r3
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b298      	uxth	r0, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	b29b      	uxth	r3, r3
 800495c:	88ba      	ldrh	r2, [r7, #4]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b299      	uxth	r1, r3
 8004962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004966:	b29a      	uxth	r2, r3
 8004968:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800496c:	b29c      	uxth	r4, r3
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4623      	mov	r3, r4
 8004974:	f7ff fac2 	bl	8003efc <LCD_Rect_Fill>
		}
		if (P < 0)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	da09      	bge.n	8004992 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1cda      	adds	r2, r3, #3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
			a_++;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	3301      	adds	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e00d      	b.n	80049ae <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1d5a      	adds	r2, r3, #5
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1acb      	subs	r3, r1, r3
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
			a_++;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	3301      	adds	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
			b_--;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	f77f aefe 	ble.w	80047b4 <LCD_Circle+0x30>
		}
	}
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}

080049c2 <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 80049c2:	b590      	push	{r4, r7, lr}
 80049c4:	b089      	sub	sp, #36	; 0x24
 80049c6:	af02      	add	r7, sp, #8
 80049c8:	4604      	mov	r4, r0
 80049ca:	4608      	mov	r0, r1
 80049cc:	4611      	mov	r1, r2
 80049ce:	461a      	mov	r2, r3
 80049d0:	4623      	mov	r3, r4
 80049d2:	80fb      	strh	r3, [r7, #6]
 80049d4:	4603      	mov	r3, r0
 80049d6:	80bb      	strh	r3, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
 80049dc:	4613      	mov	r3, r2
 80049de:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	f1c3 0301 	rsb	r3, r3, #1
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	461a      	mov	r2, r3
 80049f2:	03d2      	lsls	r2, r2, #15
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004a04:	e0cd      	b.n	8004ba2 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004a06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db0e      	blt.n	8004a2c <LCD_Circle_Helper+0x6a>
			y--;
 8004a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004a1a:	8a7b      	ldrh	r3, [r7, #18]
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004a22:	8afa      	ldrh	r2, [r7, #22]
 8004a24:	8a7b      	ldrh	r3, [r7, #18]
 8004a26:	4413      	add	r3, r2
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004a2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004a38:	8abb      	ldrh	r3, [r7, #20]
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004a40:	8afa      	ldrh	r2, [r7, #22]
 8004a42:	8abb      	ldrh	r3, [r7, #20]
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004a4a:	787b      	ldrb	r3, [r7, #1]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d025      	beq.n	8004aa0 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004a54:	88fa      	ldrh	r2, [r7, #6]
 8004a56:	8a3b      	ldrh	r3, [r7, #16]
 8004a58:	4413      	add	r3, r2
 8004a5a:	b298      	uxth	r0, r3
 8004a5c:	88ba      	ldrh	r2, [r7, #4]
 8004a5e:	89fb      	ldrh	r3, [r7, #14]
 8004a60:	4413      	add	r3, r2
 8004a62:	b299      	uxth	r1, r3
 8004a64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a6e:	b29c      	uxth	r4, r3
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4623      	mov	r3, r4
 8004a76:	f7ff fa41 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	89fb      	ldrh	r3, [r7, #14]
 8004a7e:	4413      	add	r3, r2
 8004a80:	b298      	uxth	r0, r3
 8004a82:	88ba      	ldrh	r2, [r7, #4]
 8004a84:	8a3b      	ldrh	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	b299      	uxth	r1, r3
 8004a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a94:	b29c      	uxth	r4, r3
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	f7ff fa2e 	bl	8003efc <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d025      	beq.n	8004af6 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	8a3b      	ldrh	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	b298      	uxth	r0, r3
 8004ab2:	88ba      	ldrh	r2, [r7, #4]
 8004ab4:	89fb      	ldrh	r3, [r7, #14]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	b299      	uxth	r1, r3
 8004aba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ac4:	b29c      	uxth	r4, r3
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4623      	mov	r3, r4
 8004acc:	f7ff fa16 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	89fb      	ldrh	r3, [r7, #14]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	b298      	uxth	r0, r3
 8004ad8:	88ba      	ldrh	r2, [r7, #4]
 8004ada:	8a3b      	ldrh	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	b299      	uxth	r1, r3
 8004ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aea:	b29c      	uxth	r4, r3
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4623      	mov	r3, r4
 8004af2:	f7ff fa03 	bl	8003efc <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004af6:	787b      	ldrb	r3, [r7, #1]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d025      	beq.n	8004b4c <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	89fb      	ldrh	r3, [r7, #14]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	b298      	uxth	r0, r3
 8004b08:	88ba      	ldrh	r2, [r7, #4]
 8004b0a:	8a3b      	ldrh	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b299      	uxth	r1, r3
 8004b10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b1a:	b29c      	uxth	r4, r3
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4623      	mov	r3, r4
 8004b22:	f7ff f9eb 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	8a3b      	ldrh	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	b298      	uxth	r0, r3
 8004b2e:	88ba      	ldrh	r2, [r7, #4]
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	4413      	add	r3, r2
 8004b34:	b299      	uxth	r1, r3
 8004b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b40:	b29c      	uxth	r4, r3
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4623      	mov	r3, r4
 8004b48:	f7ff f9d8 	bl	8003efc <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004b4c:	787b      	ldrb	r3, [r7, #1]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	89fb      	ldrh	r3, [r7, #14]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	b298      	uxth	r0, r3
 8004b5e:	88ba      	ldrh	r2, [r7, #4]
 8004b60:	8a3b      	ldrh	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	b299      	uxth	r1, r3
 8004b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b70:	b29c      	uxth	r4, r3
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4623      	mov	r3, r4
 8004b78:	f7ff f9c0 	bl	8003efc <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	8a3b      	ldrh	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	b298      	uxth	r0, r3
 8004b84:	88ba      	ldrh	r2, [r7, #4]
 8004b86:	89fb      	ldrh	r3, [r7, #14]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b299      	uxth	r1, r3
 8004b8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b96:	b29c      	uxth	r4, r3
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	f7ff f9ad 	bl	8003efc <LCD_Rect_Fill>
	while (x < y) {
 8004ba2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f6ff af2b 	blt.w	8004a06 <LCD_Circle_Helper+0x44>
		}
	}
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd90      	pop	{r4, r7, pc}

08004bba <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004bba:	b590      	push	{r4, r7, lr}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4623      	mov	r3, r4
 8004bca:	80fb      	strh	r3, [r7, #6]
 8004bcc:	4603      	mov	r3, r0
 8004bce:	80bb      	strh	r3, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004bd8:	8b3a      	ldrh	r2, [r7, #24]
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	4413      	add	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3302      	adds	r3, #2
 8004be2:	b298      	uxth	r0, r3
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	887b      	ldrh	r3, [r7, #2]
 8004be8:	4413      	add	r3, r2
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	7f3b      	ldrb	r3, [r7, #28]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	8b3b      	ldrh	r3, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b02      	subs	r3, #2
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	88bc      	ldrh	r4, [r7, #4]
 8004c00:	88b9      	ldrh	r1, [r7, #4]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	7f3b      	ldrb	r3, [r7, #28]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	f7ff f9b4 	bl	8003f78 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004c10:	8b3a      	ldrh	r2, [r7, #24]
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	4413      	add	r3, r2
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3302      	adds	r3, #2
 8004c1a:	b298      	uxth	r0, r3
 8004c1c:	88ba      	ldrh	r2, [r7, #4]
 8004c1e:	883b      	ldrh	r3, [r7, #0]
 8004c20:	4413      	add	r3, r2
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b299      	uxth	r1, r3
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	7f3b      	ldrb	r3, [r7, #28]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	8b3b      	ldrh	r3, [r7, #24]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b02      	subs	r3, #2
 8004c40:	b29c      	uxth	r4, r3
 8004c42:	88ba      	ldrh	r2, [r7, #4]
 8004c44:	883b      	ldrh	r3, [r7, #0]
 8004c46:	4413      	add	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	7f3b      	ldrb	r3, [r7, #28]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	4622      	mov	r2, r4
 8004c5a:	f7ff f98d 	bl	8003f78 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8004c5e:	8b3a      	ldrh	r2, [r7, #24]
 8004c60:	88bb      	ldrh	r3, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3302      	adds	r3, #2
 8004c68:	b299      	uxth	r1, r3
 8004c6a:	88ba      	ldrh	r2, [r7, #4]
 8004c6c:	883b      	ldrh	r3, [r7, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	7f3b      	ldrb	r3, [r7, #28]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	8b3b      	ldrh	r3, [r7, #24]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b02      	subs	r3, #2
 8004c82:	b29c      	uxth	r4, r3
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	88f8      	ldrh	r0, [r7, #6]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	7f3b      	ldrb	r3, [r7, #28]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4623      	mov	r3, r4
 8004c92:	f7ff f971 	bl	8003f78 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b298      	uxth	r0, r3
 8004ca2:	8b3a      	ldrh	r2, [r7, #24]
 8004ca4:	88bb      	ldrh	r3, [r7, #4]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3302      	adds	r3, #2
 8004cac:	b299      	uxth	r1, r3
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	887b      	ldrh	r3, [r7, #2]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29c      	uxth	r4, r3
 8004cba:	88ba      	ldrh	r2, [r7, #4]
 8004cbc:	883b      	ldrh	r3, [r7, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	7f3b      	ldrb	r3, [r7, #28]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	8b3b      	ldrh	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b02      	subs	r3, #2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	7f3b      	ldrb	r3, [r7, #28]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	4622      	mov	r2, r4
 8004ce0:	f7ff f94a 	bl	8003f78 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8004ce4:	8b3a      	ldrh	r2, [r7, #24]
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	4413      	add	r3, r2
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3302      	adds	r3, #2
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	b218      	sxth	r0, r3
 8004cf2:	8b3a      	ldrh	r2, [r7, #24]
 8004cf4:	88bb      	ldrh	r3, [r7, #4]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b219      	sxth	r1, r3
 8004d00:	8b3b      	ldrh	r3, [r7, #24]
 8004d02:	3302      	adds	r3, #2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	b21a      	sxth	r2, r3
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	7f3b      	ldrb	r3, [r7, #28]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2301      	movs	r3, #1
 8004d12:	f7ff fe56 	bl	80049c2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	8b3b      	ldrh	r3, [r7, #24]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b03      	subs	r3, #3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	b218      	sxth	r0, r3
 8004d2a:	8b3a      	ldrh	r2, [r7, #24]
 8004d2c:	88bb      	ldrh	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3302      	adds	r3, #2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	b219      	sxth	r1, r3
 8004d38:	8b3b      	ldrh	r3, [r7, #24]
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	b21a      	sxth	r2, r3
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	7f3b      	ldrb	r3, [r7, #28]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f7ff fe3a 	bl	80049c2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	4413      	add	r3, r2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	8b3b      	ldrh	r3, [r7, #24]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b03      	subs	r3, #3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	b218      	sxth	r0, r3
 8004d62:	88ba      	ldrh	r2, [r7, #4]
 8004d64:	883b      	ldrh	r3, [r7, #0]
 8004d66:	4413      	add	r3, r2
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	8b3b      	ldrh	r3, [r7, #24]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b03      	subs	r3, #3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	b219      	sxth	r1, r3
 8004d76:	8b3b      	ldrh	r3, [r7, #24]
 8004d78:	3302      	adds	r3, #2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	7f3b      	ldrb	r3, [r7, #28]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	2304      	movs	r3, #4
 8004d88:	f7ff fe1b 	bl	80049c2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8004d8c:	8b3a      	ldrh	r2, [r7, #24]
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	4413      	add	r3, r2
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3302      	adds	r3, #2
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	b218      	sxth	r0, r3
 8004d9a:	88ba      	ldrh	r2, [r7, #4]
 8004d9c:	883b      	ldrh	r3, [r7, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	8b3b      	ldrh	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b03      	subs	r3, #3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b219      	sxth	r1, r3
 8004dae:	8b3b      	ldrh	r3, [r7, #24]
 8004db0:	3302      	adds	r3, #2
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	b21a      	sxth	r2, r3
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	7f3b      	ldrb	r3, [r7, #28]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	f7ff fdff 	bl	80049c2 <LCD_Circle_Helper>
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd90      	pop	{r4, r7, pc}

08004dcc <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	80fb      	strh	r3, [r7, #6]
 8004dde:	4603      	mov	r3, r0
 8004de0:	80bb      	strh	r3, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	807b      	strh	r3, [r7, #2]
 8004de6:	4613      	mov	r3, r2
 8004de8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	f1c3 0301 	rsb	r3, r3, #1
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004df4:	2301      	movs	r3, #1
 8004df6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	03d2      	lsls	r2, r2, #15
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004e0a:	887b      	ldrh	r3, [r7, #2]
 8004e0c:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004e0e:	e0ab      	b.n	8004f68 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8004e10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	db0e      	blt.n	8004e36 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8004e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004e24:	8a7b      	ldrh	r3, [r7, #18]
 8004e26:	3302      	adds	r3, #2
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004e2c:	8afa      	ldrh	r2, [r7, #22]
 8004e2e:	8a7b      	ldrh	r3, [r7, #18]
 8004e30:	4413      	add	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004e36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004e42:	8abb      	ldrh	r3, [r7, #20]
 8004e44:	3302      	adds	r3, #2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004e4a:	8afa      	ldrh	r2, [r7, #22]
 8004e4c:	8abb      	ldrh	r3, [r7, #20]
 8004e4e:	4413      	add	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8004e54:	787b      	ldrb	r3, [r7, #1]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d03f      	beq.n	8004ede <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	8a3b      	ldrh	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	b298      	uxth	r0, r3
 8004e66:	88ba      	ldrh	r2, [r7, #4]
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	8a3b      	ldrh	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	b29c      	uxth	r4, r3
 8004e76:	88ba      	ldrh	r2, [r7, #4]
 8004e78:	89fb      	ldrh	r3, [r7, #14]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	89fb      	ldrh	r3, [r7, #14]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4413      	add	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e8a:	4413      	add	r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	2301      	movs	r3, #1
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	4622      	mov	r2, r4
 8004e9a:	f7ff f86d 	bl	8003f78 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	b298      	uxth	r0, r3
 8004ea6:	88ba      	ldrh	r2, [r7, #4]
 8004ea8:	8a3b      	ldrh	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	b299      	uxth	r1, r3
 8004eae:	88fa      	ldrh	r2, [r7, #6]
 8004eb0:	89fb      	ldrh	r3, [r7, #14]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	b29c      	uxth	r4, r3
 8004eb6:	88ba      	ldrh	r2, [r7, #4]
 8004eb8:	8a3b      	ldrh	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	8a3b      	ldrh	r3, [r7, #16]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	4622      	mov	r2, r4
 8004eda:	f7ff f84d 	bl	8003f78 <LCD_Line>
		}
		if (cornername & 0x2) {
 8004ede:	787b      	ldrb	r3, [r7, #1]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03f      	beq.n	8004f68 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	8a3b      	ldrh	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	b298      	uxth	r0, r3
 8004ef0:	88ba      	ldrh	r2, [r7, #4]
 8004ef2:	89fb      	ldrh	r3, [r7, #14]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	8a3b      	ldrh	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	b29c      	uxth	r4, r3
 8004f00:	88ba      	ldrh	r2, [r7, #4]
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f14:	4413      	add	r3, r2
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	4622      	mov	r2, r4
 8004f24:	f7ff f828 	bl	8003f78 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	b298      	uxth	r0, r3
 8004f30:	88ba      	ldrh	r2, [r7, #4]
 8004f32:	8a3b      	ldrh	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	b299      	uxth	r1, r3
 8004f38:	88fa      	ldrh	r2, [r7, #6]
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	b29c      	uxth	r4, r3
 8004f40:	88ba      	ldrh	r2, [r7, #4]
 8004f42:	8a3b      	ldrh	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	8a3b      	ldrh	r3, [r7, #16]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f54:	4413      	add	r3, r2
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	4622      	mov	r2, r4
 8004f64:	f7ff f808 	bl	8003f78 <LCD_Line>
	while (x < y) {
 8004f68:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f6ff af4d 	blt.w	8004e10 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd90      	pop	{r4, r7, pc}

08004f80 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	80fb      	strh	r3, [r7, #6]
 8004f92:	4603      	mov	r3, r0
 8004f94:	80bb      	strh	r3, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	807b      	strh	r3, [r7, #2]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	8b3b      	ldrh	r3, [r7, #24]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	b298      	uxth	r0, r3
 8004fa6:	8b3b      	ldrh	r3, [r7, #24]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	887a      	ldrh	r2, [r7, #2]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	883c      	ldrh	r4, [r7, #0]
 8004fb4:	88b9      	ldrh	r1, [r7, #4]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4623      	mov	r3, r4
 8004fbc:	f7fe ff9e 	bl	8003efc <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	887b      	ldrh	r3, [r7, #2]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	8b3b      	ldrh	r3, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	b218      	sxth	r0, r3
 8004fd4:	88ba      	ldrh	r2, [r7, #4]
 8004fd6:	8b3b      	ldrh	r3, [r7, #24]
 8004fd8:	4413      	add	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	b219      	sxth	r1, r3
 8004fde:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004fe2:	8b3b      	ldrh	r3, [r7, #24]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	883a      	ldrh	r2, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	9201      	str	r2, [sp, #4]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	f7ff fee5 	bl	8004dcc <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	8b3b      	ldrh	r3, [r7, #24]
 8005006:	4413      	add	r3, r2
 8005008:	b29b      	uxth	r3, r3
 800500a:	b218      	sxth	r0, r3
 800500c:	88ba      	ldrh	r2, [r7, #4]
 800500e:	8b3b      	ldrh	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	b219      	sxth	r1, r3
 8005016:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800501a:	8b3b      	ldrh	r3, [r7, #24]
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	b29b      	uxth	r3, r3
 8005020:	883a      	ldrh	r2, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29b      	uxth	r3, r3
 800502a:	b21b      	sxth	r3, r3
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	9201      	str	r2, [sp, #4]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	2302      	movs	r3, #2
 8005034:	4622      	mov	r2, r4
 8005036:	f7ff fec9 	bl	8004dcc <LCD_Circle_Fill_Helper>
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bd90      	pop	{r4, r7, pc}

08005042 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8005042:	b590      	push	{r4, r7, lr}
 8005044:	b08b      	sub	sp, #44	; 0x2c
 8005046:	af02      	add	r7, sp, #8
 8005048:	60ba      	str	r2, [r7, #8]
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	4603      	mov	r3, r0
 800504e:	81fb      	strh	r3, [r7, #14]
 8005050:	460b      	mov	r3, r1
 8005052:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	777b      	strb	r3, [r7, #29]
 8005064:	2300      	movs	r3, #0
 8005066:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800506c:	2300      	movs	r3, #0
 800506e:	763b      	strb	r3, [r7, #24]
 8005070:	e093      	b.n	800519a <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005072:	2300      	movs	r3, #0
 8005074:	767b      	strb	r3, [r7, #25]
 8005076:	e052      	b.n	800511e <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005078:	7f3b      	ldrb	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800507e:	8bfb      	ldrh	r3, [r7, #30]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	83fa      	strh	r2, [r7, #30]
 8005084:	461a      	mov	r2, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8005092:	7f7a      	ldrb	r2, [r7, #29]
 8005094:	7f3b      	ldrb	r3, [r7, #28]
 8005096:	4013      	ands	r3, r2
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <LCD_Char+0x64>
			{
				set_pixels++;
 800509e:	8b7b      	ldrh	r3, [r7, #26]
 80050a0:	3301      	adds	r3, #1
 80050a2:	837b      	strh	r3, [r7, #26]
 80050a4:	e035      	b.n	8005112 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 80050a6:	8b7b      	ldrh	r3, [r7, #26]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d032      	beq.n	8005112 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80050b2:	461a      	mov	r2, r3
 80050b4:	7e7b      	ldrb	r3, [r7, #25]
 80050b6:	441a      	add	r2, r3
 80050b8:	8b7b      	ldrh	r3, [r7, #26]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	fb12 f303 	smulbb	r3, r2, r3
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	4413      	add	r3, r2
 80050ce:	b298      	uxth	r0, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80050d6:	461a      	mov	r2, r3
 80050d8:	7e3b      	ldrb	r3, [r7, #24]
 80050da:	4413      	add	r3, r2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	fb12 f303 	smulbb	r3, r2, r3
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	89bb      	ldrh	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	b299      	uxth	r1, r3
 80050f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	8b7a      	ldrh	r2, [r7, #26]
 80050f8:	fb12 f303 	smulbb	r3, r2, r3
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005102:	b29c      	uxth	r4, r3
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	4623      	mov	r3, r4
 800510a:	f7fe fef7 	bl	8003efc <LCD_Rect_Fill>
				set_pixels = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8005112:	7f3b      	ldrb	r3, [r7, #28]
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005118:	7e7b      	ldrb	r3, [r7, #25]
 800511a:	3301      	adds	r3, #1
 800511c:	767b      	strb	r3, [r7, #25]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	789b      	ldrb	r3, [r3, #2]
 8005122:	7e7a      	ldrb	r2, [r7, #25]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3a7      	bcc.n	8005078 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8005128:	8b7b      	ldrh	r3, [r7, #26]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d032      	beq.n	8005194 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005134:	461a      	mov	r2, r3
 8005136:	7e7b      	ldrb	r3, [r7, #25]
 8005138:	441a      	add	r2, r3
 800513a:	8b7b      	ldrh	r3, [r7, #26]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	b29a      	uxth	r2, r3
 8005140:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005144:	b29b      	uxth	r3, r3
 8005146:	fb12 f303 	smulbb	r3, r2, r3
 800514a:	b29a      	uxth	r2, r3
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	4413      	add	r3, r2
 8005150:	b298      	uxth	r0, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005158:	461a      	mov	r2, r3
 800515a:	7e3b      	ldrb	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	b29a      	uxth	r2, r3
 8005160:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005164:	b29b      	uxth	r3, r3
 8005166:	fb12 f303 	smulbb	r3, r2, r3
 800516a:	b29a      	uxth	r2, r3
 800516c:	89bb      	ldrh	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	b299      	uxth	r1, r3
 8005172:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005176:	b29b      	uxth	r3, r3
 8005178:	8b7a      	ldrh	r2, [r7, #26]
 800517a:	fb12 f303 	smulbb	r3, r2, r3
 800517e:	b29a      	uxth	r2, r3
 8005180:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005184:	b29c      	uxth	r4, r3
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	4623      	mov	r3, r4
 800518c:	f7fe feb6 	bl	8003efc <LCD_Rect_Fill>
			set_pixels = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005194:	7e3b      	ldrb	r3, [r7, #24]
 8005196:	3301      	adds	r3, #1
 8005198:	763b      	strb	r3, [r7, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	7e3a      	ldrb	r2, [r7, #24]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	f4ff af66 	bcc.w	8005072 <LCD_Char+0x30>
		}
	}
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	3724      	adds	r7, #36	; 0x24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}

080051b0 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b08f      	sub	sp, #60	; 0x3c
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60ba      	str	r2, [r7, #8]
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	4603      	mov	r3, r0
 80051bc:	81fb      	strh	r3, [r7, #14]
 80051be:	460b      	mov	r3, r1
 80051c0:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80051c6:	89bb      	ldrh	r3, [r7, #12]
 80051c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80051ca:	f107 031c 	add.w	r3, r7, #28
 80051ce:	220c      	movs	r2, #12
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f016 ffe0 	bl	801c198 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80051d8:	2300      	movs	r3, #0
 80051da:	857b      	strh	r3, [r7, #42]	; 0x2a
 80051dc:	e056      	b.n	800528c <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80051de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	4413      	add	r3, r2
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80051ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80051ee:	2b0a      	cmp	r3, #10
 80051f0:	d10f      	bne.n	8005212 <LCD_Font+0x62>
		{
			cursor_x = x;
 80051f2:	89fb      	ldrh	r3, [r7, #14]
 80051f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80051f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005200:	b29b      	uxth	r3, r3
 8005202:	fb12 f303 	smulbb	r3, r2, r3
 8005206:	b29a      	uxth	r2, r3
 8005208:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800520a:	4413      	add	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005210:	e039      	b.n	8005286 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005212:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005216:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800521a:	429a      	cmp	r2, r3
 800521c:	d333      	bcc.n	8005286 <LCD_Font+0xd6>
 800521e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005222:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005226:	429a      	cmp	r2, r3
 8005228:	d82d      	bhi.n	8005286 <LCD_Font+0xd6>
 800522a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800522e:	2b0d      	cmp	r3, #13
 8005230:	d029      	beq.n	8005286 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005238:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800523c:	1a5b      	subs	r3, r3, r1
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	18d1      	adds	r1, r2, r3
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	2208      	movs	r2, #8
 8005248:	4618      	mov	r0, r3
 800524a:	f016 ffa5 	bl	801c198 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800524e:	f107 041c 	add.w	r4, r7, #28
 8005252:	f107 0214 	add.w	r2, r7, #20
 8005256:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800525a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	4623      	mov	r3, r4
 800526a:	f7ff feea 	bl	8005042 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800526e:	7e3b      	ldrb	r3, [r7, #24]
 8005270:	b29a      	uxth	r2, r3
 8005272:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005276:	b29b      	uxth	r3, r3
 8005278:	fb12 f303 	smulbb	r3, r2, r3
 800527c:	b29a      	uxth	r2, r3
 800527e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005280:	4413      	add	r3, r2
 8005282:	b29b      	uxth	r3, r3
 8005284:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005288:	3301      	adds	r3, #1
 800528a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800528c:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f013 f8a8 	bl	80183e4 <strlen>
 8005294:	4603      	mov	r3, r0
 8005296:	429c      	cmp	r4, r3
 8005298:	d3a1      	bcc.n	80051de <LCD_Font+0x2e>
		}
	}
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	3734      	adds	r7, #52	; 0x34
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd90      	pop	{r4, r7, pc}

080052a4 <LCD_Init>:

void LCD_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 80052a8:	2096      	movs	r0, #150	; 0x96
 80052aa:	f001 f80f 	bl	80062cc <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 80052ae:	2001      	movs	r0, #1
 80052b0:	f7fe fd95 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 80052b4:	2029      	movs	r0, #41	; 0x29
 80052b6:	f7fe fd92 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 80052ba:	20e2      	movs	r0, #226	; 0xe2
 80052bc:	f7fe fd8f 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 80052c0:	201d      	movs	r0, #29
 80052c2:	f7fe fd9b 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 80052c6:	2002      	movs	r0, #2
 80052c8:	f7fe fd98 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80052cc:	20ff      	movs	r0, #255	; 0xff
 80052ce:	f7fe fd95 	bl	8003dfc <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80052d2:	20e0      	movs	r0, #224	; 0xe0
 80052d4:	f7fe fd83 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80052d8:	2001      	movs	r0, #1
 80052da:	f7fe fd8f 	bl	8003dfc <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80052de:	2078      	movs	r0, #120	; 0x78
 80052e0:	f000 fff4 	bl	80062cc <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80052e4:	20e0      	movs	r0, #224	; 0xe0
 80052e6:	f7fe fd7a 	bl	8003dde <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80052ea:	2003      	movs	r0, #3
 80052ec:	f7fe fd86 	bl	8003dfc <LCD_Send_Dat>
	HAL_Delay(120);
 80052f0:	2078      	movs	r0, #120	; 0x78
 80052f2:	f000 ffeb 	bl	80062cc <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80052f6:	2001      	movs	r0, #1
 80052f8:	f7fe fd71 	bl	8003dde <LCD_Send_Cmd>
	HAL_Delay(120);
 80052fc:	2078      	movs	r0, #120	; 0x78
 80052fe:	f000 ffe5 	bl	80062cc <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8005302:	20e6      	movs	r0, #230	; 0xe6
 8005304:	f7fe fd6b 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 8005308:	2003      	movs	r0, #3
 800530a:	f7fe fd77 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 800530e:	2085      	movs	r0, #133	; 0x85
 8005310:	f7fe fd74 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005314:	201d      	movs	r0, #29
 8005316:	f7fe fd71 	bl	8003dfc <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800531a:	20b0      	movs	r0, #176	; 0xb0
 800531c:	f7fe fd5f 	bl	8003dde <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8005320:	20ae      	movs	r0, #174	; 0xae
 8005322:	f7fe fd6b 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 8005326:	2020      	movs	r0, #32
 8005328:	f7fe fd68 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 800532c:	2003      	movs	r0, #3
 800532e:	f7fe fd65 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8005332:	201f      	movs	r0, #31
 8005334:	f7fe fd62 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 8005338:	2001      	movs	r0, #1
 800533a:	f7fe fd5f 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 800533e:	20df      	movs	r0, #223	; 0xdf
 8005340:	f7fe fd5c 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005344:	202d      	movs	r0, #45	; 0x2d
 8005346:	f7fe fd59 	bl	8003dfc <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 800534a:	20b4      	movs	r0, #180	; 0xb4
 800534c:	f7fe fd47 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005350:	2003      	movs	r0, #3
 8005352:	f7fe fd53 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005356:	20a0      	movs	r0, #160	; 0xa0
 8005358:	f7fe fd50 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 800535c:	2000      	movs	r0, #0
 800535e:	f7fe fd4d 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005362:	202e      	movs	r0, #46	; 0x2e
 8005364:	f7fe fd4a 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005368:	2030      	movs	r0, #48	; 0x30
 800536a:	f7fe fd47 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 800536e:	2000      	movs	r0, #0
 8005370:	f7fe fd44 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005374:	200f      	movs	r0, #15
 8005376:	f7fe fd41 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 800537a:	2000      	movs	r0, #0
 800537c:	f7fe fd3e 	bl	8003dfc <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8005380:	20b6      	movs	r0, #182	; 0xb6
 8005382:	f7fe fd2c 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8005386:	2002      	movs	r0, #2
 8005388:	f7fe fd38 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 800538c:	200d      	movs	r0, #13
 800538e:	f7fe fd35 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8005392:	2000      	movs	r0, #0
 8005394:	f7fe fd32 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005398:	2010      	movs	r0, #16
 800539a:	f7fe fd2f 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 800539e:	2010      	movs	r0, #16
 80053a0:	f7fe fd2c 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 80053a4:	2008      	movs	r0, #8
 80053a6:	f7fe fd29 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 80053aa:	2000      	movs	r0, #0
 80053ac:	f7fe fd26 	bl	8003dfc <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 80053b0:	20be      	movs	r0, #190	; 0xbe
 80053b2:	f7fe fd14 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80053b6:	2008      	movs	r0, #8
 80053b8:	f7fe fd20 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 80053bc:	20ff      	movs	r0, #255	; 0xff
 80053be:	f7fe fd1d 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fe fd1a 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80053c8:	2036      	movs	r0, #54	; 0x36
 80053ca:	f7fe fd08 	bl	8003dde <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80053ce:	2003      	movs	r0, #3
 80053d0:	f7fe fd14 	bl	8003dfc <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80053d4:	20f0      	movs	r0, #240	; 0xf0
 80053d6:	f7fe fd02 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80053da:	2003      	movs	r0, #3
 80053dc:	f7fe fd0e 	bl	8003dfc <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 80053e0:	2029      	movs	r0, #41	; 0x29
 80053e2:	f7fe fcfc 	bl	8003dde <LCD_Send_Cmd>
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}

080053ea <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 80053f4:	20be      	movs	r0, #190	; 0xbe
 80053f6:	f7fe fcf2 	bl	8003dde <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80053fa:	2008      	movs	r0, #8
 80053fc:	f7fe fcfe 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	b29b      	uxth	r3, r3
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fcf9 	bl	8003dfc <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 800540a:	2001      	movs	r0, #1
 800540c:	f7fe fcf6 	bl	8003dfc <LCD_Send_Dat>
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	4b10      	ldr	r3, [pc, #64]	; (8005464 <HAL_MspInit+0x4c>)
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <HAL_MspInit+0x4c>)
 8005428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800542c:	6453      	str	r3, [r2, #68]	; 0x44
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <HAL_MspInit+0x4c>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	607b      	str	r3, [r7, #4]
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_MspInit+0x4c>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_MspInit+0x4c>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005448:	6413      	str	r3, [r2, #64]	; 0x40
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_MspInit+0x4c>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800

08005468 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <HAL_DAC_MspInit+0x7c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d127      	bne.n	80054da <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <HAL_DAC_MspInit+0x80>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_DAC_MspInit+0x80>)
 8005494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005498:	6413      	str	r3, [r2, #64]	; 0x40
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_DAC_MspInit+0x80>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <HAL_DAC_MspInit+0x80>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4a0e      	ldr	r2, [pc, #56]	; (80054e8 <HAL_DAC_MspInit+0x80>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <HAL_DAC_MspInit+0x80>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80054c2:	2330      	movs	r3, #48	; 0x30
 80054c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054c6:	2303      	movs	r3, #3
 80054c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ce:	f107 0314 	add.w	r3, r7, #20
 80054d2:	4619      	mov	r1, r3
 80054d4:	4805      	ldr	r0, [pc, #20]	; (80054ec <HAL_DAC_MspInit+0x84>)
 80054d6:	f005 f815 	bl	800a504 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80054da:	bf00      	nop
 80054dc:	3728      	adds	r7, #40	; 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40007400 	.word	0x40007400
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40020000 	.word	0x40020000

080054f0 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <HAL_DAC_MspDeInit+0x30>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d109      	bne.n	8005516 <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_DAC_MspDeInit+0x34>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	4a07      	ldr	r2, [pc, #28]	; (8005524 <HAL_DAC_MspDeInit+0x34>)
 8005508:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800550c:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 800550e:	2130      	movs	r1, #48	; 0x30
 8005510:	4805      	ldr	r0, [pc, #20]	; (8005528 <HAL_DAC_MspDeInit+0x38>)
 8005512:	f005 f993 	bl	800a83c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40007400 	.word	0x40007400
 8005524:	40023800 	.word	0x40023800
 8005528:	40020000 	.word	0x40020000

0800552c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a19      	ldr	r2, [pc, #100]	; (80055b0 <HAL_I2C_MspInit+0x84>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d12b      	bne.n	80055a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <HAL_I2C_MspInit+0x88>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <HAL_I2C_MspInit+0x88>)
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
 800555e:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <HAL_I2C_MspInit+0x88>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800556a:	23c0      	movs	r3, #192	; 0xc0
 800556c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800556e:	2312      	movs	r3, #18
 8005570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005572:	2301      	movs	r3, #1
 8005574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005576:	2303      	movs	r3, #3
 8005578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800557a:	2304      	movs	r3, #4
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557e:	f107 0314 	add.w	r3, r7, #20
 8005582:	4619      	mov	r1, r3
 8005584:	480c      	ldr	r0, [pc, #48]	; (80055b8 <HAL_I2C_MspInit+0x8c>)
 8005586:	f004 ffbd 	bl	800a504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <HAL_I2C_MspInit+0x88>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <HAL_I2C_MspInit+0x88>)
 8005594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_I2C_MspInit+0x88>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055a6:	bf00      	nop
 80055a8:	3728      	adds	r7, #40	; 0x28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40005400 	.word	0x40005400
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40020400 	.word	0x40020400

080055bc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_I2C_MspDeInit+0x38>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <HAL_I2C_MspDeInit+0x3c>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <HAL_I2C_MspDeInit+0x3c>)
 80055d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80055da:	2140      	movs	r1, #64	; 0x40
 80055dc:	4807      	ldr	r0, [pc, #28]	; (80055fc <HAL_I2C_MspDeInit+0x40>)
 80055de:	f005 f92d 	bl	800a83c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80055e2:	2180      	movs	r1, #128	; 0x80
 80055e4:	4805      	ldr	r0, [pc, #20]	; (80055fc <HAL_I2C_MspDeInit+0x40>)
 80055e6:	f005 f929 	bl	800a83c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40005400 	.word	0x40005400
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40020400 	.word	0x40020400

08005600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08c      	sub	sp, #48	; 0x30
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005608:	f107 031c 	add.w	r3, r7, #28
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a42      	ldr	r2, [pc, #264]	; (8005728 <HAL_SPI_MspInit+0x128>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d12d      	bne.n	800567e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <HAL_SPI_MspInit+0x12c>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	4a40      	ldr	r2, [pc, #256]	; (800572c <HAL_SPI_MspInit+0x12c>)
 800562c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005630:	6413      	str	r3, [r2, #64]	; 0x40
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_SPI_MspInit+0x12c>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	4b3a      	ldr	r3, [pc, #232]	; (800572c <HAL_SPI_MspInit+0x12c>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	4a39      	ldr	r2, [pc, #228]	; (800572c <HAL_SPI_MspInit+0x12c>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	6313      	str	r3, [r2, #48]	; 0x30
 800564e:	4b37      	ldr	r3, [pc, #220]	; (800572c <HAL_SPI_MspInit+0x12c>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800565a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800565e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005660:	2302      	movs	r3, #2
 8005662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005668:	2303      	movs	r3, #3
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800566c:	2305      	movs	r3, #5
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005670:	f107 031c 	add.w	r3, r7, #28
 8005674:	4619      	mov	r1, r3
 8005676:	482e      	ldr	r0, [pc, #184]	; (8005730 <HAL_SPI_MspInit+0x130>)
 8005678:	f004 ff44 	bl	800a504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800567c:	e050      	b.n	8005720 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2c      	ldr	r2, [pc, #176]	; (8005734 <HAL_SPI_MspInit+0x134>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d14b      	bne.n	8005720 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_SPI_MspInit+0x12c>)
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	4a26      	ldr	r2, [pc, #152]	; (800572c <HAL_SPI_MspInit+0x12c>)
 8005692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005696:	6413      	str	r3, [r2, #64]	; 0x40
 8005698:	4b24      	ldr	r3, [pc, #144]	; (800572c <HAL_SPI_MspInit+0x12c>)
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	4b20      	ldr	r3, [pc, #128]	; (800572c <HAL_SPI_MspInit+0x12c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	4a1f      	ldr	r2, [pc, #124]	; (800572c <HAL_SPI_MspInit+0x12c>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6313      	str	r3, [r2, #48]	; 0x30
 80056b4:	4b1d      	ldr	r3, [pc, #116]	; (800572c <HAL_SPI_MspInit+0x12c>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	4b19      	ldr	r3, [pc, #100]	; (800572c <HAL_SPI_MspInit+0x12c>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_SPI_MspInit+0x12c>)
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	6313      	str	r3, [r2, #48]	; 0x30
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_SPI_MspInit+0x12c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80056dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e2:	2302      	movs	r3, #2
 80056e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ea:	2303      	movs	r3, #3
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056ee:	2306      	movs	r3, #6
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f2:	f107 031c 	add.w	r3, r7, #28
 80056f6:	4619      	mov	r1, r3
 80056f8:	480f      	ldr	r0, [pc, #60]	; (8005738 <HAL_SPI_MspInit+0x138>)
 80056fa:	f004 ff03 	bl	800a504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80056fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005704:	2302      	movs	r3, #2
 8005706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800570c:	2303      	movs	r3, #3
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005710:	2306      	movs	r3, #6
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005714:	f107 031c 	add.w	r3, r7, #28
 8005718:	4619      	mov	r1, r3
 800571a:	4808      	ldr	r0, [pc, #32]	; (800573c <HAL_SPI_MspInit+0x13c>)
 800571c:	f004 fef2 	bl	800a504 <HAL_GPIO_Init>
}
 8005720:	bf00      	nop
 8005722:	3730      	adds	r7, #48	; 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40003800 	.word	0x40003800
 800572c:	40023800 	.word	0x40023800
 8005730:	40020400 	.word	0x40020400
 8005734:	40003c00 	.word	0x40003c00
 8005738:	40020000 	.word	0x40020000
 800573c:	40020800 	.word	0x40020800

08005740 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_SPI_MspDeInit+0x5c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10b      	bne.n	800576a <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <HAL_SPI_MspDeInit+0x60>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	4a12      	ldr	r2, [pc, #72]	; (80057a0 <HAL_SPI_MspDeInit+0x60>)
 8005758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800575c:	6413      	str	r3, [r2, #64]	; 0x40
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800575e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005762:	4810      	ldr	r0, [pc, #64]	; (80057a4 <HAL_SPI_MspDeInit+0x64>)
 8005764:	f005 f86a 	bl	800a83c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005768:	e014      	b.n	8005794 <HAL_SPI_MspDeInit+0x54>
  else if(hspi->Instance==SPI3)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <HAL_SPI_MspDeInit+0x68>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d10f      	bne.n	8005794 <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_SPI_MspDeInit+0x60>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <HAL_SPI_MspDeInit+0x60>)
 800577a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800577e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005784:	4809      	ldr	r0, [pc, #36]	; (80057ac <HAL_SPI_MspDeInit+0x6c>)
 8005786:	f005 f859 	bl	800a83c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800578a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800578e:	4808      	ldr	r0, [pc, #32]	; (80057b0 <HAL_SPI_MspDeInit+0x70>)
 8005790:	f005 f854 	bl	800a83c <HAL_GPIO_DeInit>
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40003800 	.word	0x40003800
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40020400 	.word	0x40020400
 80057a8:	40003c00 	.word	0x40003c00
 80057ac:	40020000 	.word	0x40020000
 80057b0:	40020800 	.word	0x40020800

080057b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	60da      	str	r2, [r3, #12]
 80057ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a4c      	ldr	r2, [pc, #304]	; (8005904 <HAL_UART_MspInit+0x150>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f040 8091 	bne.w	80058fa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	4b4a      	ldr	r3, [pc, #296]	; (8005908 <HAL_UART_MspInit+0x154>)
 80057de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e0:	4a49      	ldr	r2, [pc, #292]	; (8005908 <HAL_UART_MspInit+0x154>)
 80057e2:	f043 0310 	orr.w	r3, r3, #16
 80057e6:	6453      	str	r3, [r2, #68]	; 0x44
 80057e8:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_UART_MspInit+0x154>)
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	4b43      	ldr	r3, [pc, #268]	; (8005908 <HAL_UART_MspInit+0x154>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4a42      	ldr	r2, [pc, #264]	; (8005908 <HAL_UART_MspInit+0x154>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6313      	str	r3, [r2, #48]	; 0x30
 8005804:	4b40      	ldr	r3, [pc, #256]	; (8005908 <HAL_UART_MspInit+0x154>)
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005810:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005816:	2302      	movs	r3, #2
 8005818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581e:	2303      	movs	r3, #3
 8005820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005822:	2307      	movs	r3, #7
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005826:	f107 0314 	add.w	r3, r7, #20
 800582a:	4619      	mov	r1, r3
 800582c:	4837      	ldr	r0, [pc, #220]	; (800590c <HAL_UART_MspInit+0x158>)
 800582e:	f004 fe69 	bl	800a504 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005832:	4b37      	ldr	r3, [pc, #220]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005834:	4a37      	ldr	r2, [pc, #220]	; (8005914 <HAL_UART_MspInit+0x160>)
 8005836:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005838:	4b35      	ldr	r3, [pc, #212]	; (8005910 <HAL_UART_MspInit+0x15c>)
 800583a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800583e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005846:	4b32      	ldr	r3, [pc, #200]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005848:	2200      	movs	r2, #0
 800584a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800584c:	4b30      	ldr	r3, [pc, #192]	; (8005910 <HAL_UART_MspInit+0x15c>)
 800584e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005852:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005854:	4b2e      	ldr	r3, [pc, #184]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005856:	2200      	movs	r2, #0
 8005858:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800585a:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <HAL_UART_MspInit+0x15c>)
 800585c:	2200      	movs	r2, #0
 800585e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005862:	2200      	movs	r2, #0
 8005864:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005866:	4b2a      	ldr	r3, [pc, #168]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005868:	2200      	movs	r2, #0
 800586a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <HAL_UART_MspInit+0x15c>)
 800586e:	2200      	movs	r2, #0
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005872:	4827      	ldr	r0, [pc, #156]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005874:	f001 fe00 	bl	8007478 <HAL_DMA_Init>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800587e:	f7fe fa55 	bl	8003d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a22      	ldr	r2, [pc, #136]	; (8005910 <HAL_UART_MspInit+0x15c>)
 8005886:	635a      	str	r2, [r3, #52]	; 0x34
 8005888:	4a21      	ldr	r2, [pc, #132]	; (8005910 <HAL_UART_MspInit+0x15c>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800588e:	4b22      	ldr	r3, [pc, #136]	; (8005918 <HAL_UART_MspInit+0x164>)
 8005890:	4a22      	ldr	r2, [pc, #136]	; (800591c <HAL_UART_MspInit+0x168>)
 8005892:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_UART_MspInit+0x164>)
 8005896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800589a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_UART_MspInit+0x164>)
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058a2:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058b6:	4b18      	ldr	r3, [pc, #96]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058be:	2200      	movs	r2, #0
 80058c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058c8:	4b13      	ldr	r3, [pc, #76]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80058ce:	4812      	ldr	r0, [pc, #72]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058d0:	f001 fdd2 	bl	8007478 <HAL_DMA_Init>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80058da:	f7fe fa27 	bl	8003d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
 80058e4:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <HAL_UART_MspInit+0x164>)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80058ea:	2200      	movs	r2, #0
 80058ec:	2100      	movs	r1, #0
 80058ee:	2025      	movs	r0, #37	; 0x25
 80058f0:	f000 ffe3 	bl	80068ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058f4:	2025      	movs	r0, #37	; 0x25
 80058f6:	f000 fffc 	bl	80068f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80058fa:	bf00      	nop
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40011000 	.word	0x40011000
 8005908:	40023800 	.word	0x40023800
 800590c:	40020000 	.word	0x40020000
 8005910:	20000404 	.word	0x20000404
 8005914:	400264b8 	.word	0x400264b8
 8005918:	20000464 	.word	0x20000464
 800591c:	40026440 	.word	0x40026440

08005920 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0f      	ldr	r2, [pc, #60]	; (800596c <HAL_UART_MspDeInit+0x4c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d117      	bne.n	8005962 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <HAL_UART_MspDeInit+0x50>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <HAL_UART_MspDeInit+0x50>)
 8005938:	f023 0310 	bic.w	r3, r3, #16
 800593c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800593e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005942:	480c      	ldr	r0, [pc, #48]	; (8005974 <HAL_UART_MspDeInit+0x54>)
 8005944:	f004 ff7a 	bl	800a83c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fe41 	bl	80075d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fe3c 	bl	80075d4 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800595c:	2025      	movs	r0, #37	; 0x25
 800595e:	f000 ffd6 	bl	800690e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40011000 	.word	0x40011000
 8005970:	40023800 	.word	0x40023800
 8005974:	40020000 	.word	0x40020000

08005978 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800598c:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <HAL_FSMC_MspInit+0x88>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d131      	bne.n	80059f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005994:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <HAL_FSMC_MspInit+0x88>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_FSMC_MspInit+0x8c>)
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_FSMC_MspInit+0x8c>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	6393      	str	r3, [r2, #56]	; 0x38
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <HAL_FSMC_MspInit+0x8c>)
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80059b6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80059ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059bc:	2302      	movs	r3, #2
 80059be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059c4:	2303      	movs	r3, #3
 80059c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80059c8:	230c      	movs	r3, #12
 80059ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	480d      	ldr	r0, [pc, #52]	; (8005a08 <HAL_FSMC_MspInit+0x90>)
 80059d2:	f004 fd97 	bl	800a504 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80059d6:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80059da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059dc:	2302      	movs	r3, #2
 80059de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e4:	2303      	movs	r3, #3
 80059e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80059e8:	230c      	movs	r3, #12
 80059ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059ec:	1d3b      	adds	r3, r7, #4
 80059ee:	4619      	mov	r1, r3
 80059f0:	4806      	ldr	r0, [pc, #24]	; (8005a0c <HAL_FSMC_MspInit+0x94>)
 80059f2:	f004 fd87 	bl	800a504 <HAL_GPIO_Init>
 80059f6:	e000      	b.n	80059fa <HAL_FSMC_MspInit+0x82>
    return;
 80059f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000920 	.word	0x20000920
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40020c00 	.word	0x40020c00

08005a10 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005a18:	f7ff ffae 	bl	8005978 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_FSMC_MspDeInit+0x38>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d113      	bne.n	8005a58 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_FSMC_MspDeInit+0x38>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <HAL_FSMC_MspDeInit+0x3c>)
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <HAL_FSMC_MspDeInit+0x3c>)
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005a42:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005a46:	4807      	ldr	r0, [pc, #28]	; (8005a64 <HAL_FSMC_MspDeInit+0x40>)
 8005a48:	f004 fef8 	bl	800a83c <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005a4c:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005a50:	4805      	ldr	r0, [pc, #20]	; (8005a68 <HAL_FSMC_MspDeInit+0x44>)
 8005a52:	f004 fef3 	bl	800a83c <HAL_GPIO_DeInit>
 8005a56:	e000      	b.n	8005a5a <HAL_FSMC_MspDeInit+0x36>
    return;
 8005a58:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000924 	.word	0x20000924
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40020c00 	.word	0x40020c00

08005a6c <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005a74:	f7ff ffd6 	bl	8005a24 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a84:	e7fe      	b.n	8005a84 <NMI_Handler+0x4>

08005a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a86:	b480      	push	{r7}
 8005a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a8a:	e7fe      	b.n	8005a8a <HardFault_Handler+0x4>

08005a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a90:	e7fe      	b.n	8005a90 <MemManage_Handler+0x4>

08005a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a96:	e7fe      	b.n	8005a96 <BusFault_Handler+0x4>

08005a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a9c:	e7fe      	b.n	8005a9c <UsageFault_Handler+0x4>

08005a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005abe:	bf00      	nop
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005acc:	f000 fb9e 	bl	800620c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ad0:	bf00      	nop
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <USART1_IRQHandler+0x10>)
 8005ada:	f010 fdaf 	bl	801663c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200003c0 	.word	0x200003c0

08005ae8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <DMA2_Stream2_IRQHandler+0x10>)
 8005aee:	f001 ffd3 	bl	8007a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000464 	.word	0x20000464

08005afc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005b00:	4802      	ldr	r0, [pc, #8]	; (8005b0c <DMA2_Stream7_IRQHandler+0x10>)
 8005b02:	f001 ffc9 	bl	8007a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000404 	.word	0x20000404

08005b10 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <_getpid>:

int _getpid(void)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	af00      	add	r7, sp, #0
	return 1;
 8005b22:	2301      	movs	r3, #1
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <_kill>:

int _kill(int pid, int sig)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b38:	f013 fb9c 	bl	8019274 <__errno>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2216      	movs	r2, #22
 8005b40:	601a      	str	r2, [r3, #0]
	return -1;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <_exit>:

void _exit (int status)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b56:	f04f 31ff 	mov.w	r1, #4294967295
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ffe7 	bl	8005b2e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005b60:	e7fe      	b.n	8005b60 <_exit+0x12>

08005b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e00a      	b.n	8005b8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b74:	f3af 8000 	nop.w
 8005b78:	4601      	mov	r1, r0
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	60ba      	str	r2, [r7, #8]
 8005b80:	b2ca      	uxtb	r2, r1
 8005b82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	3301      	adds	r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	dbf0      	blt.n	8005b74 <_read+0x12>
	}

return len;
 8005b92:	687b      	ldr	r3, [r7, #4]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	e009      	b.n	8005bc2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	60ba      	str	r2, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	dbf1      	blt.n	8005bae <_write+0x12>
	}
	return len;
 8005bca:	687b      	ldr	r3, [r7, #4]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_close>:

int _close(int file)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	return -1;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bfc:	605a      	str	r2, [r3, #4]
	return 0;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <_isatty>:

int _isatty(int file)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	return 1;
 8005c14:	2301      	movs	r3, #1
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
	return 0;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <_open>:

int _open(char *path, int flags, ...)
{
 8005c3c:	b40e      	push	{r1, r2, r3}
 8005c3e:	b480      	push	{r7}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	b003      	add	sp, #12
 8005c56:	4770      	bx	lr

08005c58 <_wait>:

int _wait(int *status)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8005c60:	f013 fb08 	bl	8019274 <__errno>
 8005c64:	4603      	mov	r3, r0
 8005c66:	220a      	movs	r2, #10
 8005c68:	601a      	str	r2, [r3, #0]
	return -1;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <_unlink>:

int _unlink(char *name)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8005c7e:	f013 faf9 	bl	8019274 <__errno>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2202      	movs	r2, #2
 8005c86:	601a      	str	r2, [r3, #0]
	return -1;
 8005c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <_times>:

int _times(struct tms *buf)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	return -1;
 8005c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <_stat>:

int _stat(char *file, struct stat *st)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cbc:	605a      	str	r2, [r3, #4]
	return 0;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <_link>:

int _link(char *old, char *new)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8005cd6:	f013 facd 	bl	8019274 <__errno>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	221f      	movs	r2, #31
 8005cde:	601a      	str	r2, [r3, #0]
	return -1;
 8005ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <_fork>:

int _fork(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8005cf0:	f013 fac0 	bl	8019274 <__errno>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	220b      	movs	r2, #11
 8005cf8:	601a      	str	r2, [r3, #0]
	return -1;
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8005d0e:	f013 fab1 	bl	8019274 <__errno>
 8005d12:	4603      	mov	r3, r0
 8005d14:	220c      	movs	r2, #12
 8005d16:	601a      	str	r2, [r3, #0]
	return -1;
 8005d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <_sbrk+0x5c>)
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <_sbrk+0x60>)
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d38:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <_sbrk+0x64>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <_sbrk+0x64>)
 8005d42:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <_sbrk+0x68>)
 8005d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <_sbrk+0x64>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d207      	bcs.n	8005d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d54:	f013 fa8e 	bl	8019274 <__errno>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	220c      	movs	r2, #12
 8005d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	e009      	b.n	8005d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d64:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <_sbrk+0x64>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d6a:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <_sbrk+0x64>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4413      	add	r3, r2
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <_sbrk+0x64>)
 8005d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d76:	68fb      	ldr	r3, [r7, #12]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20020000 	.word	0x20020000
 8005d84:	00000400 	.word	0x00000400
 8005d88:	2000092c 	.word	0x2000092c
 8005d8c:	20000968 	.word	0x20000968

08005d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <SystemInit+0x20>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <SystemInit+0x20>)
 8005d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	e000ed00 	.word	0xe000ed00

08005db4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	2302      	movs	r3, #2
 8005dcc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005dce:	4b34      	ldr	r3, [pc, #208]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d011      	beq.n	8005e02 <SystemCoreClockUpdate+0x4e>
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d844      	bhi.n	8005e6e <SystemCoreClockUpdate+0xba>
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <SystemCoreClockUpdate+0x3e>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d004      	beq.n	8005dfa <SystemCoreClockUpdate+0x46>
 8005df0:	e03d      	b.n	8005e6e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005df2:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <SystemCoreClockUpdate+0xf0>)
 8005df4:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <SystemCoreClockUpdate+0xf4>)
 8005df6:	601a      	str	r2, [r3, #0]
      break;
 8005df8:	e03d      	b.n	8005e76 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005dfa:	4b2a      	ldr	r3, [pc, #168]	; (8005ea4 <SystemCoreClockUpdate+0xf0>)
 8005dfc:	4a2b      	ldr	r2, [pc, #172]	; (8005eac <SystemCoreClockUpdate+0xf8>)
 8005dfe:	601a      	str	r2, [r3, #0]
      break;
 8005e00:	e039      	b.n	8005e76 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005e02:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	0d9b      	lsrs	r3, r3, #22
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e0e:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e16:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005e1e:	4a23      	ldr	r2, [pc, #140]	; (8005eac <SystemCoreClockUpdate+0xf8>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005e28:	6852      	ldr	r2, [r2, #4]
 8005e2a:	0992      	lsrs	r2, r2, #6
 8005e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e00b      	b.n	8005e50 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005e38:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <SystemCoreClockUpdate+0xf4>)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	4a17      	ldr	r2, [pc, #92]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005e42:	6852      	ldr	r2, [r2, #4]
 8005e44:	0992      	lsrs	r2, r2, #6
 8005e46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	4a0e      	ldr	r2, [pc, #56]	; (8005ea4 <SystemCoreClockUpdate+0xf0>)
 8005e6a:	6013      	str	r3, [r2, #0]
      break;
 8005e6c:	e003      	b.n	8005e76 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <SystemCoreClockUpdate+0xf0>)
 8005e70:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <SystemCoreClockUpdate+0xf4>)
 8005e72:	601a      	str	r2, [r3, #0]
      break;
 8005e74:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <SystemCoreClockUpdate+0xec>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <SystemCoreClockUpdate+0xfc>)
 8005e82:	5cd3      	ldrb	r3, [r2, r3]
 8005e84:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <SystemCoreClockUpdate+0xf0>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <SystemCoreClockUpdate+0xf0>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	20000058 	.word	0x20000058
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	007a1200 	.word	0x007a1200
 8005eb0:	08051918 	.word	0x08051918

08005eb4 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	ed87 0a05 	vstr	s0, [r7, #20]
 8005ebe:	edc7 0a04 	vstr	s1, [r7, #16]
 8005ec2:	ed87 1a03 	vstr	s2, [r7, #12]
 8005ec6:	edc7 1a02 	vstr	s3, [r7, #8]
 8005eca:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005ece:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ed6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eda:	edd7 6a01 	vldr	s13, [r7, #4]
 8005ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ee2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ee6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005eea:	ed97 7a03 	vldr	s14, [r7, #12]
 8005eee:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005efe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005f02:	eeb0 0a67 	vmov.f32	s0, s15
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8005f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	4809      	ldr	r0, [pc, #36]	; (8005f44 <XPT2046_Init+0x34>)
 8005f1e:	f00c fb3e 	bl	801259e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f26:	2201      	movs	r2, #1
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4806      	ldr	r0, [pc, #24]	; (8005f44 <XPT2046_Init+0x34>)
 8005f2c:	f00c fb37 	bl	801259e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f34:	2201      	movs	r2, #1
 8005f36:	2100      	movs	r1, #0
 8005f38:	4802      	ldr	r0, [pc, #8]	; (8005f44 <XPT2046_Init+0x34>)
 8005f3a:	f00c fb30 	bl	801259e <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000310 	.word	0x20000310

08005f48 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	4603      	mov	r3, r0
 8005f50:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8005f52:	2001      	movs	r0, #1
 8005f54:	f000 f9ba 	bl	80062cc <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8005f58:	1df9      	adds	r1, r7, #7
 8005f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4814      	ldr	r0, [pc, #80]	; (8005fb4 <getRaw+0x6c>)
 8005f62:	f00c fb1c 	bl	801259e <HAL_SPI_Transmit>
	address = 0x00;
 8005f66:	2300      	movs	r3, #0
 8005f68:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005f6a:	f107 020b 	add.w	r2, r7, #11
 8005f6e:	1df9      	adds	r1, r7, #7
 8005f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2301      	movs	r3, #1
 8005f78:	480e      	ldr	r0, [pc, #56]	; (8005fb4 <getRaw+0x6c>)
 8005f7a:	f00c fd5d 	bl	8012a38 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8005f82:	2300      	movs	r3, #0
 8005f84:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005f86:	f107 020b 	add.w	r2, r7, #11
 8005f8a:	1df9      	adds	r1, r7, #7
 8005f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	2301      	movs	r3, #1
 8005f94:	4807      	ldr	r0, [pc, #28]	; (8005fb4 <getRaw+0x6c>)
 8005f96:	f00c fd4f 	bl	8012a38 <HAL_SPI_TransmitReceive>
	LSB = data;
 8005f9a:	7afb      	ldrb	r3, [r7, #11]
 8005f9c:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8005f9e:	89fb      	ldrh	r3, [r7, #14]
 8005fa0:	021a      	lsls	r2, r3, #8
 8005fa2:	89bb      	ldrh	r3, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	10db      	asrs	r3, r3, #3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	bf00      	nop
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000310 	.word	0x20000310

08005fb8 <X>:

inline static uint16_t X(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8005fbe:	20d0      	movs	r0, #208	; 0xd0
 8005fc0:	f7ff ffc2 	bl	8005f48 <getRaw>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8006014 <X+0x5c>
 8005fd2:	eddf 1a11 	vldr	s3, [pc, #68]	; 8006018 <X+0x60>
 8005fd6:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800601c <X+0x64>
 8005fda:	eddf 0a11 	vldr	s1, [pc, #68]	; 8006020 <X+0x68>
 8005fde:	eeb0 0a67 	vmov.f32	s0, s15
 8005fe2:	f7ff ff67 	bl	8005eb4 <remap>
 8005fe6:	eef0 7a40 	vmov.f32	s15, s0
 8005fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fee:	ee17 3a90 	vmov	r3, s15
 8005ff2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <X+0x50>
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	f240 321e 	movw	r2, #798	; 0x31e
 8006000:	4293      	cmp	r3, r2
 8006002:	d801      	bhi.n	8006008 <X+0x50>
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	e000      	b.n	800600a <X+0x52>
	else return 0;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	4447c000 	.word	0x4447c000
 8006018:	00000000 	.word	0x00000000
 800601c:	457a0000 	.word	0x457a0000
 8006020:	43480000 	.word	0x43480000

08006024 <Y>:

inline static uint16_t Y(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800602a:	2090      	movs	r0, #144	; 0x90
 800602c:	f7ff ff8c 	bl	8005f48 <getRaw>
 8006030:	4603      	mov	r3, r0
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006088 <Y+0x64>
 800603e:	eddf 1a13 	vldr	s3, [pc, #76]	; 800608c <Y+0x68>
 8006042:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006090 <Y+0x6c>
 8006046:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006094 <Y+0x70>
 800604a:	eeb0 0a67 	vmov.f32	s0, s15
 800604e:	f7ff ff31 	bl	8005eb4 <remap>
 8006052:	eef0 7a40 	vmov.f32	s15, s0
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 3a90 	vmov	r3, s15
 800605e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8006066:	3301      	adds	r3, #1
 8006068:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <Y+0x58>
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006076:	d801      	bhi.n	800607c <Y+0x58>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	e000      	b.n	800607e <Y+0x5a>
	else return 0;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	43ef8000 	.word	0x43ef8000
 800608c:	00000000 	.word	0x00000000
 8006090:	456d8000 	.word	0x456d8000
 8006094:	43480000 	.word	0x43480000

08006098 <getX>:

uint16_t getX(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <getX+0x30>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 80060a4:	e007      	b.n	80060b6 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 80060a6:	f7ff ff87 	bl	8005fb8 <X>
 80060aa:	4603      	mov	r3, r0
 80060ac:	80bb      	strh	r3, [r7, #4]
 80060ae:	f7ff ff83 	bl	8005fb8 <X>
 80060b2:	4603      	mov	r3, r0
 80060b4:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80060b6:	88ba      	ldrh	r2, [r7, #4]
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d1f3      	bne.n	80060a6 <getX+0xe>
		}
		return x[0];
 80060be:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	08051930 	.word	0x08051930

080060cc <getY>:

uint16_t getY(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80060d2:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <getY+0x30>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80060d8:	e007      	b.n	80060ea <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80060da:	f7ff ffa3 	bl	8006024 <Y>
 80060de:	4603      	mov	r3, r0
 80060e0:	80bb      	strh	r3, [r7, #4]
 80060e2:	f7ff ff9f 	bl	8006024 <Y>
 80060e6:	4603      	mov	r3, r0
 80060e8:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80060ea:	88ba      	ldrh	r2, [r7, #4]
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d1f3      	bne.n	80060da <getY+0xe>
		}
		return y[0];
 80060f2:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	08051930 	.word	0x08051930

08006100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_Init+0x40>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <HAL_Init+0x40>)
 800610a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800610e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_Init+0x40>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a0a      	ldr	r2, [pc, #40]	; (8006140 <HAL_Init+0x40>)
 8006116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800611a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800611c:	4b08      	ldr	r3, [pc, #32]	; (8006140 <HAL_Init+0x40>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a07      	ldr	r2, [pc, #28]	; (8006140 <HAL_Init+0x40>)
 8006122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006128:	2003      	movs	r0, #3
 800612a:	f000 fbbb 	bl	80068a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800612e:	2000      	movs	r0, #0
 8006130:	f000 f83b 	bl	80061aa <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006134:	f7ff f970 	bl	8005418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40023c00 	.word	0x40023c00

08006144 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006148:	4b13      	ldr	r3, [pc, #76]	; (8006198 <HAL_DeInit+0x54>)
 800614a:	f04f 32ff 	mov.w	r2, #4294967295
 800614e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <HAL_DeInit+0x54>)
 8006152:	2200      	movs	r2, #0
 8006154:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <HAL_DeInit+0x54>)
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_DeInit+0x54>)
 8006160:	2200      	movs	r2, #0
 8006162:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <HAL_DeInit+0x54>)
 8006166:	f04f 32ff 	mov.w	r2, #4294967295
 800616a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <HAL_DeInit+0x54>)
 800616e:	2200      	movs	r2, #0
 8006170:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_DeInit+0x54>)
 8006174:	f04f 32ff 	mov.w	r2, #4294967295
 8006178:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800617a:	4b07      	ldr	r3, [pc, #28]	; (8006198 <HAL_DeInit+0x54>)
 800617c:	2200      	movs	r2, #0
 800617e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <HAL_DeInit+0x54>)
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006188:	4b03      	ldr	r3, [pc, #12]	; (8006198 <HAL_DeInit+0x54>)
 800618a:	2200      	movs	r2, #0
 800618c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800618e:	f000 f805 	bl	800619c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40023800 	.word	0x40023800

0800619c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_InitTick+0x56>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b13      	ldr	r3, [pc, #76]	; (8006204 <HAL_InitTick+0x5a>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	4619      	mov	r1, r3
 80061bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fbb2 	bl	8006932 <HAL_SYSTICK_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e00e      	b.n	80061f6 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d80a      	bhi.n	80061f4 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061de:	2200      	movs	r2, #0
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	f000 fb68 	bl	80068ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061ea:	4a07      	ldr	r2, [pc, #28]	; (8006208 <HAL_InitTick+0x5e>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000058 	.word	0x20000058
 8006204:	20000060 	.word	0x20000060
 8006208:	2000005c 	.word	0x2000005c

0800620c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <HAL_IncTick+0x20>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <HAL_IncTick+0x24>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4413      	add	r3, r2
 800621c:	4a04      	ldr	r2, [pc, #16]	; (8006230 <HAL_IncTick+0x24>)
 800621e:	6013      	str	r3, [r2, #0]
}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000060 	.word	0x20000060
 8006230:	20000930 	.word	0x20000930

08006234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return uwTick;
 8006238:	4b03      	ldr	r3, [pc, #12]	; (8006248 <HAL_GetTick+0x14>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000930 	.word	0x20000930

0800624c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <HAL_GetTickPrio+0x14>)
 8006252:	681b      	ldr	r3, [r3, #0]
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	2000005c 	.word	0x2000005c

08006264 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006272:	4b0e      	ldr	r3, [pc, #56]	; (80062ac <HAL_SetTickFreq+0x48>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	79fa      	ldrb	r2, [r7, #7]
 8006278:	429a      	cmp	r2, r3
 800627a:	d012      	beq.n	80062a2 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_SetTickFreq+0x48>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006282:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <HAL_SetTickFreq+0x48>)
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <HAL_SetTickFreq+0x4c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff8c 	bl	80061aa <HAL_InitTick>
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800629c:	4a03      	ldr	r2, [pc, #12]	; (80062ac <HAL_SetTickFreq+0x48>)
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000060 	.word	0x20000060
 80062b0:	2000005c 	.word	0x2000005c

080062b4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_GetTickFreq+0x14>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20000060 	.word	0x20000060

080062cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062d4:	f7ff ffae 	bl	8006234 <HAL_GetTick>
 80062d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d005      	beq.n	80062f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <HAL_Delay+0x44>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062f2:	bf00      	nop
 80062f4:	f7ff ff9e 	bl	8006234 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	429a      	cmp	r2, r3
 8006302:	d8f7      	bhi.n	80062f4 <HAL_Delay+0x28>
  {
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000060 	.word	0x20000060

08006314 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <HAL_SuspendTick+0x1c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a04      	ldr	r2, [pc, #16]	; (8006330 <HAL_SuspendTick+0x1c>)
 800631e:	f023 0302 	bic.w	r3, r3, #2
 8006322:	6013      	str	r3, [r2, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	e000e010 	.word	0xe000e010

08006334 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_ResumeTick+0x1c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a04      	ldr	r2, [pc, #16]	; (8006350 <HAL_ResumeTick+0x1c>)
 800633e:	f043 0302 	orr.w	r3, r3, #2
 8006342:	6013      	str	r3, [r2, #0]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000e010 	.word	0xe000e010

08006354 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8006358:	4b02      	ldr	r3, [pc, #8]	; (8006364 <HAL_GetHalVersion+0x10>)
}
 800635a:	4618      	mov	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	01070d00 	.word	0x01070d00

08006368 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <HAL_GetREVID+0x14>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	0c1b      	lsrs	r3, r3, #16
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	e0042000 	.word	0xe0042000

08006380 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <HAL_GetDEVID+0x18>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800638c:	4618      	mov	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	e0042000 	.word	0xe0042000

0800639c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	6053      	str	r3, [r2, #4]
}
 80063ac:	bf00      	nop
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	e0042000 	.word	0xe0042000

080063bc <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80063c6:	f023 0301 	bic.w	r3, r3, #1
 80063ca:	6053      	str	r3, [r2, #4]
}
 80063cc:	bf00      	nop
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	e0042000 	.word	0xe0042000

080063dc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80063e6:	f043 0302 	orr.w	r3, r3, #2
 80063ea:	6053      	str	r3, [r2, #4]
}
 80063ec:	bf00      	nop
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	e0042000 	.word	0xe0042000

080063fc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a04      	ldr	r2, [pc, #16]	; (8006418 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8006406:	f023 0302 	bic.w	r3, r3, #2
 800640a:	6053      	str	r3, [r2, #4]
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	e0042000 	.word	0xe0042000

0800641c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4a04      	ldr	r2, [pc, #16]	; (8006438 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8006426:	f043 0304 	orr.w	r3, r3, #4
 800642a:	6053      	str	r3, [r2, #4]
}
 800642c:	bf00      	nop
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	e0042000 	.word	0xe0042000

0800643c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a04      	ldr	r2, [pc, #16]	; (8006458 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006446:	f023 0304 	bic.w	r3, r3, #4
 800644a:	6053      	str	r3, [r2, #4]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	e0042000 	.word	0xe0042000

0800645c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <HAL_EnableCompensationCell+0x14>)
 8006462:	2201      	movs	r2, #1
 8006464:	601a      	str	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	42270400 	.word	0x42270400

08006474 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006478:	4b03      	ldr	r3, [pc, #12]	; (8006488 <HAL_DisableCompensationCell+0x14>)
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
}
 800647e:	bf00      	nop
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	42270400 	.word	0x42270400

0800648c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <HAL_GetUIDw0+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	1fff7a10 	.word	0x1fff7a10

080064a4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <HAL_GetUIDw1+0x14>)
 80064aa:	681b      	ldr	r3, [r3, #0]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	1fff7a14 	.word	0x1fff7a14

080064bc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <HAL_GetUIDw2+0x14>)
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	1fff7a18 	.word	0x1fff7a18

080064d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064e4:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <__NVIC_SetPriorityGrouping+0x44>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064f0:	4013      	ands	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006506:	4a04      	ldr	r2, [pc, #16]	; (8006518 <__NVIC_SetPriorityGrouping+0x44>)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	60d3      	str	r3, [r2, #12]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <__NVIC_GetPriorityGrouping+0x18>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	0a1b      	lsrs	r3, r3, #8
 8006526:	f003 0307 	and.w	r3, r3, #7
}
 800652a:	4618      	mov	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	e000ed00 	.word	0xe000ed00

08006538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006546:	2b00      	cmp	r3, #0
 8006548:	db0b      	blt.n	8006562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	f003 021f 	and.w	r2, r3, #31
 8006550:	4907      	ldr	r1, [pc, #28]	; (8006570 <__NVIC_EnableIRQ+0x38>)
 8006552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2001      	movs	r0, #1
 800655a:	fa00 f202 	lsl.w	r2, r0, r2
 800655e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	e000e100 	.word	0xe000e100

08006574 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	2b00      	cmp	r3, #0
 8006584:	db12      	blt.n	80065ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	f003 021f 	and.w	r2, r3, #31
 800658c:	490a      	ldr	r1, [pc, #40]	; (80065b8 <__NVIC_DisableIRQ+0x44>)
 800658e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2001      	movs	r0, #1
 8006596:	fa00 f202 	lsl.w	r2, r0, r2
 800659a:	3320      	adds	r3, #32
 800659c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80065a0:	f3bf 8f4f 	dsb	sy
}
 80065a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80065a6:	f3bf 8f6f 	isb	sy
}
 80065aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	e000e100 	.word	0xe000e100

080065bc <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	db0e      	blt.n	80065ec <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80065ce:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <__NVIC_GetPendingIRQ+0x40>)
 80065d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	3340      	adds	r3, #64	; 0x40
 80065d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	fa22 f303 	lsr.w	r3, r2, r3
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	e000      	b.n	80065ee <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80065ec:	2300      	movs	r3, #0
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	e000e100 	.word	0xe000e100

08006600 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800660a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660e:	2b00      	cmp	r3, #0
 8006610:	db0c      	blt.n	800662c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	f003 021f 	and.w	r2, r3, #31
 8006618:	4907      	ldr	r1, [pc, #28]	; (8006638 <__NVIC_SetPendingIRQ+0x38>)
 800661a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	2001      	movs	r0, #1
 8006622:	fa00 f202 	lsl.w	r2, r0, r2
 8006626:	3340      	adds	r3, #64	; 0x40
 8006628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	e000e100 	.word	0xe000e100

0800663c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	db0c      	blt.n	8006668 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	f003 021f 	and.w	r2, r3, #31
 8006654:	4907      	ldr	r1, [pc, #28]	; (8006674 <__NVIC_ClearPendingIRQ+0x38>)
 8006656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2001      	movs	r0, #1
 800665e:	fa00 f202 	lsl.w	r2, r0, r2
 8006662:	3360      	adds	r3, #96	; 0x60
 8006664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	e000e100 	.word	0xe000e100

08006678 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006686:	2b00      	cmp	r3, #0
 8006688:	db0e      	blt.n	80066a8 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800668a:	4a0b      	ldr	r2, [pc, #44]	; (80066b8 <__NVIC_GetActive+0x40>)
 800668c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	3380      	adds	r3, #128	; 0x80
 8006694:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	e000      	b.n	80066aa <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80066a8:	2300      	movs	r3, #0
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	e000e100 	.word	0xe000e100

080066bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	6039      	str	r1, [r7, #0]
 80066c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db0a      	blt.n	80066e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	490c      	ldr	r1, [pc, #48]	; (8006708 <__NVIC_SetPriority+0x4c>)
 80066d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066da:	0112      	lsls	r2, r2, #4
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	440b      	add	r3, r1
 80066e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066e4:	e00a      	b.n	80066fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	4908      	ldr	r1, [pc, #32]	; (800670c <__NVIC_SetPriority+0x50>)
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	3b04      	subs	r3, #4
 80066f4:	0112      	lsls	r2, r2, #4
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	440b      	add	r3, r1
 80066fa:	761a      	strb	r2, [r3, #24]
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	e000e100 	.word	0xe000e100
 800670c:	e000ed00 	.word	0xe000ed00

08006710 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 800671a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	db09      	blt.n	8006736 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8006722:	4a0d      	ldr	r2, [pc, #52]	; (8006758 <__NVIC_GetPriority+0x48>)
 8006724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006728:	4413      	add	r3, r2
 800672a:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800672e:	b2db      	uxtb	r3, r3
 8006730:	091b      	lsrs	r3, r3, #4
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e009      	b.n	800674a <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8006736:	4a09      	ldr	r2, [pc, #36]	; (800675c <__NVIC_GetPriority+0x4c>)
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	3b04      	subs	r3, #4
 8006740:	4413      	add	r3, r2
 8006742:	7e1b      	ldrb	r3, [r3, #24]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	b2db      	uxtb	r3, r3
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	e000e100 	.word	0xe000e100
 800675c:	e000ed00 	.word	0xe000ed00

08006760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006760:	b480      	push	{r7}
 8006762:	b089      	sub	sp, #36	; 0x24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f1c3 0307 	rsb	r3, r3, #7
 800677a:	2b04      	cmp	r3, #4
 800677c:	bf28      	it	cs
 800677e:	2304      	movcs	r3, #4
 8006780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	3304      	adds	r3, #4
 8006786:	2b06      	cmp	r3, #6
 8006788:	d902      	bls.n	8006790 <NVIC_EncodePriority+0x30>
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3b03      	subs	r3, #3
 800678e:	e000      	b.n	8006792 <NVIC_EncodePriority+0x32>
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43da      	mvns	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	401a      	ands	r2, r3
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067a8:	f04f 31ff 	mov.w	r1, #4294967295
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	fa01 f303 	lsl.w	r3, r1, r3
 80067b2:	43d9      	mvns	r1, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067b8:	4313      	orrs	r3, r2
         );
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b089      	sub	sp, #36	; 0x24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f1c3 0307 	rsb	r3, r3, #7
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	bf28      	it	cs
 80067e6:	2304      	movcs	r3, #4
 80067e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3304      	adds	r3, #4
 80067ee:	2b06      	cmp	r3, #6
 80067f0:	d902      	bls.n	80067f8 <NVIC_DecodePriority+0x32>
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3b03      	subs	r3, #3
 80067f6:	e000      	b.n	80067fa <NVIC_DecodePriority+0x34>
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	40da      	lsrs	r2, r3
 8006802:	f04f 31ff 	mov.w	r1, #4294967295
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	43db      	mvns	r3, r3
 800680e:	401a      	ands	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8006814:	f04f 32ff 	mov.w	r2, #4294967295
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43da      	mvns	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	401a      	ands	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	601a      	str	r2, [r3, #0]
}
 8006828:	bf00      	nop
 800682a:	3724      	adds	r7, #36	; 0x24
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006838:	f3bf 8f4f 	dsb	sy
}
 800683c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <__NVIC_SystemReset+0x24>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006846:	4904      	ldr	r1, [pc, #16]	; (8006858 <__NVIC_SystemReset+0x24>)
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <__NVIC_SystemReset+0x28>)
 800684a:	4313      	orrs	r3, r2
 800684c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800684e:	f3bf 8f4f 	dsb	sy
}
 8006852:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006854:	bf00      	nop
 8006856:	e7fd      	b.n	8006854 <__NVIC_SystemReset+0x20>
 8006858:	e000ed00 	.word	0xe000ed00
 800685c:	05fa0004 	.word	0x05fa0004

08006860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3b01      	subs	r3, #1
 800686c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006870:	d301      	bcc.n	8006876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006872:	2301      	movs	r3, #1
 8006874:	e00f      	b.n	8006896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006876:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <SysTick_Config+0x40>)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3b01      	subs	r3, #1
 800687c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800687e:	210f      	movs	r1, #15
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	f7ff ff1a 	bl	80066bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <SysTick_Config+0x40>)
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <SysTick_Config+0x40>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	e000e010 	.word	0xe000e010

080068a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fe11 	bl	80064d4 <__NVIC_SetPriorityGrouping>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	4603      	mov	r3, r0
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068cc:	f7ff fe26 	bl	800651c <__NVIC_GetPriorityGrouping>
 80068d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	6978      	ldr	r0, [r7, #20]
 80068d8:	f7ff ff42 	bl	8006760 <NVIC_EncodePriority>
 80068dc:	4602      	mov	r2, r0
 80068de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fee9 	bl	80066bc <__NVIC_SetPriority>
}
 80068ea:	bf00      	nop
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	4603      	mov	r3, r0
 80068fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff fe19 	bl	8006538 <__NVIC_EnableIRQ>
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	4603      	mov	r3, r0
 8006916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fe29 	bl	8006574 <__NVIC_DisableIRQ>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800692e:	f7ff ff81 	bl	8006834 <__NVIC_SystemReset>

08006932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff ff90 	bl	8006860 <SysTick_Config>
 8006940:	4603      	mov	r3, r0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800694a:	b480      	push	{r7}
 800694c:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800694e:	f3bf 8f5f 	dmb	sy
}
 8006952:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_MPU_Disable+0x26>)
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	4a05      	ldr	r2, [pc, #20]	; (8006970 <HAL_MPU_Disable+0x26>)
 800695a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695e:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <HAL_MPU_Disable+0x2a>)
 8006962:	2200      	movs	r2, #0
 8006964:	605a      	str	r2, [r3, #4]
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	e000ed90 	.word	0xe000ed90

08006978 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006980:	4a0b      	ldr	r2, [pc, #44]	; (80069b0 <HAL_MPU_Enable+0x38>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_MPU_Enable+0x3c>)
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <HAL_MPU_Enable+0x3c>)
 8006990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006994:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006996:	f3bf 8f4f 	dsb	sy
}
 800699a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800699c:	f3bf 8f6f 	isb	sy
}
 80069a0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000ed90 	.word	0xe000ed90
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	785a      	ldrb	r2, [r3, #1]
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <HAL_MPU_ConfigRegion+0x84>)
 80069c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d029      	beq.n	8006a24 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80069d0:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <HAL_MPU_ConfigRegion+0x84>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7b1b      	ldrb	r3, [r3, #12]
 80069dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7adb      	ldrb	r3, [r3, #11]
 80069e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7a9b      	ldrb	r3, [r3, #10]
 80069ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80069ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	7b5b      	ldrb	r3, [r3, #13]
 80069f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80069f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7b9b      	ldrb	r3, [r3, #14]
 80069fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80069fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7bdb      	ldrb	r3, [r3, #15]
 8006a02:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006a04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7a5b      	ldrb	r3, [r3, #9]
 8006a0a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7a1b      	ldrb	r3, [r3, #8]
 8006a12:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a14:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	7812      	ldrb	r2, [r2, #0]
 8006a1a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a1c:	4a07      	ldr	r2, [pc, #28]	; (8006a3c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a1e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a20:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8006a22:	e005      	b.n	8006a30 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <HAL_MPU_ConfigRegion+0x84>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8006a2a:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <HAL_MPU_ConfigRegion+0x84>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	611a      	str	r2, [r3, #16]
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000ed90 	.word	0xe000ed90

08006a40 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8006a44:	f7ff fd6a 	bl	800651c <__NVIC_GetPriorityGrouping>
 8006a48:	4603      	mov	r3, r0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8006a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fe54 	bl	8006710 <__NVIC_GetPriority>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	f7ff feaa 	bl	80067c6 <NVIC_DecodePriority>
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	4603      	mov	r3, r0
 8006a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8006a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fdb9 	bl	8006600 <__NVIC_SetPendingIRQ>
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8006aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fd89 	bl	80065bc <__NVIC_GetPendingIRQ>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff fdba 	bl	800663c <__NVIC_ClearPendingIRQ>
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8006ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fdca 	bl	8006678 <__NVIC_GetActive>
 8006ae4:	4603      	mov	r3, r0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d106      	bne.n	8006b0a <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006b02:	f043 0304 	orr.w	r3, r3, #4
 8006b06:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8006b08:	e005      	b.n	8006b16 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006b10:	f023 0304 	bic.w	r3, r3, #4
 8006b14:	6013      	str	r3, [r2, #0]
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	e000e010 	.word	0xe000e010

08006b28 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006b2c:	f000 f802 	bl	8006b34 <HAL_SYSTICK_Callback>
}
 8006b30:	bf00      	nop
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e014      	b.n	8006b7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	791b      	ldrb	r3, [r3, #4]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d105      	bne.n	8006b6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fe fc7f 	bl	8005468 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e00f      	b.n	8006bb8 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fe fca6 	bl	80054f0 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	795b      	ldrb	r3, [r3, #5]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_DAC_Start+0x16>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e040      	b.n	8006c58 <HAL_DAC_Start+0x98>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6819      	ldr	r1, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2201      	movs	r2, #1
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10f      	bne.n	8006c20 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006c0a:	2b3c      	cmp	r3, #60	; 0x3c
 8006c0c:	d11d      	bne.n	8006c4a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0201 	orr.w	r2, r2, #1
 8006c1c:	605a      	str	r2, [r3, #4]
 8006c1e:	e014      	b.n	8006c4a <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	213c      	movs	r1, #60	; 0x3c
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d107      	bne.n	8006c4a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0202 	orr.w	r2, r2, #2
 8006c48:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	43da      	mvns	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	400a      	ands	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	795b      	ldrb	r3, [r3, #5]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_DAC_Start_DMA+0x22>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e0ab      	b.n	8006e18 <HAL_DAC_Start_DMA+0x17a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d12f      	bne.n	8006d32 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	4a52      	ldr	r2, [pc, #328]	; (8006e20 <HAL_DAC_Start_DMA+0x182>)
 8006cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	4a51      	ldr	r2, [pc, #324]	; (8006e24 <HAL_DAC_Start_DMA+0x186>)
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	4a50      	ldr	r2, [pc, #320]	; (8006e28 <HAL_DAC_Start_DMA+0x18a>)
 8006ce8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cf8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d013      	beq.n	8006d28 <HAL_DAC_Start_DMA+0x8a>
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d845      	bhi.n	8006d92 <HAL_DAC_Start_DMA+0xf4>
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_DAC_Start_DMA+0x76>
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d005      	beq.n	8006d1e <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8006d12:	e03e      	b.n	8006d92 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	613b      	str	r3, [r7, #16]
        break;
 8006d1c:	e03c      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	613b      	str	r3, [r7, #16]
        break;
 8006d26:	e037      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3310      	adds	r3, #16
 8006d2e:	613b      	str	r3, [r7, #16]
        break;
 8006d30:	e032      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	4a3d      	ldr	r2, [pc, #244]	; (8006e2c <HAL_DAC_Start_DMA+0x18e>)
 8006d38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	4a3c      	ldr	r2, [pc, #240]	; (8006e30 <HAL_DAC_Start_DMA+0x192>)
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	4a3b      	ldr	r2, [pc, #236]	; (8006e34 <HAL_DAC_Start_DMA+0x196>)
 8006d48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d013      	beq.n	8006d88 <HAL_DAC_Start_DMA+0xea>
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d817      	bhi.n	8006d96 <HAL_DAC_Start_DMA+0xf8>
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_DAC_Start_DMA+0xd6>
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d005      	beq.n	8006d7e <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8006d72:	e010      	b.n	8006d96 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3314      	adds	r3, #20
 8006d7a:	613b      	str	r3, [r7, #16]
        break;
 8006d7c:	e00c      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3318      	adds	r3, #24
 8006d84:	613b      	str	r3, [r7, #16]
        break;
 8006d86:	e007      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	331c      	adds	r3, #28
 8006d8e:	613b      	str	r3, [r7, #16]
        break;
 8006d90:	e002      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
        break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <HAL_DAC_Start_DMA+0xfa>
        break;
 8006d96:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d111      	bne.n	8006dc2 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6898      	ldr	r0, [r3, #8]
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	f000 fca5 	bl	8007706 <HAL_DMA_Start_IT>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	75fb      	strb	r3, [r7, #23]
 8006dc0:	e010      	b.n	8006de4 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68d8      	ldr	r0, [r3, #12]
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	f000 fc93 	bl	8007706 <HAL_DMA_Start_IT>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10c      	bne.n	8006e0a <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6819      	ldr	r1, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e005      	b.n	8006e16 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f043 0204 	orr.w	r2, r3, #4
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	0800711b 	.word	0x0800711b
 8006e24:	0800713d 	.word	0x0800713d
 8006e28:	08007159 	.word	0x08007159
 8006e2c:	0800740d 	.word	0x0800740d
 8006e30:	0800742f 	.word	0x0800742f
 8006e34:	0800744b 	.word	0x0800744b

08006e38 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6819      	ldr	r1, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43da      	mvns	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6819      	ldr	r1, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	43da      	mvns	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	400a      	ands	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10d      	bne.n	8006e9e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fc95 	bl	80077b6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e00c      	b.n	8006eb8 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fc87 	bl	80077b6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006eb6:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ede:	d120      	bne.n	8006f22 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eee:	d118      	bne.n	8006f22 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f043 0201 	orr.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f1a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f870 	bl	8007002 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f30:	d120      	bne.n	8006f74 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f40:	d118      	bne.n	8006f74 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2204      	movs	r2, #4
 8006f46:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f043 0202 	orr.w	r2, r3, #2
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f6c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa28 	bl	80073c4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8006f74:	bf00      	nop
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e004      	b.n	8006fb0 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	3314      	adds	r3, #20
 8006fae:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e003      	b.n	800703c <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800704a:	b480      	push	{r7}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	795b      	ldrb	r3, [r3, #5]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_DAC_ConfigChannel+0x18>
 800705e:	2302      	movs	r3, #2
 8007060:	e03c      	b.n	80070dc <HAL_DAC_ConfigChannel+0x92>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2202      	movs	r2, #2
 800706c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	43db      	mvns	r3, r3
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4013      	ands	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6819      	ldr	r1, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	22c0      	movs	r2, #192	; 0xc0
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43da      	mvns	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	400a      	ands	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	791b      	ldrb	r3, [r3, #4]
 80070f4:	b2db      	uxtb	r3, r3
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff ff4c 	bl	8006fc6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	711a      	strb	r2, [r3, #4]
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff ff45 	bl	8006fda <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f043 0204 	orr.w	r2, r3, #4
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff ff3b 	bl	8006fee <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	711a      	strb	r2, [r3, #4]
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_DACEx_DualStart+0x18>
 800719a:	2302      	movs	r3, #2
 800719c:	e03b      	b.n	8007216 <HAL_DACEx_DualStart+0x90>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071c8:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80071d4:	2b3c      	cmp	r3, #60	; 0x3c
 80071d6:	d103      	bne.n	80071e0 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80071ea:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80071ee:	d103      	bne.n	80071f8 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f043 0302 	orr.w	r3, r3, #2
 80071f6:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007248:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	795b      	ldrb	r3, [r3, #5]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8007272:	2302      	movs	r3, #2
 8007274:	e024      	b.n	80072c0 <HAL_DACEx_TriangleWaveGenerate+0x62>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2202      	movs	r2, #2
 8007280:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007292:	fa01 f303 	lsl.w	r3, r1, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	ea02 0103 	and.w	r1, r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	409a      	lsls	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	795b      	ldrb	r3, [r3, #5]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_DACEx_NoiseWaveGenerate+0x18>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e024      	b.n	800732e <HAL_DACEx_NoiseWaveGenerate+0x62>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2202      	movs	r2, #2
 80072ee:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	43db      	mvns	r3, r3
 8007306:	ea02 0103 	and.w	r1, r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0310 	and.w	r3, r3, #16
 8007316:	409a      	lsls	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b08      	cmp	r3, #8
 800734c:	d105      	bne.n	800735a <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	021b      	lsls	r3, r3, #8
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e004      	b.n	8007364 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4413      	add	r3, r2
 8007370:	3320      	adds	r3, #32
 8007372:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	041b      	lsls	r3, r3, #16
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f7ff ffb4 	bl	8007388 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2201      	movs	r2, #1
 8007424:	711a      	strb	r2, [r3, #4]
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff ffad 	bl	800739c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f043 0204 	orr.w	r2, r3, #4
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff ffa3 	bl	80073b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	711a      	strb	r2, [r3, #4]
}
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007484:	f7fe fed6 	bl	8006234 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e099      	b.n	80075c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074b4:	e00f      	b.n	80074d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074b6:	f7fe febd 	bl	8006234 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	d908      	bls.n	80074d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2203      	movs	r2, #3
 80074ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e078      	b.n	80075c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e8      	bne.n	80074b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4b38      	ldr	r3, [pc, #224]	; (80075d0 <HAL_DMA_Init+0x158>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800750e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800751a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b04      	cmp	r3, #4
 800752e:	d107      	bne.n	8007540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	4313      	orrs	r3, r2
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f023 0307 	bic.w	r3, r3, #7
 8007556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b04      	cmp	r3, #4
 8007568:	d117      	bne.n	800759a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00e      	beq.n	800759a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fd4d 	bl	800801c <DMA_CheckFifoParam>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d008      	beq.n	800759a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2240      	movs	r2, #64	; 0x40
 800758c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007596:	2301      	movs	r3, #1
 8007598:	e016      	b.n	80075c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fd05 	bl	8007fb2 <DMA_CalcBaseAndBitshift>
 80075a8:	4603      	mov	r3, r0
 80075aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b0:	223f      	movs	r2, #63	; 0x3f
 80075b2:	409a      	lsls	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	f010803f 	.word	0xf010803f

080075d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e050      	b.n	8007688 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d101      	bne.n	80075f6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80075f2:	2302      	movs	r3, #2
 80075f4:	e048      	b.n	8007688 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2221      	movs	r2, #33	; 0x21
 8007634:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fcbb 	bl	8007fb2 <DMA_CalcBaseAndBitshift>
 800763c:	4603      	mov	r3, r0
 800763e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007668:	223f      	movs	r2, #63	; 0x3f
 800766a:	409a      	lsls	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <HAL_DMA_Start+0x20>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e026      	b.n	80076fe <HAL_DMA_Start+0x6e>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d115      	bne.n	80076f0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fc3c 	bl	8007f56 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e005      	b.n	80076fc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
 80076fa:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b086      	sub	sp, #24
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_DMA_Start_IT+0x26>
 8007728:	2302      	movs	r3, #2
 800772a:	e040      	b.n	80077ae <HAL_DMA_Start_IT+0xa8>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d12f      	bne.n	80077a0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fbfe 	bl	8007f56 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775e:	223f      	movs	r2, #63	; 0x3f
 8007760:	409a      	lsls	r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0216 	orr.w	r2, r2, #22
 8007774:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0208 	orr.w	r2, r2, #8
 800778c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e005      	b.n	80077ac <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80077a8:	2302      	movs	r3, #2
 80077aa:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077c4:	f7fe fd36 	bl	8006234 <HAL_GetTick>
 80077c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d008      	beq.n	80077e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2280      	movs	r2, #128	; 0x80
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e052      	b.n	800788e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0216 	bic.w	r2, r2, #22
 80077f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695a      	ldr	r2, [r3, #20]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007806:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <HAL_DMA_Abort+0x62>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0208 	bic.w	r2, r2, #8
 8007826:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007838:	e013      	b.n	8007862 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800783a:	f7fe fcfb 	bl	8006234 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	2b05      	cmp	r3, #5
 8007846:	d90c      	bls.n	8007862 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2203      	movs	r2, #3
 8007852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e015      	b.n	800788e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e4      	bne.n	800783a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	223f      	movs	r2, #63	; 0x3f
 8007876:	409a      	lsls	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d004      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2280      	movs	r2, #128	; 0x80
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e00c      	b.n	80078ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2205      	movs	r2, #5
 80078b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0201 	bic.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b08a      	sub	sp, #40	; 0x28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	460b      	mov	r3, r1
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80078e8:	2300      	movs	r3, #0
 80078ea:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80078ec:	f7fe fca2 	bl	8006234 <HAL_GetTick>
 80078f0:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d008      	beq.n	8007910 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2280      	movs	r2, #128	; 0x80
 8007902:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e0bf      	b.n	8007a90 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d005      	beq.n	800792a <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e0b2      	b.n	8007a90 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007934:	2220      	movs	r2, #32
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
 800793c:	e005      	b.n	800794a <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007942:	2210      	movs	r2, #16
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007956:	e05a      	b.n	8007a0e <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d017      	beq.n	8007990 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_DMA_PollForTransfer+0x9c>
 8007966:	f7fe fc65 	bl	8006234 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d20c      	bcs.n	8007990 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2220      	movs	r2, #32
 800797a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e07f      	b.n	8007a90 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800799a:	2208      	movs	r2, #8
 800799c:	409a      	lsls	r2, r3
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00b      	beq.n	80079be <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	f043 0201 	orr.w	r2, r3, #1
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b6:	2208      	movs	r2, #8
 80079b8:	409a      	lsls	r2, r3
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c2:	2201      	movs	r2, #1
 80079c4:	409a      	lsls	r2, r3
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00b      	beq.n	80079e6 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f043 0202 	orr.w	r2, r3, #2
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079de:	2201      	movs	r2, #1
 80079e0:	409a      	lsls	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ea:	2204      	movs	r2, #4
 80079ec:	409a      	lsls	r2, r3
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00b      	beq.n	8007a0e <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	f043 0204 	orr.w	r2, r3, #4
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a06:	2204      	movs	r2, #4
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007a0e:	6a3a      	ldr	r2, [r7, #32]
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <HAL_DMA_PollForTransfer+0x14a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d099      	beq.n	8007958 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d018      	beq.n	8007a5e <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d012      	beq.n	8007a5e <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff febc 	bl	80077b6 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a42:	2230      	movs	r2, #48	; 0x30
 8007a44:	409a      	lsls	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e018      	b.n	8007a90 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10e      	bne.n	8007a82 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a68:	2230      	movs	r2, #48	; 0x30
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007a80:	e005      	b.n	8007a8e <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a86:	2210      	movs	r2, #16
 8007a88:	409a      	lsls	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8007a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3728      	adds	r7, #40	; 0x28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007aa4:	4b8e      	ldr	r3, [pc, #568]	; (8007ce0 <HAL_DMA_IRQHandler+0x248>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a8e      	ldr	r2, [pc, #568]	; (8007ce4 <HAL_DMA_IRQHandler+0x24c>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	0a9b      	lsrs	r3, r3, #10
 8007ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d01a      	beq.n	8007b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d013      	beq.n	8007b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0204 	bic.w	r2, r2, #4
 8007aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af0:	2208      	movs	r2, #8
 8007af2:	409a      	lsls	r2, r3
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afc:	f043 0201 	orr.w	r2, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b08:	2201      	movs	r2, #1
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00b      	beq.n	8007b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b26:	2201      	movs	r2, #1
 8007b28:	409a      	lsls	r2, r3
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f043 0202 	orr.w	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3e:	2204      	movs	r2, #4
 8007b40:	409a      	lsls	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4013      	ands	r3, r2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d012      	beq.n	8007b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5c:	2204      	movs	r2, #4
 8007b5e:	409a      	lsls	r2, r3
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b68:	f043 0204 	orr.w	r2, r3, #4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b74:	2210      	movs	r2, #16
 8007b76:	409a      	lsls	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d043      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03c      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b92:	2210      	movs	r2, #16
 8007b94:	409a      	lsls	r2, r3
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d108      	bne.n	8007bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d024      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
 8007bc6:	e01f      	b.n	8007c08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01b      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
 8007bd8:	e016      	b.n	8007c08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d107      	bne.n	8007bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0208 	bic.w	r2, r2, #8
 8007bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 808f 	beq.w	8007d38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8087 	beq.w	8007d38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2e:	2220      	movs	r2, #32
 8007c30:	409a      	lsls	r2, r3
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d136      	bne.n	8007cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0216 	bic.w	r2, r2, #22
 8007c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <HAL_DMA_IRQHandler+0x1da>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0208 	bic.w	r2, r2, #8
 8007c80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c86:	223f      	movs	r2, #63	; 0x3f
 8007c88:	409a      	lsls	r2, r3
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d07e      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
        }
        return;
 8007cae:	e079      	b.n	8007da4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01d      	beq.n	8007cfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10d      	bne.n	8007ce8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d031      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
 8007cdc:	e02c      	b.n	8007d38 <HAL_DMA_IRQHandler+0x2a0>
 8007cde:	bf00      	nop
 8007ce0:	20000058 	.word	0x20000058
 8007ce4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d023      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	4798      	blx	r3
 8007cf8:	e01e      	b.n	8007d38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10f      	bne.n	8007d28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0210 	bic.w	r2, r2, #16
 8007d16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d032      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d022      	beq.n	8007d92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2205      	movs	r2, #5
 8007d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d307      	bcc.n	8007d80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f2      	bne.n	8007d64 <HAL_DMA_IRQHandler+0x2cc>
 8007d7e:	e000      	b.n	8007d82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007d80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
 8007da2:	e000      	b.n	8007da6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007da4:	bf00      	nop
    }
  }
}
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	460b      	mov	r3, r1
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_DMA_RegisterCallback+0x20>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e03c      	b.n	8007e46 <HAL_DMA_RegisterCallback+0x9a>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d129      	bne.n	8007e34 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	d829      	bhi.n	8007e3a <HAL_DMA_RegisterCallback+0x8e>
 8007de6:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <HAL_DMA_RegisterCallback+0x40>)
 8007de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007e0d 	.word	0x08007e0d
 8007df4:	08007e15 	.word	0x08007e15
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e25 	.word	0x08007e25
 8007e00:	08007e2d 	.word	0x08007e2d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8007e0a:	e017      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007e12:	e013      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8007e1a:	e00f      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8007e22:	e00b      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8007e2a:	e007      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007e32:	e003      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
 8007e38:	e000      	b.n	8007e3c <HAL_DMA_RegisterCallback+0x90>
      break;
 8007e3a:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_DMA_UnRegisterCallback+0x1e>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e052      	b.n	8007f16 <HAL_DMA_UnRegisterCallback+0xc4>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d141      	bne.n	8007f08 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	2b06      	cmp	r3, #6
 8007e88:	d83b      	bhi.n	8007f02 <HAL_DMA_UnRegisterCallback+0xb0>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <HAL_DMA_UnRegisterCallback+0x3e>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007ead 	.word	0x08007ead
 8007e94:	08007eb5 	.word	0x08007eb5
 8007e98:	08007ebd 	.word	0x08007ebd
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	08007ed5 	.word	0x08007ed5
 8007ea8:	08007edd 	.word	0x08007edd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8007eb2:	e02b      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007eba:	e027      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8007ec2:	e023      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8007eca:	e01f      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8007ed2:	e01b      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8007eda:	e017      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8007f00:	e004      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	73fb      	strb	r3, [r7, #15]
      break;
 8007f06:	e001      	b.n	8007f0c <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f30:	b2db      	uxtb	r3, r3
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f72:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d108      	bne.n	8007f96 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007f94:	e007      	b.n	8007fa6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	60da      	str	r2, [r3, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	3b10      	subs	r3, #16
 8007fc2:	4a14      	ldr	r2, [pc, #80]	; (8008014 <DMA_CalcBaseAndBitshift+0x62>)
 8007fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc8:	091b      	lsrs	r3, r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007fcc:	4a12      	ldr	r2, [pc, #72]	; (8008018 <DMA_CalcBaseAndBitshift+0x66>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d909      	bls.n	8007ff4 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007fe8:	f023 0303 	bic.w	r3, r3, #3
 8007fec:	1d1a      	adds	r2, r3, #4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	659a      	str	r2, [r3, #88]	; 0x58
 8007ff2:	e007      	b.n	8008004 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ffc:	f023 0303 	bic.w	r3, r3, #3
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	aaaaaaab 	.word	0xaaaaaaab
 8008018:	08051934 	.word	0x08051934

0800801c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d11f      	bne.n	8008076 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d856      	bhi.n	80080ea <DMA_CheckFifoParam+0xce>
 800803c:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <DMA_CheckFifoParam+0x28>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008055 	.word	0x08008055
 8008048:	08008067 	.word	0x08008067
 800804c:	08008055 	.word	0x08008055
 8008050:	080080eb 	.word	0x080080eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d046      	beq.n	80080ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008064:	e043      	b.n	80080ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800806e:	d140      	bne.n	80080f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008074:	e03d      	b.n	80080f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800807e:	d121      	bne.n	80080c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b03      	cmp	r3, #3
 8008084:	d837      	bhi.n	80080f6 <DMA_CheckFifoParam+0xda>
 8008086:	a201      	add	r2, pc, #4	; (adr r2, 800808c <DMA_CheckFifoParam+0x70>)
 8008088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808c:	0800809d 	.word	0x0800809d
 8008090:	080080a3 	.word	0x080080a3
 8008094:	0800809d 	.word	0x0800809d
 8008098:	080080b5 	.word	0x080080b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e030      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d025      	beq.n	80080fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080b2:	e022      	b.n	80080fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080bc:	d11f      	bne.n	80080fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80080c2:	e01c      	b.n	80080fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d903      	bls.n	80080d2 <DMA_CheckFifoParam+0xb6>
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d003      	beq.n	80080d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80080d0:	e018      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	73fb      	strb	r3, [r7, #15]
      break;
 80080d6:	e015      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00e      	beq.n	8008102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	e00b      	b.n	8008102 <DMA_CheckFifoParam+0xe6>
      break;
 80080ea:	bf00      	nop
 80080ec:	e00a      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      break;
 80080ee:	bf00      	nop
 80080f0:	e008      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      break;
 80080f2:	bf00      	nop
 80080f4:	e006      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      break;
 80080f6:	bf00      	nop
 80080f8:	e004      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      break;
 80080fa:	bf00      	nop
 80080fc:	e002      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      break;   
 80080fe:	bf00      	nop
 8008100:	e000      	b.n	8008104 <DMA_CheckFifoParam+0xe8>
      break;
 8008102:	bf00      	nop
    }
  } 
  
  return status; 
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b80      	cmp	r3, #128	; 0x80
 800812a:	d106      	bne.n	800813a <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008132:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	75fb      	strb	r3, [r7, #23]
 8008138:	e031      	b.n	800819e <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_DMAEx_MultiBufferStart+0x36>
 8008144:	2302      	movs	r3, #2
 8008146:	e02b      	b.n	80081a0 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	d11e      	bne.n	800819a <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008172:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f001 f972 	bl	800946c <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e001      	b.n	800819e <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 800819a:	2302      	movs	r3, #2
 800819c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b80      	cmp	r3, #128	; 0x80
 80081c0:	d106      	bne.n	80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f001 b911 	b.w	80093f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f001 b8ff 	b.w	80093f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d102      	bne.n	8008204 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80081fe:	2302      	movs	r3, #2
 8008200:	f001 b8f7 	b.w	80093f2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	f041 80e5 	bne.w	80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2202      	movs	r2, #2
 800821e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008236:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f001 f910 	bl	800946c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	4b8d      	ldr	r3, [pc, #564]	; (8008488 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008254:	429a      	cmp	r2, r3
 8008256:	d960      	bls.n	800831a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a8b      	ldr	r2, [pc, #556]	; (800848c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d057      	beq.n	8008312 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a8a      	ldr	r2, [pc, #552]	; (8008490 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d050      	beq.n	800830e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a88      	ldr	r2, [pc, #544]	; (8008494 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d049      	beq.n	800830a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a87      	ldr	r2, [pc, #540]	; (8008498 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d042      	beq.n	8008306 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a85      	ldr	r2, [pc, #532]	; (800849c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d03a      	beq.n	8008300 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a84      	ldr	r2, [pc, #528]	; (80084a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d032      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a82      	ldr	r2, [pc, #520]	; (80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d02a      	beq.n	80082f4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a81      	ldr	r2, [pc, #516]	; (80084a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d022      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a7f      	ldr	r2, [pc, #508]	; (80084ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d01a      	beq.n	80082e8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a7e      	ldr	r2, [pc, #504]	; (80084b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d012      	beq.n	80082e2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a7c      	ldr	r2, [pc, #496]	; (80084b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00a      	beq.n	80082dc <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a7b      	ldr	r2, [pc, #492]	; (80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d102      	bne.n	80082d6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80082d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082d4:	e01e      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082da:	e01b      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082e0:	e018      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082e6:	e015      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80082ec:	e012      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082f2:	e00f      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082f8:	e00c      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80082fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082fe:	e009      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008304:	e006      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008306:	2320      	movs	r3, #32
 8008308:	e004      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800830a:	2320      	movs	r3, #32
 800830c:	e002      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800830e:	2320      	movs	r3, #32
 8008310:	e000      	b.n	8008314 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008312:	2320      	movs	r3, #32
 8008314:	4a69      	ldr	r2, [pc, #420]	; (80084bc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8008316:	60d3      	str	r3, [r2, #12]
 8008318:	e14f      	b.n	80085ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	4b67      	ldr	r3, [pc, #412]	; (80084c0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8008322:	429a      	cmp	r2, r3
 8008324:	d960      	bls.n	80083e8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a58      	ldr	r2, [pc, #352]	; (800848c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d057      	beq.n	80083e0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a56      	ldr	r2, [pc, #344]	; (8008490 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d050      	beq.n	80083dc <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a55      	ldr	r2, [pc, #340]	; (8008494 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d049      	beq.n	80083d8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a53      	ldr	r2, [pc, #332]	; (8008498 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d042      	beq.n	80083d4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a52      	ldr	r2, [pc, #328]	; (800849c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d03a      	beq.n	80083ce <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a50      	ldr	r2, [pc, #320]	; (80084a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d032      	beq.n	80083c8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a4f      	ldr	r2, [pc, #316]	; (80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d02a      	beq.n	80083c2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a4d      	ldr	r2, [pc, #308]	; (80084a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d022      	beq.n	80083bc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a4c      	ldr	r2, [pc, #304]	; (80084ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d01a      	beq.n	80083b6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a4a      	ldr	r2, [pc, #296]	; (80084b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d012      	beq.n	80083b0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a49      	ldr	r2, [pc, #292]	; (80084b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00a      	beq.n	80083aa <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a47      	ldr	r2, [pc, #284]	; (80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d102      	bne.n	80083a4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800839e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083a2:	e01e      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083a8:	e01b      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083ae:	e018      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083b4:	e015      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083ba:	e012      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083c0:	e00f      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083c6:	e00c      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083cc:	e009      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083d2:	e006      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083d4:	2320      	movs	r3, #32
 80083d6:	e004      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083d8:	2320      	movs	r3, #32
 80083da:	e002      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083dc:	2320      	movs	r3, #32
 80083de:	e000      	b.n	80083e2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80083e0:	2320      	movs	r3, #32
 80083e2:	4a36      	ldr	r2, [pc, #216]	; (80084bc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80083e4:	6093      	str	r3, [r2, #8]
 80083e6:	e0e8      	b.n	80085ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80083f0:	429a      	cmp	r2, r3
 80083f2:	f240 8082 	bls.w	80084fa <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a24      	ldr	r2, [pc, #144]	; (800848c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d078      	beq.n	80084f2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a22      	ldr	r2, [pc, #136]	; (8008490 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d071      	beq.n	80084ee <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a21      	ldr	r2, [pc, #132]	; (8008494 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d06a      	beq.n	80084ea <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d063      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1e      	ldr	r2, [pc, #120]	; (800849c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d05b      	beq.n	80084e0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d053      	beq.n	80084da <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d04b      	beq.n	80084d4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d043      	beq.n	80084ce <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a18      	ldr	r2, [pc, #96]	; (80084ac <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d03b      	beq.n	80084c8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d012      	beq.n	8008480 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a15      	ldr	r2, [pc, #84]	; (80084b4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00a      	beq.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a13      	ldr	r2, [pc, #76]	; (80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d102      	bne.n	8008474 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800846e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008472:	e03f      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008478:	e03c      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800847a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800847e:	e039      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008480:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008484:	e036      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008486:	bf00      	nop
 8008488:	40026458 	.word	0x40026458
 800848c:	40026010 	.word	0x40026010
 8008490:	40026410 	.word	0x40026410
 8008494:	40026070 	.word	0x40026070
 8008498:	40026470 	.word	0x40026470
 800849c:	40026028 	.word	0x40026028
 80084a0:	40026428 	.word	0x40026428
 80084a4:	40026088 	.word	0x40026088
 80084a8:	40026488 	.word	0x40026488
 80084ac:	40026040 	.word	0x40026040
 80084b0:	40026440 	.word	0x40026440
 80084b4:	400260a0 	.word	0x400260a0
 80084b8:	400264a0 	.word	0x400264a0
 80084bc:	40026400 	.word	0x40026400
 80084c0:	400260b8 	.word	0x400260b8
 80084c4:	40026058 	.word	0x40026058
 80084c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084cc:	e012      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084d2:	e00f      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084d8:	e00c      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084de:	e009      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084e4:	e006      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084e6:	2320      	movs	r3, #32
 80084e8:	e004      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084ea:	2320      	movs	r3, #32
 80084ec:	e002      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084ee:	2320      	movs	r3, #32
 80084f0:	e000      	b.n	80084f4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80084f2:	2320      	movs	r3, #32
 80084f4:	4a8c      	ldr	r2, [pc, #560]	; (8008728 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80084f6:	60d3      	str	r3, [r2, #12]
 80084f8:	e05f      	b.n	80085ba <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a8b      	ldr	r2, [pc, #556]	; (800872c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d057      	beq.n	80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a89      	ldr	r2, [pc, #548]	; (8008730 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d050      	beq.n	80085b0 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a88      	ldr	r2, [pc, #544]	; (8008734 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d049      	beq.n	80085ac <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a86      	ldr	r2, [pc, #536]	; (8008738 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d042      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a85      	ldr	r2, [pc, #532]	; (800873c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d03a      	beq.n	80085a2 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a83      	ldr	r2, [pc, #524]	; (8008740 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d032      	beq.n	800859c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a82      	ldr	r2, [pc, #520]	; (8008744 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d02a      	beq.n	8008596 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a80      	ldr	r2, [pc, #512]	; (8008748 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d022      	beq.n	8008590 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a7f      	ldr	r2, [pc, #508]	; (800874c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d01a      	beq.n	800858a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7d      	ldr	r2, [pc, #500]	; (8008750 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d012      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a7c      	ldr	r2, [pc, #496]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00a      	beq.n	800857e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a7a      	ldr	r2, [pc, #488]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d102      	bne.n	8008578 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008572:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008576:	e01e      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008578:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800857c:	e01b      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800857e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008582:	e018      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008584:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008588:	e015      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800858a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800858e:	e012      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008594:	e00f      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800859a:	e00c      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800859c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085a0:	e009      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80085a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085a6:	e006      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80085a8:	2320      	movs	r3, #32
 80085aa:	e004      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80085ac:	2320      	movs	r3, #32
 80085ae:	e002      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80085b0:	2320      	movs	r3, #32
 80085b2:	e000      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80085b4:	2320      	movs	r3, #32
 80085b6:	4a5c      	ldr	r2, [pc, #368]	; (8008728 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80085b8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	4b66      	ldr	r3, [pc, #408]	; (800875c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d960      	bls.n	8008688 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a58      	ldr	r2, [pc, #352]	; (800872c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d057      	beq.n	8008680 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a56      	ldr	r2, [pc, #344]	; (8008730 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d050      	beq.n	800867c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a55      	ldr	r2, [pc, #340]	; (8008734 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d049      	beq.n	8008678 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a53      	ldr	r2, [pc, #332]	; (8008738 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d042      	beq.n	8008674 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a52      	ldr	r2, [pc, #328]	; (800873c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d03a      	beq.n	800866e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a50      	ldr	r2, [pc, #320]	; (8008740 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d032      	beq.n	8008668 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a4f      	ldr	r2, [pc, #316]	; (8008744 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d02a      	beq.n	8008662 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a4d      	ldr	r2, [pc, #308]	; (8008748 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d022      	beq.n	800865c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a4c      	ldr	r2, [pc, #304]	; (800874c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d01a      	beq.n	8008656 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a4a      	ldr	r2, [pc, #296]	; (8008750 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d012      	beq.n	8008650 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a49      	ldr	r2, [pc, #292]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00a      	beq.n	800864a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a47      	ldr	r2, [pc, #284]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d102      	bne.n	8008644 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800863e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008642:	e01e      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008648:	e01b      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800864a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800864e:	e018      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008650:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008654:	e015      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800865a:	e012      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800865c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008660:	e00f      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008666:	e00c      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800866c:	e009      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800866e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008672:	e006      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008674:	2310      	movs	r3, #16
 8008676:	e004      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008678:	2310      	movs	r3, #16
 800867a:	e002      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800867c:	2310      	movs	r3, #16
 800867e:	e000      	b.n	8008682 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008680:	2310      	movs	r3, #16
 8008682:	4a37      	ldr	r2, [pc, #220]	; (8008760 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008684:	60d3      	str	r3, [r2, #12]
 8008686:	e14f      	b.n	8008928 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	4b35      	ldr	r3, [pc, #212]	; (8008764 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008690:	429a      	cmp	r2, r3
 8008692:	f240 8082 	bls.w	800879a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a24      	ldr	r2, [pc, #144]	; (800872c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d078      	beq.n	8008792 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a22      	ldr	r2, [pc, #136]	; (8008730 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d071      	beq.n	800878e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a21      	ldr	r2, [pc, #132]	; (8008734 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d06a      	beq.n	800878a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d063      	beq.n	8008786 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1e      	ldr	r2, [pc, #120]	; (800873c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d05b      	beq.n	8008780 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d053      	beq.n	800877a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d04b      	beq.n	8008774 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a19      	ldr	r2, [pc, #100]	; (8008748 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d043      	beq.n	800876e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a18      	ldr	r2, [pc, #96]	; (800874c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d03b      	beq.n	8008768 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a16      	ldr	r2, [pc, #88]	; (8008750 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d012      	beq.n	8008720 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a15      	ldr	r2, [pc, #84]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00a      	beq.n	800871a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a13      	ldr	r2, [pc, #76]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d102      	bne.n	8008714 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800870e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008712:	e03f      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008718:	e03c      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800871a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800871e:	e039      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008724:	e036      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008726:	bf00      	nop
 8008728:	40026000 	.word	0x40026000
 800872c:	40026010 	.word	0x40026010
 8008730:	40026410 	.word	0x40026410
 8008734:	40026070 	.word	0x40026070
 8008738:	40026470 	.word	0x40026470
 800873c:	40026028 	.word	0x40026028
 8008740:	40026428 	.word	0x40026428
 8008744:	40026088 	.word	0x40026088
 8008748:	40026488 	.word	0x40026488
 800874c:	40026040 	.word	0x40026040
 8008750:	40026440 	.word	0x40026440
 8008754:	400260a0 	.word	0x400260a0
 8008758:	400264a0 	.word	0x400264a0
 800875c:	40026458 	.word	0x40026458
 8008760:	40026400 	.word	0x40026400
 8008764:	400260b8 	.word	0x400260b8
 8008768:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800876c:	e012      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800876e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008772:	e00f      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008778:	e00c      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800877a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877e:	e009      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008784:	e006      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008786:	2310      	movs	r3, #16
 8008788:	e004      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800878a:	2310      	movs	r3, #16
 800878c:	e002      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800878e:	2310      	movs	r3, #16
 8008790:	e000      	b.n	8008794 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008792:	2310      	movs	r3, #16
 8008794:	4a8c      	ldr	r2, [pc, #560]	; (80089c8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8008796:	6093      	str	r3, [r2, #8]
 8008798:	e0c6      	b.n	8008928 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	4b8a      	ldr	r3, [pc, #552]	; (80089cc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d960      	bls.n	8008868 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a89      	ldr	r2, [pc, #548]	; (80089d0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d057      	beq.n	8008860 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a87      	ldr	r2, [pc, #540]	; (80089d4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d050      	beq.n	800885c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a86      	ldr	r2, [pc, #536]	; (80089d8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d049      	beq.n	8008858 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a84      	ldr	r2, [pc, #528]	; (80089dc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d042      	beq.n	8008854 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a83      	ldr	r2, [pc, #524]	; (80089e0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d03a      	beq.n	800884e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a81      	ldr	r2, [pc, #516]	; (80089e4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d032      	beq.n	8008848 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a80      	ldr	r2, [pc, #512]	; (80089e8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d02a      	beq.n	8008842 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a7e      	ldr	r2, [pc, #504]	; (80089ec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d022      	beq.n	800883c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a7d      	ldr	r2, [pc, #500]	; (80089f0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d01a      	beq.n	8008836 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a7b      	ldr	r2, [pc, #492]	; (80089f4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d012      	beq.n	8008830 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a7a      	ldr	r2, [pc, #488]	; (80089f8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00a      	beq.n	800882a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a78      	ldr	r2, [pc, #480]	; (80089fc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d102      	bne.n	8008824 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800881e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008822:	e01e      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008824:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008828:	e01b      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800882a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800882e:	e018      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008830:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008834:	e015      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008836:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800883a:	e012      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800883c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008840:	e00f      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008846:	e00c      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884c:	e009      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800884e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008852:	e006      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008854:	2310      	movs	r3, #16
 8008856:	e004      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008858:	2310      	movs	r3, #16
 800885a:	e002      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800885c:	2310      	movs	r3, #16
 800885e:	e000      	b.n	8008862 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008860:	2310      	movs	r3, #16
 8008862:	4a67      	ldr	r2, [pc, #412]	; (8008a00 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008864:	60d3      	str	r3, [r2, #12]
 8008866:	e05f      	b.n	8008928 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a58      	ldr	r2, [pc, #352]	; (80089d0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d057      	beq.n	8008922 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a57      	ldr	r2, [pc, #348]	; (80089d4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d050      	beq.n	800891e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a55      	ldr	r2, [pc, #340]	; (80089d8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d049      	beq.n	800891a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a54      	ldr	r2, [pc, #336]	; (80089dc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d042      	beq.n	8008916 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a52      	ldr	r2, [pc, #328]	; (80089e0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d03a      	beq.n	8008910 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a51      	ldr	r2, [pc, #324]	; (80089e4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d032      	beq.n	800890a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a4f      	ldr	r2, [pc, #316]	; (80089e8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d02a      	beq.n	8008904 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a4e      	ldr	r2, [pc, #312]	; (80089ec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d022      	beq.n	80088fe <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a4c      	ldr	r2, [pc, #304]	; (80089f0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d01a      	beq.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a4b      	ldr	r2, [pc, #300]	; (80089f4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d012      	beq.n	80088f2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a49      	ldr	r2, [pc, #292]	; (80089f8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00a      	beq.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a48      	ldr	r2, [pc, #288]	; (80089fc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d102      	bne.n	80088e6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80088e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088e4:	e01e      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80088e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80088ea:	e01b      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80088ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088f0:	e018      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80088f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088f6:	e015      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80088f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088fc:	e012      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80088fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008902:	e00f      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008908:	e00c      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800890a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890e:	e009      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008914:	e006      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008916:	2310      	movs	r3, #16
 8008918:	e004      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800891a:	2310      	movs	r3, #16
 800891c:	e002      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800891e:	2310      	movs	r3, #16
 8008920:	e000      	b.n	8008924 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008922:	2310      	movs	r3, #16
 8008924:	4a36      	ldr	r2, [pc, #216]	; (8008a00 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008926:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	4b35      	ldr	r3, [pc, #212]	; (8008a04 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8008930:	429a      	cmp	r2, r3
 8008932:	f240 8082 	bls.w	8008a3a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a25      	ldr	r2, [pc, #148]	; (80089d0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d078      	beq.n	8008a32 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a23      	ldr	r2, [pc, #140]	; (80089d4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d071      	beq.n	8008a2e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a22      	ldr	r2, [pc, #136]	; (80089d8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d06a      	beq.n	8008a2a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a20      	ldr	r2, [pc, #128]	; (80089dc <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d063      	beq.n	8008a26 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d05b      	beq.n	8008a20 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d053      	beq.n	8008a1a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d04b      	beq.n	8008a14 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1a      	ldr	r2, [pc, #104]	; (80089ec <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d043      	beq.n	8008a0e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d03b      	beq.n	8008a08 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a17      	ldr	r2, [pc, #92]	; (80089f4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d012      	beq.n	80089c0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a16      	ldr	r2, [pc, #88]	; (80089f8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00a      	beq.n	80089ba <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a14      	ldr	r2, [pc, #80]	; (80089fc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d102      	bne.n	80089b4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 80089ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089b2:	e03f      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80089b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089b8:	e03c      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80089ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089be:	e039      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80089c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089c4:	e036      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80089c6:	bf00      	nop
 80089c8:	40026400 	.word	0x40026400
 80089cc:	40026058 	.word	0x40026058
 80089d0:	40026010 	.word	0x40026010
 80089d4:	40026410 	.word	0x40026410
 80089d8:	40026070 	.word	0x40026070
 80089dc:	40026470 	.word	0x40026470
 80089e0:	40026028 	.word	0x40026028
 80089e4:	40026428 	.word	0x40026428
 80089e8:	40026088 	.word	0x40026088
 80089ec:	40026488 	.word	0x40026488
 80089f0:	40026040 	.word	0x40026040
 80089f4:	40026440 	.word	0x40026440
 80089f8:	400260a0 	.word	0x400260a0
 80089fc:	400264a0 	.word	0x400264a0
 8008a00:	40026000 	.word	0x40026000
 8008a04:	40026458 	.word	0x40026458
 8008a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a0c:	e012      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a12:	e00f      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a18:	e00c      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a1e:	e009      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a24:	e006      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a26:	2308      	movs	r3, #8
 8008a28:	e004      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a2a:	2308      	movs	r3, #8
 8008a2c:	e002      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a2e:	2308      	movs	r3, #8
 8008a30:	e000      	b.n	8008a34 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008a32:	2308      	movs	r3, #8
 8008a34:	4a8c      	ldr	r2, [pc, #560]	; (8008c68 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8008a36:	60d3      	str	r3, [r2, #12]
 8008a38:	e14e      	b.n	8008cd8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4b8a      	ldr	r3, [pc, #552]	; (8008c6c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d960      	bls.n	8008b08 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a89      	ldr	r2, [pc, #548]	; (8008c70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d057      	beq.n	8008b00 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a87      	ldr	r2, [pc, #540]	; (8008c74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d050      	beq.n	8008afc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a86      	ldr	r2, [pc, #536]	; (8008c78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d049      	beq.n	8008af8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a84      	ldr	r2, [pc, #528]	; (8008c7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d042      	beq.n	8008af4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a83      	ldr	r2, [pc, #524]	; (8008c80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d03a      	beq.n	8008aee <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a81      	ldr	r2, [pc, #516]	; (8008c84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d032      	beq.n	8008ae8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a80      	ldr	r2, [pc, #512]	; (8008c88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d02a      	beq.n	8008ae2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a7e      	ldr	r2, [pc, #504]	; (8008c8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d022      	beq.n	8008adc <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a7d      	ldr	r2, [pc, #500]	; (8008c90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d01a      	beq.n	8008ad6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a7b      	ldr	r2, [pc, #492]	; (8008c94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d012      	beq.n	8008ad0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a7a      	ldr	r2, [pc, #488]	; (8008c98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00a      	beq.n	8008aca <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a78      	ldr	r2, [pc, #480]	; (8008c9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d102      	bne.n	8008ac4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8008abe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ac2:	e01e      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ac8:	e01b      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008aca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ace:	e018      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ad0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ad4:	e015      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ad6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ada:	e012      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ae0:	e00f      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ae6:	e00c      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aec:	e009      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af2:	e006      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008af4:	2308      	movs	r3, #8
 8008af6:	e004      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008af8:	2308      	movs	r3, #8
 8008afa:	e002      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008afc:	2308      	movs	r3, #8
 8008afe:	e000      	b.n	8008b02 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008b00:	2308      	movs	r3, #8
 8008b02:	4a59      	ldr	r2, [pc, #356]	; (8008c68 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8008b04:	6093      	str	r3, [r2, #8]
 8008b06:	e0e7      	b.n	8008cd8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4b64      	ldr	r3, [pc, #400]	; (8008ca0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d960      	bls.n	8008bd6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a55      	ldr	r2, [pc, #340]	; (8008c70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d057      	beq.n	8008bce <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a54      	ldr	r2, [pc, #336]	; (8008c74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d050      	beq.n	8008bca <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a52      	ldr	r2, [pc, #328]	; (8008c78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d049      	beq.n	8008bc6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a51      	ldr	r2, [pc, #324]	; (8008c7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d042      	beq.n	8008bc2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a4f      	ldr	r2, [pc, #316]	; (8008c80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d03a      	beq.n	8008bbc <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a4e      	ldr	r2, [pc, #312]	; (8008c84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d032      	beq.n	8008bb6 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a4c      	ldr	r2, [pc, #304]	; (8008c88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d02a      	beq.n	8008bb0 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a4b      	ldr	r2, [pc, #300]	; (8008c8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d022      	beq.n	8008baa <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a49      	ldr	r2, [pc, #292]	; (8008c90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01a      	beq.n	8008ba4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a48      	ldr	r2, [pc, #288]	; (8008c94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d012      	beq.n	8008b9e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a46      	ldr	r2, [pc, #280]	; (8008c98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00a      	beq.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a45      	ldr	r2, [pc, #276]	; (8008c9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d102      	bne.n	8008b92 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8008b8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b90:	e01e      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b96:	e01b      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008b98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b9c:	e018      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008b9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ba2:	e015      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008ba4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ba8:	e012      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bae:	e00f      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb4:	e00c      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bba:	e009      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc0:	e006      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	e004      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	e002      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bca:	2308      	movs	r3, #8
 8008bcc:	e000      	b.n	8008bd0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	4a34      	ldr	r2, [pc, #208]	; (8008ca4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8008bd2:	60d3      	str	r3, [r2, #12]
 8008bd4:	e080      	b.n	8008cd8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a25      	ldr	r2, [pc, #148]	; (8008c70 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d078      	beq.n	8008cd2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a23      	ldr	r2, [pc, #140]	; (8008c74 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d071      	beq.n	8008cce <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a22      	ldr	r2, [pc, #136]	; (8008c78 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d06a      	beq.n	8008cca <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a20      	ldr	r2, [pc, #128]	; (8008c7c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d063      	beq.n	8008cc6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a1f      	ldr	r2, [pc, #124]	; (8008c80 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d05b      	beq.n	8008cc0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d053      	beq.n	8008cba <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d04b      	beq.n	8008cb4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d043      	beq.n	8008cae <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a19      	ldr	r2, [pc, #100]	; (8008c90 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d03b      	beq.n	8008ca8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a17      	ldr	r2, [pc, #92]	; (8008c94 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d012      	beq.n	8008c60 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a16      	ldr	r2, [pc, #88]	; (8008c98 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00a      	beq.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a14      	ldr	r2, [pc, #80]	; (8008c9c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d102      	bne.n	8008c54 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8008c4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c52:	e03f      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c58:	e03c      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008c5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c5e:	e039      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008c60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c64:	e036      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008c66:	bf00      	nop
 8008c68:	40026400 	.word	0x40026400
 8008c6c:	400260b8 	.word	0x400260b8
 8008c70:	40026010 	.word	0x40026010
 8008c74:	40026410 	.word	0x40026410
 8008c78:	40026070 	.word	0x40026070
 8008c7c:	40026470 	.word	0x40026470
 8008c80:	40026028 	.word	0x40026028
 8008c84:	40026428 	.word	0x40026428
 8008c88:	40026088 	.word	0x40026088
 8008c8c:	40026488 	.word	0x40026488
 8008c90:	40026040 	.word	0x40026040
 8008c94:	40026440 	.word	0x40026440
 8008c98:	400260a0 	.word	0x400260a0
 8008c9c:	400264a0 	.word	0x400264a0
 8008ca0:	40026058 	.word	0x40026058
 8008ca4:	40026000 	.word	0x40026000
 8008ca8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cac:	e012      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cb2:	e00f      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cb8:	e00c      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cbe:	e009      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc4:	e006      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	e004      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cca:	2308      	movs	r3, #8
 8008ccc:	e002      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cce:	2308      	movs	r3, #8
 8008cd0:	e000      	b.n	8008cd4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	4a8a      	ldr	r2, [pc, #552]	; (8008f00 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8008cd6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b89      	ldr	r3, [pc, #548]	; (8008f04 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d960      	bls.n	8008da6 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a87      	ldr	r2, [pc, #540]	; (8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d057      	beq.n	8008d9e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a86      	ldr	r2, [pc, #536]	; (8008f0c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d050      	beq.n	8008d9a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a84      	ldr	r2, [pc, #528]	; (8008f10 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d049      	beq.n	8008d96 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a83      	ldr	r2, [pc, #524]	; (8008f14 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d042      	beq.n	8008d92 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a81      	ldr	r2, [pc, #516]	; (8008f18 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d03a      	beq.n	8008d8c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a80      	ldr	r2, [pc, #512]	; (8008f1c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d032      	beq.n	8008d86 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a7e      	ldr	r2, [pc, #504]	; (8008f20 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d02a      	beq.n	8008d80 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a7d      	ldr	r2, [pc, #500]	; (8008f24 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d022      	beq.n	8008d7a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a7b      	ldr	r2, [pc, #492]	; (8008f28 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d01a      	beq.n	8008d74 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a7a      	ldr	r2, [pc, #488]	; (8008f2c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d012      	beq.n	8008d6e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a78      	ldr	r2, [pc, #480]	; (8008f30 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00a      	beq.n	8008d68 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a77      	ldr	r2, [pc, #476]	; (8008f34 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d102      	bne.n	8008d62 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8008d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d60:	e01e      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d66:	e01b      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d6c:	e018      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d72:	e015      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d78:	e012      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d7e:	e00f      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d84:	e00c      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d8a:	e009      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d90:	e006      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d92:	2304      	movs	r3, #4
 8008d94:	e004      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d96:	2304      	movs	r3, #4
 8008d98:	e002      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d9a:	2304      	movs	r3, #4
 8008d9c:	e000      	b.n	8008da0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008d9e:	2304      	movs	r3, #4
 8008da0:	4a65      	ldr	r2, [pc, #404]	; (8008f38 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8008da2:	60d3      	str	r3, [r2, #12]
 8008da4:	e150      	b.n	8009048 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	4b63      	ldr	r3, [pc, #396]	; (8008f3c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d960      	bls.n	8008e74 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a54      	ldr	r2, [pc, #336]	; (8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d057      	beq.n	8008e6c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a52      	ldr	r2, [pc, #328]	; (8008f0c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d050      	beq.n	8008e68 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a51      	ldr	r2, [pc, #324]	; (8008f10 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d049      	beq.n	8008e64 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a4f      	ldr	r2, [pc, #316]	; (8008f14 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d042      	beq.n	8008e60 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a4e      	ldr	r2, [pc, #312]	; (8008f18 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d03a      	beq.n	8008e5a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a4c      	ldr	r2, [pc, #304]	; (8008f1c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d032      	beq.n	8008e54 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a4b      	ldr	r2, [pc, #300]	; (8008f20 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d02a      	beq.n	8008e4e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a49      	ldr	r2, [pc, #292]	; (8008f24 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d022      	beq.n	8008e48 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a48      	ldr	r2, [pc, #288]	; (8008f28 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d01a      	beq.n	8008e42 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a46      	ldr	r2, [pc, #280]	; (8008f2c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d012      	beq.n	8008e3c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a45      	ldr	r2, [pc, #276]	; (8008f30 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00a      	beq.n	8008e36 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a43      	ldr	r2, [pc, #268]	; (8008f34 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d102      	bne.n	8008e30 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8008e2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e2e:	e01e      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e34:	e01b      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e3a:	e018      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e40:	e015      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e46:	e012      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4c:	e00f      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e52:	e00c      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e58:	e009      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e5e:	e006      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e60:	2304      	movs	r3, #4
 8008e62:	e004      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e64:	2304      	movs	r3, #4
 8008e66:	e002      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	e000      	b.n	8008e6e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	4a32      	ldr	r2, [pc, #200]	; (8008f38 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8008e70:	6093      	str	r3, [r2, #8]
 8008e72:	e0e9      	b.n	8009048 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	f240 8083 	bls.w	8008f88 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a20      	ldr	r2, [pc, #128]	; (8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d079      	beq.n	8008f80 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d072      	beq.n	8008f7c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d06b      	beq.n	8008f78 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a1b      	ldr	r2, [pc, #108]	; (8008f14 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d064      	beq.n	8008f74 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1a      	ldr	r2, [pc, #104]	; (8008f18 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d05c      	beq.n	8008f6e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a18      	ldr	r2, [pc, #96]	; (8008f1c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d054      	beq.n	8008f68 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a17      	ldr	r2, [pc, #92]	; (8008f20 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d04c      	beq.n	8008f62 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a15      	ldr	r2, [pc, #84]	; (8008f24 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d044      	beq.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a14      	ldr	r2, [pc, #80]	; (8008f28 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d03c      	beq.n	8008f56 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a12      	ldr	r2, [pc, #72]	; (8008f2c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d034      	beq.n	8008f50 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a11      	ldr	r2, [pc, #68]	; (8008f30 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d02c      	beq.n	8008f4a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0f      	ldr	r2, [pc, #60]	; (8008f34 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d124      	bne.n	8008f44 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8008efa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008efe:	e040      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f00:	40026000 	.word	0x40026000
 8008f04:	40026458 	.word	0x40026458
 8008f08:	40026010 	.word	0x40026010
 8008f0c:	40026410 	.word	0x40026410
 8008f10:	40026070 	.word	0x40026070
 8008f14:	40026470 	.word	0x40026470
 8008f18:	40026028 	.word	0x40026028
 8008f1c:	40026428 	.word	0x40026428
 8008f20:	40026088 	.word	0x40026088
 8008f24:	40026488 	.word	0x40026488
 8008f28:	40026040 	.word	0x40026040
 8008f2c:	40026440 	.word	0x40026440
 8008f30:	400260a0 	.word	0x400260a0
 8008f34:	400264a0 	.word	0x400264a0
 8008f38:	40026400 	.word	0x40026400
 8008f3c:	400260b8 	.word	0x400260b8
 8008f40:	40026058 	.word	0x40026058
 8008f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f48:	e01b      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f4e:	e018      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f54:	e015      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f5a:	e012      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f60:	e00f      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f66:	e00c      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6c:	e009      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f72:	e006      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f74:	2304      	movs	r3, #4
 8008f76:	e004      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f78:	2304      	movs	r3, #4
 8008f7a:	e002      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e000      	b.n	8008f82 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008f80:	2304      	movs	r3, #4
 8008f82:	4a8b      	ldr	r2, [pc, #556]	; (80091b0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8008f84:	60d3      	str	r3, [r2, #12]
 8008f86:	e05f      	b.n	8009048 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a89      	ldr	r2, [pc, #548]	; (80091b4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d057      	beq.n	8009042 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a88      	ldr	r2, [pc, #544]	; (80091b8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d050      	beq.n	800903e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a86      	ldr	r2, [pc, #536]	; (80091bc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d049      	beq.n	800903a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a85      	ldr	r2, [pc, #532]	; (80091c0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d042      	beq.n	8009036 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a83      	ldr	r2, [pc, #524]	; (80091c4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d03a      	beq.n	8009030 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a82      	ldr	r2, [pc, #520]	; (80091c8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d032      	beq.n	800902a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a80      	ldr	r2, [pc, #512]	; (80091cc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d02a      	beq.n	8009024 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a7f      	ldr	r2, [pc, #508]	; (80091d0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d022      	beq.n	800901e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a7d      	ldr	r2, [pc, #500]	; (80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d01a      	beq.n	8009018 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a7c      	ldr	r2, [pc, #496]	; (80091d8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d012      	beq.n	8009012 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a7a      	ldr	r2, [pc, #488]	; (80091dc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d00a      	beq.n	800900c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a79      	ldr	r2, [pc, #484]	; (80091e0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d102      	bne.n	8009006 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8009000:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009004:	e01e      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800900a:	e01b      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800900c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009010:	e018      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009012:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009016:	e015      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009018:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800901c:	e012      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800901e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009022:	e00f      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009028:	e00c      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800902a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800902e:	e009      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009034:	e006      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009036:	2304      	movs	r3, #4
 8009038:	e004      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800903a:	2304      	movs	r3, #4
 800903c:	e002      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800903e:	2304      	movs	r3, #4
 8009040:	e000      	b.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009042:	2304      	movs	r3, #4
 8009044:	4a5a      	ldr	r2, [pc, #360]	; (80091b0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009046:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009050:	429a      	cmp	r2, r3
 8009052:	d95c      	bls.n	800910e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a56      	ldr	r2, [pc, #344]	; (80091b4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d053      	beq.n	8009106 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a55      	ldr	r2, [pc, #340]	; (80091b8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d04c      	beq.n	8009102 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a53      	ldr	r2, [pc, #332]	; (80091bc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d045      	beq.n	80090fe <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a52      	ldr	r2, [pc, #328]	; (80091c0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d03e      	beq.n	80090fa <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a50      	ldr	r2, [pc, #320]	; (80091c4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d037      	beq.n	80090f6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a4f      	ldr	r2, [pc, #316]	; (80091c8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d030      	beq.n	80090f2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a4d      	ldr	r2, [pc, #308]	; (80091cc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d029      	beq.n	80090ee <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a4c      	ldr	r2, [pc, #304]	; (80091d0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d022      	beq.n	80090ea <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a4a      	ldr	r2, [pc, #296]	; (80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d01a      	beq.n	80090e4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a49      	ldr	r2, [pc, #292]	; (80091d8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d012      	beq.n	80090de <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a47      	ldr	r2, [pc, #284]	; (80091dc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00a      	beq.n	80090d8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a46      	ldr	r2, [pc, #280]	; (80091e0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d102      	bne.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80090cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090d0:	e01a      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090d6:	e017      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090dc:	e014      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090e2:	e011      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090e8:	e00e      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090ea:	2340      	movs	r3, #64	; 0x40
 80090ec:	e00c      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090ee:	2340      	movs	r3, #64	; 0x40
 80090f0:	e00a      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	e008      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	e006      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e004      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80090fe:	2301      	movs	r3, #1
 8009100:	e002      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009106:	2301      	movs	r3, #1
 8009108:	4a37      	ldr	r2, [pc, #220]	; (80091e8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800910a:	60d3      	str	r3, [r2, #12]
 800910c:	e141      	b.n	8009392 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	4b35      	ldr	r3, [pc, #212]	; (80091ec <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8009116:	429a      	cmp	r2, r3
 8009118:	d97c      	bls.n	8009214 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a25      	ldr	r2, [pc, #148]	; (80091b4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d073      	beq.n	800920c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a23      	ldr	r2, [pc, #140]	; (80091b8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d06c      	beq.n	8009208 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a22      	ldr	r2, [pc, #136]	; (80091bc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d065      	beq.n	8009204 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a20      	ldr	r2, [pc, #128]	; (80091c0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d05e      	beq.n	8009200 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a1f      	ldr	r2, [pc, #124]	; (80091c4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d057      	beq.n	80091fc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1d      	ldr	r2, [pc, #116]	; (80091c8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d050      	beq.n	80091f8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1c      	ldr	r2, [pc, #112]	; (80091cc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d049      	beq.n	80091f4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d042      	beq.n	80091f0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d01a      	beq.n	80091aa <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a17      	ldr	r2, [pc, #92]	; (80091d8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d012      	beq.n	80091a4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a16      	ldr	r2, [pc, #88]	; (80091dc <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00a      	beq.n	800919e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a14      	ldr	r2, [pc, #80]	; (80091e0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d102      	bne.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8009192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009196:	e03a      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800919c:	e037      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800919e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091a2:	e034      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80091a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091a8:	e031      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80091aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091ae:	e02e      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80091b0:	40026000 	.word	0x40026000
 80091b4:	40026010 	.word	0x40026010
 80091b8:	40026410 	.word	0x40026410
 80091bc:	40026070 	.word	0x40026070
 80091c0:	40026470 	.word	0x40026470
 80091c4:	40026028 	.word	0x40026028
 80091c8:	40026428 	.word	0x40026428
 80091cc:	40026088 	.word	0x40026088
 80091d0:	40026488 	.word	0x40026488
 80091d4:	40026040 	.word	0x40026040
 80091d8:	40026440 	.word	0x40026440
 80091dc:	400260a0 	.word	0x400260a0
 80091e0:	400264a0 	.word	0x400264a0
 80091e4:	40026458 	.word	0x40026458
 80091e8:	40026400 	.word	0x40026400
 80091ec:	400260b8 	.word	0x400260b8
 80091f0:	2340      	movs	r3, #64	; 0x40
 80091f2:	e00c      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80091f4:	2340      	movs	r3, #64	; 0x40
 80091f6:	e00a      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80091f8:	2340      	movs	r3, #64	; 0x40
 80091fa:	e008      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80091fc:	2340      	movs	r3, #64	; 0x40
 80091fe:	e006      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009200:	2301      	movs	r3, #1
 8009202:	e004      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009204:	2301      	movs	r3, #1
 8009206:	e002      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009208:	2301      	movs	r3, #1
 800920a:	e000      	b.n	800920e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800920c:	2301      	movs	r3, #1
 800920e:	4a7b      	ldr	r2, [pc, #492]	; (80093fc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009210:	6093      	str	r3, [r2, #8]
 8009212:	e0be      	b.n	8009392 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	4b79      	ldr	r3, [pc, #484]	; (8009400 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800921c:	429a      	cmp	r2, r3
 800921e:	d95c      	bls.n	80092da <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a77      	ldr	r2, [pc, #476]	; (8009404 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d053      	beq.n	80092d2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a76      	ldr	r2, [pc, #472]	; (8009408 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d04c      	beq.n	80092ce <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a74      	ldr	r2, [pc, #464]	; (800940c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d045      	beq.n	80092ca <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a73      	ldr	r2, [pc, #460]	; (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d03e      	beq.n	80092c6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a71      	ldr	r2, [pc, #452]	; (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d037      	beq.n	80092c2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a70      	ldr	r2, [pc, #448]	; (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d030      	beq.n	80092be <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a6e      	ldr	r2, [pc, #440]	; (800941c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d029      	beq.n	80092ba <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a6d      	ldr	r2, [pc, #436]	; (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d022      	beq.n	80092b6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a6b      	ldr	r2, [pc, #428]	; (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d01a      	beq.n	80092b0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a6a      	ldr	r2, [pc, #424]	; (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d012      	beq.n	80092aa <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a68      	ldr	r2, [pc, #416]	; (800942c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00a      	beq.n	80092a4 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a67      	ldr	r2, [pc, #412]	; (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d102      	bne.n	800929e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800929c:	e01a      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800929e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092a2:	e017      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092a8:	e014      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092ae:	e011      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092b4:	e00e      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092b6:	2340      	movs	r3, #64	; 0x40
 80092b8:	e00c      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092ba:	2340      	movs	r3, #64	; 0x40
 80092bc:	e00a      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	e008      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	e006      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e004      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e002      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4a57      	ldr	r2, [pc, #348]	; (8009434 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80092d6:	60d3      	str	r3, [r2, #12]
 80092d8:	e05b      	b.n	8009392 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a49      	ldr	r2, [pc, #292]	; (8009404 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d053      	beq.n	800938c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a47      	ldr	r2, [pc, #284]	; (8009408 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d04c      	beq.n	8009388 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a46      	ldr	r2, [pc, #280]	; (800940c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d045      	beq.n	8009384 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a44      	ldr	r2, [pc, #272]	; (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d03e      	beq.n	8009380 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a43      	ldr	r2, [pc, #268]	; (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d037      	beq.n	800937c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a41      	ldr	r2, [pc, #260]	; (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d030      	beq.n	8009378 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a40      	ldr	r2, [pc, #256]	; (800941c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d029      	beq.n	8009374 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a3e      	ldr	r2, [pc, #248]	; (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d022      	beq.n	8009370 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a3d      	ldr	r2, [pc, #244]	; (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d01a      	beq.n	800936a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a3b      	ldr	r2, [pc, #236]	; (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d012      	beq.n	8009364 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a3a      	ldr	r2, [pc, #232]	; (800942c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00a      	beq.n	800935e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a38      	ldr	r2, [pc, #224]	; (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d102      	bne.n	8009358 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8009352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009356:	e01a      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009358:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800935c:	e017      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800935e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009362:	e014      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009368:	e011      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800936a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800936e:	e00e      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	e00c      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	e00a      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	e008      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	e006      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009380:	2301      	movs	r3, #1
 8009382:	e004      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009384:	2301      	movs	r3, #1
 8009386:	e002      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009388:	2301      	movs	r3, #1
 800938a:	e000      	b.n	800938e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800938c:	2301      	movs	r3, #1
 800938e:	4a29      	ldr	r2, [pc, #164]	; (8009434 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009390:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0216 	orr.w	r2, r2, #22
 80093a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695a      	ldr	r2, [r3, #20]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d103      	bne.n	80093c2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d007      	beq.n	80093d2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f042 0208 	orr.w	r2, r2, #8
 80093d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f042 0201 	orr.w	r2, r2, #1
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	e005      	b.n	80093f0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80093ec:	2302      	movs	r3, #2
 80093ee:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	40026400 	.word	0x40026400
 8009400:	40026058 	.word	0x40026058
 8009404:	40026010 	.word	0x40026010
 8009408:	40026410 	.word	0x40026410
 800940c:	40026070 	.word	0x40026070
 8009410:	40026470 	.word	0x40026470
 8009414:	40026028 	.word	0x40026028
 8009418:	40026428 	.word	0x40026428
 800941c:	40026088 	.word	0x40026088
 8009420:	40026488 	.word	0x40026488
 8009424:	40026040 	.word	0x40026040
 8009428:	40026440 	.word	0x40026440
 800942c:	400260a0 	.word	0x400260a0
 8009430:	400264a0 	.word	0x400264a0
 8009434:	40026000 	.word	0x40026000

08009438 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	60da      	str	r2, [r3, #12]
 8009454:	e003      	b.n	800945e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d108      	bne.n	800949c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800949a:	e007      	b.n	80094ac <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	60da      	str	r2, [r3, #12]
}
 80094ac:	bf00      	nop
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <HAL_EXTI_SetConfigLine+0x16>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e08f      	b.n	80095f2 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 031f 	and.w	r3, r3, #31
 80094e2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 80094e4:	2201      	movs	r2, #1
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d052      	beq.n	80095a0 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d006      	beq.n	8009514 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8009506:	4b3e      	ldr	r3, [pc, #248]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	493d      	ldr	r1, [pc, #244]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4313      	orrs	r3, r2
 8009510:	608b      	str	r3, [r1, #8]
 8009512:	e006      	b.n	8009522 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8009514:	4b3a      	ldr	r3, [pc, #232]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	43db      	mvns	r3, r3
 800951c:	4938      	ldr	r1, [pc, #224]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 800951e:	4013      	ands	r3, r2
 8009520:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d006      	beq.n	800953c <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 800952e:	4b34      	ldr	r3, [pc, #208]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	4933      	ldr	r1, [pc, #204]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	60cb      	str	r3, [r1, #12]
 800953a:	e006      	b.n	800954a <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 800953c:	4b30      	ldr	r3, [pc, #192]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	43db      	mvns	r3, r3
 8009544:	492e      	ldr	r1, [pc, #184]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 8009546:	4013      	ands	r3, r2
 8009548:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009552:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009556:	d123      	bne.n	80095a0 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009558:	4a2a      	ldr	r2, [pc, #168]	; (8009604 <HAL_EXTI_SetConfigLine+0x14c>)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	089b      	lsrs	r3, r3, #2
 800955e:	3302      	adds	r3, #2
 8009560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009564:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	220f      	movs	r2, #15
 8009570:	fa02 f303 	lsl.w	r3, r2, r3
 8009574:	43db      	mvns	r3, r3
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4013      	ands	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009592:	491c      	ldr	r1, [pc, #112]	; (8009604 <HAL_EXTI_SetConfigLine+0x14c>)
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	089b      	lsrs	r3, r3, #2
 8009598:	3302      	adds	r3, #2
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d006      	beq.n	80095ba <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 80095ac:	4b14      	ldr	r3, [pc, #80]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	4913      	ldr	r1, [pc, #76]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	600b      	str	r3, [r1, #0]
 80095b8:	e006      	b.n	80095c8 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 80095ba:	4b11      	ldr	r3, [pc, #68]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	43db      	mvns	r3, r3
 80095c2:	490f      	ldr	r1, [pc, #60]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	4909      	ldr	r1, [pc, #36]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	604b      	str	r3, [r1, #4]
 80095e0:	e006      	b.n	80095f0 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 80095e2:	4b07      	ldr	r3, [pc, #28]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	43db      	mvns	r3, r3
 80095ea:	4905      	ldr	r1, [pc, #20]	; (8009600 <HAL_EXTI_SetConfigLine+0x148>)
 80095ec:	4013      	ands	r3, r2
 80095ee:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40013c00 	.word	0x40013c00
 8009604:	40013800 	.word	0x40013800

08009608 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <HAL_EXTI_GetConfigLine+0x16>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e061      	b.n	80096e6 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 031f 	and.w	r3, r3, #31
 8009632:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009634:	2201      	movs	r2, #1
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	fa02 f303 	lsl.w	r3, r2, r3
 800963c:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 800963e:	4b2d      	ldr	r3, [pc, #180]	; (80096f4 <HAL_EXTI_GetConfigLine+0xec>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	4013      	ands	r3, r2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2201      	movs	r2, #1
 800964e:	605a      	str	r2, [r3, #4]
 8009650:	e002      	b.n	8009658 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2200      	movs	r2, #0
 8009656:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8009658:	4b26      	ldr	r3, [pc, #152]	; (80096f4 <HAL_EXTI_GetConfigLine+0xec>)
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	4013      	ands	r3, r2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f043 0202 	orr.w	r2, r3, #2
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2200      	movs	r2, #0
 8009674:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2200      	movs	r2, #0
 800967a:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d02d      	beq.n	80096e4 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8009688:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <HAL_EXTI_GetConfigLine+0xec>)
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2201      	movs	r2, #1
 8009698:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <HAL_EXTI_GetConfigLine+0xec>)
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f043 0202 	orr.w	r2, r3, #2
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80096ba:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80096be:	d111      	bne.n	80096e4 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80096c0:	4a0d      	ldr	r2, [pc, #52]	; (80096f8 <HAL_EXTI_GetConfigLine+0xf0>)
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	089b      	lsrs	r3, r3, #2
 80096c6:	3302      	adds	r3, #2
 80096c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096cc:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	43db      	mvns	r3, r3
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	0e1a      	lsrs	r2, r3, #24
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40013c00 	.word	0x40013c00
 80096f8:	40013800 	.word	0x40013800

080096fc <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e04c      	b.n	80097a8 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009718:	2201      	movs	r2, #1
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	fa02 f303 	lsl.w	r3, r2, r3
 8009720:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8009722:	4b24      	ldr	r3, [pc, #144]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	43db      	mvns	r3, r3
 800972a:	4922      	ldr	r1, [pc, #136]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 800972c:	4013      	ands	r3, r2
 800972e:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8009730:	4b20      	ldr	r3, [pc, #128]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	43db      	mvns	r3, r3
 8009738:	491e      	ldr	r1, [pc, #120]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 800973a:	4013      	ands	r3, r2
 800973c:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d02d      	beq.n	80097a6 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 800974a:	4b1a      	ldr	r3, [pc, #104]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	43db      	mvns	r3, r3
 8009752:	4918      	ldr	r1, [pc, #96]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009754:	4013      	ands	r3, r2
 8009756:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8009758:	4b16      	ldr	r3, [pc, #88]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	43db      	mvns	r3, r3
 8009760:	4914      	ldr	r1, [pc, #80]	; (80097b4 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009762:	4013      	ands	r3, r2
 8009764:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800976e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009772:	d118      	bne.n	80097a6 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009774:	4a10      	ldr	r2, [pc, #64]	; (80097b8 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	089b      	lsrs	r3, r3, #2
 800977a:	3302      	adds	r3, #2
 800977c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009780:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	220f      	movs	r2, #15
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	43db      	mvns	r3, r3
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4013      	ands	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009798:	4907      	ldr	r1, [pc, #28]	; (80097b8 <HAL_EXTI_ClearConfigLine+0xbc>)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	089b      	lsrs	r3, r3, #2
 800979e:	3302      	adds	r3, #2
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	40013c00 	.word	0x40013c00
 80097b8:	40013800 	.word	0x40013800

080097bc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	460b      	mov	r3, r1
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	605a      	str	r2, [r3, #4]
      break;
 80097da:	e002      	b.n	80097e2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	75fb      	strb	r3, [r7, #23]
      break;
 80097e0:	bf00      	nop
  }

  return status;
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e003      	b.n	800980c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800980a:	2300      	movs	r3, #0
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	2201      	movs	r2, #1
 800982a:	fa02 f303 	lsl.w	r3, r2, r3
 800982e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009830:	4b0a      	ldr	r3, [pc, #40]	; (800985c <HAL_EXTI_IRQHandler+0x44>)
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4013      	ands	r3, r2
 8009838:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009840:	4a06      	ldr	r2, [pc, #24]	; (800985c <HAL_EXTI_IRQHandler+0x44>)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	4798      	blx	r3
    }
  }
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40013c00 	.word	0x40013c00

08009860 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 031f 	and.w	r3, r3, #31
 8009872:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009874:	2201      	movs	r2, #1
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	fa02 f303 	lsl.w	r3, r2, r3
 800987c:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800987e:	4b07      	ldr	r3, [pc, #28]	; (800989c <HAL_EXTI_GetPending+0x3c>)
 8009880:	695a      	ldr	r2, [r3, #20]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	401a      	ands	r2, r3
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
 800988c:	60fb      	str	r3, [r7, #12]
  return regval;
 800988e:	68fb      	ldr	r3, [r7, #12]
}
 8009890:	4618      	mov	r0, r3
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	40013c00 	.word	0x40013c00

080098a0 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 031f 	and.w	r3, r3, #31
 80098b2:	2201      	movs	r2, #1
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80098ba:	4a04      	ldr	r2, [pc, #16]	; (80098cc <HAL_EXTI_ClearPending+0x2c>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6153      	str	r3, [r2, #20]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	40013c00 	.word	0x40013c00

080098d0 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 031f 	and.w	r3, r3, #31
 80098e0:	2201      	movs	r2, #1
 80098e2:	fa02 f303 	lsl.w	r3, r2, r3
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80098e8:	4a04      	ldr	r2, [pc, #16]	; (80098fc <HAL_EXTI_GenerateSWI+0x2c>)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6113      	str	r3, [r2, #16]
}
 80098ee:	bf00      	nop
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	40013c00 	.word	0x40013c00

08009900 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009912:	4b23      	ldr	r3, [pc, #140]	; (80099a0 <HAL_FLASH_Program+0xa0>)
 8009914:	7e1b      	ldrb	r3, [r3, #24]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_FLASH_Program+0x1e>
 800991a:	2302      	movs	r3, #2
 800991c:	e03b      	b.n	8009996 <HAL_FLASH_Program+0x96>
 800991e:	4b20      	ldr	r3, [pc, #128]	; (80099a0 <HAL_FLASH_Program+0xa0>)
 8009920:	2201      	movs	r2, #1
 8009922:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009928:	f000 f9be 	bl	8009ca8 <FLASH_WaitForLastOperation>
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d12b      	bne.n	800998e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d105      	bne.n	8009948 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800993c:	783b      	ldrb	r3, [r7, #0]
 800993e:	4619      	mov	r1, r3
 8009940:	68b8      	ldr	r0, [r7, #8]
 8009942:	f000 fa69 	bl	8009e18 <FLASH_Program_Byte>
 8009946:	e016      	b.n	8009976 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d105      	bne.n	800995a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800994e:	883b      	ldrh	r3, [r7, #0]
 8009950:	4619      	mov	r1, r3
 8009952:	68b8      	ldr	r0, [r7, #8]
 8009954:	f000 fa3c 	bl	8009dd0 <FLASH_Program_HalfWord>
 8009958:	e00d      	b.n	8009976 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b02      	cmp	r3, #2
 800995e:	d105      	bne.n	800996c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	4619      	mov	r1, r3
 8009964:	68b8      	ldr	r0, [r7, #8]
 8009966:	f000 fa11 	bl	8009d8c <FLASH_Program_Word>
 800996a:	e004      	b.n	8009976 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800996c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f000 f9d9 	bl	8009d28 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009976:	f24c 3050 	movw	r0, #50000	; 0xc350
 800997a:	f000 f995 	bl	8009ca8 <FLASH_WaitForLastOperation>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009982:	4b08      	ldr	r3, [pc, #32]	; (80099a4 <HAL_FLASH_Program+0xa4>)
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	4a07      	ldr	r2, [pc, #28]	; (80099a4 <HAL_FLASH_Program+0xa4>)
 8009988:	f023 0301 	bic.w	r3, r3, #1
 800998c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800998e:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <HAL_FLASH_Program+0xa0>)
 8009990:	2200      	movs	r2, #0
 8009992:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000934 	.word	0x20000934
 80099a4:	40023c00 	.word	0x40023c00

080099a8 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80099ba:	4b20      	ldr	r3, [pc, #128]	; (8009a3c <HAL_FLASH_Program_IT+0x94>)
 80099bc:	7e1b      	ldrb	r3, [r3, #24]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d101      	bne.n	80099c6 <HAL_FLASH_Program_IT+0x1e>
 80099c2:	2302      	movs	r3, #2
 80099c4:	e035      	b.n	8009a32 <HAL_FLASH_Program_IT+0x8a>
 80099c6:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <HAL_FLASH_Program_IT+0x94>)
 80099c8:	2201      	movs	r2, #1
 80099ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80099cc:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <HAL_FLASH_Program_IT+0x98>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	4a1b      	ldr	r2, [pc, #108]	; (8009a40 <HAL_FLASH_Program_IT+0x98>)
 80099d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099d6:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <HAL_FLASH_Program_IT+0x98>)
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	4a18      	ldr	r2, [pc, #96]	; (8009a40 <HAL_FLASH_Program_IT+0x98>)
 80099de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80099e2:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <HAL_FLASH_Program_IT+0x94>)
 80099e6:	2203      	movs	r2, #3
 80099e8:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 80099ea:	4a14      	ldr	r2, [pc, #80]	; (8009a3c <HAL_FLASH_Program_IT+0x94>)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d105      	bne.n	8009a02 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80099f6:	783b      	ldrb	r3, [r7, #0]
 80099f8:	4619      	mov	r1, r3
 80099fa:	68b8      	ldr	r0, [r7, #8]
 80099fc:	f000 fa0c 	bl	8009e18 <FLASH_Program_Byte>
 8009a00:	e016      	b.n	8009a30 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d105      	bne.n	8009a14 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009a08:	883b      	ldrh	r3, [r7, #0]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	68b8      	ldr	r0, [r7, #8]
 8009a0e:	f000 f9df 	bl	8009dd0 <FLASH_Program_HalfWord>
 8009a12:	e00d      	b.n	8009a30 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d105      	bne.n	8009a26 <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	68b8      	ldr	r0, [r7, #8]
 8009a20:	f000 f9b4 	bl	8009d8c <FLASH_Program_Word>
 8009a24:	e004      	b.n	8009a30 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 8009a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a2a:	68b8      	ldr	r0, [r7, #8]
 8009a2c:	f000 f97c 	bl	8009d28 <FLASH_Program_DoubleWord>
  }

  return status;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000934 	.word	0x20000934
 8009a40:	40023c00 	.word	0x40023c00

08009a44 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009a4e:	4b4b      	ldr	r3, [pc, #300]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d020      	beq.n	8009a9c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009a5a:	4b49      	ldr	r3, [pc, #292]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d107      	bne.n	8009a74 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009a64:	4b46      	ldr	r3, [pc, #280]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8009a6a:	4b45      	ldr	r3, [pc, #276]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e00b      	b.n	8009a8c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009a74:	4b42      	ldr	r3, [pc, #264]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d103      	bne.n	8009a86 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8009a7e:	4b40      	ldr	r3, [pc, #256]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	607b      	str	r3, [r7, #4]
 8009a84:	e002      	b.n	8009a8c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8009a86:	4b3e      	ldr	r3, [pc, #248]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8009a8c:	f000 f9e6 	bl	8009e5c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f881 	bl	8009b98 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009a96:	4b3a      	ldr	r3, [pc, #232]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009a9c:	4b37      	ldr	r3, [pc, #220]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d04a      	beq.n	8009b3e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009aa8:	4b34      	ldr	r3, [pc, #208]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009aaa:	2201      	movs	r2, #1
 8009aac:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009aae:	4b34      	ldr	r3, [pc, #208]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d12d      	bne.n	8009b14 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8009ab8:	4b31      	ldr	r3, [pc, #196]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	4a30      	ldr	r2, [pc, #192]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ac0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8009ac2:	4b2f      	ldr	r3, [pc, #188]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d015      	beq.n	8009af6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8009aca:	4b2d      	ldr	r3, [pc, #180]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f857 	bl	8009b84 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8009ad6:	4b2a      	ldr	r3, [pc, #168]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	3301      	adds	r3, #1
 8009adc:	4a28      	ldr	r2, [pc, #160]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ade:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8009ae0:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8009ae6:	4b26      	ldr	r3, [pc, #152]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009ae8:	7a1b      	ldrb	r3, [r3, #8]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fb84 	bl	800a1fc <FLASH_Erase_Sector>
 8009af4:	e023      	b.n	8009b3e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8009af6:	f04f 33ff 	mov.w	r3, #4294967295
 8009afa:	607b      	str	r3, [r7, #4]
 8009afc:	4a20      	ldr	r2, [pc, #128]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009b02:	4b1f      	ldr	r3, [pc, #124]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009b08:	f000 fcb6 	bl	800a478 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f839 	bl	8009b84 <HAL_FLASH_EndOfOperationCallback>
 8009b12:	e014      	b.n	8009b3e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009b14:	4b1a      	ldr	r3, [pc, #104]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d107      	bne.n	8009b2e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009b1e:	f000 fcab 	bl	800a478 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009b22:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f82c 	bl	8009b84 <HAL_FLASH_EndOfOperationCallback>
 8009b2c:	e004      	b.n	8009b38 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009b2e:	4b14      	ldr	r3, [pc, #80]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f826 	bl	8009b84 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009b38:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009b3e:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d114      	bne.n	8009b72 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b52:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009b54:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	4a08      	ldr	r2, [pc, #32]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b5e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009b60:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	4a05      	ldr	r2, [pc, #20]	; (8009b7c <HAL_FLASH_IRQHandler+0x138>)
 8009b66:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b6a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009b6c:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <HAL_FLASH_IRQHandler+0x13c>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	761a      	strb	r2, [r3, #24]
  }
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40023c00 	.word	0x40023c00
 8009b80:	20000934 	.word	0x20000934

08009b84 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <HAL_FLASH_Unlock+0x38>)
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da0b      	bge.n	8009bd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009bbe:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <HAL_FLASH_Unlock+0x38>)
 8009bc0:	4a09      	ldr	r2, [pc, #36]	; (8009be8 <HAL_FLASH_Unlock+0x3c>)
 8009bc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <HAL_FLASH_Unlock+0x38>)
 8009bc6:	4a09      	ldr	r2, [pc, #36]	; (8009bec <HAL_FLASH_Unlock+0x40>)
 8009bc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009bca:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <HAL_FLASH_Unlock+0x38>)
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da01      	bge.n	8009bd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	40023c00 	.word	0x40023c00
 8009be8:	45670123 	.word	0x45670123
 8009bec:	cdef89ab 	.word	0xcdef89ab

08009bf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <HAL_FLASH_Lock+0x1c>)
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	4a04      	ldr	r2, [pc, #16]	; (8009c0c <HAL_FLASH_Lock+0x1c>)
 8009bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bfe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40023c00 	.word	0x40023c00

08009c10 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8009c14:	4b09      	ldr	r3, [pc, #36]	; (8009c3c <HAL_FLASH_OB_Unlock+0x2c>)
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d007      	beq.n	8009c30 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8009c20:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <HAL_FLASH_OB_Unlock+0x2c>)
 8009c22:	4a07      	ldr	r2, [pc, #28]	; (8009c40 <HAL_FLASH_OB_Unlock+0x30>)
 8009c24:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <HAL_FLASH_OB_Unlock+0x2c>)
 8009c28:	4a06      	ldr	r2, [pc, #24]	; (8009c44 <HAL_FLASH_OB_Unlock+0x34>)
 8009c2a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e000      	b.n	8009c32 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	40023c00 	.word	0x40023c00
 8009c40:	08192a3b 	.word	0x08192a3b
 8009c44:	4c5d6e7f 	.word	0x4c5d6e7f

08009c48 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <HAL_FLASH_OB_Lock+0x1c>)
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <HAL_FLASH_OB_Lock+0x1c>)
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	40023c00 	.word	0x40023c00

08009c68 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8009c6c:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <HAL_FLASH_OB_Launch+0x24>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	4a06      	ldr	r2, [pc, #24]	; (8009c8c <HAL_FLASH_OB_Launch+0x24>)
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8009c7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009c80:	f000 f812 	bl	8009ca8 <FLASH_WaitForLastOperation>
 8009c84:	4603      	mov	r3, r0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40023c14 	.word	0x40023c14

08009c90 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8009c94:	4b03      	ldr	r3, [pc, #12]	; (8009ca4 <HAL_FLASH_GetError+0x14>)
 8009c96:	69db      	ldr	r3, [r3, #28]
}  
 8009c98:	4618      	mov	r0, r3
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20000934 	.word	0x20000934

08009ca8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009cb4:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <FLASH_WaitForLastOperation+0x78>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009cba:	f7fc fabb 	bl	8006234 <HAL_GetTick>
 8009cbe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009cc0:	e010      	b.n	8009ce4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d00c      	beq.n	8009ce4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <FLASH_WaitForLastOperation+0x38>
 8009cd0:	f7fc fab0 	bl	8006234 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d201      	bcs.n	8009ce4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e019      	b.n	8009d18 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009ce4:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <FLASH_WaitForLastOperation+0x7c>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e8      	bne.n	8009cc2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <FLASH_WaitForLastOperation+0x7c>)
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <FLASH_WaitForLastOperation+0x7c>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <FLASH_WaitForLastOperation+0x7c>)
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009d0e:	f000 f8a5 	bl	8009e5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009d16:	2300      	movs	r3, #0
  
}  
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20000934 	.word	0x20000934
 8009d24:	40023c00 	.word	0x40023c00

08009d28 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009d34:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <FLASH_Program_DoubleWord+0x60>)
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	4a13      	ldr	r2, [pc, #76]	; (8009d88 <FLASH_Program_DoubleWord+0x60>)
 8009d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009d40:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <FLASH_Program_DoubleWord+0x60>)
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	4a10      	ldr	r2, [pc, #64]	; (8009d88 <FLASH_Program_DoubleWord+0x60>)
 8009d46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <FLASH_Program_DoubleWord+0x60>)
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	4a0d      	ldr	r2, [pc, #52]	; (8009d88 <FLASH_Program_DoubleWord+0x60>)
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009d5e:	f3bf 8f6f 	isb	sy
}
 8009d62:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	000a      	movs	r2, r1
 8009d72:	2300      	movs	r3, #0
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	3104      	adds	r1, #4
 8009d78:	4613      	mov	r3, r2
 8009d7a:	600b      	str	r3, [r1, #0]
}
 8009d7c:	bf00      	nop
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	40023c00 	.word	0x40023c00

08009d8c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009d96:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <FLASH_Program_Word+0x40>)
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <FLASH_Program_Word+0x40>)
 8009d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009da2:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <FLASH_Program_Word+0x40>)
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	4a09      	ldr	r2, [pc, #36]	; (8009dcc <FLASH_Program_Word+0x40>)
 8009da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <FLASH_Program_Word+0x40>)
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	4a06      	ldr	r2, [pc, #24]	; (8009dcc <FLASH_Program_Word+0x40>)
 8009db4:	f043 0301 	orr.w	r3, r3, #1
 8009db8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	601a      	str	r2, [r3, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	40023c00 	.word	0x40023c00

08009dd0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009ddc:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <FLASH_Program_HalfWord+0x44>)
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	4a0c      	ldr	r2, [pc, #48]	; (8009e14 <FLASH_Program_HalfWord+0x44>)
 8009de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009de8:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <FLASH_Program_HalfWord+0x44>)
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	4a09      	ldr	r2, [pc, #36]	; (8009e14 <FLASH_Program_HalfWord+0x44>)
 8009dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009df2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009df4:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <FLASH_Program_HalfWord+0x44>)
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	4a06      	ldr	r2, [pc, #24]	; (8009e14 <FLASH_Program_HalfWord+0x44>)
 8009dfa:	f043 0301 	orr.w	r3, r3, #1
 8009dfe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	887a      	ldrh	r2, [r7, #2]
 8009e04:	801a      	strh	r2, [r3, #0]
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	40023c00 	.word	0x40023c00

08009e18 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <FLASH_Program_Byte+0x40>)
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	4a0b      	ldr	r2, [pc, #44]	; (8009e58 <FLASH_Program_Byte+0x40>)
 8009e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009e30:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <FLASH_Program_Byte+0x40>)
 8009e32:	4a09      	ldr	r2, [pc, #36]	; (8009e58 <FLASH_Program_Byte+0x40>)
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <FLASH_Program_Byte+0x40>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <FLASH_Program_Byte+0x40>)
 8009e3e:	f043 0301 	orr.w	r3, r3, #1
 8009e42:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	701a      	strb	r2, [r3, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	40023c00 	.word	0x40023c00

08009e5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009e60:	4b27      	ldr	r3, [pc, #156]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009e6c:	4b25      	ldr	r3, [pc, #148]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	f043 0310 	orr.w	r3, r3, #16
 8009e74:	4a23      	ldr	r2, [pc, #140]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009e76:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009e78:	4b21      	ldr	r3, [pc, #132]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009e7a:	2210      	movs	r2, #16
 8009e7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009e7e:	4b20      	ldr	r3, [pc, #128]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d008      	beq.n	8009e9c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009e8a:	4b1e      	ldr	r3, [pc, #120]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	f043 0308 	orr.w	r3, r3, #8
 8009e92:	4a1c      	ldr	r2, [pc, #112]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009e94:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009e98:	2220      	movs	r2, #32
 8009e9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009e9c:	4b18      	ldr	r3, [pc, #96]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d008      	beq.n	8009eba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009ea8:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f043 0304 	orr.w	r3, r3, #4
 8009eb0:	4a14      	ldr	r2, [pc, #80]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009eb2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009eb4:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009eb6:	2240      	movs	r2, #64	; 0x40
 8009eb8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009eba:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d008      	beq.n	8009ed8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	f043 0302 	orr.w	r3, r3, #2
 8009ece:	4a0d      	ldr	r2, [pc, #52]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009ed0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009ed4:	2280      	movs	r2, #128	; 0x80
 8009ed6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009ed8:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009ee4:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	f043 0320 	orr.w	r3, r3, #32
 8009eec:	4a05      	ldr	r2, [pc, #20]	; (8009f04 <FLASH_SetErrorCode+0xa8>)
 8009eee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009ef0:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <FLASH_SetErrorCode+0xa4>)
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	60da      	str	r2, [r3, #12]
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	40023c00 	.word	0x40023c00
 8009f04:	20000934 	.word	0x20000934

08009f08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f1a:	4b31      	ldr	r3, [pc, #196]	; (8009fe0 <HAL_FLASHEx_Erase+0xd8>)
 8009f1c:	7e1b      	ldrb	r3, [r3, #24]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <HAL_FLASHEx_Erase+0x1e>
 8009f22:	2302      	movs	r3, #2
 8009f24:	e058      	b.n	8009fd8 <HAL_FLASHEx_Erase+0xd0>
 8009f26:	4b2e      	ldr	r3, [pc, #184]	; (8009fe0 <HAL_FLASHEx_Erase+0xd8>)
 8009f28:	2201      	movs	r2, #1
 8009f2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f30:	f7ff feba 	bl	8009ca8 <FLASH_WaitForLastOperation>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d148      	bne.n	8009fd0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f04f 32ff 	mov.w	r2, #4294967295
 8009f44:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d115      	bne.n	8009f7a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f000 f92b 	bl	800a1b6 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f64:	f7ff fea0 	bl	8009ca8 <FLASH_WaitForLastOperation>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009f6c:	4b1d      	ldr	r3, [pc, #116]	; (8009fe4 <HAL_FLASHEx_Erase+0xdc>)
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	4a1c      	ldr	r2, [pc, #112]	; (8009fe4 <HAL_FLASHEx_Erase+0xdc>)
 8009f72:	f023 0304 	bic.w	r3, r3, #4
 8009f76:	6113      	str	r3, [r2, #16]
 8009f78:	e028      	b.n	8009fcc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	60bb      	str	r3, [r7, #8]
 8009f80:	e01c      	b.n	8009fbc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	4619      	mov	r1, r3
 8009f8a:	68b8      	ldr	r0, [r7, #8]
 8009f8c:	f000 f936 	bl	800a1fc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f94:	f7ff fe88 	bl	8009ca8 <FLASH_WaitForLastOperation>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009f9c:	4b11      	ldr	r3, [pc, #68]	; (8009fe4 <HAL_FLASHEx_Erase+0xdc>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4a10      	ldr	r2, [pc, #64]	; (8009fe4 <HAL_FLASHEx_Erase+0xdc>)
 8009fa2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009fa6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	601a      	str	r2, [r3, #0]
          break;
 8009fb4:	e00a      	b.n	8009fcc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	60bb      	str	r3, [r7, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68da      	ldr	r2, [r3, #12]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d3da      	bcc.n	8009f82 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009fcc:	f000 fa54 	bl	800a478 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fd0:	4b03      	ldr	r3, [pc, #12]	; (8009fe0 <HAL_FLASHEx_Erase+0xd8>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	761a      	strb	r2, [r3, #24]

  return status;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20000934 	.word	0x20000934
 8009fe4:	40023c00 	.word	0x40023c00

08009fe8 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009ff4:	4b25      	ldr	r3, [pc, #148]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 8009ff6:	7e1b      	ldrb	r3, [r3, #24]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <HAL_FLASHEx_Erase_IT+0x18>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e040      	b.n	800a082 <HAL_FLASHEx_Erase_IT+0x9a>
 800a000:	4b22      	ldr	r3, [pc, #136]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a002:	2201      	movs	r2, #1
 800a004:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a006:	4b22      	ldr	r3, [pc, #136]	; (800a090 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	4a21      	ldr	r2, [pc, #132]	; (800a090 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a00c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a010:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a012:	4b1f      	ldr	r3, [pc, #124]	; (800a090 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	4a1e      	ldr	r2, [pc, #120]	; (800a090 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a01c:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800a01e:	4b1c      	ldr	r3, [pc, #112]	; (800a090 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a020:	22f3      	movs	r2, #243	; 0xf3
 800a022:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d110      	bne.n	800a04e <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800a02c:	4b17      	ldr	r3, [pc, #92]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a02e:	2202      	movs	r2, #2
 800a030:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	4a15      	ldr	r2, [pc, #84]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a038:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	4619      	mov	r1, r3
 800a046:	4610      	mov	r0, r2
 800a048:	f000 f8b5 	bl	800a1b6 <FLASH_MassErase>
 800a04c:	e018      	b.n	800a080 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a050:	2201      	movs	r2, #1
 800a052:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	4a0c      	ldr	r2, [pc, #48]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a05a:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a062:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	4b08      	ldr	r3, [pc, #32]	; (800a08c <HAL_FLASHEx_Erase_IT+0xa4>)
 800a06c:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f000 f8be 	bl	800a1fc <FLASH_Erase_Sector>
  }

  return status;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000934 	.word	0x20000934
 800a090:	40023c00 	.word	0x40023c00

0800a094 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a0a0:	4b32      	ldr	r3, [pc, #200]	; (800a16c <HAL_FLASHEx_OBProgram+0xd8>)
 800a0a2:	7e1b      	ldrb	r3, [r3, #24]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d101      	bne.n	800a0ac <HAL_FLASHEx_OBProgram+0x18>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e05b      	b.n	800a164 <HAL_FLASHEx_OBProgram+0xd0>
 800a0ac:	4b2f      	ldr	r3, [pc, #188]	; (800a16c <HAL_FLASHEx_OBProgram+0xd8>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d018      	beq.n	800a0f0 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d10a      	bne.n	800a0dc <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f000 f8db 	bl	800a28c <FLASH_OB_EnableWRP>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
 800a0da:	e009      	b.n	800a0f0 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689a      	ldr	r2, [r3, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f000 f8f2 	bl	800a2d0 <FLASH_OB_DisableWRP>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d007      	beq.n	800a10c <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f904 	bl	800a310 <FLASH_OB_RDP_LevelConfig>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d013      	beq.n	800a140 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	7e1b      	ldrb	r3, [r3, #24]
 800a11c:	f003 0320 	and.w	r3, r3, #32
 800a120:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12a:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a130:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a134:	b2db      	uxtb	r3, r3
 800a136:	461a      	mov	r2, r3
 800a138:	f000 f904 	bl	800a344 <FLASH_OB_UserConfig>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0308 	and.w	r3, r3, #8
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d007      	beq.n	800a15c <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	4618      	mov	r0, r3
 800a154:	f000 f926 	bl	800a3a4 <FLASH_OB_BOR_LevelConfig>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a15c:	4b03      	ldr	r3, [pc, #12]	; (800a16c <HAL_FLASHEx_OBProgram+0xd8>)
 800a15e:	2200      	movs	r2, #0
 800a160:	761a      	strb	r2, [r3, #24]

  return status;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000934 	.word	0x20000934

0800a170 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	220f      	movs	r2, #15
 800a17c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a17e:	f000 f93f 	bl	800a400 <FLASH_OB_GetWRP>
 800a182:	4603      	mov	r3, r0
 800a184:	461a      	mov	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a18a:	f000 f945 	bl	800a418 <FLASH_OB_GetRDP>
 800a18e:	4603      	mov	r3, r0
 800a190:	461a      	mov	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a196:	f000 f923 	bl	800a3e0 <FLASH_OB_GetUser>
 800a19a:	4603      	mov	r3, r0
 800a19c:	461a      	mov	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a1a2:	f000 f959 	bl	800a458 <FLASH_OB_GetBOR>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	615a      	str	r2, [r3, #20]
}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	4603      	mov	r3, r0
 800a1be:	6039      	str	r1, [r7, #0]
 800a1c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <FLASH_MassErase+0x42>)
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <FLASH_MassErase+0x42>)
 800a1c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a1ce:	4b0a      	ldr	r3, [pc, #40]	; (800a1f8 <FLASH_MassErase+0x42>)
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	4a09      	ldr	r2, [pc, #36]	; (800a1f8 <FLASH_MassErase+0x42>)
 800a1d4:	f043 0304 	orr.w	r3, r3, #4
 800a1d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <FLASH_MassErase+0x42>)
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	021b      	lsls	r3, r3, #8
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	4a04      	ldr	r2, [pc, #16]	; (800a1f8 <FLASH_MassErase+0x42>)
 800a1e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ea:	6113      	str	r3, [r2, #16]
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	40023c00 	.word	0x40023c00

0800a1fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a212:	2300      	movs	r3, #0
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	e010      	b.n	800a23a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d103      	bne.n	800a226 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a21e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e009      	b.n	800a23a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a226:	78fb      	ldrb	r3, [r7, #3]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d103      	bne.n	800a234 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a22c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e002      	b.n	800a23a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a234:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a238:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a23a:	4b13      	ldr	r3, [pc, #76]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	4a12      	ldr	r2, [pc, #72]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a244:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a246:	4b10      	ldr	r3, [pc, #64]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	490f      	ldr	r1, [pc, #60]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a252:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a25c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a25e:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a260:	691a      	ldr	r2, [r3, #16]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	00db      	lsls	r3, r3, #3
 800a266:	4313      	orrs	r3, r2
 800a268:	4a07      	ldr	r2, [pc, #28]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a26a:	f043 0302 	orr.w	r3, r3, #2
 800a26e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a270:	4b05      	ldr	r3, [pc, #20]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	4a04      	ldr	r2, [pc, #16]	; (800a288 <FLASH_Erase_Sector+0x8c>)
 800a276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a27a:	6113      	str	r3, [r2, #16]
}
 800a27c:	bf00      	nop
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	40023c00 	.word	0x40023c00

0800a28c <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a29a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a29e:	f7ff fd03 	bl	8009ca8 <FLASH_WaitForLastOperation>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a2ac:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <FLASH_OB_EnableWRP+0x40>)
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	43db      	mvns	r3, r3
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4904      	ldr	r1, [pc, #16]	; (800a2cc <FLASH_OB_EnableWRP+0x40>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	40023c16 	.word	0x40023c16

0800a2d0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a2de:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a2e2:	f7ff fce1 	bl	8009ca8 <FLASH_WaitForLastOperation>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d108      	bne.n	800a302 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a2f0:	4b06      	ldr	r3, [pc, #24]	; (800a30c <FLASH_OB_DisableWRP+0x3c>)
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4904      	ldr	r1, [pc, #16]	; (800a30c <FLASH_OB_DisableWRP+0x3c>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	40023c16 	.word	0x40023c16

0800a310 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a31e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a322:	f7ff fcc1 	bl	8009ca8 <FLASH_WaitForLastOperation>
 800a326:	4603      	mov	r3, r0
 800a328:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a330:	4a03      	ldr	r2, [pc, #12]	; (800a340 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	40023c15 	.word	0x40023c15

0800a344 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	71fb      	strb	r3, [r7, #7]
 800a34e:	460b      	mov	r3, r1
 800a350:	71bb      	strb	r3, [r7, #6]
 800a352:	4613      	mov	r3, r2
 800a354:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a356:	23ff      	movs	r3, #255	; 0xff
 800a358:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a35e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a362:	f7ff fca1 	bl	8009ca8 <FLASH_WaitForLastOperation>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d111      	bne.n	800a394 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a370:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <FLASH_OB_UserConfig+0x5c>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a37c:	79ba      	ldrb	r2, [r7, #6]
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	4313      	orrs	r3, r2
 800a382:	b2da      	uxtb	r2, r3
 800a384:	797b      	ldrb	r3, [r7, #5]
 800a386:	4313      	orrs	r3, r2
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4905      	ldr	r1, [pc, #20]	; (800a3a0 <FLASH_OB_UserConfig+0x5c>)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	4313      	orrs	r3, r2
 800a390:	b2db      	uxtb	r3, r3
 800a392:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	40023c14 	.word	0x40023c14

0800a3a4 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a3b6:	f023 030c 	bic.w	r3, r3, #12
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800a3be:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	4905      	ldr	r1, [pc, #20]	; (800a3dc <FLASH_OB_BOR_LevelConfig+0x38>)
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0

}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	40023c14 	.word	0x40023c14

0800a3e0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800a3e4:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <FLASH_OB_GetUser+0x1c>)
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	f023 031f 	bic.w	r3, r3, #31
 800a3ee:	b2db      	uxtb	r3, r3
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	40023c00 	.word	0x40023c00

0800a400 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800a404:	4b03      	ldr	r3, [pc, #12]	; (800a414 <FLASH_OB_GetWRP+0x14>)
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b29b      	uxth	r3, r3
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	40023c16 	.word	0x40023c16

0800a418 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800a41e:	23aa      	movs	r3, #170	; 0xaa
 800a420:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800a422:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <FLASH_OB_GetRDP+0x3c>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2bcc      	cmp	r3, #204	; 0xcc
 800a42a:	d102      	bne.n	800a432 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800a42c:	23cc      	movs	r3, #204	; 0xcc
 800a42e:	71fb      	strb	r3, [r7, #7]
 800a430:	e009      	b.n	800a446 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800a432:	4b08      	ldr	r3, [pc, #32]	; (800a454 <FLASH_OB_GetRDP+0x3c>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2baa      	cmp	r3, #170	; 0xaa
 800a43a:	d102      	bne.n	800a442 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800a43c:	23aa      	movs	r3, #170	; 0xaa
 800a43e:	71fb      	strb	r3, [r7, #7]
 800a440:	e001      	b.n	800a446 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800a442:	2355      	movs	r3, #85	; 0x55
 800a444:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800a446:	79fb      	ldrb	r3, [r7, #7]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	40023c15 	.word	0x40023c15

0800a458 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800a458:	b480      	push	{r7}
 800a45a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800a45c:	4b05      	ldr	r3, [pc, #20]	; (800a474 <FLASH_OB_GetBOR+0x1c>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	f003 030c 	and.w	r3, r3, #12
 800a466:	b2db      	uxtb	r3, r3
}
 800a468:	4618      	mov	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40023c14 	.word	0x40023c14

0800a478 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a47c:	4b20      	ldr	r3, [pc, #128]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a484:	2b00      	cmp	r3, #0
 800a486:	d017      	beq.n	800a4b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a488:	4b1d      	ldr	r3, [pc, #116]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a48e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a492:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a494:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a19      	ldr	r2, [pc, #100]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a49a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	4b17      	ldr	r3, [pc, #92]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a16      	ldr	r2, [pc, #88]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a4ac:	4b14      	ldr	r3, [pc, #80]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a13      	ldr	r2, [pc, #76]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a4b8:	4b11      	ldr	r3, [pc, #68]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d017      	beq.n	800a4f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a4c4:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a0d      	ldr	r2, [pc, #52]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a0a      	ldr	r2, [pc, #40]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4da:	6013      	str	r3, [r2, #0]
 800a4dc:	4b08      	ldr	r3, [pc, #32]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a07      	ldr	r2, [pc, #28]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a04      	ldr	r2, [pc, #16]	; (800a500 <FLASH_FlushCaches+0x88>)
 800a4ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4f2:	6013      	str	r3, [r2, #0]
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40023c00 	.word	0x40023c00

0800a504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a504:	b480      	push	{r7}
 800a506:	b089      	sub	sp, #36	; 0x24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a50e:	2300      	movs	r3, #0
 800a510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a512:	2300      	movs	r3, #0
 800a514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a516:	2300      	movs	r3, #0
 800a518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a51a:	2300      	movs	r3, #0
 800a51c:	61fb      	str	r3, [r7, #28]
 800a51e:	e16b      	b.n	800a7f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a520:	2201      	movs	r2, #1
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	fa02 f303 	lsl.w	r3, r2, r3
 800a528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4013      	ands	r3, r2
 800a532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	429a      	cmp	r2, r3
 800a53a:	f040 815a 	bne.w	800a7f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	2b01      	cmp	r3, #1
 800a548:	d005      	beq.n	800a556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a552:	2b02      	cmp	r3, #2
 800a554:	d130      	bne.n	800a5b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	2203      	movs	r2, #3
 800a562:	fa02 f303 	lsl.w	r3, r2, r3
 800a566:	43db      	mvns	r3, r3
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	4013      	ands	r3, r2
 800a56c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	68da      	ldr	r2, [r3, #12]
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	fa02 f303 	lsl.w	r3, r2, r3
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a58c:	2201      	movs	r2, #1
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	fa02 f303 	lsl.w	r3, r2, r3
 800a594:	43db      	mvns	r3, r3
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	4013      	ands	r3, r2
 800a59a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	091b      	lsrs	r3, r3, #4
 800a5a2:	f003 0201 	and.w	r2, r3, #1
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f003 0303 	and.w	r3, r3, #3
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d017      	beq.n	800a5f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e8:	69ba      	ldr	r2, [r7, #24]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d123      	bne.n	800a648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	08da      	lsrs	r2, r3, #3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	3208      	adds	r2, #8
 800a608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	220f      	movs	r2, #15
 800a618:	fa02 f303 	lsl.w	r3, r2, r3
 800a61c:	43db      	mvns	r3, r3
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	4013      	ands	r3, r2
 800a622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	691a      	ldr	r2, [r3, #16]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	fa02 f303 	lsl.w	r3, r2, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	4313      	orrs	r3, r2
 800a638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	08da      	lsrs	r2, r3, #3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3208      	adds	r2, #8
 800a642:	69b9      	ldr	r1, [r7, #24]
 800a644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	2203      	movs	r2, #3
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	43db      	mvns	r3, r3
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	4013      	ands	r3, r2
 800a65e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f003 0203 	and.w	r2, r3, #3
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	fa02 f303 	lsl.w	r3, r2, r3
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	4313      	orrs	r3, r2
 800a674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69ba      	ldr	r2, [r7, #24]
 800a67a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80b4 	beq.w	800a7f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	4b60      	ldr	r3, [pc, #384]	; (800a810 <HAL_GPIO_Init+0x30c>)
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	4a5f      	ldr	r2, [pc, #380]	; (800a810 <HAL_GPIO_Init+0x30c>)
 800a694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a698:	6453      	str	r3, [r2, #68]	; 0x44
 800a69a:	4b5d      	ldr	r3, [pc, #372]	; (800a810 <HAL_GPIO_Init+0x30c>)
 800a69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a2:	60fb      	str	r3, [r7, #12]
 800a6a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a6a6:	4a5b      	ldr	r2, [pc, #364]	; (800a814 <HAL_GPIO_Init+0x310>)
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	089b      	lsrs	r3, r3, #2
 800a6ac:	3302      	adds	r3, #2
 800a6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	220f      	movs	r2, #15
 800a6be:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c2:	43db      	mvns	r3, r3
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a52      	ldr	r2, [pc, #328]	; (800a818 <HAL_GPIO_Init+0x314>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d02b      	beq.n	800a72a <HAL_GPIO_Init+0x226>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a51      	ldr	r2, [pc, #324]	; (800a81c <HAL_GPIO_Init+0x318>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d025      	beq.n	800a726 <HAL_GPIO_Init+0x222>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a50      	ldr	r2, [pc, #320]	; (800a820 <HAL_GPIO_Init+0x31c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d01f      	beq.n	800a722 <HAL_GPIO_Init+0x21e>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a4f      	ldr	r2, [pc, #316]	; (800a824 <HAL_GPIO_Init+0x320>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d019      	beq.n	800a71e <HAL_GPIO_Init+0x21a>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a4e      	ldr	r2, [pc, #312]	; (800a828 <HAL_GPIO_Init+0x324>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d013      	beq.n	800a71a <HAL_GPIO_Init+0x216>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a4d      	ldr	r2, [pc, #308]	; (800a82c <HAL_GPIO_Init+0x328>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00d      	beq.n	800a716 <HAL_GPIO_Init+0x212>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a4c      	ldr	r2, [pc, #304]	; (800a830 <HAL_GPIO_Init+0x32c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d007      	beq.n	800a712 <HAL_GPIO_Init+0x20e>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a4b      	ldr	r2, [pc, #300]	; (800a834 <HAL_GPIO_Init+0x330>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d101      	bne.n	800a70e <HAL_GPIO_Init+0x20a>
 800a70a:	2307      	movs	r3, #7
 800a70c:	e00e      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a70e:	2308      	movs	r3, #8
 800a710:	e00c      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a712:	2306      	movs	r3, #6
 800a714:	e00a      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a716:	2305      	movs	r3, #5
 800a718:	e008      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a71a:	2304      	movs	r3, #4
 800a71c:	e006      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a71e:	2303      	movs	r3, #3
 800a720:	e004      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a722:	2302      	movs	r3, #2
 800a724:	e002      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a726:	2301      	movs	r3, #1
 800a728:	e000      	b.n	800a72c <HAL_GPIO_Init+0x228>
 800a72a:	2300      	movs	r3, #0
 800a72c:	69fa      	ldr	r2, [r7, #28]
 800a72e:	f002 0203 	and.w	r2, r2, #3
 800a732:	0092      	lsls	r2, r2, #2
 800a734:	4093      	lsls	r3, r2
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	4313      	orrs	r3, r2
 800a73a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a73c:	4935      	ldr	r1, [pc, #212]	; (800a814 <HAL_GPIO_Init+0x310>)
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	089b      	lsrs	r3, r3, #2
 800a742:	3302      	adds	r3, #2
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a74a:	4b3b      	ldr	r3, [pc, #236]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	43db      	mvns	r3, r3
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	4013      	ands	r3, r2
 800a758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a76e:	4a32      	ldr	r2, [pc, #200]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a774:	4b30      	ldr	r3, [pc, #192]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	43db      	mvns	r3, r3
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	4013      	ands	r3, r2
 800a782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	4313      	orrs	r3, r2
 800a796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a798:	4a27      	ldr	r2, [pc, #156]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a79e:	4b26      	ldr	r3, [pc, #152]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	43db      	mvns	r3, r3
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a7ba:	69ba      	ldr	r2, [r7, #24]
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a7c2:	4a1d      	ldr	r2, [pc, #116]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a7c8:	4b1b      	ldr	r3, [pc, #108]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	43db      	mvns	r3, r3
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a7ec:	4a12      	ldr	r2, [pc, #72]	; (800a838 <HAL_GPIO_Init+0x334>)
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	2b0f      	cmp	r3, #15
 800a7fc:	f67f ae90 	bls.w	800a520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	3724      	adds	r7, #36	; 0x24
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	40023800 	.word	0x40023800
 800a814:	40013800 	.word	0x40013800
 800a818:	40020000 	.word	0x40020000
 800a81c:	40020400 	.word	0x40020400
 800a820:	40020800 	.word	0x40020800
 800a824:	40020c00 	.word	0x40020c00
 800a828:	40021000 	.word	0x40021000
 800a82c:	40021400 	.word	0x40021400
 800a830:	40021800 	.word	0x40021800
 800a834:	40021c00 	.word	0x40021c00
 800a838:	40013c00 	.word	0x40013c00

0800a83c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a846:	2300      	movs	r3, #0
 800a848:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a84e:	2300      	movs	r3, #0
 800a850:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	e0cd      	b.n	800a9f4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a858:	2201      	movs	r2, #1
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4013      	ands	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	429a      	cmp	r2, r3
 800a870:	f040 80bd 	bne.w	800a9ee <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a874:	4a65      	ldr	r2, [pc, #404]	; (800aa0c <HAL_GPIO_DeInit+0x1d0>)
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	089b      	lsrs	r3, r3, #2
 800a87a:	3302      	adds	r3, #2
 800a87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a880:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	220f      	movs	r2, #15
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	4013      	ands	r3, r2
 800a894:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a5d      	ldr	r2, [pc, #372]	; (800aa10 <HAL_GPIO_DeInit+0x1d4>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d02b      	beq.n	800a8f6 <HAL_GPIO_DeInit+0xba>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a5c      	ldr	r2, [pc, #368]	; (800aa14 <HAL_GPIO_DeInit+0x1d8>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d025      	beq.n	800a8f2 <HAL_GPIO_DeInit+0xb6>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a5b      	ldr	r2, [pc, #364]	; (800aa18 <HAL_GPIO_DeInit+0x1dc>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d01f      	beq.n	800a8ee <HAL_GPIO_DeInit+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a5a      	ldr	r2, [pc, #360]	; (800aa1c <HAL_GPIO_DeInit+0x1e0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d019      	beq.n	800a8ea <HAL_GPIO_DeInit+0xae>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a59      	ldr	r2, [pc, #356]	; (800aa20 <HAL_GPIO_DeInit+0x1e4>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d013      	beq.n	800a8e6 <HAL_GPIO_DeInit+0xaa>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a58      	ldr	r2, [pc, #352]	; (800aa24 <HAL_GPIO_DeInit+0x1e8>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00d      	beq.n	800a8e2 <HAL_GPIO_DeInit+0xa6>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a57      	ldr	r2, [pc, #348]	; (800aa28 <HAL_GPIO_DeInit+0x1ec>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d007      	beq.n	800a8de <HAL_GPIO_DeInit+0xa2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a56      	ldr	r2, [pc, #344]	; (800aa2c <HAL_GPIO_DeInit+0x1f0>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d101      	bne.n	800a8da <HAL_GPIO_DeInit+0x9e>
 800a8d6:	2307      	movs	r3, #7
 800a8d8:	e00e      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8da:	2308      	movs	r3, #8
 800a8dc:	e00c      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8de:	2306      	movs	r3, #6
 800a8e0:	e00a      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8e2:	2305      	movs	r3, #5
 800a8e4:	e008      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8e6:	2304      	movs	r3, #4
 800a8e8:	e006      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e004      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e002      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <HAL_GPIO_DeInit+0xbc>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	f002 0203 	and.w	r2, r2, #3
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	4093      	lsls	r3, r2
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	429a      	cmp	r2, r3
 800a906:	d132      	bne.n	800a96e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a908:	4b49      	ldr	r3, [pc, #292]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	43db      	mvns	r3, r3
 800a910:	4947      	ldr	r1, [pc, #284]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a912:	4013      	ands	r3, r2
 800a914:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a916:	4b46      	ldr	r3, [pc, #280]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	43db      	mvns	r3, r3
 800a91e:	4944      	ldr	r1, [pc, #272]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a920:	4013      	ands	r3, r2
 800a922:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a924:	4b42      	ldr	r3, [pc, #264]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	43db      	mvns	r3, r3
 800a92c:	4940      	ldr	r1, [pc, #256]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a92e:	4013      	ands	r3, r2
 800a930:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a932:	4b3f      	ldr	r3, [pc, #252]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	43db      	mvns	r3, r3
 800a93a:	493d      	ldr	r1, [pc, #244]	; (800aa30 <HAL_GPIO_DeInit+0x1f4>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	220f      	movs	r2, #15
 800a94a:	fa02 f303 	lsl.w	r3, r2, r3
 800a94e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a950:	4a2e      	ldr	r2, [pc, #184]	; (800aa0c <HAL_GPIO_DeInit+0x1d0>)
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	089b      	lsrs	r3, r3, #2
 800a956:	3302      	adds	r3, #2
 800a958:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	43da      	mvns	r2, r3
 800a960:	482a      	ldr	r0, [pc, #168]	; (800aa0c <HAL_GPIO_DeInit+0x1d0>)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	089b      	lsrs	r3, r3, #2
 800a966:	400a      	ands	r2, r1
 800a968:	3302      	adds	r3, #2
 800a96a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	2103      	movs	r1, #3
 800a978:	fa01 f303 	lsl.w	r3, r1, r3
 800a97c:	43db      	mvns	r3, r3
 800a97e:	401a      	ands	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	08da      	lsrs	r2, r3, #3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3208      	adds	r2, #8
 800a98c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	220f      	movs	r2, #15
 800a99a:	fa02 f303 	lsl.w	r3, r2, r3
 800a99e:	43db      	mvns	r3, r3
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	08d2      	lsrs	r2, r2, #3
 800a9a4:	4019      	ands	r1, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3208      	adds	r2, #8
 800a9aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	2103      	movs	r1, #3
 800a9b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9bc:	43db      	mvns	r3, r3
 800a9be:	401a      	ands	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d0:	43db      	mvns	r3, r3
 800a9d2:	401a      	ands	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689a      	ldr	r2, [r3, #8]
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	005b      	lsls	r3, r3, #1
 800a9e0:	2103      	movs	r1, #3
 800a9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e6:	43db      	mvns	r3, r3
 800a9e8:	401a      	ands	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b0f      	cmp	r3, #15
 800a9f8:	f67f af2e 	bls.w	800a858 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	40013800 	.word	0x40013800
 800aa10:	40020000 	.word	0x40020000
 800aa14:	40020400 	.word	0x40020400
 800aa18:	40020800 	.word	0x40020800
 800aa1c:	40020c00 	.word	0x40020c00
 800aa20:	40021000 	.word	0x40021000
 800aa24:	40021400 	.word	0x40021400
 800aa28:	40021800 	.word	0x40021800
 800aa2c:	40021c00 	.word	0x40021c00
 800aa30:	40013c00 	.word	0x40013c00

0800aa34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	887b      	ldrh	r3, [r7, #2]
 800aa46:	4013      	ands	r3, r2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]
 800aa50:	e001      	b.n	800aa56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	807b      	strh	r3, [r7, #2]
 800aa70:	4613      	mov	r3, r2
 800aa72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aa74:	787b      	ldrb	r3, [r7, #1]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa7a:	887a      	ldrh	r2, [r7, #2]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aa80:	e003      	b.n	800aa8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aa82:	887b      	ldrh	r3, [r7, #2]
 800aa84:	041a      	lsls	r2, r3, #16
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	619a      	str	r2, [r3, #24]
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aaa8:	887a      	ldrh	r2, [r7, #2]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4013      	ands	r3, r2
 800aaae:	041a      	lsls	r2, r3, #16
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	43d9      	mvns	r1, r3
 800aab4:	887b      	ldrh	r3, [r7, #2]
 800aab6:	400b      	ands	r3, r1
 800aab8:	431a      	orrs	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	619a      	str	r2, [r3, #24]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b085      	sub	sp, #20
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800aad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aada:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800aadc:	887a      	ldrh	r2, [r7, #2]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800aaea:	887a      	ldrh	r2, [r7, #2]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e000      	b.n	800ab0e <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
  }
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	4603      	mov	r3, r0
 800ab22:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ab24:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800ab26:	695a      	ldr	r2, [r3, #20]
 800ab28:	88fb      	ldrh	r3, [r7, #6]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d006      	beq.n	800ab3e <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ab30:	4a05      	ldr	r2, [pc, #20]	; (800ab48 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800ab32:	88fb      	ldrh	r3, [r7, #6]
 800ab34:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ab36:	88fb      	ldrh	r3, [r7, #6]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f807 	bl	800ab4c <HAL_GPIO_EXTI_Callback>
  }
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	40013c00 	.word	0x40013c00

0800ab4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e12b      	b.n	800adcc <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d106      	bne.n	800ab8e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7fa fccf 	bl	800552c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2224      	movs	r2, #36	; 0x24
 800ab92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f022 0201 	bic.w	r2, r2, #1
 800aba4:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abb4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abc4:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800abc6:	f007 f891 	bl	8011cec <HAL_RCC_GetPCLK1Freq>
 800abca:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4a80      	ldr	r2, [pc, #512]	; (800add4 <HAL_I2C_Init+0x272>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d807      	bhi.n	800abe6 <HAL_I2C_Init+0x84>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4a7f      	ldr	r2, [pc, #508]	; (800add8 <HAL_I2C_Init+0x276>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	bf94      	ite	ls
 800abde:	2301      	movls	r3, #1
 800abe0:	2300      	movhi	r3, #0
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	e006      	b.n	800abf4 <HAL_I2C_Init+0x92>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4a7c      	ldr	r2, [pc, #496]	; (800addc <HAL_I2C_Init+0x27a>)
 800abea:	4293      	cmp	r3, r2
 800abec:	bf94      	ite	ls
 800abee:	2301      	movls	r3, #1
 800abf0:	2300      	movhi	r3, #0
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e0e7      	b.n	800adcc <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4a78      	ldr	r2, [pc, #480]	; (800ade0 <HAL_I2C_Init+0x27e>)
 800ac00:	fba2 2303 	umull	r2, r3, r2, r3
 800ac04:	0c9b      	lsrs	r3, r3, #18
 800ac06:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	4a6a      	ldr	r2, [pc, #424]	; (800add4 <HAL_I2C_Init+0x272>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d802      	bhi.n	800ac36 <HAL_I2C_Init+0xd4>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	3301      	adds	r3, #1
 800ac34:	e009      	b.n	800ac4a <HAL_I2C_Init+0xe8>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac3c:	fb02 f303 	mul.w	r3, r2, r3
 800ac40:	4a68      	ldr	r2, [pc, #416]	; (800ade4 <HAL_I2C_Init+0x282>)
 800ac42:	fba2 2303 	umull	r2, r3, r2, r3
 800ac46:	099b      	lsrs	r3, r3, #6
 800ac48:	3301      	adds	r3, #1
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ac5c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	495b      	ldr	r1, [pc, #364]	; (800add4 <HAL_I2C_Init+0x272>)
 800ac66:	428b      	cmp	r3, r1
 800ac68:	d819      	bhi.n	800ac9e <HAL_I2C_Init+0x13c>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1e59      	subs	r1, r3, #1
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac78:	1c59      	adds	r1, r3, #1
 800ac7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ac7e:	400b      	ands	r3, r1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00a      	beq.n	800ac9a <HAL_I2C_Init+0x138>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	1e59      	subs	r1, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac92:	3301      	adds	r3, #1
 800ac94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac98:	e051      	b.n	800ad3e <HAL_I2C_Init+0x1dc>
 800ac9a:	2304      	movs	r3, #4
 800ac9c:	e04f      	b.n	800ad3e <HAL_I2C_Init+0x1dc>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d111      	bne.n	800acca <HAL_I2C_Init+0x168>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	1e58      	subs	r0, r3, #1
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6859      	ldr	r1, [r3, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	440b      	add	r3, r1
 800acb4:	fbb0 f3f3 	udiv	r3, r0, r3
 800acb8:	3301      	adds	r3, #1
 800acba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf0c      	ite	eq
 800acc2:	2301      	moveq	r3, #1
 800acc4:	2300      	movne	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	e012      	b.n	800acf0 <HAL_I2C_Init+0x18e>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	1e58      	subs	r0, r3, #1
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6859      	ldr	r1, [r3, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	440b      	add	r3, r1
 800acd8:	0099      	lsls	r1, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	fbb0 f3f3 	udiv	r3, r0, r3
 800ace0:	3301      	adds	r3, #1
 800ace2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bf0c      	ite	eq
 800acea:	2301      	moveq	r3, #1
 800acec:	2300      	movne	r3, #0
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <HAL_I2C_Init+0x196>
 800acf4:	2301      	movs	r3, #1
 800acf6:	e022      	b.n	800ad3e <HAL_I2C_Init+0x1dc>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10e      	bne.n	800ad1e <HAL_I2C_Init+0x1bc>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	1e58      	subs	r0, r3, #1
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6859      	ldr	r1, [r3, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	440b      	add	r3, r1
 800ad0e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad12:	3301      	adds	r3, #1
 800ad14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad1c:	e00f      	b.n	800ad3e <HAL_I2C_Init+0x1dc>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	1e58      	subs	r0, r3, #1
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6859      	ldr	r1, [r3, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	0099      	lsls	r1, r3, #2
 800ad2e:	440b      	add	r3, r1
 800ad30:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad34:	3301      	adds	r3, #1
 800ad36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad3e:	6879      	ldr	r1, [r7, #4]
 800ad40:	6809      	ldr	r1, [r1, #0]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	69da      	ldr	r2, [r3, #28]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	431a      	orrs	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ad6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	6911      	ldr	r1, [r2, #16]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	68d2      	ldr	r2, [r2, #12]
 800ad78:	4311      	orrs	r1, r2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	6812      	ldr	r2, [r2, #0]
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	695a      	ldr	r2, [r3, #20]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	431a      	orrs	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0201 	orr.w	r2, r2, #1
 800adac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2220      	movs	r2, #32
 800adb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	000186a0 	.word	0x000186a0
 800add8:	001e847f 	.word	0x001e847f
 800addc:	003d08ff 	.word	0x003d08ff
 800ade0:	431bde83 	.word	0x431bde83
 800ade4:	10624dd3 	.word	0x10624dd3

0800ade8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e021      	b.n	800ae3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2224      	movs	r2, #36	; 0x24
 800adfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0201 	bic.w	r2, r2, #1
 800ae10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7fa fbd2 	bl	80055bc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b088      	sub	sp, #32
 800ae4a:	af02      	add	r7, sp, #8
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	461a      	mov	r2, r3
 800ae52:	460b      	mov	r3, r1
 800ae54:	817b      	strh	r3, [r7, #10]
 800ae56:	4613      	mov	r3, r2
 800ae58:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae5a:	f7fb f9eb 	bl	8006234 <HAL_GetTick>
 800ae5e:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	f040 80e0 	bne.w	800b02e <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	2319      	movs	r3, #25
 800ae74:	2201      	movs	r2, #1
 800ae76:	4970      	ldr	r1, [pc, #448]	; (800b038 <HAL_I2C_Master_Transmit+0x1f2>)
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f005 fd97 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ae84:	2302      	movs	r3, #2
 800ae86:	e0d3      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_I2C_Master_Transmit+0x50>
 800ae92:	2302      	movs	r3, #2
 800ae94:	e0cc      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1ea>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d007      	beq.n	800aebc <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f042 0201 	orr.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aeca:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2221      	movs	r2, #33	; 0x21
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2210      	movs	r2, #16
 800aed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	893a      	ldrh	r2, [r7, #8]
 800aeec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4a50      	ldr	r2, [pc, #320]	; (800b03c <HAL_I2C_Master_Transmit+0x1f6>)
 800aefc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800aefe:	8979      	ldrh	r1, [r7, #10]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	6a3a      	ldr	r2, [r7, #32]
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f005 f8c9 	bl	801009c <I2C_MasterRequestWrite>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e08d      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af14:	2300      	movs	r3, #0
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	613b      	str	r3, [r7, #16]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800af2a:	e066      	b.n	800affa <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	6a39      	ldr	r1, [r7, #32]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f005 fe11 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00d      	beq.n	800af58 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	2b04      	cmp	r3, #4
 800af42:	d107      	bne.n	800af54 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e06b      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af72:	b29b      	uxth	r3, r3
 800af74:	3b01      	subs	r3, #1
 800af76:	b29a      	uxth	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af80:	3b01      	subs	r3, #1
 800af82:	b29a      	uxth	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b04      	cmp	r3, #4
 800af94:	d11b      	bne.n	800afce <HAL_I2C_Master_Transmit+0x188>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d017      	beq.n	800afce <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afb8:	b29b      	uxth	r3, r3
 800afba:	3b01      	subs	r3, #1
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afc6:	3b01      	subs	r3, #1
 800afc8:	b29a      	uxth	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	6a39      	ldr	r1, [r7, #32]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f005 fe01 	bl	8010bda <I2C_WaitOnBTFFlagUntilTimeout>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00d      	beq.n	800affa <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d107      	bne.n	800aff6 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e01a      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800affe:	2b00      	cmp	r3, #0
 800b000:	d194      	bne.n	800af2c <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2220      	movs	r2, #32
 800b016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e000      	b.n	800b030 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b02e:	2302      	movs	r3, #2
  }
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	00100002 	.word	0x00100002
 800b03c:	ffff0000 	.word	0xffff0000

0800b040 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08c      	sub	sp, #48	; 0x30
 800b044:	af02      	add	r7, sp, #8
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	607a      	str	r2, [r7, #4]
 800b04a:	461a      	mov	r2, r3
 800b04c:	460b      	mov	r3, r1
 800b04e:	817b      	strh	r3, [r7, #10]
 800b050:	4613      	mov	r3, r2
 800b052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b054:	f7fb f8ee 	bl	8006234 <HAL_GetTick>
 800b058:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b20      	cmp	r3, #32
 800b064:	f040 820b 	bne.w	800b47e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2319      	movs	r3, #25
 800b06e:	2201      	movs	r2, #1
 800b070:	497c      	ldr	r1, [pc, #496]	; (800b264 <HAL_I2C_Master_Receive+0x224>)
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f005 fc9a 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b07e:	2302      	movs	r3, #2
 800b080:	e1fe      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d101      	bne.n	800b090 <HAL_I2C_Master_Receive+0x50>
 800b08c:	2302      	movs	r3, #2
 800b08e:	e1f7      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d007      	beq.n	800b0b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f042 0201 	orr.w	r2, r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2222      	movs	r2, #34	; 0x22
 800b0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	893a      	ldrh	r2, [r7, #8]
 800b0e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4a5c      	ldr	r2, [pc, #368]	; (800b268 <HAL_I2C_Master_Receive+0x228>)
 800b0f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b0f8:	8979      	ldrh	r1, [r7, #10]
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f005 f84e 	bl	80101a0 <I2C_MasterRequestRead>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e1b8      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b112:	2b00      	cmp	r3, #0
 800b114:	d113      	bne.n	800b13e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	617b      	str	r3, [r7, #20]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	e18c      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b142:	2b01      	cmp	r3, #1
 800b144:	d11b      	bne.n	800b17e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b156:	2300      	movs	r3, #0
 800b158:	61bb      	str	r3, [r7, #24]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	61bb      	str	r3, [r7, #24]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	e16c      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b182:	2b02      	cmp	r3, #2
 800b184:	d11b      	bne.n	800b1be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	61fb      	str	r3, [r7, #28]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	61fb      	str	r3, [r7, #28]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	e14c      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	623b      	str	r3, [r7, #32]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	623b      	str	r3, [r7, #32]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	623b      	str	r3, [r7, #32]
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b1e4:	e138      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	f200 80f1 	bhi.w	800b3d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d123      	bne.n	800b240 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f005 fd9d 	bl	8010d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	e139      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691a      	ldr	r2, [r3, #16]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b228:	3b01      	subs	r3, #1
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b234:	b29b      	uxth	r3, r3
 800b236:	3b01      	subs	r3, #1
 800b238:	b29a      	uxth	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b23e:	e10b      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b244:	2b02      	cmp	r3, #2
 800b246:	d14e      	bne.n	800b2e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	2200      	movs	r2, #0
 800b250:	4906      	ldr	r1, [pc, #24]	; (800b26c <HAL_I2C_Master_Receive+0x22c>)
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f005 fbaa 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d008      	beq.n	800b270 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e10e      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
 800b262:	bf00      	nop
 800b264:	00100002 	.word	0x00100002
 800b268:	ffff0000 	.word	0xffff0000
 800b26c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b27e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691a      	ldr	r2, [r3, #16]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29c:	3b01      	subs	r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	691a      	ldr	r2, [r3, #16]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2e4:	e0b8      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4966      	ldr	r1, [pc, #408]	; (800b488 <HAL_I2C_Master_Receive+0x448>)
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f005 fb5b 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e0bf      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b30e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	691a      	ldr	r2, [r3, #16]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32c:	3b01      	subs	r3, #1
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	2200      	movs	r2, #0
 800b34a:	494f      	ldr	r1, [pc, #316]	; (800b488 <HAL_I2C_Master_Receive+0x448>)
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f005 fb2d 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e091      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b36a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	691a      	ldr	r2, [r3, #16]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	b2d2      	uxtb	r2, r2
 800b378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b388:	3b01      	subs	r3, #1
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b394:	b29b      	uxth	r3, r3
 800b396:	3b01      	subs	r3, #1
 800b398:	b29a      	uxth	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	b2d2      	uxtb	r2, r2
 800b3aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3d0:	e042      	b.n	800b458 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f005 fcb0 	bl	8010d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e04c      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	691a      	ldr	r2, [r3, #16]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b402:	3b01      	subs	r3, #1
 800b404:	b29a      	uxth	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b04      	cmp	r3, #4
 800b424:	d118      	bne.n	800b458 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	b2d2      	uxtb	r2, r2
 800b432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b442:	3b01      	subs	r3, #1
 800b444:	b29a      	uxth	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44e:	b29b      	uxth	r3, r3
 800b450:	3b01      	subs	r3, #1
 800b452:	b29a      	uxth	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f47f aec2 	bne.w	800b1e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2220      	movs	r2, #32
 800b466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e000      	b.n	800b480 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b47e:	2302      	movs	r3, #2
  }
}
 800b480:	4618      	mov	r0, r3
 800b482:	3728      	adds	r7, #40	; 0x28
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	00010004 	.word	0x00010004

0800b48c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af02      	add	r7, sp, #8
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	603b      	str	r3, [r7, #0]
 800b498:	4613      	mov	r3, r2
 800b49a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b49c:	f7fa feca 	bl	8006234 <HAL_GetTick>
 800b4a0:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b20      	cmp	r3, #32
 800b4ac:	f040 80fb 	bne.w	800b6a6 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <HAL_I2C_Slave_Transmit+0x30>
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0f3      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <HAL_I2C_Slave_Transmit+0x42>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e0ec      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d007      	beq.n	800b4f4 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f042 0201 	orr.w	r2, r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b502:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2221      	movs	r2, #33	; 0x21
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2220      	movs	r2, #32
 800b510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	88fa      	ldrh	r2, [r7, #6]
 800b524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4a5f      	ldr	r2, [pc, #380]	; (800b6b0 <HAL_I2C_Slave_Transmit+0x224>)
 800b534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b544:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2200      	movs	r2, #0
 800b54e:	4959      	ldr	r1, [pc, #356]	; (800b6b4 <HAL_I2C_Slave_Transmit+0x228>)
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f005 fa2b 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	e0a3      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	617b      	str	r3, [r7, #20]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	617b      	str	r3, [r7, #20]
 800b574:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b57e:	d165      	bne.n	800b64c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2200      	movs	r2, #0
 800b588:	494a      	ldr	r1, [pc, #296]	; (800b6b4 <HAL_I2C_Slave_Transmit+0x228>)
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f005 fa0e 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e086      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b59a:	2300      	movs	r3, #0
 800b59c:	61bb      	str	r3, [r7, #24]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	61bb      	str	r3, [r7, #24]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800b5b0:	e04c      	b.n	800b64c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f005 face 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5d0:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e068      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b04      	cmp	r3, #4
 800b612:	d11b      	bne.n	800b64c <HAL_I2C_Slave_Transmit+0x1c0>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d017      	beq.n	800b64c <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b636:	b29b      	uxth	r3, r3
 800b638:	3b01      	subs	r3, #1
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b644:	3b01      	subs	r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1ae      	bne.n	800b5b2 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f005 f9a3 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e01b      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b678:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e000      	b.n	800b6a8 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b6a6:	2302      	movs	r3, #2
  }
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	ffff0000 	.word	0xffff0000
 800b6b4:	00010002 	.word	0x00010002

0800b6b8 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08a      	sub	sp, #40	; 0x28
 800b6bc:	af02      	add	r7, sp, #8
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	603b      	str	r3, [r7, #0]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6c8:	f7fa fdb4 	bl	8006234 <HAL_GetTick>
 800b6cc:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b20      	cmp	r3, #32
 800b6d8:	f040 80ee 	bne.w	800b8b8 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <HAL_I2C_Slave_Receive+0x30>
 800b6e2:	88fb      	ldrh	r3, [r7, #6]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e0e6      	b.n	800b8ba <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d101      	bne.n	800b6fa <HAL_I2C_Slave_Receive+0x42>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e0df      	b.n	800b8ba <HAL_I2C_Slave_Receive+0x202>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d007      	beq.n	800b720 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f042 0201 	orr.w	r2, r2, #1
 800b71e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b72e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2222      	movs	r2, #34	; 0x22
 800b734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2220      	movs	r2, #32
 800b73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	88fa      	ldrh	r2, [r7, #6]
 800b750:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b756:	b29a      	uxth	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4a59      	ldr	r2, [pc, #356]	; (800b8c4 <HAL_I2C_Slave_Receive+0x20c>)
 800b760:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b770:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2200      	movs	r2, #0
 800b77a:	4953      	ldr	r1, [pc, #332]	; (800b8c8 <HAL_I2C_Slave_Receive+0x210>)
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f005 f915 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	e096      	b.n	800b8ba <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	617b      	str	r3, [r7, #20]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800b7a2:	e04e      	b.n	800b842 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f005 fac7 	bl	8010d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d009      	beq.n	800b7c8 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7c2:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e078      	b.n	800b8ba <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	691a      	ldr	r2, [r3, #16]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	b2d2      	uxtb	r2, r2
 800b7d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b04      	cmp	r3, #4
 800b806:	d11c      	bne.n	800b842 <HAL_I2C_Slave_Receive+0x18a>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d018      	beq.n	800b842 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	691a      	ldr	r2, [r3, #16]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	1c5a      	adds	r2, r3, #1
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b29a      	uxth	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b838:	b29b      	uxth	r3, r3
 800b83a:	3b01      	subs	r3, #1
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1ac      	bne.n	800b7a4 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b84a:	69fa      	ldr	r2, [r7, #28]
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f005 fa04 	bl	8010c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d009      	beq.n	800b86e <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b868:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e025      	b.n	800b8ba <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b86e:	2300      	movs	r3, #0
 800b870:	61bb      	str	r3, [r7, #24]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	61bb      	str	r3, [r7, #24]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f042 0201 	orr.w	r2, r2, #1
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b89a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e000      	b.n	800b8ba <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800b8b8:	2302      	movs	r3, #2
  }
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	ffff0000 	.word	0xffff0000
 800b8c8:	00010002 	.word	0x00010002

0800b8cc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	607a      	str	r2, [r7, #4]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	460b      	mov	r3, r1
 800b8da:	817b      	strh	r3, [r7, #10]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	f040 8085 	bne.w	800b9fc <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800b8f2:	4b46      	ldr	r3, [pc, #280]	; (800ba0c <HAL_I2C_Master_Transmit_IT+0x140>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	4a45      	ldr	r2, [pc, #276]	; (800ba10 <HAL_I2C_Master_Transmit_IT+0x144>)
 800b8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fe:	0a1a      	lsrs	r2, r3, #8
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	009a      	lsls	r2, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	3b01      	subs	r3, #1
 800b910:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d116      	bne.n	800b946 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2220      	movs	r2, #32
 800b922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	f043 0220 	orr.w	r2, r3, #32
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e05b      	b.n	800b9fe <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b02      	cmp	r3, #2
 800b952:	d0db      	beq.n	800b90c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d101      	bne.n	800b962 <HAL_I2C_Master_Transmit_IT+0x96>
 800b95e:	2302      	movs	r3, #2
 800b960:	e04d      	b.n	800b9fe <HAL_I2C_Master_Transmit_IT+0x132>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b01      	cmp	r3, #1
 800b976:	d007      	beq.n	800b988 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f042 0201 	orr.w	r2, r2, #1
 800b986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2221      	movs	r2, #33	; 0x21
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2210      	movs	r2, #16
 800b9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	893a      	ldrh	r2, [r7, #8]
 800b9b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <HAL_I2C_Master_Transmit_IT+0x148>)
 800b9c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800b9ca:	897a      	ldrh	r2, [r7, #10]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800b9e6:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e000      	b.n	800b9fe <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800b9fc:	2302      	movs	r3, #2
  }
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	20000058 	.word	0x20000058
 800ba10:	14f8b589 	.word	0x14f8b589
 800ba14:	ffff0000 	.word	0xffff0000

0800ba18 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	461a      	mov	r2, r3
 800ba24:	460b      	mov	r3, r1
 800ba26:	817b      	strh	r3, [r7, #10]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b20      	cmp	r3, #32
 800ba3a:	f040 808d 	bne.w	800bb58 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ba3e:	4b4a      	ldr	r3, [pc, #296]	; (800bb68 <HAL_I2C_Master_Receive_IT+0x150>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	08db      	lsrs	r3, r3, #3
 800ba44:	4a49      	ldr	r2, [pc, #292]	; (800bb6c <HAL_I2C_Master_Receive_IT+0x154>)
 800ba46:	fba2 2303 	umull	r2, r3, r2, r3
 800ba4a:	0a1a      	lsrs	r2, r3, #8
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009a      	lsls	r2, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d116      	bne.n	800ba92 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7e:	f043 0220 	orr.w	r2, r3, #32
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e063      	b.n	800bb5a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	f003 0302 	and.w	r3, r3, #2
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d0db      	beq.n	800ba58 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d101      	bne.n	800baae <HAL_I2C_Master_Receive_IT+0x96>
 800baaa:	2302      	movs	r3, #2
 800baac:	e055      	b.n	800bb5a <HAL_I2C_Master_Receive_IT+0x142>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d007      	beq.n	800bad4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f042 0201 	orr.w	r2, r2, #1
 800bad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2222      	movs	r2, #34	; 0x22
 800bae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2210      	movs	r2, #16
 800baf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	893a      	ldrh	r2, [r7, #8]
 800bb04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a17      	ldr	r2, [pc, #92]	; (800bb70 <HAL_I2C_Master_Receive_IT+0x158>)
 800bb14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bb16:	897a      	ldrh	r2, [r7, #10]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685a      	ldr	r2, [r3, #4]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bb32:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb42:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb52:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e000      	b.n	800bb5a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800bb58:	2302      	movs	r3, #2
  }
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	20000058 	.word	0x20000058
 800bb6c:	14f8b589 	.word	0x14f8b589
 800bb70:	ffff0000 	.word	0xffff0000

0800bb74 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	d158      	bne.n	800bc40 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <HAL_I2C_Slave_Transmit_IT+0x26>
 800bb94:	88fb      	ldrh	r3, [r7, #6]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e051      	b.n	800bc42 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d101      	bne.n	800bbac <HAL_I2C_Slave_Transmit_IT+0x38>
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e04a      	b.n	800bc42 <HAL_I2C_Slave_Transmit_IT+0xce>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d007      	beq.n	800bbd2 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0201 	orr.w	r2, r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbe0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2221      	movs	r2, #33	; 0x21
 800bbe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	88fa      	ldrh	r2, [r7, #6]
 800bc02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4a0f      	ldr	r2, [pc, #60]	; (800bc50 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800bc12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc22:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	685a      	ldr	r2, [r3, #4]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bc3a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e000      	b.n	800bc42 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800bc40:	2302      	movs	r3, #2
  }
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	ffff0000 	.word	0xffff0000

0800bc54 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d158      	bne.n	800bd20 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <HAL_I2C_Slave_Receive_IT+0x26>
 800bc74:	88fb      	ldrh	r3, [r7, #6]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d101      	bne.n	800bc7e <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e051      	b.n	800bd22 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d101      	bne.n	800bc8c <HAL_I2C_Slave_Receive_IT+0x38>
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e04a      	b.n	800bd22 <HAL_I2C_Slave_Receive_IT+0xce>
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d007      	beq.n	800bcb2 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f042 0201 	orr.w	r2, r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcc0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2222      	movs	r2, #34	; 0x22
 800bcc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	88fa      	ldrh	r2, [r7, #6]
 800bce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4a0f      	ldr	r2, [pc, #60]	; (800bd30 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800bcf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd02:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bd1a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	e000      	b.n	800bd22 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800bd20:	2302      	movs	r3, #2
  }
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	ffff0000 	.word	0xffff0000

0800bd34 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	460b      	mov	r3, r1
 800bd42:	817b      	strh	r3, [r7, #10]
 800bd44:	4613      	mov	r3, r2
 800bd46:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	f040 810d 	bne.w	800bf74 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bd5a:	4b89      	ldr	r3, [pc, #548]	; (800bf80 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	08db      	lsrs	r3, r3, #3
 800bd60:	4a88      	ldr	r2, [pc, #544]	; (800bf84 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800bd62:	fba2 2303 	umull	r2, r3, r2, r3
 800bd66:	0a1a      	lsrs	r2, r3, #8
 800bd68:	4613      	mov	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009a      	lsls	r2, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d116      	bne.n	800bdae <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2220      	movs	r2, #32
 800bd8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9a:	f043 0220 	orr.w	r2, r3, #32
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e0e3      	b.n	800bf76 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d0db      	beq.n	800bd74 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d101      	bne.n	800bdca <HAL_I2C_Master_Transmit_DMA+0x96>
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	e0d5      	b.n	800bf76 <HAL_I2C_Master_Transmit_DMA+0x242>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d007      	beq.n	800bdf0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f042 0201 	orr.w	r2, r2, #1
 800bdee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2221      	movs	r2, #33	; 0x21
 800be04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2210      	movs	r2, #16
 800be0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2200      	movs	r2, #0
 800be14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	893a      	ldrh	r2, [r7, #8]
 800be20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	4a56      	ldr	r2, [pc, #344]	; (800bf88 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800be30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800be32:	897a      	ldrh	r2, [r7, #10]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d07b      	beq.n	800bf38 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be44:	2b00      	cmp	r3, #0
 800be46:	d02a      	beq.n	800be9e <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4c:	4a4f      	ldr	r2, [pc, #316]	; (800bf8c <HAL_I2C_Master_Transmit_DMA+0x258>)
 800be4e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be54:	4a4e      	ldr	r2, [pc, #312]	; (800bf90 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800be56:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5c:	2200      	movs	r2, #0
 800be5e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be64:	2200      	movs	r2, #0
 800be66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6c:	2200      	movs	r2, #0
 800be6e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be74:	2200      	movs	r2, #0
 800be76:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	4619      	mov	r1, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3310      	adds	r3, #16
 800be88:	461a      	mov	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be8e:	f7fb fc3a 	bl	8007706 <HAL_DMA_Start_IT>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d139      	bne.n	800bf10 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800be9c:	e013      	b.n	800bec6 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2220      	movs	r2, #32
 800bea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e057      	b.n	800bf76 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800bedc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800beec:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800befc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e02f      	b.n	800bf70 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf24:	f043 0210 	orr.w	r2, r3, #16
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e01e      	b.n	800bf76 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf46:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf56:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bf6e:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	e000      	b.n	800bf76 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800bf74:	2302      	movs	r3, #2
  }
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000058 	.word	0x20000058
 800bf84:	14f8b589 	.word	0x14f8b589
 800bf88:	ffff0000 	.word	0xffff0000
 800bf8c:	08010639 	.word	0x08010639
 800bf90:	080107e3 	.word	0x080107e3

0800bf94 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	607a      	str	r2, [r7, #4]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	817b      	strh	r3, [r7, #10]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b20      	cmp	r3, #32
 800bfb6:	f040 810d 	bne.w	800c1d4 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bfba:	4b89      	ldr	r3, [pc, #548]	; (800c1e0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	08db      	lsrs	r3, r3, #3
 800bfc0:	4a88      	ldr	r2, [pc, #544]	; (800c1e4 <HAL_I2C_Master_Receive_DMA+0x250>)
 800bfc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc6:	0a1a      	lsrs	r2, r3, #8
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009a      	lsls	r2, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d116      	bne.n	800c00e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2220      	movs	r2, #32
 800bfea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffa:	f043 0220 	orr.w	r2, r3, #32
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e0e3      	b.n	800c1d6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	f003 0302 	and.w	r3, r3, #2
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d0db      	beq.n	800bfd4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <HAL_I2C_Master_Receive_DMA+0x96>
 800c026:	2302      	movs	r3, #2
 800c028:	e0d5      	b.n	800c1d6 <HAL_I2C_Master_Receive_DMA+0x242>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d007      	beq.n	800c050 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f042 0201 	orr.w	r2, r2, #1
 800c04e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c05e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2222      	movs	r2, #34	; 0x22
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2210      	movs	r2, #16
 800c06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	893a      	ldrh	r2, [r7, #8]
 800c080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c086:	b29a      	uxth	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4a56      	ldr	r2, [pc, #344]	; (800c1e8 <HAL_I2C_Master_Receive_DMA+0x254>)
 800c090:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c092:	897a      	ldrh	r2, [r7, #10]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d07b      	beq.n	800c198 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d02a      	beq.n	800c0fe <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ac:	4a4f      	ldr	r2, [pc, #316]	; (800c1ec <HAL_I2C_Master_Receive_DMA+0x258>)
 800c0ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b4:	4a4e      	ldr	r2, [pc, #312]	; (800c1f0 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800c0b6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	2200      	movs	r2, #0
 800c0be:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3310      	adds	r3, #16
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ee:	f7fb fb0a 	bl	8007706 <HAL_DMA_Start_IT>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d139      	bne.n	800c170 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800c0fc:	e013      	b.n	800c126 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2220      	movs	r2, #32
 800c102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c112:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e057      	b.n	800c1d6 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c134:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c144:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c15c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c16c:	605a      	str	r2, [r3, #4]
 800c16e:	e02f      	b.n	800c1d0 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2220      	movs	r2, #32
 800c174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c184:	f043 0210 	orr.w	r2, r3, #16
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c194:	2301      	movs	r3, #1
 800c196:	e01e      	b.n	800c1d6 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685a      	ldr	r2, [r3, #4]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c1ae:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c1be:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1ce:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e000      	b.n	800c1d6 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c1d4:	2302      	movs	r3, #2
  }
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3718      	adds	r7, #24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000058 	.word	0x20000058
 800c1e4:	14f8b589 	.word	0x14f8b589
 800c1e8:	ffff0000 	.word	0xffff0000
 800c1ec:	08010639 	.word	0x08010639
 800c1f0:	080107e3 	.word	0x080107e3

0800c1f4 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	4613      	mov	r3, r2
 800c200:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	f040 80b8 	bne.w	800c380 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c216:	88fb      	ldrh	r3, [r7, #6]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d101      	bne.n	800c220 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e0b0      	b.n	800c382 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c226:	2b01      	cmp	r3, #1
 800c228:	d101      	bne.n	800c22e <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c22a:	2302      	movs	r3, #2
 800c22c:	e0a9      	b.n	800c382 <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b01      	cmp	r3, #1
 800c242:	d007      	beq.n	800c254 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f042 0201 	orr.w	r2, r2, #1
 800c252:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c262:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2221      	movs	r2, #33	; 0x21
 800c268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2220      	movs	r2, #32
 800c270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	88fa      	ldrh	r2, [r7, #6]
 800c284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4a3e      	ldr	r2, [pc, #248]	; (800c38c <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c294:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d02a      	beq.n	800c2f4 <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2a2:	4a3b      	ldr	r2, [pc, #236]	; (800c390 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c2a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2aa:	4a3a      	ldr	r2, [pc, #232]	; (800c394 <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c2ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3310      	adds	r3, #16
 800c2de:	461a      	mov	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2e4:	f7fb fa0f 	bl	8007706 <HAL_DMA_Start_IT>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d132      	bne.n	800c358 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c2f2:	e013      	b.n	800c31c <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2228      	movs	r2, #40	; 0x28
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c308:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e032      	b.n	800c382 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c32a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c342:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c352:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c354:	2300      	movs	r3, #0
 800c356:	e014      	b.n	800c382 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2220      	movs	r2, #32
 800c35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36c:	f043 0210 	orr.w	r2, r3, #16
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e000      	b.n	800c382 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c380:	2302      	movs	r3, #2
  }
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	ffff0000 	.word	0xffff0000
 800c390:	08010639 	.word	0x08010639
 800c394:	080107e3 	.word	0x080107e3

0800c398 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b086      	sub	sp, #24
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b20      	cmp	r3, #32
 800c3b0:	f040 80b8 	bne.w	800c524 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <HAL_I2C_Slave_Receive_DMA+0x28>
 800c3ba:	88fb      	ldrh	r3, [r7, #6]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e0b0      	b.n	800c526 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d101      	bne.n	800c3d2 <HAL_I2C_Slave_Receive_DMA+0x3a>
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	e0a9      	b.n	800c526 <HAL_I2C_Slave_Receive_DMA+0x18e>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d007      	beq.n	800c3f8 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0201 	orr.w	r2, r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2222      	movs	r2, #34	; 0x22
 800c40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2220      	movs	r2, #32
 800c414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	68ba      	ldr	r2, [r7, #8]
 800c422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	88fa      	ldrh	r2, [r7, #6]
 800c428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c42e:	b29a      	uxth	r2, r3
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	4a3e      	ldr	r2, [pc, #248]	; (800c530 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800c438:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d02a      	beq.n	800c498 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	4a3b      	ldr	r2, [pc, #236]	; (800c534 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800c448:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	4a3a      	ldr	r2, [pc, #232]	; (800c538 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800c450:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c456:	2200      	movs	r2, #0
 800c458:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	2200      	movs	r2, #0
 800c460:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	2200      	movs	r2, #0
 800c468:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	2200      	movs	r2, #0
 800c470:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3310      	adds	r3, #16
 800c47c:	4619      	mov	r1, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c482:	461a      	mov	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c488:	f7fb f93d 	bl	8007706 <HAL_DMA_Start_IT>
 800c48c:	4603      	mov	r3, r0
 800c48e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d132      	bne.n	800c4fc <HAL_I2C_Slave_Receive_DMA+0x164>
 800c496:	e013      	b.n	800c4c0 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2228      	movs	r2, #40	; 0x28
 800c49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e032      	b.n	800c526 <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4ce:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	685a      	ldr	r2, [r3, #4]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c4e6:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4f6:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e014      	b.n	800c526 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c510:	f043 0210 	orr.w	r2, r3, #16
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	e000      	b.n	800c526 <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c524:	2302      	movs	r3, #2
  }
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	ffff0000 	.word	0xffff0000
 800c534:	08010639 	.word	0x08010639
 800c538:	080107e3 	.word	0x080107e3

0800c53c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	4608      	mov	r0, r1
 800c546:	4611      	mov	r1, r2
 800c548:	461a      	mov	r2, r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	817b      	strh	r3, [r7, #10]
 800c54e:	460b      	mov	r3, r1
 800c550:	813b      	strh	r3, [r7, #8]
 800c552:	4613      	mov	r3, r2
 800c554:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c556:	f7f9 fe6d 	bl	8006234 <HAL_GetTick>
 800c55a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b20      	cmp	r3, #32
 800c566:	f040 80d9 	bne.w	800c71c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	2319      	movs	r3, #25
 800c570:	2201      	movs	r2, #1
 800c572:	496d      	ldr	r1, [pc, #436]	; (800c728 <HAL_I2C_Mem_Write+0x1ec>)
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f004 fa19 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c580:	2302      	movs	r3, #2
 800c582:	e0cc      	b.n	800c71e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d101      	bne.n	800c592 <HAL_I2C_Mem_Write+0x56>
 800c58e:	2302      	movs	r3, #2
 800c590:	e0c5      	b.n	800c71e <HAL_I2C_Mem_Write+0x1e2>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d007      	beq.n	800c5b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0201 	orr.w	r2, r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2221      	movs	r2, #33	; 0x21
 800c5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2240      	movs	r2, #64	; 0x40
 800c5d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6a3a      	ldr	r2, [r7, #32]
 800c5e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4a4d      	ldr	r2, [pc, #308]	; (800c72c <HAL_I2C_Mem_Write+0x1f0>)
 800c5f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c5fa:	88f8      	ldrh	r0, [r7, #6]
 800c5fc:	893a      	ldrh	r2, [r7, #8]
 800c5fe:	8979      	ldrh	r1, [r7, #10]
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	4603      	mov	r3, r0
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f003 fe96 	bl	801033c <I2C_RequestMemoryWrite>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d052      	beq.n	800c6bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e081      	b.n	800c71e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f004 fa9a 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00d      	beq.n	800c646 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62e:	2b04      	cmp	r3, #4
 800c630:	d107      	bne.n	800c642 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e06b      	b.n	800c71e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64a:	781a      	ldrb	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c660:	3b01      	subs	r3, #1
 800c662:	b29a      	uxth	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	3b01      	subs	r3, #1
 800c670:	b29a      	uxth	r2, r3
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b04      	cmp	r3, #4
 800c682:	d11b      	bne.n	800c6bc <HAL_I2C_Mem_Write+0x180>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d017      	beq.n	800c6bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	781a      	ldrb	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1aa      	bne.n	800c61a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f004 fa86 	bl	8010bda <I2C_WaitOnBTFFlagUntilTimeout>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00d      	beq.n	800c6f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d107      	bne.n	800c6ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e016      	b.n	800c71e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2220      	movs	r2, #32
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	e000      	b.n	800c71e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c71c:	2302      	movs	r3, #2
  }
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	00100002 	.word	0x00100002
 800c72c:	ffff0000 	.word	0xffff0000

0800c730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08c      	sub	sp, #48	; 0x30
 800c734:	af02      	add	r7, sp, #8
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	4608      	mov	r0, r1
 800c73a:	4611      	mov	r1, r2
 800c73c:	461a      	mov	r2, r3
 800c73e:	4603      	mov	r3, r0
 800c740:	817b      	strh	r3, [r7, #10]
 800c742:	460b      	mov	r3, r1
 800c744:	813b      	strh	r3, [r7, #8]
 800c746:	4613      	mov	r3, r2
 800c748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c74a:	f7f9 fd73 	bl	8006234 <HAL_GetTick>
 800c74e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c756:	b2db      	uxtb	r3, r3
 800c758:	2b20      	cmp	r3, #32
 800c75a:	f040 8208 	bne.w	800cb6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	2319      	movs	r3, #25
 800c764:	2201      	movs	r2, #1
 800c766:	497b      	ldr	r1, [pc, #492]	; (800c954 <HAL_I2C_Mem_Read+0x224>)
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f004 f91f 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c774:	2302      	movs	r3, #2
 800c776:	e1fb      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d101      	bne.n	800c786 <HAL_I2C_Mem_Read+0x56>
 800c782:	2302      	movs	r3, #2
 800c784:	e1f4      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d007      	beq.n	800c7ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f042 0201 	orr.w	r2, r2, #1
 800c7aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2222      	movs	r2, #34	; 0x22
 800c7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2240      	movs	r2, #64	; 0x40
 800c7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4a5b      	ldr	r2, [pc, #364]	; (800c958 <HAL_I2C_Mem_Read+0x228>)
 800c7ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c7ee:	88f8      	ldrh	r0, [r7, #6]
 800c7f0:	893a      	ldrh	r2, [r7, #8]
 800c7f2:	8979      	ldrh	r1, [r7, #10]
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f003 fe32 	bl	8010468 <I2C_RequestMemoryRead>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	e1b0      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c812:	2b00      	cmp	r3, #0
 800c814:	d113      	bne.n	800c83e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	617b      	str	r3, [r7, #20]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	617b      	str	r3, [r7, #20]
 800c82a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	e184      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c842:	2b01      	cmp	r3, #1
 800c844:	d11b      	bne.n	800c87e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c856:	2300      	movs	r3, #0
 800c858:	61bb      	str	r3, [r7, #24]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	61bb      	str	r3, [r7, #24]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	61bb      	str	r3, [r7, #24]
 800c86a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c87a:	601a      	str	r2, [r3, #0]
 800c87c:	e164      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c882:	2b02      	cmp	r3, #2
 800c884:	d11b      	bne.n	800c8be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	61fb      	str	r3, [r7, #28]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	61fb      	str	r3, [r7, #28]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	e144      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8be:	2300      	movs	r3, #0
 800c8c0:	623b      	str	r3, [r7, #32]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	695b      	ldr	r3, [r3, #20]
 800c8c8:	623b      	str	r3, [r7, #32]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	623b      	str	r3, [r7, #32]
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800c8d4:	e138      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	f200 80f1 	bhi.w	800cac2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d123      	bne.n	800c930 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f004 fa25 	bl	8010d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e139      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	691a      	ldr	r2, [r3, #16]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c918:	3b01      	subs	r3, #1
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c924:	b29b      	uxth	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	b29a      	uxth	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c92e:	e10b      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c934:	2b02      	cmp	r3, #2
 800c936:	d14e      	bne.n	800c9d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	2200      	movs	r2, #0
 800c940:	4906      	ldr	r1, [pc, #24]	; (800c95c <HAL_I2C_Mem_Read+0x22c>)
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f004 f832 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d008      	beq.n	800c960 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e10e      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
 800c952:	bf00      	nop
 800c954:	00100002 	.word	0x00100002
 800c958:	ffff0000 	.word	0xffff0000
 800c95c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c96e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	691a      	ldr	r2, [r3, #16]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97a:	b2d2      	uxtb	r2, r2
 800c97c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c982:	1c5a      	adds	r2, r3, #1
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c98c:	3b01      	subs	r3, #1
 800c98e:	b29a      	uxth	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3b01      	subs	r3, #1
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	691a      	ldr	r2, [r3, #16]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ac:	b2d2      	uxtb	r2, r2
 800c9ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9d4:	e0b8      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	2200      	movs	r2, #0
 800c9de:	4966      	ldr	r1, [pc, #408]	; (800cb78 <HAL_I2C_Mem_Read+0x448>)
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f003 ffe3 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e0bf      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	691a      	ldr	r2, [r3, #16]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0a:	b2d2      	uxtb	r2, r2
 800ca0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca12:	1c5a      	adds	r2, r3, #1
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ca32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	2200      	movs	r2, #0
 800ca3a:	494f      	ldr	r1, [pc, #316]	; (800cb78 <HAL_I2C_Mem_Read+0x448>)
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f003 ffb5 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e091      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	691a      	ldr	r2, [r3, #16]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca66:	b2d2      	uxtb	r2, r2
 800ca68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	3b01      	subs	r3, #1
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	691a      	ldr	r2, [r3, #16]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	b2d2      	uxtb	r2, r2
 800ca9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa0:	1c5a      	adds	r2, r3, #1
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caaa:	3b01      	subs	r3, #1
 800caac:	b29a      	uxth	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	3b01      	subs	r3, #1
 800caba:	b29a      	uxth	r2, r3
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cac0:	e042      	b.n	800cb48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f004 f938 	bl	8010d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e04c      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	691a      	ldr	r2, [r3, #16]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae0:	b2d2      	uxtb	r2, r2
 800cae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf2:	3b01      	subs	r3, #1
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	f003 0304 	and.w	r3, r3, #4
 800cb12:	2b04      	cmp	r3, #4
 800cb14:	d118      	bne.n	800cb48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	691a      	ldr	r2, [r3, #16]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	b2d2      	uxtb	r2, r2
 800cb22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb32:	3b01      	subs	r3, #1
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	3b01      	subs	r3, #1
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f47f aec2 	bne.w	800c8d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2220      	movs	r2, #32
 800cb56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e000      	b.n	800cb70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cb6e:	2302      	movs	r3, #2
  }
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3728      	adds	r7, #40	; 0x28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	00010004 	.word	0x00010004

0800cb7c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b087      	sub	sp, #28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	4608      	mov	r0, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	817b      	strh	r3, [r7, #10]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	813b      	strh	r3, [r7, #8]
 800cb92:	4613      	mov	r3, r2
 800cb94:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	2b20      	cmp	r3, #32
 800cba4:	f040 808e 	bne.w	800ccc4 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cba8:	4b4a      	ldr	r3, [pc, #296]	; (800ccd4 <HAL_I2C_Mem_Write_IT+0x158>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	08db      	lsrs	r3, r3, #3
 800cbae:	4a4a      	ldr	r2, [pc, #296]	; (800ccd8 <HAL_I2C_Mem_Write_IT+0x15c>)
 800cbb0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb4:	0a1a      	lsrs	r2, r3, #8
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	009a      	lsls	r2, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d116      	bne.n	800cbfc <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe8:	f043 0220 	orr.w	r2, r3, #32
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e064      	b.n	800ccc6 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d0db      	beq.n	800cbc2 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d101      	bne.n	800cc18 <HAL_I2C_Mem_Write_IT+0x9c>
 800cc14:	2302      	movs	r3, #2
 800cc16:	e056      	b.n	800ccc6 <HAL_I2C_Mem_Write_IT+0x14a>
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d007      	beq.n	800cc3e <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f042 0201 	orr.w	r2, r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc4c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2221      	movs	r2, #33	; 0x21
 800cc52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2240      	movs	r2, #64	; 0x40
 800cc5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6a3a      	ldr	r2, [r7, #32]
 800cc68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	4a17      	ldr	r2, [pc, #92]	; (800ccdc <HAL_I2C_Mem_Write_IT+0x160>)
 800cc7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cc80:	897a      	ldrh	r2, [r7, #10]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800cc86:	893a      	ldrh	r2, [r7, #8]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800cc8c:	88fa      	ldrh	r2, [r7, #6]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cca6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ccbe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e000      	b.n	800ccc6 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800ccc4:	2302      	movs	r3, #2
  }
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20000058 	.word	0x20000058
 800ccd8:	14f8b589 	.word	0x14f8b589
 800ccdc:	ffff0000 	.word	0xffff0000

0800cce0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	4608      	mov	r0, r1
 800ccea:	4611      	mov	r1, r2
 800ccec:	461a      	mov	r2, r3
 800ccee:	4603      	mov	r3, r0
 800ccf0:	817b      	strh	r3, [r7, #10]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	813b      	strh	r3, [r7, #8]
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b20      	cmp	r3, #32
 800cd08:	f040 809a 	bne.w	800ce40 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cd0c:	4b50      	ldr	r3, [pc, #320]	; (800ce50 <HAL_I2C_Mem_Read_IT+0x170>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	08db      	lsrs	r3, r3, #3
 800cd12:	4a50      	ldr	r2, [pc, #320]	; (800ce54 <HAL_I2C_Mem_Read_IT+0x174>)
 800cd14:	fba2 2303 	umull	r2, r3, r2, r3
 800cd18:	0a1a      	lsrs	r2, r3, #8
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	009a      	lsls	r2, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d116      	bne.n	800cd60 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2220      	movs	r2, #32
 800cd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4c:	f043 0220 	orr.w	r2, r3, #32
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e070      	b.n	800ce42 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	f003 0302 	and.w	r3, r3, #2
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d0db      	beq.n	800cd26 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d101      	bne.n	800cd7c <HAL_I2C_Mem_Read_IT+0x9c>
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e062      	b.n	800ce42 <HAL_I2C_Mem_Read_IT+0x162>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f003 0301 	and.w	r3, r3, #1
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d007      	beq.n	800cda2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f042 0201 	orr.w	r2, r2, #1
 800cda0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdb0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2222      	movs	r2, #34	; 0x22
 800cdb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2240      	movs	r2, #64	; 0x40
 800cdbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6a3a      	ldr	r2, [r7, #32]
 800cdcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cdd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	4a1d      	ldr	r2, [pc, #116]	; (800ce58 <HAL_I2C_Mem_Read_IT+0x178>)
 800cde2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cde4:	897a      	ldrh	r2, [r7, #10]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800cdea:	893a      	ldrh	r2, [r7, #8]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800cdf0:	88fa      	ldrh	r2, [r7, #6]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce0a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce1a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d007      	beq.n	800ce3c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ce3a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	e000      	b.n	800ce42 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800ce40:	2302      	movs	r3, #2
  }
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	371c      	adds	r7, #28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	20000058 	.word	0x20000058
 800ce54:	14f8b589 	.word	0x14f8b589
 800ce58:	ffff0000 	.word	0xffff0000

0800ce5c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	; 0x28
 800ce60:	af02      	add	r7, sp, #8
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	4608      	mov	r0, r1
 800ce66:	4611      	mov	r1, r2
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	817b      	strh	r3, [r7, #10]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	813b      	strh	r3, [r7, #8]
 800ce72:	4613      	mov	r3, r2
 800ce74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ce7a:	f7f9 f9db 	bl	8006234 <HAL_GetTick>
 800ce7e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b20      	cmp	r3, #32
 800ce8a:	f040 8145 	bne.w	800d118 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ce8e:	4b9d      	ldr	r3, [pc, #628]	; (800d104 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	08db      	lsrs	r3, r3, #3
 800ce94:	4a9c      	ldr	r2, [pc, #624]	; (800d108 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800ce96:	fba2 2303 	umull	r2, r3, r2, r3
 800ce9a:	0a1a      	lsrs	r2, r3, #8
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	009a      	lsls	r2, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d116      	bne.n	800cee2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2220      	movs	r2, #32
 800cebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cece:	f043 0220 	orr.w	r2, r3, #32
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e11b      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	f003 0302 	and.w	r3, r3, #2
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d0db      	beq.n	800cea8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d101      	bne.n	800cefe <HAL_I2C_Mem_Write_DMA+0xa2>
 800cefa:	2302      	movs	r3, #2
 800cefc:	e10d      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d007      	beq.n	800cf24 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f042 0201 	orr.w	r2, r2, #1
 800cf22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2221      	movs	r2, #33	; 0x21
 800cf38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2240      	movs	r2, #64	; 0x40
 800cf40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cf54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	4a6a      	ldr	r2, [pc, #424]	; (800d10c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800cf64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cf66:	897a      	ldrh	r2, [r7, #10]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800cf6c:	893a      	ldrh	r2, [r7, #8]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800cf72:	88fa      	ldrh	r2, [r7, #6]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 80a9 	beq.w	800d0da <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d02a      	beq.n	800cfe6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf94:	4a5e      	ldr	r2, [pc, #376]	; (800d110 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800cf96:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf9c:	4a5d      	ldr	r2, [pc, #372]	; (800d114 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800cf9e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfac:	2200      	movs	r2, #0
 800cfae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc8:	4619      	mov	r1, r3
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3310      	adds	r3, #16
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfd6:	f7fa fb96 	bl	8007706 <HAL_DMA_Start_IT>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cfde:	7efb      	ldrb	r3, [r7, #27]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d166      	bne.n	800d0b2 <HAL_I2C_Mem_Write_DMA+0x256>
 800cfe4:	e013      	b.n	800d00e <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2220      	movs	r2, #32
 800cfea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e085      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d00e:	88f8      	ldrh	r0, [r7, #6]
 800d010:	893a      	ldrh	r2, [r7, #8]
 800d012:	8979      	ldrh	r1, [r7, #10]
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	2323      	movs	r3, #35	; 0x23
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	4603      	mov	r3, r0
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f003 f98c 	bl	801033c <I2C_RequestMemoryWrite>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d022      	beq.n	800d070 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fa fc31 	bl	8007896 <HAL_DMA_Abort_IT>
 800d034:	4603      	mov	r3, r0
 800d036:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d03c:	2200      	movs	r2, #0
 800d03e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d04e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f022 0201 	bic.w	r2, r2, #1
 800d06a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	e054      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d070:	2300      	movs	r3, #0
 800d072:	613b      	str	r3, [r7, #16]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	695b      	ldr	r3, [r3, #20]
 800d07a:	613b      	str	r3, [r7, #16]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	613b      	str	r3, [r7, #16]
 800d084:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685a      	ldr	r2, [r3, #4]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d09c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	685a      	ldr	r2, [r3, #4]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0ac:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e033      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2220      	movs	r2, #32
 800d0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f043 0210 	orr.w	r2, r3, #16
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e01f      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2220      	movs	r2, #32
 800d0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e00b      	b.n	800d11a <HAL_I2C_Mem_Write_DMA+0x2be>
 800d102:	bf00      	nop
 800d104:	20000058 	.word	0x20000058
 800d108:	14f8b589 	.word	0x14f8b589
 800d10c:	ffff0000 	.word	0xffff0000
 800d110:	08010639 	.word	0x08010639
 800d114:	080107e3 	.word	0x080107e3
    }
  }
  else
  {
    return HAL_BUSY;
 800d118:	2302      	movs	r3, #2
  }
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3720      	adds	r7, #32
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b08c      	sub	sp, #48	; 0x30
 800d126:	af02      	add	r7, sp, #8
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	4608      	mov	r0, r1
 800d12c:	4611      	mov	r1, r2
 800d12e:	461a      	mov	r2, r3
 800d130:	4603      	mov	r3, r0
 800d132:	817b      	strh	r3, [r7, #10]
 800d134:	460b      	mov	r3, r1
 800d136:	813b      	strh	r3, [r7, #8]
 800d138:	4613      	mov	r3, r2
 800d13a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d13c:	f7f9 f87a 	bl	8006234 <HAL_GetTick>
 800d140:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d142:	2300      	movs	r3, #0
 800d144:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b20      	cmp	r3, #32
 800d150:	f040 8175 	bne.w	800d43e <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d154:	4b94      	ldr	r3, [pc, #592]	; (800d3a8 <HAL_I2C_Mem_Read_DMA+0x286>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	08db      	lsrs	r3, r3, #3
 800d15a:	4a94      	ldr	r2, [pc, #592]	; (800d3ac <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d15c:	fba2 2303 	umull	r2, r3, r2, r3
 800d160:	0a1a      	lsrs	r2, r3, #8
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009a      	lsls	r2, r3, #2
 800d16a:	4413      	add	r3, r2
 800d16c:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	3b01      	subs	r3, #1
 800d172:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d116      	bne.n	800d1a8 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2220      	movs	r2, #32
 800d184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d194:	f043 0220 	orr.w	r2, r3, #32
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e14b      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	f003 0302 	and.w	r3, r3, #2
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d0db      	beq.n	800d16e <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d101      	bne.n	800d1c4 <HAL_I2C_Mem_Read_DMA+0xa2>
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	e13d      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d007      	beq.n	800d1ea <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f042 0201 	orr.w	r2, r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1f8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2222      	movs	r2, #34	; 0x22
 800d1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2240      	movs	r2, #64	; 0x40
 800d206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d21a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d220:	b29a      	uxth	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	4a61      	ldr	r2, [pc, #388]	; (800d3b0 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d22a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d22c:	897a      	ldrh	r2, [r7, #10]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d232:	893a      	ldrh	r2, [r7, #8]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d238:	88fa      	ldrh	r2, [r7, #6]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80cb 	beq.w	800d3e4 <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d252:	2b00      	cmp	r3, #0
 800d254:	d02d      	beq.n	800d2b2 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25a:	4a56      	ldr	r2, [pc, #344]	; (800d3b4 <HAL_I2C_Mem_Read_DMA+0x292>)
 800d25c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	4a55      	ldr	r2, [pc, #340]	; (800d3b8 <HAL_I2C_Mem_Read_DMA+0x296>)
 800d264:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	2200      	movs	r2, #0
 800d26c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d272:	2200      	movs	r2, #0
 800d274:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27a:	2200      	movs	r2, #0
 800d27c:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	2200      	movs	r2, #0
 800d284:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3310      	adds	r3, #16
 800d290:	4619      	mov	r1, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d296:	461a      	mov	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d29c:	f7fa fa33 	bl	8007706 <HAL_DMA_Start_IT>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d2a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f040 8086 	bne.w	800d3bc <HAL_I2C_Mem_Read_DMA+0x29a>
 800d2b0:	e013      	b.n	800d2da <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e0b2      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d2da:	88f8      	ldrh	r0, [r7, #6]
 800d2dc:	893a      	ldrh	r2, [r7, #8]
 800d2de:	8979      	ldrh	r1, [r7, #10]
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	2323      	movs	r3, #35	; 0x23
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f003 f8bc 	bl	8010468 <I2C_RequestMemoryRead>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d023      	beq.n	800d33e <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fa facb 	bl	8007896 <HAL_DMA_Abort_IT>
 800d300:	4603      	mov	r3, r0
 800d302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30a:	2200      	movs	r2, #0
 800d30c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d31c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f022 0201 	bic.w	r2, r2, #1
 800d338:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e080      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d342:	2b01      	cmp	r3, #1
 800d344:	d108      	bne.n	800d358 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d354:	601a      	str	r2, [r3, #0]
 800d356:	e007      	b.n	800d368 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d366:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d368:	2300      	movs	r3, #0
 800d36a:	617b      	str	r3, [r7, #20]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	695b      	ldr	r3, [r3, #20]
 800d372:	617b      	str	r3, [r7, #20]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	699b      	ldr	r3, [r3, #24]
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	685a      	ldr	r2, [r3, #4]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d394:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3a4:	605a      	str	r2, [r3, #4]
 800d3a6:	e048      	b.n	800d43a <HAL_I2C_Mem_Read_DMA+0x318>
 800d3a8:	20000058 	.word	0x20000058
 800d3ac:	14f8b589 	.word	0x14f8b589
 800d3b0:	ffff0000 	.word	0xffff0000
 800d3b4:	08010639 	.word	0x08010639
 800d3b8:	080107e3 	.word	0x080107e3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2220      	movs	r2, #32
 800d3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d0:	f043 0210 	orr.w	r2, r3, #16
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e02d      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d3e4:	88f8      	ldrh	r0, [r7, #6]
 800d3e6:	893a      	ldrh	r2, [r7, #8]
 800d3e8:	8979      	ldrh	r1, [r7, #10]
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	2323      	movs	r3, #35	; 0x23
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f003 f837 	bl	8010468 <I2C_RequestMemoryRead>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e01d      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d404:	2300      	movs	r3, #0
 800d406:	61bb      	str	r3, [r7, #24]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	61bb      	str	r3, [r7, #24]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	61bb      	str	r3, [r7, #24]
 800d418:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d428:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2220      	movs	r2, #32
 800d42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	e000      	b.n	800d440 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800d43e:	2302      	movs	r3, #2
  }
}
 800d440:	4618      	mov	r0, r3
 800d442:	3728      	adds	r7, #40	; 0x28
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08a      	sub	sp, #40	; 0x28
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	607a      	str	r2, [r7, #4]
 800d452:	603b      	str	r3, [r7, #0]
 800d454:	460b      	mov	r3, r1
 800d456:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800d458:	f7f8 feec 	bl	8006234 <HAL_GetTick>
 800d45c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800d45e:	2301      	movs	r3, #1
 800d460:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b20      	cmp	r3, #32
 800d46c:	f040 8111 	bne.w	800d692 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	2319      	movs	r3, #25
 800d476:	2201      	movs	r2, #1
 800d478:	4988      	ldr	r1, [pc, #544]	; (800d69c <HAL_I2C_IsDeviceReady+0x254>)
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f003 fa96 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800d486:	2302      	movs	r3, #2
 800d488:	e104      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d490:	2b01      	cmp	r3, #1
 800d492:	d101      	bne.n	800d498 <HAL_I2C_IsDeviceReady+0x50>
 800d494:	2302      	movs	r3, #2
 800d496:	e0fd      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d007      	beq.n	800d4be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f042 0201 	orr.w	r2, r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d4cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2224      	movs	r2, #36	; 0x24
 800d4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4a70      	ldr	r2, [pc, #448]	; (800d6a0 <HAL_I2C_IsDeviceReady+0x258>)
 800d4e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f003 fa54 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00d      	beq.n	800d526 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d518:	d103      	bne.n	800d522 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d520:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e0b6      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d526:	897b      	ldrh	r3, [r7, #10]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	461a      	mov	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d534:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800d536:	f7f8 fe7d 	bl	8006234 <HAL_GetTick>
 800d53a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	f003 0302 	and.w	r3, r3, #2
 800d546:	2b02      	cmp	r3, #2
 800d548:	bf0c      	ite	eq
 800d54a:	2301      	moveq	r3, #1
 800d54c:	2300      	movne	r3, #0
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	695b      	ldr	r3, [r3, #20]
 800d558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d55c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d560:	bf0c      	ite	eq
 800d562:	2301      	moveq	r3, #1
 800d564:	2300      	movne	r3, #0
 800d566:	b2db      	uxtb	r3, r3
 800d568:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d56a:	e025      	b.n	800d5b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d56c:	f7f8 fe62 	bl	8006234 <HAL_GetTick>
 800d570:	4602      	mov	r2, r0
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d302      	bcc.n	800d582 <HAL_I2C_IsDeviceReady+0x13a>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d103      	bne.n	800d58a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	22a0      	movs	r2, #160	; 0xa0
 800d586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	f003 0302 	and.w	r3, r3, #2
 800d594:	2b02      	cmp	r3, #2
 800d596:	bf0c      	ite	eq
 800d598:	2301      	moveq	r3, #1
 800d59a:	2300      	movne	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5ae:	bf0c      	ite	eq
 800d5b0:	2301      	moveq	r3, #1
 800d5b2:	2300      	movne	r3, #0
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2ba0      	cmp	r3, #160	; 0xa0
 800d5c2:	d005      	beq.n	800d5d0 <HAL_I2C_IsDeviceReady+0x188>
 800d5c4:	7dfb      	ldrb	r3, [r7, #23]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <HAL_I2C_IsDeviceReady+0x188>
 800d5ca:	7dbb      	ldrb	r3, [r7, #22]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d0cd      	beq.n	800d56c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2220      	movs	r2, #32
 800d5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	f003 0302 	and.w	r3, r3, #2
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d129      	bne.n	800d63a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	613b      	str	r3, [r7, #16]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	695b      	ldr	r3, [r3, #20]
 800d600:	613b      	str	r3, [r7, #16]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	613b      	str	r3, [r7, #16]
 800d60a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	2319      	movs	r3, #25
 800d612:	2201      	movs	r2, #1
 800d614:	4921      	ldr	r1, [pc, #132]	; (800d69c <HAL_I2C_IsDeviceReady+0x254>)
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f003 f9c8 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e036      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2220      	movs	r2, #32
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	e02c      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d648:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d652:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	2319      	movs	r3, #25
 800d65a:	2201      	movs	r2, #1
 800d65c:	490f      	ldr	r1, [pc, #60]	; (800d69c <HAL_I2C_IsDeviceReady+0x254>)
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f003 f9a4 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e012      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	3301      	adds	r3, #1
 800d672:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800d674:	69ba      	ldr	r2, [r7, #24]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	429a      	cmp	r2, r3
 800d67a:	f4ff af32 	bcc.w	800d4e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2220      	movs	r2, #32
 800d682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d68e:	2301      	movs	r3, #1
 800d690:	e000      	b.n	800d694 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800d692:	2302      	movs	r3, #2
  }
}
 800d694:	4618      	mov	r0, r3
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	00100002 	.word	0x00100002
 800d6a0:	ffff0000 	.word	0xffff0000

0800d6a4 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b087      	sub	sp, #28
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	607a      	str	r2, [r7, #4]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	817b      	strh	r3, [r7, #10]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b20      	cmp	r3, #32
 800d6ca:	f040 80a6 	bne.w	800d81a <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6dc:	d005      	beq.n	800d6ea <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	2b08      	cmp	r3, #8
 800d6e2:	d002      	beq.n	800d6ea <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d130      	bne.n	800d74c <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d6ea:	4b4f      	ldr	r3, [pc, #316]	; (800d828 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	08db      	lsrs	r3, r3, #3
 800d6f0:	4a4e      	ldr	r2, [pc, #312]	; (800d82c <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800d6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f6:	0a1a      	lsrs	r2, r3, #8
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	009a      	lsls	r2, r3, #2
 800d700:	4413      	add	r3, r2
 800d702:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	3b01      	subs	r3, #1
 800d708:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d116      	bne.n	800d73e <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2220      	movs	r2, #32
 800d71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72a:	f043 0220 	orr.w	r2, r3, #32
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	e06e      	b.n	800d81c <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d0db      	beq.n	800d704 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800d756:	2302      	movs	r3, #2
 800d758:	e060      	b.n	800d81c <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d007      	beq.n	800d780 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f042 0201 	orr.w	r2, r2, #1
 800d77e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d78e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2221      	movs	r2, #33	; 0x21
 800d794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2210      	movs	r2, #16
 800d79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	893a      	ldrh	r2, [r7, #8]
 800d7b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6a3a      	ldr	r2, [r7, #32]
 800d7c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d7c2:	897a      	ldrh	r2, [r7, #10]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7cc:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	2b11      	cmp	r3, #17
 800d7d2:	d10c      	bne.n	800d7ee <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800d7d4:	6a3b      	ldr	r3, [r7, #32]
 800d7d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d7da:	d003      	beq.n	800d7e4 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d7e2:	d101      	bne.n	800d7e8 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e000      	b.n	800d7ea <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d107      	bne.n	800d7fe <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7fc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d814:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	e000      	b.n	800d81c <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800d81a:	2302      	movs	r3, #2
  }
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	371c      	adds	r7, #28
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	20000058 	.word	0x20000058
 800d82c:	14f8b589 	.word	0x14f8b589

0800d830 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	607a      	str	r2, [r7, #4]
 800d83a:	461a      	mov	r2, r3
 800d83c:	460b      	mov	r3, r1
 800d83e:	817b      	strh	r3, [r7, #10]
 800d840:	4613      	mov	r3, r2
 800d842:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800d844:	2300      	movs	r3, #0
 800d846:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b20      	cmp	r3, #32
 800d856:	f040 8149 	bne.w	800daec <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d868:	d005      	beq.n	800d876 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800d86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86c:	2b08      	cmp	r3, #8
 800d86e:	d002      	beq.n	800d876 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	2b01      	cmp	r3, #1
 800d874:	d130      	bne.n	800d8d8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d876:	4b99      	ldr	r3, [pc, #612]	; (800dadc <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	08db      	lsrs	r3, r3, #3
 800d87c:	4a98      	ldr	r2, [pc, #608]	; (800dae0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800d87e:	fba2 2303 	umull	r2, r3, r2, r3
 800d882:	0a1a      	lsrs	r2, r3, #8
 800d884:	4613      	mov	r3, r2
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	4413      	add	r3, r2
 800d88a:	009a      	lsls	r2, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	3b01      	subs	r3, #1
 800d894:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d116      	bne.n	800d8ca <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b6:	f043 0220 	orr.w	r2, r3, #32
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e111      	b.n	800daee <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	f003 0302 	and.w	r3, r3, #2
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d0db      	beq.n	800d890 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d101      	bne.n	800d8e6 <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e103      	b.n	800daee <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0301 	and.w	r3, r3, #1
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d007      	beq.n	800d90c <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f042 0201 	orr.w	r2, r2, #1
 800d90a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d91a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2221      	movs	r2, #33	; 0x21
 800d920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2210      	movs	r2, #16
 800d928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	893a      	ldrh	r2, [r7, #8]
 800d93c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d942:	b29a      	uxth	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d94c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d94e:	897a      	ldrh	r2, [r7, #10]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d958:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 808d 	beq.w	800da7e <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d022      	beq.n	800d9b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d970:	4a5c      	ldr	r2, [pc, #368]	; (800dae4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800d972:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d978:	4a5b      	ldr	r2, [pc, #364]	; (800dae8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800d97a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	2200      	movs	r2, #0
 800d982:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d988:	2200      	movs	r2, #0
 800d98a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d994:	4619      	mov	r1, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3310      	adds	r3, #16
 800d99c:	461a      	mov	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9a2:	f7f9 feb0 	bl	8007706 <HAL_DMA_Start_IT>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d9aa:	7ffb      	ldrb	r3, [r7, #31]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d152      	bne.n	800da56 <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800d9b0:	e013      	b.n	800d9da <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2220      	movs	r2, #32
 800d9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e089      	b.n	800daee <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d9e8:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	2b11      	cmp	r3, #17
 800d9ee:	d10c      	bne.n	800da0a <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d9f6:	d003      	beq.n	800da00 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800d9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d9fe:	d101      	bne.n	800da04 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800da00:	2301      	movs	r3, #1
 800da02:	e000      	b.n	800da06 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800da04:	2300      	movs	r3, #0
 800da06:	2b01      	cmp	r3, #1
 800da08:	d107      	bne.n	800da1a <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da18:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	2b04      	cmp	r3, #4
 800da26:	d005      	beq.n	800da34 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800da28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2a:	2b20      	cmp	r3, #32
 800da2c:	d002      	beq.n	800da34 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	2b10      	cmp	r3, #16
 800da32:	d107      	bne.n	800da44 <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da42:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	685a      	ldr	r2, [r3, #4]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800da52:	605a      	str	r2, [r3, #4]
 800da54:	e03f      	b.n	800dad6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2220      	movs	r2, #32
 800da5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da6a:	f043 0210 	orr.w	r2, r3, #16
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2200      	movs	r2, #0
 800da76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e037      	b.n	800daee <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da8c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	2b11      	cmp	r3, #17
 800da92:	d10c      	bne.n	800daae <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da96:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800da9a:	d003      	beq.n	800daa4 <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800da9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800daa2:	d101      	bne.n	800daa8 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800daa4:	2301      	movs	r3, #1
 800daa6:	e000      	b.n	800daaa <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800daa8:	2300      	movs	r3, #0
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d107      	bne.n	800dabe <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dabc:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	685a      	ldr	r2, [r3, #4]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800dad4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800dad6:	2300      	movs	r3, #0
 800dad8:	e009      	b.n	800daee <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800dada:	bf00      	nop
 800dadc:	20000058 	.word	0x20000058
 800dae0:	14f8b589 	.word	0x14f8b589
 800dae4:	08010639 	.word	0x08010639
 800dae8:	080107e3 	.word	0x080107e3
  }
  else
  {
    return HAL_BUSY;
 800daec:	2302      	movs	r3, #2
  }
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3720      	adds	r7, #32
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b089      	sub	sp, #36	; 0x24
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	607a      	str	r2, [r7, #4]
 800db00:	461a      	mov	r2, r3
 800db02:	460b      	mov	r3, r1
 800db04:	817b      	strh	r3, [r7, #10]
 800db06:	4613      	mov	r3, r2
 800db08:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800db0a:	2300      	movs	r3, #0
 800db0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800db0e:	2300      	movs	r3, #0
 800db10:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db12:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800db16:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	2b20      	cmp	r3, #32
 800db22:	f040 80da 	bne.w	800dcda <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db34:	d005      	beq.n	800db42 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	2b08      	cmp	r3, #8
 800db3a:	d002      	beq.n	800db42 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d130      	bne.n	800dba4 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800db42:	4b69      	ldr	r3, [pc, #420]	; (800dce8 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	08db      	lsrs	r3, r3, #3
 800db48:	4a68      	ldr	r2, [pc, #416]	; (800dcec <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800db4a:	fba2 2303 	umull	r2, r3, r2, r3
 800db4e:	0a1a      	lsrs	r2, r3, #8
 800db50:	4613      	mov	r3, r2
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	009a      	lsls	r2, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	3b01      	subs	r3, #1
 800db60:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d116      	bne.n	800db96 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2220      	movs	r2, #32
 800db72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db82:	f043 0220 	orr.w	r2, r3, #32
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800db92:	2301      	movs	r3, #1
 800db94:	e0a2      	b.n	800dcdc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	f003 0302 	and.w	r3, r3, #2
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d0db      	beq.n	800db5c <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d101      	bne.n	800dbb2 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800dbae:	2302      	movs	r3, #2
 800dbb0:	e094      	b.n	800dcdc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d007      	beq.n	800dbd8 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f042 0201 	orr.w	r2, r2, #1
 800dbd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2222      	movs	r2, #34	; 0x22
 800dbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2210      	movs	r2, #16
 800dbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	893a      	ldrh	r2, [r7, #8]
 800dc08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dc1a:	897a      	ldrh	r2, [r7, #10]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc24:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d126      	bne.n	800dc7e <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800dc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d002      	beq.n	800dc3c <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc38:	2b10      	cmp	r3, #16
 800dc3a:	d120      	bne.n	800dc7e <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	2b12      	cmp	r3, #18
 800dc40:	d114      	bne.n	800dc6c <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc50:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc60:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc68:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800dc6a:	e010      	b.n	800dc8e <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc7a:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800dc7c:	e007      	b.n	800dc8e <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc8c:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	2b12      	cmp	r3, #18
 800dc92:	d10c      	bne.n	800dcae <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dc9a:	d003      	beq.n	800dca4 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dca2:	d101      	bne.n	800dca8 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d107      	bne.n	800dcbe <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dcbc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6859      	ldr	r1, [r3, #4]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	69fa      	ldr	r2, [r7, #28]
 800dcd2:	430a      	orrs	r2, r1
 800dcd4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e000      	b.n	800dcdc <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800dcda:	2302      	movs	r3, #2
  }
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3724      	adds	r7, #36	; 0x24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	20000058 	.word	0x20000058
 800dcec:	14f8b589 	.word	0x14f8b589

0800dcf0 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b088      	sub	sp, #32
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	607a      	str	r2, [r7, #4]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	817b      	strh	r3, [r7, #10]
 800dd00:	4613      	mov	r3, r2
 800dd02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dd04:	2300      	movs	r3, #0
 800dd06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd0c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800dd10:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b20      	cmp	r3, #32
 800dd1c:	f040 8199 	bne.w	800e052 <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd2e:	d005      	beq.n	800dd3c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	2b08      	cmp	r3, #8
 800dd34:	d002      	beq.n	800dd3c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d130      	bne.n	800dd9e <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dd3c:	4b8f      	ldr	r3, [pc, #572]	; (800df7c <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	08db      	lsrs	r3, r3, #3
 800dd42:	4a8f      	ldr	r2, [pc, #572]	; (800df80 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800dd44:	fba2 2303 	umull	r2, r3, r2, r3
 800dd48:	0a1a      	lsrs	r2, r3, #8
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	4413      	add	r3, r2
 800dd50:	009a      	lsls	r2, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d116      	bne.n	800dd90 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd7c:	f043 0220 	orr.w	r2, r3, #32
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e161      	b.n	800e054 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d0db      	beq.n	800dd56 <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d101      	bne.n	800ddac <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800dda8:	2302      	movs	r3, #2
 800ddaa:	e153      	b.n	800e054 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d007      	beq.n	800ddd2 <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f042 0201 	orr.w	r2, r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dde0:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	685a      	ldr	r2, [r3, #4]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ddf0:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2222      	movs	r2, #34	; 0x22
 800ddf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2210      	movs	r2, #16
 800ddfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	893a      	ldrh	r2, [r7, #8]
 800de12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de18:	b29a      	uxth	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800de24:	897a      	ldrh	r2, [r7, #10]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2e:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 80de 	beq.w	800dff6 <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de3e:	b29b      	uxth	r3, r3
 800de40:	2b02      	cmp	r3, #2
 800de42:	d12a      	bne.n	800de9a <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	2b20      	cmp	r3, #32
 800de48:	d002      	beq.n	800de50 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	2b10      	cmp	r3, #16
 800de4e:	d124      	bne.n	800de9a <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2b12      	cmp	r3, #18
 800de54:	d118      	bne.n	800de88 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de64:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de74:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	685a      	ldr	r2, [r3, #4]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de84:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800de86:	e022      	b.n	800dece <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de96:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800de98:	e019      	b.n	800dece <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dea8:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	2b20      	cmp	r3, #32
 800deae:	d006      	beq.n	800debe <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800deb6:	d002      	beq.n	800debe <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	2b10      	cmp	r3, #16
 800debc:	d107      	bne.n	800dece <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800decc:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d022      	beq.n	800df1c <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deda:	4a2a      	ldr	r2, [pc, #168]	; (800df84 <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800dedc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee2:	4a29      	ldr	r2, [pc, #164]	; (800df88 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800dee4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	2200      	movs	r2, #0
 800deec:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	2200      	movs	r2, #0
 800def4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3310      	adds	r3, #16
 800df00:	4619      	mov	r1, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df06:	461a      	mov	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df0c:	f7f9 fbfb 	bl	8007706 <HAL_DMA_Start_IT>
 800df10:	4603      	mov	r3, r0
 800df12:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800df14:	7efb      	ldrb	r3, [r7, #27]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d159      	bne.n	800dfce <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800df1a:	e013      	b.n	800df44 <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2220      	movs	r2, #32
 800df20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	e087      	b.n	800e054 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2b12      	cmp	r3, #18
 800df48:	d10c      	bne.n	800df64 <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800df4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800df50:	d003      	beq.n	800df5a <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800df58:	d101      	bne.n	800df5e <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e000      	b.n	800df60 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800df5e:	2300      	movs	r3, #0
 800df60:	2b01      	cmp	r3, #1
 800df62:	d113      	bne.n	800df8c <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df72:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800df74:	f44f 7340 	mov.w	r3, #768	; 0x300
 800df78:	61fb      	str	r3, [r7, #28]
 800df7a:	e00a      	b.n	800df92 <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800df7c:	20000058 	.word	0x20000058
 800df80:	14f8b589 	.word	0x14f8b589
 800df84:	08010639 	.word	0x08010639
 800df88:	080107e3 	.word	0x080107e3
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800df8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df90:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	2b04      	cmp	r3, #4
 800df9e:	d005      	beq.n	800dfac <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	2b20      	cmp	r3, #32
 800dfa4:	d002      	beq.n	800dfac <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	2b10      	cmp	r3, #16
 800dfaa:	d107      	bne.n	800dfbc <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	685a      	ldr	r2, [r3, #4]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfba:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	6859      	ldr	r1, [r3, #4]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69fa      	ldr	r2, [r7, #28]
 800dfc8:	430a      	orrs	r2, r1
 800dfca:	605a      	str	r2, [r3, #4]
 800dfcc:	e03f      	b.n	800e04e <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2220      	movs	r2, #32
 800dfd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe2:	f043 0210 	orr.w	r2, r3, #16
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e02e      	b.n	800e054 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e004:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	2b12      	cmp	r3, #18
 800e00a:	d10c      	bne.n	800e026 <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e012:	d003      	beq.n	800e01c <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e01a:	d101      	bne.n	800e020 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800e01c:	2301      	movs	r3, #1
 800e01e:	e000      	b.n	800e022 <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800e020:	2300      	movs	r3, #0
 800e022:	2b01      	cmp	r3, #1
 800e024:	d107      	bne.n	800e036 <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e034:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	6859      	ldr	r1, [r3, #4]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	430a      	orrs	r2, r1
 800e04c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	e000      	b.n	800e054 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800e052:	2302      	movs	r3, #2
  }
}
 800e054:	4618      	mov	r0, r3
 800e056:	3720      	adds	r7, #32
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	603b      	str	r3, [r7, #0]
 800e068:	4613      	mov	r3, r2
 800e06a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e072:	b2db      	uxtb	r3, r3
 800e074:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e078:	2b28      	cmp	r3, #40	; 0x28
 800e07a:	d15b      	bne.n	800e134 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800e082:	88fb      	ldrh	r3, [r7, #6]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d101      	bne.n	800e08c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800e088:	2301      	movs	r3, #1
 800e08a:	e054      	b.n	800e136 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800e096:	2302      	movs	r3, #2
 800e098:	e04d      	b.n	800e136 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 0301 	and.w	r3, r3, #1
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d007      	beq.n	800e0c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f042 0201 	orr.w	r2, r2, #1
 800e0be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2229      	movs	r2, #41	; 0x29
 800e0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2220      	movs	r2, #32
 800e0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	88fa      	ldrh	r2, [r7, #6]
 800e0f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e102:	2300      	movs	r3, #0
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	695b      	ldr	r3, [r3, #20]
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	699b      	ldr	r3, [r3, #24]
 800e114:	617b      	str	r3, [r7, #20]
 800e116:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e12e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e130:	2300      	movs	r3, #0
 800e132:	e000      	b.n	800e136 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e134:	2302      	movs	r3, #2
  }
}
 800e136:	4618      	mov	r0, r3
 800e138:	371c      	adds	r7, #28
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b086      	sub	sp, #24
 800e146:	af00      	add	r7, sp, #0
 800e148:	60f8      	str	r0, [r7, #12]
 800e14a:	60b9      	str	r1, [r7, #8]
 800e14c:	603b      	str	r3, [r7, #0]
 800e14e:	4613      	mov	r3, r2
 800e150:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e15e:	2b28      	cmp	r3, #40	; 0x28
 800e160:	f040 811e 	bne.w	800e3a0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e16a:	88fb      	ldrh	r3, [r7, #6]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d101      	bne.n	800e174 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e116      	b.n	800e3a2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d101      	bne.n	800e182 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e17e:	2302      	movs	r3, #2
 800e180:	e10f      	b.n	800e3a2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2201      	movs	r2, #1
 800e186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e198:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a4:	d127      	bne.n	800e1f6 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1b4:	d14c      	bne.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d048      	beq.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1cc:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d2:	4a76      	ldr	r2, [pc, #472]	; (800e3ac <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e1d4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7f9 fb5b 	bl	8007896 <HAL_DMA_Abort_IT>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d034      	beq.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	4798      	blx	r3
 800e1f4:	e02c      	b.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b29      	cmp	r3, #41	; 0x29
 800e200:	d126      	bne.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e20c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e210:	d11e      	bne.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	685a      	ldr	r2, [r3, #4]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e220:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e226:	2b00      	cmp	r3, #0
 800e228:	d012      	beq.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22e:	4a5f      	ldr	r2, [pc, #380]	; (800e3ac <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e230:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e236:	4618      	mov	r0, r3
 800e238:	f7f9 fb2d 	bl	8007896 <HAL_DMA_Abort_IT>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d006      	beq.n	800e250 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e24c:	4610      	mov	r0, r2
 800e24e:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f003 0301 	and.w	r3, r3, #1
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d007      	beq.n	800e26e <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f042 0201 	orr.w	r2, r2, #1
 800e26c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e27c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2229      	movs	r2, #41	; 0x29
 800e282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2220      	movs	r2, #32
 800e28a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	88fa      	ldrh	r2, [r7, #6]
 800e29e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d022      	beq.n	800e2fe <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2bc:	4a3c      	ldr	r2, [pc, #240]	; (800e3b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e2be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c4:	4a3b      	ldr	r2, [pc, #236]	; (800e3b4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e2c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3310      	adds	r3, #16
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2ee:	f7f9 fa0a 	bl	8007706 <HAL_DMA_Start_IT>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e2f6:	7dfb      	ldrb	r3, [r7, #23]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d13d      	bne.n	800e378 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e2fc:	e013      	b.n	800e326 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2228      	movs	r2, #40	; 0x28
 800e302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e312:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	e03d      	b.n	800e3a2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e336:	2300      	movs	r3, #0
 800e338:	613b      	str	r3, [r7, #16]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	613b      	str	r3, [r7, #16]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	613b      	str	r3, [r7, #16]
 800e34a:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685a      	ldr	r2, [r3, #4]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e362:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685a      	ldr	r2, [r3, #4]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e372:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e374:	2300      	movs	r3, #0
 800e376:	e014      	b.n	800e3a2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2220      	movs	r2, #32
 800e37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2200      	movs	r2, #0
 800e384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e38c:	f043 0210 	orr.w	r2, r3, #16
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	e000      	b.n	800e3a2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e3a0:	2302      	movs	r3, #2
  }
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	0801085d 	.word	0x0801085d
 800e3b0:	08010639 	.word	0x08010639
 800e3b4:	080107e3 	.word	0x080107e3

0800e3b8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	603b      	str	r3, [r7, #0]
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e3d4:	2b28      	cmp	r3, #40	; 0x28
 800e3d6:	d15b      	bne.n	800e490 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d002      	beq.n	800e3e4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800e3de:	88fb      	ldrh	r3, [r7, #6]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d101      	bne.n	800e3e8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e054      	b.n	800e492 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d101      	bne.n	800e3f6 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e04d      	b.n	800e492 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d007      	beq.n	800e41c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f042 0201 	orr.w	r2, r2, #1
 800e41a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e42a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	222a      	movs	r2, #42	; 0x2a
 800e430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2220      	movs	r2, #32
 800e438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	68ba      	ldr	r2, [r7, #8]
 800e446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	88fa      	ldrh	r2, [r7, #6]
 800e44c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e452:	b29a      	uxth	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	683a      	ldr	r2, [r7, #0]
 800e45c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e45e:	2300      	movs	r3, #0
 800e460:	617b      	str	r3, [r7, #20]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	617b      	str	r3, [r7, #20]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	617b      	str	r3, [r7, #20]
 800e472:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2200      	movs	r2, #0
 800e478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e48a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e000      	b.n	800e492 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e490:	2302      	movs	r3, #2
  }
}
 800e492:	4618      	mov	r0, r3
 800e494:	371c      	adds	r7, #28
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr

0800e49e <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b086      	sub	sp, #24
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	60f8      	str	r0, [r7, #12]
 800e4a6:	60b9      	str	r1, [r7, #8]
 800e4a8:	603b      	str	r3, [r7, #0]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e4ba:	2b28      	cmp	r3, #40	; 0x28
 800e4bc:	f040 811e 	bne.w	800e6fc <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d002      	beq.n	800e4cc <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800e4c6:	88fb      	ldrh	r3, [r7, #6]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e116      	b.n	800e6fe <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d101      	bne.n	800e4de <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800e4da:	2302      	movs	r3, #2
 800e4dc:	e10f      	b.n	800e6fe <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e4f4:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800e500:	d127      	bne.n	800e552 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e50c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e510:	d14c      	bne.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e516:	2b00      	cmp	r3, #0
 800e518:	d048      	beq.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e528:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	4a76      	ldr	r2, [pc, #472]	; (800e708 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800e530:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e536:	4618      	mov	r0, r3
 800e538:	f7f9 f9ad 	bl	8007896 <HAL_DMA_Abort_IT>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d034      	beq.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e54c:	4610      	mov	r0, r2
 800e54e:	4798      	blx	r3
 800e550:	e02c      	b.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	2b29      	cmp	r3, #41	; 0x29
 800e55c:	d126      	bne.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e56c:	d11e      	bne.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e57c:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e582:	2b00      	cmp	r3, #0
 800e584:	d012      	beq.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e58a:	4a5f      	ldr	r2, [pc, #380]	; (800e708 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800e58c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e592:	4618      	mov	r0, r3
 800e594:	f7f9 f97f 	bl	8007896 <HAL_DMA_Abort_IT>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d006      	beq.n	800e5ac <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d007      	beq.n	800e5ca <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f042 0201 	orr.w	r2, r2, #1
 800e5c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	222a      	movs	r2, #42	; 0x2a
 800e5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	88fa      	ldrh	r2, [r7, #6]
 800e5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e600:	b29a      	uxth	r2, r3
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e610:	2b00      	cmp	r3, #0
 800e612:	d022      	beq.n	800e65a <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e618:	4a3c      	ldr	r2, [pc, #240]	; (800e70c <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800e61a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	4a3b      	ldr	r2, [pc, #236]	; (800e710 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800e622:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e628:	2200      	movs	r2, #0
 800e62a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e630:	2200      	movs	r2, #0
 800e632:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	3310      	adds	r3, #16
 800e63e:	4619      	mov	r1, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	461a      	mov	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e64a:	f7f9 f85c 	bl	8007706 <HAL_DMA_Start_IT>
 800e64e:	4603      	mov	r3, r0
 800e650:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d13d      	bne.n	800e6d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800e658:	e013      	b.n	800e682 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2228      	movs	r2, #40	; 0x28
 800e65e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e66e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e03d      	b.n	800e6fe <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e692:	2300      	movs	r3, #0
 800e694:	613b      	str	r3, [r7, #16]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	695b      	ldr	r3, [r3, #20]
 800e69c:	613b      	str	r3, [r7, #16]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	699b      	ldr	r3, [r3, #24]
 800e6a4:	613b      	str	r3, [r7, #16]
 800e6a6:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6be:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e6ce:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	e014      	b.n	800e6fe <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2220      	movs	r2, #32
 800e6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e8:	f043 0210 	orr.w	r2, r3, #16
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e000      	b.n	800e6fe <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e6fc:	2302      	movs	r3, #2
  }
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3718      	adds	r7, #24
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	0801085d 	.word	0x0801085d
 800e70c:	08010639 	.word	0x08010639
 800e710:	080107e3 	.word	0x080107e3

0800e714 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b20      	cmp	r3, #32
 800e726:	d124      	bne.n	800e772 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2228      	movs	r2, #40	; 0x28
 800e72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 0301 	and.w	r3, r3, #1
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d007      	beq.n	800e74e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f042 0201 	orr.w	r2, r2, #1
 800e74c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e75c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e76c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	e000      	b.n	800e774 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800e772:	2302      	movs	r3, #2
  }
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b28      	cmp	r3, #40	; 0x28
 800e792:	d129      	bne.n	800e7e8 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	f003 0303 	and.w	r3, r3, #3
 800e7a0:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2220      	movs	r2, #32
 800e7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7d2:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	685a      	ldr	r2, [r3, #4]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e7e2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	e000      	b.n	800e7ea <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800e7e8:	2302      	movs	r3, #2
  }
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	460b      	mov	r3, r1
 800e800:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e808:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	f003 0302 	and.w	r3, r3, #2
 800e814:	2b02      	cmp	r3, #2
 800e816:	d138      	bne.n	800e88a <HAL_I2C_Master_Abort_IT+0x94>
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	2b10      	cmp	r3, #16
 800e81c:	d135      	bne.n	800e88a <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e824:	2b01      	cmp	r3, #1
 800e826:	d101      	bne.n	800e82c <HAL_I2C_Master_Abort_IT+0x36>
 800e828:	2302      	movs	r3, #2
 800e82a:	e02f      	b.n	800e88c <HAL_I2C_Master_Abort_IT+0x96>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2260      	movs	r2, #96	; 0x60
 800e83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e850:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e860:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	685a      	ldr	r2, [r3, #4]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e876:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f001 fad9 	bl	800fe38 <I2C_ITError>

    return HAL_OK;
 800e886:	2300      	movs	r3, #0
 800e888:	e000      	b.n	800e88c <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800e88a:	2301      	movs	r3, #1
  }
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800e89c:	2300      	movs	r3, #0
 800e89e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	2b10      	cmp	r3, #16
 800e8c2:	d003      	beq.n	800e8cc <HAL_I2C_EV_IRQHandler+0x38>
 800e8c4:	7bfb      	ldrb	r3, [r7, #15]
 800e8c6:	2b40      	cmp	r3, #64	; 0x40
 800e8c8:	f040 80c1 	bne.w	800ea4e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	699b      	ldr	r3, [r3, #24]
 800e8d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10d      	bne.n	800e902 <HAL_I2C_EV_IRQHandler+0x6e>
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e8ec:	d003      	beq.n	800e8f6 <HAL_I2C_EV_IRQHandler+0x62>
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e8f4:	d101      	bne.n	800e8fa <HAL_I2C_EV_IRQHandler+0x66>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e000      	b.n	800e8fc <HAL_I2C_EV_IRQHandler+0x68>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	f000 8132 	beq.w	800eb66 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	f003 0301 	and.w	r3, r3, #1
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00c      	beq.n	800e926 <HAL_I2C_EV_IRQHandler+0x92>
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	0a5b      	lsrs	r3, r3, #9
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	d006      	beq.n	800e926 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f002 fa94 	bl	8010e46 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fda1 	bl	800f466 <I2C_Master_SB>
 800e924:	e092      	b.n	800ea4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	08db      	lsrs	r3, r3, #3
 800e92a:	f003 0301 	and.w	r3, r3, #1
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d009      	beq.n	800e946 <HAL_I2C_EV_IRQHandler+0xb2>
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	0a5b      	lsrs	r3, r3, #9
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fe17 	bl	800f572 <I2C_Master_ADD10>
 800e944:	e082      	b.n	800ea4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	085b      	lsrs	r3, r3, #1
 800e94a:	f003 0301 	and.w	r3, r3, #1
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d009      	beq.n	800e966 <HAL_I2C_EV_IRQHandler+0xd2>
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	0a5b      	lsrs	r3, r3, #9
 800e956:	f003 0301 	and.w	r3, r3, #1
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fe31 	bl	800f5c6 <I2C_Master_ADDR>
 800e964:	e072      	b.n	800ea4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	089b      	lsrs	r3, r3, #2
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d03b      	beq.n	800e9ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e980:	f000 80f3 	beq.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	09db      	lsrs	r3, r3, #7
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00f      	beq.n	800e9b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	0a9b      	lsrs	r3, r3, #10
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d009      	beq.n	800e9b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	089b      	lsrs	r3, r3, #2
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d103      	bne.n	800e9b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fa1b 	bl	800ede4 <I2C_MasterTransmit_TXE>
 800e9ae:	e04d      	b.n	800ea4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	089b      	lsrs	r3, r3, #2
 800e9b4:	f003 0301 	and.w	r3, r3, #1
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 80d6 	beq.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	0a5b      	lsrs	r3, r3, #9
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	f000 80cf 	beq.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
 800e9ce:	2b21      	cmp	r3, #33	; 0x21
 800e9d0:	d103      	bne.n	800e9da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 faa2 	bl	800ef1c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9d8:	e0c7      	b.n	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800e9da:	7bfb      	ldrb	r3, [r7, #15]
 800e9dc:	2b40      	cmp	r3, #64	; 0x40
 800e9de:	f040 80c4 	bne.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 fb10 	bl	800f008 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9e8:	e0bf      	b.n	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9f8:	f000 80b7 	beq.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	099b      	lsrs	r3, r3, #6
 800ea00:	f003 0301 	and.w	r3, r3, #1
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00f      	beq.n	800ea28 <HAL_I2C_EV_IRQHandler+0x194>
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	0a9b      	lsrs	r3, r3, #10
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d009      	beq.n	800ea28 <HAL_I2C_EV_IRQHandler+0x194>
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	089b      	lsrs	r3, r3, #2
 800ea18:	f003 0301 	and.w	r3, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d103      	bne.n	800ea28 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 fb85 	bl	800f130 <I2C_MasterReceive_RXNE>
 800ea26:	e011      	b.n	800ea4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	089b      	lsrs	r3, r3, #2
 800ea2c:	f003 0301 	and.w	r3, r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f000 809a 	beq.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	0a5b      	lsrs	r3, r3, #9
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 8093 	beq.w	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fc24 	bl	800f292 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea4a:	e08e      	b.n	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
 800ea4c:	e08d      	b.n	800eb6a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d004      	beq.n	800ea60 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	695b      	ldr	r3, [r3, #20]
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	e007      	b.n	800ea70 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	699b      	ldr	r3, [r3, #24]
 800ea66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	695b      	ldr	r3, [r3, #20]
 800ea6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	085b      	lsrs	r3, r3, #1
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d012      	beq.n	800eaa2 <HAL_I2C_EV_IRQHandler+0x20e>
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	0a5b      	lsrs	r3, r3, #9
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00c      	beq.n	800eaa2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	699b      	ldr	r3, [r3, #24]
 800ea96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ea98:	69b9      	ldr	r1, [r7, #24]
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 ffe2 	bl	800fa64 <I2C_Slave_ADDR>
 800eaa0:	e066      	b.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	091b      	lsrs	r3, r3, #4
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d009      	beq.n	800eac2 <HAL_I2C_EV_IRQHandler+0x22e>
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	0a5b      	lsrs	r3, r3, #9
 800eab2:	f003 0301 	and.w	r3, r3, #1
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d003      	beq.n	800eac2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f001 f81c 	bl	800faf8 <I2C_Slave_STOPF>
 800eac0:	e056      	b.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
 800eac4:	2b21      	cmp	r3, #33	; 0x21
 800eac6:	d002      	beq.n	800eace <HAL_I2C_EV_IRQHandler+0x23a>
 800eac8:	7bbb      	ldrb	r3, [r7, #14]
 800eaca:	2b29      	cmp	r3, #41	; 0x29
 800eacc:	d125      	bne.n	800eb1a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	09db      	lsrs	r3, r3, #7
 800ead2:	f003 0301 	and.w	r3, r3, #1
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00f      	beq.n	800eafa <HAL_I2C_EV_IRQHandler+0x266>
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	0a9b      	lsrs	r3, r3, #10
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d009      	beq.n	800eafa <HAL_I2C_EV_IRQHandler+0x266>
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	089b      	lsrs	r3, r3, #2
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d103      	bne.n	800eafa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fef8 	bl	800f8e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eaf8:	e039      	b.n	800eb6e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	089b      	lsrs	r3, r3, #2
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d033      	beq.n	800eb6e <HAL_I2C_EV_IRQHandler+0x2da>
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	0a5b      	lsrs	r3, r3, #9
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d02d      	beq.n	800eb6e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 ff25 	bl	800f962 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eb18:	e029      	b.n	800eb6e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	099b      	lsrs	r3, r3, #6
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00f      	beq.n	800eb46 <HAL_I2C_EV_IRQHandler+0x2b2>
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	0a9b      	lsrs	r3, r3, #10
 800eb2a:	f003 0301 	and.w	r3, r3, #1
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d009      	beq.n	800eb46 <HAL_I2C_EV_IRQHandler+0x2b2>
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	089b      	lsrs	r3, r3, #2
 800eb36:	f003 0301 	and.w	r3, r3, #1
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d103      	bne.n	800eb46 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 ff30 	bl	800f9a4 <I2C_SlaveReceive_RXNE>
 800eb44:	e014      	b.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	089b      	lsrs	r3, r3, #2
 800eb4a:	f003 0301 	and.w	r3, r3, #1
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00e      	beq.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	0a5b      	lsrs	r3, r3, #9
 800eb56:	f003 0301 	and.w	r3, r3, #1
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d008      	beq.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 ff5e 	bl	800fa20 <I2C_SlaveReceive_BTF>
 800eb64:	e004      	b.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800eb66:	bf00      	nop
 800eb68:	e002      	b.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eb6a:	bf00      	nop
 800eb6c:	e000      	b.n	800eb70 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eb6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800eb70:	3720      	adds	r7, #32
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b08a      	sub	sp, #40	; 0x28
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	695b      	ldr	r3, [r3, #20]
 800eb84:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb98:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800eb9a:	6a3b      	ldr	r3, [r7, #32]
 800eb9c:	0a1b      	lsrs	r3, r3, #8
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00e      	beq.n	800ebc4 <HAL_I2C_ER_IRQHandler+0x4e>
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d008      	beq.n	800ebc4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ebb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb4:	f043 0301 	orr.w	r3, r3, #1
 800ebb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ebc2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	0a5b      	lsrs	r3, r3, #9
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00e      	beq.n	800ebee <HAL_I2C_ER_IRQHandler+0x78>
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	0a1b      	lsrs	r3, r3, #8
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d008      	beq.n	800ebee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	f043 0302 	orr.w	r3, r3, #2
 800ebe2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800ebec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	0a9b      	lsrs	r3, r3, #10
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d03f      	beq.n	800ec7a <HAL_I2C_ER_IRQHandler+0x104>
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	0a1b      	lsrs	r3, r3, #8
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d039      	beq.n	800ec7a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800ec06:	7efb      	ldrb	r3, [r7, #27]
 800ec08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ec20:	7ebb      	ldrb	r3, [r7, #26]
 800ec22:	2b20      	cmp	r3, #32
 800ec24:	d112      	bne.n	800ec4c <HAL_I2C_ER_IRQHandler+0xd6>
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10f      	bne.n	800ec4c <HAL_I2C_ER_IRQHandler+0xd6>
 800ec2c:	7cfb      	ldrb	r3, [r7, #19]
 800ec2e:	2b21      	cmp	r3, #33	; 0x21
 800ec30:	d008      	beq.n	800ec44 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ec32:	7cfb      	ldrb	r3, [r7, #19]
 800ec34:	2b29      	cmp	r3, #41	; 0x29
 800ec36:	d005      	beq.n	800ec44 <HAL_I2C_ER_IRQHandler+0xce>
 800ec38:	7cfb      	ldrb	r3, [r7, #19]
 800ec3a:	2b28      	cmp	r3, #40	; 0x28
 800ec3c:	d106      	bne.n	800ec4c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b21      	cmp	r3, #33	; 0x21
 800ec42:	d103      	bne.n	800ec4c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f001 f887 	bl	800fd58 <I2C_Slave_AF>
 800ec4a:	e016      	b.n	800ec7a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ec54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec58:	f043 0304 	orr.w	r3, r3, #4
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ec5e:	7efb      	ldrb	r3, [r7, #27]
 800ec60:	2b10      	cmp	r3, #16
 800ec62:	d002      	beq.n	800ec6a <HAL_I2C_ER_IRQHandler+0xf4>
 800ec64:	7efb      	ldrb	r3, [r7, #27]
 800ec66:	2b40      	cmp	r3, #64	; 0x40
 800ec68:	d107      	bne.n	800ec7a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ec7a:	6a3b      	ldr	r3, [r7, #32]
 800ec7c:	0adb      	lsrs	r3, r3, #11
 800ec7e:	f003 0301 	and.w	r3, r3, #1
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00e      	beq.n	800eca4 <HAL_I2C_ER_IRQHandler+0x12e>
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	0a1b      	lsrs	r3, r3, #8
 800ec8a:	f003 0301 	and.w	r3, r3, #1
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d008      	beq.n	800eca4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	f043 0308 	orr.w	r3, r3, #8
 800ec98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800eca2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d008      	beq.n	800ecbc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ecae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb0:	431a      	orrs	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f001 f8be 	bl	800fe38 <I2C_ITError>
  }
}
 800ecbc:	bf00      	nop
 800ecbe:	3728      	adds	r7, #40	; 0x28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800eccc:	bf00      	nop
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
 800ed20:	4613      	mov	r3, r2
 800ed22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ed4c:	bf00      	nop
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eda2:	b2db      	uxtb	r3, r3
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800edbe:	b2db      	uxtb	r3, r3
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800edd8:	4618      	mov	r0, r3
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800edfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d150      	bne.n	800eeac <I2C_MasterTransmit_TXE+0xc8>
 800ee0a:	7bfb      	ldrb	r3, [r7, #15]
 800ee0c:	2b21      	cmp	r3, #33	; 0x21
 800ee0e:	d14d      	bne.n	800eeac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	2b08      	cmp	r3, #8
 800ee14:	d01d      	beq.n	800ee52 <I2C_MasterTransmit_TXE+0x6e>
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	2b20      	cmp	r3, #32
 800ee1a:	d01a      	beq.n	800ee52 <I2C_MasterTransmit_TXE+0x6e>
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ee22:	d016      	beq.n	800ee52 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	685a      	ldr	r2, [r3, #4]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee32:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2211      	movs	r2, #17
 800ee38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2220      	movs	r2, #32
 800ee46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff ff3a 	bl	800ecc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ee50:	e060      	b.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee60:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee70:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b40      	cmp	r3, #64	; 0x40
 800ee8a:	d107      	bne.n	800ee9c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff ff55 	bl	800ed44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ee9a:	e03b      	b.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff ff0d 	bl	800ecc4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800eeaa:	e033      	b.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	2b21      	cmp	r3, #33	; 0x21
 800eeb0:	d005      	beq.n	800eebe <I2C_MasterTransmit_TXE+0xda>
 800eeb2:	7bbb      	ldrb	r3, [r7, #14]
 800eeb4:	2b40      	cmp	r3, #64	; 0x40
 800eeb6:	d12d      	bne.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	2b22      	cmp	r3, #34	; 0x22
 800eebc:	d12a      	bne.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d108      	bne.n	800eeda <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	685a      	ldr	r2, [r3, #4]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eed6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800eed8:	e01c      	b.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	2b40      	cmp	r3, #64	; 0x40
 800eee4:	d103      	bne.n	800eeee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f88e 	bl	800f008 <I2C_MemoryTransmit_TXE_BTF>
}
 800eeec:	e012      	b.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef2:	781a      	ldrb	r2, [r3, #0]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefe:	1c5a      	adds	r2, r3, #1
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	b29a      	uxth	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ef12:	e7ff      	b.n	800ef14 <I2C_MasterTransmit_TXE+0x130>
 800ef14:	bf00      	nop
 800ef16:	3710      	adds	r7, #16
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef28:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	2b21      	cmp	r3, #33	; 0x21
 800ef34:	d164      	bne.n	800f000 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d012      	beq.n	800ef66 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef44:	781a      	ldrb	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef50:	1c5a      	adds	r2, r3, #1
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ef64:	e04c      	b.n	800f000 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b08      	cmp	r3, #8
 800ef6a:	d01d      	beq.n	800efa8 <I2C_MasterTransmit_BTF+0x8c>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2b20      	cmp	r3, #32
 800ef70:	d01a      	beq.n	800efa8 <I2C_MasterTransmit_BTF+0x8c>
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ef78:	d016      	beq.n	800efa8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ef88:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2211      	movs	r2, #17
 800ef8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2220      	movs	r2, #32
 800ef9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff fe8f 	bl	800ecc4 <HAL_I2C_MasterTxCpltCallback>
}
 800efa6:	e02b      	b.n	800f000 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800efb6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efc6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2220      	movs	r2, #32
 800efd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	2b40      	cmp	r3, #64	; 0x40
 800efe0:	d107      	bne.n	800eff2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7ff feaa 	bl	800ed44 <HAL_I2C_MemTxCpltCallback>
}
 800eff0:	e006      	b.n	800f000 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff fe62 	bl	800ecc4 <HAL_I2C_MasterTxCpltCallback>
}
 800f000:	bf00      	nop
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f016:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d11d      	bne.n	800f05c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f024:	2b01      	cmp	r3, #1
 800f026:	d10b      	bne.n	800f040 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f038:	1c9a      	adds	r2, r3, #2
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f03e:	e073      	b.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f044:	b29b      	uxth	r3, r3
 800f046:	121b      	asrs	r3, r3, #8
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f05a:	e065      	b.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f060:	2b01      	cmp	r3, #1
 800f062:	d10b      	bne.n	800f07c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f07a:	e055      	b.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f080:	2b02      	cmp	r3, #2
 800f082:	d151      	bne.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f084:	7bfb      	ldrb	r3, [r7, #15]
 800f086:	2b22      	cmp	r3, #34	; 0x22
 800f088:	d10d      	bne.n	800f0a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f098:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f09e:	1c5a      	adds	r2, r3, #1
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f0a4:	e040      	b.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d015      	beq.n	800f0dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
 800f0b2:	2b21      	cmp	r3, #33	; 0x21
 800f0b4:	d112      	bne.n	800f0dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f0da:	e025      	b.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d120      	bne.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	2b21      	cmp	r3, #33	; 0x21
 800f0ea:	d11d      	bne.n	800f128 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f0fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f10a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2220      	movs	r2, #32
 800f116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff fe0e 	bl	800ed44 <HAL_I2C_MemTxCpltCallback>
}
 800f128:	bf00      	nop
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	2b22      	cmp	r3, #34	; 0x22
 800f142:	f040 80a2 	bne.w	800f28a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b03      	cmp	r3, #3
 800f152:	d921      	bls.n	800f198 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	691a      	ldr	r2, [r3, #16]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15e:	b2d2      	uxtb	r2, r2
 800f160:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f166:	1c5a      	adds	r2, r3, #1
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f170:	b29b      	uxth	r3, r3
 800f172:	3b01      	subs	r3, #1
 800f174:	b29a      	uxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f17e:	b29b      	uxth	r3, r3
 800f180:	2b03      	cmp	r3, #3
 800f182:	f040 8082 	bne.w	800f28a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f194:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f196:	e078      	b.n	800f28a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d074      	beq.n	800f28a <I2C_MasterReceive_RXNE+0x15a>
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d002      	beq.n	800f1ac <I2C_MasterReceive_RXNE+0x7c>
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d16e      	bne.n	800f28a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f001 fd92 	bl	8010cd6 <I2C_WaitOnSTOPRequestThroughIT>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d142      	bne.n	800f23e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f1d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	691a      	ldr	r2, [r3, #16]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e2:	b2d2      	uxtb	r2, r2
 800f1e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	b29a      	uxth	r2, r3
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2220      	movs	r2, #32
 800f202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b40      	cmp	r3, #64	; 0x40
 800f210:	d10a      	bne.n	800f228 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2200      	movs	r2, #0
 800f216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f7ff fd99 	bl	800ed58 <HAL_I2C_MemRxCpltCallback>
}
 800f226:	e030      	b.n	800f28a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2212      	movs	r2, #18
 800f234:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff fd4e 	bl	800ecd8 <HAL_I2C_MasterRxCpltCallback>
}
 800f23c:	e025      	b.n	800f28a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f24c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	691a      	ldr	r2, [r3, #16]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f258:	b2d2      	uxtb	r2, r2
 800f25a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f260:	1c5a      	adds	r2, r3, #1
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	3b01      	subs	r3, #1
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2220      	movs	r2, #32
 800f278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff fd71 	bl	800ed6c <HAL_I2C_ErrorCallback>
}
 800f28a:	bf00      	nop
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b084      	sub	sp, #16
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f29e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	2b04      	cmp	r3, #4
 800f2a8:	d11b      	bne.n	800f2e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	691a      	ldr	r2, [r3, #16]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c4:	b2d2      	uxtb	r2, r2
 800f2c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f2e0:	e0bd      	b.n	800f45e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d129      	bne.n	800f340 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2b04      	cmp	r3, #4
 800f300:	d00a      	beq.n	800f318 <I2C_MasterReceive_BTF+0x86>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b02      	cmp	r3, #2
 800f306:	d007      	beq.n	800f318 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f316:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	691a      	ldr	r2, [r3, #16]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f322:	b2d2      	uxtb	r2, r2
 800f324:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32a:	1c5a      	adds	r2, r3, #1
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f334:	b29b      	uxth	r3, r3
 800f336:	3b01      	subs	r3, #1
 800f338:	b29a      	uxth	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f33e:	e08e      	b.n	800f45e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f344:	b29b      	uxth	r3, r3
 800f346:	2b02      	cmp	r3, #2
 800f348:	d176      	bne.n	800f438 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d002      	beq.n	800f356 <I2C_MasterReceive_BTF+0xc4>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b10      	cmp	r3, #16
 800f354:	d108      	bne.n	800f368 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	e019      	b.n	800f39c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	d002      	beq.n	800f374 <I2C_MasterReceive_BTF+0xe2>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b02      	cmp	r3, #2
 800f372:	d108      	bne.n	800f386 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f382:	601a      	str	r2, [r3, #0]
 800f384:	e00a      	b.n	800f39c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b10      	cmp	r3, #16
 800f38a:	d007      	beq.n	800f39c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f39a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	691a      	ldr	r2, [r3, #16]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a6:	b2d2      	uxtb	r2, r2
 800f3a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ae:	1c5a      	adds	r2, r3, #1
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	691a      	ldr	r2, [r3, #16]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3cc:	b2d2      	uxtb	r2, r2
 800f3ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d4:	1c5a      	adds	r2, r3, #1
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f3f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2220      	movs	r2, #32
 800f3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f406:	b2db      	uxtb	r3, r3
 800f408:	2b40      	cmp	r3, #64	; 0x40
 800f40a:	d10a      	bne.n	800f422 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff fc9c 	bl	800ed58 <HAL_I2C_MemRxCpltCallback>
}
 800f420:	e01d      	b.n	800f45e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2200      	movs	r2, #0
 800f426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2212      	movs	r2, #18
 800f42e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7ff fc51 	bl	800ecd8 <HAL_I2C_MasterRxCpltCallback>
}
 800f436:	e012      	b.n	800f45e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	691a      	ldr	r2, [r3, #16]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f442:	b2d2      	uxtb	r2, r2
 800f444:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44a:	1c5a      	adds	r2, r3, #1
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f454:	b29b      	uxth	r3, r3
 800f456:	3b01      	subs	r3, #1
 800f458:	b29a      	uxth	r2, r3
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f45e:	bf00      	nop
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800f466:	b480      	push	{r7}
 800f468:	b083      	sub	sp, #12
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b40      	cmp	r3, #64	; 0x40
 800f478:	d117      	bne.n	800f4aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d109      	bne.n	800f496 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f486:	b2db      	uxtb	r3, r3
 800f488:	461a      	mov	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f492:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800f494:	e067      	b.n	800f566 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	f043 0301 	orr.w	r3, r3, #1
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	611a      	str	r2, [r3, #16]
}
 800f4a8:	e05d      	b.n	800f566 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4b2:	d133      	bne.n	800f51c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	2b21      	cmp	r3, #33	; 0x21
 800f4be:	d109      	bne.n	800f4d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f4d0:	611a      	str	r2, [r3, #16]
 800f4d2:	e008      	b.n	800f4e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	f043 0301 	orr.w	r3, r3, #1
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d004      	beq.n	800f4f8 <I2C_Master_SB+0x92>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d108      	bne.n	800f50a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d032      	beq.n	800f566 <I2C_Master_SB+0x100>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f506:	2b00      	cmp	r3, #0
 800f508:	d02d      	beq.n	800f566 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	685a      	ldr	r2, [r3, #4]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f518:	605a      	str	r2, [r3, #4]
}
 800f51a:	e024      	b.n	800f566 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10e      	bne.n	800f542 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f528:	b29b      	uxth	r3, r3
 800f52a:	11db      	asrs	r3, r3, #7
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	f003 0306 	and.w	r3, r3, #6
 800f532:	b2db      	uxtb	r3, r3
 800f534:	f063 030f 	orn	r3, r3, #15
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	611a      	str	r2, [r3, #16]
}
 800f540:	e011      	b.n	800f566 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f546:	2b01      	cmp	r3, #1
 800f548:	d10d      	bne.n	800f566 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f54e:	b29b      	uxth	r3, r3
 800f550:	11db      	asrs	r3, r3, #7
 800f552:	b2db      	uxtb	r3, r3
 800f554:	f003 0306 	and.w	r3, r3, #6
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	f063 030e 	orn	r3, r3, #14
 800f55e:	b2da      	uxtb	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	611a      	str	r2, [r3, #16]
}
 800f566:	bf00      	nop
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800f572:	b480      	push	{r7}
 800f574:	b083      	sub	sp, #12
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d004      	beq.n	800f598 <I2C_Master_ADD10+0x26>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f594:	2b00      	cmp	r3, #0
 800f596:	d108      	bne.n	800f5aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00c      	beq.n	800f5ba <I2C_Master_ADD10+0x48>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d007      	beq.n	800f5ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5b8:	605a      	str	r2, [r3, #4]
  }
}
 800f5ba:	bf00      	nop
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800f5c6:	b480      	push	{r7}
 800f5c8:	b091      	sub	sp, #68	; 0x44
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b22      	cmp	r3, #34	; 0x22
 800f5ee:	f040 8169 	bne.w	800f8c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d10f      	bne.n	800f61a <I2C_Master_ADDR+0x54>
 800f5fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5fe:	2b40      	cmp	r3, #64	; 0x40
 800f600:	d10b      	bne.n	800f61a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f602:	2300      	movs	r3, #0
 800f604:	60fb      	str	r3, [r7, #12]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	60fb      	str	r3, [r7, #12]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	699b      	ldr	r3, [r3, #24]
 800f614:	60fb      	str	r3, [r7, #12]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	e160      	b.n	800f8dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d11d      	bne.n	800f65e <I2C_Master_ADDR+0x98>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f62a:	d118      	bne.n	800f65e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f62c:	2300      	movs	r3, #0
 800f62e:	613b      	str	r3, [r7, #16]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	695b      	ldr	r3, [r3, #20]
 800f636:	613b      	str	r3, [r7, #16]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	699b      	ldr	r3, [r3, #24]
 800f63e:	613b      	str	r3, [r7, #16]
 800f640:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f650:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f656:	1c5a      	adds	r2, r3, #1
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	651a      	str	r2, [r3, #80]	; 0x50
 800f65c:	e13e      	b.n	800f8dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f662:	b29b      	uxth	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d113      	bne.n	800f690 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f668:	2300      	movs	r3, #0
 800f66a:	617b      	str	r3, [r7, #20]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	617b      	str	r3, [r7, #20]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	617b      	str	r3, [r7, #20]
 800f67c:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	e115      	b.n	800f8bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f694:	b29b      	uxth	r3, r3
 800f696:	2b01      	cmp	r3, #1
 800f698:	f040 808a 	bne.w	800f7b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800f69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f6a2:	d137      	bne.n	800f714 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6c2:	d113      	bne.n	800f6ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	61bb      	str	r3, [r7, #24]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	695b      	ldr	r3, [r3, #20]
 800f6de:	61bb      	str	r3, [r7, #24]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	61bb      	str	r3, [r7, #24]
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	e0e7      	b.n	800f8bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	61fb      	str	r3, [r7, #28]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	695b      	ldr	r3, [r3, #20]
 800f6f6:	61fb      	str	r3, [r7, #28]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	699b      	ldr	r3, [r3, #24]
 800f6fe:	61fb      	str	r3, [r7, #28]
 800f700:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	e0d3      	b.n	800f8bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	2b08      	cmp	r3, #8
 800f718:	d02e      	beq.n	800f778 <I2C_Master_ADDR+0x1b2>
 800f71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71c:	2b20      	cmp	r3, #32
 800f71e:	d02b      	beq.n	800f778 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800f720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f722:	2b12      	cmp	r3, #18
 800f724:	d102      	bne.n	800f72c <I2C_Master_ADDR+0x166>
 800f726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d125      	bne.n	800f778 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	2b04      	cmp	r3, #4
 800f730:	d00e      	beq.n	800f750 <I2C_Master_ADDR+0x18a>
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	2b02      	cmp	r3, #2
 800f736:	d00b      	beq.n	800f750 <I2C_Master_ADDR+0x18a>
 800f738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73a:	2b10      	cmp	r3, #16
 800f73c:	d008      	beq.n	800f750 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f74c:	601a      	str	r2, [r3, #0]
 800f74e:	e007      	b.n	800f760 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f75e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f760:	2300      	movs	r3, #0
 800f762:	623b      	str	r3, [r7, #32]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	695b      	ldr	r3, [r3, #20]
 800f76a:	623b      	str	r3, [r7, #32]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	623b      	str	r3, [r7, #32]
 800f774:	6a3b      	ldr	r3, [r7, #32]
 800f776:	e0a1      	b.n	800f8bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f786:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f788:	2300      	movs	r3, #0
 800f78a:	627b      	str	r3, [r7, #36]	; 0x24
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	627b      	str	r3, [r7, #36]	; 0x24
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	699b      	ldr	r3, [r3, #24]
 800f79a:	627b      	str	r3, [r7, #36]	; 0x24
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7ac:	601a      	str	r2, [r3, #0]
 800f7ae:	e085      	b.n	800f8bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	2b02      	cmp	r3, #2
 800f7b8:	d14d      	bne.n	800f856 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	2b04      	cmp	r3, #4
 800f7be:	d016      	beq.n	800f7ee <I2C_Master_ADDR+0x228>
 800f7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	d013      	beq.n	800f7ee <I2C_Master_ADDR+0x228>
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c8:	2b10      	cmp	r3, #16
 800f7ca:	d010      	beq.n	800f7ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7ea:	601a      	str	r2, [r3, #0]
 800f7ec:	e007      	b.n	800f7fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f7fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f80c:	d117      	bne.n	800f83e <I2C_Master_ADDR+0x278>
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f814:	d00b      	beq.n	800f82e <I2C_Master_ADDR+0x268>
 800f816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d008      	beq.n	800f82e <I2C_Master_ADDR+0x268>
 800f81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81e:	2b08      	cmp	r3, #8
 800f820:	d005      	beq.n	800f82e <I2C_Master_ADDR+0x268>
 800f822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f824:	2b10      	cmp	r3, #16
 800f826:	d002      	beq.n	800f82e <I2C_Master_ADDR+0x268>
 800f828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82a:	2b20      	cmp	r3, #32
 800f82c:	d107      	bne.n	800f83e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f83c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f83e:	2300      	movs	r3, #0
 800f840:	62bb      	str	r3, [r7, #40]	; 0x28
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	695b      	ldr	r3, [r3, #20]
 800f848:	62bb      	str	r3, [r7, #40]	; 0x28
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	699b      	ldr	r3, [r3, #24]
 800f850:	62bb      	str	r3, [r7, #40]	; 0x28
 800f852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f854:	e032      	b.n	800f8bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f864:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f874:	d117      	bne.n	800f8a6 <I2C_Master_ADDR+0x2e0>
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f87c:	d00b      	beq.n	800f896 <I2C_Master_ADDR+0x2d0>
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	2b01      	cmp	r3, #1
 800f882:	d008      	beq.n	800f896 <I2C_Master_ADDR+0x2d0>
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	2b08      	cmp	r3, #8
 800f888:	d005      	beq.n	800f896 <I2C_Master_ADDR+0x2d0>
 800f88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88c:	2b10      	cmp	r3, #16
 800f88e:	d002      	beq.n	800f896 <I2C_Master_ADDR+0x2d0>
 800f890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f892:	2b20      	cmp	r3, #32
 800f894:	d107      	bne.n	800f8a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	685a      	ldr	r2, [r3, #4]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	695b      	ldr	r3, [r3, #20]
 800f8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800f8c2:	e00b      	b.n	800f8dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	633b      	str	r3, [r7, #48]	; 0x30
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	633b      	str	r3, [r7, #48]	; 0x30
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	699b      	ldr	r3, [r3, #24]
 800f8d6:	633b      	str	r3, [r7, #48]	; 0x30
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800f8da:	e7ff      	b.n	800f8dc <I2C_Master_ADDR+0x316>
 800f8dc:	bf00      	nop
 800f8de:	3744      	adds	r7, #68	; 0x44
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d02b      	beq.n	800f95a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f906:	781a      	ldrb	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	3b01      	subs	r3, #1
 800f920:	b29a      	uxth	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d114      	bne.n	800f95a <I2C_SlaveTransmit_TXE+0x72>
 800f930:	7bfb      	ldrb	r3, [r7, #15]
 800f932:	2b29      	cmp	r3, #41	; 0x29
 800f934:	d111      	bne.n	800f95a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	685a      	ldr	r2, [r3, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f944:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2221      	movs	r2, #33	; 0x21
 800f94a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2228      	movs	r2, #40	; 0x28
 800f950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff f9c9 	bl	800ecec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800f95a:	bf00      	nop
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f962:	b480      	push	{r7}
 800f964:	b083      	sub	sp, #12
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f96e:	b29b      	uxth	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	d011      	beq.n	800f998 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f978:	781a      	ldrb	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f98e:	b29b      	uxth	r3, r3
 800f990:	3b01      	subs	r3, #1
 800f992:	b29a      	uxth	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d02c      	beq.n	800fa18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	691a      	ldr	r2, [r3, #16]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c8:	b2d2      	uxtb	r2, r2
 800f9ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d0:	1c5a      	adds	r2, r3, #1
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d114      	bne.n	800fa18 <I2C_SlaveReceive_RXNE+0x74>
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
 800f9f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f9f2:	d111      	bne.n	800fa18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	685a      	ldr	r2, [r3, #4]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2222      	movs	r2, #34	; 0x22
 800fa08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2228      	movs	r2, #40	; 0x28
 800fa0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7ff f974 	bl	800ed00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d012      	beq.n	800fa58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	691a      	ldr	r2, [r3, #16]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	b2d2      	uxtb	r2, r2
 800fa3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	3b01      	subs	r3, #1
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fa7e:	2b28      	cmp	r3, #40	; 0x28
 800fa80:	d127      	bne.n	800fad2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	089b      	lsrs	r3, r3, #2
 800fa96:	f003 0301 	and.w	r3, r3, #1
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d101      	bne.n	800faa2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	09db      	lsrs	r3, r3, #7
 800faa6:	f003 0301 	and.w	r3, r3, #1
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d103      	bne.n	800fab6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	68db      	ldr	r3, [r3, #12]
 800fab2:	81bb      	strh	r3, [r7, #12]
 800fab4:	e002      	b.n	800fabc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800fac4:	89ba      	ldrh	r2, [r7, #12]
 800fac6:	7bfb      	ldrb	r3, [r7, #15]
 800fac8:	4619      	mov	r1, r3
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7ff f922 	bl	800ed14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fad0:	e00e      	b.n	800faf0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fad2:	2300      	movs	r3, #0
 800fad4:	60bb      	str	r3, [r7, #8]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	695b      	ldr	r3, [r3, #20]
 800fadc:	60bb      	str	r3, [r7, #8]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	699b      	ldr	r3, [r3, #24]
 800fae4:	60bb      	str	r3, [r7, #8]
 800fae6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fb16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800fb18:	2300      	movs	r3, #0
 800fb1a:	60bb      	str	r3, [r7, #8]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	695b      	ldr	r3, [r3, #20]
 800fb22:	60bb      	str	r3, [r7, #8]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f042 0201 	orr.w	r2, r2, #1
 800fb32:	601a      	str	r2, [r3, #0]
 800fb34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb54:	d172      	bne.n	800fc3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fb56:	7bfb      	ldrb	r3, [r7, #15]
 800fb58:	2b22      	cmp	r3, #34	; 0x22
 800fb5a:	d002      	beq.n	800fb62 <I2C_Slave_STOPF+0x6a>
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	2b2a      	cmp	r3, #42	; 0x2a
 800fb60:	d135      	bne.n	800fbce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d005      	beq.n	800fb86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb7e:	f043 0204 	orr.w	r2, r3, #4
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	685a      	ldr	r2, [r3, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fb94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7f8 f9c1 	bl	8007f22 <HAL_DMA_GetState>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d049      	beq.n	800fc3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbaa:	4a69      	ldr	r2, [pc, #420]	; (800fd50 <I2C_Slave_STOPF+0x258>)
 800fbac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f7 fe6f 	bl	8007896 <HAL_DMA_Abort_IT>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d03d      	beq.n	800fc3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fbc8:	4610      	mov	r0, r2
 800fbca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fbcc:	e035      	b.n	800fc3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d005      	beq.n	800fbf2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbea:	f043 0204 	orr.w	r2, r3, #4
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	685a      	ldr	r2, [r3, #4]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fc00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7f8 f98b 	bl	8007f22 <HAL_DMA_GetState>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d014      	beq.n	800fc3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc16:	4a4e      	ldr	r2, [pc, #312]	; (800fd50 <I2C_Slave_STOPF+0x258>)
 800fc18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7f7 fe39 	bl	8007896 <HAL_DMA_Abort_IT>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d008      	beq.n	800fc3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fc34:	4610      	mov	r0, r2
 800fc36:	4798      	blx	r3
 800fc38:	e000      	b.n	800fc3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fc3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d03e      	beq.n	800fcc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	695b      	ldr	r3, [r3, #20]
 800fc4c:	f003 0304 	and.w	r3, r3, #4
 800fc50:	2b04      	cmp	r3, #4
 800fc52:	d112      	bne.n	800fc7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	691a      	ldr	r2, [r3, #16]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5e:	b2d2      	uxtb	r2, r2
 800fc60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	1c5a      	adds	r2, r3, #1
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	3b01      	subs	r3, #1
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	695b      	ldr	r3, [r3, #20]
 800fc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc84:	2b40      	cmp	r3, #64	; 0x40
 800fc86:	d112      	bne.n	800fcae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	691a      	ldr	r2, [r3, #16]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc92:	b2d2      	uxtb	r2, r2
 800fc94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9a:	1c5a      	adds	r2, r3, #1
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	3b01      	subs	r3, #1
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d005      	beq.n	800fcc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcbc:	f043 0204 	orr.w	r2, r3, #4
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d003      	beq.n	800fcd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f8b3 	bl	800fe38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800fcd2:	e039      	b.n	800fd48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
 800fcd6:	2b2a      	cmp	r3, #42	; 0x2a
 800fcd8:	d109      	bne.n	800fcee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2228      	movs	r2, #40	; 0x28
 800fce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff f809 	bl	800ed00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	2b28      	cmp	r3, #40	; 0x28
 800fcf8:	d111      	bne.n	800fd1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a15      	ldr	r2, [pc, #84]	; (800fd54 <I2C_Slave_STOPF+0x25c>)
 800fcfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2220      	movs	r2, #32
 800fd0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2200      	movs	r2, #0
 800fd12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff f80a 	bl	800ed30 <HAL_I2C_ListenCpltCallback>
}
 800fd1c:	e014      	b.n	800fd48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd22:	2b22      	cmp	r3, #34	; 0x22
 800fd24:	d002      	beq.n	800fd2c <I2C_Slave_STOPF+0x234>
 800fd26:	7bfb      	ldrb	r3, [r7, #15]
 800fd28:	2b22      	cmp	r3, #34	; 0x22
 800fd2a:	d10d      	bne.n	800fd48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2220      	movs	r2, #32
 800fd36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7fe ffdc 	bl	800ed00 <HAL_I2C_SlaveRxCpltCallback>
}
 800fd48:	bf00      	nop
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	0801085d 	.word	0x0801085d
 800fd54:	ffff0000 	.word	0xffff0000

0800fd58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	2b08      	cmp	r3, #8
 800fd72:	d002      	beq.n	800fd7a <I2C_Slave_AF+0x22>
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	2b20      	cmp	r3, #32
 800fd78:	d129      	bne.n	800fdce <I2C_Slave_AF+0x76>
 800fd7a:	7bfb      	ldrb	r3, [r7, #15]
 800fd7c:	2b28      	cmp	r3, #40	; 0x28
 800fd7e:	d126      	bne.n	800fdce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	4a2c      	ldr	r2, [pc, #176]	; (800fe34 <I2C_Slave_AF+0xdc>)
 800fd84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fd94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fd9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2220      	movs	r2, #32
 800fdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7fe ffb2 	bl	800ed30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800fdcc:	e02e      	b.n	800fe2c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	2b21      	cmp	r3, #33	; 0x21
 800fdd2:	d126      	bne.n	800fe22 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	4a17      	ldr	r2, [pc, #92]	; (800fe34 <I2C_Slave_AF+0xdc>)
 800fdd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2221      	movs	r2, #33	; 0x21
 800fdde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2220      	movs	r2, #32
 800fde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	685a      	ldr	r2, [r3, #4]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fdfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fe08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe18:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7fe ff66 	bl	800ecec <HAL_I2C_SlaveTxCpltCallback>
}
 800fe20:	e004      	b.n	800fe2c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fe2a:	615a      	str	r2, [r3, #20]
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	ffff0000 	.word	0xffff0000

0800fe38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fe50:	7bbb      	ldrb	r3, [r7, #14]
 800fe52:	2b10      	cmp	r3, #16
 800fe54:	d002      	beq.n	800fe5c <I2C_ITError+0x24>
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	2b40      	cmp	r3, #64	; 0x40
 800fe5a:	d10a      	bne.n	800fe72 <I2C_ITError+0x3a>
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	2b22      	cmp	r3, #34	; 0x22
 800fe60:	d107      	bne.n	800fe72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fe70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
 800fe74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fe78:	2b28      	cmp	r3, #40	; 0x28
 800fe7a:	d107      	bne.n	800fe8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2228      	movs	r2, #40	; 0x28
 800fe86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fe8a:	e015      	b.n	800feb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe9a:	d00a      	beq.n	800feb2 <I2C_ITError+0x7a>
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
 800fe9e:	2b60      	cmp	r3, #96	; 0x60
 800fea0:	d007      	beq.n	800feb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2220      	movs	r2, #32
 800fea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fec6:	d162      	bne.n	800ff8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fed6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fedc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d020      	beq.n	800ff28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feea:	4a6a      	ldr	r2, [pc, #424]	; (8010094 <I2C_ITError+0x25c>)
 800feec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7f7 fccf 	bl	8007896 <HAL_DMA_Abort_IT>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f000 8089 	beq.w	8010012 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f022 0201 	bic.w	r2, r2, #1
 800ff0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2220      	movs	r2, #32
 800ff14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ff22:	4610      	mov	r0, r2
 800ff24:	4798      	blx	r3
 800ff26:	e074      	b.n	8010012 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff2c:	4a59      	ldr	r2, [pc, #356]	; (8010094 <I2C_ITError+0x25c>)
 800ff2e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7f7 fcae 	bl	8007896 <HAL_DMA_Abort_IT>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d068      	beq.n	8010012 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	695b      	ldr	r3, [r3, #20]
 800ff46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff4a:	2b40      	cmp	r3, #64	; 0x40
 800ff4c:	d10b      	bne.n	800ff66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	691a      	ldr	r2, [r3, #16]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff58:	b2d2      	uxtb	r2, r2
 800ff5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f022 0201 	bic.w	r2, r2, #1
 800ff74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2220      	movs	r2, #32
 800ff7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ff88:	4610      	mov	r0, r2
 800ff8a:	4798      	blx	r3
 800ff8c:	e041      	b.n	8010012 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	2b60      	cmp	r3, #96	; 0x60
 800ff98:	d125      	bne.n	800ffe6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2220      	movs	r2, #32
 800ff9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	695b      	ldr	r3, [r3, #20]
 800ffae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffb2:	2b40      	cmp	r3, #64	; 0x40
 800ffb4:	d10b      	bne.n	800ffce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	691a      	ldr	r2, [r3, #16]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	b2d2      	uxtb	r2, r2
 800ffc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	1c5a      	adds	r2, r3, #1
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f022 0201 	bic.w	r2, r2, #1
 800ffdc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7fe fece 	bl	800ed80 <HAL_I2C_AbortCpltCallback>
 800ffe4:	e015      	b.n	8010012 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	695b      	ldr	r3, [r3, #20]
 800ffec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fff0:	2b40      	cmp	r3, #64	; 0x40
 800fff2:	d10b      	bne.n	801000c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	691a      	ldr	r2, [r3, #16]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffe:	b2d2      	uxtb	r2, r2
 8010000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010006:	1c5a      	adds	r2, r3, #1
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7fe fead 	bl	800ed6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010016:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	2b00      	cmp	r3, #0
 8010020:	d10e      	bne.n	8010040 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010028:	2b00      	cmp	r3, #0
 801002a:	d109      	bne.n	8010040 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010032:	2b00      	cmp	r3, #0
 8010034:	d104      	bne.n	8010040 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801003c:	2b00      	cmp	r3, #0
 801003e:	d007      	beq.n	8010050 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	685a      	ldr	r2, [r3, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801004e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010056:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801005c:	f003 0304 	and.w	r3, r3, #4
 8010060:	2b04      	cmp	r3, #4
 8010062:	d113      	bne.n	801008c <I2C_ITError+0x254>
 8010064:	7bfb      	ldrb	r3, [r7, #15]
 8010066:	2b28      	cmp	r3, #40	; 0x28
 8010068:	d110      	bne.n	801008c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4a0a      	ldr	r2, [pc, #40]	; (8010098 <I2C_ITError+0x260>)
 801006e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2220      	movs	r2, #32
 801007a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7fe fe52 	bl	800ed30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801008c:	bf00      	nop
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	0801085d 	.word	0x0801085d
 8010098:	ffff0000 	.word	0xffff0000

0801009c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b088      	sub	sp, #32
 80100a0:	af02      	add	r7, sp, #8
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	607a      	str	r2, [r7, #4]
 80100a6:	603b      	str	r3, [r7, #0]
 80100a8:	460b      	mov	r3, r1
 80100aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	2b08      	cmp	r3, #8
 80100b6:	d006      	beq.n	80100c6 <I2C_MasterRequestWrite+0x2a>
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d003      	beq.n	80100c6 <I2C_MasterRequestWrite+0x2a>
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80100c4:	d108      	bne.n	80100d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100d4:	601a      	str	r2, [r3, #0]
 80100d6:	e00b      	b.n	80100f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100dc:	2b12      	cmp	r3, #18
 80100de:	d107      	bne.n	80100f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f000 fc55 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d00d      	beq.n	8010124 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010116:	d103      	bne.n	8010120 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801011e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010120:	2303      	movs	r3, #3
 8010122:	e035      	b.n	8010190 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801012c:	d108      	bne.n	8010140 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801012e:	897b      	ldrh	r3, [r7, #10]
 8010130:	b2db      	uxtb	r3, r3
 8010132:	461a      	mov	r2, r3
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801013c:	611a      	str	r2, [r3, #16]
 801013e:	e01b      	b.n	8010178 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010140:	897b      	ldrh	r3, [r7, #10]
 8010142:	11db      	asrs	r3, r3, #7
 8010144:	b2db      	uxtb	r3, r3
 8010146:	f003 0306 	and.w	r3, r3, #6
 801014a:	b2db      	uxtb	r3, r3
 801014c:	f063 030f 	orn	r3, r3, #15
 8010150:	b2da      	uxtb	r2, r3
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	490e      	ldr	r1, [pc, #56]	; (8010198 <I2C_MasterRequestWrite+0xfc>)
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f000 fc7b 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801016a:	2301      	movs	r3, #1
 801016c:	e010      	b.n	8010190 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801016e:	897b      	ldrh	r3, [r7, #10]
 8010170:	b2da      	uxtb	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	4907      	ldr	r1, [pc, #28]	; (801019c <I2C_MasterRequestWrite+0x100>)
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f000 fc6b 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801018a:	2301      	movs	r3, #1
 801018c:	e000      	b.n	8010190 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	00010008 	.word	0x00010008
 801019c:	00010002 	.word	0x00010002

080101a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b088      	sub	sp, #32
 80101a4:	af02      	add	r7, sp, #8
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	607a      	str	r2, [r7, #4]
 80101aa:	603b      	str	r3, [r7, #0]
 80101ac:	460b      	mov	r3, r1
 80101ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	2b08      	cmp	r3, #8
 80101ca:	d006      	beq.n	80101da <I2C_MasterRequestRead+0x3a>
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d003      	beq.n	80101da <I2C_MasterRequestRead+0x3a>
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80101d8:	d108      	bne.n	80101ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	e00b      	b.n	8010204 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f0:	2b11      	cmp	r3, #17
 80101f2:	d107      	bne.n	8010204 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 fbcb 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00d      	beq.n	8010238 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801022a:	d103      	bne.n	8010234 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010234:	2303      	movs	r3, #3
 8010236:	e079      	b.n	801032c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	691b      	ldr	r3, [r3, #16]
 801023c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010240:	d108      	bne.n	8010254 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010242:	897b      	ldrh	r3, [r7, #10]
 8010244:	b2db      	uxtb	r3, r3
 8010246:	f043 0301 	orr.w	r3, r3, #1
 801024a:	b2da      	uxtb	r2, r3
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	611a      	str	r2, [r3, #16]
 8010252:	e05f      	b.n	8010314 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010254:	897b      	ldrh	r3, [r7, #10]
 8010256:	11db      	asrs	r3, r3, #7
 8010258:	b2db      	uxtb	r3, r3
 801025a:	f003 0306 	and.w	r3, r3, #6
 801025e:	b2db      	uxtb	r3, r3
 8010260:	f063 030f 	orn	r3, r3, #15
 8010264:	b2da      	uxtb	r2, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	687a      	ldr	r2, [r7, #4]
 8010270:	4930      	ldr	r1, [pc, #192]	; (8010334 <I2C_MasterRequestRead+0x194>)
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f000 fbf1 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	e054      	b.n	801032c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010282:	897b      	ldrh	r3, [r7, #10]
 8010284:	b2da      	uxtb	r2, r3
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	4929      	ldr	r1, [pc, #164]	; (8010338 <I2C_MasterRequestRead+0x198>)
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f000 fbe1 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801029e:	2301      	movs	r3, #1
 80102a0:	e044      	b.n	801032c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80102a2:	2300      	movs	r3, #0
 80102a4:	613b      	str	r3, [r7, #16]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	613b      	str	r3, [r7, #16]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	613b      	str	r3, [r7, #16]
 80102b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80102c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	9300      	str	r3, [sp, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f000 fb69 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00d      	beq.n	80102fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ee:	d103      	bne.n	80102f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80102f8:	2303      	movs	r3, #3
 80102fa:	e017      	b.n	801032c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80102fc:	897b      	ldrh	r3, [r7, #10]
 80102fe:	11db      	asrs	r3, r3, #7
 8010300:	b2db      	uxtb	r3, r3
 8010302:	f003 0306 	and.w	r3, r3, #6
 8010306:	b2db      	uxtb	r3, r3
 8010308:	f063 030e 	orn	r3, r3, #14
 801030c:	b2da      	uxtb	r2, r3
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	4907      	ldr	r1, [pc, #28]	; (8010338 <I2C_MasterRequestRead+0x198>)
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f000 fb9d 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d001      	beq.n	801032a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	e000      	b.n	801032c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3718      	adds	r7, #24
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	00010008 	.word	0x00010008
 8010338:	00010002 	.word	0x00010002

0801033c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af02      	add	r7, sp, #8
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	4608      	mov	r0, r1
 8010346:	4611      	mov	r1, r2
 8010348:	461a      	mov	r2, r3
 801034a:	4603      	mov	r3, r0
 801034c:	817b      	strh	r3, [r7, #10]
 801034e:	460b      	mov	r3, r1
 8010350:	813b      	strh	r3, [r7, #8]
 8010352:	4613      	mov	r3, r2
 8010354:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	6a3b      	ldr	r3, [r7, #32]
 801036c:	2200      	movs	r2, #0
 801036e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010372:	68f8      	ldr	r0, [r7, #12]
 8010374:	f000 fb1a 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00d      	beq.n	801039a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801038c:	d103      	bne.n	8010396 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010396:	2303      	movs	r3, #3
 8010398:	e05f      	b.n	801045a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801039a:	897b      	ldrh	r3, [r7, #10]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	461a      	mov	r2, r3
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80103a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	6a3a      	ldr	r2, [r7, #32]
 80103ae:	492d      	ldr	r1, [pc, #180]	; (8010464 <I2C_RequestMemoryWrite+0x128>)
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f000 fb52 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80103bc:	2301      	movs	r3, #1
 80103be:	e04c      	b.n	801045a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80103c0:	2300      	movs	r3, #0
 80103c2:	617b      	str	r3, [r7, #20]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	617b      	str	r3, [r7, #20]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80103d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103d8:	6a39      	ldr	r1, [r7, #32]
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	f000 fbbc 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00d      	beq.n	8010402 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ea:	2b04      	cmp	r3, #4
 80103ec:	d107      	bne.n	80103fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	e02b      	b.n	801045a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010402:	88fb      	ldrh	r3, [r7, #6]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d105      	bne.n	8010414 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010408:	893b      	ldrh	r3, [r7, #8]
 801040a:	b2da      	uxtb	r2, r3
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	611a      	str	r2, [r3, #16]
 8010412:	e021      	b.n	8010458 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010414:	893b      	ldrh	r3, [r7, #8]
 8010416:	0a1b      	lsrs	r3, r3, #8
 8010418:	b29b      	uxth	r3, r3
 801041a:	b2da      	uxtb	r2, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010424:	6a39      	ldr	r1, [r7, #32]
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f000 fb96 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00d      	beq.n	801044e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010436:	2b04      	cmp	r3, #4
 8010438:	d107      	bne.n	801044a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	e005      	b.n	801045a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801044e:	893b      	ldrh	r3, [r7, #8]
 8010450:	b2da      	uxtb	r2, r3
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010458:	2300      	movs	r3, #0
}
 801045a:	4618      	mov	r0, r3
 801045c:	3718      	adds	r7, #24
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	bf00      	nop
 8010464:	00010002 	.word	0x00010002

08010468 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b088      	sub	sp, #32
 801046c:	af02      	add	r7, sp, #8
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	4608      	mov	r0, r1
 8010472:	4611      	mov	r1, r2
 8010474:	461a      	mov	r2, r3
 8010476:	4603      	mov	r3, r0
 8010478:	817b      	strh	r3, [r7, #10]
 801047a:	460b      	mov	r3, r1
 801047c:	813b      	strh	r3, [r7, #8]
 801047e:	4613      	mov	r3, r2
 8010480:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010490:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80104a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a4:	9300      	str	r3, [sp, #0]
 80104a6:	6a3b      	ldr	r3, [r7, #32]
 80104a8:	2200      	movs	r2, #0
 80104aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f000 fa7c 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00d      	beq.n	80104d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c8:	d103      	bne.n	80104d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80104d2:	2303      	movs	r3, #3
 80104d4:	e0aa      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80104d6:	897b      	ldrh	r3, [r7, #10]
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	461a      	mov	r2, r3
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80104e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80104e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e8:	6a3a      	ldr	r2, [r7, #32]
 80104ea:	4952      	ldr	r1, [pc, #328]	; (8010634 <I2C_RequestMemoryRead+0x1cc>)
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f000 fab4 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d001      	beq.n	80104fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80104f8:	2301      	movs	r3, #1
 80104fa:	e097      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104fc:	2300      	movs	r3, #0
 80104fe:	617b      	str	r3, [r7, #20]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	695b      	ldr	r3, [r3, #20]
 8010506:	617b      	str	r3, [r7, #20]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	699b      	ldr	r3, [r3, #24]
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010514:	6a39      	ldr	r1, [r7, #32]
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f000 fb1e 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00d      	beq.n	801053e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010526:	2b04      	cmp	r3, #4
 8010528:	d107      	bne.n	801053a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010538:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801053a:	2301      	movs	r3, #1
 801053c:	e076      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801053e:	88fb      	ldrh	r3, [r7, #6]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d105      	bne.n	8010550 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010544:	893b      	ldrh	r3, [r7, #8]
 8010546:	b2da      	uxtb	r2, r3
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	611a      	str	r2, [r3, #16]
 801054e:	e021      	b.n	8010594 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010550:	893b      	ldrh	r3, [r7, #8]
 8010552:	0a1b      	lsrs	r3, r3, #8
 8010554:	b29b      	uxth	r3, r3
 8010556:	b2da      	uxtb	r2, r3
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801055e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010560:	6a39      	ldr	r1, [r7, #32]
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f000 faf8 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00d      	beq.n	801058a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010572:	2b04      	cmp	r3, #4
 8010574:	d107      	bne.n	8010586 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010584:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	e050      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801058a:	893b      	ldrh	r3, [r7, #8]
 801058c:	b2da      	uxtb	r2, r3
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010596:	6a39      	ldr	r1, [r7, #32]
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f000 fadd 	bl	8010b58 <I2C_WaitOnTXEFlagUntilTimeout>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00d      	beq.n	80105c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a8:	2b04      	cmp	r3, #4
 80105aa:	d107      	bne.n	80105bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80105ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80105bc:	2301      	movs	r3, #1
 80105be:	e035      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80105ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	2200      	movs	r2, #0
 80105d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80105dc:	68f8      	ldr	r0, [r7, #12]
 80105de:	f000 f9e5 	bl	80109ac <I2C_WaitOnFlagUntilTimeout>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00d      	beq.n	8010604 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105f6:	d103      	bne.n	8010600 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	e013      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010604:	897b      	ldrh	r3, [r7, #10]
 8010606:	b2db      	uxtb	r3, r3
 8010608:	f043 0301 	orr.w	r3, r3, #1
 801060c:	b2da      	uxtb	r2, r3
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	6a3a      	ldr	r2, [r7, #32]
 8010618:	4906      	ldr	r1, [pc, #24]	; (8010634 <I2C_RequestMemoryRead+0x1cc>)
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f000 fa1d 	bl	8010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d001      	beq.n	801062a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010626:	2301      	movs	r3, #1
 8010628:	e000      	b.n	801062c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801062a:	2300      	movs	r3, #0
}
 801062c:	4618      	mov	r0, r3
 801062e:	3718      	adds	r7, #24
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	00010002 	.word	0x00010002

08010638 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b086      	sub	sp, #24
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010644:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801064c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010654:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	685a      	ldr	r2, [r3, #4]
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801066a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010670:	2b00      	cmp	r3, #0
 8010672:	d003      	beq.n	801067c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010678:	2200      	movs	r2, #0
 801067a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010680:	2b00      	cmp	r3, #0
 8010682:	d003      	beq.n	801068c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010688:	2200      	movs	r2, #0
 801068a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801068c:	7cfb      	ldrb	r3, [r7, #19]
 801068e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010692:	2b21      	cmp	r3, #33	; 0x21
 8010694:	d007      	beq.n	80106a6 <I2C_DMAXferCplt+0x6e>
 8010696:	7cfb      	ldrb	r3, [r7, #19]
 8010698:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801069c:	2b22      	cmp	r3, #34	; 0x22
 801069e:	d131      	bne.n	8010704 <I2C_DMAXferCplt+0xcc>
 80106a0:	7cbb      	ldrb	r3, [r7, #18]
 80106a2:	2b20      	cmp	r3, #32
 80106a4:	d12e      	bne.n	8010704 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	685a      	ldr	r2, [r3, #4]
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80106b4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2200      	movs	r2, #0
 80106ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80106bc:	7cfb      	ldrb	r3, [r7, #19]
 80106be:	2b29      	cmp	r3, #41	; 0x29
 80106c0:	d10a      	bne.n	80106d8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2221      	movs	r2, #33	; 0x21
 80106c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	2228      	movs	r2, #40	; 0x28
 80106cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80106d0:	6978      	ldr	r0, [r7, #20]
 80106d2:	f7fe fb0b 	bl	800ecec <HAL_I2C_SlaveTxCpltCallback>
 80106d6:	e00c      	b.n	80106f2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80106d8:	7cfb      	ldrb	r3, [r7, #19]
 80106da:	2b2a      	cmp	r3, #42	; 0x2a
 80106dc:	d109      	bne.n	80106f2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	2222      	movs	r2, #34	; 0x22
 80106e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	2228      	movs	r2, #40	; 0x28
 80106e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106ec:	6978      	ldr	r0, [r7, #20]
 80106ee:	f7fe fb07 	bl	800ed00 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	685a      	ldr	r2, [r3, #4]
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010700:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010702:	e06a      	b.n	80107da <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d064      	beq.n	80107da <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010714:	b29b      	uxth	r3, r3
 8010716:	2b01      	cmp	r3, #1
 8010718:	d107      	bne.n	801072a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010728:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	685a      	ldr	r2, [r3, #4]
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010738:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010740:	d009      	beq.n	8010756 <I2C_DMAXferCplt+0x11e>
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2b08      	cmp	r3, #8
 8010746:	d006      	beq.n	8010756 <I2C_DMAXferCplt+0x11e>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801074e:	d002      	beq.n	8010756 <I2C_DMAXferCplt+0x11e>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2b20      	cmp	r3, #32
 8010754:	d107      	bne.n	8010766 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010764:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	685a      	ldr	r2, [r3, #4]
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010774:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	685a      	ldr	r2, [r3, #4]
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010784:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	2200      	movs	r2, #0
 801078a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d003      	beq.n	801079c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010794:	6978      	ldr	r0, [r7, #20]
 8010796:	f7fe fae9 	bl	800ed6c <HAL_I2C_ErrorCallback>
}
 801079a:	e01e      	b.n	80107da <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	2220      	movs	r2, #32
 80107a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	2b40      	cmp	r3, #64	; 0x40
 80107ae:	d10a      	bne.n	80107c6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	2200      	movs	r2, #0
 80107bc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80107be:	6978      	ldr	r0, [r7, #20]
 80107c0:	f7fe faca 	bl	800ed58 <HAL_I2C_MemRxCpltCallback>
}
 80107c4:	e009      	b.n	80107da <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2212      	movs	r2, #18
 80107d2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80107d4:	6978      	ldr	r0, [r7, #20]
 80107d6:	f7fe fa7f 	bl	800ecd8 <HAL_I2C_MasterRxCpltCallback>
}
 80107da:	bf00      	nop
 80107dc:	3718      	adds	r7, #24
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b084      	sub	sp, #16
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ee:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d003      	beq.n	8010800 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107fc:	2200      	movs	r2, #0
 80107fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801080c:	2200      	movs	r2, #0
 801080e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7f7 fb94 	bl	8007f3e <HAL_DMA_GetError>
 8010816:	4603      	mov	r3, r0
 8010818:	2b02      	cmp	r3, #2
 801081a:	d01b      	beq.n	8010854 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801082a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2220      	movs	r2, #32
 8010836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2200      	movs	r2, #0
 801083e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010846:	f043 0210 	orr.w	r2, r3, #16
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7fe fa8c 	bl	800ed6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010854:	bf00      	nop
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010864:	2300      	movs	r3, #0
 8010866:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801086c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010874:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010876:	4b4b      	ldr	r3, [pc, #300]	; (80109a4 <I2C_DMAAbort+0x148>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	08db      	lsrs	r3, r3, #3
 801087c:	4a4a      	ldr	r2, [pc, #296]	; (80109a8 <I2C_DMAAbort+0x14c>)
 801087e:	fba2 2303 	umull	r2, r3, r2, r3
 8010882:	0a1a      	lsrs	r2, r3, #8
 8010884:	4613      	mov	r3, r2
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4413      	add	r3, r2
 801088a:	00da      	lsls	r2, r3, #3
 801088c:	1ad3      	subs	r3, r2, r3
 801088e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d106      	bne.n	80108a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801089a:	f043 0220 	orr.w	r2, r3, #32
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80108a2:	e00a      	b.n	80108ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3b01      	subs	r3, #1
 80108a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108b8:	d0ea      	beq.n	8010890 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d003      	beq.n	80108ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c6:	2200      	movs	r2, #0
 80108c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d003      	beq.n	80108da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108d6:	2200      	movs	r2, #0
 80108d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80108e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2200      	movs	r2, #0
 80108ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d003      	beq.n	8010900 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108fc:	2200      	movs	r2, #0
 80108fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010904:	2b00      	cmp	r3, #0
 8010906:	d003      	beq.n	8010910 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801090c:	2200      	movs	r2, #0
 801090e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f022 0201 	bic.w	r2, r2, #1
 801091e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010926:	b2db      	uxtb	r3, r3
 8010928:	2b60      	cmp	r3, #96	; 0x60
 801092a:	d10e      	bne.n	801094a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	2220      	movs	r2, #32
 8010930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	2200      	movs	r2, #0
 8010938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	2200      	movs	r2, #0
 8010940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010942:	6978      	ldr	r0, [r7, #20]
 8010944:	f7fe fa1c 	bl	800ed80 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010948:	e027      	b.n	801099a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801094a:	7cfb      	ldrb	r3, [r7, #19]
 801094c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010950:	2b28      	cmp	r3, #40	; 0x28
 8010952:	d117      	bne.n	8010984 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f042 0201 	orr.w	r2, r2, #1
 8010962:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010972:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	2200      	movs	r2, #0
 8010978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	2228      	movs	r2, #40	; 0x28
 801097e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010982:	e007      	b.n	8010994 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	2220      	movs	r2, #32
 8010988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010994:	6978      	ldr	r0, [r7, #20]
 8010996:	f7fe f9e9 	bl	800ed6c <HAL_I2C_ErrorCallback>
}
 801099a:	bf00      	nop
 801099c:	3718      	adds	r7, #24
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	20000058 	.word	0x20000058
 80109a8:	14f8b589 	.word	0x14f8b589

080109ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	603b      	str	r3, [r7, #0]
 80109b8:	4613      	mov	r3, r2
 80109ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80109bc:	e025      	b.n	8010a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c4:	d021      	beq.n	8010a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109c6:	f7f5 fc35 	bl	8006234 <HAL_GetTick>
 80109ca:	4602      	mov	r2, r0
 80109cc:	69bb      	ldr	r3, [r7, #24]
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d302      	bcc.n	80109dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d116      	bne.n	8010a0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2220      	movs	r2, #32
 80109e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f6:	f043 0220 	orr.w	r2, r3, #32
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2200      	movs	r2, #0
 8010a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010a06:	2301      	movs	r3, #1
 8010a08:	e023      	b.n	8010a52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	0c1b      	lsrs	r3, r3, #16
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d10d      	bne.n	8010a30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	695b      	ldr	r3, [r3, #20]
 8010a1a:	43da      	mvns	r2, r3
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	4013      	ands	r3, r2
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	bf0c      	ite	eq
 8010a26:	2301      	moveq	r3, #1
 8010a28:	2300      	movne	r3, #0
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	e00c      	b.n	8010a4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	43da      	mvns	r2, r3
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	4013      	ands	r3, r2
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	bf0c      	ite	eq
 8010a42:	2301      	moveq	r3, #1
 8010a44:	2300      	movne	r3, #0
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	461a      	mov	r2, r3
 8010a4a:	79fb      	ldrb	r3, [r7, #7]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d0b6      	beq.n	80109be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3710      	adds	r7, #16
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b084      	sub	sp, #16
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	60f8      	str	r0, [r7, #12]
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	607a      	str	r2, [r7, #4]
 8010a66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010a68:	e051      	b.n	8010b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	695b      	ldr	r3, [r3, #20]
 8010a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a78:	d123      	bne.n	8010ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010a92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2200      	movs	r2, #0
 8010a98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2220      	movs	r2, #32
 8010a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aae:	f043 0204 	orr.w	r2, r3, #4
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e046      	b.n	8010b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac8:	d021      	beq.n	8010b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010aca:	f7f5 fbb3 	bl	8006234 <HAL_GetTick>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	687a      	ldr	r2, [r7, #4]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d302      	bcc.n	8010ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d116      	bne.n	8010b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2220      	movs	r2, #32
 8010aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010afa:	f043 0220 	orr.w	r2, r3, #32
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2200      	movs	r2, #0
 8010b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e020      	b.n	8010b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	0c1b      	lsrs	r3, r3, #16
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d10c      	bne.n	8010b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	695b      	ldr	r3, [r3, #20]
 8010b1e:	43da      	mvns	r2, r3
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	4013      	ands	r3, r2
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bf14      	ite	ne
 8010b2a:	2301      	movne	r3, #1
 8010b2c:	2300      	moveq	r3, #0
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	e00b      	b.n	8010b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	43da      	mvns	r2, r3
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	bf14      	ite	ne
 8010b44:	2301      	movne	r3, #1
 8010b46:	2300      	moveq	r3, #0
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d18d      	bne.n	8010a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010b64:	e02d      	b.n	8010bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f000 f93e 	bl	8010de8 <I2C_IsAcknowledgeFailed>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e02d      	b.n	8010bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b7c:	d021      	beq.n	8010bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b7e:	f7f5 fb59 	bl	8006234 <HAL_GetTick>
 8010b82:	4602      	mov	r2, r0
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d302      	bcc.n	8010b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d116      	bne.n	8010bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2200      	movs	r2, #0
 8010b98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2220      	movs	r2, #32
 8010b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bae:	f043 0220 	orr.w	r2, r3, #32
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e007      	b.n	8010bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	695b      	ldr	r3, [r3, #20]
 8010bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bcc:	2b80      	cmp	r3, #128	; 0x80
 8010bce:	d1ca      	bne.n	8010b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010bd0:	2300      	movs	r3, #0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3710      	adds	r7, #16
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	60f8      	str	r0, [r7, #12]
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010be6:	e02d      	b.n	8010c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010be8:	68f8      	ldr	r0, [r7, #12]
 8010bea:	f000 f8fd 	bl	8010de8 <I2C_IsAcknowledgeFailed>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d001      	beq.n	8010bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e02d      	b.n	8010c54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfe:	d021      	beq.n	8010c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c00:	f7f5 fb18 	bl	8006234 <HAL_GetTick>
 8010c04:	4602      	mov	r2, r0
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	68ba      	ldr	r2, [r7, #8]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d302      	bcc.n	8010c16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d116      	bne.n	8010c44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2220      	movs	r2, #32
 8010c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c30:	f043 0220 	orr.w	r2, r3, #32
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010c40:	2301      	movs	r3, #1
 8010c42:	e007      	b.n	8010c54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	695b      	ldr	r3, [r3, #20]
 8010c4a:	f003 0304 	and.w	r3, r3, #4
 8010c4e:	2b04      	cmp	r3, #4
 8010c50:	d1ca      	bne.n	8010be8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c68:	e029      	b.n	8010cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 f8bc 	bl	8010de8 <I2C_IsAcknowledgeFailed>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d001      	beq.n	8010c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	e029      	b.n	8010cce <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c7a:	f7f5 fadb 	bl	8006234 <HAL_GetTick>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d302      	bcc.n	8010c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d116      	bne.n	8010cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	2200      	movs	r2, #0
 8010c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	2220      	movs	r2, #32
 8010c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010caa:	f043 0220 	orr.w	r2, r3, #32
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e007      	b.n	8010cce <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	f003 0310 	and.w	r3, r3, #16
 8010cc8:	2b10      	cmp	r3, #16
 8010cca:	d1ce      	bne.n	8010c6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8010cd6:	b480      	push	{r7}
 8010cd8:	b085      	sub	sp, #20
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8010ce2:	4b14      	ldr	r3, [pc, #80]	; (8010d34 <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	08db      	lsrs	r3, r3, #3
 8010ce8:	4a13      	ldr	r2, [pc, #76]	; (8010d38 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 8010cea:	fba2 2303 	umull	r2, r3, r2, r3
 8010cee:	0a1a      	lsrs	r2, r3, #8
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	4413      	add	r3, r2
 8010cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d107      	bne.n	8010d14 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d08:	f043 0220 	orr.w	r2, r3, #32
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8010d10:	2301      	movs	r3, #1
 8010d12:	e008      	b.n	8010d26 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d22:	d0e9      	beq.n	8010cf8 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop
 8010d34:	20000058 	.word	0x20000058
 8010d38:	14f8b589 	.word	0x14f8b589

08010d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010d48:	e042      	b.n	8010dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	695b      	ldr	r3, [r3, #20]
 8010d50:	f003 0310 	and.w	r3, r3, #16
 8010d54:	2b10      	cmp	r3, #16
 8010d56:	d119      	bne.n	8010d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f06f 0210 	mvn.w	r2, #16
 8010d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e029      	b.n	8010de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d8c:	f7f5 fa52 	bl	8006234 <HAL_GetTick>
 8010d90:	4602      	mov	r2, r0
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d302      	bcc.n	8010da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d116      	bne.n	8010dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2200      	movs	r2, #0
 8010da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2220      	movs	r2, #32
 8010dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dbc:	f043 0220 	orr.w	r2, r3, #32
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e007      	b.n	8010de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	695b      	ldr	r3, [r3, #20]
 8010dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dda:	2b40      	cmp	r3, #64	; 0x40
 8010ddc:	d1b5      	bne.n	8010d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	695b      	ldr	r3, [r3, #20]
 8010df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dfe:	d11b      	bne.n	8010e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2220      	movs	r2, #32
 8010e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e24:	f043 0204 	orr.w	r2, r3, #4
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8010e34:	2301      	movs	r3, #1
 8010e36:	e000      	b.n	8010e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	370c      	adds	r7, #12
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8010e46:	b480      	push	{r7}
 8010e48:	b083      	sub	sp, #12
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e52:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010e56:	d103      	bne.n	8010e60 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8010e5e:	e007      	b.n	8010e70 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010e68:	d102      	bne.n	8010e70 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2208      	movs	r2, #8
 8010e6e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010e70:	bf00      	nop
 8010e72:	370c      	adds	r7, #12
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8010e80:	4b08      	ldr	r3, [pc, #32]	; (8010ea4 <HAL_PWR_DeInit+0x28>)
 8010e82:	6a1b      	ldr	r3, [r3, #32]
 8010e84:	4a07      	ldr	r2, [pc, #28]	; (8010ea4 <HAL_PWR_DeInit+0x28>)
 8010e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e8a:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8010e8c:	4b05      	ldr	r3, [pc, #20]	; (8010ea4 <HAL_PWR_DeInit+0x28>)
 8010e8e:	6a1b      	ldr	r3, [r3, #32]
 8010e90:	4a04      	ldr	r2, [pc, #16]	; (8010ea4 <HAL_PWR_DeInit+0x28>)
 8010e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010e96:	6213      	str	r3, [r2, #32]
}
 8010e98:	bf00      	nop
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	40023800 	.word	0x40023800

08010ea8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8010eae:	4b06      	ldr	r3, [pc, #24]	; (8010ec8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8010eb4:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <HAL_PWR_EnableBkUpAccess+0x24>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8010eba:	687b      	ldr	r3, [r7, #4]
}
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr
 8010ec8:	420e0020 	.word	0x420e0020
 8010ecc:	40007000 	.word	0x40007000

08010ed0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8010ed6:	4b06      	ldr	r3, [pc, #24]	; (8010ef0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8010ed8:	2200      	movs	r2, #0
 8010eda:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8010edc:	4b05      	ldr	r3, [pc, #20]	; (8010ef4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8010ee2:	687b      	ldr	r3, [r7, #4]
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr
 8010ef0:	420e0020 	.word	0x420e0020
 8010ef4:	40007000 	.word	0x40007000

08010ef8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8010f00:	4b2b      	ldr	r3, [pc, #172]	; (8010fb0 <HAL_PWR_ConfigPVD+0xb8>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4928      	ldr	r1, [pc, #160]	; (8010fb0 <HAL_PWR_ConfigPVD+0xb8>)
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8010f12:	4b28      	ldr	r3, [pc, #160]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	4a27      	ldr	r2, [pc, #156]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f1c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8010f1e:	4b25      	ldr	r3, [pc, #148]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4a24      	ldr	r2, [pc, #144]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f28:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8010f2a:	4b22      	ldr	r3, [pc, #136]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f2c:	689b      	ldr	r3, [r3, #8]
 8010f2e:	4a21      	ldr	r2, [pc, #132]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f34:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8010f36:	4b1f      	ldr	r3, [pc, #124]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	4a1e      	ldr	r2, [pc, #120]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f40:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d005      	beq.n	8010f5a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8010f4e:	4b19      	ldr	r3, [pc, #100]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4a18      	ldr	r2, [pc, #96]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f58:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d005      	beq.n	8010f72 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8010f66:	4b13      	ldr	r3, [pc, #76]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	4a12      	ldr	r2, [pc, #72]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f70:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	f003 0301 	and.w	r3, r3, #1
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d005      	beq.n	8010f8a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8010f7e:	4b0d      	ldr	r3, [pc, #52]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	4a0c      	ldr	r2, [pc, #48]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f88:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	f003 0302 	and.w	r3, r3, #2
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d005      	beq.n	8010fa2 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8010f96:	4b07      	ldr	r3, [pc, #28]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	4a06      	ldr	r2, [pc, #24]	; (8010fb4 <HAL_PWR_ConfigPVD+0xbc>)
 8010f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010fa0:	60d3      	str	r3, [r2, #12]
  }
}
 8010fa2:	bf00      	nop
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	40007000 	.word	0x40007000
 8010fb4:	40013c00 	.word	0x40013c00

08010fb8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8010fb8:	b480      	push	{r7}
 8010fba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8010fbc:	4b03      	ldr	r3, [pc, #12]	; (8010fcc <HAL_PWR_EnablePVD+0x14>)
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	601a      	str	r2, [r3, #0]
}
 8010fc2:	bf00      	nop
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr
 8010fcc:	420e0010 	.word	0x420e0010

08010fd0 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8010fd4:	4b03      	ldr	r3, [pc, #12]	; (8010fe4 <HAL_PWR_DisablePVD+0x14>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	601a      	str	r2, [r3, #0]
}
 8010fda:	bf00      	nop
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr
 8010fe4:	420e0010 	.word	0x420e0010

08010fe8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8010ff0:	4b05      	ldr	r3, [pc, #20]	; (8011008 <HAL_PWR_EnableWakeUpPin+0x20>)
 8010ff2:	685a      	ldr	r2, [r3, #4]
 8010ff4:	4904      	ldr	r1, [pc, #16]	; (8011008 <HAL_PWR_EnableWakeUpPin+0x20>)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	604b      	str	r3, [r1, #4]
}
 8010ffc:	bf00      	nop
 8010ffe:	370c      	adds	r7, #12
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr
 8011008:	40007000 	.word	0x40007000

0801100c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8011014:	4b06      	ldr	r3, [pc, #24]	; (8011030 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	43db      	mvns	r3, r3
 801101c:	4904      	ldr	r1, [pc, #16]	; (8011030 <HAL_PWR_DisableWakeUpPin+0x24>)
 801101e:	4013      	ands	r3, r2
 8011020:	604b      	str	r3, [r1, #4]
}
 8011022:	bf00      	nop
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	40007000 	.word	0x40007000

08011034 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	460b      	mov	r3, r1
 801103e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011040:	4b09      	ldr	r3, [pc, #36]	; (8011068 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	4a08      	ldr	r2, [pc, #32]	; (8011068 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011046:	f023 0304 	bic.w	r3, r3, #4
 801104a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 801104c:	78fb      	ldrb	r3, [r7, #3]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d101      	bne.n	8011056 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011052:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8011054:	e002      	b.n	801105c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8011056:	bf40      	sev
    __WFE();
 8011058:	bf20      	wfe
    __WFE();
 801105a:	bf20      	wfe
}
 801105c:	bf00      	nop
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr
 8011068:	e000ed00 	.word	0xe000ed00

0801106c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	460b      	mov	r3, r1
 8011076:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011078:	4b10      	ldr	r3, [pc, #64]	; (80110bc <HAL_PWR_EnterSTOPMode+0x50>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f023 0203 	bic.w	r2, r3, #3
 8011080:	490e      	ldr	r1, [pc, #56]	; (80110bc <HAL_PWR_EnterSTOPMode+0x50>)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4313      	orrs	r3, r2
 8011086:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011088:	4b0d      	ldr	r3, [pc, #52]	; (80110c0 <HAL_PWR_EnterSTOPMode+0x54>)
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	4a0c      	ldr	r2, [pc, #48]	; (80110c0 <HAL_PWR_EnterSTOPMode+0x54>)
 801108e:	f043 0304 	orr.w	r3, r3, #4
 8011092:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8011094:	78fb      	ldrb	r3, [r7, #3]
 8011096:	2b01      	cmp	r3, #1
 8011098:	d101      	bne.n	801109e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801109a:	bf30      	wfi
 801109c:	e002      	b.n	80110a4 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801109e:	bf40      	sev
    __WFE();
 80110a0:	bf20      	wfe
    __WFE();
 80110a2:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80110a4:	4b06      	ldr	r3, [pc, #24]	; (80110c0 <HAL_PWR_EnterSTOPMode+0x54>)
 80110a6:	691b      	ldr	r3, [r3, #16]
 80110a8:	4a05      	ldr	r2, [pc, #20]	; (80110c0 <HAL_PWR_EnterSTOPMode+0x54>)
 80110aa:	f023 0304 	bic.w	r3, r3, #4
 80110ae:	6113      	str	r3, [r2, #16]
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr
 80110bc:	40007000 	.word	0x40007000
 80110c0:	e000ed00 	.word	0xe000ed00

080110c4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80110c4:	b480      	push	{r7}
 80110c6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80110c8:	4b08      	ldr	r3, [pc, #32]	; (80110ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a07      	ldr	r2, [pc, #28]	; (80110ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80110ce:	f043 0302 	orr.w	r3, r3, #2
 80110d2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80110d4:	4b06      	ldr	r3, [pc, #24]	; (80110f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80110d6:	691b      	ldr	r3, [r3, #16]
 80110d8:	4a05      	ldr	r2, [pc, #20]	; (80110f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80110da:	f043 0304 	orr.w	r3, r3, #4
 80110de:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80110e0:	bf30      	wfi
}
 80110e2:	bf00      	nop
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr
 80110ec:	40007000 	.word	0x40007000
 80110f0:	e000ed00 	.word	0xe000ed00

080110f4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80110f8:	4b06      	ldr	r3, [pc, #24]	; (8011114 <HAL_PWR_PVD_IRQHandler+0x20>)
 80110fa:	695b      	ldr	r3, [r3, #20]
 80110fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011100:	2b00      	cmp	r3, #0
 8011102:	d005      	beq.n	8011110 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8011104:	f000 f808 	bl	8011118 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011108:	4b02      	ldr	r3, [pc, #8]	; (8011114 <HAL_PWR_PVD_IRQHandler+0x20>)
 801110a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801110e:	615a      	str	r2, [r3, #20]
  }
}
 8011110:	bf00      	nop
 8011112:	bd80      	pop	{r7, pc}
 8011114:	40013c00 	.word	0x40013c00

08011118 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011118:	b480      	push	{r7}
 801111a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 801111c:	bf00      	nop
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr

08011126 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8011126:	b480      	push	{r7}
 8011128:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 801112a:	4b05      	ldr	r3, [pc, #20]	; (8011140 <HAL_PWR_EnableSleepOnExit+0x1a>)
 801112c:	691b      	ldr	r3, [r3, #16]
 801112e:	4a04      	ldr	r2, [pc, #16]	; (8011140 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011130:	f043 0302 	orr.w	r3, r3, #2
 8011134:	6113      	str	r3, [r2, #16]
}
 8011136:	bf00      	nop
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	e000ed00 	.word	0xe000ed00

08011144 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8011144:	b480      	push	{r7}
 8011146:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011148:	4b05      	ldr	r3, [pc, #20]	; (8011160 <HAL_PWR_DisableSleepOnExit+0x1c>)
 801114a:	691b      	ldr	r3, [r3, #16]
 801114c:	4a04      	ldr	r2, [pc, #16]	; (8011160 <HAL_PWR_DisableSleepOnExit+0x1c>)
 801114e:	f023 0302 	bic.w	r3, r3, #2
 8011152:	6113      	str	r3, [r2, #16]
}
 8011154:	bf00      	nop
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	e000ed00 	.word	0xe000ed00

08011164 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8011164:	b480      	push	{r7}
 8011166:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011168:	4b05      	ldr	r3, [pc, #20]	; (8011180 <HAL_PWR_EnableSEVOnPend+0x1c>)
 801116a:	691b      	ldr	r3, [r3, #16]
 801116c:	4a04      	ldr	r2, [pc, #16]	; (8011180 <HAL_PWR_EnableSEVOnPend+0x1c>)
 801116e:	f043 0310 	orr.w	r3, r3, #16
 8011172:	6113      	str	r3, [r2, #16]
}
 8011174:	bf00      	nop
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	e000ed00 	.word	0xe000ed00

08011184 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8011184:	b480      	push	{r7}
 8011186:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011188:	4b05      	ldr	r3, [pc, #20]	; (80111a0 <HAL_PWR_DisableSEVOnPend+0x1c>)
 801118a:	691b      	ldr	r3, [r3, #16]
 801118c:	4a04      	ldr	r2, [pc, #16]	; (80111a0 <HAL_PWR_DisableSEVOnPend+0x1c>)
 801118e:	f023 0310 	bic.w	r3, r3, #16
 8011192:	6113      	str	r3, [r2, #16]
}
 8011194:	bf00      	nop
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	e000ed00 	.word	0xe000ed00

080111a4 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80111aa:	2300      	movs	r3, #0
 80111ac:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80111ae:	4b0e      	ldr	r3, [pc, #56]	; (80111e8 <HAL_PWREx_EnableBkUpReg+0x44>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80111b4:	f7f5 f83e 	bl	8006234 <HAL_GetTick>
 80111b8:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80111ba:	e009      	b.n	80111d0 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80111bc:	f7f5 f83a 	bl	8006234 <HAL_GetTick>
 80111c0:	4602      	mov	r2, r0
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	1ad3      	subs	r3, r2, r3
 80111c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80111ca:	d901      	bls.n	80111d0 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80111cc:	2303      	movs	r3, #3
 80111ce:	e006      	b.n	80111de <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80111d0:	4b06      	ldr	r3, [pc, #24]	; (80111ec <HAL_PWREx_EnableBkUpReg+0x48>)
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	f003 0308 	and.w	r3, r3, #8
 80111d8:	2b08      	cmp	r3, #8
 80111da:	d1ef      	bne.n	80111bc <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3708      	adds	r7, #8
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	420e00a4 	.word	0x420e00a4
 80111ec:	40007000 	.word	0x40007000

080111f0 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80111f6:	2300      	movs	r3, #0
 80111f8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 80111fa:	4b0e      	ldr	r3, [pc, #56]	; (8011234 <HAL_PWREx_DisableBkUpReg+0x44>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011200:	f7f5 f818 	bl	8006234 <HAL_GetTick>
 8011204:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011206:	e009      	b.n	801121c <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011208:	f7f5 f814 	bl	8006234 <HAL_GetTick>
 801120c:	4602      	mov	r2, r0
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011216:	d901      	bls.n	801121c <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011218:	2303      	movs	r3, #3
 801121a:	e006      	b.n	801122a <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 801121c:	4b06      	ldr	r3, [pc, #24]	; (8011238 <HAL_PWREx_DisableBkUpReg+0x48>)
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	f003 0308 	and.w	r3, r3, #8
 8011224:	2b08      	cmp	r3, #8
 8011226:	d0ef      	beq.n	8011208 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3708      	adds	r7, #8
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	420e00a4 	.word	0x420e00a4
 8011238:	40007000 	.word	0x40007000

0801123c <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 801123c:	b480      	push	{r7}
 801123e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011240:	4b03      	ldr	r3, [pc, #12]	; (8011250 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8011242:	2201      	movs	r2, #1
 8011244:	601a      	str	r2, [r3, #0]
}
 8011246:	bf00      	nop
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	420e0024 	.word	0x420e0024

08011254 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8011254:	b480      	push	{r7}
 8011256:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011258:	4b03      	ldr	r3, [pc, #12]	; (8011268 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 801125a:	2200      	movs	r2, #0
 801125c:	601a      	str	r2, [r3, #0]
}
 801125e:	bf00      	nop
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	420e0024 	.word	0x420e0024

0801126c <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801126c:	b480      	push	{r7}
 801126e:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011270:	4b04      	ldr	r3, [pc, #16]	; (8011284 <HAL_PWREx_GetVoltageRange+0x18>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011278:	4618      	mov	r0, r3
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	40007000 	.word	0x40007000

08011288 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011290:	2300      	movs	r3, #0
 8011292:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011294:	2300      	movs	r3, #0
 8011296:	60fb      	str	r3, [r7, #12]
 8011298:	4b1a      	ldr	r3, [pc, #104]	; (8011304 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801129c:	4a19      	ldr	r2, [pc, #100]	; (8011304 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112a2:	6413      	str	r3, [r2, #64]	; 0x40
 80112a4:	4b17      	ldr	r3, [pc, #92]	; (8011304 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80112a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112ac:	60fb      	str	r3, [r7, #12]
 80112ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80112b0:	2300      	movs	r3, #0
 80112b2:	613b      	str	r3, [r7, #16]
 80112b4:	4b14      	ldr	r3, [pc, #80]	; (8011308 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80112bc:	4912      	ldr	r1, [pc, #72]	; (8011308 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4313      	orrs	r3, r2
 80112c2:	600b      	str	r3, [r1, #0]
 80112c4:	4b10      	ldr	r3, [pc, #64]	; (8011308 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112cc:	613b      	str	r3, [r7, #16]
 80112ce:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80112d0:	f7f4 ffb0 	bl	8006234 <HAL_GetTick>
 80112d4:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80112d6:	e009      	b.n	80112ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80112d8:	f7f4 ffac 	bl	8006234 <HAL_GetTick>
 80112dc:	4602      	mov	r2, r0
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80112e6:	d901      	bls.n	80112ec <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 80112e8:	2303      	movs	r3, #3
 80112ea:	e007      	b.n	80112fc <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80112ec:	4b06      	ldr	r3, [pc, #24]	; (8011308 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80112f8:	d1ee      	bne.n	80112d8 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 80112fa:	2300      	movs	r3, #0
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3718      	adds	r7, #24
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	40023800 	.word	0x40023800
 8011308:	40007000 	.word	0x40007000

0801130c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d101      	bne.n	801131e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801131a:	2301      	movs	r3, #1
 801131c:	e267      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f003 0301 	and.w	r3, r3, #1
 8011326:	2b00      	cmp	r3, #0
 8011328:	d075      	beq.n	8011416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801132a:	4b88      	ldr	r3, [pc, #544]	; (801154c <HAL_RCC_OscConfig+0x240>)
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	f003 030c 	and.w	r3, r3, #12
 8011332:	2b04      	cmp	r3, #4
 8011334:	d00c      	beq.n	8011350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011336:	4b85      	ldr	r3, [pc, #532]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801133e:	2b08      	cmp	r3, #8
 8011340:	d112      	bne.n	8011368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011342:	4b82      	ldr	r3, [pc, #520]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801134a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801134e:	d10b      	bne.n	8011368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011350:	4b7e      	ldr	r3, [pc, #504]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011358:	2b00      	cmp	r3, #0
 801135a:	d05b      	beq.n	8011414 <HAL_RCC_OscConfig+0x108>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d157      	bne.n	8011414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011364:	2301      	movs	r3, #1
 8011366:	e242      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011370:	d106      	bne.n	8011380 <HAL_RCC_OscConfig+0x74>
 8011372:	4b76      	ldr	r3, [pc, #472]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a75      	ldr	r2, [pc, #468]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801137c:	6013      	str	r3, [r2, #0]
 801137e:	e01d      	b.n	80113bc <HAL_RCC_OscConfig+0xb0>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011388:	d10c      	bne.n	80113a4 <HAL_RCC_OscConfig+0x98>
 801138a:	4b70      	ldr	r3, [pc, #448]	; (801154c <HAL_RCC_OscConfig+0x240>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4a6f      	ldr	r2, [pc, #444]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011394:	6013      	str	r3, [r2, #0]
 8011396:	4b6d      	ldr	r3, [pc, #436]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4a6c      	ldr	r2, [pc, #432]	; (801154c <HAL_RCC_OscConfig+0x240>)
 801139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80113a0:	6013      	str	r3, [r2, #0]
 80113a2:	e00b      	b.n	80113bc <HAL_RCC_OscConfig+0xb0>
 80113a4:	4b69      	ldr	r3, [pc, #420]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4a68      	ldr	r2, [pc, #416]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80113aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80113ae:	6013      	str	r3, [r2, #0]
 80113b0:	4b66      	ldr	r3, [pc, #408]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a65      	ldr	r2, [pc, #404]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80113b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80113ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d013      	beq.n	80113ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80113c4:	f7f4 ff36 	bl	8006234 <HAL_GetTick>
 80113c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80113ca:	e008      	b.n	80113de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80113cc:	f7f4 ff32 	bl	8006234 <HAL_GetTick>
 80113d0:	4602      	mov	r2, r0
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	1ad3      	subs	r3, r2, r3
 80113d6:	2b64      	cmp	r3, #100	; 0x64
 80113d8:	d901      	bls.n	80113de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80113da:	2303      	movs	r3, #3
 80113dc:	e207      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80113de:	4b5b      	ldr	r3, [pc, #364]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d0f0      	beq.n	80113cc <HAL_RCC_OscConfig+0xc0>
 80113ea:	e014      	b.n	8011416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80113ec:	f7f4 ff22 	bl	8006234 <HAL_GetTick>
 80113f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80113f2:	e008      	b.n	8011406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80113f4:	f7f4 ff1e 	bl	8006234 <HAL_GetTick>
 80113f8:	4602      	mov	r2, r0
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	1ad3      	subs	r3, r2, r3
 80113fe:	2b64      	cmp	r3, #100	; 0x64
 8011400:	d901      	bls.n	8011406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011402:	2303      	movs	r3, #3
 8011404:	e1f3      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011406:	4b51      	ldr	r3, [pc, #324]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1f0      	bne.n	80113f4 <HAL_RCC_OscConfig+0xe8>
 8011412:	e000      	b.n	8011416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f003 0302 	and.w	r3, r3, #2
 801141e:	2b00      	cmp	r3, #0
 8011420:	d063      	beq.n	80114ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011422:	4b4a      	ldr	r3, [pc, #296]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	f003 030c 	and.w	r3, r3, #12
 801142a:	2b00      	cmp	r3, #0
 801142c:	d00b      	beq.n	8011446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801142e:	4b47      	ldr	r3, [pc, #284]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011430:	689b      	ldr	r3, [r3, #8]
 8011432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011436:	2b08      	cmp	r3, #8
 8011438:	d11c      	bne.n	8011474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801143a:	4b44      	ldr	r3, [pc, #272]	; (801154c <HAL_RCC_OscConfig+0x240>)
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d116      	bne.n	8011474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011446:	4b41      	ldr	r3, [pc, #260]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f003 0302 	and.w	r3, r3, #2
 801144e:	2b00      	cmp	r3, #0
 8011450:	d005      	beq.n	801145e <HAL_RCC_OscConfig+0x152>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	2b01      	cmp	r3, #1
 8011458:	d001      	beq.n	801145e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	e1c7      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801145e:	4b3b      	ldr	r3, [pc, #236]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	691b      	ldr	r3, [r3, #16]
 801146a:	00db      	lsls	r3, r3, #3
 801146c:	4937      	ldr	r1, [pc, #220]	; (801154c <HAL_RCC_OscConfig+0x240>)
 801146e:	4313      	orrs	r3, r2
 8011470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011472:	e03a      	b.n	80114ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d020      	beq.n	80114be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801147c:	4b34      	ldr	r3, [pc, #208]	; (8011550 <HAL_RCC_OscConfig+0x244>)
 801147e:	2201      	movs	r2, #1
 8011480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011482:	f7f4 fed7 	bl	8006234 <HAL_GetTick>
 8011486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011488:	e008      	b.n	801149c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801148a:	f7f4 fed3 	bl	8006234 <HAL_GetTick>
 801148e:	4602      	mov	r2, r0
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	2b02      	cmp	r3, #2
 8011496:	d901      	bls.n	801149c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011498:	2303      	movs	r3, #3
 801149a:	e1a8      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801149c:	4b2b      	ldr	r3, [pc, #172]	; (801154c <HAL_RCC_OscConfig+0x240>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f003 0302 	and.w	r3, r3, #2
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d0f0      	beq.n	801148a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80114a8:	4b28      	ldr	r3, [pc, #160]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	691b      	ldr	r3, [r3, #16]
 80114b4:	00db      	lsls	r3, r3, #3
 80114b6:	4925      	ldr	r1, [pc, #148]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80114b8:	4313      	orrs	r3, r2
 80114ba:	600b      	str	r3, [r1, #0]
 80114bc:	e015      	b.n	80114ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80114be:	4b24      	ldr	r3, [pc, #144]	; (8011550 <HAL_RCC_OscConfig+0x244>)
 80114c0:	2200      	movs	r2, #0
 80114c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114c4:	f7f4 feb6 	bl	8006234 <HAL_GetTick>
 80114c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80114ca:	e008      	b.n	80114de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80114cc:	f7f4 feb2 	bl	8006234 <HAL_GetTick>
 80114d0:	4602      	mov	r2, r0
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	1ad3      	subs	r3, r2, r3
 80114d6:	2b02      	cmp	r3, #2
 80114d8:	d901      	bls.n	80114de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80114da:	2303      	movs	r3, #3
 80114dc:	e187      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80114de:	4b1b      	ldr	r3, [pc, #108]	; (801154c <HAL_RCC_OscConfig+0x240>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f003 0302 	and.w	r3, r3, #2
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d1f0      	bne.n	80114cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f003 0308 	and.w	r3, r3, #8
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d036      	beq.n	8011564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	695b      	ldr	r3, [r3, #20]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d016      	beq.n	801152c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80114fe:	4b15      	ldr	r3, [pc, #84]	; (8011554 <HAL_RCC_OscConfig+0x248>)
 8011500:	2201      	movs	r2, #1
 8011502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011504:	f7f4 fe96 	bl	8006234 <HAL_GetTick>
 8011508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801150a:	e008      	b.n	801151e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801150c:	f7f4 fe92 	bl	8006234 <HAL_GetTick>
 8011510:	4602      	mov	r2, r0
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	2b02      	cmp	r3, #2
 8011518:	d901      	bls.n	801151e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801151a:	2303      	movs	r3, #3
 801151c:	e167      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801151e:	4b0b      	ldr	r3, [pc, #44]	; (801154c <HAL_RCC_OscConfig+0x240>)
 8011520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011522:	f003 0302 	and.w	r3, r3, #2
 8011526:	2b00      	cmp	r3, #0
 8011528:	d0f0      	beq.n	801150c <HAL_RCC_OscConfig+0x200>
 801152a:	e01b      	b.n	8011564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801152c:	4b09      	ldr	r3, [pc, #36]	; (8011554 <HAL_RCC_OscConfig+0x248>)
 801152e:	2200      	movs	r2, #0
 8011530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011532:	f7f4 fe7f 	bl	8006234 <HAL_GetTick>
 8011536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011538:	e00e      	b.n	8011558 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801153a:	f7f4 fe7b 	bl	8006234 <HAL_GetTick>
 801153e:	4602      	mov	r2, r0
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	2b02      	cmp	r3, #2
 8011546:	d907      	bls.n	8011558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011548:	2303      	movs	r3, #3
 801154a:	e150      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
 801154c:	40023800 	.word	0x40023800
 8011550:	42470000 	.word	0x42470000
 8011554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011558:	4b88      	ldr	r3, [pc, #544]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801155a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801155c:	f003 0302 	and.w	r3, r3, #2
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1ea      	bne.n	801153a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f003 0304 	and.w	r3, r3, #4
 801156c:	2b00      	cmp	r3, #0
 801156e:	f000 8097 	beq.w	80116a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011572:	2300      	movs	r3, #0
 8011574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011576:	4b81      	ldr	r3, [pc, #516]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10f      	bne.n	80115a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011582:	2300      	movs	r3, #0
 8011584:	60bb      	str	r3, [r7, #8]
 8011586:	4b7d      	ldr	r3, [pc, #500]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801158a:	4a7c      	ldr	r2, [pc, #496]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011590:	6413      	str	r3, [r2, #64]	; 0x40
 8011592:	4b7a      	ldr	r3, [pc, #488]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801159a:	60bb      	str	r3, [r7, #8]
 801159c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801159e:	2301      	movs	r3, #1
 80115a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80115a2:	4b77      	ldr	r3, [pc, #476]	; (8011780 <HAL_RCC_OscConfig+0x474>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d118      	bne.n	80115e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80115ae:	4b74      	ldr	r3, [pc, #464]	; (8011780 <HAL_RCC_OscConfig+0x474>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	4a73      	ldr	r2, [pc, #460]	; (8011780 <HAL_RCC_OscConfig+0x474>)
 80115b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80115b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80115ba:	f7f4 fe3b 	bl	8006234 <HAL_GetTick>
 80115be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80115c0:	e008      	b.n	80115d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80115c2:	f7f4 fe37 	bl	8006234 <HAL_GetTick>
 80115c6:	4602      	mov	r2, r0
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	1ad3      	subs	r3, r2, r3
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d901      	bls.n	80115d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80115d0:	2303      	movs	r3, #3
 80115d2:	e10c      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80115d4:	4b6a      	ldr	r3, [pc, #424]	; (8011780 <HAL_RCC_OscConfig+0x474>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d0f0      	beq.n	80115c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d106      	bne.n	80115f6 <HAL_RCC_OscConfig+0x2ea>
 80115e8:	4b64      	ldr	r3, [pc, #400]	; (801177c <HAL_RCC_OscConfig+0x470>)
 80115ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ec:	4a63      	ldr	r2, [pc, #396]	; (801177c <HAL_RCC_OscConfig+0x470>)
 80115ee:	f043 0301 	orr.w	r3, r3, #1
 80115f2:	6713      	str	r3, [r2, #112]	; 0x70
 80115f4:	e01c      	b.n	8011630 <HAL_RCC_OscConfig+0x324>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	2b05      	cmp	r3, #5
 80115fc:	d10c      	bne.n	8011618 <HAL_RCC_OscConfig+0x30c>
 80115fe:	4b5f      	ldr	r3, [pc, #380]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011602:	4a5e      	ldr	r2, [pc, #376]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011604:	f043 0304 	orr.w	r3, r3, #4
 8011608:	6713      	str	r3, [r2, #112]	; 0x70
 801160a:	4b5c      	ldr	r3, [pc, #368]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801160e:	4a5b      	ldr	r2, [pc, #364]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011610:	f043 0301 	orr.w	r3, r3, #1
 8011614:	6713      	str	r3, [r2, #112]	; 0x70
 8011616:	e00b      	b.n	8011630 <HAL_RCC_OscConfig+0x324>
 8011618:	4b58      	ldr	r3, [pc, #352]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801161c:	4a57      	ldr	r2, [pc, #348]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801161e:	f023 0301 	bic.w	r3, r3, #1
 8011622:	6713      	str	r3, [r2, #112]	; 0x70
 8011624:	4b55      	ldr	r3, [pc, #340]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011628:	4a54      	ldr	r2, [pc, #336]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801162a:	f023 0304 	bic.w	r3, r3, #4
 801162e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d015      	beq.n	8011664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011638:	f7f4 fdfc 	bl	8006234 <HAL_GetTick>
 801163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801163e:	e00a      	b.n	8011656 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011640:	f7f4 fdf8 	bl	8006234 <HAL_GetTick>
 8011644:	4602      	mov	r2, r0
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	f241 3288 	movw	r2, #5000	; 0x1388
 801164e:	4293      	cmp	r3, r2
 8011650:	d901      	bls.n	8011656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011652:	2303      	movs	r3, #3
 8011654:	e0cb      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011656:	4b49      	ldr	r3, [pc, #292]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801165a:	f003 0302 	and.w	r3, r3, #2
 801165e:	2b00      	cmp	r3, #0
 8011660:	d0ee      	beq.n	8011640 <HAL_RCC_OscConfig+0x334>
 8011662:	e014      	b.n	801168e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011664:	f7f4 fde6 	bl	8006234 <HAL_GetTick>
 8011668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801166a:	e00a      	b.n	8011682 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801166c:	f7f4 fde2 	bl	8006234 <HAL_GetTick>
 8011670:	4602      	mov	r2, r0
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	1ad3      	subs	r3, r2, r3
 8011676:	f241 3288 	movw	r2, #5000	; 0x1388
 801167a:	4293      	cmp	r3, r2
 801167c:	d901      	bls.n	8011682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801167e:	2303      	movs	r3, #3
 8011680:	e0b5      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011682:	4b3e      	ldr	r3, [pc, #248]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011686:	f003 0302 	and.w	r3, r3, #2
 801168a:	2b00      	cmp	r3, #0
 801168c:	d1ee      	bne.n	801166c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801168e:	7dfb      	ldrb	r3, [r7, #23]
 8011690:	2b01      	cmp	r3, #1
 8011692:	d105      	bne.n	80116a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011694:	4b39      	ldr	r3, [pc, #228]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011698:	4a38      	ldr	r2, [pc, #224]	; (801177c <HAL_RCC_OscConfig+0x470>)
 801169a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801169e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 80a1 	beq.w	80117ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80116aa:	4b34      	ldr	r3, [pc, #208]	; (801177c <HAL_RCC_OscConfig+0x470>)
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	f003 030c 	and.w	r3, r3, #12
 80116b2:	2b08      	cmp	r3, #8
 80116b4:	d05c      	beq.n	8011770 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	699b      	ldr	r3, [r3, #24]
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d141      	bne.n	8011742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80116be:	4b31      	ldr	r3, [pc, #196]	; (8011784 <HAL_RCC_OscConfig+0x478>)
 80116c0:	2200      	movs	r2, #0
 80116c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80116c4:	f7f4 fdb6 	bl	8006234 <HAL_GetTick>
 80116c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80116ca:	e008      	b.n	80116de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80116cc:	f7f4 fdb2 	bl	8006234 <HAL_GetTick>
 80116d0:	4602      	mov	r2, r0
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	2b02      	cmp	r3, #2
 80116d8:	d901      	bls.n	80116de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80116da:	2303      	movs	r3, #3
 80116dc:	e087      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80116de:	4b27      	ldr	r3, [pc, #156]	; (801177c <HAL_RCC_OscConfig+0x470>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1f0      	bne.n	80116cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	69da      	ldr	r2, [r3, #28]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6a1b      	ldr	r3, [r3, #32]
 80116f2:	431a      	orrs	r2, r3
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f8:	019b      	lsls	r3, r3, #6
 80116fa:	431a      	orrs	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011700:	085b      	lsrs	r3, r3, #1
 8011702:	3b01      	subs	r3, #1
 8011704:	041b      	lsls	r3, r3, #16
 8011706:	431a      	orrs	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	061b      	lsls	r3, r3, #24
 801170e:	491b      	ldr	r1, [pc, #108]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011710:	4313      	orrs	r3, r2
 8011712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011714:	4b1b      	ldr	r3, [pc, #108]	; (8011784 <HAL_RCC_OscConfig+0x478>)
 8011716:	2201      	movs	r2, #1
 8011718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801171a:	f7f4 fd8b 	bl	8006234 <HAL_GetTick>
 801171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011720:	e008      	b.n	8011734 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011722:	f7f4 fd87 	bl	8006234 <HAL_GetTick>
 8011726:	4602      	mov	r2, r0
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	2b02      	cmp	r3, #2
 801172e:	d901      	bls.n	8011734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011730:	2303      	movs	r3, #3
 8011732:	e05c      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011734:	4b11      	ldr	r3, [pc, #68]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801173c:	2b00      	cmp	r3, #0
 801173e:	d0f0      	beq.n	8011722 <HAL_RCC_OscConfig+0x416>
 8011740:	e054      	b.n	80117ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011742:	4b10      	ldr	r3, [pc, #64]	; (8011784 <HAL_RCC_OscConfig+0x478>)
 8011744:	2200      	movs	r2, #0
 8011746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011748:	f7f4 fd74 	bl	8006234 <HAL_GetTick>
 801174c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801174e:	e008      	b.n	8011762 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011750:	f7f4 fd70 	bl	8006234 <HAL_GetTick>
 8011754:	4602      	mov	r2, r0
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	2b02      	cmp	r3, #2
 801175c:	d901      	bls.n	8011762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801175e:	2303      	movs	r3, #3
 8011760:	e045      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011762:	4b06      	ldr	r3, [pc, #24]	; (801177c <HAL_RCC_OscConfig+0x470>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1f0      	bne.n	8011750 <HAL_RCC_OscConfig+0x444>
 801176e:	e03d      	b.n	80117ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	699b      	ldr	r3, [r3, #24]
 8011774:	2b01      	cmp	r3, #1
 8011776:	d107      	bne.n	8011788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011778:	2301      	movs	r3, #1
 801177a:	e038      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
 801177c:	40023800 	.word	0x40023800
 8011780:	40007000 	.word	0x40007000
 8011784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011788:	4b1b      	ldr	r3, [pc, #108]	; (80117f8 <HAL_RCC_OscConfig+0x4ec>)
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	699b      	ldr	r3, [r3, #24]
 8011792:	2b01      	cmp	r3, #1
 8011794:	d028      	beq.n	80117e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d121      	bne.n	80117e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d11a      	bne.n	80117e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80117b2:	68fa      	ldr	r2, [r7, #12]
 80117b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80117b8:	4013      	ands	r3, r2
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80117be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d111      	bne.n	80117e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117ce:	085b      	lsrs	r3, r3, #1
 80117d0:	3b01      	subs	r3, #1
 80117d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d107      	bne.n	80117e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d001      	beq.n	80117ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80117e8:	2301      	movs	r3, #1
 80117ea:	e000      	b.n	80117ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3718      	adds	r7, #24
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	40023800 	.word	0x40023800

080117fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d101      	bne.n	8011810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801180c:	2301      	movs	r3, #1
 801180e:	e0cc      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011810:	4b68      	ldr	r3, [pc, #416]	; (80119b4 <HAL_RCC_ClockConfig+0x1b8>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 0307 	and.w	r3, r3, #7
 8011818:	683a      	ldr	r2, [r7, #0]
 801181a:	429a      	cmp	r2, r3
 801181c:	d90c      	bls.n	8011838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801181e:	4b65      	ldr	r3, [pc, #404]	; (80119b4 <HAL_RCC_ClockConfig+0x1b8>)
 8011820:	683a      	ldr	r2, [r7, #0]
 8011822:	b2d2      	uxtb	r2, r2
 8011824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011826:	4b63      	ldr	r3, [pc, #396]	; (80119b4 <HAL_RCC_ClockConfig+0x1b8>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f003 0307 	and.w	r3, r3, #7
 801182e:	683a      	ldr	r2, [r7, #0]
 8011830:	429a      	cmp	r2, r3
 8011832:	d001      	beq.n	8011838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011834:	2301      	movs	r3, #1
 8011836:	e0b8      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f003 0302 	and.w	r3, r3, #2
 8011840:	2b00      	cmp	r3, #0
 8011842:	d020      	beq.n	8011886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d005      	beq.n	801185c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011850:	4b59      	ldr	r3, [pc, #356]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 8011852:	689b      	ldr	r3, [r3, #8]
 8011854:	4a58      	ldr	r2, [pc, #352]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 8011856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801185a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f003 0308 	and.w	r3, r3, #8
 8011864:	2b00      	cmp	r3, #0
 8011866:	d005      	beq.n	8011874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011868:	4b53      	ldr	r3, [pc, #332]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	4a52      	ldr	r2, [pc, #328]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801186e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011874:	4b50      	ldr	r3, [pc, #320]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 8011876:	689b      	ldr	r3, [r3, #8]
 8011878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	494d      	ldr	r1, [pc, #308]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 8011882:	4313      	orrs	r3, r2
 8011884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f003 0301 	and.w	r3, r3, #1
 801188e:	2b00      	cmp	r3, #0
 8011890:	d044      	beq.n	801191c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	2b01      	cmp	r3, #1
 8011898:	d107      	bne.n	80118aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801189a:	4b47      	ldr	r3, [pc, #284]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d119      	bne.n	80118da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118a6:	2301      	movs	r3, #1
 80118a8:	e07f      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	2b02      	cmp	r3, #2
 80118b0:	d003      	beq.n	80118ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80118b6:	2b03      	cmp	r3, #3
 80118b8:	d107      	bne.n	80118ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118ba:	4b3f      	ldr	r3, [pc, #252]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d109      	bne.n	80118da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118c6:	2301      	movs	r3, #1
 80118c8:	e06f      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80118ca:	4b3b      	ldr	r3, [pc, #236]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	f003 0302 	and.w	r3, r3, #2
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d101      	bne.n	80118da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80118d6:	2301      	movs	r3, #1
 80118d8:	e067      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80118da:	4b37      	ldr	r3, [pc, #220]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	f023 0203 	bic.w	r2, r3, #3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4934      	ldr	r1, [pc, #208]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 80118e8:	4313      	orrs	r3, r2
 80118ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80118ec:	f7f4 fca2 	bl	8006234 <HAL_GetTick>
 80118f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80118f2:	e00a      	b.n	801190a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118f4:	f7f4 fc9e 	bl	8006234 <HAL_GetTick>
 80118f8:	4602      	mov	r2, r0
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011902:	4293      	cmp	r3, r2
 8011904:	d901      	bls.n	801190a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011906:	2303      	movs	r3, #3
 8011908:	e04f      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801190a:	4b2b      	ldr	r3, [pc, #172]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	f003 020c 	and.w	r2, r3, #12
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	429a      	cmp	r2, r3
 801191a:	d1eb      	bne.n	80118f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801191c:	4b25      	ldr	r3, [pc, #148]	; (80119b4 <HAL_RCC_ClockConfig+0x1b8>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f003 0307 	and.w	r3, r3, #7
 8011924:	683a      	ldr	r2, [r7, #0]
 8011926:	429a      	cmp	r2, r3
 8011928:	d20c      	bcs.n	8011944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801192a:	4b22      	ldr	r3, [pc, #136]	; (80119b4 <HAL_RCC_ClockConfig+0x1b8>)
 801192c:	683a      	ldr	r2, [r7, #0]
 801192e:	b2d2      	uxtb	r2, r2
 8011930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011932:	4b20      	ldr	r3, [pc, #128]	; (80119b4 <HAL_RCC_ClockConfig+0x1b8>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f003 0307 	and.w	r3, r3, #7
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	429a      	cmp	r2, r3
 801193e:	d001      	beq.n	8011944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011940:	2301      	movs	r3, #1
 8011942:	e032      	b.n	80119aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d008      	beq.n	8011962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011950:	4b19      	ldr	r3, [pc, #100]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 8011952:	689b      	ldr	r3, [r3, #8]
 8011954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	4916      	ldr	r1, [pc, #88]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801195e:	4313      	orrs	r3, r2
 8011960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f003 0308 	and.w	r3, r3, #8
 801196a:	2b00      	cmp	r3, #0
 801196c:	d009      	beq.n	8011982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801196e:	4b12      	ldr	r3, [pc, #72]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	00db      	lsls	r3, r3, #3
 801197c:	490e      	ldr	r1, [pc, #56]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801197e:	4313      	orrs	r3, r2
 8011980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011982:	f000 f8a1 	bl	8011ac8 <HAL_RCC_GetSysClockFreq>
 8011986:	4602      	mov	r2, r0
 8011988:	4b0b      	ldr	r3, [pc, #44]	; (80119b8 <HAL_RCC_ClockConfig+0x1bc>)
 801198a:	689b      	ldr	r3, [r3, #8]
 801198c:	091b      	lsrs	r3, r3, #4
 801198e:	f003 030f 	and.w	r3, r3, #15
 8011992:	490a      	ldr	r1, [pc, #40]	; (80119bc <HAL_RCC_ClockConfig+0x1c0>)
 8011994:	5ccb      	ldrb	r3, [r1, r3]
 8011996:	fa22 f303 	lsr.w	r3, r2, r3
 801199a:	4a09      	ldr	r2, [pc, #36]	; (80119c0 <HAL_RCC_ClockConfig+0x1c4>)
 801199c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801199e:	4b09      	ldr	r3, [pc, #36]	; (80119c4 <HAL_RCC_ClockConfig+0x1c8>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7f4 fc01 	bl	80061aa <HAL_InitTick>

  return HAL_OK;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3710      	adds	r7, #16
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
 80119b2:	bf00      	nop
 80119b4:	40023c00 	.word	0x40023c00
 80119b8:	40023800 	.word	0x40023800
 80119bc:	08051918 	.word	0x08051918
 80119c0:	20000058 	.word	0x20000058
 80119c4:	2000005c 	.word	0x2000005c

080119c8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b08c      	sub	sp, #48	; 0x30
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d129      	bne.n	8011a2e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80119da:	2300      	movs	r3, #0
 80119dc:	617b      	str	r3, [r7, #20]
 80119de:	4b2b      	ldr	r3, [pc, #172]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 80119e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e2:	4a2a      	ldr	r2, [pc, #168]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 80119e4:	f043 0301 	orr.w	r3, r3, #1
 80119e8:	6313      	str	r3, [r2, #48]	; 0x30
 80119ea:	4b28      	ldr	r3, [pc, #160]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 80119ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ee:	f003 0301 	and.w	r3, r3, #1
 80119f2:	617b      	str	r3, [r7, #20]
 80119f4:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80119f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119fc:	2302      	movs	r3, #2
 80119fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a00:	2303      	movs	r3, #3
 8011a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a04:	2300      	movs	r3, #0
 8011a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8011a0c:	f107 031c 	add.w	r3, r7, #28
 8011a10:	4619      	mov	r1, r3
 8011a12:	481f      	ldr	r0, [pc, #124]	; (8011a90 <HAL_RCC_MCOConfig+0xc8>)
 8011a14:	f7f8 fd76 	bl	800a504 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8011a18:	4b1c      	ldr	r3, [pc, #112]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8011a20:	68b9      	ldr	r1, [r7, #8]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	430b      	orrs	r3, r1
 8011a26:	4919      	ldr	r1, [pc, #100]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8011a2c:	e029      	b.n	8011a82 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8011a2e:	2300      	movs	r3, #0
 8011a30:	61bb      	str	r3, [r7, #24]
 8011a32:	4b16      	ldr	r3, [pc, #88]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a36:	4a15      	ldr	r2, [pc, #84]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a38:	f043 0304 	orr.w	r3, r3, #4
 8011a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8011a3e:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a42:	f003 0304 	and.w	r3, r3, #4
 8011a46:	61bb      	str	r3, [r7, #24]
 8011a48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8011a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a50:	2302      	movs	r3, #2
 8011a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a54:	2303      	movs	r3, #3
 8011a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8011a60:	f107 031c 	add.w	r3, r7, #28
 8011a64:	4619      	mov	r1, r3
 8011a66:	480b      	ldr	r0, [pc, #44]	; (8011a94 <HAL_RCC_MCOConfig+0xcc>)
 8011a68:	f7f8 fd4c 	bl	800a504 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8011a6c:	4b07      	ldr	r3, [pc, #28]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	00d9      	lsls	r1, r3, #3
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	430b      	orrs	r3, r1
 8011a7c:	4903      	ldr	r1, [pc, #12]	; (8011a8c <HAL_RCC_MCOConfig+0xc4>)
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	608b      	str	r3, [r1, #8]
}
 8011a82:	bf00      	nop
 8011a84:	3730      	adds	r7, #48	; 0x30
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	40023800 	.word	0x40023800
 8011a90:	40020000 	.word	0x40020000
 8011a94:	40020800 	.word	0x40020800

08011a98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8011a9c:	4b03      	ldr	r3, [pc, #12]	; (8011aac <HAL_RCC_EnableCSS+0x14>)
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	601a      	str	r2, [r3, #0]
}
 8011aa2:	bf00      	nop
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	4247004c 	.word	0x4247004c

08011ab0 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8011ab4:	4b03      	ldr	r3, [pc, #12]	; (8011ac4 <HAL_RCC_DisableCSS+0x14>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	601a      	str	r2, [r3, #0]
}
 8011aba:	bf00      	nop
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr
 8011ac4:	4247004c 	.word	0x4247004c

08011ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011acc:	b094      	sub	sp, #80	; 0x50
 8011ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ad8:	2300      	movs	r3, #0
 8011ada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8011adc:	2300      	movs	r3, #0
 8011ade:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011ae0:	4b79      	ldr	r3, [pc, #484]	; (8011cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8011ae2:	689b      	ldr	r3, [r3, #8]
 8011ae4:	f003 030c 	and.w	r3, r3, #12
 8011ae8:	2b08      	cmp	r3, #8
 8011aea:	d00d      	beq.n	8011b08 <HAL_RCC_GetSysClockFreq+0x40>
 8011aec:	2b08      	cmp	r3, #8
 8011aee:	f200 80e1 	bhi.w	8011cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d002      	beq.n	8011afc <HAL_RCC_GetSysClockFreq+0x34>
 8011af6:	2b04      	cmp	r3, #4
 8011af8:	d003      	beq.n	8011b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8011afa:	e0db      	b.n	8011cb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011afc:	4b73      	ldr	r3, [pc, #460]	; (8011ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8011afe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8011b00:	e0db      	b.n	8011cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011b02:	4b73      	ldr	r3, [pc, #460]	; (8011cd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8011b04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011b06:	e0d8      	b.n	8011cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011b08:	4b6f      	ldr	r3, [pc, #444]	; (8011cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011b12:	4b6d      	ldr	r3, [pc, #436]	; (8011cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d063      	beq.n	8011be6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b1e:	4b6a      	ldr	r3, [pc, #424]	; (8011cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	099b      	lsrs	r3, r3, #6
 8011b24:	2200      	movs	r2, #0
 8011b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b30:	633b      	str	r3, [r7, #48]	; 0x30
 8011b32:	2300      	movs	r3, #0
 8011b34:	637b      	str	r3, [r7, #52]	; 0x34
 8011b36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011b3a:	4622      	mov	r2, r4
 8011b3c:	462b      	mov	r3, r5
 8011b3e:	f04f 0000 	mov.w	r0, #0
 8011b42:	f04f 0100 	mov.w	r1, #0
 8011b46:	0159      	lsls	r1, r3, #5
 8011b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011b4c:	0150      	lsls	r0, r2, #5
 8011b4e:	4602      	mov	r2, r0
 8011b50:	460b      	mov	r3, r1
 8011b52:	4621      	mov	r1, r4
 8011b54:	1a51      	subs	r1, r2, r1
 8011b56:	6139      	str	r1, [r7, #16]
 8011b58:	4629      	mov	r1, r5
 8011b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8011b5e:	617b      	str	r3, [r7, #20]
 8011b60:	f04f 0200 	mov.w	r2, #0
 8011b64:	f04f 0300 	mov.w	r3, #0
 8011b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011b6c:	4659      	mov	r1, fp
 8011b6e:	018b      	lsls	r3, r1, #6
 8011b70:	4651      	mov	r1, sl
 8011b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011b76:	4651      	mov	r1, sl
 8011b78:	018a      	lsls	r2, r1, #6
 8011b7a:	4651      	mov	r1, sl
 8011b7c:	ebb2 0801 	subs.w	r8, r2, r1
 8011b80:	4659      	mov	r1, fp
 8011b82:	eb63 0901 	sbc.w	r9, r3, r1
 8011b86:	f04f 0200 	mov.w	r2, #0
 8011b8a:	f04f 0300 	mov.w	r3, #0
 8011b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011b9a:	4690      	mov	r8, r2
 8011b9c:	4699      	mov	r9, r3
 8011b9e:	4623      	mov	r3, r4
 8011ba0:	eb18 0303 	adds.w	r3, r8, r3
 8011ba4:	60bb      	str	r3, [r7, #8]
 8011ba6:	462b      	mov	r3, r5
 8011ba8:	eb49 0303 	adc.w	r3, r9, r3
 8011bac:	60fb      	str	r3, [r7, #12]
 8011bae:	f04f 0200 	mov.w	r2, #0
 8011bb2:	f04f 0300 	mov.w	r3, #0
 8011bb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011bba:	4629      	mov	r1, r5
 8011bbc:	024b      	lsls	r3, r1, #9
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	024a      	lsls	r2, r1, #9
 8011bc8:	4610      	mov	r0, r2
 8011bca:	4619      	mov	r1, r3
 8011bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bce:	2200      	movs	r2, #0
 8011bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8011bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011bd8:	f007 f99c 	bl	8018f14 <__aeabi_uldivmod>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	460b      	mov	r3, r1
 8011be0:	4613      	mov	r3, r2
 8011be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011be4:	e058      	b.n	8011c98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011be6:	4b38      	ldr	r3, [pc, #224]	; (8011cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	099b      	lsrs	r3, r3, #6
 8011bec:	2200      	movs	r2, #0
 8011bee:	4618      	mov	r0, r3
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8011bf6:	623b      	str	r3, [r7, #32]
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8011bfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011c00:	4642      	mov	r2, r8
 8011c02:	464b      	mov	r3, r9
 8011c04:	f04f 0000 	mov.w	r0, #0
 8011c08:	f04f 0100 	mov.w	r1, #0
 8011c0c:	0159      	lsls	r1, r3, #5
 8011c0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c12:	0150      	lsls	r0, r2, #5
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	4641      	mov	r1, r8
 8011c1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8011c1e:	4649      	mov	r1, r9
 8011c20:	eb63 0b01 	sbc.w	fp, r3, r1
 8011c24:	f04f 0200 	mov.w	r2, #0
 8011c28:	f04f 0300 	mov.w	r3, #0
 8011c2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011c30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011c34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011c38:	ebb2 040a 	subs.w	r4, r2, sl
 8011c3c:	eb63 050b 	sbc.w	r5, r3, fp
 8011c40:	f04f 0200 	mov.w	r2, #0
 8011c44:	f04f 0300 	mov.w	r3, #0
 8011c48:	00eb      	lsls	r3, r5, #3
 8011c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011c4e:	00e2      	lsls	r2, r4, #3
 8011c50:	4614      	mov	r4, r2
 8011c52:	461d      	mov	r5, r3
 8011c54:	4643      	mov	r3, r8
 8011c56:	18e3      	adds	r3, r4, r3
 8011c58:	603b      	str	r3, [r7, #0]
 8011c5a:	464b      	mov	r3, r9
 8011c5c:	eb45 0303 	adc.w	r3, r5, r3
 8011c60:	607b      	str	r3, [r7, #4]
 8011c62:	f04f 0200 	mov.w	r2, #0
 8011c66:	f04f 0300 	mov.w	r3, #0
 8011c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011c6e:	4629      	mov	r1, r5
 8011c70:	028b      	lsls	r3, r1, #10
 8011c72:	4621      	mov	r1, r4
 8011c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011c78:	4621      	mov	r1, r4
 8011c7a:	028a      	lsls	r2, r1, #10
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	4619      	mov	r1, r3
 8011c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c82:	2200      	movs	r2, #0
 8011c84:	61bb      	str	r3, [r7, #24]
 8011c86:	61fa      	str	r2, [r7, #28]
 8011c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011c8c:	f007 f942 	bl	8018f14 <__aeabi_uldivmod>
 8011c90:	4602      	mov	r2, r0
 8011c92:	460b      	mov	r3, r1
 8011c94:	4613      	mov	r3, r2
 8011c96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011c98:	4b0b      	ldr	r3, [pc, #44]	; (8011cc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	0c1b      	lsrs	r3, r3, #16
 8011c9e:	f003 0303 	and.w	r3, r3, #3
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8011ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011cb2:	e002      	b.n	8011cba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011cb4:	4b05      	ldr	r3, [pc, #20]	; (8011ccc <HAL_RCC_GetSysClockFreq+0x204>)
 8011cb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3750      	adds	r7, #80	; 0x50
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011cc6:	bf00      	nop
 8011cc8:	40023800 	.word	0x40023800
 8011ccc:	00f42400 	.word	0x00f42400
 8011cd0:	007a1200 	.word	0x007a1200

08011cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011cd8:	4b03      	ldr	r3, [pc, #12]	; (8011ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8011cda:	681b      	ldr	r3, [r3, #0]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	20000058 	.word	0x20000058

08011cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011cf0:	f7ff fff0 	bl	8011cd4 <HAL_RCC_GetHCLKFreq>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	4b05      	ldr	r3, [pc, #20]	; (8011d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8011cf8:	689b      	ldr	r3, [r3, #8]
 8011cfa:	0a9b      	lsrs	r3, r3, #10
 8011cfc:	f003 0307 	and.w	r3, r3, #7
 8011d00:	4903      	ldr	r1, [pc, #12]	; (8011d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011d02:	5ccb      	ldrb	r3, [r1, r3]
 8011d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	40023800 	.word	0x40023800
 8011d10:	08051928 	.word	0x08051928

08011d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011d18:	f7ff ffdc 	bl	8011cd4 <HAL_RCC_GetHCLKFreq>
 8011d1c:	4602      	mov	r2, r0
 8011d1e:	4b05      	ldr	r3, [pc, #20]	; (8011d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011d20:	689b      	ldr	r3, [r3, #8]
 8011d22:	0b5b      	lsrs	r3, r3, #13
 8011d24:	f003 0307 	and.w	r3, r3, #7
 8011d28:	4903      	ldr	r1, [pc, #12]	; (8011d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011d2a:	5ccb      	ldrb	r3, [r1, r3]
 8011d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	40023800 	.word	0x40023800
 8011d38:	08051928 	.word	0x08051928

08011d3c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	220f      	movs	r2, #15
 8011d48:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8011d4a:	4b45      	ldr	r3, [pc, #276]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011d56:	d104      	bne.n	8011d62 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011d5e:	605a      	str	r2, [r3, #4]
 8011d60:	e00e      	b.n	8011d80 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8011d62:	4b3f      	ldr	r3, [pc, #252]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d6e:	d104      	bne.n	8011d7a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011d76:	605a      	str	r2, [r3, #4]
 8011d78:	e002      	b.n	8011d80 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8011d80:	4b37      	ldr	r3, [pc, #220]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f003 0301 	and.w	r3, r3, #1
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d103      	bne.n	8011d94 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2201      	movs	r2, #1
 8011d90:	60da      	str	r2, [r3, #12]
 8011d92:	e002      	b.n	8011d9a <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8011d9a:	4b31      	ldr	r3, [pc, #196]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	08db      	lsrs	r3, r3, #3
 8011da0:	f003 021f 	and.w	r2, r3, #31
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8011da8:	4b2d      	ldr	r3, [pc, #180]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dac:	f003 0304 	and.w	r3, r3, #4
 8011db0:	2b04      	cmp	r3, #4
 8011db2:	d103      	bne.n	8011dbc <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2205      	movs	r2, #5
 8011db8:	609a      	str	r2, [r3, #8]
 8011dba:	e00c      	b.n	8011dd6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8011dbc:	4b28      	ldr	r3, [pc, #160]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc0:	f003 0301 	and.w	r3, r3, #1
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d103      	bne.n	8011dd0 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2201      	movs	r2, #1
 8011dcc:	609a      	str	r2, [r3, #8]
 8011dce:	e002      	b.n	8011dd6 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8011dd6:	4b22      	ldr	r3, [pc, #136]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dda:	f003 0301 	and.w	r3, r3, #1
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d103      	bne.n	8011dea <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2201      	movs	r2, #1
 8011de6:	615a      	str	r2, [r3, #20]
 8011de8:	e002      	b.n	8011df0 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2200      	movs	r2, #0
 8011dee:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8011df0:	4b1b      	ldr	r3, [pc, #108]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011dfc:	d103      	bne.n	8011e06 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2202      	movs	r2, #2
 8011e02:	619a      	str	r2, [r3, #24]
 8011e04:	e002      	b.n	8011e0c <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011e0c:	4b14      	ldr	r3, [pc, #80]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8011e18:	4b11      	ldr	r3, [pc, #68]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011e24:	4b0e      	ldr	r3, [pc, #56]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011e26:	685b      	ldr	r3, [r3, #4]
 8011e28:	099b      	lsrs	r3, r3, #6
 8011e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8011e32:	4b0b      	ldr	r3, [pc, #44]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011e3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	0c1a      	lsrs	r2, r3, #16
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8011e46:	4b06      	ldr	r3, [pc, #24]	; (8011e60 <HAL_RCC_GetOscConfig+0x124>)
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	0e1b      	lsrs	r3, r3, #24
 8011e4c:	f003 020f 	and.w	r2, r3, #15
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011e54:	bf00      	nop
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr
 8011e60:	40023800 	.word	0x40023800

08011e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b083      	sub	sp, #12
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	220f      	movs	r2, #15
 8011e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011e74:	4b12      	ldr	r3, [pc, #72]	; (8011ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8011e76:	689b      	ldr	r3, [r3, #8]
 8011e78:	f003 0203 	and.w	r2, r3, #3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011e80:	4b0f      	ldr	r3, [pc, #60]	; (8011ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011e8c:	4b0c      	ldr	r3, [pc, #48]	; (8011ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011e98:	4b09      	ldr	r3, [pc, #36]	; (8011ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8011e9a:	689b      	ldr	r3, [r3, #8]
 8011e9c:	08db      	lsrs	r3, r3, #3
 8011e9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011ea6:	4b07      	ldr	r3, [pc, #28]	; (8011ec4 <HAL_RCC_GetClockConfig+0x60>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f003 0207 	and.w	r2, r3, #7
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	601a      	str	r2, [r3, #0]
}
 8011eb2:	bf00      	nop
 8011eb4:	370c      	adds	r7, #12
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr
 8011ebe:	bf00      	nop
 8011ec0:	40023800 	.word	0x40023800
 8011ec4:	40023c00 	.word	0x40023c00

08011ec8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8011ecc:	4b06      	ldr	r3, [pc, #24]	; (8011ee8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ed4:	2b80      	cmp	r3, #128	; 0x80
 8011ed6:	d104      	bne.n	8011ee2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8011ed8:	f000 f80a 	bl	8011ef0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8011edc:	4b03      	ldr	r3, [pc, #12]	; (8011eec <HAL_RCC_NMI_IRQHandler+0x24>)
 8011ede:	2280      	movs	r2, #128	; 0x80
 8011ee0:	701a      	strb	r2, [r3, #0]
  }
}
 8011ee2:	bf00      	nop
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	40023800 	.word	0x40023800
 8011eec:	4002380e 	.word	0x4002380e

08011ef0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8011ef4:	bf00      	nop
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b086      	sub	sp, #24
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011f06:	2300      	movs	r3, #0
 8011f08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f003 0301 	and.w	r3, r3, #1
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d105      	bne.n	8011f26 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d035      	beq.n	8011f92 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011f26:	4b62      	ldr	r3, [pc, #392]	; (80120b0 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8011f28:	2200      	movs	r2, #0
 8011f2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8011f2c:	f7f4 f982 	bl	8006234 <HAL_GetTick>
 8011f30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011f32:	e008      	b.n	8011f46 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8011f34:	f7f4 f97e 	bl	8006234 <HAL_GetTick>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	d901      	bls.n	8011f46 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011f42:	2303      	movs	r3, #3
 8011f44:	e0b0      	b.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011f46:	4b5b      	ldr	r3, [pc, #364]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1f0      	bne.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	019a      	lsls	r2, r3, #6
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	689b      	ldr	r3, [r3, #8]
 8011f5c:	071b      	lsls	r3, r3, #28
 8011f5e:	4955      	ldr	r1, [pc, #340]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f60:	4313      	orrs	r3, r2
 8011f62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011f66:	4b52      	ldr	r3, [pc, #328]	; (80120b0 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8011f68:	2201      	movs	r2, #1
 8011f6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8011f6c:	f7f4 f962 	bl	8006234 <HAL_GetTick>
 8011f70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011f72:	e008      	b.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8011f74:	f7f4 f95e 	bl	8006234 <HAL_GetTick>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	2b02      	cmp	r3, #2
 8011f80:	d901      	bls.n	8011f86 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011f82:	2303      	movs	r3, #3
 8011f84:	e090      	b.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011f86:	4b4b      	ldr	r3, [pc, #300]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d0f0      	beq.n	8011f74 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f003 0302 	and.w	r3, r3, #2
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	f000 8083 	beq.w	80120a6 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	60fb      	str	r3, [r7, #12]
 8011fa4:	4b43      	ldr	r3, [pc, #268]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fa8:	4a42      	ldr	r2, [pc, #264]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fae:	6413      	str	r3, [r2, #64]	; 0x40
 8011fb0:	4b40      	ldr	r3, [pc, #256]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011fb8:	60fb      	str	r3, [r7, #12]
 8011fba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8011fbc:	4b3e      	ldr	r3, [pc, #248]	; (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a3d      	ldr	r2, [pc, #244]	; (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8011fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fc6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011fc8:	f7f4 f934 	bl	8006234 <HAL_GetTick>
 8011fcc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011fce:	e008      	b.n	8011fe2 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011fd0:	f7f4 f930 	bl	8006234 <HAL_GetTick>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	1ad3      	subs	r3, r2, r3
 8011fda:	2b02      	cmp	r3, #2
 8011fdc:	d901      	bls.n	8011fe2 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8011fde:	2303      	movs	r3, #3
 8011fe0:	e062      	b.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011fe2:	4b35      	ldr	r3, [pc, #212]	; (80120b8 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0f0      	beq.n	8011fd0 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011fee:	4b31      	ldr	r3, [pc, #196]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011ff6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d02f      	beq.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x160>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	68db      	ldr	r3, [r3, #12]
 8012002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012006:	693a      	ldr	r2, [r7, #16]
 8012008:	429a      	cmp	r2, r3
 801200a:	d028      	beq.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801200c:	4b29      	ldr	r3, [pc, #164]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012014:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012016:	4b29      	ldr	r3, [pc, #164]	; (80120bc <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012018:	2201      	movs	r2, #1
 801201a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801201c:	4b27      	ldr	r3, [pc, #156]	; (80120bc <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 801201e:	2200      	movs	r2, #0
 8012020:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012022:	4a24      	ldr	r2, [pc, #144]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012028:	4b22      	ldr	r3, [pc, #136]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	2b01      	cmp	r3, #1
 8012032:	d114      	bne.n	801205e <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012034:	f7f4 f8fe 	bl	8006234 <HAL_GetTick>
 8012038:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801203a:	e00a      	b.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801203c:	f7f4 f8fa 	bl	8006234 <HAL_GetTick>
 8012040:	4602      	mov	r2, r0
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	1ad3      	subs	r3, r2, r3
 8012046:	f241 3288 	movw	r2, #5000	; 0x1388
 801204a:	4293      	cmp	r3, r2
 801204c:	d901      	bls.n	8012052 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 801204e:	2303      	movs	r3, #3
 8012050:	e02a      	b.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012052:	4b18      	ldr	r3, [pc, #96]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012056:	f003 0302 	and.w	r3, r3, #2
 801205a:	2b00      	cmp	r3, #0
 801205c:	d0ee      	beq.n	801203c <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801206a:	d10d      	bne.n	8012088 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801206c:	4b11      	ldr	r3, [pc, #68]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801206e:	689b      	ldr	r3, [r3, #8]
 8012070:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012080:	490c      	ldr	r1, [pc, #48]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012082:	4313      	orrs	r3, r2
 8012084:	608b      	str	r3, [r1, #8]
 8012086:	e005      	b.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012088:	4b0a      	ldr	r3, [pc, #40]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801208e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012092:	6093      	str	r3, [r2, #8]
 8012094:	4b07      	ldr	r3, [pc, #28]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80120a0:	4904      	ldr	r1, [pc, #16]	; (80120b4 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80120a2:	4313      	orrs	r3, r2
 80120a4:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80120a6:	2300      	movs	r3, #0
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3718      	adds	r7, #24
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	42470068 	.word	0x42470068
 80120b4:	40023800 	.word	0x40023800
 80120b8:	40007000 	.word	0x40007000
 80120bc:	42470e40 	.word	0x42470e40

080120c0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2203      	movs	r2, #3
 80120cc:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80120ce:	4b11      	ldr	r3, [pc, #68]	; (8012114 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80120d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120d4:	099b      	lsrs	r3, r3, #6
 80120d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80120de:	4b0d      	ldr	r3, [pc, #52]	; (8012114 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80120e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120e4:	0f1b      	lsrs	r3, r3, #28
 80120e6:	f003 0207 	and.w	r2, r3, #7
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80120ee:	4b09      	ldr	r3, [pc, #36]	; (8012114 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80120f0:	689b      	ldr	r3, [r3, #8]
 80120f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80120f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80120f8:	4b06      	ldr	r3, [pc, #24]	; (8012114 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80120fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	431a      	orrs	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012108:	bf00      	nop
 801210a:	3714      	adds	r7, #20
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr
 8012114:	40023800 	.word	0x40023800

08012118 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012118:	b480      	push	{r7}
 801211a:	b087      	sub	sp, #28
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012120:	2300      	movs	r3, #0
 8012122:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8012124:	2300      	movs	r3, #0
 8012126:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012128:	2300      	movs	r3, #0
 801212a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 801212c:	2300      	movs	r3, #0
 801212e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d13e      	bne.n	80121b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8012136:	4b23      	ldr	r3, [pc, #140]	; (80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801213e:	60fb      	str	r3, [r7, #12]
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d005      	beq.n	8012152 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2b01      	cmp	r3, #1
 801214a:	d12f      	bne.n	80121ac <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 801214c:	4b1e      	ldr	r3, [pc, #120]	; (80121c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 801214e:	617b      	str	r3, [r7, #20]
          break;
 8012150:	e02f      	b.n	80121b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012152:	4b1c      	ldr	r3, [pc, #112]	; (80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801215a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801215e:	d108      	bne.n	8012172 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012160:	4b18      	ldr	r3, [pc, #96]	; (80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012168:	4a18      	ldr	r2, [pc, #96]	; (80121cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 801216a:	fbb2 f3f3 	udiv	r3, r2, r3
 801216e:	613b      	str	r3, [r7, #16]
 8012170:	e007      	b.n	8012182 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012172:	4b14      	ldr	r3, [pc, #80]	; (80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801217a:	4a15      	ldr	r2, [pc, #84]	; (80121d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 801217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012180:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012182:	4b10      	ldr	r3, [pc, #64]	; (80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012188:	099b      	lsrs	r3, r3, #6
 801218a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	fb02 f303 	mul.w	r3, r2, r3
 8012194:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8012196:	4b0b      	ldr	r3, [pc, #44]	; (80121c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801219c:	0f1b      	lsrs	r3, r3, #28
 801219e:	f003 0307 	and.w	r3, r3, #7
 80121a2:	68ba      	ldr	r2, [r7, #8]
 80121a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80121a8:	617b      	str	r3, [r7, #20]
          break;
 80121aa:	e002      	b.n	80121b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80121ac:	2300      	movs	r3, #0
 80121ae:	617b      	str	r3, [r7, #20]
          break;
 80121b0:	bf00      	nop
        }
      }
      break;
 80121b2:	bf00      	nop
    }
  }
  return frequency;
 80121b4:	697b      	ldr	r3, [r7, #20]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	371c      	adds	r7, #28
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	40023800 	.word	0x40023800
 80121c8:	00bb8000 	.word	0x00bb8000
 80121cc:	007a1200 	.word	0x007a1200
 80121d0:	00f42400 	.word	0x00f42400

080121d4 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 80121dc:	4b1d      	ldr	r3, [pc, #116]	; (8012254 <HAL_RCCEx_EnablePLLI2S+0x80>)
 80121de:	2200      	movs	r2, #0
 80121e0:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80121e2:	f7f4 f827 	bl	8006234 <HAL_GetTick>
 80121e6:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80121e8:	e008      	b.n	80121fc <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80121ea:	f7f4 f823 	bl	8006234 <HAL_GetTick>
 80121ee:	4602      	mov	r2, r0
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d901      	bls.n	80121fc <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80121f8:	2303      	movs	r3, #3
 80121fa:	e026      	b.n	801224a <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80121fc:	4b16      	ldr	r3, [pc, #88]	; (8012258 <HAL_RCCEx_EnablePLLI2S+0x84>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1f0      	bne.n	80121ea <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	019a      	lsls	r2, r3, #6
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	685b      	ldr	r3, [r3, #4]
 8012212:	071b      	lsls	r3, r3, #28
 8012214:	4910      	ldr	r1, [pc, #64]	; (8012258 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012216:	4313      	orrs	r3, r2
 8012218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 801221c:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <HAL_RCCEx_EnablePLLI2S+0x80>)
 801221e:	2201      	movs	r2, #1
 8012220:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 8012222:	f7f4 f807 	bl	8006234 <HAL_GetTick>
 8012226:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012228:	e008      	b.n	801223c <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801222a:	f7f4 f803 	bl	8006234 <HAL_GetTick>
 801222e:	4602      	mov	r2, r0
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	1ad3      	subs	r3, r2, r3
 8012234:	2b02      	cmp	r3, #2
 8012236:	d901      	bls.n	801223c <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012238:	2303      	movs	r3, #3
 801223a:	e006      	b.n	801224a <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 801223c:	4b06      	ldr	r3, [pc, #24]	; (8012258 <HAL_RCCEx_EnablePLLI2S+0x84>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012244:	2b00      	cmp	r3, #0
 8012246:	d0f0      	beq.n	801222a <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012248:	2300      	movs	r3, #0
}
 801224a:	4618      	mov	r0, r3
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}
 8012252:	bf00      	nop
 8012254:	42470068 	.word	0x42470068
 8012258:	40023800 	.word	0x40023800

0801225c <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012262:	4b0d      	ldr	r3, [pc, #52]	; (8012298 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8012264:	2200      	movs	r2, #0
 8012266:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012268:	f7f3 ffe4 	bl	8006234 <HAL_GetTick>
 801226c:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801226e:	e008      	b.n	8012282 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012270:	f7f3 ffe0 	bl	8006234 <HAL_GetTick>
 8012274:	4602      	mov	r2, r0
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	2b02      	cmp	r3, #2
 801227c:	d901      	bls.n	8012282 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 801227e:	2303      	movs	r3, #3
 8012280:	e006      	b.n	8012290 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012282:	4b06      	ldr	r3, [pc, #24]	; (801229c <HAL_RCCEx_DisablePLLI2S+0x40>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801228a:	2b00      	cmp	r3, #0
 801228c:	d1f0      	bne.n	8012270 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	42470068 	.word	0x42470068
 801229c:	40023800 	.word	0x40023800

080122a0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80122a6:	f7f3 ffc5 	bl	8006234 <HAL_GetTick>
 80122aa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80122ac:	4b5d      	ldr	r3, [pc, #372]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4a5c      	ldr	r2, [pc, #368]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80122b2:	f043 0301 	orr.w	r3, r3, #1
 80122b6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80122b8:	e008      	b.n	80122cc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80122ba:	f7f3 ffbb 	bl	8006234 <HAL_GetTick>
 80122be:	4602      	mov	r2, r0
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	1ad3      	subs	r3, r2, r3
 80122c4:	2b02      	cmp	r3, #2
 80122c6:	d901      	bls.n	80122cc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80122c8:	2303      	movs	r3, #3
 80122ca:	e0a7      	b.n	801241c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80122cc:	4b55      	ldr	r3, [pc, #340]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f003 0302 	and.w	r3, r3, #2
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d0f0      	beq.n	80122ba <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80122d8:	4b52      	ldr	r3, [pc, #328]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a51      	ldr	r2, [pc, #324]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80122de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80122e4:	f7f3 ffa6 	bl	8006234 <HAL_GetTick>
 80122e8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80122ea:	4b4e      	ldr	r3, [pc, #312]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80122ec:	2200      	movs	r2, #0
 80122ee:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80122f0:	e00a      	b.n	8012308 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122f2:	f7f3 ff9f 	bl	8006234 <HAL_GetTick>
 80122f6:	4602      	mov	r2, r0
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012300:	4293      	cmp	r3, r2
 8012302:	d901      	bls.n	8012308 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8012304:	2303      	movs	r3, #3
 8012306:	e089      	b.n	801241c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012308:	4b46      	ldr	r3, [pc, #280]	; (8012424 <HAL_RCC_DeInit+0x184>)
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	f003 030c 	and.w	r3, r3, #12
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1ee      	bne.n	80122f2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012314:	f7f3 ff8e 	bl	8006234 <HAL_GetTick>
 8012318:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 801231a:	4b42      	ldr	r3, [pc, #264]	; (8012424 <HAL_RCC_DeInit+0x184>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4a41      	ldr	r2, [pc, #260]	; (8012424 <HAL_RCC_DeInit+0x184>)
 8012320:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8012324:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012326:	e008      	b.n	801233a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012328:	f7f3 ff84 	bl	8006234 <HAL_GetTick>
 801232c:	4602      	mov	r2, r0
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	2b64      	cmp	r3, #100	; 0x64
 8012334:	d901      	bls.n	801233a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8012336:	2303      	movs	r3, #3
 8012338:	e070      	b.n	801241c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801233a:	4b3a      	ldr	r3, [pc, #232]	; (8012424 <HAL_RCC_DeInit+0x184>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012342:	2b00      	cmp	r3, #0
 8012344:	d1f0      	bne.n	8012328 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012346:	f7f3 ff75 	bl	8006234 <HAL_GetTick>
 801234a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801234c:	4b35      	ldr	r3, [pc, #212]	; (8012424 <HAL_RCC_DeInit+0x184>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	4a34      	ldr	r2, [pc, #208]	; (8012424 <HAL_RCC_DeInit+0x184>)
 8012352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012356:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012358:	e008      	b.n	801236c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801235a:	f7f3 ff6b 	bl	8006234 <HAL_GetTick>
 801235e:	4602      	mov	r2, r0
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	2b02      	cmp	r3, #2
 8012366:	d901      	bls.n	801236c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8012368:	2303      	movs	r3, #3
 801236a:	e057      	b.n	801241c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 801236c:	4b2d      	ldr	r3, [pc, #180]	; (8012424 <HAL_RCC_DeInit+0x184>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1f0      	bne.n	801235a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012378:	f7f3 ff5c 	bl	8006234 <HAL_GetTick>
 801237c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 801237e:	4b29      	ldr	r3, [pc, #164]	; (8012424 <HAL_RCC_DeInit+0x184>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	4a28      	ldr	r2, [pc, #160]	; (8012424 <HAL_RCC_DeInit+0x184>)
 8012384:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012388:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801238a:	e008      	b.n	801239e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801238c:	f7f3 ff52 	bl	8006234 <HAL_GetTick>
 8012390:	4602      	mov	r2, r0
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	1ad3      	subs	r3, r2, r3
 8012396:	2b02      	cmp	r3, #2
 8012398:	d901      	bls.n	801239e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 801239a:	2303      	movs	r3, #3
 801239c:	e03e      	b.n	801241c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801239e:	4b21      	ldr	r3, [pc, #132]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d1f0      	bne.n	801238c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80123aa:	4b1e      	ldr	r3, [pc, #120]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123ac:	4a1e      	ldr	r2, [pc, #120]	; (8012428 <HAL_RCC_DeInit+0x188>)
 80123ae:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80123b0:	4b1c      	ldr	r3, [pc, #112]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123b2:	4a1e      	ldr	r2, [pc, #120]	; (801242c <HAL_RCC_DeInit+0x18c>)
 80123b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80123b8:	4b1a      	ldr	r3, [pc, #104]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	4a19      	ldr	r2, [pc, #100]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80123c2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80123c4:	4b17      	ldr	r3, [pc, #92]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	4a16      	ldr	r2, [pc, #88]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80123ce:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80123d0:	4b14      	ldr	r3, [pc, #80]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	4a13      	ldr	r2, [pc, #76]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123d6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80123da:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80123dc:	4b11      	ldr	r3, [pc, #68]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	4a10      	ldr	r2, [pc, #64]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80123e6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80123e8:	4b0e      	ldr	r3, [pc, #56]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ec:	4a0d      	ldr	r2, [pc, #52]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123ee:	f023 0301 	bic.w	r3, r3, #1
 80123f2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80123f4:	4b0b      	ldr	r3, [pc, #44]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123f8:	4a0a      	ldr	r2, [pc, #40]	; (8012424 <HAL_RCC_DeInit+0x184>)
 80123fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80123fe:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8012400:	4b0b      	ldr	r3, [pc, #44]	; (8012430 <HAL_RCC_DeInit+0x190>)
 8012402:	4a0c      	ldr	r2, [pc, #48]	; (8012434 <HAL_RCC_DeInit+0x194>)
 8012404:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8012406:	4b0c      	ldr	r3, [pc, #48]	; (8012438 <HAL_RCC_DeInit+0x198>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	4618      	mov	r0, r3
 801240c:	f7f3 fecd 	bl	80061aa <HAL_InitTick>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8012416:	2301      	movs	r3, #1
 8012418:	e000      	b.n	801241c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 801241a:	2300      	movs	r3, #0
  }
}
 801241c:	4618      	mov	r0, r3
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	40023800 	.word	0x40023800
 8012428:	04003010 	.word	0x04003010
 801242c:	20003000 	.word	0x20003000
 8012430:	20000058 	.word	0x20000058
 8012434:	00f42400 	.word	0x00f42400
 8012438:	2000005c 	.word	0x2000005c

0801243c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d101      	bne.n	801244e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801244a:	2301      	movs	r3, #1
 801244c:	e07b      	b.n	8012546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012452:	2b00      	cmp	r3, #0
 8012454:	d108      	bne.n	8012468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801245e:	d009      	beq.n	8012474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2200      	movs	r2, #0
 8012464:	61da      	str	r2, [r3, #28]
 8012466:	e005      	b.n	8012474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2200      	movs	r2, #0
 8012478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d106      	bne.n	8012494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7f3 f8b6 	bl	8005600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2202      	movs	r2, #2
 8012498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80124aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	689b      	ldr	r3, [r3, #8]
 80124b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80124bc:	431a      	orrs	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	68db      	ldr	r3, [r3, #12]
 80124c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124c6:	431a      	orrs	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	f003 0302 	and.w	r3, r3, #2
 80124d0:	431a      	orrs	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	695b      	ldr	r3, [r3, #20]
 80124d6:	f003 0301 	and.w	r3, r3, #1
 80124da:	431a      	orrs	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	699b      	ldr	r3, [r3, #24]
 80124e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80124e4:	431a      	orrs	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	69db      	ldr	r3, [r3, #28]
 80124ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80124ee:	431a      	orrs	r2, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6a1b      	ldr	r3, [r3, #32]
 80124f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124f8:	ea42 0103 	orr.w	r1, r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012500:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	430a      	orrs	r2, r1
 801250a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	0c1b      	lsrs	r3, r3, #16
 8012512:	f003 0104 	and.w	r1, r3, #4
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251a:	f003 0210 	and.w	r2, r3, #16
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	430a      	orrs	r2, r1
 8012524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	69da      	ldr	r2, [r3, #28]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2201      	movs	r2, #1
 8012540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}

0801254e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 801254e:	b580      	push	{r7, lr}
 8012550:	b082      	sub	sp, #8
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 801255c:	2301      	movs	r3, #1
 801255e:	e01a      	b.n	8012596 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2202      	movs	r2, #2
 8012564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012576:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f7f3 f8e1 	bl	8005740 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2200      	movs	r2, #0
 8012582:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2200      	movs	r2, #0
 8012590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b088      	sub	sp, #32
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	60f8      	str	r0, [r7, #12]
 80125a6:	60b9      	str	r1, [r7, #8]
 80125a8:	603b      	str	r3, [r7, #0]
 80125aa:	4613      	mov	r3, r2
 80125ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80125ae:	2300      	movs	r3, #0
 80125b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d101      	bne.n	80125c0 <HAL_SPI_Transmit+0x22>
 80125bc:	2302      	movs	r3, #2
 80125be:	e126      	b.n	801280e <HAL_SPI_Transmit+0x270>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2201      	movs	r2, #1
 80125c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80125c8:	f7f3 fe34 	bl	8006234 <HAL_GetTick>
 80125cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80125ce:	88fb      	ldrh	r3, [r7, #6]
 80125d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80125d8:	b2db      	uxtb	r3, r3
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d002      	beq.n	80125e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80125de:	2302      	movs	r3, #2
 80125e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80125e2:	e10b      	b.n	80127fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d002      	beq.n	80125f0 <HAL_SPI_Transmit+0x52>
 80125ea:	88fb      	ldrh	r3, [r7, #6]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80125f0:	2301      	movs	r3, #1
 80125f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80125f4:	e102      	b.n	80127fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2203      	movs	r2, #3
 80125fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2200      	movs	r2, #0
 8012602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	68ba      	ldr	r2, [r7, #8]
 8012608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	88fa      	ldrh	r2, [r7, #6]
 801260e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	88fa      	ldrh	r2, [r7, #6]
 8012614:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	2200      	movs	r2, #0
 801261a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2200      	movs	r2, #0
 8012620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2200      	movs	r2, #0
 8012626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2200      	movs	r2, #0
 8012632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801263c:	d10f      	bne.n	801265e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801264c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	681a      	ldr	r2, [r3, #0]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801265c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012668:	2b40      	cmp	r3, #64	; 0x40
 801266a:	d007      	beq.n	801267c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801267a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012684:	d14b      	bne.n	801271e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d002      	beq.n	8012694 <HAL_SPI_Transmit+0xf6>
 801268e:	8afb      	ldrh	r3, [r7, #22]
 8012690:	2b01      	cmp	r3, #1
 8012692:	d13e      	bne.n	8012712 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012698:	881a      	ldrh	r2, [r3, #0]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126a4:	1c9a      	adds	r2, r3, #2
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	3b01      	subs	r3, #1
 80126b2:	b29a      	uxth	r2, r3
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80126b8:	e02b      	b.n	8012712 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	f003 0302 	and.w	r3, r3, #2
 80126c4:	2b02      	cmp	r3, #2
 80126c6:	d112      	bne.n	80126ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126cc:	881a      	ldrh	r2, [r3, #0]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d8:	1c9a      	adds	r2, r3, #2
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	3b01      	subs	r3, #1
 80126e6:	b29a      	uxth	r2, r3
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80126ec:	e011      	b.n	8012712 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80126ee:	f7f3 fda1 	bl	8006234 <HAL_GetTick>
 80126f2:	4602      	mov	r2, r0
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d803      	bhi.n	8012706 <HAL_SPI_Transmit+0x168>
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012704:	d102      	bne.n	801270c <HAL_SPI_Transmit+0x16e>
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d102      	bne.n	8012712 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801270c:	2303      	movs	r3, #3
 801270e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012710:	e074      	b.n	80127fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012716:	b29b      	uxth	r3, r3
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1ce      	bne.n	80126ba <HAL_SPI_Transmit+0x11c>
 801271c:	e04c      	b.n	80127b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d002      	beq.n	801272c <HAL_SPI_Transmit+0x18e>
 8012726:	8afb      	ldrh	r3, [r7, #22]
 8012728:	2b01      	cmp	r3, #1
 801272a:	d140      	bne.n	80127ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	330c      	adds	r3, #12
 8012736:	7812      	ldrb	r2, [r2, #0]
 8012738:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801273e:	1c5a      	adds	r2, r3, #1
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012748:	b29b      	uxth	r3, r3
 801274a:	3b01      	subs	r3, #1
 801274c:	b29a      	uxth	r2, r3
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012752:	e02c      	b.n	80127ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	689b      	ldr	r3, [r3, #8]
 801275a:	f003 0302 	and.w	r3, r3, #2
 801275e:	2b02      	cmp	r3, #2
 8012760:	d113      	bne.n	801278a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	330c      	adds	r3, #12
 801276c:	7812      	ldrb	r2, [r2, #0]
 801276e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012774:	1c5a      	adds	r2, r3, #1
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801277e:	b29b      	uxth	r3, r3
 8012780:	3b01      	subs	r3, #1
 8012782:	b29a      	uxth	r2, r3
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	86da      	strh	r2, [r3, #54]	; 0x36
 8012788:	e011      	b.n	80127ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801278a:	f7f3 fd53 	bl	8006234 <HAL_GetTick>
 801278e:	4602      	mov	r2, r0
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	1ad3      	subs	r3, r2, r3
 8012794:	683a      	ldr	r2, [r7, #0]
 8012796:	429a      	cmp	r2, r3
 8012798:	d803      	bhi.n	80127a2 <HAL_SPI_Transmit+0x204>
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a0:	d102      	bne.n	80127a8 <HAL_SPI_Transmit+0x20a>
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80127a8:	2303      	movs	r3, #3
 80127aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80127ac:	e026      	b.n	80127fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d1cd      	bne.n	8012754 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80127b8:	69ba      	ldr	r2, [r7, #24]
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f001 ff3e 	bl	801463e <SPI_EndRxTxTransaction>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d002      	beq.n	80127ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2220      	movs	r2, #32
 80127cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d10a      	bne.n	80127ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80127d6:	2300      	movs	r3, #0
 80127d8:	613b      	str	r3, [r7, #16]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	613b      	str	r3, [r7, #16]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	613b      	str	r3, [r7, #16]
 80127ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80127f4:	2301      	movs	r3, #1
 80127f6:	77fb      	strb	r3, [r7, #31]
 80127f8:	e000      	b.n	80127fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80127fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2201      	movs	r2, #1
 8012800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	2200      	movs	r2, #0
 8012808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801280c:	7ffb      	ldrb	r3, [r7, #31]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3720      	adds	r7, #32
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}

08012816 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012816:	b580      	push	{r7, lr}
 8012818:	b088      	sub	sp, #32
 801281a:	af02      	add	r7, sp, #8
 801281c:	60f8      	str	r0, [r7, #12]
 801281e:	60b9      	str	r1, [r7, #8]
 8012820:	603b      	str	r3, [r7, #0]
 8012822:	4613      	mov	r3, r2
 8012824:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012826:	2300      	movs	r3, #0
 8012828:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012832:	d112      	bne.n	801285a <HAL_SPI_Receive+0x44>
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10e      	bne.n	801285a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	2204      	movs	r2, #4
 8012840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012844:	88fa      	ldrh	r2, [r7, #6]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	4613      	mov	r3, r2
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	68b9      	ldr	r1, [r7, #8]
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f000 f8f1 	bl	8012a38 <HAL_SPI_TransmitReceive>
 8012856:	4603      	mov	r3, r0
 8012858:	e0ea      	b.n	8012a30 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012860:	2b01      	cmp	r3, #1
 8012862:	d101      	bne.n	8012868 <HAL_SPI_Receive+0x52>
 8012864:	2302      	movs	r3, #2
 8012866:	e0e3      	b.n	8012a30 <HAL_SPI_Receive+0x21a>
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2201      	movs	r2, #1
 801286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012870:	f7f3 fce0 	bl	8006234 <HAL_GetTick>
 8012874:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801287c:	b2db      	uxtb	r3, r3
 801287e:	2b01      	cmp	r3, #1
 8012880:	d002      	beq.n	8012888 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012882:	2302      	movs	r3, #2
 8012884:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012886:	e0ca      	b.n	8012a1e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d002      	beq.n	8012894 <HAL_SPI_Receive+0x7e>
 801288e:	88fb      	ldrh	r3, [r7, #6]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d102      	bne.n	801289a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012894:	2301      	movs	r3, #1
 8012896:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012898:	e0c1      	b.n	8012a1e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2204      	movs	r2, #4
 801289e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2200      	movs	r2, #0
 80128a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	68ba      	ldr	r2, [r7, #8]
 80128ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	88fa      	ldrh	r2, [r7, #6]
 80128b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	88fa      	ldrh	r2, [r7, #6]
 80128b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	2200      	movs	r2, #0
 80128be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	2200      	movs	r2, #0
 80128c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2200      	movs	r2, #0
 80128ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2200      	movs	r2, #0
 80128d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	2200      	movs	r2, #0
 80128d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	689b      	ldr	r3, [r3, #8]
 80128dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128e0:	d10f      	bne.n	8012902 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80128f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681a      	ldr	r2, [r3, #0]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012900:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801290c:	2b40      	cmp	r3, #64	; 0x40
 801290e:	d007      	beq.n	8012920 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801291e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d162      	bne.n	80129ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012928:	e02e      	b.n	8012988 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	689b      	ldr	r3, [r3, #8]
 8012930:	f003 0301 	and.w	r3, r3, #1
 8012934:	2b01      	cmp	r3, #1
 8012936:	d115      	bne.n	8012964 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	f103 020c 	add.w	r2, r3, #12
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012944:	7812      	ldrb	r2, [r2, #0]
 8012946:	b2d2      	uxtb	r2, r2
 8012948:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801294e:	1c5a      	adds	r2, r3, #1
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012958:	b29b      	uxth	r3, r3
 801295a:	3b01      	subs	r3, #1
 801295c:	b29a      	uxth	r2, r3
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012962:	e011      	b.n	8012988 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012964:	f7f3 fc66 	bl	8006234 <HAL_GetTick>
 8012968:	4602      	mov	r2, r0
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	1ad3      	subs	r3, r2, r3
 801296e:	683a      	ldr	r2, [r7, #0]
 8012970:	429a      	cmp	r2, r3
 8012972:	d803      	bhi.n	801297c <HAL_SPI_Receive+0x166>
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801297a:	d102      	bne.n	8012982 <HAL_SPI_Receive+0x16c>
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d102      	bne.n	8012988 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012982:	2303      	movs	r3, #3
 8012984:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012986:	e04a      	b.n	8012a1e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801298c:	b29b      	uxth	r3, r3
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1cb      	bne.n	801292a <HAL_SPI_Receive+0x114>
 8012992:	e031      	b.n	80129f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d113      	bne.n	80129ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	68da      	ldr	r2, [r3, #12]
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ac:	b292      	uxth	r2, r2
 80129ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129b4:	1c9a      	adds	r2, r3, #2
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129be:	b29b      	uxth	r3, r3
 80129c0:	3b01      	subs	r3, #1
 80129c2:	b29a      	uxth	r2, r3
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80129c8:	e011      	b.n	80129ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80129ca:	f7f3 fc33 	bl	8006234 <HAL_GetTick>
 80129ce:	4602      	mov	r2, r0
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	1ad3      	subs	r3, r2, r3
 80129d4:	683a      	ldr	r2, [r7, #0]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d803      	bhi.n	80129e2 <HAL_SPI_Receive+0x1cc>
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129e0:	d102      	bne.n	80129e8 <HAL_SPI_Receive+0x1d2>
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d102      	bne.n	80129ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80129e8:	2303      	movs	r3, #3
 80129ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80129ec:	e017      	b.n	8012a1e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d1cd      	bne.n	8012994 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80129f8:	693a      	ldr	r2, [r7, #16]
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	68f8      	ldr	r0, [r7, #12]
 80129fe:	f001 fdb9 	bl	8014574 <SPI_EndRxTransaction>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2220      	movs	r2, #32
 8012a0c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d002      	beq.n	8012a1c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8012a16:	2301      	movs	r3, #1
 8012a18:	75fb      	strb	r3, [r7, #23]
 8012a1a:	e000      	b.n	8012a1e <HAL_SPI_Receive+0x208>
  }

error :
 8012a1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2201      	movs	r2, #1
 8012a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3718      	adds	r7, #24
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b08c      	sub	sp, #48	; 0x30
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	607a      	str	r2, [r7, #4]
 8012a44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012a46:	2301      	movs	r3, #1
 8012a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d101      	bne.n	8012a5e <HAL_SPI_TransmitReceive+0x26>
 8012a5a:	2302      	movs	r3, #2
 8012a5c:	e18a      	b.n	8012d74 <HAL_SPI_TransmitReceive+0x33c>
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2201      	movs	r2, #1
 8012a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012a66:	f7f3 fbe5 	bl	8006234 <HAL_GetTick>
 8012a6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8012a7c:	887b      	ldrh	r3, [r7, #2]
 8012a7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d00f      	beq.n	8012aa8 <HAL_SPI_TransmitReceive+0x70>
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012a8e:	d107      	bne.n	8012aa0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d103      	bne.n	8012aa0 <HAL_SPI_TransmitReceive+0x68>
 8012a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012a9c:	2b04      	cmp	r3, #4
 8012a9e:	d003      	beq.n	8012aa8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012aa0:	2302      	movs	r3, #2
 8012aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012aa6:	e15b      	b.n	8012d60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d005      	beq.n	8012aba <HAL_SPI_TransmitReceive+0x82>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <HAL_SPI_TransmitReceive+0x82>
 8012ab4:	887b      	ldrh	r3, [r7, #2]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d103      	bne.n	8012ac2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012aba:	2301      	movs	r3, #1
 8012abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012ac0:	e14e      	b.n	8012d60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b04      	cmp	r3, #4
 8012acc:	d003      	beq.n	8012ad6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2205      	movs	r2, #5
 8012ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	887a      	ldrh	r2, [r7, #2]
 8012ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	887a      	ldrh	r2, [r7, #2]
 8012aec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	68ba      	ldr	r2, [r7, #8]
 8012af2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	887a      	ldrh	r2, [r7, #2]
 8012af8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	887a      	ldrh	r2, [r7, #2]
 8012afe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2200      	movs	r2, #0
 8012b04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b16:	2b40      	cmp	r3, #64	; 0x40
 8012b18:	d007      	beq.n	8012b2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012b32:	d178      	bne.n	8012c26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d002      	beq.n	8012b42 <HAL_SPI_TransmitReceive+0x10a>
 8012b3c:	8b7b      	ldrh	r3, [r7, #26]
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d166      	bne.n	8012c10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b46:	881a      	ldrh	r2, [r3, #0]
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b52:	1c9a      	adds	r2, r3, #2
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	3b01      	subs	r3, #1
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b66:	e053      	b.n	8012c10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	f003 0302 	and.w	r3, r3, #2
 8012b72:	2b02      	cmp	r3, #2
 8012b74:	d11b      	bne.n	8012bae <HAL_SPI_TransmitReceive+0x176>
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d016      	beq.n	8012bae <HAL_SPI_TransmitReceive+0x176>
 8012b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d113      	bne.n	8012bae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b8a:	881a      	ldrh	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b96:	1c9a      	adds	r2, r3, #2
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012baa:	2300      	movs	r3, #0
 8012bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	689b      	ldr	r3, [r3, #8]
 8012bb4:	f003 0301 	and.w	r3, r3, #1
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d119      	bne.n	8012bf0 <HAL_SPI_TransmitReceive+0x1b8>
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d014      	beq.n	8012bf0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	68da      	ldr	r2, [r3, #12]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bd0:	b292      	uxth	r2, r2
 8012bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bd8:	1c9a      	adds	r2, r3, #2
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	3b01      	subs	r3, #1
 8012be6:	b29a      	uxth	r2, r3
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012bec:	2301      	movs	r3, #1
 8012bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012bf0:	f7f3 fb20 	bl	8006234 <HAL_GetTick>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d807      	bhi.n	8012c10 <HAL_SPI_TransmitReceive+0x1d8>
 8012c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c06:	d003      	beq.n	8012c10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8012c08:	2303      	movs	r3, #3
 8012c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012c0e:	e0a7      	b.n	8012d60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c14:	b29b      	uxth	r3, r3
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1a6      	bne.n	8012b68 <HAL_SPI_TransmitReceive+0x130>
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d1a1      	bne.n	8012b68 <HAL_SPI_TransmitReceive+0x130>
 8012c24:	e07c      	b.n	8012d20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d002      	beq.n	8012c34 <HAL_SPI_TransmitReceive+0x1fc>
 8012c2e:	8b7b      	ldrh	r3, [r7, #26]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d16b      	bne.n	8012d0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	330c      	adds	r3, #12
 8012c3e:	7812      	ldrb	r2, [r2, #0]
 8012c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c46:	1c5a      	adds	r2, r3, #1
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	3b01      	subs	r3, #1
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012c5a:	e057      	b.n	8012d0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	f003 0302 	and.w	r3, r3, #2
 8012c66:	2b02      	cmp	r3, #2
 8012c68:	d11c      	bne.n	8012ca4 <HAL_SPI_TransmitReceive+0x26c>
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d017      	beq.n	8012ca4 <HAL_SPI_TransmitReceive+0x26c>
 8012c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d114      	bne.n	8012ca4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	330c      	adds	r3, #12
 8012c84:	7812      	ldrb	r2, [r2, #0]
 8012c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	3b01      	subs	r3, #1
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	689b      	ldr	r3, [r3, #8]
 8012caa:	f003 0301 	and.w	r3, r3, #1
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d119      	bne.n	8012ce6 <HAL_SPI_TransmitReceive+0x2ae>
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d014      	beq.n	8012ce6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	68da      	ldr	r2, [r3, #12]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cc6:	b2d2      	uxtb	r2, r2
 8012cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012ce6:	f7f3 faa5 	bl	8006234 <HAL_GetTick>
 8012cea:	4602      	mov	r2, r0
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d803      	bhi.n	8012cfe <HAL_SPI_TransmitReceive+0x2c6>
 8012cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cfc:	d102      	bne.n	8012d04 <HAL_SPI_TransmitReceive+0x2cc>
 8012cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d103      	bne.n	8012d0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8012d04:	2303      	movs	r3, #3
 8012d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012d0a:	e029      	b.n	8012d60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1a2      	bne.n	8012c5c <HAL_SPI_TransmitReceive+0x224>
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d19d      	bne.n	8012c5c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d24:	68f8      	ldr	r0, [r7, #12]
 8012d26:	f001 fc8a 	bl	801463e <SPI_EndRxTxTransaction>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d006      	beq.n	8012d3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8012d30:	2301      	movs	r3, #1
 8012d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2220      	movs	r2, #32
 8012d3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8012d3c:	e010      	b.n	8012d60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	689b      	ldr	r3, [r3, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d10b      	bne.n	8012d5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012d46:	2300      	movs	r3, #0
 8012d48:	617b      	str	r3, [r7, #20]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	617b      	str	r3, [r7, #20]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	689b      	ldr	r3, [r3, #8]
 8012d58:	617b      	str	r3, [r7, #20]
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	e000      	b.n	8012d60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8012d5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	2201      	movs	r2, #1
 8012d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012d70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3730      	adds	r7, #48	; 0x30
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b087      	sub	sp, #28
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	60f8      	str	r0, [r7, #12]
 8012d84:	60b9      	str	r1, [r7, #8]
 8012d86:	4613      	mov	r3, r2
 8012d88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d101      	bne.n	8012d9c <HAL_SPI_Transmit_IT+0x20>
 8012d98:	2302      	movs	r3, #2
 8012d9a:	e06f      	b.n	8012e7c <HAL_SPI_Transmit_IT+0x100>
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2201      	movs	r2, #1
 8012da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d002      	beq.n	8012db0 <HAL_SPI_Transmit_IT+0x34>
 8012daa:	88fb      	ldrh	r3, [r7, #6]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d102      	bne.n	8012db6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8012db0:	2301      	movs	r3, #1
 8012db2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012db4:	e05d      	b.n	8012e72 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d002      	beq.n	8012dc8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012dc6:	e054      	b.n	8012e72 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	2203      	movs	r2, #3
 8012dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	88fa      	ldrh	r2, [r7, #6]
 8012de0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	88fa      	ldrh	r2, [r7, #6]
 8012de6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2200      	movs	r2, #0
 8012dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2200      	movs	r2, #0
 8012df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2200      	movs	r2, #0
 8012df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d003      	beq.n	8012e10 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	4a1f      	ldr	r2, [pc, #124]	; (8012e88 <HAL_SPI_Transmit_IT+0x10c>)
 8012e0c:	645a      	str	r2, [r3, #68]	; 0x44
 8012e0e:	e002      	b.n	8012e16 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	4a1e      	ldr	r2, [pc, #120]	; (8012e8c <HAL_SPI_Transmit_IT+0x110>)
 8012e14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	689b      	ldr	r3, [r3, #8]
 8012e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e1e:	d10f      	bne.n	8012e40 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012e3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	685a      	ldr	r2, [r3, #4]
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8012e4e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e5a:	2b40      	cmp	r3, #64	; 0x40
 8012e5c:	d008      	beq.n	8012e70 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	681a      	ldr	r2, [r3, #0]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e6c:	601a      	str	r2, [r3, #0]
 8012e6e:	e000      	b.n	8012e72 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8012e70:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	371c      	adds	r7, #28
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr
 8012e88:	08014421 	.word	0x08014421
 8012e8c:	080143db 	.word	0x080143db

08012e90 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b086      	sub	sp, #24
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	4613      	mov	r3, r2
 8012e9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	689b      	ldr	r3, [r3, #8]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d110      	bne.n	8012ecc <HAL_SPI_Receive_IT+0x3c>
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012eb2:	d10b      	bne.n	8012ecc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2204      	movs	r2, #4
 8012eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8012ebc:	88fb      	ldrh	r3, [r7, #6]
 8012ebe:	68ba      	ldr	r2, [r7, #8]
 8012ec0:	68b9      	ldr	r1, [r7, #8]
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f000 f882 	bl	8012fcc <HAL_SPI_TransmitReceive_IT>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	e076      	b.n	8012fba <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012ed2:	2b01      	cmp	r3, #1
 8012ed4:	d101      	bne.n	8012eda <HAL_SPI_Receive_IT+0x4a>
 8012ed6:	2302      	movs	r3, #2
 8012ed8:	e06f      	b.n	8012fba <HAL_SPI_Receive_IT+0x12a>
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2201      	movs	r2, #1
 8012ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	2b01      	cmp	r3, #1
 8012eec:	d002      	beq.n	8012ef4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8012eee:	2302      	movs	r3, #2
 8012ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ef2:	e05d      	b.n	8012fb0 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d002      	beq.n	8012f00 <HAL_SPI_Receive_IT+0x70>
 8012efa:	88fb      	ldrh	r3, [r7, #6]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d102      	bne.n	8012f06 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8012f00:	2301      	movs	r3, #1
 8012f02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012f04:	e054      	b.n	8012fb0 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2204      	movs	r2, #4
 8012f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2200      	movs	r2, #0
 8012f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	68ba      	ldr	r2, [r7, #8]
 8012f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	88fa      	ldrh	r2, [r7, #6]
 8012f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	88fa      	ldrh	r2, [r7, #6]
 8012f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2200      	movs	r2, #0
 8012f36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d003      	beq.n	8012f4e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	4a1e      	ldr	r2, [pc, #120]	; (8012fc4 <HAL_SPI_Receive_IT+0x134>)
 8012f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8012f4c:	e002      	b.n	8012f54 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	4a1d      	ldr	r2, [pc, #116]	; (8012fc8 <HAL_SPI_Receive_IT+0x138>)
 8012f52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	689b      	ldr	r3, [r3, #8]
 8012f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f5c:	d10f      	bne.n	8012f7e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	685a      	ldr	r2, [r3, #4]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8012f8c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f98:	2b40      	cmp	r3, #64	; 0x40
 8012f9a:	d008      	beq.n	8012fae <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012faa:	601a      	str	r2, [r3, #0]
 8012fac:	e000      	b.n	8012fb0 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8012fae:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3718      	adds	r7, #24
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	08014395 	.word	0x08014395
 8012fc8:	0801434b 	.word	0x0801434b

08012fcc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b087      	sub	sp, #28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012fe4:	2b01      	cmp	r3, #1
 8012fe6:	d101      	bne.n	8012fec <HAL_SPI_TransmitReceive_IT+0x20>
 8012fe8:	2302      	movs	r3, #2
 8012fea:	e075      	b.n	80130d8 <HAL_SPI_TransmitReceive_IT+0x10c>
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ffa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013002:	7dbb      	ldrb	r3, [r7, #22]
 8013004:	2b01      	cmp	r3, #1
 8013006:	d00d      	beq.n	8013024 <HAL_SPI_TransmitReceive_IT+0x58>
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801300e:	d106      	bne.n	801301e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d102      	bne.n	801301e <HAL_SPI_TransmitReceive_IT+0x52>
 8013018:	7dbb      	ldrb	r3, [r7, #22]
 801301a:	2b04      	cmp	r3, #4
 801301c:	d002      	beq.n	8013024 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 801301e:	2302      	movs	r3, #2
 8013020:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013022:	e054      	b.n	80130ce <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d005      	beq.n	8013036 <HAL_SPI_TransmitReceive_IT+0x6a>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <HAL_SPI_TransmitReceive_IT+0x6a>
 8013030:	887b      	ldrh	r3, [r7, #2]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d102      	bne.n	801303c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8013036:	2301      	movs	r3, #1
 8013038:	75fb      	strb	r3, [r7, #23]
    goto error;
 801303a:	e048      	b.n	80130ce <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013042:	b2db      	uxtb	r3, r3
 8013044:	2b04      	cmp	r3, #4
 8013046:	d003      	beq.n	8013050 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2205      	movs	r2, #5
 801304c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2200      	movs	r2, #0
 8013054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	887a      	ldrh	r2, [r7, #2]
 8013060:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	887a      	ldrh	r2, [r7, #2]
 8013066:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	887a      	ldrh	r2, [r7, #2]
 8013072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	887a      	ldrh	r2, [r7, #2]
 8013078:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	68db      	ldr	r3, [r3, #12]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d006      	beq.n	8013090 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	4a17      	ldr	r2, [pc, #92]	; (80130e4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8013086:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	4a17      	ldr	r2, [pc, #92]	; (80130e8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 801308c:	645a      	str	r2, [r3, #68]	; 0x44
 801308e:	e005      	b.n	801309c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	4a16      	ldr	r2, [pc, #88]	; (80130ec <HAL_SPI_TransmitReceive_IT+0x120>)
 8013094:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	4a15      	ldr	r2, [pc, #84]	; (80130f0 <HAL_SPI_TransmitReceive_IT+0x124>)
 801309a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	685a      	ldr	r2, [r3, #4]
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80130aa:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130b6:	2b40      	cmp	r3, #64	; 0x40
 80130b8:	d008      	beq.n	80130cc <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	681a      	ldr	r2, [r3, #0]
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	e000      	b.n	80130ce <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80130cc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2200      	movs	r2, #0
 80130d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80130d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80130d8:	4618      	mov	r0, r3
 80130da:	371c      	adds	r7, #28
 80130dc:	46bd      	mov	sp, r7
 80130de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e2:	4770      	bx	lr
 80130e4:	0801428d 	.word	0x0801428d
 80130e8:	080142ed 	.word	0x080142ed
 80130ec:	080141c9 	.word	0x080141c9
 80130f0:	0801422d 	.word	0x0801422d

080130f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b086      	sub	sp, #24
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	4613      	mov	r3, r2
 8013100:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013102:	2300      	movs	r3, #0
 8013104:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801310c:	2b01      	cmp	r3, #1
 801310e:	d101      	bne.n	8013114 <HAL_SPI_Transmit_DMA+0x20>
 8013110:	2302      	movs	r3, #2
 8013112:	e09b      	b.n	801324c <HAL_SPI_Transmit_DMA+0x158>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2201      	movs	r2, #1
 8013118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013122:	b2db      	uxtb	r3, r3
 8013124:	2b01      	cmp	r3, #1
 8013126:	d002      	beq.n	801312e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013128:	2302      	movs	r3, #2
 801312a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801312c:	e089      	b.n	8013242 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d002      	beq.n	801313a <HAL_SPI_Transmit_DMA+0x46>
 8013134:	88fb      	ldrh	r3, [r7, #6]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d102      	bne.n	8013140 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 801313a:	2301      	movs	r3, #1
 801313c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801313e:	e080      	b.n	8013242 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2203      	movs	r2, #3
 8013144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2200      	movs	r2, #0
 801314c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	68ba      	ldr	r2, [r7, #8]
 8013152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	88fa      	ldrh	r2, [r7, #6]
 8013158:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	88fa      	ldrh	r2, [r7, #6]
 801315e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2200      	movs	r2, #0
 8013164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	2200      	movs	r2, #0
 801316a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	2200      	movs	r2, #0
 8013170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	2200      	movs	r2, #0
 8013176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2200      	movs	r2, #0
 801317c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	689b      	ldr	r3, [r3, #8]
 8013182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013186:	d10f      	bne.n	80131a8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013196:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80131a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131ac:	4a29      	ldr	r2, [pc, #164]	; (8013254 <HAL_SPI_Transmit_DMA+0x160>)
 80131ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131b4:	4a28      	ldr	r2, [pc, #160]	; (8013258 <HAL_SPI_Transmit_DMA+0x164>)
 80131b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131bc:	4a27      	ldr	r2, [pc, #156]	; (801325c <HAL_SPI_Transmit_DMA+0x168>)
 80131be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131c4:	2200      	movs	r2, #0
 80131c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d0:	4619      	mov	r1, r3
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	330c      	adds	r3, #12
 80131d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80131de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80131e0:	f7f4 fa91 	bl	8007706 <HAL_DMA_Start_IT>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00c      	beq.n	8013204 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131ee:	f043 0210 	orr.w	r2, r3, #16
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80131f6:	2301      	movs	r3, #1
 80131f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2201      	movs	r2, #1
 80131fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013202:	e01e      	b.n	8013242 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801320e:	2b40      	cmp	r3, #64	; 0x40
 8013210:	d007      	beq.n	8013222 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013220:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	685a      	ldr	r2, [r3, #4]
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	f042 0220 	orr.w	r2, r2, #32
 8013230:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	685a      	ldr	r2, [r3, #4]
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	f042 0202 	orr.w	r2, r2, #2
 8013240:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2200      	movs	r2, #0
 8013246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801324a:	7dfb      	ldrb	r3, [r7, #23]
}
 801324c:	4618      	mov	r0, r3
 801324e:	3718      	adds	r7, #24
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	08013f79 	.word	0x08013f79
 8013258:	08013d99 	.word	0x08013d99
 801325c:	08013fcd 	.word	0x08013fcd

08013260 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	af00      	add	r7, sp, #0
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	4613      	mov	r3, r2
 801326c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801326e:	2300      	movs	r3, #0
 8013270:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d110      	bne.n	801329c <HAL_SPI_Receive_DMA+0x3c>
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013282:	d10b      	bne.n	801329c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	2204      	movs	r2, #4
 8013288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 801328c:	88fb      	ldrh	r3, [r7, #6]
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	68b9      	ldr	r1, [r7, #8]
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f000 f8ac 	bl	80133f0 <HAL_SPI_TransmitReceive_DMA>
 8013298:	4603      	mov	r3, r0
 801329a:	e09f      	b.n	80133dc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d101      	bne.n	80132aa <HAL_SPI_Receive_DMA+0x4a>
 80132a6:	2302      	movs	r3, #2
 80132a8:	e098      	b.n	80133dc <HAL_SPI_Receive_DMA+0x17c>
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2201      	movs	r2, #1
 80132ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d002      	beq.n	80132c4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80132be:	2302      	movs	r3, #2
 80132c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80132c2:	e086      	b.n	80133d2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d002      	beq.n	80132d0 <HAL_SPI_Receive_DMA+0x70>
 80132ca:	88fb      	ldrh	r3, [r7, #6]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d102      	bne.n	80132d6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80132d4:	e07d      	b.n	80133d2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2204      	movs	r2, #4
 80132da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2200      	movs	r2, #0
 80132e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	88fa      	ldrh	r2, [r7, #6]
 80132ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	88fa      	ldrh	r2, [r7, #6]
 80132f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2200      	movs	r2, #0
 80132fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	2200      	movs	r2, #0
 8013300:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	2200      	movs	r2, #0
 8013306:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2200      	movs	r2, #0
 801330c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013316:	d10f      	bne.n	8013338 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	681a      	ldr	r2, [r3, #0]
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013336:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801333c:	4a29      	ldr	r2, [pc, #164]	; (80133e4 <HAL_SPI_Receive_DMA+0x184>)
 801333e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013344:	4a28      	ldr	r2, [pc, #160]	; (80133e8 <HAL_SPI_Receive_DMA+0x188>)
 8013346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801334c:	4a27      	ldr	r2, [pc, #156]	; (80133ec <HAL_SPI_Receive_DMA+0x18c>)
 801334e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013354:	2200      	movs	r2, #0
 8013356:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	330c      	adds	r3, #12
 8013362:	4619      	mov	r1, r3
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013368:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801336e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013370:	f7f4 f9c9 	bl	8007706 <HAL_DMA_Start_IT>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d00c      	beq.n	8013394 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801337e:	f043 0210 	orr.w	r2, r3, #16
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013386:	2301      	movs	r3, #1
 8013388:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2201      	movs	r2, #1
 801338e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013392:	e01e      	b.n	80133d2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801339e:	2b40      	cmp	r3, #64	; 0x40
 80133a0:	d007      	beq.n	80133b2 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	681a      	ldr	r2, [r3, #0]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80133b0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	685a      	ldr	r2, [r3, #4]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	f042 0220 	orr.w	r2, r2, #32
 80133c0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f042 0201 	orr.w	r2, r2, #1
 80133d0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2200      	movs	r2, #0
 80133d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80133da:	7dfb      	ldrb	r3, [r7, #23]
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3718      	adds	r7, #24
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	08013f95 	.word	0x08013f95
 80133e8:	08013e41 	.word	0x08013e41
 80133ec:	08013fcd 	.word	0x08013fcd

080133f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b086      	sub	sp, #24
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	60f8      	str	r0, [r7, #12]
 80133f8:	60b9      	str	r1, [r7, #8]
 80133fa:	607a      	str	r2, [r7, #4]
 80133fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80133fe:	2300      	movs	r3, #0
 8013400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013408:	2b01      	cmp	r3, #1
 801340a:	d101      	bne.n	8013410 <HAL_SPI_TransmitReceive_DMA+0x20>
 801340c:	2302      	movs	r3, #2
 801340e:	e0e3      	b.n	80135d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2201      	movs	r2, #1
 8013414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801341e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013426:	7dbb      	ldrb	r3, [r7, #22]
 8013428:	2b01      	cmp	r3, #1
 801342a:	d00d      	beq.n	8013448 <HAL_SPI_TransmitReceive_DMA+0x58>
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013432:	d106      	bne.n	8013442 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d102      	bne.n	8013442 <HAL_SPI_TransmitReceive_DMA+0x52>
 801343c:	7dbb      	ldrb	r3, [r7, #22]
 801343e:	2b04      	cmp	r3, #4
 8013440:	d002      	beq.n	8013448 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013442:	2302      	movs	r3, #2
 8013444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013446:	e0c2      	b.n	80135ce <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d005      	beq.n	801345a <HAL_SPI_TransmitReceive_DMA+0x6a>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013454:	887b      	ldrh	r3, [r7, #2]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d102      	bne.n	8013460 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 801345a:	2301      	movs	r3, #1
 801345c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801345e:	e0b6      	b.n	80135ce <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b04      	cmp	r3, #4
 801346a:	d003      	beq.n	8013474 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2205      	movs	r2, #5
 8013470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2200      	movs	r2, #0
 8013478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	887a      	ldrh	r2, [r7, #2]
 8013484:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	887a      	ldrh	r2, [r7, #2]
 801348a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	887a      	ldrh	r2, [r7, #2]
 8013496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	887a      	ldrh	r2, [r7, #2]
 801349c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2200      	movs	r2, #0
 80134a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2200      	movs	r2, #0
 80134a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	2b04      	cmp	r3, #4
 80134b4:	d108      	bne.n	80134c8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134ba:	4a49      	ldr	r2, [pc, #292]	; (80135e0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80134bc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134c2:	4a48      	ldr	r2, [pc, #288]	; (80135e4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80134c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80134c6:	e007      	b.n	80134d8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134cc:	4a46      	ldr	r2, [pc, #280]	; (80135e8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80134ce:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134d4:	4a45      	ldr	r2, [pc, #276]	; (80135ec <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80134d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134dc:	4a44      	ldr	r2, [pc, #272]	; (80135f0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80134de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134e4:	2200      	movs	r2, #0
 80134e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	330c      	adds	r3, #12
 80134f2:	4619      	mov	r1, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134f8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80134fe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013500:	f7f4 f901 	bl	8007706 <HAL_DMA_Start_IT>
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d00c      	beq.n	8013524 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801350e:	f043 0210 	orr.w	r2, r3, #16
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013516:	2301      	movs	r3, #1
 8013518:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2201      	movs	r2, #1
 801351e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013522:	e054      	b.n	80135ce <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	685a      	ldr	r2, [r3, #4]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	f042 0201 	orr.w	r2, r2, #1
 8013532:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013538:	2200      	movs	r2, #0
 801353a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013540:	2200      	movs	r2, #0
 8013542:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013548:	2200      	movs	r2, #0
 801354a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013550:	2200      	movs	r2, #0
 8013552:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801355c:	4619      	mov	r1, r3
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	330c      	adds	r3, #12
 8013564:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801356a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801356c:	f7f4 f8cb 	bl	8007706 <HAL_DMA_Start_IT>
 8013570:	4603      	mov	r3, r0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00c      	beq.n	8013590 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801357a:	f043 0210 	orr.w	r2, r3, #16
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013582:	2301      	movs	r3, #1
 8013584:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2201      	movs	r2, #1
 801358a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801358e:	e01e      	b.n	80135ce <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801359a:	2b40      	cmp	r3, #64	; 0x40
 801359c:	d007      	beq.n	80135ae <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80135ac:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	685a      	ldr	r2, [r3, #4]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f042 0220 	orr.w	r2, r2, #32
 80135bc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	685a      	ldr	r2, [r3, #4]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	f042 0202 	orr.w	r2, r2, #2
 80135cc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2200      	movs	r2, #0
 80135d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80135d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3718      	adds	r7, #24
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	08013f95 	.word	0x08013f95
 80135e4:	08013e41 	.word	0x08013e41
 80135e8:	08013fb1 	.word	0x08013fb1
 80135ec:	08013ee9 	.word	0x08013ee9
 80135f0:	08013fcd 	.word	0x08013fcd

080135f4 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80135fc:	2300      	movs	r3, #0
 80135fe:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013600:	4b6e      	ldr	r3, [pc, #440]	; (80137bc <HAL_SPI_Abort+0x1c8>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	4a6e      	ldr	r2, [pc, #440]	; (80137c0 <HAL_SPI_Abort+0x1cc>)
 8013606:	fba2 2303 	umull	r2, r3, r2, r3
 801360a:	0a5b      	lsrs	r3, r3, #9
 801360c:	2264      	movs	r2, #100	; 0x64
 801360e:	fb02 f303 	mul.w	r3, r2, r3
 8013612:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	685a      	ldr	r2, [r3, #4]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	f022 0220 	bic.w	r2, r2, #32
 8013626:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013632:	2b80      	cmp	r3, #128	; 0x80
 8013634:	d117      	bne.n	8013666 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4a62      	ldr	r2, [pc, #392]	; (80137c4 <HAL_SPI_Abort+0x1d0>)
 801363a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d106      	bne.n	8013650 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801364e:	e008      	b.n	8013662 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	3b01      	subs	r3, #1
 8013654:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801365c:	b2db      	uxtb	r3, r3
 801365e:	2b07      	cmp	r3, #7
 8013660:	d1ec      	bne.n	801363c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013670:	2b40      	cmp	r3, #64	; 0x40
 8013672:	d117      	bne.n	80136a4 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	4a54      	ldr	r2, [pc, #336]	; (80137c8 <HAL_SPI_Abort+0x1d4>)
 8013678:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d106      	bne.n	801368e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801368c:	e008      	b.n	80136a0 <HAL_SPI_Abort+0xac>
      }
      count--;
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	3b01      	subs	r3, #1
 8013692:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801369a:	b2db      	uxtb	r3, r3
 801369c:	2b07      	cmp	r3, #7
 801369e:	d1ec      	bne.n	801367a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	f003 0302 	and.w	r3, r3, #2
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d12e      	bne.n	8013710 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d02a      	beq.n	8013710 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136be:	2200      	movs	r2, #0
 80136c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f4 f875 	bl	80077b6 <HAL_DMA_Abort>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d002      	beq.n	80136d8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2240      	movs	r2, #64	; 0x40
 80136d6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	685a      	ldr	r2, [r3, #4]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f022 0202 	bic.w	r2, r2, #2
 80136e6:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 80136fa:	e009      	b.n	8013710 <HAL_SPI_Abort+0x11c>
        }
        count--;
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	3b01      	subs	r3, #1
 8013700:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	689b      	ldr	r3, [r3, #8]
 8013708:	f003 0302 	and.w	r3, r3, #2
 801370c:	2b00      	cmp	r3, #0
 801370e:	d0eb      	beq.n	80136e8 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	f003 0301 	and.w	r3, r3, #1
 801371a:	2b01      	cmp	r3, #1
 801371c:	d122      	bne.n	8013764 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013722:	2b00      	cmp	r3, #0
 8013724:	d01e      	beq.n	8013764 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801372a:	2200      	movs	r2, #0
 801372c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013732:	4618      	mov	r0, r3
 8013734:	f7f4 f83f 	bl	80077b6 <HAL_DMA_Abort>
 8013738:	4603      	mov	r3, r0
 801373a:	2b00      	cmp	r3, #0
 801373c:	d002      	beq.n	8013744 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2240      	movs	r2, #64	; 0x40
 8013742:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	681a      	ldr	r2, [r3, #0]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013752:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	685a      	ldr	r2, [r3, #4]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f022 0201 	bic.w	r2, r2, #1
 8013762:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2200      	movs	r2, #0
 8013768:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2200      	movs	r2, #0
 801376e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013774:	2b40      	cmp	r3, #64	; 0x40
 8013776:	d102      	bne.n	801377e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8013778:	2301      	movs	r3, #1
 801377a:	77fb      	strb	r3, [r7, #31]
 801377c:	e002      	b.n	8013784 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013784:	2300      	movs	r3, #0
 8013786:	60fb      	str	r3, [r7, #12]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	68db      	ldr	r3, [r3, #12]
 801378e:	60fb      	str	r3, [r7, #12]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	689b      	ldr	r3, [r3, #8]
 8013796:	60fb      	str	r3, [r7, #12]
 8013798:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 801379a:	2300      	movs	r3, #0
 801379c:	613b      	str	r3, [r7, #16]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	613b      	str	r3, [r7, #16]
 80137a6:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2201      	movs	r2, #1
 80137ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 80137b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3720      	adds	r7, #32
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	20000058 	.word	0x20000058
 80137c0:	057619f1 	.word	0x057619f1
 80137c4:	08014979 	.word	0x08014979
 80137c8:	080148e9 	.word	0x080148e9

080137cc <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b088      	sub	sp, #32
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80137d4:	2300      	movs	r3, #0
 80137d6:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 80137d8:	2301      	movs	r3, #1
 80137da:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80137dc:	4b72      	ldr	r3, [pc, #456]	; (80139a8 <HAL_SPI_Abort_IT+0x1dc>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	4a72      	ldr	r2, [pc, #456]	; (80139ac <HAL_SPI_Abort_IT+0x1e0>)
 80137e2:	fba2 2303 	umull	r2, r3, r2, r3
 80137e6:	0a5b      	lsrs	r3, r3, #9
 80137e8:	2264      	movs	r2, #100	; 0x64
 80137ea:	fb02 f303 	mul.w	r3, r2, r3
 80137ee:	613b      	str	r3, [r7, #16]
  count = resetcount;
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	685a      	ldr	r2, [r3, #4]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f022 0220 	bic.w	r2, r2, #32
 8013802:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	685b      	ldr	r3, [r3, #4]
 801380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801380e:	2b80      	cmp	r3, #128	; 0x80
 8013810:	d117      	bne.n	8013842 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	4a66      	ldr	r2, [pc, #408]	; (80139b0 <HAL_SPI_Abort_IT+0x1e4>)
 8013816:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d106      	bne.n	801382c <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801382a:	e008      	b.n	801383e <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	3b01      	subs	r3, #1
 8013830:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013838:	b2db      	uxtb	r3, r3
 801383a:	2b07      	cmp	r3, #7
 801383c:	d1ec      	bne.n	8013818 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	685b      	ldr	r3, [r3, #4]
 8013848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801384c:	2b40      	cmp	r3, #64	; 0x40
 801384e:	d117      	bne.n	8013880 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	4a58      	ldr	r2, [pc, #352]	; (80139b4 <HAL_SPI_Abort_IT+0x1e8>)
 8013854:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d106      	bne.n	801386a <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013868:	e008      	b.n	801387c <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	3b01      	subs	r3, #1
 801386e:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013876:	b2db      	uxtb	r3, r3
 8013878:	2b07      	cmp	r3, #7
 801387a:	d1ec      	bne.n	8013856 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00f      	beq.n	80138a8 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	f003 0302 	and.w	r3, r3, #2
 8013892:	2b02      	cmp	r3, #2
 8013894:	d104      	bne.n	80138a0 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801389a:	4a47      	ldr	r2, [pc, #284]	; (80139b8 <HAL_SPI_Abort_IT+0x1ec>)
 801389c:	651a      	str	r2, [r3, #80]	; 0x50
 801389e:	e003      	b.n	80138a8 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138a4:	2200      	movs	r2, #0
 80138a6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d00f      	beq.n	80138d0 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	f003 0301 	and.w	r3, r3, #1
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d104      	bne.n	80138c8 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138c2:	4a3e      	ldr	r2, [pc, #248]	; (80139bc <HAL_SPI_Abort_IT+0x1f0>)
 80138c4:	651a      	str	r2, [r3, #80]	; 0x50
 80138c6:	e003      	b.n	80138d0 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138cc:	2200      	movs	r2, #0
 80138ce:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	f003 0302 	and.w	r3, r3, #2
 80138da:	2b02      	cmp	r3, #2
 80138dc:	d115      	bne.n	801390a <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d011      	beq.n	801390a <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f3 ffd3 	bl	8007896 <HAL_DMA_Abort_IT>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d007      	beq.n	8013906 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138fa:	2200      	movs	r2, #0
 80138fc:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2240      	movs	r2, #64	; 0x40
 8013902:	655a      	str	r2, [r3, #84]	; 0x54
 8013904:	e001      	b.n	801390a <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8013906:	2300      	movs	r3, #0
 8013908:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	f003 0301 	and.w	r3, r3, #1
 8013914:	2b01      	cmp	r3, #1
 8013916:	d115      	bne.n	8013944 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d011      	beq.n	8013944 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013924:	4618      	mov	r0, r3
 8013926:	f7f3 ffb6 	bl	8007896 <HAL_DMA_Abort_IT>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d007      	beq.n	8013940 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013934:	2200      	movs	r2, #0
 8013936:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2240      	movs	r2, #64	; 0x40
 801393c:	655a      	str	r2, [r3, #84]	; 0x54
 801393e:	e001      	b.n	8013944 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013940:	2300      	movs	r3, #0
 8013942:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	2b01      	cmp	r3, #1
 8013948:	d128      	bne.n	801399c <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2200      	movs	r2, #0
 801394e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2200      	movs	r2, #0
 8013954:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395a:	2b40      	cmp	r3, #64	; 0x40
 801395c:	d102      	bne.n	8013964 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 801395e:	2301      	movs	r3, #1
 8013960:	77fb      	strb	r3, [r7, #31]
 8013962:	e002      	b.n	801396a <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2200      	movs	r2, #0
 8013968:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801396a:	2300      	movs	r3, #0
 801396c:	60bb      	str	r3, [r7, #8]
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	60bb      	str	r3, [r7, #8]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	689b      	ldr	r3, [r3, #8]
 801397c:	60bb      	str	r3, [r7, #8]
 801397e:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013980:	2300      	movs	r3, #0
 8013982:	60fb      	str	r3, [r7, #12]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	60fb      	str	r3, [r7, #12]
 801398c:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2201      	movs	r2, #1
 8013992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 f9da 	bl	8013d50 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 801399c:	7ffb      	ldrb	r3, [r7, #31]
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3720      	adds	r7, #32
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20000058 	.word	0x20000058
 80139ac:	057619f1 	.word	0x057619f1
 80139b0:	08014979 	.word	0x08014979
 80139b4:	080148e9 	.word	0x080148e9
 80139b8:	08014035 	.word	0x08014035
 80139bc:	08014109 	.word	0x08014109

080139c0 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d101      	bne.n	80139d6 <HAL_SPI_DMAPause+0x16>
 80139d2:	2302      	movs	r3, #2
 80139d4:	e010      	b.n	80139f8 <HAL_SPI_DMAPause+0x38>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2201      	movs	r2, #1
 80139da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	685a      	ldr	r2, [r3, #4]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f022 0203 	bic.w	r2, r2, #3
 80139ec:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80139f6:	2300      	movs	r3, #0
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013a12:	2b01      	cmp	r3, #1
 8013a14:	d101      	bne.n	8013a1a <HAL_SPI_DMAResume+0x16>
 8013a16:	2302      	movs	r3, #2
 8013a18:	e010      	b.n	8013a3c <HAL_SPI_DMAResume+0x38>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	685a      	ldr	r2, [r3, #4]
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	f042 0203 	orr.w	r2, r2, #3
 8013a30:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013a3a:	2300      	movs	r3, #0
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	370c      	adds	r7, #12
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013a50:	2300      	movs	r3, #0
 8013a52:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00f      	beq.n	8013a7c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f3 fea8 	bl	80077b6 <HAL_DMA_Abort>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d007      	beq.n	8013a7c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a70:	f043 0210 	orr.w	r2, r3, #16
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d00f      	beq.n	8013aa4 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7f3 fe94 	bl	80077b6 <HAL_DMA_Abort>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d007      	beq.n	8013aa4 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a98:	f043 0210 	orr.w	r2, r3, #16
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	685a      	ldr	r2, [r3, #4]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	f022 0203 	bic.w	r2, r2, #3
 8013ab2:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2201      	movs	r2, #1
 8013ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8013abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}

08013ac6 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8013ac6:	b580      	push	{r7, lr}
 8013ac8:	b088      	sub	sp, #32
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	099b      	lsrs	r3, r3, #6
 8013ae2:	f003 0301 	and.w	r3, r3, #1
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d10f      	bne.n	8013b0a <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013aea:	69bb      	ldr	r3, [r7, #24]
 8013aec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d00a      	beq.n	8013b0a <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	099b      	lsrs	r3, r3, #6
 8013af8:	f003 0301 	and.w	r3, r3, #1
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d004      	beq.n	8013b0a <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	4798      	blx	r3
    return;
 8013b08:	e0d7      	b.n	8013cba <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	085b      	lsrs	r3, r3, #1
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d00a      	beq.n	8013b2c <HAL_SPI_IRQHandler+0x66>
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	09db      	lsrs	r3, r3, #7
 8013b1a:	f003 0301 	and.w	r3, r3, #1
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d004      	beq.n	8013b2c <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	4798      	blx	r3
    return;
 8013b2a:	e0c6      	b.n	8013cba <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	095b      	lsrs	r3, r3, #5
 8013b30:	f003 0301 	and.w	r3, r3, #1
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d10c      	bne.n	8013b52 <HAL_SPI_IRQHandler+0x8c>
 8013b38:	69bb      	ldr	r3, [r7, #24]
 8013b3a:	099b      	lsrs	r3, r3, #6
 8013b3c:	f003 0301 	and.w	r3, r3, #1
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d106      	bne.n	8013b52 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8013b44:	69bb      	ldr	r3, [r7, #24]
 8013b46:	0a1b      	lsrs	r3, r3, #8
 8013b48:	f003 0301 	and.w	r3, r3, #1
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f000 80b4 	beq.w	8013cba <HAL_SPI_IRQHandler+0x1f4>
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	095b      	lsrs	r3, r3, #5
 8013b56:	f003 0301 	and.w	r3, r3, #1
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f000 80ad 	beq.w	8013cba <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	099b      	lsrs	r3, r3, #6
 8013b64:	f003 0301 	and.w	r3, r3, #1
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d023      	beq.n	8013bb4 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	2b03      	cmp	r3, #3
 8013b76:	d011      	beq.n	8013b9c <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b7c:	f043 0204 	orr.w	r2, r3, #4
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b84:	2300      	movs	r3, #0
 8013b86:	60bb      	str	r3, [r7, #8]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	68db      	ldr	r3, [r3, #12]
 8013b8e:	60bb      	str	r3, [r7, #8]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	689b      	ldr	r3, [r3, #8]
 8013b96:	60bb      	str	r3, [r7, #8]
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	e00b      	b.n	8013bb4 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	60fb      	str	r3, [r7, #12]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	68db      	ldr	r3, [r3, #12]
 8013ba6:	60fb      	str	r3, [r7, #12]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	60fb      	str	r3, [r7, #12]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
        return;
 8013bb2:	e082      	b.n	8013cba <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8013bb4:	69bb      	ldr	r3, [r7, #24]
 8013bb6:	095b      	lsrs	r3, r3, #5
 8013bb8:	f003 0301 	and.w	r3, r3, #1
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d014      	beq.n	8013bea <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bc4:	f043 0201 	orr.w	r2, r3, #1
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013bcc:	2300      	movs	r3, #0
 8013bce:	613b      	str	r3, [r7, #16]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	689b      	ldr	r3, [r3, #8]
 8013bd6:	613b      	str	r3, [r7, #16]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013be6:	601a      	str	r2, [r3, #0]
 8013be8:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	0a1b      	lsrs	r3, r3, #8
 8013bee:	f003 0301 	and.w	r3, r3, #1
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00c      	beq.n	8013c10 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bfa:	f043 0208 	orr.w	r2, r3, #8
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013c02:	2300      	movs	r3, #0
 8013c04:	617b      	str	r3, [r7, #20]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	689b      	ldr	r3, [r3, #8]
 8013c0c:	617b      	str	r3, [r7, #20]
 8013c0e:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d04f      	beq.n	8013cb8 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	685a      	ldr	r2, [r3, #4]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013c26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2201      	movs	r2, #1
 8013c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	f003 0302 	and.w	r3, r3, #2
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d104      	bne.n	8013c44 <HAL_SPI_IRQHandler+0x17e>
 8013c3a:	69fb      	ldr	r3, [r7, #28]
 8013c3c:	f003 0301 	and.w	r3, r3, #1
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d034      	beq.n	8013cae <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	f022 0203 	bic.w	r2, r2, #3
 8013c52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d011      	beq.n	8013c80 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c60:	4a17      	ldr	r2, [pc, #92]	; (8013cc0 <HAL_SPI_IRQHandler+0x1fa>)
 8013c62:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7f3 fe14 	bl	8007896 <HAL_DMA_Abort_IT>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d005      	beq.n	8013c80 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d016      	beq.n	8013cb6 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c8c:	4a0c      	ldr	r2, [pc, #48]	; (8013cc0 <HAL_SPI_IRQHandler+0x1fa>)
 8013c8e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7f3 fdfe 	bl	8007896 <HAL_DMA_Abort_IT>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d00a      	beq.n	8013cb6 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ca4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8013cac:	e003      	b.n	8013cb6 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 f844 	bl	8013d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013cb4:	e000      	b.n	8013cb8 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8013cb6:	bf00      	nop
    return;
 8013cb8:	bf00      	nop
  }
}
 8013cba:	3720      	adds	r7, #32
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	0801400d 	.word	0x0801400d

08013cc4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8013ccc:	bf00      	nop
 8013cce:	370c      	adds	r7, #12
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b083      	sub	sp, #12
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013ce0:	bf00      	nop
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8013cf4:	bf00      	nop
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr

08013d00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8013d08:	bf00      	nop
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr

08013d14 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013d14:	b480      	push	{r7}
 8013d16:	b083      	sub	sp, #12
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8013d1c:	bf00      	nop
 8013d1e:	370c      	adds	r7, #12
 8013d20:	46bd      	mov	sp, r7
 8013d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d26:	4770      	bx	lr

08013d28 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8013d30:	bf00      	nop
 8013d32:	370c      	adds	r7, #12
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr

08013d3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b083      	sub	sp, #12
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013d44:	bf00      	nop
 8013d46:	370c      	adds	r7, #12
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013d50:	b480      	push	{r7}
 8013d52:	b083      	sub	sp, #12
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8013d58:	bf00      	nop
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8013d64:	b480      	push	{r7}
 8013d66:	b083      	sub	sp, #12
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d72:	b2db      	uxtb	r3, r3
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	370c      	adds	r7, #12
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7e:	4770      	bx	lr

08013d80 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b086      	sub	sp, #24
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013da4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013da6:	f7f2 fa45 	bl	8006234 <HAL_GetTick>
 8013daa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013dba:	d03b      	beq.n	8013e34 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	685a      	ldr	r2, [r3, #4]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f022 0220 	bic.w	r2, r2, #32
 8013dca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	685a      	ldr	r2, [r3, #4]
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	f022 0202 	bic.w	r2, r2, #2
 8013dda:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013ddc:	693a      	ldr	r2, [r7, #16]
 8013dde:	2164      	movs	r1, #100	; 0x64
 8013de0:	6978      	ldr	r0, [r7, #20]
 8013de2:	f000 fc2c 	bl	801463e <SPI_EndRxTxTransaction>
 8013de6:	4603      	mov	r3, r0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d005      	beq.n	8013df8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013df0:	f043 0220 	orr.w	r2, r3, #32
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d10a      	bne.n	8013e16 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013e00:	2300      	movs	r3, #0
 8013e02:	60fb      	str	r3, [r7, #12]
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	689b      	ldr	r3, [r3, #8]
 8013e12:	60fb      	str	r3, [r7, #12]
 8013e14:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d003      	beq.n	8013e34 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013e2c:	6978      	ldr	r0, [r7, #20]
 8013e2e:	f7ff ff85 	bl	8013d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013e32:	e002      	b.n	8013e3a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8013e34:	6978      	ldr	r0, [r7, #20]
 8013e36:	f7ff ff45 	bl	8013cc4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013e3a:	3718      	adds	r7, #24
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e4c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013e4e:	f7f2 f9f1 	bl	8006234 <HAL_GetTick>
 8013e52:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e62:	d03b      	beq.n	8013edc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	685a      	ldr	r2, [r3, #4]
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f022 0220 	bic.w	r2, r2, #32
 8013e72:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	689b      	ldr	r3, [r3, #8]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d10d      	bne.n	8013e98 <SPI_DMAReceiveCplt+0x58>
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e84:	d108      	bne.n	8013e98 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	685a      	ldr	r2, [r3, #4]
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f022 0203 	bic.w	r2, r2, #3
 8013e94:	605a      	str	r2, [r3, #4]
 8013e96:	e007      	b.n	8013ea8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f022 0201 	bic.w	r2, r2, #1
 8013ea6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013ea8:	68ba      	ldr	r2, [r7, #8]
 8013eaa:	2164      	movs	r1, #100	; 0x64
 8013eac:	68f8      	ldr	r0, [r7, #12]
 8013eae:	f000 fb61 	bl	8014574 <SPI_EndRxTransaction>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d002      	beq.n	8013ebe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2220      	movs	r2, #32
 8013ebc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d003      	beq.n	8013edc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f7ff ff31 	bl	8013d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013eda:	e002      	b.n	8013ee2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8013edc:	68f8      	ldr	r0, [r7, #12]
 8013ede:	f7ff fefb 	bl	8013cd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ef4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013ef6:	f7f2 f99d 	bl	8006234 <HAL_GetTick>
 8013efa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f0a:	d02f      	beq.n	8013f6c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	685a      	ldr	r2, [r3, #4]
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	f022 0220 	bic.w	r2, r2, #32
 8013f1a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013f1c:	68ba      	ldr	r2, [r7, #8]
 8013f1e:	2164      	movs	r1, #100	; 0x64
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	f000 fb8c 	bl	801463e <SPI_EndRxTxTransaction>
 8013f26:	4603      	mov	r3, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d005      	beq.n	8013f38 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f30:	f043 0220 	orr.w	r2, r3, #32
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f022 0203 	bic.w	r2, r2, #3
 8013f46:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2200      	movs	r2, #0
 8013f52:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2201      	movs	r2, #1
 8013f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d003      	beq.n	8013f6c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f7ff fee9 	bl	8013d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013f6a:	e002      	b.n	8013f72 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f7ff febd 	bl	8013cec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013f72:	3710      	adds	r7, #16
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f84:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f7ff feba 	bl	8013d00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013f8c:	bf00      	nop
 8013f8e:	3710      	adds	r7, #16
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fa0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8013fa2:	68f8      	ldr	r0, [r7, #12]
 8013fa4:	f7ff feb6 	bl	8013d14 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013fa8:	bf00      	nop
 8013faa:	3710      	adds	r7, #16
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fbc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8013fbe:	68f8      	ldr	r0, [r7, #12]
 8013fc0:	f7ff feb2 	bl	8013d28 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013fc4:	bf00      	nop
 8013fc6:	3710      	adds	r7, #16
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}

08013fcc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b084      	sub	sp, #16
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fd8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	685a      	ldr	r2, [r3, #4]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f022 0203 	bic.w	r2, r2, #3
 8013fe8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fee:	f043 0210 	orr.w	r2, r3, #16
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f7ff fe9c 	bl	8013d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014004:	bf00      	nop
 8014006:	3710      	adds	r7, #16
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}

0801400c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2200      	movs	r2, #0
 801401e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	2200      	movs	r2, #0
 8014024:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014026:	68f8      	ldr	r0, [r7, #12]
 8014028:	f7ff fe88 	bl	8013d3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801402c:	bf00      	nop
 801402e:	3710      	adds	r7, #16
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014040:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014046:	2200      	movs	r2, #0
 8014048:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801404a:	4b2d      	ldr	r3, [pc, #180]	; (8014100 <SPI_DMATxAbortCallback+0xcc>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	4a2d      	ldr	r2, [pc, #180]	; (8014104 <SPI_DMATxAbortCallback+0xd0>)
 8014050:	fba2 2303 	umull	r2, r3, r2, r3
 8014054:	0a5b      	lsrs	r3, r3, #9
 8014056:	2264      	movs	r2, #100	; 0x64
 8014058:	fb02 f303 	mul.w	r3, r2, r3
 801405c:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	685a      	ldr	r2, [r3, #4]
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f022 0202 	bic.w	r2, r2, #2
 801406c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d106      	bne.n	8014082 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014078:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014080:	e009      	b.n	8014096 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	3b01      	subs	r3, #1
 8014086:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	f003 0302 	and.w	r3, r3, #2
 8014092:	2b00      	cmp	r3, #0
 8014094:	d0eb      	beq.n	801406e <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801409a:	2b00      	cmp	r3, #0
 801409c:	d004      	beq.n	80140a8 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d126      	bne.n	80140f6 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	2200      	movs	r2, #0
 80140ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	2200      	movs	r2, #0
 80140b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140b8:	2b40      	cmp	r3, #64	; 0x40
 80140ba:	d002      	beq.n	80140c2 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	2200      	movs	r2, #0
 80140c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80140c2:	2300      	movs	r3, #0
 80140c4:	60bb      	str	r3, [r7, #8]
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	60bb      	str	r3, [r7, #8]
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	60bb      	str	r3, [r7, #8]
 80140d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80140d8:	2300      	movs	r3, #0
 80140da:	60fb      	str	r3, [r7, #12]
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	689b      	ldr	r3, [r3, #8]
 80140e2:	60fb      	str	r3, [r7, #12]
 80140e4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	2201      	movs	r2, #1
 80140ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80140ee:	6978      	ldr	r0, [r7, #20]
 80140f0:	f7ff fe2e 	bl	8013d50 <HAL_SPI_AbortCpltCallback>
 80140f4:	e000      	b.n	80140f8 <SPI_DMATxAbortCallback+0xc4>
      return;
 80140f6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80140f8:	3718      	adds	r7, #24
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20000058 	.word	0x20000058
 8014104:	057619f1 	.word	0x057619f1

08014108 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b086      	sub	sp, #24
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014114:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014124:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801412a:	2200      	movs	r2, #0
 801412c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	685a      	ldr	r2, [r3, #4]
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	f022 0201 	bic.w	r2, r2, #1
 801413c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 801413e:	f7f2 f879 	bl	8006234 <HAL_GetTick>
 8014142:	4603      	mov	r3, r0
 8014144:	461a      	mov	r2, r3
 8014146:	2164      	movs	r1, #100	; 0x64
 8014148:	6978      	ldr	r0, [r7, #20]
 801414a:	f000 fa78 	bl	801463e <SPI_EndRxTxTransaction>
 801414e:	4603      	mov	r3, r0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d005      	beq.n	8014160 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014164:	2b00      	cmp	r3, #0
 8014166:	d004      	beq.n	8014172 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801416e:	2b00      	cmp	r3, #0
 8014170:	d126      	bne.n	80141c0 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	2200      	movs	r2, #0
 8014176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	2200      	movs	r2, #0
 801417c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014182:	2b40      	cmp	r3, #64	; 0x40
 8014184:	d002      	beq.n	801418c <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	2200      	movs	r2, #0
 801418a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801418c:	2300      	movs	r3, #0
 801418e:	60fb      	str	r3, [r7, #12]
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	60fb      	str	r3, [r7, #12]
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	689b      	ldr	r3, [r3, #8]
 801419e:	60fb      	str	r3, [r7, #12]
 80141a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80141a2:	2300      	movs	r3, #0
 80141a4:	613b      	str	r3, [r7, #16]
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	613b      	str	r3, [r7, #16]
 80141ae:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2201      	movs	r2, #1
 80141b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80141b8:	6978      	ldr	r0, [r7, #20]
 80141ba:	f7ff fdc9 	bl	8013d50 <HAL_SPI_AbortCpltCallback>
 80141be:	e000      	b.n	80141c2 <SPI_DMARxAbortCallback+0xba>
      return;
 80141c0:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80141c2:	3718      	adds	r7, #24
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f103 020c 	add.w	r2, r3, #12
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141dc:	7812      	ldrb	r2, [r2, #0]
 80141de:	b2d2      	uxtb	r2, r2
 80141e0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141e6:	1c5a      	adds	r2, r3, #1
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	3b01      	subs	r3, #1
 80141f4:	b29a      	uxth	r2, r3
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80141fe:	b29b      	uxth	r3, r3
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10f      	bne.n	8014224 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	685a      	ldr	r2, [r3, #4]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014212:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014218:	b29b      	uxth	r3, r3
 801421a:	2b00      	cmp	r3, #0
 801421c:	d102      	bne.n	8014224 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fa4e 	bl	80146c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014224:	bf00      	nop
 8014226:	3708      	adds	r7, #8
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	330c      	adds	r3, #12
 801423e:	7812      	ldrb	r2, [r2, #0]
 8014240:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014246:	1c5a      	adds	r2, r3, #1
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014250:	b29b      	uxth	r3, r3
 8014252:	3b01      	subs	r3, #1
 8014254:	b29a      	uxth	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801425e:	b29b      	uxth	r3, r3
 8014260:	2b00      	cmp	r3, #0
 8014262:	d10f      	bne.n	8014284 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	685a      	ldr	r2, [r3, #4]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014272:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014278:	b29b      	uxth	r3, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	d102      	bne.n	8014284 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 fa1e 	bl	80146c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014284:	bf00      	nop
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	68da      	ldr	r2, [r3, #12]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801429e:	b292      	uxth	r2, r2
 80142a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142a6:	1c9a      	adds	r2, r3, #2
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	3b01      	subs	r3, #1
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142be:	b29b      	uxth	r3, r3
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d10f      	bne.n	80142e4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	685a      	ldr	r2, [r3, #4]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80142d2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142d8:	b29b      	uxth	r3, r3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d102      	bne.n	80142e4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 f9ee 	bl	80146c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80142e4:	bf00      	nop
 80142e6:	3708      	adds	r7, #8
 80142e8:	46bd      	mov	sp, r7
 80142ea:	bd80      	pop	{r7, pc}

080142ec <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f8:	881a      	ldrh	r2, [r3, #0]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014304:	1c9a      	adds	r2, r3, #2
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801430e:	b29b      	uxth	r3, r3
 8014310:	3b01      	subs	r3, #1
 8014312:	b29a      	uxth	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801431c:	b29b      	uxth	r3, r3
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10f      	bne.n	8014342 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	685a      	ldr	r2, [r3, #4]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014330:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014336:	b29b      	uxth	r3, r3
 8014338:	2b00      	cmp	r3, #0
 801433a:	d102      	bne.n	8014342 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 f9bf 	bl	80146c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014342:	bf00      	nop
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b082      	sub	sp, #8
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	f103 020c 	add.w	r2, r3, #12
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801435e:	7812      	ldrb	r2, [r2, #0]
 8014360:	b2d2      	uxtb	r2, r2
 8014362:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014368:	1c5a      	adds	r2, r3, #1
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014372:	b29b      	uxth	r3, r3
 8014374:	3b01      	subs	r3, #1
 8014376:	b29a      	uxth	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014380:	b29b      	uxth	r3, r3
 8014382:	2b00      	cmp	r3, #0
 8014384:	d102      	bne.n	801438c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f000 fa0e 	bl	80147a8 <SPI_CloseRx_ISR>
  }
}
 801438c:	bf00      	nop
 801438e:	3708      	adds	r7, #8
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	68da      	ldr	r2, [r3, #12]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143a6:	b292      	uxth	r2, r2
 80143a8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143ae:	1c9a      	adds	r2, r3, #2
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	3b01      	subs	r3, #1
 80143bc:	b29a      	uxth	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d102      	bne.n	80143d2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 f9eb 	bl	80147a8 <SPI_CloseRx_ISR>
  }
}
 80143d2:	bf00      	nop
 80143d4:	3708      	adds	r7, #8
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80143da:	b580      	push	{r7, lr}
 80143dc:	b082      	sub	sp, #8
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	330c      	adds	r3, #12
 80143ec:	7812      	ldrb	r2, [r2, #0]
 80143ee:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143f4:	1c5a      	adds	r2, r3, #1
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143fe:	b29b      	uxth	r3, r3
 8014400:	3b01      	subs	r3, #1
 8014402:	b29a      	uxth	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801440c:	b29b      	uxth	r3, r3
 801440e:	2b00      	cmp	r3, #0
 8014410:	d102      	bne.n	8014418 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f000 fa07 	bl	8014826 <SPI_CloseTx_ISR>
  }
}
 8014418:	bf00      	nop
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801442c:	881a      	ldrh	r2, [r3, #0]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014438:	1c9a      	adds	r2, r3, #2
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014442:	b29b      	uxth	r3, r3
 8014444:	3b01      	subs	r3, #1
 8014446:	b29a      	uxth	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014450:	b29b      	uxth	r3, r3
 8014452:	2b00      	cmp	r3, #0
 8014454:	d102      	bne.n	801445c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	f000 f9e5 	bl	8014826 <SPI_CloseTx_ISR>
  }
}
 801445c:	bf00      	nop
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b088      	sub	sp, #32
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	603b      	str	r3, [r7, #0]
 8014470:	4613      	mov	r3, r2
 8014472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014474:	f7f1 fede 	bl	8006234 <HAL_GetTick>
 8014478:	4602      	mov	r2, r0
 801447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447c:	1a9b      	subs	r3, r3, r2
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	4413      	add	r3, r2
 8014482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014484:	f7f1 fed6 	bl	8006234 <HAL_GetTick>
 8014488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801448a:	4b39      	ldr	r3, [pc, #228]	; (8014570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	015b      	lsls	r3, r3, #5
 8014490:	0d1b      	lsrs	r3, r3, #20
 8014492:	69fa      	ldr	r2, [r7, #28]
 8014494:	fb02 f303 	mul.w	r3, r2, r3
 8014498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801449a:	e054      	b.n	8014546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a2:	d050      	beq.n	8014546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80144a4:	f7f1 fec6 	bl	8006234 <HAL_GetTick>
 80144a8:	4602      	mov	r2, r0
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	1ad3      	subs	r3, r2, r3
 80144ae:	69fa      	ldr	r2, [r7, #28]
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d902      	bls.n	80144ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d13d      	bne.n	8014536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	685a      	ldr	r2, [r3, #4]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80144c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80144d2:	d111      	bne.n	80144f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	689b      	ldr	r3, [r3, #8]
 80144d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144dc:	d004      	beq.n	80144e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	689b      	ldr	r3, [r3, #8]
 80144e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80144e6:	d107      	bne.n	80144f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80144f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014500:	d10f      	bne.n	8014522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014510:	601a      	str	r2, [r3, #0]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2201      	movs	r2, #1
 8014526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2200      	movs	r2, #0
 801452e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014532:	2303      	movs	r3, #3
 8014534:	e017      	b.n	8014566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d101      	bne.n	8014540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801453c:	2300      	movs	r3, #0
 801453e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	3b01      	subs	r3, #1
 8014544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	689a      	ldr	r2, [r3, #8]
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	4013      	ands	r3, r2
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	429a      	cmp	r2, r3
 8014554:	bf0c      	ite	eq
 8014556:	2301      	moveq	r3, #1
 8014558:	2300      	movne	r3, #0
 801455a:	b2db      	uxtb	r3, r3
 801455c:	461a      	mov	r2, r3
 801455e:	79fb      	ldrb	r3, [r7, #7]
 8014560:	429a      	cmp	r2, r3
 8014562:	d19b      	bne.n	801449c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014564:	2300      	movs	r3, #0
}
 8014566:	4618      	mov	r0, r3
 8014568:	3720      	adds	r7, #32
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	20000058 	.word	0x20000058

08014574 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af02      	add	r7, sp, #8
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014588:	d111      	bne.n	80145ae <SPI_EndRxTransaction+0x3a>
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	689b      	ldr	r3, [r3, #8]
 801458e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014592:	d004      	beq.n	801459e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	689b      	ldr	r3, [r3, #8]
 8014598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801459c:	d107      	bne.n	80145ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	681a      	ldr	r2, [r3, #0]
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80145ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80145b6:	d12a      	bne.n	801460e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80145c0:	d012      	beq.n	80145e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	2200      	movs	r2, #0
 80145ca:	2180      	movs	r1, #128	; 0x80
 80145cc:	68f8      	ldr	r0, [r7, #12]
 80145ce:	f7ff ff49 	bl	8014464 <SPI_WaitFlagStateUntilTimeout>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d02d      	beq.n	8014634 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145dc:	f043 0220 	orr.w	r2, r3, #32
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80145e4:	2303      	movs	r3, #3
 80145e6:	e026      	b.n	8014636 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	9300      	str	r3, [sp, #0]
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	2200      	movs	r2, #0
 80145f0:	2101      	movs	r1, #1
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f7ff ff36 	bl	8014464 <SPI_WaitFlagStateUntilTimeout>
 80145f8:	4603      	mov	r3, r0
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d01a      	beq.n	8014634 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014602:	f043 0220 	orr.w	r2, r3, #32
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801460a:	2303      	movs	r3, #3
 801460c:	e013      	b.n	8014636 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	9300      	str	r3, [sp, #0]
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	2200      	movs	r2, #0
 8014616:	2101      	movs	r1, #1
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	f7ff ff23 	bl	8014464 <SPI_WaitFlagStateUntilTimeout>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d007      	beq.n	8014634 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014628:	f043 0220 	orr.w	r2, r3, #32
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014630:	2303      	movs	r3, #3
 8014632:	e000      	b.n	8014636 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014634:	2300      	movs	r3, #0
}
 8014636:	4618      	mov	r0, r3
 8014638:	3710      	adds	r7, #16
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}

0801463e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801463e:	b580      	push	{r7, lr}
 8014640:	b088      	sub	sp, #32
 8014642:	af02      	add	r7, sp, #8
 8014644:	60f8      	str	r0, [r7, #12]
 8014646:	60b9      	str	r1, [r7, #8]
 8014648:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801464a:	4b1b      	ldr	r3, [pc, #108]	; (80146b8 <SPI_EndRxTxTransaction+0x7a>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4a1b      	ldr	r2, [pc, #108]	; (80146bc <SPI_EndRxTxTransaction+0x7e>)
 8014650:	fba2 2303 	umull	r2, r3, r2, r3
 8014654:	0d5b      	lsrs	r3, r3, #21
 8014656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801465a:	fb02 f303 	mul.w	r3, r2, r3
 801465e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014668:	d112      	bne.n	8014690 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	9300      	str	r3, [sp, #0]
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	2200      	movs	r2, #0
 8014672:	2180      	movs	r1, #128	; 0x80
 8014674:	68f8      	ldr	r0, [r7, #12]
 8014676:	f7ff fef5 	bl	8014464 <SPI_WaitFlagStateUntilTimeout>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d016      	beq.n	80146ae <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014684:	f043 0220 	orr.w	r2, r3, #32
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801468c:	2303      	movs	r3, #3
 801468e:	e00f      	b.n	80146b0 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	3b01      	subs	r3, #1
 801469a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	689b      	ldr	r3, [r3, #8]
 80146a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146a6:	2b80      	cmp	r3, #128	; 0x80
 80146a8:	d0f2      	beq.n	8014690 <SPI_EndRxTxTransaction+0x52>
 80146aa:	e000      	b.n	80146ae <SPI_EndRxTxTransaction+0x70>
        break;
 80146ac:	bf00      	nop
  }

  return HAL_OK;
 80146ae:	2300      	movs	r3, #0
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	3718      	adds	r7, #24
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	20000058 	.word	0x20000058
 80146bc:	165e9f81 	.word	0x165e9f81

080146c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80146c8:	4b35      	ldr	r3, [pc, #212]	; (80147a0 <SPI_CloseRxTx_ISR+0xe0>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	4a35      	ldr	r2, [pc, #212]	; (80147a4 <SPI_CloseRxTx_ISR+0xe4>)
 80146ce:	fba2 2303 	umull	r2, r3, r2, r3
 80146d2:	0a5b      	lsrs	r3, r3, #9
 80146d4:	2264      	movs	r2, #100	; 0x64
 80146d6:	fb02 f303 	mul.w	r3, r2, r3
 80146da:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80146dc:	f7f1 fdaa 	bl	8006234 <HAL_GetTick>
 80146e0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	685a      	ldr	r2, [r3, #4]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	f022 0220 	bic.w	r2, r2, #32
 80146f0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d106      	bne.n	8014706 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146fc:	f043 0220 	orr.w	r2, r3, #32
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014704:	e009      	b.n	801471a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	3b01      	subs	r3, #1
 801470a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	f003 0302 	and.w	r3, r3, #2
 8014716:	2b00      	cmp	r3, #0
 8014718:	d0eb      	beq.n	80146f2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801471a:	697a      	ldr	r2, [r7, #20]
 801471c:	2164      	movs	r1, #100	; 0x64
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f7ff ff8d 	bl	801463e <SPI_EndRxTxTransaction>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d005      	beq.n	8014736 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801472e:	f043 0220 	orr.w	r2, r3, #32
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	689b      	ldr	r3, [r3, #8]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d10a      	bne.n	8014754 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801473e:	2300      	movs	r3, #0
 8014740:	60fb      	str	r3, [r7, #12]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	60fb      	str	r3, [r7, #12]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	689b      	ldr	r3, [r3, #8]
 8014750:	60fb      	str	r3, [r7, #12]
 8014752:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014758:	2b00      	cmp	r3, #0
 801475a:	d115      	bne.n	8014788 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014762:	b2db      	uxtb	r3, r3
 8014764:	2b04      	cmp	r3, #4
 8014766:	d107      	bne.n	8014778 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7ff fab1 	bl	8013cd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014776:	e00e      	b.n	8014796 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2201      	movs	r2, #1
 801477c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f7ff fab3 	bl	8013cec <HAL_SPI_TxRxCpltCallback>
}
 8014786:	e006      	b.n	8014796 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2201      	movs	r2, #1
 801478c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f7ff fad3 	bl	8013d3c <HAL_SPI_ErrorCallback>
}
 8014796:	bf00      	nop
 8014798:	3718      	adds	r7, #24
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	20000058 	.word	0x20000058
 80147a4:	057619f1 	.word	0x057619f1

080147a8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	685a      	ldr	r2, [r3, #4]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80147be:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80147c0:	f7f1 fd38 	bl	8006234 <HAL_GetTick>
 80147c4:	4603      	mov	r3, r0
 80147c6:	461a      	mov	r2, r3
 80147c8:	2164      	movs	r1, #100	; 0x64
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7ff fed2 	bl	8014574 <SPI_EndRxTransaction>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d005      	beq.n	80147e2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147da:	f043 0220 	orr.w	r2, r3, #32
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	689b      	ldr	r3, [r3, #8]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d10a      	bne.n	8014800 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80147ea:	2300      	movs	r3, #0
 80147ec:	60fb      	str	r3, [r7, #12]
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	60fb      	str	r3, [r7, #12]
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	60fb      	str	r3, [r7, #12]
 80147fe:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2201      	movs	r2, #1
 8014804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801480c:	2b00      	cmp	r3, #0
 801480e:	d103      	bne.n	8014818 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7ff fa61 	bl	8013cd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014816:	e002      	b.n	801481e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7ff fa8f 	bl	8013d3c <HAL_SPI_ErrorCallback>
}
 801481e:	bf00      	nop
 8014820:	3710      	adds	r7, #16
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}

08014826 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014826:	b580      	push	{r7, lr}
 8014828:	b086      	sub	sp, #24
 801482a:	af00      	add	r7, sp, #0
 801482c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801482e:	4b2c      	ldr	r3, [pc, #176]	; (80148e0 <SPI_CloseTx_ISR+0xba>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	4a2c      	ldr	r2, [pc, #176]	; (80148e4 <SPI_CloseTx_ISR+0xbe>)
 8014834:	fba2 2303 	umull	r2, r3, r2, r3
 8014838:	0a5b      	lsrs	r3, r3, #9
 801483a:	2264      	movs	r2, #100	; 0x64
 801483c:	fb02 f303 	mul.w	r3, r2, r3
 8014840:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014842:	f7f1 fcf7 	bl	8006234 <HAL_GetTick>
 8014846:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d106      	bne.n	801485c <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014852:	f043 0220 	orr.w	r2, r3, #32
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801485a:	e009      	b.n	8014870 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	3b01      	subs	r3, #1
 8014860:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	689b      	ldr	r3, [r3, #8]
 8014868:	f003 0302 	and.w	r3, r3, #2
 801486c:	2b00      	cmp	r3, #0
 801486e:	d0eb      	beq.n	8014848 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	685a      	ldr	r2, [r3, #4]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801487e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014880:	697a      	ldr	r2, [r7, #20]
 8014882:	2164      	movs	r1, #100	; 0x64
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7ff feda 	bl	801463e <SPI_EndRxTxTransaction>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d005      	beq.n	801489c <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014894:	f043 0220 	orr.w	r2, r3, #32
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	689b      	ldr	r3, [r3, #8]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d10a      	bne.n	80148ba <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80148a4:	2300      	movs	r3, #0
 80148a6:	60fb      	str	r3, [r7, #12]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	60fb      	str	r3, [r7, #12]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	60fb      	str	r3, [r7, #12]
 80148b8:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2201      	movs	r2, #1
 80148be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d003      	beq.n	80148d2 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7ff fa36 	bl	8013d3c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80148d0:	e002      	b.n	80148d8 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f7ff f9f6 	bl	8013cc4 <HAL_SPI_TxCpltCallback>
}
 80148d8:	bf00      	nop
 80148da:	3718      	adds	r7, #24
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	20000058 	.word	0x20000058
 80148e4:	057619f1 	.word	0x057619f1

080148e8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80148e8:	b480      	push	{r7}
 80148ea:	b085      	sub	sp, #20
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80148f0:	2300      	movs	r3, #0
 80148f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80148f4:	4b1e      	ldr	r3, [pc, #120]	; (8014970 <SPI_AbortRx_ISR+0x88>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4a1e      	ldr	r2, [pc, #120]	; (8014974 <SPI_AbortRx_ISR+0x8c>)
 80148fa:	fba2 2303 	umull	r2, r3, r2, r3
 80148fe:	0a5b      	lsrs	r3, r3, #9
 8014900:	2264      	movs	r2, #100	; 0x64
 8014902:	fb02 f303 	mul.w	r3, r2, r3
 8014906:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d106      	bne.n	801491c <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801491a:	e009      	b.n	8014930 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	3b01      	subs	r3, #1
 8014920:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	689b      	ldr	r3, [r3, #8]
 8014928:	f003 0302 	and.w	r3, r3, #2
 801492c:	2b00      	cmp	r3, #0
 801492e:	d0eb      	beq.n	8014908 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801493e:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	685a      	ldr	r2, [r3, #4]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801494e:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8014958:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2207      	movs	r2, #7
 801495e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014962:	bf00      	nop
 8014964:	3714      	adds	r7, #20
 8014966:	46bd      	mov	sp, r7
 8014968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop
 8014970:	20000058 	.word	0x20000058
 8014974:	057619f1 	.word	0x057619f1

08014978 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014978:	b480      	push	{r7}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801498e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801499e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2207      	movs	r2, #7
 80149a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80149a8:	bf00      	nop
 80149aa:	370c      	adds	r7, #12
 80149ac:	46bd      	mov	sp, r7
 80149ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b2:	4770      	bx	lr

080149b4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80149c6:	2301      	movs	r3, #1
 80149c8:	e034      	b.n	8014a34 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d106      	bne.n	80149e4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2200      	movs	r2, #0
 80149da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80149de:	68f8      	ldr	r0, [r7, #12]
 80149e0:	f7f1 f816 	bl	8005a10 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	3308      	adds	r3, #8
 80149ec:	4619      	mov	r1, r3
 80149ee:	4610      	mov	r0, r2
 80149f0:	f003 f9a0 	bl	8017d34 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	6818      	ldr	r0, [r3, #0]
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	461a      	mov	r2, r3
 80149fe:	68b9      	ldr	r1, [r7, #8]
 8014a00:	f003 fa1e 	bl	8017e40 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	6858      	ldr	r0, [r3, #4]
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	689a      	ldr	r2, [r3, #8]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a10:	6879      	ldr	r1, [r7, #4]
 8014a12:	f003 fa52 	bl	8017eba <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	68fa      	ldr	r2, [r7, #12]
 8014a1c:	6892      	ldr	r2, [r2, #8]
 8014a1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	68fa      	ldr	r2, [r7, #12]
 8014a28:	6892      	ldr	r2, [r2, #8]
 8014a2a:	f041 0101 	orr.w	r1, r1, #1
 8014a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8014a32:	2300      	movs	r3, #0
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3710      	adds	r7, #16
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7f1 f811 	bl	8005a6c <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	6859      	ldr	r1, [r3, #4]
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	689b      	ldr	r3, [r3, #8]
 8014a56:	461a      	mov	r2, r3
 8014a58:	f003 f9be 	bl	8017dd8 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2200      	movs	r2, #0
 8014a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3708      	adds	r7, #8
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8014a76:	b480      	push	{r7}
 8014a78:	b083      	sub	sp, #12
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 8014a7e:	bf00      	nop
 8014a80:	370c      	adds	r7, #12
 8014a82:	46bd      	mov	sp, r7
 8014a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a88:	4770      	bx	lr

08014a8a <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 8014a8a:	b480      	push	{r7}
 8014a8c:	b083      	sub	sp, #12
 8014a8e:	af00      	add	r7, sp, #0
 8014a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 8014a92:	bf00      	nop
 8014a94:	370c      	adds	r7, #12
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr

08014a9e <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 8014a9e:	b480      	push	{r7}
 8014aa0:	b087      	sub	sp, #28
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	60f8      	str	r0, [r7, #12]
 8014aa6:	60b9      	str	r1, [r7, #8]
 8014aa8:	607a      	str	r2, [r7, #4]
 8014aaa:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	d101      	bne.n	8014abe <HAL_SRAM_Read_8b+0x20>
 8014aba:	2302      	movs	r3, #2
 8014abc:	e022      	b.n	8014b04 <HAL_SRAM_Read_8b+0x66>
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2201      	movs	r2, #1
 8014ac2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2202      	movs	r2, #2
 8014aca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014ace:	e00d      	b.n	8014aec <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 8014ad0:	697b      	ldr	r3, [r7, #20]
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	b2da      	uxtb	r2, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	3301      	adds	r3, #1
 8014ade:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	3b01      	subs	r3, #1
 8014aea:	603b      	str	r3, [r7, #0]
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d1ee      	bne.n	8014ad0 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2201      	movs	r2, #1
 8014af6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2200      	movs	r2, #0
 8014afe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014b02:	2300      	movs	r3, #0
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	371c      	adds	r7, #28
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr

08014b10 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b087      	sub	sp, #28
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
 8014b1c:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	2b04      	cmp	r3, #4
 8014b2c:	d101      	bne.n	8014b32 <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 8014b2e:	2301      	movs	r3, #1
 8014b30:	e028      	b.n	8014b84 <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d101      	bne.n	8014b40 <HAL_SRAM_Write_8b+0x30>
 8014b3c:	2302      	movs	r3, #2
 8014b3e:	e021      	b.n	8014b84 <HAL_SRAM_Write_8b+0x74>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2201      	movs	r2, #1
 8014b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2202      	movs	r2, #2
 8014b4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014b50:	e00c      	b.n	8014b6c <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	781a      	ldrb	r2, [r3, #0]
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	3301      	adds	r3, #1
 8014b5e:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	3301      	adds	r3, #1
 8014b64:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	3b01      	subs	r3, #1
 8014b6a:	603b      	str	r3, [r7, #0]
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d1ef      	bne.n	8014b52 <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2201      	movs	r2, #1
 8014b76:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014b82:	2300      	movs	r3, #0
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	371c      	adds	r7, #28
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8e:	4770      	bx	lr

08014b90 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8014b90:	b480      	push	{r7}
 8014b92:	b087      	sub	sp, #28
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	607a      	str	r2, [r7, #4]
 8014b9c:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d101      	bne.n	8014bb0 <HAL_SRAM_Read_16b+0x20>
 8014bac:	2302      	movs	r3, #2
 8014bae:	e022      	b.n	8014bf6 <HAL_SRAM_Read_16b+0x66>
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2202      	movs	r2, #2
 8014bbc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014bc0:	e00d      	b.n	8014bde <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 8014bc2:	697b      	ldr	r3, [r7, #20]
 8014bc4:	881b      	ldrh	r3, [r3, #0]
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	3302      	adds	r3, #2
 8014bd0:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	3302      	adds	r3, #2
 8014bd6:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	603b      	str	r3, [r7, #0]
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1ee      	bne.n	8014bc2 <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	2201      	movs	r2, #1
 8014be8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014bf4:	2300      	movs	r3, #0
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	371c      	adds	r7, #28
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c00:	4770      	bx	lr

08014c02 <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 8014c02:	b480      	push	{r7}
 8014c04:	b087      	sub	sp, #28
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	60f8      	str	r0, [r7, #12]
 8014c0a:	60b9      	str	r1, [r7, #8]
 8014c0c:	607a      	str	r2, [r7, #4]
 8014c0e:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014c1a:	b2db      	uxtb	r3, r3
 8014c1c:	2b04      	cmp	r3, #4
 8014c1e:	d101      	bne.n	8014c24 <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8014c20:	2301      	movs	r3, #1
 8014c22:	e028      	b.n	8014c76 <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d101      	bne.n	8014c32 <HAL_SRAM_Write_16b+0x30>
 8014c2e:	2302      	movs	r3, #2
 8014c30:	e021      	b.n	8014c76 <HAL_SRAM_Write_16b+0x74>
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2201      	movs	r2, #1
 8014c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	2202      	movs	r2, #2
 8014c3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014c42:	e00c      	b.n	8014c5e <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	881a      	ldrh	r2, [r3, #0]
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	3302      	adds	r3, #2
 8014c50:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	3302      	adds	r3, #2
 8014c56:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	3b01      	subs	r3, #1
 8014c5c:	603b      	str	r3, [r7, #0]
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d1ef      	bne.n	8014c44 <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2201      	movs	r2, #1
 8014c68:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014c74:	2300      	movs	r3, #0
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	371c      	adds	r7, #28
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c80:	4770      	bx	lr

08014c82 <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8014c82:	b480      	push	{r7}
 8014c84:	b085      	sub	sp, #20
 8014c86:	af00      	add	r7, sp, #0
 8014c88:	60f8      	str	r0, [r7, #12]
 8014c8a:	60b9      	str	r1, [r7, #8]
 8014c8c:	607a      	str	r2, [r7, #4]
 8014c8e:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	d101      	bne.n	8014c9e <HAL_SRAM_Read_32b+0x1c>
 8014c9a:	2302      	movs	r3, #2
 8014c9c:	e021      	b.n	8014ce2 <HAL_SRAM_Read_32b+0x60>
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2201      	movs	r2, #1
 8014ca2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	2202      	movs	r2, #2
 8014caa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014cae:	e00c      	b.n	8014cca <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	3304      	adds	r3, #4
 8014cbc:	607b      	str	r3, [r7, #4]
    pAddress++;
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	3b01      	subs	r3, #1
 8014cc8:	603b      	str	r3, [r7, #0]
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d1ef      	bne.n	8014cb0 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014ce0:	2300      	movs	r3, #0
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3714      	adds	r7, #20
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cec:	4770      	bx	lr

08014cee <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8014cee:	b480      	push	{r7}
 8014cf0:	b085      	sub	sp, #20
 8014cf2:	af00      	add	r7, sp, #0
 8014cf4:	60f8      	str	r0, [r7, #12]
 8014cf6:	60b9      	str	r1, [r7, #8]
 8014cf8:	607a      	str	r2, [r7, #4]
 8014cfa:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014d02:	b2db      	uxtb	r3, r3
 8014d04:	2b04      	cmp	r3, #4
 8014d06:	d101      	bne.n	8014d0c <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8014d08:	2301      	movs	r3, #1
 8014d0a:	e028      	b.n	8014d5e <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d12:	2b01      	cmp	r3, #1
 8014d14:	d101      	bne.n	8014d1a <HAL_SRAM_Write_32b+0x2c>
 8014d16:	2302      	movs	r3, #2
 8014d18:	e021      	b.n	8014d5e <HAL_SRAM_Write_32b+0x70>
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2202      	movs	r2, #2
 8014d26:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014d2a:	e00c      	b.n	8014d46 <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	3304      	adds	r3, #4
 8014d38:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	3304      	adds	r3, #4
 8014d3e:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	3b01      	subs	r3, #1
 8014d44:	603b      	str	r3, [r7, #0]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d1ef      	bne.n	8014d2c <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2201      	movs	r2, #1
 8014d50:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	2200      	movs	r2, #0
 8014d58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014d5c:	2300      	movs	r3, #0
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3714      	adds	r7, #20
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr

08014d6a <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8014d6a:	b580      	push	{r7, lr}
 8014d6c:	b084      	sub	sp, #16
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	60f8      	str	r0, [r7, #12]
 8014d72:	60b9      	str	r1, [r7, #8]
 8014d74:	607a      	str	r2, [r7, #4]
 8014d76:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d7e:	2b01      	cmp	r3, #1
 8014d80:	d101      	bne.n	8014d86 <HAL_SRAM_Read_DMA+0x1c>
 8014d82:	2302      	movs	r3, #2
 8014d84:	e01f      	b.n	8014dc6 <HAL_SRAM_Read_DMA+0x5c>
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2202      	movs	r2, #2
 8014d92:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d9a:	4a0d      	ldr	r2, [pc, #52]	; (8014dd0 <HAL_SRAM_Read_DMA+0x66>)
 8014d9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014da2:	4a0c      	ldr	r2, [pc, #48]	; (8014dd4 <HAL_SRAM_Read_DMA+0x6a>)
 8014da4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014daa:	68b9      	ldr	r1, [r7, #8]
 8014dac:	687a      	ldr	r2, [r7, #4]
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	f7f2 fca9 	bl	8007706 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2201      	movs	r2, #1
 8014db8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 8014dc4:	2300      	movs	r3, #0
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3710      	adds	r7, #16
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	08014a77 	.word	0x08014a77
 8014dd4:	08014a8b 	.word	0x08014a8b

08014dd8 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	607a      	str	r2, [r7, #4]
 8014de4:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	2b04      	cmp	r3, #4
 8014df0:	d101      	bne.n	8014df6 <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 8014df2:	2301      	movs	r3, #1
 8014df4:	e026      	b.n	8014e44 <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	d101      	bne.n	8014e04 <HAL_SRAM_Write_DMA+0x2c>
 8014e00:	2302      	movs	r3, #2
 8014e02:	e01f      	b.n	8014e44 <HAL_SRAM_Write_DMA+0x6c>
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2201      	movs	r2, #1
 8014e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2202      	movs	r2, #2
 8014e10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e18:	4a0c      	ldr	r2, [pc, #48]	; (8014e4c <HAL_SRAM_Write_DMA+0x74>)
 8014e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e20:	4a0b      	ldr	r2, [pc, #44]	; (8014e50 <HAL_SRAM_Write_DMA+0x78>)
 8014e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014e28:	6879      	ldr	r1, [r7, #4]
 8014e2a:	68ba      	ldr	r2, [r7, #8]
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	f7f2 fc6a 	bl	8007706 <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2201      	movs	r2, #1
 8014e36:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 8014e42:	2300      	movs	r3, #0
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3710      	adds	r7, #16
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	08014a77 	.word	0x08014a77
 8014e50:	08014a8b 	.word	0x08014a8b

08014e54 <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	d101      	bne.n	8014e6a <HAL_SRAM_WriteOperation_Enable+0x16>
 8014e66:	2302      	movs	r3, #2
 8014e68:	e014      	b.n	8014e94 <HAL_SRAM_WriteOperation_Enable+0x40>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681a      	ldr	r2, [r3, #0]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	689b      	ldr	r3, [r3, #8]
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	f003 f85b 	bl	8017f38 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2201      	movs	r2, #1
 8014e86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8014e92:	2300      	movs	r3, #0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b082      	sub	sp, #8
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014eaa:	2b01      	cmp	r3, #1
 8014eac:	d101      	bne.n	8014eb2 <HAL_SRAM_WriteOperation_Disable+0x16>
 8014eae:	2302      	movs	r3, #2
 8014eb0:	e018      	b.n	8014ee4 <HAL_SRAM_WriteOperation_Disable+0x48>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2202      	movs	r2, #2
 8014ebe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	689b      	ldr	r3, [r3, #8]
 8014eca:	4619      	mov	r1, r3
 8014ecc:	4610      	mov	r0, r2
 8014ece:	f003 f849 	bl	8017f64 <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2204      	movs	r2, #4
 8014ed6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2200      	movs	r2, #0
 8014ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8014ee2:	2300      	movs	r3, #0
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  return hsram->State;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014efa:	b2db      	uxtb	r3, r3
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	370c      	adds	r7, #12
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d101      	bne.n	8014f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014f16:	2301      	movs	r3, #1
 8014f18:	e03f      	b.n	8014f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d106      	bne.n	8014f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7f0 fc40 	bl	80057b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2224      	movs	r2, #36	; 0x24
 8014f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	68da      	ldr	r2, [r3, #12]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f002 fc7e 	bl	801784e <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	691a      	ldr	r2, [r3, #16]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	695a      	ldr	r2, [r3, #20]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	68da      	ldr	r2, [r3, #12]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2220      	movs	r2, #32
 8014f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2220      	movs	r2, #32
 8014f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014f98:	2300      	movs	r3, #0
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	3708      	adds	r7, #8
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}

08014fa2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b082      	sub	sp, #8
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d101      	bne.n	8014fb4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	e047      	b.n	8015044 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014fba:	b2db      	uxtb	r3, r3
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d106      	bne.n	8014fce <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f7f0 fbf3 	bl	80057b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2224      	movs	r2, #36	; 0x24
 8014fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	68da      	ldr	r2, [r3, #12]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014fe4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f002 fc31 	bl	801784e <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	691a      	ldr	r2, [r3, #16]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014ffa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	695a      	ldr	r2, [r3, #20]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 801500a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	695a      	ldr	r2, [r3, #20]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	f042 0208 	orr.w	r2, r2, #8
 801501a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	68da      	ldr	r2, [r3, #12]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801502a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2200      	movs	r2, #0
 8015030:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2220      	movs	r2, #32
 8015036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2220      	movs	r2, #32
 801503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015042:	2300      	movs	r3, #0
}
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d101      	bne.n	8015060 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 801505c:	2301      	movs	r3, #1
 801505e:	e057      	b.n	8015110 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015066:	b2db      	uxtb	r3, r3
 8015068:	2b00      	cmp	r3, #0
 801506a:	d106      	bne.n	801507a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2200      	movs	r2, #0
 8015070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f7f0 fb9d 	bl	80057b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	2224      	movs	r2, #36	; 0x24
 801507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	68da      	ldr	r2, [r3, #12]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015090:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f002 fbdb 	bl	801784e <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	691a      	ldr	r2, [r3, #16]
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80150a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	695a      	ldr	r2, [r3, #20]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80150b6:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	691a      	ldr	r2, [r3, #16]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80150c6:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	691a      	ldr	r2, [r3, #16]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	f022 0220 	bic.w	r2, r2, #32
 80150d6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	6919      	ldr	r1, [r3, #16]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	683a      	ldr	r2, [r7, #0]
 80150e4:	430a      	orrs	r2, r1
 80150e6:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	68da      	ldr	r2, [r3, #12]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80150f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2200      	movs	r2, #0
 80150fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2220      	movs	r2, #32
 8015102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2220      	movs	r2, #32
 801510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801510e:	2300      	movs	r3, #0
}
 8015110:	4618      	mov	r0, r3
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
 801511e:	60f8      	str	r0, [r7, #12]
 8015120:	460b      	mov	r3, r1
 8015122:	607a      	str	r2, [r7, #4]
 8015124:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d101      	bne.n	8015130 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 801512c:	2301      	movs	r3, #1
 801512e:	e05f      	b.n	80151f0 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015136:	b2db      	uxtb	r3, r3
 8015138:	2b00      	cmp	r3, #0
 801513a:	d106      	bne.n	801514a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	2200      	movs	r2, #0
 8015140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015144:	68f8      	ldr	r0, [r7, #12]
 8015146:	f7f0 fb35 	bl	80057b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2224      	movs	r2, #36	; 0x24
 801514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	68da      	ldr	r2, [r3, #12]
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015160:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	f002 fb73 	bl	801784e <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	691a      	ldr	r2, [r3, #16]
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015176:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	695a      	ldr	r2, [r3, #20]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015186:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	691a      	ldr	r2, [r3, #16]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	f022 020f 	bic.w	r2, r2, #15
 8015196:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	6919      	ldr	r1, [r3, #16]
 801519e:	7afa      	ldrb	r2, [r7, #11]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	430a      	orrs	r2, r1
 80151a6:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	68da      	ldr	r2, [r3, #12]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80151b6:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	68d9      	ldr	r1, [r3, #12]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	430a      	orrs	r2, r1
 80151c6:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	68da      	ldr	r2, [r3, #12]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80151d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2200      	movs	r2, #0
 80151dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	2220      	movs	r2, #32
 80151e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2220      	movs	r2, #32
 80151ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80151ee:	2300      	movs	r3, #0
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3710      	adds	r7, #16
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d101      	bne.n	801520a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015206:	2301      	movs	r3, #1
 8015208:	e021      	b.n	801524e <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2224      	movs	r2, #36	; 0x24
 801520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	68da      	ldr	r2, [r3, #12]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015220:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7f0 fb7c 	bl	8005920 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2200      	movs	r2, #0
 801522c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2200      	movs	r2, #0
 8015232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2200      	movs	r2, #0
 801523a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2200      	movs	r2, #0
 8015242:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2200      	movs	r2, #0
 8015248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801524c:	2300      	movs	r3, #0
}
 801524e:	4618      	mov	r0, r3
 8015250:	3708      	adds	r7, #8
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}

08015256 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015256:	b580      	push	{r7, lr}
 8015258:	b08a      	sub	sp, #40	; 0x28
 801525a:	af02      	add	r7, sp, #8
 801525c:	60f8      	str	r0, [r7, #12]
 801525e:	60b9      	str	r1, [r7, #8]
 8015260:	603b      	str	r3, [r7, #0]
 8015262:	4613      	mov	r3, r2
 8015264:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015266:	2300      	movs	r3, #0
 8015268:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015270:	b2db      	uxtb	r3, r3
 8015272:	2b20      	cmp	r3, #32
 8015274:	d17c      	bne.n	8015370 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d002      	beq.n	8015282 <HAL_UART_Transmit+0x2c>
 801527c:	88fb      	ldrh	r3, [r7, #6]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d101      	bne.n	8015286 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015282:	2301      	movs	r3, #1
 8015284:	e075      	b.n	8015372 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801528c:	2b01      	cmp	r3, #1
 801528e:	d101      	bne.n	8015294 <HAL_UART_Transmit+0x3e>
 8015290:	2302      	movs	r3, #2
 8015292:	e06e      	b.n	8015372 <HAL_UART_Transmit+0x11c>
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2201      	movs	r2, #1
 8015298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2200      	movs	r2, #0
 80152a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2221      	movs	r2, #33	; 0x21
 80152a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80152aa:	f7f0 ffc3 	bl	8006234 <HAL_GetTick>
 80152ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	88fa      	ldrh	r2, [r7, #6]
 80152b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	88fa      	ldrh	r2, [r7, #6]
 80152ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	689b      	ldr	r3, [r3, #8]
 80152c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152c4:	d108      	bne.n	80152d8 <HAL_UART_Transmit+0x82>
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	691b      	ldr	r3, [r3, #16]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d104      	bne.n	80152d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	61bb      	str	r3, [r7, #24]
 80152d6:	e003      	b.n	80152e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80152dc:	2300      	movs	r3, #0
 80152de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2200      	movs	r2, #0
 80152e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80152e8:	e02a      	b.n	8015340 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	2200      	movs	r2, #0
 80152f2:	2180      	movs	r1, #128	; 0x80
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	f001 ff19 	bl	801712c <UART_WaitOnFlagUntilTimeout>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d001      	beq.n	8015304 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8015300:	2303      	movs	r3, #3
 8015302:	e036      	b.n	8015372 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8015304:	69fb      	ldr	r3, [r7, #28]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d10b      	bne.n	8015322 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	881b      	ldrh	r3, [r3, #0]
 801530e:	461a      	mov	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	3302      	adds	r3, #2
 801531e:	61bb      	str	r3, [r7, #24]
 8015320:	e007      	b.n	8015332 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	781a      	ldrb	r2, [r3, #0]
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	3301      	adds	r3, #1
 8015330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015336:	b29b      	uxth	r3, r3
 8015338:	3b01      	subs	r3, #1
 801533a:	b29a      	uxth	r2, r3
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015344:	b29b      	uxth	r3, r3
 8015346:	2b00      	cmp	r3, #0
 8015348:	d1cf      	bne.n	80152ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	9300      	str	r3, [sp, #0]
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	2200      	movs	r2, #0
 8015352:	2140      	movs	r1, #64	; 0x40
 8015354:	68f8      	ldr	r0, [r7, #12]
 8015356:	f001 fee9 	bl	801712c <UART_WaitOnFlagUntilTimeout>
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d001      	beq.n	8015364 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015360:	2303      	movs	r3, #3
 8015362:	e006      	b.n	8015372 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2220      	movs	r2, #32
 8015368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801536c:	2300      	movs	r3, #0
 801536e:	e000      	b.n	8015372 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015370:	2302      	movs	r3, #2
  }
}
 8015372:	4618      	mov	r0, r3
 8015374:	3720      	adds	r7, #32
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b08a      	sub	sp, #40	; 0x28
 801537e:	af02      	add	r7, sp, #8
 8015380:	60f8      	str	r0, [r7, #12]
 8015382:	60b9      	str	r1, [r7, #8]
 8015384:	603b      	str	r3, [r7, #0]
 8015386:	4613      	mov	r3, r2
 8015388:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801538a:	2300      	movs	r3, #0
 801538c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b20      	cmp	r3, #32
 8015398:	f040 808c 	bne.w	80154b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d002      	beq.n	80153a8 <HAL_UART_Receive+0x2e>
 80153a2:	88fb      	ldrh	r3, [r7, #6]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d101      	bne.n	80153ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80153a8:	2301      	movs	r3, #1
 80153aa:	e084      	b.n	80154b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d101      	bne.n	80153ba <HAL_UART_Receive+0x40>
 80153b6:	2302      	movs	r3, #2
 80153b8:	e07d      	b.n	80154b6 <HAL_UART_Receive+0x13c>
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2201      	movs	r2, #1
 80153be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	2200      	movs	r2, #0
 80153c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2222      	movs	r2, #34	; 0x22
 80153cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	2200      	movs	r2, #0
 80153d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80153d6:	f7f0 ff2d 	bl	8006234 <HAL_GetTick>
 80153da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	88fa      	ldrh	r2, [r7, #6]
 80153e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	88fa      	ldrh	r2, [r7, #6]
 80153e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	689b      	ldr	r3, [r3, #8]
 80153ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153f0:	d108      	bne.n	8015404 <HAL_UART_Receive+0x8a>
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	691b      	ldr	r3, [r3, #16]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d104      	bne.n	8015404 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80153fa:	2300      	movs	r3, #0
 80153fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	61bb      	str	r3, [r7, #24]
 8015402:	e003      	b.n	801540c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015408:	2300      	movs	r3, #0
 801540a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2200      	movs	r2, #0
 8015410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8015414:	e043      	b.n	801549e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	2200      	movs	r2, #0
 801541e:	2120      	movs	r1, #32
 8015420:	68f8      	ldr	r0, [r7, #12]
 8015422:	f001 fe83 	bl	801712c <UART_WaitOnFlagUntilTimeout>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d001      	beq.n	8015430 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 801542c:	2303      	movs	r3, #3
 801542e:	e042      	b.n	80154b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d10c      	bne.n	8015450 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	b29b      	uxth	r3, r3
 801543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015442:	b29a      	uxth	r2, r3
 8015444:	69bb      	ldr	r3, [r7, #24]
 8015446:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015448:	69bb      	ldr	r3, [r7, #24]
 801544a:	3302      	adds	r3, #2
 801544c:	61bb      	str	r3, [r7, #24]
 801544e:	e01f      	b.n	8015490 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	689b      	ldr	r3, [r3, #8]
 8015454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015458:	d007      	beq.n	801546a <HAL_UART_Receive+0xf0>
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	689b      	ldr	r3, [r3, #8]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d10a      	bne.n	8015478 <HAL_UART_Receive+0xfe>
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	691b      	ldr	r3, [r3, #16]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d106      	bne.n	8015478 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	b2da      	uxtb	r2, r3
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	701a      	strb	r2, [r3, #0]
 8015476:	e008      	b.n	801548a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	b2db      	uxtb	r3, r3
 8015480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015484:	b2da      	uxtb	r2, r3
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	3301      	adds	r3, #1
 801548e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015494:	b29b      	uxth	r3, r3
 8015496:	3b01      	subs	r3, #1
 8015498:	b29a      	uxth	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d1b6      	bne.n	8015416 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2220      	movs	r2, #32
 80154ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80154b0:	2300      	movs	r3, #0
 80154b2:	e000      	b.n	80154b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80154b4:	2302      	movs	r3, #2
  }
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3720      	adds	r7, #32
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80154be:	b480      	push	{r7}
 80154c0:	b085      	sub	sp, #20
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	60f8      	str	r0, [r7, #12]
 80154c6:	60b9      	str	r1, [r7, #8]
 80154c8:	4613      	mov	r3, r2
 80154ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	2b20      	cmp	r3, #32
 80154d6:	d130      	bne.n	801553a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d002      	beq.n	80154e4 <HAL_UART_Transmit_IT+0x26>
 80154de:	88fb      	ldrh	r3, [r7, #6]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d101      	bne.n	80154e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80154e4:	2301      	movs	r3, #1
 80154e6:	e029      	b.n	801553c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80154ee:	2b01      	cmp	r3, #1
 80154f0:	d101      	bne.n	80154f6 <HAL_UART_Transmit_IT+0x38>
 80154f2:	2302      	movs	r3, #2
 80154f4:	e022      	b.n	801553c <HAL_UART_Transmit_IT+0x7e>
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	68ba      	ldr	r2, [r7, #8]
 8015502:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	88fa      	ldrh	r2, [r7, #6]
 8015508:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	88fa      	ldrh	r2, [r7, #6]
 801550e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2200      	movs	r2, #0
 8015514:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2221      	movs	r2, #33	; 0x21
 801551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2200      	movs	r2, #0
 8015522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	68da      	ldr	r2, [r3, #12]
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015534:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8015536:	2300      	movs	r3, #0
 8015538:	e000      	b.n	801553c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801553a:	2302      	movs	r3, #2
  }
}
 801553c:	4618      	mov	r0, r3
 801553e:	3714      	adds	r7, #20
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr

08015548 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b084      	sub	sp, #16
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	4613      	mov	r3, r2
 8015554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b20      	cmp	r3, #32
 8015560:	d11d      	bne.n	801559e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d002      	beq.n	801556e <HAL_UART_Receive_IT+0x26>
 8015568:	88fb      	ldrh	r3, [r7, #6]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d101      	bne.n	8015572 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801556e:	2301      	movs	r3, #1
 8015570:	e016      	b.n	80155a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015578:	2b01      	cmp	r3, #1
 801557a:	d101      	bne.n	8015580 <HAL_UART_Receive_IT+0x38>
 801557c:	2302      	movs	r3, #2
 801557e:	e00f      	b.n	80155a0 <HAL_UART_Receive_IT+0x58>
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2201      	movs	r2, #1
 8015584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	2200      	movs	r2, #0
 801558c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801558e:	88fb      	ldrh	r3, [r7, #6]
 8015590:	461a      	mov	r2, r3
 8015592:	68b9      	ldr	r1, [r7, #8]
 8015594:	68f8      	ldr	r0, [r7, #12]
 8015596:	f001 fe37 	bl	8017208 <UART_Start_Receive_IT>
 801559a:	4603      	mov	r3, r0
 801559c:	e000      	b.n	80155a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 801559e:	2302      	movs	r3, #2
  }
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3710      	adds	r7, #16
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}

080155a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08c      	sub	sp, #48	; 0x30
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	4613      	mov	r3, r2
 80155b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b20      	cmp	r3, #32
 80155c0:	d165      	bne.n	801568e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d002      	beq.n	80155ce <HAL_UART_Transmit_DMA+0x26>
 80155c8:	88fb      	ldrh	r3, [r7, #6]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d101      	bne.n	80155d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80155ce:	2301      	movs	r3, #1
 80155d0:	e05e      	b.n	8015690 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d101      	bne.n	80155e0 <HAL_UART_Transmit_DMA+0x38>
 80155dc:	2302      	movs	r3, #2
 80155de:	e057      	b.n	8015690 <HAL_UART_Transmit_DMA+0xe8>
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	2201      	movs	r2, #1
 80155e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80155e8:	68ba      	ldr	r2, [r7, #8]
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	88fa      	ldrh	r2, [r7, #6]
 80155f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	88fa      	ldrh	r2, [r7, #6]
 80155f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	2200      	movs	r2, #0
 80155fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2221      	movs	r2, #33	; 0x21
 8015604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801560c:	4a22      	ldr	r2, [pc, #136]	; (8015698 <HAL_UART_Transmit_DMA+0xf0>)
 801560e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015614:	4a21      	ldr	r2, [pc, #132]	; (801569c <HAL_UART_Transmit_DMA+0xf4>)
 8015616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801561c:	4a20      	ldr	r2, [pc, #128]	; (80156a0 <HAL_UART_Transmit_DMA+0xf8>)
 801561e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015624:	2200      	movs	r2, #0
 8015626:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8015628:	f107 0308 	add.w	r3, r7, #8
 801562c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015634:	6819      	ldr	r1, [r3, #0]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	3304      	adds	r3, #4
 801563c:	461a      	mov	r2, r3
 801563e:	88fb      	ldrh	r3, [r7, #6]
 8015640:	f7f2 f861 	bl	8007706 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801564c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	2200      	movs	r2, #0
 8015652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	3314      	adds	r3, #20
 801565c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	e853 3f00 	ldrex	r3, [r3]
 8015664:	617b      	str	r3, [r7, #20]
   return(result);
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801566c:	62bb      	str	r3, [r7, #40]	; 0x28
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	3314      	adds	r3, #20
 8015674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015676:	627a      	str	r2, [r7, #36]	; 0x24
 8015678:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801567a:	6a39      	ldr	r1, [r7, #32]
 801567c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801567e:	e841 2300 	strex	r3, r2, [r1]
 8015682:	61fb      	str	r3, [r7, #28]
   return(result);
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d1e5      	bne.n	8015656 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801568a:	2300      	movs	r3, #0
 801568c:	e000      	b.n	8015690 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801568e:	2302      	movs	r3, #2
  }
}
 8015690:	4618      	mov	r0, r3
 8015692:	3730      	adds	r7, #48	; 0x30
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	08016e87 	.word	0x08016e87
 801569c:	08016f21 	.word	0x08016f21
 80156a0:	08017099 	.word	0x08017099

080156a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	4613      	mov	r3, r2
 80156b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	2b20      	cmp	r3, #32
 80156bc:	d11d      	bne.n	80156fa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d002      	beq.n	80156ca <HAL_UART_Receive_DMA+0x26>
 80156c4:	88fb      	ldrh	r3, [r7, #6]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d101      	bne.n	80156ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80156ca:	2301      	movs	r3, #1
 80156cc:	e016      	b.n	80156fc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d101      	bne.n	80156dc <HAL_UART_Receive_DMA+0x38>
 80156d8:	2302      	movs	r3, #2
 80156da:	e00f      	b.n	80156fc <HAL_UART_Receive_DMA+0x58>
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	2201      	movs	r2, #1
 80156e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2200      	movs	r2, #0
 80156e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80156ea:	88fb      	ldrh	r3, [r7, #6]
 80156ec:	461a      	mov	r2, r3
 80156ee:	68b9      	ldr	r1, [r7, #8]
 80156f0:	68f8      	ldr	r0, [r7, #12]
 80156f2:	f001 fdc3 	bl	801727c <UART_Start_Receive_DMA>
 80156f6:	4603      	mov	r3, r0
 80156f8:	e000      	b.n	80156fc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80156fa:	2302      	movs	r3, #2
  }
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3710      	adds	r7, #16
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8015704:	b480      	push	{r7}
 8015706:	b09d      	sub	sp, #116	; 0x74
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801570c:	2300      	movs	r3, #0
 801570e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015716:	2b01      	cmp	r3, #1
 8015718:	d101      	bne.n	801571e <HAL_UART_DMAPause+0x1a>
 801571a:	2302      	movs	r3, #2
 801571c:	e098      	b.n	8015850 <HAL_UART_DMAPause+0x14c>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2201      	movs	r2, #1
 8015722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	695b      	ldr	r3, [r3, #20]
 801572c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015730:	2b80      	cmp	r3, #128	; 0x80
 8015732:	bf0c      	ite	eq
 8015734:	2301      	moveq	r3, #1
 8015736:	2300      	movne	r3, #0
 8015738:	b2db      	uxtb	r3, r3
 801573a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015742:	b2db      	uxtb	r3, r3
 8015744:	2b21      	cmp	r3, #33	; 0x21
 8015746:	d11c      	bne.n	8015782 <HAL_UART_DMAPause+0x7e>
 8015748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801574a:	2b00      	cmp	r3, #0
 801574c:	d019      	beq.n	8015782 <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	3314      	adds	r3, #20
 8015754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015758:	e853 3f00 	ldrex	r3, [r3]
 801575c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015764:	66bb      	str	r3, [r7, #104]	; 0x68
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	3314      	adds	r3, #20
 801576c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801576e:	65ba      	str	r2, [r7, #88]	; 0x58
 8015770:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015776:	e841 2300 	strex	r3, r2, [r1]
 801577a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801577c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801577e:	2b00      	cmp	r3, #0
 8015780:	d1e5      	bne.n	801574e <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	695b      	ldr	r3, [r3, #20]
 8015788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801578c:	2b40      	cmp	r3, #64	; 0x40
 801578e:	bf0c      	ite	eq
 8015790:	2301      	moveq	r3, #1
 8015792:	2300      	movne	r3, #0
 8015794:	b2db      	uxtb	r3, r3
 8015796:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	2b22      	cmp	r3, #34	; 0x22
 80157a2:	d150      	bne.n	8015846 <HAL_UART_DMAPause+0x142>
 80157a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d04d      	beq.n	8015846 <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	330c      	adds	r3, #12
 80157b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b4:	e853 3f00 	ldrex	r3, [r3]
 80157b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80157ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80157c0:	667b      	str	r3, [r7, #100]	; 0x64
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	330c      	adds	r3, #12
 80157c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80157ca:	647a      	str	r2, [r7, #68]	; 0x44
 80157cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80157d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157d2:	e841 2300 	strex	r3, r2, [r1]
 80157d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80157d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d1e5      	bne.n	80157aa <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	3314      	adds	r3, #20
 80157e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e8:	e853 3f00 	ldrex	r3, [r3]
 80157ec:	623b      	str	r3, [r7, #32]
   return(result);
 80157ee:	6a3b      	ldr	r3, [r7, #32]
 80157f0:	f023 0301 	bic.w	r3, r3, #1
 80157f4:	663b      	str	r3, [r7, #96]	; 0x60
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	3314      	adds	r3, #20
 80157fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80157fe:	633a      	str	r2, [r7, #48]	; 0x30
 8015800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015806:	e841 2300 	strex	r3, r2, [r1]
 801580a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801580e:	2b00      	cmp	r3, #0
 8015810:	d1e5      	bne.n	80157de <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	3314      	adds	r3, #20
 8015818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	e853 3f00 	ldrex	r3, [r3]
 8015820:	60fb      	str	r3, [r7, #12]
   return(result);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015828:	65fb      	str	r3, [r7, #92]	; 0x5c
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	3314      	adds	r3, #20
 8015830:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015832:	61fa      	str	r2, [r7, #28]
 8015834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015836:	69b9      	ldr	r1, [r7, #24]
 8015838:	69fa      	ldr	r2, [r7, #28]
 801583a:	e841 2300 	strex	r3, r2, [r1]
 801583e:	617b      	str	r3, [r7, #20]
   return(result);
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1e5      	bne.n	8015812 <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2200      	movs	r2, #0
 801584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801584e:	2300      	movs	r3, #0
}
 8015850:	4618      	mov	r0, r3
 8015852:	3774      	adds	r7, #116	; 0x74
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr

0801585c <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 801585c:	b480      	push	{r7}
 801585e:	b09d      	sub	sp, #116	; 0x74
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801586a:	2b01      	cmp	r3, #1
 801586c:	d101      	bne.n	8015872 <HAL_UART_DMAResume+0x16>
 801586e:	2302      	movs	r3, #2
 8015870:	e087      	b.n	8015982 <HAL_UART_DMAResume+0x126>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2201      	movs	r2, #1
 8015876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015880:	b2db      	uxtb	r3, r3
 8015882:	2b21      	cmp	r3, #33	; 0x21
 8015884:	d119      	bne.n	80158ba <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	3314      	adds	r3, #20
 801588c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015890:	e853 3f00 	ldrex	r3, [r3]
 8015894:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801589c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	3314      	adds	r3, #20
 80158a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80158a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80158a8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80158ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80158ae:	e841 2300 	strex	r3, r2, [r1]
 80158b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80158b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d1e5      	bne.n	8015886 <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	2b22      	cmp	r3, #34	; 0x22
 80158c4:	d158      	bne.n	8015978 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80158c6:	2300      	movs	r3, #0
 80158c8:	60fb      	str	r3, [r7, #12]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	60fb      	str	r3, [r7, #12]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	60fb      	str	r3, [r7, #12]
 80158da:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	330c      	adds	r3, #12
 80158e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158e6:	e853 3f00 	ldrex	r3, [r3]
 80158ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80158ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80158f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	330c      	adds	r3, #12
 80158fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80158fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80158fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015900:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015904:	e841 2300 	strex	r3, r2, [r1]
 8015908:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801590c:	2b00      	cmp	r3, #0
 801590e:	d1e5      	bne.n	80158dc <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	3314      	adds	r3, #20
 8015916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591a:	e853 3f00 	ldrex	r3, [r3]
 801591e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015922:	f043 0301 	orr.w	r3, r3, #1
 8015926:	667b      	str	r3, [r7, #100]	; 0x64
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	3314      	adds	r3, #20
 801592e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015930:	637a      	str	r2, [r7, #52]	; 0x34
 8015932:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015938:	e841 2300 	strex	r3, r2, [r1]
 801593c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015940:	2b00      	cmp	r3, #0
 8015942:	d1e5      	bne.n	8015910 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	3314      	adds	r3, #20
 801594a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	e853 3f00 	ldrex	r3, [r3]
 8015952:	613b      	str	r3, [r7, #16]
   return(result);
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801595a:	663b      	str	r3, [r7, #96]	; 0x60
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	3314      	adds	r3, #20
 8015962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015964:	623a      	str	r2, [r7, #32]
 8015966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015968:	69f9      	ldr	r1, [r7, #28]
 801596a:	6a3a      	ldr	r2, [r7, #32]
 801596c:	e841 2300 	strex	r3, r2, [r1]
 8015970:	61bb      	str	r3, [r7, #24]
   return(result);
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d1e5      	bne.n	8015944 <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2200      	movs	r2, #0
 801597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015980:	2300      	movs	r3, #0
}
 8015982:	4618      	mov	r0, r3
 8015984:	3774      	adds	r7, #116	; 0x74
 8015986:	46bd      	mov	sp, r7
 8015988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598c:	4770      	bx	lr

0801598e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b090      	sub	sp, #64	; 0x40
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015996:	2300      	movs	r3, #0
 8015998:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	695b      	ldr	r3, [r3, #20]
 80159a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159a4:	2b80      	cmp	r3, #128	; 0x80
 80159a6:	bf0c      	ite	eq
 80159a8:	2301      	moveq	r3, #1
 80159aa:	2300      	movne	r3, #0
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80159b6:	b2db      	uxtb	r3, r3
 80159b8:	2b21      	cmp	r3, #33	; 0x21
 80159ba:	d128      	bne.n	8015a0e <HAL_UART_DMAStop+0x80>
 80159bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d025      	beq.n	8015a0e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	3314      	adds	r3, #20
 80159c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159cc:	e853 3f00 	ldrex	r3, [r3]
 80159d0:	623b      	str	r3, [r7, #32]
   return(result);
 80159d2:	6a3b      	ldr	r3, [r7, #32]
 80159d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80159d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	3314      	adds	r3, #20
 80159e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159e2:	633a      	str	r2, [r7, #48]	; 0x30
 80159e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159ea:	e841 2300 	strex	r3, r2, [r1]
 80159ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80159f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d1e5      	bne.n	80159c2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d004      	beq.n	8015a08 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f1 fed7 	bl	80077b6 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f001 fcd1 	bl	80173b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	695b      	ldr	r3, [r3, #20]
 8015a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a18:	2b40      	cmp	r3, #64	; 0x40
 8015a1a:	bf0c      	ite	eq
 8015a1c:	2301      	moveq	r3, #1
 8015a1e:	2300      	movne	r3, #0
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	2b22      	cmp	r3, #34	; 0x22
 8015a2e:	d128      	bne.n	8015a82 <HAL_UART_DMAStop+0xf4>
 8015a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d025      	beq.n	8015a82 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	3314      	adds	r3, #20
 8015a3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	e853 3f00 	ldrex	r3, [r3]
 8015a44:	60fb      	str	r3, [r7, #12]
   return(result);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	3314      	adds	r3, #20
 8015a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a56:	61fa      	str	r2, [r7, #28]
 8015a58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a5a:	69b9      	ldr	r1, [r7, #24]
 8015a5c:	69fa      	ldr	r2, [r7, #28]
 8015a5e:	e841 2300 	strex	r3, r2, [r1]
 8015a62:	617b      	str	r3, [r7, #20]
   return(result);
 8015a64:	697b      	ldr	r3, [r7, #20]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d1e5      	bne.n	8015a36 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d004      	beq.n	8015a7c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7f1 fe9d 	bl	80077b6 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f001 fcbf 	bl	8017400 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8015a82:	2300      	movs	r3, #0
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3740      	adds	r7, #64	; 0x40
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}

08015a8c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b088      	sub	sp, #32
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	603b      	str	r3, [r7, #0]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b20      	cmp	r3, #32
 8015aa6:	f040 80c9 	bne.w	8015c3c <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d002      	beq.n	8015ab6 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8015ab0:	88fb      	ldrh	r3, [r7, #6]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d101      	bne.n	8015aba <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e0c1      	b.n	8015c3e <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	d101      	bne.n	8015ac8 <HAL_UARTEx_ReceiveToIdle+0x3c>
 8015ac4:	2302      	movs	r3, #2
 8015ac6:	e0ba      	b.n	8015c3e <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	2201      	movs	r2, #1
 8015acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	2222      	movs	r2, #34	; 0x22
 8015ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2201      	movs	r2, #1
 8015ae2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015ae4:	f7f0 fba6 	bl	8006234 <HAL_GetTick>
 8015ae8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	88fa      	ldrh	r2, [r7, #6]
 8015aee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	88fa      	ldrh	r2, [r7, #6]
 8015af4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	689b      	ldr	r3, [r3, #8]
 8015afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015afe:	d108      	bne.n	8015b12 <HAL_UARTEx_ReceiveToIdle+0x86>
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	691b      	ldr	r3, [r3, #16]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d104      	bne.n	8015b12 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	61bb      	str	r3, [r7, #24]
 8015b10:	e003      	b.n	8015b1a <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015b16:	2300      	movs	r3, #0
 8015b18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	2200      	movs	r2, #0
 8015b26:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015b28:	e074      	b.n	8015c14 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f003 0310 	and.w	r3, r3, #16
 8015b34:	2b10      	cmp	r3, #16
 8015b36:	d114      	bne.n	8015b62 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015b38:	2300      	movs	r3, #0
 8015b3a:	613b      	str	r3, [r7, #16]
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	613b      	str	r3, [r7, #16]
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	685b      	ldr	r3, [r3, #4]
 8015b4a:	613b      	str	r3, [r7, #16]
 8015b4c:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	881b      	ldrh	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d005      	beq.n	8015b62 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	2220      	movs	r2, #32
 8015b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	e06d      	b.n	8015c3e <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f003 0320 	and.w	r3, r3, #32
 8015b6c:	2b20      	cmp	r3, #32
 8015b6e:	d13c      	bne.n	8015bea <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d10c      	bne.n	8015b90 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015b88:	69bb      	ldr	r3, [r7, #24]
 8015b8a:	3302      	adds	r3, #2
 8015b8c:	61bb      	str	r3, [r7, #24]
 8015b8e:	e01f      	b.n	8015bd0 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	689b      	ldr	r3, [r3, #8]
 8015b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b98:	d007      	beq.n	8015baa <HAL_UARTEx_ReceiveToIdle+0x11e>
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	689b      	ldr	r3, [r3, #8]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d10a      	bne.n	8015bb8 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	691b      	ldr	r3, [r3, #16]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d106      	bne.n	8015bb8 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	b2da      	uxtb	r2, r3
 8015bb2:	69fb      	ldr	r3, [r7, #28]
 8015bb4:	701a      	strb	r2, [r3, #0]
 8015bb6:	e008      	b.n	8015bca <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	b2db      	uxtb	r3, r3
 8015bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bc4:	b2da      	uxtb	r2, r3
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8015bca:	69fb      	ldr	r3, [r7, #28]
 8015bcc:	3301      	adds	r3, #1
 8015bce:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	881b      	ldrh	r3, [r3, #0]
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	b29a      	uxth	r2, r3
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015be0:	b29b      	uxth	r3, r3
 8015be2:	3b01      	subs	r3, #1
 8015be4:	b29a      	uxth	r2, r3
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf0:	d010      	beq.n	8015c14 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015bf2:	f7f0 fb1f 	bl	8006234 <HAL_GetTick>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d302      	bcc.n	8015c08 <HAL_UARTEx_ReceiveToIdle+0x17c>
 8015c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d105      	bne.n	8015c14 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	2220      	movs	r2, #32
 8015c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8015c10:	2303      	movs	r3, #3
 8015c12:	e014      	b.n	8015c3e <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d185      	bne.n	8015b2a <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	b29a      	uxth	r2, r3
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2220      	movs	r2, #32
 8015c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e000      	b.n	8015c3e <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8015c3c:	2302      	movs	r3, #2
  }
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3720      	adds	r7, #32
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015c46:	b580      	push	{r7, lr}
 8015c48:	b08c      	sub	sp, #48	; 0x30
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	60f8      	str	r0, [r7, #12]
 8015c4e:	60b9      	str	r1, [r7, #8]
 8015c50:	4613      	mov	r3, r2
 8015c52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b20      	cmp	r3, #32
 8015c5e:	d152      	bne.n	8015d06 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d002      	beq.n	8015c6c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8015c66:	88fb      	ldrh	r3, [r7, #6]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d101      	bne.n	8015c70 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	e04b      	b.n	8015d08 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d101      	bne.n	8015c7e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8015c7a:	2302      	movs	r3, #2
 8015c7c:	e044      	b.n	8015d08 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	2201      	movs	r2, #1
 8015c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2201      	movs	r2, #1
 8015c8a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8015c8c:	88fb      	ldrh	r3, [r7, #6]
 8015c8e:	461a      	mov	r2, r3
 8015c90:	68b9      	ldr	r1, [r7, #8]
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f001 fab8 	bl	8017208 <UART_Start_Receive_IT>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d12c      	bne.n	8015d00 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	d125      	bne.n	8015cfa <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015cae:	2300      	movs	r3, #0
 8015cb0:	613b      	str	r3, [r7, #16]
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	613b      	str	r3, [r7, #16]
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	613b      	str	r3, [r7, #16]
 8015cc2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	330c      	adds	r3, #12
 8015cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ccc:	69bb      	ldr	r3, [r7, #24]
 8015cce:	e853 3f00 	ldrex	r3, [r3]
 8015cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	f043 0310 	orr.w	r3, r3, #16
 8015cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	330c      	adds	r3, #12
 8015ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8015ce6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ce8:	6a39      	ldr	r1, [r7, #32]
 8015cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015cec:	e841 2300 	strex	r3, r2, [r1]
 8015cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d1e5      	bne.n	8015cc4 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8015cf8:	e002      	b.n	8015d00 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d04:	e000      	b.n	8015d08 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8015d06:	2302      	movs	r3, #2
  }
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3730      	adds	r7, #48	; 0x30
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b08c      	sub	sp, #48	; 0x30
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	4613      	mov	r3, r2
 8015d1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d24:	b2db      	uxtb	r3, r3
 8015d26:	2b20      	cmp	r3, #32
 8015d28:	d152      	bne.n	8015dd0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d002      	beq.n	8015d36 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8015d30:	88fb      	ldrh	r3, [r7, #6]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d101      	bne.n	8015d3a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8015d36:	2301      	movs	r3, #1
 8015d38:	e04b      	b.n	8015dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015d40:	2b01      	cmp	r3, #1
 8015d42:	d101      	bne.n	8015d48 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8015d44:	2302      	movs	r3, #2
 8015d46:	e044      	b.n	8015dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2201      	movs	r2, #1
 8015d54:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015d56:	88fb      	ldrh	r3, [r7, #6]
 8015d58:	461a      	mov	r2, r3
 8015d5a:	68b9      	ldr	r1, [r7, #8]
 8015d5c:	68f8      	ldr	r0, [r7, #12]
 8015d5e:	f001 fa8d 	bl	801727c <UART_Start_Receive_DMA>
 8015d62:	4603      	mov	r3, r0
 8015d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d12c      	bne.n	8015dca <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d74:	2b01      	cmp	r3, #1
 8015d76:	d125      	bne.n	8015dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015d78:	2300      	movs	r3, #0
 8015d7a:	613b      	str	r3, [r7, #16]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	613b      	str	r3, [r7, #16]
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	613b      	str	r3, [r7, #16]
 8015d8c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	330c      	adds	r3, #12
 8015d94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d96:	69bb      	ldr	r3, [r7, #24]
 8015d98:	e853 3f00 	ldrex	r3, [r3]
 8015d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	f043 0310 	orr.w	r3, r3, #16
 8015da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	330c      	adds	r3, #12
 8015dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dae:	627a      	str	r2, [r7, #36]	; 0x24
 8015db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015db2:	6a39      	ldr	r1, [r7, #32]
 8015db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015db6:	e841 2300 	strex	r3, r2, [r1]
 8015dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d1e5      	bne.n	8015d8e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8015dc2:	e002      	b.n	8015dca <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dce:	e000      	b.n	8015dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8015dd0:	2302      	movs	r3, #2
  }
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	3730      	adds	r7, #48	; 0x30
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b0a0      	sub	sp, #128	; 0x80
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	330c      	adds	r3, #12
 8015de8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015dec:	e853 3f00 	ldrex	r3, [r3]
 8015df0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8015df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015df4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8015df8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	330c      	adds	r3, #12
 8015e00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015e02:	66ba      	str	r2, [r7, #104]	; 0x68
 8015e04:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015e08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015e0a:	e841 2300 	strex	r3, r2, [r1]
 8015e0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d1e5      	bne.n	8015de2 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	3314      	adds	r3, #20
 8015e1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e20:	e853 3f00 	ldrex	r3, [r3]
 8015e24:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e28:	f023 0301 	bic.w	r3, r3, #1
 8015e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	3314      	adds	r3, #20
 8015e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015e36:	657a      	str	r2, [r7, #84]	; 0x54
 8015e38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015e3e:	e841 2300 	strex	r3, r2, [r1]
 8015e42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d1e5      	bne.n	8015e16 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d119      	bne.n	8015e86 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	330c      	adds	r3, #12
 8015e58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e5c:	e853 3f00 	ldrex	r3, [r3]
 8015e60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e64:	f023 0310 	bic.w	r3, r3, #16
 8015e68:	677b      	str	r3, [r7, #116]	; 0x74
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	330c      	adds	r3, #12
 8015e70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015e72:	643a      	str	r2, [r7, #64]	; 0x40
 8015e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015e7a:	e841 2300 	strex	r3, r2, [r1]
 8015e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1e5      	bne.n	8015e52 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	695b      	ldr	r3, [r3, #20]
 8015e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015e90:	2b80      	cmp	r3, #128	; 0x80
 8015e92:	d136      	bne.n	8015f02 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	3314      	adds	r3, #20
 8015e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e9c:	6a3b      	ldr	r3, [r7, #32]
 8015e9e:	e853 3f00 	ldrex	r3, [r3]
 8015ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	3314      	adds	r3, #20
 8015eb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ebc:	e841 2300 	strex	r3, r2, [r1]
 8015ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d1e5      	bne.n	8015e94 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d018      	beq.n	8015f02 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7f1 fc6a 	bl	80077b6 <HAL_DMA_Abort>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00c      	beq.n	8015f02 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7f2 f826 	bl	8007f3e <HAL_DMA_GetError>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b20      	cmp	r3, #32
 8015ef6:	d104      	bne.n	8015f02 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2210      	movs	r2, #16
 8015efc:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8015efe:	2303      	movs	r3, #3
 8015f00:	e052      	b.n	8015fa8 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	695b      	ldr	r3, [r3, #20]
 8015f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f0c:	2b40      	cmp	r3, #64	; 0x40
 8015f0e:	d136      	bne.n	8015f7e <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	3314      	adds	r3, #20
 8015f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	e853 3f00 	ldrex	r3, [r3]
 8015f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	3314      	adds	r3, #20
 8015f2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f30:	61ba      	str	r2, [r7, #24]
 8015f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f34:	6979      	ldr	r1, [r7, #20]
 8015f36:	69ba      	ldr	r2, [r7, #24]
 8015f38:	e841 2300 	strex	r3, r2, [r1]
 8015f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d1e5      	bne.n	8015f10 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d018      	beq.n	8015f7e <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f50:	2200      	movs	r2, #0
 8015f52:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f1 fc2c 	bl	80077b6 <HAL_DMA_Abort>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d00c      	beq.n	8015f7e <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7f1 ffe8 	bl	8007f3e <HAL_DMA_GetError>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b20      	cmp	r3, #32
 8015f72:	d104      	bne.n	8015f7e <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2210      	movs	r2, #16
 8015f78:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	e014      	b.n	8015fa8 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2200      	movs	r2, #0
 8015f82:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2200      	movs	r2, #0
 8015f88:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2220      	movs	r2, #32
 8015f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2220      	movs	r2, #32
 8015f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8015fa6:	2300      	movs	r3, #0
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3780      	adds	r7, #128	; 0x80
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}

08015fb0 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b08e      	sub	sp, #56	; 0x38
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	330c      	adds	r3, #12
 8015fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fc0:	6a3b      	ldr	r3, [r7, #32]
 8015fc2:	e853 3f00 	ldrex	r3, [r3]
 8015fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fc8:	69fb      	ldr	r3, [r7, #28]
 8015fca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015fce:	637b      	str	r3, [r7, #52]	; 0x34
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	330c      	adds	r3, #12
 8015fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fe0:	e841 2300 	strex	r3, r2, [r1]
 8015fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d1e5      	bne.n	8015fb8 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	695b      	ldr	r3, [r3, #20]
 8015ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015ff6:	2b80      	cmp	r3, #128	; 0x80
 8015ff8:	d136      	bne.n	8016068 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	3314      	adds	r3, #20
 8016000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	e853 3f00 	ldrex	r3, [r3]
 8016008:	60bb      	str	r3, [r7, #8]
   return(result);
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016010:	633b      	str	r3, [r7, #48]	; 0x30
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	3314      	adds	r3, #20
 8016018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801601a:	61ba      	str	r2, [r7, #24]
 801601c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801601e:	6979      	ldr	r1, [r7, #20]
 8016020:	69ba      	ldr	r2, [r7, #24]
 8016022:	e841 2300 	strex	r3, r2, [r1]
 8016026:	613b      	str	r3, [r7, #16]
   return(result);
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d1e5      	bne.n	8015ffa <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016032:	2b00      	cmp	r3, #0
 8016034:	d018      	beq.n	8016068 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801603a:	2200      	movs	r2, #0
 801603c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016042:	4618      	mov	r0, r3
 8016044:	f7f1 fbb7 	bl	80077b6 <HAL_DMA_Abort>
 8016048:	4603      	mov	r3, r0
 801604a:	2b00      	cmp	r3, #0
 801604c:	d00c      	beq.n	8016068 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016052:	4618      	mov	r0, r3
 8016054:	f7f1 ff73 	bl	8007f3e <HAL_DMA_GetError>
 8016058:	4603      	mov	r3, r0
 801605a:	2b20      	cmp	r3, #32
 801605c:	d104      	bne.n	8016068 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2210      	movs	r2, #16
 8016062:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016064:	2303      	movs	r3, #3
 8016066:	e007      	b.n	8016078 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2200      	movs	r2, #0
 801606c:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2220      	movs	r2, #32
 8016072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016076:	2300      	movs	r3, #0
}
 8016078:	4618      	mov	r0, r3
 801607a:	3738      	adds	r7, #56	; 0x38
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b09a      	sub	sp, #104	; 0x68
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	330c      	adds	r3, #12
 801608e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016092:	e853 3f00 	ldrex	r3, [r3]
 8016096:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801609a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801609e:	667b      	str	r3, [r7, #100]	; 0x64
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	330c      	adds	r3, #12
 80160a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80160a8:	657a      	str	r2, [r7, #84]	; 0x54
 80160aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80160ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80160b0:	e841 2300 	strex	r3, r2, [r1]
 80160b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80160b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1e5      	bne.n	8016088 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	3314      	adds	r3, #20
 80160c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c6:	e853 3f00 	ldrex	r3, [r3]
 80160ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80160cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ce:	f023 0301 	bic.w	r3, r3, #1
 80160d2:	663b      	str	r3, [r7, #96]	; 0x60
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	3314      	adds	r3, #20
 80160da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80160dc:	643a      	str	r2, [r7, #64]	; 0x40
 80160de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80160e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80160e4:	e841 2300 	strex	r3, r2, [r1]
 80160e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80160ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d1e5      	bne.n	80160bc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d119      	bne.n	801612c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	330c      	adds	r3, #12
 80160fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016100:	6a3b      	ldr	r3, [r7, #32]
 8016102:	e853 3f00 	ldrex	r3, [r3]
 8016106:	61fb      	str	r3, [r7, #28]
   return(result);
 8016108:	69fb      	ldr	r3, [r7, #28]
 801610a:	f023 0310 	bic.w	r3, r3, #16
 801610e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	330c      	adds	r3, #12
 8016116:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016118:	62fa      	str	r2, [r7, #44]	; 0x2c
 801611a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801611c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801611e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016120:	e841 2300 	strex	r3, r2, [r1]
 8016124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1e5      	bne.n	80160f8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	695b      	ldr	r3, [r3, #20]
 8016132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016136:	2b40      	cmp	r3, #64	; 0x40
 8016138:	d136      	bne.n	80161a8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	3314      	adds	r3, #20
 8016140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	e853 3f00 	ldrex	r3, [r3]
 8016148:	60bb      	str	r3, [r7, #8]
   return(result);
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016150:	65bb      	str	r3, [r7, #88]	; 0x58
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	3314      	adds	r3, #20
 8016158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801615a:	61ba      	str	r2, [r7, #24]
 801615c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801615e:	6979      	ldr	r1, [r7, #20]
 8016160:	69ba      	ldr	r2, [r7, #24]
 8016162:	e841 2300 	strex	r3, r2, [r1]
 8016166:	613b      	str	r3, [r7, #16]
   return(result);
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d1e5      	bne.n	801613a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016172:	2b00      	cmp	r3, #0
 8016174:	d018      	beq.n	80161a8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801617a:	2200      	movs	r2, #0
 801617c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016182:	4618      	mov	r0, r3
 8016184:	f7f1 fb17 	bl	80077b6 <HAL_DMA_Abort>
 8016188:	4603      	mov	r3, r0
 801618a:	2b00      	cmp	r3, #0
 801618c:	d00c      	beq.n	80161a8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016192:	4618      	mov	r0, r3
 8016194:	f7f1 fed3 	bl	8007f3e <HAL_DMA_GetError>
 8016198:	4603      	mov	r3, r0
 801619a:	2b20      	cmp	r3, #32
 801619c:	d104      	bne.n	80161a8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2210      	movs	r2, #16
 80161a2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80161a4:	2303      	movs	r3, #3
 80161a6:	e00a      	b.n	80161be <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2200      	movs	r2, #0
 80161ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2220      	movs	r2, #32
 80161b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2200      	movs	r2, #0
 80161ba:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80161bc:	2300      	movs	r3, #0
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3768      	adds	r7, #104	; 0x68
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}

080161c6 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80161c6:	b580      	push	{r7, lr}
 80161c8:	b0a2      	sub	sp, #136	; 0x88
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80161ce:	2301      	movs	r3, #1
 80161d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	330c      	adds	r3, #12
 80161da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161de:	e853 3f00 	ldrex	r3, [r3]
 80161e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80161e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161e6:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80161ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	330c      	adds	r3, #12
 80161f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80161f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80161fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80161fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016200:	e841 2300 	strex	r3, r2, [r1]
 8016204:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016208:	2b00      	cmp	r3, #0
 801620a:	d1e3      	bne.n	80161d4 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	3314      	adds	r3, #20
 8016212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016216:	e853 3f00 	ldrex	r3, [r3]
 801621a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801621c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801621e:	f023 0301 	bic.w	r3, r3, #1
 8016222:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	3314      	adds	r3, #20
 801622a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801622c:	65ba      	str	r2, [r7, #88]	; 0x58
 801622e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016234:	e841 2300 	strex	r3, r2, [r1]
 8016238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801623c:	2b00      	cmp	r3, #0
 801623e:	d1e5      	bne.n	801620c <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016244:	2b01      	cmp	r3, #1
 8016246:	d119      	bne.n	801627c <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	330c      	adds	r3, #12
 801624e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016252:	e853 3f00 	ldrex	r3, [r3]
 8016256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801625a:	f023 0310 	bic.w	r3, r3, #16
 801625e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	330c      	adds	r3, #12
 8016266:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016268:	647a      	str	r2, [r7, #68]	; 0x44
 801626a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801626c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801626e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016270:	e841 2300 	strex	r3, r2, [r1]
 8016274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016278:	2b00      	cmp	r3, #0
 801627a:	d1e5      	bne.n	8016248 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016280:	2b00      	cmp	r3, #0
 8016282:	d00f      	beq.n	80162a4 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	695b      	ldr	r3, [r3, #20]
 801628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801628e:	2b80      	cmp	r3, #128	; 0x80
 8016290:	d104      	bne.n	801629c <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016296:	4a54      	ldr	r2, [pc, #336]	; (80163e8 <HAL_UART_Abort_IT+0x222>)
 8016298:	651a      	str	r2, [r3, #80]	; 0x50
 801629a:	e003      	b.n	80162a4 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162a0:	2200      	movs	r2, #0
 80162a2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d00f      	beq.n	80162cc <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	695b      	ldr	r3, [r3, #20]
 80162b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80162b6:	2b40      	cmp	r3, #64	; 0x40
 80162b8:	d104      	bne.n	80162c4 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162be:	4a4b      	ldr	r2, [pc, #300]	; (80163ec <HAL_UART_Abort_IT+0x226>)
 80162c0:	651a      	str	r2, [r3, #80]	; 0x50
 80162c2:	e003      	b.n	80162cc <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162c8:	2200      	movs	r2, #0
 80162ca:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	695b      	ldr	r3, [r3, #20]
 80162d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162d6:	2b80      	cmp	r3, #128	; 0x80
 80162d8:	d12d      	bne.n	8016336 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	3314      	adds	r3, #20
 80162e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e4:	e853 3f00 	ldrex	r3, [r3]
 80162e8:	623b      	str	r3, [r7, #32]
   return(result);
 80162ea:	6a3b      	ldr	r3, [r7, #32]
 80162ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80162f0:	677b      	str	r3, [r7, #116]	; 0x74
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	3314      	adds	r3, #20
 80162f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80162fa:	633a      	str	r2, [r7, #48]	; 0x30
 80162fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016302:	e841 2300 	strex	r3, r2, [r1]
 8016306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801630a:	2b00      	cmp	r3, #0
 801630c:	d1e5      	bne.n	80162da <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016312:	2b00      	cmp	r3, #0
 8016314:	d00f      	beq.n	8016336 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801631a:	4618      	mov	r0, r3
 801631c:	f7f1 fabb 	bl	8007896 <HAL_DMA_Abort_IT>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	d004      	beq.n	8016330 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801632a:	2200      	movs	r2, #0
 801632c:	651a      	str	r2, [r3, #80]	; 0x50
 801632e:	e002      	b.n	8016336 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016330:	2300      	movs	r3, #0
 8016332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	695b      	ldr	r3, [r3, #20]
 801633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016340:	2b40      	cmp	r3, #64	; 0x40
 8016342:	d130      	bne.n	80163a6 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	3314      	adds	r3, #20
 801634a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801634c:	693b      	ldr	r3, [r7, #16]
 801634e:	e853 3f00 	ldrex	r3, [r3]
 8016352:	60fb      	str	r3, [r7, #12]
   return(result);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801635a:	673b      	str	r3, [r7, #112]	; 0x70
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	3314      	adds	r3, #20
 8016362:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016364:	61fa      	str	r2, [r7, #28]
 8016366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016368:	69b9      	ldr	r1, [r7, #24]
 801636a:	69fa      	ldr	r2, [r7, #28]
 801636c:	e841 2300 	strex	r3, r2, [r1]
 8016370:	617b      	str	r3, [r7, #20]
   return(result);
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d1e5      	bne.n	8016344 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801637c:	2b00      	cmp	r3, #0
 801637e:	d012      	beq.n	80163a6 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016384:	4618      	mov	r0, r3
 8016386:	f7f1 fa86 	bl	8007896 <HAL_DMA_Abort_IT>
 801638a:	4603      	mov	r3, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d007      	beq.n	80163a0 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016394:	2200      	movs	r2, #0
 8016396:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8016398:	2301      	movs	r3, #1
 801639a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801639e:	e002      	b.n	80163a6 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80163a0:	2300      	movs	r3, #0
 80163a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80163a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	d116      	bne.n	80163dc <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2200      	movs	r2, #0
 80163b2:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2200      	movs	r2, #0
 80163be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2220      	movs	r2, #32
 80163c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2220      	movs	r2, #32
 80163cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2200      	movs	r2, #0
 80163d4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f000 fbe5 	bl	8016ba6 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80163dc:	2300      	movs	r3, #0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3788      	adds	r7, #136	; 0x88
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	080174ef 	.word	0x080174ef
 80163ec:	0801754f 	.word	0x0801754f

080163f0 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b08e      	sub	sp, #56	; 0x38
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	330c      	adds	r3, #12
 80163fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016400:	6a3b      	ldr	r3, [r7, #32]
 8016402:	e853 3f00 	ldrex	r3, [r3]
 8016406:	61fb      	str	r3, [r7, #28]
   return(result);
 8016408:	69fb      	ldr	r3, [r7, #28]
 801640a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801640e:	637b      	str	r3, [r7, #52]	; 0x34
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	330c      	adds	r3, #12
 8016416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016418:	62fa      	str	r2, [r7, #44]	; 0x2c
 801641a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801641c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801641e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016420:	e841 2300 	strex	r3, r2, [r1]
 8016424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016428:	2b00      	cmp	r3, #0
 801642a:	d1e5      	bne.n	80163f8 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	695b      	ldr	r3, [r3, #20]
 8016432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016436:	2b80      	cmp	r3, #128	; 0x80
 8016438:	d13c      	bne.n	80164b4 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	3314      	adds	r3, #20
 8016440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	e853 3f00 	ldrex	r3, [r3]
 8016448:	60bb      	str	r3, [r7, #8]
   return(result);
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016450:	633b      	str	r3, [r7, #48]	; 0x30
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	3314      	adds	r3, #20
 8016458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801645a:	61ba      	str	r2, [r7, #24]
 801645c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801645e:	6979      	ldr	r1, [r7, #20]
 8016460:	69ba      	ldr	r2, [r7, #24]
 8016462:	e841 2300 	strex	r3, r2, [r1]
 8016466:	613b      	str	r3, [r7, #16]
   return(result);
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d1e5      	bne.n	801643a <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016472:	2b00      	cmp	r3, #0
 8016474:	d013      	beq.n	801649e <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801647a:	4a16      	ldr	r2, [pc, #88]	; (80164d4 <HAL_UART_AbortTransmit_IT+0xe4>)
 801647c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016482:	4618      	mov	r0, r3
 8016484:	f7f1 fa07 	bl	8007896 <HAL_DMA_Abort_IT>
 8016488:	4603      	mov	r3, r0
 801648a:	2b00      	cmp	r3, #0
 801648c:	d01c      	beq.n	80164c8 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016498:	4610      	mov	r0, r2
 801649a:	4798      	blx	r3
 801649c:	e014      	b.n	80164c8 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	2200      	movs	r2, #0
 80164a2:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	2220      	movs	r2, #32
 80164a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f000 fb84 	bl	8016bba <HAL_UART_AbortTransmitCpltCallback>
 80164b2:	e009      	b.n	80164c8 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2200      	movs	r2, #0
 80164b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2220      	movs	r2, #32
 80164be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f000 fb79 	bl	8016bba <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80164c8:	2300      	movs	r3, #0
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3738      	adds	r7, #56	; 0x38
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	080175af 	.word	0x080175af

080164d8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b09a      	sub	sp, #104	; 0x68
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	330c      	adds	r3, #12
 80164e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164ea:	e853 3f00 	ldrex	r3, [r3]
 80164ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80164f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80164f6:	667b      	str	r3, [r7, #100]	; 0x64
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	330c      	adds	r3, #12
 80164fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016500:	657a      	str	r2, [r7, #84]	; 0x54
 8016502:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016504:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016508:	e841 2300 	strex	r3, r2, [r1]
 801650c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801650e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016510:	2b00      	cmp	r3, #0
 8016512:	d1e5      	bne.n	80164e0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	3314      	adds	r3, #20
 801651a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801651e:	e853 3f00 	ldrex	r3, [r3]
 8016522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016526:	f023 0301 	bic.w	r3, r3, #1
 801652a:	663b      	str	r3, [r7, #96]	; 0x60
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	3314      	adds	r3, #20
 8016532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016534:	643a      	str	r2, [r7, #64]	; 0x40
 8016536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801653a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801653c:	e841 2300 	strex	r3, r2, [r1]
 8016540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1e5      	bne.n	8016514 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801654c:	2b01      	cmp	r3, #1
 801654e:	d119      	bne.n	8016584 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	330c      	adds	r3, #12
 8016556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016558:	6a3b      	ldr	r3, [r7, #32]
 801655a:	e853 3f00 	ldrex	r3, [r3]
 801655e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	f023 0310 	bic.w	r3, r3, #16
 8016566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	330c      	adds	r3, #12
 801656e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016578:	e841 2300 	strex	r3, r2, [r1]
 801657c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	2b00      	cmp	r3, #0
 8016582:	d1e5      	bne.n	8016550 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	695b      	ldr	r3, [r3, #20]
 801658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801658e:	2b40      	cmp	r3, #64	; 0x40
 8016590:	d13f      	bne.n	8016612 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	3314      	adds	r3, #20
 8016598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	e853 3f00 	ldrex	r3, [r3]
 80165a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80165a2:	68bb      	ldr	r3, [r7, #8]
 80165a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80165a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	3314      	adds	r3, #20
 80165b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80165b2:	61ba      	str	r2, [r7, #24]
 80165b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165b6:	6979      	ldr	r1, [r7, #20]
 80165b8:	69ba      	ldr	r2, [r7, #24]
 80165ba:	e841 2300 	strex	r3, r2, [r1]
 80165be:	613b      	str	r3, [r7, #16]
   return(result);
 80165c0:	693b      	ldr	r3, [r7, #16]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d1e5      	bne.n	8016592 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d013      	beq.n	80165f6 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165d2:	4a19      	ldr	r2, [pc, #100]	; (8016638 <HAL_UART_AbortReceive_IT+0x160>)
 80165d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165da:	4618      	mov	r0, r3
 80165dc:	f7f1 f95b 	bl	8007896 <HAL_DMA_Abort_IT>
 80165e0:	4603      	mov	r3, r0
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d022      	beq.n	801662c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165ec:	687a      	ldr	r2, [r7, #4]
 80165ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80165f0:	4610      	mov	r0, r2
 80165f2:	4798      	blx	r3
 80165f4:	e01a      	b.n	801662c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2200      	movs	r2, #0
 80165fa:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2220      	movs	r2, #32
 8016600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fadf 	bl	8016bce <HAL_UART_AbortReceiveCpltCallback>
 8016610:	e00c      	b.n	801662c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	2200      	movs	r2, #0
 8016616:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2220      	movs	r2, #32
 801661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2200      	movs	r2, #0
 8016624:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f000 fad1 	bl	8016bce <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801662c:	2300      	movs	r3, #0
}
 801662e:	4618      	mov	r0, r3
 8016630:	3768      	adds	r7, #104	; 0x68
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	080175d9 	.word	0x080175d9

0801663c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b0ba      	sub	sp, #232	; 0xe8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	68db      	ldr	r3, [r3, #12]
 8016654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	695b      	ldr	r3, [r3, #20]
 801665e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016662:	2300      	movs	r3, #0
 8016664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8016668:	2300      	movs	r3, #0
 801666a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016672:	f003 030f 	and.w	r3, r3, #15
 8016676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801667a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801667e:	2b00      	cmp	r3, #0
 8016680:	d10f      	bne.n	80166a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016686:	f003 0320 	and.w	r3, r3, #32
 801668a:	2b00      	cmp	r3, #0
 801668c:	d009      	beq.n	80166a2 <HAL_UART_IRQHandler+0x66>
 801668e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016692:	f003 0320 	and.w	r3, r3, #32
 8016696:	2b00      	cmp	r3, #0
 8016698:	d003      	beq.n	80166a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801669a:	6878      	ldr	r0, [r7, #4]
 801669c:	f001 f81c 	bl	80176d8 <UART_Receive_IT>
      return;
 80166a0:	e256      	b.n	8016b50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80166a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	f000 80de 	beq.w	8016868 <HAL_UART_IRQHandler+0x22c>
 80166ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80166b0:	f003 0301 	and.w	r3, r3, #1
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d106      	bne.n	80166c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80166b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	f000 80d1 	beq.w	8016868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80166c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166ca:	f003 0301 	and.w	r3, r3, #1
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d00b      	beq.n	80166ea <HAL_UART_IRQHandler+0xae>
 80166d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d005      	beq.n	80166ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166e2:	f043 0201 	orr.w	r2, r3, #1
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80166ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80166ee:	f003 0304 	and.w	r3, r3, #4
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00b      	beq.n	801670e <HAL_UART_IRQHandler+0xd2>
 80166f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80166fa:	f003 0301 	and.w	r3, r3, #1
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d005      	beq.n	801670e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016706:	f043 0202 	orr.w	r2, r3, #2
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801670e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016712:	f003 0302 	and.w	r3, r3, #2
 8016716:	2b00      	cmp	r3, #0
 8016718:	d00b      	beq.n	8016732 <HAL_UART_IRQHandler+0xf6>
 801671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801671e:	f003 0301 	and.w	r3, r3, #1
 8016722:	2b00      	cmp	r3, #0
 8016724:	d005      	beq.n	8016732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801672a:	f043 0204 	orr.w	r2, r3, #4
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8016732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016736:	f003 0308 	and.w	r3, r3, #8
 801673a:	2b00      	cmp	r3, #0
 801673c:	d011      	beq.n	8016762 <HAL_UART_IRQHandler+0x126>
 801673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016742:	f003 0320 	and.w	r3, r3, #32
 8016746:	2b00      	cmp	r3, #0
 8016748:	d105      	bne.n	8016756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801674e:	f003 0301 	and.w	r3, r3, #1
 8016752:	2b00      	cmp	r3, #0
 8016754:	d005      	beq.n	8016762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801675a:	f043 0208 	orr.w	r2, r3, #8
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016766:	2b00      	cmp	r3, #0
 8016768:	f000 81ed 	beq.w	8016b46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016770:	f003 0320 	and.w	r3, r3, #32
 8016774:	2b00      	cmp	r3, #0
 8016776:	d008      	beq.n	801678a <HAL_UART_IRQHandler+0x14e>
 8016778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801677c:	f003 0320 	and.w	r3, r3, #32
 8016780:	2b00      	cmp	r3, #0
 8016782:	d002      	beq.n	801678a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f000 ffa7 	bl	80176d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	695b      	ldr	r3, [r3, #20]
 8016790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016794:	2b40      	cmp	r3, #64	; 0x40
 8016796:	bf0c      	ite	eq
 8016798:	2301      	moveq	r3, #1
 801679a:	2300      	movne	r3, #0
 801679c:	b2db      	uxtb	r3, r3
 801679e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167a6:	f003 0308 	and.w	r3, r3, #8
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d103      	bne.n	80167b6 <HAL_UART_IRQHandler+0x17a>
 80167ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d04f      	beq.n	8016856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f000 fe22 	bl	8017400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	695b      	ldr	r3, [r3, #20]
 80167c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167c6:	2b40      	cmp	r3, #64	; 0x40
 80167c8:	d141      	bne.n	801684e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	3314      	adds	r3, #20
 80167d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80167d8:	e853 3f00 	ldrex	r3, [r3]
 80167dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80167e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80167e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80167e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	3314      	adds	r3, #20
 80167f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80167f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80167fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016806:	e841 2300 	strex	r3, r2, [r1]
 801680a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801680e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016812:	2b00      	cmp	r3, #0
 8016814:	d1d9      	bne.n	80167ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801681a:	2b00      	cmp	r3, #0
 801681c:	d013      	beq.n	8016846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016822:	4a7d      	ldr	r2, [pc, #500]	; (8016a18 <HAL_UART_IRQHandler+0x3dc>)
 8016824:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801682a:	4618      	mov	r0, r3
 801682c:	f7f1 f833 	bl	8007896 <HAL_DMA_Abort_IT>
 8016830:	4603      	mov	r3, r0
 8016832:	2b00      	cmp	r3, #0
 8016834:	d016      	beq.n	8016864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801683a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016840:	4610      	mov	r0, r2
 8016842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016844:	e00e      	b.n	8016864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f000 f9a3 	bl	8016b92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801684c:	e00a      	b.n	8016864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f000 f99f 	bl	8016b92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016854:	e006      	b.n	8016864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f000 f99b 	bl	8016b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	2200      	movs	r2, #0
 8016860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016862:	e170      	b.n	8016b46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016864:	bf00      	nop
    return;
 8016866:	e16e      	b.n	8016b46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801686c:	2b01      	cmp	r3, #1
 801686e:	f040 814a 	bne.w	8016b06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016876:	f003 0310 	and.w	r3, r3, #16
 801687a:	2b00      	cmp	r3, #0
 801687c:	f000 8143 	beq.w	8016b06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016884:	f003 0310 	and.w	r3, r3, #16
 8016888:	2b00      	cmp	r3, #0
 801688a:	f000 813c 	beq.w	8016b06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801688e:	2300      	movs	r3, #0
 8016890:	60bb      	str	r3, [r7, #8]
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	60bb      	str	r3, [r7, #8]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	60bb      	str	r3, [r7, #8]
 80168a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	695b      	ldr	r3, [r3, #20]
 80168aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168ae:	2b40      	cmp	r3, #64	; 0x40
 80168b0:	f040 80b4 	bne.w	8016a1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	685b      	ldr	r3, [r3, #4]
 80168bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80168c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	f000 8140 	beq.w	8016b4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80168ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80168d2:	429a      	cmp	r2, r3
 80168d4:	f080 8139 	bcs.w	8016b4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80168de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168e4:	69db      	ldr	r3, [r3, #28]
 80168e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168ea:	f000 8088 	beq.w	80169fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	330c      	adds	r3, #12
 80168f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80168fc:	e853 3f00 	ldrex	r3, [r3]
 8016900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801690c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	330c      	adds	r3, #12
 8016916:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801691a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801691e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801692a:	e841 2300 	strex	r3, r2, [r1]
 801692e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016936:	2b00      	cmp	r3, #0
 8016938:	d1d9      	bne.n	80168ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	3314      	adds	r3, #20
 8016940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016944:	e853 3f00 	ldrex	r3, [r3]
 8016948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801694a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801694c:	f023 0301 	bic.w	r3, r3, #1
 8016950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	3314      	adds	r3, #20
 801695a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801695e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801696a:	e841 2300 	strex	r3, r2, [r1]
 801696e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016972:	2b00      	cmp	r3, #0
 8016974:	d1e1      	bne.n	801693a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	3314      	adds	r3, #20
 801697c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801697e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016980:	e853 3f00 	ldrex	r3, [r3]
 8016984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801698c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	3314      	adds	r3, #20
 8016996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801699a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801699c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801699e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80169a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80169a2:	e841 2300 	strex	r3, r2, [r1]
 80169a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80169a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d1e3      	bne.n	8016976 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2220      	movs	r2, #32
 80169b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2200      	movs	r2, #0
 80169ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	330c      	adds	r3, #12
 80169c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169c6:	e853 3f00 	ldrex	r3, [r3]
 80169ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80169cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169ce:	f023 0310 	bic.w	r3, r3, #16
 80169d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	330c      	adds	r3, #12
 80169dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80169e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80169e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80169e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80169e8:	e841 2300 	strex	r3, r2, [r1]
 80169ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80169ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d1e3      	bne.n	80169bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7f0 fedc 	bl	80077b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	1ad3      	subs	r3, r2, r3
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	4619      	mov	r1, r3
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 f8e7 	bl	8016be2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016a14:	e099      	b.n	8016b4a <HAL_UART_IRQHandler+0x50e>
 8016a16:	bf00      	nop
 8016a18:	080174c7 	.word	0x080174c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	1ad3      	subs	r3, r2, r3
 8016a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f000 808b 	beq.w	8016b4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8016a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	f000 8086 	beq.w	8016b4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	330c      	adds	r3, #12
 8016a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a4c:	e853 3f00 	ldrex	r3, [r3]
 8016a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	330c      	adds	r3, #12
 8016a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016a66:	647a      	str	r2, [r7, #68]	; 0x44
 8016a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a6e:	e841 2300 	strex	r3, r2, [r1]
 8016a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d1e3      	bne.n	8016a42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	3314      	adds	r3, #20
 8016a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a84:	e853 3f00 	ldrex	r3, [r3]
 8016a88:	623b      	str	r3, [r7, #32]
   return(result);
 8016a8a:	6a3b      	ldr	r3, [r7, #32]
 8016a8c:	f023 0301 	bic.w	r3, r3, #1
 8016a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	3314      	adds	r3, #20
 8016a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8016aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aa6:	e841 2300 	strex	r3, r2, [r1]
 8016aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d1e3      	bne.n	8016a7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	2220      	movs	r2, #32
 8016ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2200      	movs	r2, #0
 8016abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	330c      	adds	r3, #12
 8016ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	e853 3f00 	ldrex	r3, [r3]
 8016ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	f023 0310 	bic.w	r3, r3, #16
 8016ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	330c      	adds	r3, #12
 8016ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016ae4:	61fa      	str	r2, [r7, #28]
 8016ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ae8:	69b9      	ldr	r1, [r7, #24]
 8016aea:	69fa      	ldr	r2, [r7, #28]
 8016aec:	e841 2300 	strex	r3, r2, [r1]
 8016af0:	617b      	str	r3, [r7, #20]
   return(result);
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d1e3      	bne.n	8016ac0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016afc:	4619      	mov	r1, r3
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f000 f86f 	bl	8016be2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016b04:	e023      	b.n	8016b4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8016b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d009      	beq.n	8016b26 <HAL_UART_IRQHandler+0x4ea>
 8016b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d003      	beq.n	8016b26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f000 fd72 	bl	8017608 <UART_Transmit_IT>
    return;
 8016b24:	e014      	b.n	8016b50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d00e      	beq.n	8016b50 <HAL_UART_IRQHandler+0x514>
 8016b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d008      	beq.n	8016b50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f000 fdb2 	bl	80176a8 <UART_EndTransmit_IT>
    return;
 8016b44:	e004      	b.n	8016b50 <HAL_UART_IRQHandler+0x514>
    return;
 8016b46:	bf00      	nop
 8016b48:	e002      	b.n	8016b50 <HAL_UART_IRQHandler+0x514>
      return;
 8016b4a:	bf00      	nop
 8016b4c:	e000      	b.n	8016b50 <HAL_UART_IRQHandler+0x514>
      return;
 8016b4e:	bf00      	nop
  }
}
 8016b50:	37e8      	adds	r7, #232	; 0xe8
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}

08016b56 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016b56:	b480      	push	{r7}
 8016b58:	b083      	sub	sp, #12
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8016b5e:	bf00      	nop
 8016b60:	370c      	adds	r7, #12
 8016b62:	46bd      	mov	sp, r7
 8016b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b68:	4770      	bx	lr

08016b6a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016b6a:	b480      	push	{r7}
 8016b6c:	b083      	sub	sp, #12
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8016b72:	bf00      	nop
 8016b74:	370c      	adds	r7, #12
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr

08016b7e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016b7e:	b480      	push	{r7}
 8016b80:	b083      	sub	sp, #12
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8016b86:	bf00      	nop
 8016b88:	370c      	adds	r7, #12
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b90:	4770      	bx	lr

08016b92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016b92:	b480      	push	{r7}
 8016b94:	b083      	sub	sp, #12
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016b9a:	bf00      	nop
 8016b9c:	370c      	adds	r7, #12
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba4:	4770      	bx	lr

08016ba6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016ba6:	b480      	push	{r7}
 8016ba8:	b083      	sub	sp, #12
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016bae:	bf00      	nop
 8016bb0:	370c      	adds	r7, #12
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb8:	4770      	bx	lr

08016bba <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016bba:	b480      	push	{r7}
 8016bbc:	b083      	sub	sp, #12
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016bc2:	bf00      	nop
 8016bc4:	370c      	adds	r7, #12
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bcc:	4770      	bx	lr

08016bce <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016bce:	b480      	push	{r7}
 8016bd0:	b083      	sub	sp, #12
 8016bd2:	af00      	add	r7, sp, #0
 8016bd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016bd6:	bf00      	nop
 8016bd8:	370c      	adds	r7, #12
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr

08016be2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016be2:	b480      	push	{r7}
 8016be4:	b083      	sub	sp, #12
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
 8016bea:	460b      	mov	r3, r1
 8016bec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016bee:	bf00      	nop
 8016bf0:	370c      	adds	r7, #12
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf8:	4770      	bx	lr

08016bfa <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8016bfa:	b480      	push	{r7}
 8016bfc:	b089      	sub	sp, #36	; 0x24
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016c08:	2b01      	cmp	r3, #1
 8016c0a:	d101      	bne.n	8016c10 <HAL_LIN_SendBreak+0x16>
 8016c0c:	2302      	movs	r3, #2
 8016c0e:	e02a      	b.n	8016c66 <HAL_LIN_SendBreak+0x6c>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2201      	movs	r2, #1
 8016c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2224      	movs	r2, #36	; 0x24
 8016c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	330c      	adds	r3, #12
 8016c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	e853 3f00 	ldrex	r3, [r3]
 8016c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	f043 0301 	orr.w	r3, r3, #1
 8016c36:	61fb      	str	r3, [r7, #28]
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	330c      	adds	r3, #12
 8016c3e:	69fa      	ldr	r2, [r7, #28]
 8016c40:	61ba      	str	r2, [r7, #24]
 8016c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c44:	6979      	ldr	r1, [r7, #20]
 8016c46:	69ba      	ldr	r2, [r7, #24]
 8016c48:	e841 2300 	strex	r3, r2, [r1]
 8016c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d1e5      	bne.n	8016c20 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	2220      	movs	r2, #32
 8016c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016c64:	2300      	movs	r3, #0
}
 8016c66:	4618      	mov	r0, r3
 8016c68:	3724      	adds	r7, #36	; 0x24
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c70:	4770      	bx	lr

08016c72 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8016c72:	b480      	push	{r7}
 8016c74:	b089      	sub	sp, #36	; 0x24
 8016c76:	af00      	add	r7, sp, #0
 8016c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	d101      	bne.n	8016c88 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8016c84:	2302      	movs	r3, #2
 8016c86:	e02a      	b.n	8016cde <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	2224      	movs	r2, #36	; 0x24
 8016c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	330c      	adds	r3, #12
 8016c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	e853 3f00 	ldrex	r3, [r3]
 8016ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8016ca8:	68bb      	ldr	r3, [r7, #8]
 8016caa:	f043 0302 	orr.w	r3, r3, #2
 8016cae:	61fb      	str	r3, [r7, #28]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	330c      	adds	r3, #12
 8016cb6:	69fa      	ldr	r2, [r7, #28]
 8016cb8:	61ba      	str	r2, [r7, #24]
 8016cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cbc:	6979      	ldr	r1, [r7, #20]
 8016cbe:	69ba      	ldr	r2, [r7, #24]
 8016cc0:	e841 2300 	strex	r3, r2, [r1]
 8016cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d1e5      	bne.n	8016c98 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2220      	movs	r2, #32
 8016cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016cdc:	2300      	movs	r3, #0
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3724      	adds	r7, #36	; 0x24
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce8:	4770      	bx	lr

08016cea <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 8016cea:	b480      	push	{r7}
 8016cec:	b089      	sub	sp, #36	; 0x24
 8016cee:	af00      	add	r7, sp, #0
 8016cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	d101      	bne.n	8016d00 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8016cfc:	2302      	movs	r3, #2
 8016cfe:	e02a      	b.n	8016d56 <HAL_MultiProcessor_ExitMuteMode+0x6c>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2201      	movs	r2, #1
 8016d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2224      	movs	r2, #36	; 0x24
 8016d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	330c      	adds	r3, #12
 8016d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	e853 3f00 	ldrex	r3, [r3]
 8016d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	f023 0302 	bic.w	r3, r3, #2
 8016d26:	61fb      	str	r3, [r7, #28]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	330c      	adds	r3, #12
 8016d2e:	69fa      	ldr	r2, [r7, #28]
 8016d30:	61ba      	str	r2, [r7, #24]
 8016d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d34:	6979      	ldr	r1, [r7, #20]
 8016d36:	69ba      	ldr	r2, [r7, #24]
 8016d38:	e841 2300 	strex	r3, r2, [r1]
 8016d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d1e5      	bne.n	8016d10 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2220      	movs	r2, #32
 8016d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016d54:	2300      	movs	r3, #0
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3724      	adds	r7, #36	; 0x24
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d60:	4770      	bx	lr

08016d62 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8016d62:	b480      	push	{r7}
 8016d64:	b085      	sub	sp, #20
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d101      	bne.n	8016d7c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8016d78:	2302      	movs	r3, #2
 8016d7a:	e020      	b.n	8016dbe <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2201      	movs	r2, #1
 8016d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2224      	movs	r2, #36	; 0x24
 8016d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	68db      	ldr	r3, [r3, #12]
 8016d92:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	f023 030c 	bic.w	r3, r3, #12
 8016d9a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	f043 0308 	orr.w	r3, r3, #8
 8016da2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	68fa      	ldr	r2, [r7, #12]
 8016daa:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	2220      	movs	r2, #32
 8016db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2200      	movs	r2, #0
 8016db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016dbc:	2300      	movs	r3, #0
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3714      	adds	r7, #20
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc8:	4770      	bx	lr

08016dca <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8016dca:	b480      	push	{r7}
 8016dcc:	b085      	sub	sp, #20
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d101      	bne.n	8016de4 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8016de0:	2302      	movs	r3, #2
 8016de2:	e020      	b.n	8016e26 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	2201      	movs	r2, #1
 8016de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2224      	movs	r2, #36	; 0x24
 8016df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	68db      	ldr	r3, [r3, #12]
 8016dfa:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f023 030c 	bic.w	r3, r3, #12
 8016e02:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	f043 0304 	orr.w	r3, r3, #4
 8016e0a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	68fa      	ldr	r2, [r7, #12]
 8016e12:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	2220      	movs	r2, #32
 8016e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016e24:	2300      	movs	r3, #0
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3714      	adds	r7, #20
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr

08016e32 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8016e32:	b480      	push	{r7}
 8016e34:	b085      	sub	sp, #20
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	60fb      	str	r3, [r7, #12]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	b2da      	uxtb	r2, r3
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	b2db      	uxtb	r3, r3
 8016e5e:	4313      	orrs	r3, r2
 8016e60:	b2db      	uxtb	r3, r3
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3714      	adds	r7, #20
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr

08016e6e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8016e6e:	b480      	push	{r7}
 8016e70:	b083      	sub	sp, #12
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	370c      	adds	r7, #12
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e84:	4770      	bx	lr

08016e86 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016e86:	b580      	push	{r7, lr}
 8016e88:	b090      	sub	sp, #64	; 0x40
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d137      	bne.n	8016f12 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8016ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	3314      	adds	r3, #20
 8016eae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb2:	e853 3f00 	ldrex	r3, [r3]
 8016eb6:	623b      	str	r3, [r7, #32]
   return(result);
 8016eb8:	6a3b      	ldr	r3, [r7, #32]
 8016eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016ebe:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	3314      	adds	r3, #20
 8016ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ec8:	633a      	str	r2, [r7, #48]	; 0x30
 8016eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ed0:	e841 2300 	strex	r3, r2, [r1]
 8016ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d1e5      	bne.n	8016ea8 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	330c      	adds	r3, #12
 8016ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	e853 3f00 	ldrex	r3, [r3]
 8016eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8016ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	330c      	adds	r3, #12
 8016efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016efc:	61fa      	str	r2, [r7, #28]
 8016efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f00:	69b9      	ldr	r1, [r7, #24]
 8016f02:	69fa      	ldr	r2, [r7, #28]
 8016f04:	e841 2300 	strex	r3, r2, [r1]
 8016f08:	617b      	str	r3, [r7, #20]
   return(result);
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d1e5      	bne.n	8016edc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016f10:	e002      	b.n	8016f18 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8016f12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016f14:	f7ff fe1f 	bl	8016b56 <HAL_UART_TxCpltCallback>
}
 8016f18:	bf00      	nop
 8016f1a:	3740      	adds	r7, #64	; 0x40
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b084      	sub	sp, #16
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f2c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8016f2e:	68f8      	ldr	r0, [r7, #12]
 8016f30:	f7ff fe1b 	bl	8016b6a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016f34:	bf00      	nop
 8016f36:	3710      	adds	r7, #16
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}

08016f3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b09c      	sub	sp, #112	; 0x70
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d172      	bne.n	801703e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8016f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	330c      	adds	r3, #12
 8016f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f68:	e853 3f00 	ldrex	r3, [r3]
 8016f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8016f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	330c      	adds	r3, #12
 8016f7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016f7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8016f80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f86:	e841 2300 	strex	r3, r2, [r1]
 8016f8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d1e5      	bne.n	8016f5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	3314      	adds	r3, #20
 8016f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f9c:	e853 3f00 	ldrex	r3, [r3]
 8016fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fa4:	f023 0301 	bic.w	r3, r3, #1
 8016fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8016faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	3314      	adds	r3, #20
 8016fb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016fb2:	647a      	str	r2, [r7, #68]	; 0x44
 8016fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016fba:	e841 2300 	strex	r3, r2, [r1]
 8016fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d1e5      	bne.n	8016f92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	3314      	adds	r3, #20
 8016fcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	e853 3f00 	ldrex	r3, [r3]
 8016fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8016fd6:	6a3b      	ldr	r3, [r7, #32]
 8016fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8016fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	3314      	adds	r3, #20
 8016fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016fe6:	633a      	str	r2, [r7, #48]	; 0x30
 8016fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fee:	e841 2300 	strex	r3, r2, [r1]
 8016ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d1e5      	bne.n	8016fc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ffc:	2220      	movs	r2, #32
 8016ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017006:	2b01      	cmp	r3, #1
 8017008:	d119      	bne.n	801703e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801700a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	330c      	adds	r3, #12
 8017010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	e853 3f00 	ldrex	r3, [r3]
 8017018:	60fb      	str	r3, [r7, #12]
   return(result);
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	f023 0310 	bic.w	r3, r3, #16
 8017020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	330c      	adds	r3, #12
 8017028:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801702a:	61fa      	str	r2, [r7, #28]
 801702c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801702e:	69b9      	ldr	r1, [r7, #24]
 8017030:	69fa      	ldr	r2, [r7, #28]
 8017032:	e841 2300 	strex	r3, r2, [r1]
 8017036:	617b      	str	r3, [r7, #20]
   return(result);
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d1e5      	bne.n	801700a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801703e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017042:	2b01      	cmp	r3, #1
 8017044:	d106      	bne.n	8017054 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801704a:	4619      	mov	r1, r3
 801704c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801704e:	f7ff fdc8 	bl	8016be2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017052:	e002      	b.n	801705a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8017054:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017056:	f7ea fc57 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 801705a:	bf00      	nop
 801705c:	3770      	adds	r7, #112	; 0x70
 801705e:	46bd      	mov	sp, r7
 8017060:	bd80      	pop	{r7, pc}

08017062 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017062:	b580      	push	{r7, lr}
 8017064:	b084      	sub	sp, #16
 8017066:	af00      	add	r7, sp, #0
 8017068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801706e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017074:	2b01      	cmp	r3, #1
 8017076:	d108      	bne.n	801708a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801707c:	085b      	lsrs	r3, r3, #1
 801707e:	b29b      	uxth	r3, r3
 8017080:	4619      	mov	r1, r3
 8017082:	68f8      	ldr	r0, [r7, #12]
 8017084:	f7ff fdad 	bl	8016be2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017088:	e002      	b.n	8017090 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801708a:	68f8      	ldr	r0, [r7, #12]
 801708c:	f7ff fd77 	bl	8016b7e <HAL_UART_RxHalfCpltCallback>
}
 8017090:	bf00      	nop
 8017092:	3710      	adds	r7, #16
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}

08017098 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b084      	sub	sp, #16
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80170a0:	2300      	movs	r3, #0
 80170a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	695b      	ldr	r3, [r3, #20]
 80170b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170b4:	2b80      	cmp	r3, #128	; 0x80
 80170b6:	bf0c      	ite	eq
 80170b8:	2301      	moveq	r3, #1
 80170ba:	2300      	movne	r3, #0
 80170bc:	b2db      	uxtb	r3, r3
 80170be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80170c6:	b2db      	uxtb	r3, r3
 80170c8:	2b21      	cmp	r3, #33	; 0x21
 80170ca:	d108      	bne.n	80170de <UART_DMAError+0x46>
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d005      	beq.n	80170de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	2200      	movs	r2, #0
 80170d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80170d8:	68b8      	ldr	r0, [r7, #8]
 80170da:	f000 f969 	bl	80173b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	695b      	ldr	r3, [r3, #20]
 80170e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170e8:	2b40      	cmp	r3, #64	; 0x40
 80170ea:	bf0c      	ite	eq
 80170ec:	2301      	moveq	r3, #1
 80170ee:	2300      	movne	r3, #0
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80170fa:	b2db      	uxtb	r3, r3
 80170fc:	2b22      	cmp	r3, #34	; 0x22
 80170fe:	d108      	bne.n	8017112 <UART_DMAError+0x7a>
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d005      	beq.n	8017112 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	2200      	movs	r2, #0
 801710a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801710c:	68b8      	ldr	r0, [r7, #8]
 801710e:	f000 f977 	bl	8017400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017116:	f043 0210 	orr.w	r2, r3, #16
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801711e:	68b8      	ldr	r0, [r7, #8]
 8017120:	f7ff fd37 	bl	8016b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017124:	bf00      	nop
 8017126:	3710      	adds	r7, #16
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b090      	sub	sp, #64	; 0x40
 8017130:	af00      	add	r7, sp, #0
 8017132:	60f8      	str	r0, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	603b      	str	r3, [r7, #0]
 8017138:	4613      	mov	r3, r2
 801713a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801713c:	e050      	b.n	80171e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801713e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017144:	d04c      	beq.n	80171e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8017146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017148:	2b00      	cmp	r3, #0
 801714a:	d007      	beq.n	801715c <UART_WaitOnFlagUntilTimeout+0x30>
 801714c:	f7ef f872 	bl	8006234 <HAL_GetTick>
 8017150:	4602      	mov	r2, r0
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	1ad3      	subs	r3, r2, r3
 8017156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017158:	429a      	cmp	r2, r3
 801715a:	d241      	bcs.n	80171e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	330c      	adds	r3, #12
 8017162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017166:	e853 3f00 	ldrex	r3, [r3]
 801716a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	330c      	adds	r3, #12
 801717a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801717c:	637a      	str	r2, [r7, #52]	; 0x34
 801717e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017184:	e841 2300 	strex	r3, r2, [r1]
 8017188:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1e5      	bne.n	801715c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	3314      	adds	r3, #20
 8017196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	e853 3f00 	ldrex	r3, [r3]
 801719e:	613b      	str	r3, [r7, #16]
   return(result);
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	f023 0301 	bic.w	r3, r3, #1
 80171a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	3314      	adds	r3, #20
 80171ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171b0:	623a      	str	r2, [r7, #32]
 80171b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171b4:	69f9      	ldr	r1, [r7, #28]
 80171b6:	6a3a      	ldr	r2, [r7, #32]
 80171b8:	e841 2300 	strex	r3, r2, [r1]
 80171bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80171be:	69bb      	ldr	r3, [r7, #24]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d1e5      	bne.n	8017190 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2220      	movs	r2, #32
 80171c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	2220      	movs	r2, #32
 80171d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	2200      	movs	r2, #0
 80171d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80171dc:	2303      	movs	r3, #3
 80171de:	e00f      	b.n	8017200 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	681a      	ldr	r2, [r3, #0]
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	4013      	ands	r3, r2
 80171ea:	68ba      	ldr	r2, [r7, #8]
 80171ec:	429a      	cmp	r2, r3
 80171ee:	bf0c      	ite	eq
 80171f0:	2301      	moveq	r3, #1
 80171f2:	2300      	movne	r3, #0
 80171f4:	b2db      	uxtb	r3, r3
 80171f6:	461a      	mov	r2, r3
 80171f8:	79fb      	ldrb	r3, [r7, #7]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d09f      	beq.n	801713e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80171fe:	2300      	movs	r3, #0
}
 8017200:	4618      	mov	r0, r3
 8017202:	3740      	adds	r7, #64	; 0x40
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}

08017208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017208:	b480      	push	{r7}
 801720a:	b085      	sub	sp, #20
 801720c:	af00      	add	r7, sp, #0
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	60b9      	str	r1, [r7, #8]
 8017212:	4613      	mov	r3, r2
 8017214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	68ba      	ldr	r2, [r7, #8]
 801721a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	88fa      	ldrh	r2, [r7, #6]
 8017220:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	88fa      	ldrh	r2, [r7, #6]
 8017226:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	2200      	movs	r2, #0
 801722c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	2222      	movs	r2, #34	; 0x22
 8017232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	2200      	movs	r2, #0
 801723a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	68da      	ldr	r2, [r3, #12]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801724c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	695a      	ldr	r2, [r3, #20]
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f042 0201 	orr.w	r2, r2, #1
 801725c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	68da      	ldr	r2, [r3, #12]
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	f042 0220 	orr.w	r2, r2, #32
 801726c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801726e:	2300      	movs	r3, #0
}
 8017270:	4618      	mov	r0, r3
 8017272:	3714      	adds	r7, #20
 8017274:	46bd      	mov	sp, r7
 8017276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727a:	4770      	bx	lr

0801727c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b098      	sub	sp, #96	; 0x60
 8017280:	af00      	add	r7, sp, #0
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	60b9      	str	r1, [r7, #8]
 8017286:	4613      	mov	r3, r2
 8017288:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	88fa      	ldrh	r2, [r7, #6]
 8017294:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	2200      	movs	r2, #0
 801729a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	2222      	movs	r2, #34	; 0x22
 80172a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172a8:	4a3e      	ldr	r2, [pc, #248]	; (80173a4 <UART_Start_Receive_DMA+0x128>)
 80172aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172b0:	4a3d      	ldr	r2, [pc, #244]	; (80173a8 <UART_Start_Receive_DMA+0x12c>)
 80172b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172b8:	4a3c      	ldr	r2, [pc, #240]	; (80173ac <UART_Start_Receive_DMA+0x130>)
 80172ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172c0:	2200      	movs	r2, #0
 80172c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80172c4:	f107 0308 	add.w	r3, r7, #8
 80172c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	3304      	adds	r3, #4
 80172d4:	4619      	mov	r1, r3
 80172d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80172d8:	681a      	ldr	r2, [r3, #0]
 80172da:	88fb      	ldrh	r3, [r7, #6]
 80172dc:	f7f0 fa13 	bl	8007706 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80172e0:	2300      	movs	r3, #0
 80172e2:	613b      	str	r3, [r7, #16]
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	613b      	str	r3, [r7, #16]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	613b      	str	r3, [r7, #16]
 80172f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	2200      	movs	r2, #0
 80172fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	330c      	adds	r3, #12
 8017304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017308:	e853 3f00 	ldrex	r3, [r3]
 801730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017314:	65bb      	str	r3, [r7, #88]	; 0x58
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	330c      	adds	r3, #12
 801731c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801731e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017326:	e841 2300 	strex	r3, r2, [r1]
 801732a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801732c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801732e:	2b00      	cmp	r3, #0
 8017330:	d1e5      	bne.n	80172fe <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	3314      	adds	r3, #20
 8017338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801733c:	e853 3f00 	ldrex	r3, [r3]
 8017340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017344:	f043 0301 	orr.w	r3, r3, #1
 8017348:	657b      	str	r3, [r7, #84]	; 0x54
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	3314      	adds	r3, #20
 8017350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017352:	63ba      	str	r2, [r7, #56]	; 0x38
 8017354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801735a:	e841 2300 	strex	r3, r2, [r1]
 801735e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017362:	2b00      	cmp	r3, #0
 8017364:	d1e5      	bne.n	8017332 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	3314      	adds	r3, #20
 801736c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801736e:	69bb      	ldr	r3, [r7, #24]
 8017370:	e853 3f00 	ldrex	r3, [r3]
 8017374:	617b      	str	r3, [r7, #20]
   return(result);
 8017376:	697b      	ldr	r3, [r7, #20]
 8017378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801737c:	653b      	str	r3, [r7, #80]	; 0x50
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	3314      	adds	r3, #20
 8017384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017386:	627a      	str	r2, [r7, #36]	; 0x24
 8017388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801738a:	6a39      	ldr	r1, [r7, #32]
 801738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801738e:	e841 2300 	strex	r3, r2, [r1]
 8017392:	61fb      	str	r3, [r7, #28]
   return(result);
 8017394:	69fb      	ldr	r3, [r7, #28]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d1e5      	bne.n	8017366 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801739a:	2300      	movs	r3, #0
}
 801739c:	4618      	mov	r0, r3
 801739e:	3760      	adds	r7, #96	; 0x60
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	08016f3d 	.word	0x08016f3d
 80173a8:	08017063 	.word	0x08017063
 80173ac:	08017099 	.word	0x08017099

080173b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80173b0:	b480      	push	{r7}
 80173b2:	b089      	sub	sp, #36	; 0x24
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	330c      	adds	r3, #12
 80173be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	e853 3f00 	ldrex	r3, [r3]
 80173c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80173c8:	68bb      	ldr	r3, [r7, #8]
 80173ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80173ce:	61fb      	str	r3, [r7, #28]
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	330c      	adds	r3, #12
 80173d6:	69fa      	ldr	r2, [r7, #28]
 80173d8:	61ba      	str	r2, [r7, #24]
 80173da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173dc:	6979      	ldr	r1, [r7, #20]
 80173de:	69ba      	ldr	r2, [r7, #24]
 80173e0:	e841 2300 	strex	r3, r2, [r1]
 80173e4:	613b      	str	r3, [r7, #16]
   return(result);
 80173e6:	693b      	ldr	r3, [r7, #16]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d1e5      	bne.n	80173b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	2220      	movs	r2, #32
 80173f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80173f4:	bf00      	nop
 80173f6:	3724      	adds	r7, #36	; 0x24
 80173f8:	46bd      	mov	sp, r7
 80173fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fe:	4770      	bx	lr

08017400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017400:	b480      	push	{r7}
 8017402:	b095      	sub	sp, #84	; 0x54
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	330c      	adds	r3, #12
 801740e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017412:	e853 3f00 	ldrex	r3, [r3]
 8017416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801741e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	330c      	adds	r3, #12
 8017426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017428:	643a      	str	r2, [r7, #64]	; 0x40
 801742a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801742c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801742e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017430:	e841 2300 	strex	r3, r2, [r1]
 8017434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017438:	2b00      	cmp	r3, #0
 801743a:	d1e5      	bne.n	8017408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	3314      	adds	r3, #20
 8017442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017444:	6a3b      	ldr	r3, [r7, #32]
 8017446:	e853 3f00 	ldrex	r3, [r3]
 801744a:	61fb      	str	r3, [r7, #28]
   return(result);
 801744c:	69fb      	ldr	r3, [r7, #28]
 801744e:	f023 0301 	bic.w	r3, r3, #1
 8017452:	64bb      	str	r3, [r7, #72]	; 0x48
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	3314      	adds	r3, #20
 801745a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801745c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801745e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017464:	e841 2300 	strex	r3, r2, [r1]
 8017468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801746c:	2b00      	cmp	r3, #0
 801746e:	d1e5      	bne.n	801743c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017474:	2b01      	cmp	r3, #1
 8017476:	d119      	bne.n	80174ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	330c      	adds	r3, #12
 801747e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	e853 3f00 	ldrex	r3, [r3]
 8017486:	60bb      	str	r3, [r7, #8]
   return(result);
 8017488:	68bb      	ldr	r3, [r7, #8]
 801748a:	f023 0310 	bic.w	r3, r3, #16
 801748e:	647b      	str	r3, [r7, #68]	; 0x44
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	330c      	adds	r3, #12
 8017496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017498:	61ba      	str	r2, [r7, #24]
 801749a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801749c:	6979      	ldr	r1, [r7, #20]
 801749e:	69ba      	ldr	r2, [r7, #24]
 80174a0:	e841 2300 	strex	r3, r2, [r1]
 80174a4:	613b      	str	r3, [r7, #16]
   return(result);
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d1e5      	bne.n	8017478 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2220      	movs	r2, #32
 80174b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2200      	movs	r2, #0
 80174b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80174ba:	bf00      	nop
 80174bc:	3754      	adds	r7, #84	; 0x54
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr

080174c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b084      	sub	sp, #16
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2200      	movs	r2, #0
 80174d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	2200      	movs	r2, #0
 80174de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80174e0:	68f8      	ldr	r0, [r7, #12]
 80174e2:	f7ff fb56 	bl	8016b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80174e6:	bf00      	nop
 80174e8:	3710      	adds	r7, #16
 80174ea:	46bd      	mov	sp, r7
 80174ec:	bd80      	pop	{r7, pc}

080174ee <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80174ee:	b580      	push	{r7, lr}
 80174f0:	b084      	sub	sp, #16
 80174f2:	af00      	add	r7, sp, #0
 80174f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174fa:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017500:	2200      	movs	r2, #0
 8017502:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017508:	2b00      	cmp	r3, #0
 801750a:	d004      	beq.n	8017516 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017512:	2b00      	cmp	r3, #0
 8017514:	d117      	bne.n	8017546 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	2200      	movs	r2, #0
 801751a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	2200      	movs	r2, #0
 8017520:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	2200      	movs	r2, #0
 8017526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	2220      	movs	r2, #32
 801752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	2220      	movs	r2, #32
 8017534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	2200      	movs	r2, #0
 801753c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801753e:	68f8      	ldr	r0, [r7, #12]
 8017540:	f7ff fb31 	bl	8016ba6 <HAL_UART_AbortCpltCallback>
 8017544:	e000      	b.n	8017548 <UART_DMATxAbortCallback+0x5a>
      return;
 8017546:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017548:	3710      	adds	r7, #16
 801754a:	46bd      	mov	sp, r7
 801754c:	bd80      	pop	{r7, pc}

0801754e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801754e:	b580      	push	{r7, lr}
 8017550:	b084      	sub	sp, #16
 8017552:	af00      	add	r7, sp, #0
 8017554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801755a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017560:	2200      	movs	r2, #0
 8017562:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017568:	2b00      	cmp	r3, #0
 801756a:	d004      	beq.n	8017576 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017572:	2b00      	cmp	r3, #0
 8017574:	d117      	bne.n	80175a6 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	2200      	movs	r2, #0
 801757a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	2200      	movs	r2, #0
 8017580:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	2200      	movs	r2, #0
 8017586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	2220      	movs	r2, #32
 801758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	2220      	movs	r2, #32
 8017594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	2200      	movs	r2, #0
 801759c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f7ff fb01 	bl	8016ba6 <HAL_UART_AbortCpltCallback>
 80175a4:	e000      	b.n	80175a8 <UART_DMARxAbortCallback+0x5a>
      return;
 80175a6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80175a8:	3710      	adds	r7, #16
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}

080175ae <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b084      	sub	sp, #16
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175ba:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	2200      	movs	r2, #0
 80175c0:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	2220      	movs	r2, #32
 80175c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f7ff faf5 	bl	8016bba <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80175d0:	bf00      	nop
 80175d2:	3710      	adds	r7, #16
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b084      	sub	sp, #16
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175e4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	2200      	movs	r2, #0
 80175ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	2220      	movs	r2, #32
 80175f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	2200      	movs	r2, #0
 80175f8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80175fa:	68f8      	ldr	r0, [r7, #12]
 80175fc:	f7ff fae7 	bl	8016bce <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017600:	bf00      	nop
 8017602:	3710      	adds	r7, #16
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}

08017608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017608:	b480      	push	{r7}
 801760a:	b085      	sub	sp, #20
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017616:	b2db      	uxtb	r3, r3
 8017618:	2b21      	cmp	r3, #33	; 0x21
 801761a:	d13e      	bne.n	801769a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	689b      	ldr	r3, [r3, #8]
 8017620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017624:	d114      	bne.n	8017650 <UART_Transmit_IT+0x48>
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	691b      	ldr	r3, [r3, #16]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d110      	bne.n	8017650 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	6a1b      	ldr	r3, [r3, #32]
 8017632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	881b      	ldrh	r3, [r3, #0]
 8017638:	461a      	mov	r2, r3
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	6a1b      	ldr	r3, [r3, #32]
 8017648:	1c9a      	adds	r2, r3, #2
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	621a      	str	r2, [r3, #32]
 801764e:	e008      	b.n	8017662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6a1b      	ldr	r3, [r3, #32]
 8017654:	1c59      	adds	r1, r3, #1
 8017656:	687a      	ldr	r2, [r7, #4]
 8017658:	6211      	str	r1, [r2, #32]
 801765a:	781a      	ldrb	r2, [r3, #0]
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017666:	b29b      	uxth	r3, r3
 8017668:	3b01      	subs	r3, #1
 801766a:	b29b      	uxth	r3, r3
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	4619      	mov	r1, r3
 8017670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017672:	2b00      	cmp	r3, #0
 8017674:	d10f      	bne.n	8017696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	68da      	ldr	r2, [r3, #12]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	68da      	ldr	r2, [r3, #12]
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017696:	2300      	movs	r3, #0
 8017698:	e000      	b.n	801769c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801769a:	2302      	movs	r3, #2
  }
}
 801769c:	4618      	mov	r0, r3
 801769e:	3714      	adds	r7, #20
 80176a0:	46bd      	mov	sp, r7
 80176a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a6:	4770      	bx	lr

080176a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	68da      	ldr	r2, [r3, #12]
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80176be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2220      	movs	r2, #32
 80176c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80176c8:	6878      	ldr	r0, [r7, #4]
 80176ca:	f7ff fa44 	bl	8016b56 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80176ce:	2300      	movs	r3, #0
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3708      	adds	r7, #8
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08c      	sub	sp, #48	; 0x30
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	2b22      	cmp	r3, #34	; 0x22
 80176ea:	f040 80ab 	bne.w	8017844 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80176f6:	d117      	bne.n	8017728 <UART_Receive_IT+0x50>
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	691b      	ldr	r3, [r3, #16]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d113      	bne.n	8017728 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017700:	2300      	movs	r3, #0
 8017702:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017708:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	685b      	ldr	r3, [r3, #4]
 8017710:	b29b      	uxth	r3, r3
 8017712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017716:	b29a      	uxth	r2, r3
 8017718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017720:	1c9a      	adds	r2, r3, #2
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	629a      	str	r2, [r3, #40]	; 0x28
 8017726:	e026      	b.n	8017776 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801772c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801772e:	2300      	movs	r3, #0
 8017730:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	689b      	ldr	r3, [r3, #8]
 8017736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801773a:	d007      	beq.n	801774c <UART_Receive_IT+0x74>
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	689b      	ldr	r3, [r3, #8]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d10a      	bne.n	801775a <UART_Receive_IT+0x82>
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	691b      	ldr	r3, [r3, #16]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d106      	bne.n	801775a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	685b      	ldr	r3, [r3, #4]
 8017752:	b2da      	uxtb	r2, r3
 8017754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017756:	701a      	strb	r2, [r3, #0]
 8017758:	e008      	b.n	801776c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	685b      	ldr	r3, [r3, #4]
 8017760:	b2db      	uxtb	r3, r3
 8017762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017766:	b2da      	uxtb	r2, r3
 8017768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801776a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017770:	1c5a      	adds	r2, r3, #1
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801777a:	b29b      	uxth	r3, r3
 801777c:	3b01      	subs	r3, #1
 801777e:	b29b      	uxth	r3, r3
 8017780:	687a      	ldr	r2, [r7, #4]
 8017782:	4619      	mov	r1, r3
 8017784:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017786:	2b00      	cmp	r3, #0
 8017788:	d15a      	bne.n	8017840 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	68da      	ldr	r2, [r3, #12]
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	f022 0220 	bic.w	r2, r2, #32
 8017798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	68da      	ldr	r2, [r3, #12]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80177a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	695a      	ldr	r2, [r3, #20]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	f022 0201 	bic.w	r2, r2, #1
 80177b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2220      	movs	r2, #32
 80177be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c6:	2b01      	cmp	r3, #1
 80177c8:	d135      	bne.n	8017836 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2200      	movs	r2, #0
 80177ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	330c      	adds	r3, #12
 80177d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	e853 3f00 	ldrex	r3, [r3]
 80177de:	613b      	str	r3, [r7, #16]
   return(result);
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	f023 0310 	bic.w	r3, r3, #16
 80177e6:	627b      	str	r3, [r7, #36]	; 0x24
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	330c      	adds	r3, #12
 80177ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177f0:	623a      	str	r2, [r7, #32]
 80177f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177f4:	69f9      	ldr	r1, [r7, #28]
 80177f6:	6a3a      	ldr	r2, [r7, #32]
 80177f8:	e841 2300 	strex	r3, r2, [r1]
 80177fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80177fe:	69bb      	ldr	r3, [r7, #24]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d1e5      	bne.n	80177d0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f003 0310 	and.w	r3, r3, #16
 801780e:	2b10      	cmp	r3, #16
 8017810:	d10a      	bne.n	8017828 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017812:	2300      	movs	r3, #0
 8017814:	60fb      	str	r3, [r7, #12]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	60fb      	str	r3, [r7, #12]
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	60fb      	str	r3, [r7, #12]
 8017826:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801782c:	4619      	mov	r1, r3
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f7ff f9d7 	bl	8016be2 <HAL_UARTEx_RxEventCallback>
 8017834:	e002      	b.n	801783c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f7ea f866 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801783c:	2300      	movs	r3, #0
 801783e:	e002      	b.n	8017846 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017840:	2300      	movs	r3, #0
 8017842:	e000      	b.n	8017846 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017844:	2302      	movs	r3, #2
  }
}
 8017846:	4618      	mov	r0, r3
 8017848:	3730      	adds	r7, #48	; 0x30
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}

0801784e <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801784e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017852:	b0c0      	sub	sp, #256	; 0x100
 8017854:	af00      	add	r7, sp, #0
 8017856:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	691b      	ldr	r3, [r3, #16]
 8017862:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801786a:	68d9      	ldr	r1, [r3, #12]
 801786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017870:	681a      	ldr	r2, [r3, #0]
 8017872:	ea40 0301 	orr.w	r3, r0, r1
 8017876:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801787c:	689a      	ldr	r2, [r3, #8]
 801787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017882:	691b      	ldr	r3, [r3, #16]
 8017884:	431a      	orrs	r2, r3
 8017886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801788a:	695b      	ldr	r3, [r3, #20]
 801788c:	431a      	orrs	r2, r3
 801788e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017892:	69db      	ldr	r3, [r3, #28]
 8017894:	4313      	orrs	r3, r2
 8017896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80178a6:	f021 010c 	bic.w	r1, r1, #12
 80178aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80178b4:	430b      	orrs	r3, r1
 80178b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80178b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	695b      	ldr	r3, [r3, #20]
 80178c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80178c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178c8:	6999      	ldr	r1, [r3, #24]
 80178ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178ce:	681a      	ldr	r2, [r3, #0]
 80178d0:	ea40 0301 	orr.w	r3, r0, r1
 80178d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80178d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178da:	681a      	ldr	r2, [r3, #0]
 80178dc:	4b8e      	ldr	r3, [pc, #568]	; (8017b18 <UART_SetConfig+0x2ca>)
 80178de:	429a      	cmp	r2, r3
 80178e0:	d005      	beq.n	80178ee <UART_SetConfig+0xa0>
 80178e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178e6:	681a      	ldr	r2, [r3, #0]
 80178e8:	4b8c      	ldr	r3, [pc, #560]	; (8017b1c <UART_SetConfig+0x2ce>)
 80178ea:	429a      	cmp	r2, r3
 80178ec:	d104      	bne.n	80178f8 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80178ee:	f7fa fa11 	bl	8011d14 <HAL_RCC_GetPCLK2Freq>
 80178f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80178f6:	e003      	b.n	8017900 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80178f8:	f7fa f9f8 	bl	8011cec <HAL_RCC_GetPCLK1Freq>
 80178fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017904:	69db      	ldr	r3, [r3, #28]
 8017906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801790a:	f040 810b 	bne.w	8017b24 <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801790e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017912:	2200      	movs	r2, #0
 8017914:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017918:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801791c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017920:	4622      	mov	r2, r4
 8017922:	462b      	mov	r3, r5
 8017924:	1891      	adds	r1, r2, r2
 8017926:	65b9      	str	r1, [r7, #88]	; 0x58
 8017928:	415b      	adcs	r3, r3
 801792a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801792c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017930:	4621      	mov	r1, r4
 8017932:	eb12 0801 	adds.w	r8, r2, r1
 8017936:	4629      	mov	r1, r5
 8017938:	eb43 0901 	adc.w	r9, r3, r1
 801793c:	f04f 0200 	mov.w	r2, #0
 8017940:	f04f 0300 	mov.w	r3, #0
 8017944:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017948:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801794c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017950:	4690      	mov	r8, r2
 8017952:	4699      	mov	r9, r3
 8017954:	4623      	mov	r3, r4
 8017956:	eb18 0303 	adds.w	r3, r8, r3
 801795a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801795e:	462b      	mov	r3, r5
 8017960:	eb49 0303 	adc.w	r3, r9, r3
 8017964:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	2200      	movs	r2, #0
 8017970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017974:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017978:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801797c:	460b      	mov	r3, r1
 801797e:	18db      	adds	r3, r3, r3
 8017980:	653b      	str	r3, [r7, #80]	; 0x50
 8017982:	4613      	mov	r3, r2
 8017984:	eb42 0303 	adc.w	r3, r2, r3
 8017988:	657b      	str	r3, [r7, #84]	; 0x54
 801798a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801798e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017992:	f001 fabf 	bl	8018f14 <__aeabi_uldivmod>
 8017996:	4602      	mov	r2, r0
 8017998:	460b      	mov	r3, r1
 801799a:	4b61      	ldr	r3, [pc, #388]	; (8017b20 <UART_SetConfig+0x2d2>)
 801799c:	fba3 2302 	umull	r2, r3, r3, r2
 80179a0:	095b      	lsrs	r3, r3, #5
 80179a2:	011c      	lsls	r4, r3, #4
 80179a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80179a8:	2200      	movs	r2, #0
 80179aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80179ae:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80179b2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80179b6:	4642      	mov	r2, r8
 80179b8:	464b      	mov	r3, r9
 80179ba:	1891      	adds	r1, r2, r2
 80179bc:	64b9      	str	r1, [r7, #72]	; 0x48
 80179be:	415b      	adcs	r3, r3
 80179c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80179c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80179c6:	4641      	mov	r1, r8
 80179c8:	eb12 0a01 	adds.w	sl, r2, r1
 80179cc:	4649      	mov	r1, r9
 80179ce:	eb43 0b01 	adc.w	fp, r3, r1
 80179d2:	f04f 0200 	mov.w	r2, #0
 80179d6:	f04f 0300 	mov.w	r3, #0
 80179da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80179de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80179e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80179e6:	4692      	mov	sl, r2
 80179e8:	469b      	mov	fp, r3
 80179ea:	4643      	mov	r3, r8
 80179ec:	eb1a 0303 	adds.w	r3, sl, r3
 80179f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80179f4:	464b      	mov	r3, r9
 80179f6:	eb4b 0303 	adc.w	r3, fp, r3
 80179fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80179fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017a0a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8017a0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8017a12:	460b      	mov	r3, r1
 8017a14:	18db      	adds	r3, r3, r3
 8017a16:	643b      	str	r3, [r7, #64]	; 0x40
 8017a18:	4613      	mov	r3, r2
 8017a1a:	eb42 0303 	adc.w	r3, r2, r3
 8017a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8017a20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017a24:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8017a28:	f001 fa74 	bl	8018f14 <__aeabi_uldivmod>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	460b      	mov	r3, r1
 8017a30:	4611      	mov	r1, r2
 8017a32:	4b3b      	ldr	r3, [pc, #236]	; (8017b20 <UART_SetConfig+0x2d2>)
 8017a34:	fba3 2301 	umull	r2, r3, r3, r1
 8017a38:	095b      	lsrs	r3, r3, #5
 8017a3a:	2264      	movs	r2, #100	; 0x64
 8017a3c:	fb02 f303 	mul.w	r3, r2, r3
 8017a40:	1acb      	subs	r3, r1, r3
 8017a42:	00db      	lsls	r3, r3, #3
 8017a44:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8017a48:	4b35      	ldr	r3, [pc, #212]	; (8017b20 <UART_SetConfig+0x2d2>)
 8017a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8017a4e:	095b      	lsrs	r3, r3, #5
 8017a50:	005b      	lsls	r3, r3, #1
 8017a52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8017a56:	441c      	add	r4, r3
 8017a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017a62:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8017a66:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8017a6a:	4642      	mov	r2, r8
 8017a6c:	464b      	mov	r3, r9
 8017a6e:	1891      	adds	r1, r2, r2
 8017a70:	63b9      	str	r1, [r7, #56]	; 0x38
 8017a72:	415b      	adcs	r3, r3
 8017a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017a76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8017a7a:	4641      	mov	r1, r8
 8017a7c:	1851      	adds	r1, r2, r1
 8017a7e:	6339      	str	r1, [r7, #48]	; 0x30
 8017a80:	4649      	mov	r1, r9
 8017a82:	414b      	adcs	r3, r1
 8017a84:	637b      	str	r3, [r7, #52]	; 0x34
 8017a86:	f04f 0200 	mov.w	r2, #0
 8017a8a:	f04f 0300 	mov.w	r3, #0
 8017a8e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8017a92:	4659      	mov	r1, fp
 8017a94:	00cb      	lsls	r3, r1, #3
 8017a96:	4651      	mov	r1, sl
 8017a98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017a9c:	4651      	mov	r1, sl
 8017a9e:	00ca      	lsls	r2, r1, #3
 8017aa0:	4610      	mov	r0, r2
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	4642      	mov	r2, r8
 8017aa8:	189b      	adds	r3, r3, r2
 8017aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017aae:	464b      	mov	r3, r9
 8017ab0:	460a      	mov	r2, r1
 8017ab2:	eb42 0303 	adc.w	r3, r2, r3
 8017ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017abe:	685b      	ldr	r3, [r3, #4]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8017ac6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8017aca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8017ace:	460b      	mov	r3, r1
 8017ad0:	18db      	adds	r3, r3, r3
 8017ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	eb42 0303 	adc.w	r3, r2, r3
 8017ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017ae0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8017ae4:	f001 fa16 	bl	8018f14 <__aeabi_uldivmod>
 8017ae8:	4602      	mov	r2, r0
 8017aea:	460b      	mov	r3, r1
 8017aec:	4b0c      	ldr	r3, [pc, #48]	; (8017b20 <UART_SetConfig+0x2d2>)
 8017aee:	fba3 1302 	umull	r1, r3, r3, r2
 8017af2:	095b      	lsrs	r3, r3, #5
 8017af4:	2164      	movs	r1, #100	; 0x64
 8017af6:	fb01 f303 	mul.w	r3, r1, r3
 8017afa:	1ad3      	subs	r3, r2, r3
 8017afc:	00db      	lsls	r3, r3, #3
 8017afe:	3332      	adds	r3, #50	; 0x32
 8017b00:	4a07      	ldr	r2, [pc, #28]	; (8017b20 <UART_SetConfig+0x2d2>)
 8017b02:	fba2 2303 	umull	r2, r3, r2, r3
 8017b06:	095b      	lsrs	r3, r3, #5
 8017b08:	f003 0207 	and.w	r2, r3, #7
 8017b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4422      	add	r2, r4
 8017b14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8017b16:	e104      	b.n	8017d22 <UART_SetConfig+0x4d4>
 8017b18:	40011000 	.word	0x40011000
 8017b1c:	40011400 	.word	0x40011400
 8017b20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8017b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8017b2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8017b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8017b36:	4642      	mov	r2, r8
 8017b38:	464b      	mov	r3, r9
 8017b3a:	1891      	adds	r1, r2, r2
 8017b3c:	6239      	str	r1, [r7, #32]
 8017b3e:	415b      	adcs	r3, r3
 8017b40:	627b      	str	r3, [r7, #36]	; 0x24
 8017b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017b46:	4641      	mov	r1, r8
 8017b48:	1854      	adds	r4, r2, r1
 8017b4a:	4649      	mov	r1, r9
 8017b4c:	eb43 0501 	adc.w	r5, r3, r1
 8017b50:	f04f 0200 	mov.w	r2, #0
 8017b54:	f04f 0300 	mov.w	r3, #0
 8017b58:	00eb      	lsls	r3, r5, #3
 8017b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017b5e:	00e2      	lsls	r2, r4, #3
 8017b60:	4614      	mov	r4, r2
 8017b62:	461d      	mov	r5, r3
 8017b64:	4643      	mov	r3, r8
 8017b66:	18e3      	adds	r3, r4, r3
 8017b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017b6c:	464b      	mov	r3, r9
 8017b6e:	eb45 0303 	adc.w	r3, r5, r3
 8017b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017b7a:	685b      	ldr	r3, [r3, #4]
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017b82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017b86:	f04f 0200 	mov.w	r2, #0
 8017b8a:	f04f 0300 	mov.w	r3, #0
 8017b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8017b92:	4629      	mov	r1, r5
 8017b94:	008b      	lsls	r3, r1, #2
 8017b96:	4621      	mov	r1, r4
 8017b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017b9c:	4621      	mov	r1, r4
 8017b9e:	008a      	lsls	r2, r1, #2
 8017ba0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8017ba4:	f001 f9b6 	bl	8018f14 <__aeabi_uldivmod>
 8017ba8:	4602      	mov	r2, r0
 8017baa:	460b      	mov	r3, r1
 8017bac:	4b60      	ldr	r3, [pc, #384]	; (8017d30 <UART_SetConfig+0x4e2>)
 8017bae:	fba3 2302 	umull	r2, r3, r3, r2
 8017bb2:	095b      	lsrs	r3, r3, #5
 8017bb4:	011c      	lsls	r4, r3, #4
 8017bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017bba:	2200      	movs	r2, #0
 8017bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017bc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8017bc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8017bc8:	4642      	mov	r2, r8
 8017bca:	464b      	mov	r3, r9
 8017bcc:	1891      	adds	r1, r2, r2
 8017bce:	61b9      	str	r1, [r7, #24]
 8017bd0:	415b      	adcs	r3, r3
 8017bd2:	61fb      	str	r3, [r7, #28]
 8017bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017bd8:	4641      	mov	r1, r8
 8017bda:	1851      	adds	r1, r2, r1
 8017bdc:	6139      	str	r1, [r7, #16]
 8017bde:	4649      	mov	r1, r9
 8017be0:	414b      	adcs	r3, r1
 8017be2:	617b      	str	r3, [r7, #20]
 8017be4:	f04f 0200 	mov.w	r2, #0
 8017be8:	f04f 0300 	mov.w	r3, #0
 8017bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8017bf0:	4659      	mov	r1, fp
 8017bf2:	00cb      	lsls	r3, r1, #3
 8017bf4:	4651      	mov	r1, sl
 8017bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017bfa:	4651      	mov	r1, sl
 8017bfc:	00ca      	lsls	r2, r1, #3
 8017bfe:	4610      	mov	r0, r2
 8017c00:	4619      	mov	r1, r3
 8017c02:	4603      	mov	r3, r0
 8017c04:	4642      	mov	r2, r8
 8017c06:	189b      	adds	r3, r3, r2
 8017c08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017c0c:	464b      	mov	r3, r9
 8017c0e:	460a      	mov	r2, r1
 8017c10:	eb42 0303 	adc.w	r3, r2, r3
 8017c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	2200      	movs	r2, #0
 8017c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8017c22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8017c24:	f04f 0200 	mov.w	r2, #0
 8017c28:	f04f 0300 	mov.w	r3, #0
 8017c2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8017c30:	4649      	mov	r1, r9
 8017c32:	008b      	lsls	r3, r1, #2
 8017c34:	4641      	mov	r1, r8
 8017c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017c3a:	4641      	mov	r1, r8
 8017c3c:	008a      	lsls	r2, r1, #2
 8017c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8017c42:	f001 f967 	bl	8018f14 <__aeabi_uldivmod>
 8017c46:	4602      	mov	r2, r0
 8017c48:	460b      	mov	r3, r1
 8017c4a:	4b39      	ldr	r3, [pc, #228]	; (8017d30 <UART_SetConfig+0x4e2>)
 8017c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8017c50:	095b      	lsrs	r3, r3, #5
 8017c52:	2164      	movs	r1, #100	; 0x64
 8017c54:	fb01 f303 	mul.w	r3, r1, r3
 8017c58:	1ad3      	subs	r3, r2, r3
 8017c5a:	011b      	lsls	r3, r3, #4
 8017c5c:	3332      	adds	r3, #50	; 0x32
 8017c5e:	4a34      	ldr	r2, [pc, #208]	; (8017d30 <UART_SetConfig+0x4e2>)
 8017c60:	fba2 2303 	umull	r2, r3, r2, r3
 8017c64:	095b      	lsrs	r3, r3, #5
 8017c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c6a:	441c      	add	r4, r3
 8017c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017c70:	2200      	movs	r2, #0
 8017c72:	673b      	str	r3, [r7, #112]	; 0x70
 8017c74:	677a      	str	r2, [r7, #116]	; 0x74
 8017c76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8017c7a:	4642      	mov	r2, r8
 8017c7c:	464b      	mov	r3, r9
 8017c7e:	1891      	adds	r1, r2, r2
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	415b      	adcs	r3, r3
 8017c84:	60fb      	str	r3, [r7, #12]
 8017c86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017c8a:	4641      	mov	r1, r8
 8017c8c:	1851      	adds	r1, r2, r1
 8017c8e:	6039      	str	r1, [r7, #0]
 8017c90:	4649      	mov	r1, r9
 8017c92:	414b      	adcs	r3, r1
 8017c94:	607b      	str	r3, [r7, #4]
 8017c96:	f04f 0200 	mov.w	r2, #0
 8017c9a:	f04f 0300 	mov.w	r3, #0
 8017c9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8017ca2:	4659      	mov	r1, fp
 8017ca4:	00cb      	lsls	r3, r1, #3
 8017ca6:	4651      	mov	r1, sl
 8017ca8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017cac:	4651      	mov	r1, sl
 8017cae:	00ca      	lsls	r2, r1, #3
 8017cb0:	4610      	mov	r0, r2
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	4642      	mov	r2, r8
 8017cb8:	189b      	adds	r3, r3, r2
 8017cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8017cbc:	464b      	mov	r3, r9
 8017cbe:	460a      	mov	r2, r1
 8017cc0:	eb42 0303 	adc.w	r3, r2, r3
 8017cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	2200      	movs	r2, #0
 8017cce:	663b      	str	r3, [r7, #96]	; 0x60
 8017cd0:	667a      	str	r2, [r7, #100]	; 0x64
 8017cd2:	f04f 0200 	mov.w	r2, #0
 8017cd6:	f04f 0300 	mov.w	r3, #0
 8017cda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8017cde:	4649      	mov	r1, r9
 8017ce0:	008b      	lsls	r3, r1, #2
 8017ce2:	4641      	mov	r1, r8
 8017ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017ce8:	4641      	mov	r1, r8
 8017cea:	008a      	lsls	r2, r1, #2
 8017cec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8017cf0:	f001 f910 	bl	8018f14 <__aeabi_uldivmod>
 8017cf4:	4602      	mov	r2, r0
 8017cf6:	460b      	mov	r3, r1
 8017cf8:	4b0d      	ldr	r3, [pc, #52]	; (8017d30 <UART_SetConfig+0x4e2>)
 8017cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8017cfe:	095b      	lsrs	r3, r3, #5
 8017d00:	2164      	movs	r1, #100	; 0x64
 8017d02:	fb01 f303 	mul.w	r3, r1, r3
 8017d06:	1ad3      	subs	r3, r2, r3
 8017d08:	011b      	lsls	r3, r3, #4
 8017d0a:	3332      	adds	r3, #50	; 0x32
 8017d0c:	4a08      	ldr	r2, [pc, #32]	; (8017d30 <UART_SetConfig+0x4e2>)
 8017d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8017d12:	095b      	lsrs	r3, r3, #5
 8017d14:	f003 020f 	and.w	r2, r3, #15
 8017d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	4422      	add	r2, r4
 8017d20:	609a      	str	r2, [r3, #8]
}
 8017d22:	bf00      	nop
 8017d24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017d2e:	bf00      	nop
 8017d30:	51eb851f 	.word	0x51eb851f

08017d34 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8017d34:	b480      	push	{r7}
 8017d36:	b085      	sub	sp, #20
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8017d3e:	2300      	movs	r3, #0
 8017d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	681a      	ldr	r2, [r3, #0]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d4c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8017d4e:	68fa      	ldr	r2, [r7, #12]
 8017d50:	4b20      	ldr	r3, [pc, #128]	; (8017dd4 <FSMC_NORSRAM_Init+0xa0>)
 8017d52:	4013      	ands	r3, r2
 8017d54:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8017d56:	683b      	ldr	r3, [r7, #0]
 8017d58:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8017d5e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8017d64:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8017d6a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8017d6c:	683b      	ldr	r3, [r7, #0]
 8017d6e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8017d70:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8017d76:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8017d78:	683b      	ldr	r3, [r7, #0]
 8017d7a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8017d7c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8017d82:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8017d88:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8017d8e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8017d94:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8017d9a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8017da0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8017da2:	68fa      	ldr	r2, [r7, #12]
 8017da4:	4313      	orrs	r3, r2
 8017da6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	689b      	ldr	r3, [r3, #8]
 8017dac:	2b08      	cmp	r3, #8
 8017dae:	d103      	bne.n	8017db8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017db6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	681a      	ldr	r2, [r3, #0]
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	68f9      	ldr	r1, [r7, #12]
 8017dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8017dc4:	2300      	movs	r3, #0
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3714      	adds	r7, #20
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd0:	4770      	bx	lr
 8017dd2:	bf00      	nop
 8017dd4:	fff00080 	.word	0xfff00080

08017dd8 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8017dd8:	b480      	push	{r7}
 8017dda:	b085      	sub	sp, #20
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	60f8      	str	r0, [r7, #12]
 8017de0:	60b9      	str	r1, [r7, #8]
 8017de2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dec:	f023 0101 	bic.w	r1, r3, #1
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	687a      	ldr	r2, [r7, #4]
 8017df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d106      	bne.n	8017e0c <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	687a      	ldr	r2, [r7, #4]
 8017e02:	f243 01db 	movw	r1, #12507	; 0x30db
 8017e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017e0a:	e005      	b.n	8017e18 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	687a      	ldr	r2, [r7, #4]
 8017e10:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8017e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	1c5a      	adds	r2, r3, #1
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	687a      	ldr	r2, [r7, #4]
 8017e2a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 8017e32:	2300      	movs	r3, #0
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3714      	adds	r7, #20
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b087      	sub	sp, #28
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	1c5a      	adds	r2, r3, #1
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e5a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8017e5c:	697b      	ldr	r3, [r7, #20]
 8017e5e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8017e62:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017e64:	68bb      	ldr	r3, [r7, #8]
 8017e66:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017e6e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	689b      	ldr	r3, [r3, #8]
 8017e74:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8017e76:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	68db      	ldr	r3, [r3, #12]
 8017e7c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8017e7e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	691b      	ldr	r3, [r3, #16]
 8017e84:	3b01      	subs	r3, #1
 8017e86:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017e88:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	695b      	ldr	r3, [r3, #20]
 8017e8e:	3b02      	subs	r3, #2
 8017e90:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8017e92:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8017e94:	68bb      	ldr	r3, [r7, #8]
 8017e96:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017e98:	4313      	orrs	r3, r2
 8017e9a:	697a      	ldr	r2, [r7, #20]
 8017e9c:	4313      	orrs	r3, r2
 8017e9e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	1c5a      	adds	r2, r3, #1
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	6979      	ldr	r1, [r7, #20]
 8017ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8017eac:	2300      	movs	r3, #0
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	371c      	adds	r7, #28
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb8:	4770      	bx	lr

08017eba <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8017eba:	b480      	push	{r7}
 8017ebc:	b087      	sub	sp, #28
 8017ebe:	af00      	add	r7, sp, #0
 8017ec0:	60f8      	str	r0, [r7, #12]
 8017ec2:	60b9      	str	r1, [r7, #8]
 8017ec4:	607a      	str	r2, [r7, #4]
 8017ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8017ecc:	683b      	ldr	r3, [r7, #0]
 8017ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017ed2:	d122      	bne.n	8017f1a <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	687a      	ldr	r2, [r7, #4]
 8017ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017edc:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8017ede:	697a      	ldr	r2, [r7, #20]
 8017ee0:	4b14      	ldr	r3, [pc, #80]	; (8017f34 <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 8017ee2:	4013      	ands	r3, r2
 8017ee4:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	685b      	ldr	r3, [r3, #4]
 8017eee:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017ef0:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	689b      	ldr	r3, [r3, #8]
 8017ef6:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8017ef8:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8017f00:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017f06:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017f08:	697a      	ldr	r2, [r7, #20]
 8017f0a:	4313      	orrs	r3, r2
 8017f0c:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	687a      	ldr	r2, [r7, #4]
 8017f12:	6979      	ldr	r1, [r7, #20]
 8017f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017f18:	e005      	b.n	8017f26 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	687a      	ldr	r2, [r7, #4]
 8017f1e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8017f26:	2300      	movs	r3, #0
}
 8017f28:	4618      	mov	r0, r3
 8017f2a:	371c      	adds	r7, #28
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr
 8017f34:	cff00000 	.word	0xcff00000

08017f38 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8017f38:	b480      	push	{r7}
 8017f3a:	b083      	sub	sp, #12
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	683a      	ldr	r2, [r7, #0]
 8017f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f4a:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	683a      	ldr	r2, [r7, #0]
 8017f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8017f56:	2300      	movs	r3, #0
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	370c      	adds	r7, #12
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f62:	4770      	bx	lr

08017f64 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8017f64:	b480      	push	{r7}
 8017f66:	b083      	sub	sp, #12
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
 8017f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	683a      	ldr	r2, [r7, #0]
 8017f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8017f82:	2300      	movs	r3, #0
}
 8017f84:	4618      	mov	r0, r3
 8017f86:	370c      	adds	r7, #12
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8e:	4770      	bx	lr

08017f90 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8017f90:	b480      	push	{r7}
 8017f92:	b085      	sub	sp, #20
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2b10      	cmp	r3, #16
 8017fa4:	d103      	bne.n	8017fae <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	60fb      	str	r3, [r7, #12]
 8017fac:	e002      	b.n	8017fb4 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	6a1b      	ldr	r3, [r3, #32]
 8017fb2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8017fb4:	68fa      	ldr	r2, [r7, #12]
 8017fb6:	4b16      	ldr	r3, [pc, #88]	; (8018010 <FSMC_NAND_Init+0x80>)
 8017fb8:	4013      	ands	r3, r2
 8017fba:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8017fc4:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8017fca:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8017fcc:	683b      	ldr	r3, [r7, #0]
 8017fce:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8017fd0:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	695b      	ldr	r3, [r3, #20]
 8017fd6:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8017fd8:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	699b      	ldr	r3, [r3, #24]
 8017fde:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8017fe0:	431a      	orrs	r2, r3
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	4313      	orrs	r3, r2
 8017fe6:	f043 0308 	orr.w	r3, r3, #8
 8017fea:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	2b10      	cmp	r3, #16
 8017ff2:	d103      	bne.n	8017ffc <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	68fa      	ldr	r2, [r7, #12]
 8017ff8:	601a      	str	r2, [r3, #0]
 8017ffa:	e002      	b.n	8018002 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	68fa      	ldr	r2, [r7, #12]
 8018000:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8018002:	2300      	movs	r3, #0
}
 8018004:	4618      	mov	r0, r3
 8018006:	3714      	adds	r7, #20
 8018008:	46bd      	mov	sp, r7
 801800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800e:	4770      	bx	lr
 8018010:	fff00181 	.word	0xfff00181

08018014 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018014:	b480      	push	{r7}
 8018016:	b087      	sub	sp, #28
 8018018:	af00      	add	r7, sp, #0
 801801a:	60f8      	str	r0, [r7, #12]
 801801c:	60b9      	str	r1, [r7, #8]
 801801e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018020:	2300      	movs	r3, #0
 8018022:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2b10      	cmp	r3, #16
 8018028:	d103      	bne.n	8018032 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	689b      	ldr	r3, [r3, #8]
 801802e:	617b      	str	r3, [r7, #20]
 8018030:	e002      	b.n	8018038 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018036:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018038:	2300      	movs	r3, #0
 801803a:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018046:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	689b      	ldr	r3, [r3, #8]
 801804c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 801804e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018050:	68bb      	ldr	r3, [r7, #8]
 8018052:	68db      	ldr	r3, [r3, #12]
 8018054:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018056:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018058:	697a      	ldr	r2, [r7, #20]
 801805a:	4313      	orrs	r3, r2
 801805c:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	2b10      	cmp	r3, #16
 8018062:	d103      	bne.n	801806c <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	697a      	ldr	r2, [r7, #20]
 8018068:	609a      	str	r2, [r3, #8]
 801806a:	e002      	b.n	8018072 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	697a      	ldr	r2, [r7, #20]
 8018070:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8018072:	2300      	movs	r3, #0
}
 8018074:	4618      	mov	r0, r3
 8018076:	371c      	adds	r7, #28
 8018078:	46bd      	mov	sp, r7
 801807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807e:	4770      	bx	lr

08018080 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018080:	b480      	push	{r7}
 8018082:	b087      	sub	sp, #28
 8018084:	af00      	add	r7, sp, #0
 8018086:	60f8      	str	r0, [r7, #12]
 8018088:	60b9      	str	r1, [r7, #8]
 801808a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 801808c:	2300      	movs	r3, #0
 801808e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2b10      	cmp	r3, #16
 8018094:	d103      	bne.n	801809e <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	68db      	ldr	r3, [r3, #12]
 801809a:	617b      	str	r3, [r7, #20]
 801809c:	e002      	b.n	80180a4 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180a2:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 80180a4:	2300      	movs	r3, #0
 80180a6:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	685b      	ldr	r3, [r3, #4]
 80180b0:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80180b2:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	689b      	ldr	r3, [r3, #8]
 80180b8:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80180ba:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	68db      	ldr	r3, [r3, #12]
 80180c0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80180c2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80180c4:	697a      	ldr	r2, [r7, #20]
 80180c6:	4313      	orrs	r3, r2
 80180c8:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2b10      	cmp	r3, #16
 80180ce:	d103      	bne.n	80180d8 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	697a      	ldr	r2, [r7, #20]
 80180d4:	60da      	str	r2, [r3, #12]
 80180d6:	e002      	b.n	80180de <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	697a      	ldr	r2, [r7, #20]
 80180dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80180de:	2300      	movs	r3, #0
}
 80180e0:	4618      	mov	r0, r3
 80180e2:	371c      	adds	r7, #28
 80180e4:	46bd      	mov	sp, r7
 80180e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ea:	4770      	bx	lr

080180ec <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b083      	sub	sp, #12
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	2b10      	cmp	r3, #16
 80180fa:	d106      	bne.n	801810a <FSMC_NAND_DeInit+0x1e>
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f023 0204 	bic.w	r2, r3, #4
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	601a      	str	r2, [r3, #0]
 8018108:	e005      	b.n	8018116 <FSMC_NAND_DeInit+0x2a>
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	6a1b      	ldr	r3, [r3, #32]
 801810e:	f023 0204 	bic.w	r2, r3, #4
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	2b10      	cmp	r3, #16
 801811a:	d10e      	bne.n	801813a <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2218      	movs	r2, #24
 8018120:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	2240      	movs	r2, #64	; 0x40
 8018126:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801812e:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018136:	60da      	str	r2, [r3, #12]
 8018138:	e00d      	b.n	8018156 <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	2218      	movs	r2, #24
 801813e:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2240      	movs	r2, #64	; 0x40
 8018144:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801814c:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018154:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 8018156:	2300      	movs	r3, #0
}
 8018158:	4618      	mov	r0, r3
 801815a:	370c      	adds	r7, #12
 801815c:	46bd      	mov	sp, r7
 801815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018162:	4770      	bx	lr

08018164 <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018164:	b480      	push	{r7}
 8018166:	b083      	sub	sp, #12
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
 801816c:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	2b10      	cmp	r3, #16
 8018172:	d106      	bne.n	8018182 <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	601a      	str	r2, [r3, #0]
 8018180:	e005      	b.n	801818e <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6a1b      	ldr	r3, [r3, #32]
 8018186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 801818e:	2300      	movs	r3, #0
}
 8018190:	4618      	mov	r0, r3
 8018192:	370c      	adds	r7, #12
 8018194:	46bd      	mov	sp, r7
 8018196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819a:	4770      	bx	lr

0801819c <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 801819c:	b480      	push	{r7}
 801819e:	b083      	sub	sp, #12
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
 80181a4:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	2b10      	cmp	r3, #16
 80181aa:	d106      	bne.n	80181ba <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	601a      	str	r2, [r3, #0]
 80181b8:	e005      	b.n	80181c6 <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6a1b      	ldr	r3, [r3, #32]
 80181be:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 80181c6:	2300      	movs	r3, #0
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	370c      	adds	r7, #12
 80181cc:	46bd      	mov	sp, r7
 80181ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d2:	4770      	bx	lr

080181d4 <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b086      	sub	sp, #24
 80181d8:	af00      	add	r7, sp, #0
 80181da:	60f8      	str	r0, [r7, #12]
 80181dc:	60b9      	str	r1, [r7, #8]
 80181de:	607a      	str	r2, [r7, #4]
 80181e0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 80181e2:	2300      	movs	r3, #0
 80181e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80181e6:	f7ee f825 	bl	8006234 <HAL_GetTick>
 80181ea:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80181ec:	e010      	b.n	8018210 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181f4:	d00c      	beq.n	8018210 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d007      	beq.n	801820c <FSMC_NAND_GetECC+0x38>
 80181fc:	f7ee f81a 	bl	8006234 <HAL_GetTick>
 8018200:	4602      	mov	r2, r0
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	1ad3      	subs	r3, r2, r3
 8018206:	683a      	ldr	r2, [r7, #0]
 8018208:	429a      	cmp	r2, r3
 801820a:	d201      	bcs.n	8018210 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 801820c:	2303      	movs	r3, #3
 801820e:	e024      	b.n	801825a <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2b10      	cmp	r3, #16
 8018214:	d109      	bne.n	801822a <FSMC_NAND_GetECC+0x56>
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801821e:	2b40      	cmp	r3, #64	; 0x40
 8018220:	bf14      	ite	ne
 8018222:	2301      	movne	r3, #1
 8018224:	2300      	moveq	r3, #0
 8018226:	b2db      	uxtb	r3, r3
 8018228:	e008      	b.n	801823c <FSMC_NAND_GetECC+0x68>
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018232:	2b40      	cmp	r3, #64	; 0x40
 8018234:	bf14      	ite	ne
 8018236:	2301      	movne	r3, #1
 8018238:	2300      	moveq	r3, #0
 801823a:	b2db      	uxtb	r3, r3
 801823c:	2b00      	cmp	r3, #0
 801823e:	d1d6      	bne.n	80181ee <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2b10      	cmp	r3, #16
 8018244:	d104      	bne.n	8018250 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	695a      	ldr	r2, [r3, #20]
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	601a      	str	r2, [r3, #0]
 801824e:	e003      	b.n	8018258 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018258:	2300      	movs	r3, #0
}
 801825a:	4618      	mov	r0, r3
 801825c:	3718      	adds	r7, #24
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}

08018262 <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 8018262:	b480      	push	{r7}
 8018264:	b085      	sub	sp, #20
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
 801826a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801826c:	2300      	movs	r3, #0
 801826e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 801827c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018280:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	685b      	ldr	r3, [r3, #4]
 801828a:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 801828c:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	689b      	ldr	r3, [r3, #8]
 8018292:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018294:	431a      	orrs	r2, r3
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	4313      	orrs	r3, r2
 801829a:	f043 0310 	orr.w	r3, r3, #16
 801829e:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	68fa      	ldr	r2, [r7, #12]
 80182a4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80182a6:	2300      	movs	r3, #0
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3714      	adds	r7, #20
 80182ac:	46bd      	mov	sp, r7
 80182ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b2:	4770      	bx	lr

080182b4 <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80182b4:	b480      	push	{r7}
 80182b6:	b085      	sub	sp, #20
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
 80182bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80182be:	2300      	movs	r3, #0
 80182c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	689b      	ldr	r3, [r3, #8]
 80182c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 80182c8:	2300      	movs	r3, #0
 80182ca:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80182d6:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 80182d8:	683b      	ldr	r3, [r7, #0]
 80182da:	689b      	ldr	r3, [r3, #8]
 80182dc:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 80182de:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 80182e6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80182e8:	68fa      	ldr	r2, [r7, #12]
 80182ea:	4313      	orrs	r3, r2
 80182ec:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	68fa      	ldr	r2, [r7, #12]
 80182f2:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 80182f4:	2300      	movs	r3, #0
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3714      	adds	r7, #20
 80182fa:	46bd      	mov	sp, r7
 80182fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018300:	4770      	bx	lr

08018302 <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018302:	b480      	push	{r7}
 8018304:	b085      	sub	sp, #20
 8018306:	af00      	add	r7, sp, #0
 8018308:	6078      	str	r0, [r7, #4]
 801830a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801830c:	2300      	movs	r3, #0
 801830e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	68db      	ldr	r3, [r3, #12]
 8018314:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 8018316:	2300      	movs	r3, #0
 8018318:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	685b      	ldr	r3, [r3, #4]
 8018322:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018324:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 8018326:	683b      	ldr	r3, [r7, #0]
 8018328:	689b      	ldr	r3, [r3, #8]
 801832a:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 801832c:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 8018334:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018336:	68fa      	ldr	r2, [r7, #12]
 8018338:	4313      	orrs	r3, r2
 801833a:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	68fa      	ldr	r2, [r7, #12]
 8018340:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 8018342:	2300      	movs	r3, #0
}
 8018344:	4618      	mov	r0, r3
 8018346:	3714      	adds	r7, #20
 8018348:	46bd      	mov	sp, r7
 801834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834e:	4770      	bx	lr

08018350 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018350:	b480      	push	{r7}
 8018352:	b085      	sub	sp, #20
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
 8018358:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801835a:	2300      	movs	r3, #0
 801835c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	691b      	ldr	r3, [r3, #16]
 8018362:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 8018364:	2300      	movs	r3, #0
 8018366:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018368:	683b      	ldr	r3, [r7, #0]
 801836a:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	685b      	ldr	r3, [r3, #4]
 8018370:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018372:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	689b      	ldr	r3, [r3, #8]
 8018378:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 801837a:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018382:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018384:	68fa      	ldr	r2, [r7, #12]
 8018386:	4313      	orrs	r3, r2
 8018388:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	68fa      	ldr	r2, [r7, #12]
 801838e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018390:	2300      	movs	r3, #0
}
 8018392:	4618      	mov	r0, r3
 8018394:	3714      	adds	r7, #20
 8018396:	46bd      	mov	sp, r7
 8018398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839c:	4770      	bx	lr

0801839e <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 801839e:	b480      	push	{r7}
 80183a0:	b083      	sub	sp, #12
 80183a2:	af00      	add	r7, sp, #0
 80183a4:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	f023 0204 	bic.w	r2, r3, #4
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	2218      	movs	r2, #24
 80183b6:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2200      	movs	r2, #0
 80183bc:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80183c4:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80183cc:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80183d4:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80183d6:	2300      	movs	r3, #0
}
 80183d8:	4618      	mov	r0, r3
 80183da:	370c      	adds	r7, #12
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr

080183e4 <strlen>:
 80183e4:	4603      	mov	r3, r0
 80183e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183ea:	2a00      	cmp	r2, #0
 80183ec:	d1fb      	bne.n	80183e6 <strlen+0x2>
 80183ee:	1a18      	subs	r0, r3, r0
 80183f0:	3801      	subs	r0, #1
 80183f2:	4770      	bx	lr
	...

08018400 <memchr>:
 8018400:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8018404:	2a10      	cmp	r2, #16
 8018406:	db2b      	blt.n	8018460 <memchr+0x60>
 8018408:	f010 0f07 	tst.w	r0, #7
 801840c:	d008      	beq.n	8018420 <memchr+0x20>
 801840e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018412:	3a01      	subs	r2, #1
 8018414:	428b      	cmp	r3, r1
 8018416:	d02d      	beq.n	8018474 <memchr+0x74>
 8018418:	f010 0f07 	tst.w	r0, #7
 801841c:	b342      	cbz	r2, 8018470 <memchr+0x70>
 801841e:	d1f6      	bne.n	801840e <memchr+0xe>
 8018420:	b4f0      	push	{r4, r5, r6, r7}
 8018422:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018426:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801842a:	f022 0407 	bic.w	r4, r2, #7
 801842e:	f07f 0700 	mvns.w	r7, #0
 8018432:	2300      	movs	r3, #0
 8018434:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018438:	3c08      	subs	r4, #8
 801843a:	ea85 0501 	eor.w	r5, r5, r1
 801843e:	ea86 0601 	eor.w	r6, r6, r1
 8018442:	fa85 f547 	uadd8	r5, r5, r7
 8018446:	faa3 f587 	sel	r5, r3, r7
 801844a:	fa86 f647 	uadd8	r6, r6, r7
 801844e:	faa5 f687 	sel	r6, r5, r7
 8018452:	b98e      	cbnz	r6, 8018478 <memchr+0x78>
 8018454:	d1ee      	bne.n	8018434 <memchr+0x34>
 8018456:	bcf0      	pop	{r4, r5, r6, r7}
 8018458:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801845c:	f002 0207 	and.w	r2, r2, #7
 8018460:	b132      	cbz	r2, 8018470 <memchr+0x70>
 8018462:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018466:	3a01      	subs	r2, #1
 8018468:	ea83 0301 	eor.w	r3, r3, r1
 801846c:	b113      	cbz	r3, 8018474 <memchr+0x74>
 801846e:	d1f8      	bne.n	8018462 <memchr+0x62>
 8018470:	2000      	movs	r0, #0
 8018472:	4770      	bx	lr
 8018474:	3801      	subs	r0, #1
 8018476:	4770      	bx	lr
 8018478:	2d00      	cmp	r5, #0
 801847a:	bf06      	itte	eq
 801847c:	4635      	moveq	r5, r6
 801847e:	3803      	subeq	r0, #3
 8018480:	3807      	subne	r0, #7
 8018482:	f015 0f01 	tst.w	r5, #1
 8018486:	d107      	bne.n	8018498 <memchr+0x98>
 8018488:	3001      	adds	r0, #1
 801848a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801848e:	bf02      	ittt	eq
 8018490:	3001      	addeq	r0, #1
 8018492:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018496:	3001      	addeq	r0, #1
 8018498:	bcf0      	pop	{r4, r5, r6, r7}
 801849a:	3801      	subs	r0, #1
 801849c:	4770      	bx	lr
 801849e:	bf00      	nop

080184a0 <__aeabi_drsub>:
 80184a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80184a4:	e002      	b.n	80184ac <__adddf3>
 80184a6:	bf00      	nop

080184a8 <__aeabi_dsub>:
 80184a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080184ac <__adddf3>:
 80184ac:	b530      	push	{r4, r5, lr}
 80184ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80184b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80184b6:	ea94 0f05 	teq	r4, r5
 80184ba:	bf08      	it	eq
 80184bc:	ea90 0f02 	teqeq	r0, r2
 80184c0:	bf1f      	itttt	ne
 80184c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80184c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80184ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80184ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80184d2:	f000 80e2 	beq.w	801869a <__adddf3+0x1ee>
 80184d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80184da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80184de:	bfb8      	it	lt
 80184e0:	426d      	neglt	r5, r5
 80184e2:	dd0c      	ble.n	80184fe <__adddf3+0x52>
 80184e4:	442c      	add	r4, r5
 80184e6:	ea80 0202 	eor.w	r2, r0, r2
 80184ea:	ea81 0303 	eor.w	r3, r1, r3
 80184ee:	ea82 0000 	eor.w	r0, r2, r0
 80184f2:	ea83 0101 	eor.w	r1, r3, r1
 80184f6:	ea80 0202 	eor.w	r2, r0, r2
 80184fa:	ea81 0303 	eor.w	r3, r1, r3
 80184fe:	2d36      	cmp	r5, #54	; 0x36
 8018500:	bf88      	it	hi
 8018502:	bd30      	pophi	{r4, r5, pc}
 8018504:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018508:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801850c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018510:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018514:	d002      	beq.n	801851c <__adddf3+0x70>
 8018516:	4240      	negs	r0, r0
 8018518:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801851c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018520:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018524:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018528:	d002      	beq.n	8018530 <__adddf3+0x84>
 801852a:	4252      	negs	r2, r2
 801852c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018530:	ea94 0f05 	teq	r4, r5
 8018534:	f000 80a7 	beq.w	8018686 <__adddf3+0x1da>
 8018538:	f1a4 0401 	sub.w	r4, r4, #1
 801853c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018540:	db0d      	blt.n	801855e <__adddf3+0xb2>
 8018542:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018546:	fa22 f205 	lsr.w	r2, r2, r5
 801854a:	1880      	adds	r0, r0, r2
 801854c:	f141 0100 	adc.w	r1, r1, #0
 8018550:	fa03 f20e 	lsl.w	r2, r3, lr
 8018554:	1880      	adds	r0, r0, r2
 8018556:	fa43 f305 	asr.w	r3, r3, r5
 801855a:	4159      	adcs	r1, r3
 801855c:	e00e      	b.n	801857c <__adddf3+0xd0>
 801855e:	f1a5 0520 	sub.w	r5, r5, #32
 8018562:	f10e 0e20 	add.w	lr, lr, #32
 8018566:	2a01      	cmp	r2, #1
 8018568:	fa03 fc0e 	lsl.w	ip, r3, lr
 801856c:	bf28      	it	cs
 801856e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018572:	fa43 f305 	asr.w	r3, r3, r5
 8018576:	18c0      	adds	r0, r0, r3
 8018578:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801857c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018580:	d507      	bpl.n	8018592 <__adddf3+0xe6>
 8018582:	f04f 0e00 	mov.w	lr, #0
 8018586:	f1dc 0c00 	rsbs	ip, ip, #0
 801858a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801858e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018592:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018596:	d31b      	bcc.n	80185d0 <__adddf3+0x124>
 8018598:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801859c:	d30c      	bcc.n	80185b8 <__adddf3+0x10c>
 801859e:	0849      	lsrs	r1, r1, #1
 80185a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80185a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80185a8:	f104 0401 	add.w	r4, r4, #1
 80185ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80185b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80185b4:	f080 809a 	bcs.w	80186ec <__adddf3+0x240>
 80185b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80185bc:	bf08      	it	eq
 80185be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80185c2:	f150 0000 	adcs.w	r0, r0, #0
 80185c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80185ca:	ea41 0105 	orr.w	r1, r1, r5
 80185ce:	bd30      	pop	{r4, r5, pc}
 80185d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80185d4:	4140      	adcs	r0, r0
 80185d6:	eb41 0101 	adc.w	r1, r1, r1
 80185da:	3c01      	subs	r4, #1
 80185dc:	bf28      	it	cs
 80185de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80185e2:	d2e9      	bcs.n	80185b8 <__adddf3+0x10c>
 80185e4:	f091 0f00 	teq	r1, #0
 80185e8:	bf04      	itt	eq
 80185ea:	4601      	moveq	r1, r0
 80185ec:	2000      	moveq	r0, #0
 80185ee:	fab1 f381 	clz	r3, r1
 80185f2:	bf08      	it	eq
 80185f4:	3320      	addeq	r3, #32
 80185f6:	f1a3 030b 	sub.w	r3, r3, #11
 80185fa:	f1b3 0220 	subs.w	r2, r3, #32
 80185fe:	da0c      	bge.n	801861a <__adddf3+0x16e>
 8018600:	320c      	adds	r2, #12
 8018602:	dd08      	ble.n	8018616 <__adddf3+0x16a>
 8018604:	f102 0c14 	add.w	ip, r2, #20
 8018608:	f1c2 020c 	rsb	r2, r2, #12
 801860c:	fa01 f00c 	lsl.w	r0, r1, ip
 8018610:	fa21 f102 	lsr.w	r1, r1, r2
 8018614:	e00c      	b.n	8018630 <__adddf3+0x184>
 8018616:	f102 0214 	add.w	r2, r2, #20
 801861a:	bfd8      	it	le
 801861c:	f1c2 0c20 	rsble	ip, r2, #32
 8018620:	fa01 f102 	lsl.w	r1, r1, r2
 8018624:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018628:	bfdc      	itt	le
 801862a:	ea41 010c 	orrle.w	r1, r1, ip
 801862e:	4090      	lslle	r0, r2
 8018630:	1ae4      	subs	r4, r4, r3
 8018632:	bfa2      	ittt	ge
 8018634:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8018638:	4329      	orrge	r1, r5
 801863a:	bd30      	popge	{r4, r5, pc}
 801863c:	ea6f 0404 	mvn.w	r4, r4
 8018640:	3c1f      	subs	r4, #31
 8018642:	da1c      	bge.n	801867e <__adddf3+0x1d2>
 8018644:	340c      	adds	r4, #12
 8018646:	dc0e      	bgt.n	8018666 <__adddf3+0x1ba>
 8018648:	f104 0414 	add.w	r4, r4, #20
 801864c:	f1c4 0220 	rsb	r2, r4, #32
 8018650:	fa20 f004 	lsr.w	r0, r0, r4
 8018654:	fa01 f302 	lsl.w	r3, r1, r2
 8018658:	ea40 0003 	orr.w	r0, r0, r3
 801865c:	fa21 f304 	lsr.w	r3, r1, r4
 8018660:	ea45 0103 	orr.w	r1, r5, r3
 8018664:	bd30      	pop	{r4, r5, pc}
 8018666:	f1c4 040c 	rsb	r4, r4, #12
 801866a:	f1c4 0220 	rsb	r2, r4, #32
 801866e:	fa20 f002 	lsr.w	r0, r0, r2
 8018672:	fa01 f304 	lsl.w	r3, r1, r4
 8018676:	ea40 0003 	orr.w	r0, r0, r3
 801867a:	4629      	mov	r1, r5
 801867c:	bd30      	pop	{r4, r5, pc}
 801867e:	fa21 f004 	lsr.w	r0, r1, r4
 8018682:	4629      	mov	r1, r5
 8018684:	bd30      	pop	{r4, r5, pc}
 8018686:	f094 0f00 	teq	r4, #0
 801868a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801868e:	bf06      	itte	eq
 8018690:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018694:	3401      	addeq	r4, #1
 8018696:	3d01      	subne	r5, #1
 8018698:	e74e      	b.n	8018538 <__adddf3+0x8c>
 801869a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801869e:	bf18      	it	ne
 80186a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80186a4:	d029      	beq.n	80186fa <__adddf3+0x24e>
 80186a6:	ea94 0f05 	teq	r4, r5
 80186aa:	bf08      	it	eq
 80186ac:	ea90 0f02 	teqeq	r0, r2
 80186b0:	d005      	beq.n	80186be <__adddf3+0x212>
 80186b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80186b6:	bf04      	itt	eq
 80186b8:	4619      	moveq	r1, r3
 80186ba:	4610      	moveq	r0, r2
 80186bc:	bd30      	pop	{r4, r5, pc}
 80186be:	ea91 0f03 	teq	r1, r3
 80186c2:	bf1e      	ittt	ne
 80186c4:	2100      	movne	r1, #0
 80186c6:	2000      	movne	r0, #0
 80186c8:	bd30      	popne	{r4, r5, pc}
 80186ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80186ce:	d105      	bne.n	80186dc <__adddf3+0x230>
 80186d0:	0040      	lsls	r0, r0, #1
 80186d2:	4149      	adcs	r1, r1
 80186d4:	bf28      	it	cs
 80186d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80186da:	bd30      	pop	{r4, r5, pc}
 80186dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80186e0:	bf3c      	itt	cc
 80186e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80186e6:	bd30      	popcc	{r4, r5, pc}
 80186e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80186ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80186f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80186f4:	f04f 0000 	mov.w	r0, #0
 80186f8:	bd30      	pop	{r4, r5, pc}
 80186fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80186fe:	bf1a      	itte	ne
 8018700:	4619      	movne	r1, r3
 8018702:	4610      	movne	r0, r2
 8018704:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8018708:	bf1c      	itt	ne
 801870a:	460b      	movne	r3, r1
 801870c:	4602      	movne	r2, r0
 801870e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018712:	bf06      	itte	eq
 8018714:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8018718:	ea91 0f03 	teqeq	r1, r3
 801871c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8018720:	bd30      	pop	{r4, r5, pc}
 8018722:	bf00      	nop

08018724 <__aeabi_ui2d>:
 8018724:	f090 0f00 	teq	r0, #0
 8018728:	bf04      	itt	eq
 801872a:	2100      	moveq	r1, #0
 801872c:	4770      	bxeq	lr
 801872e:	b530      	push	{r4, r5, lr}
 8018730:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018734:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018738:	f04f 0500 	mov.w	r5, #0
 801873c:	f04f 0100 	mov.w	r1, #0
 8018740:	e750      	b.n	80185e4 <__adddf3+0x138>
 8018742:	bf00      	nop

08018744 <__aeabi_i2d>:
 8018744:	f090 0f00 	teq	r0, #0
 8018748:	bf04      	itt	eq
 801874a:	2100      	moveq	r1, #0
 801874c:	4770      	bxeq	lr
 801874e:	b530      	push	{r4, r5, lr}
 8018750:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018754:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018758:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801875c:	bf48      	it	mi
 801875e:	4240      	negmi	r0, r0
 8018760:	f04f 0100 	mov.w	r1, #0
 8018764:	e73e      	b.n	80185e4 <__adddf3+0x138>
 8018766:	bf00      	nop

08018768 <__aeabi_f2d>:
 8018768:	0042      	lsls	r2, r0, #1
 801876a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801876e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018772:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018776:	bf1f      	itttt	ne
 8018778:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801877c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018780:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018784:	4770      	bxne	lr
 8018786:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801878a:	bf08      	it	eq
 801878c:	4770      	bxeq	lr
 801878e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018792:	bf04      	itt	eq
 8018794:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018798:	4770      	bxeq	lr
 801879a:	b530      	push	{r4, r5, lr}
 801879c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80187a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80187a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80187a8:	e71c      	b.n	80185e4 <__adddf3+0x138>
 80187aa:	bf00      	nop

080187ac <__aeabi_ul2d>:
 80187ac:	ea50 0201 	orrs.w	r2, r0, r1
 80187b0:	bf08      	it	eq
 80187b2:	4770      	bxeq	lr
 80187b4:	b530      	push	{r4, r5, lr}
 80187b6:	f04f 0500 	mov.w	r5, #0
 80187ba:	e00a      	b.n	80187d2 <__aeabi_l2d+0x16>

080187bc <__aeabi_l2d>:
 80187bc:	ea50 0201 	orrs.w	r2, r0, r1
 80187c0:	bf08      	it	eq
 80187c2:	4770      	bxeq	lr
 80187c4:	b530      	push	{r4, r5, lr}
 80187c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80187ca:	d502      	bpl.n	80187d2 <__aeabi_l2d+0x16>
 80187cc:	4240      	negs	r0, r0
 80187ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80187d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80187d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80187da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80187de:	f43f aed8 	beq.w	8018592 <__adddf3+0xe6>
 80187e2:	f04f 0203 	mov.w	r2, #3
 80187e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80187ea:	bf18      	it	ne
 80187ec:	3203      	addne	r2, #3
 80187ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80187f2:	bf18      	it	ne
 80187f4:	3203      	addne	r2, #3
 80187f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80187fa:	f1c2 0320 	rsb	r3, r2, #32
 80187fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8018802:	fa20 f002 	lsr.w	r0, r0, r2
 8018806:	fa01 fe03 	lsl.w	lr, r1, r3
 801880a:	ea40 000e 	orr.w	r0, r0, lr
 801880e:	fa21 f102 	lsr.w	r1, r1, r2
 8018812:	4414      	add	r4, r2
 8018814:	e6bd      	b.n	8018592 <__adddf3+0xe6>
 8018816:	bf00      	nop

08018818 <__aeabi_dmul>:
 8018818:	b570      	push	{r4, r5, r6, lr}
 801881a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801881e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018826:	bf1d      	ittte	ne
 8018828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801882c:	ea94 0f0c 	teqne	r4, ip
 8018830:	ea95 0f0c 	teqne	r5, ip
 8018834:	f000 f8de 	bleq	80189f4 <__aeabi_dmul+0x1dc>
 8018838:	442c      	add	r4, r5
 801883a:	ea81 0603 	eor.w	r6, r1, r3
 801883e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018842:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018846:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801884a:	bf18      	it	ne
 801884c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018858:	d038      	beq.n	80188cc <__aeabi_dmul+0xb4>
 801885a:	fba0 ce02 	umull	ip, lr, r0, r2
 801885e:	f04f 0500 	mov.w	r5, #0
 8018862:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018866:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801886a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801886e:	f04f 0600 	mov.w	r6, #0
 8018872:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018876:	f09c 0f00 	teq	ip, #0
 801887a:	bf18      	it	ne
 801887c:	f04e 0e01 	orrne.w	lr, lr, #1
 8018880:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018884:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018888:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801888c:	d204      	bcs.n	8018898 <__aeabi_dmul+0x80>
 801888e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018892:	416d      	adcs	r5, r5
 8018894:	eb46 0606 	adc.w	r6, r6, r6
 8018898:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801889c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80188a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80188a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80188a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80188ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80188b0:	bf88      	it	hi
 80188b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80188b6:	d81e      	bhi.n	80188f6 <__aeabi_dmul+0xde>
 80188b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80188bc:	bf08      	it	eq
 80188be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80188c2:	f150 0000 	adcs.w	r0, r0, #0
 80188c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80188ca:	bd70      	pop	{r4, r5, r6, pc}
 80188cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80188d0:	ea46 0101 	orr.w	r1, r6, r1
 80188d4:	ea40 0002 	orr.w	r0, r0, r2
 80188d8:	ea81 0103 	eor.w	r1, r1, r3
 80188dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80188e0:	bfc2      	ittt	gt
 80188e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80188e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80188ea:	bd70      	popgt	{r4, r5, r6, pc}
 80188ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80188f0:	f04f 0e00 	mov.w	lr, #0
 80188f4:	3c01      	subs	r4, #1
 80188f6:	f300 80ab 	bgt.w	8018a50 <__aeabi_dmul+0x238>
 80188fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80188fe:	bfde      	ittt	le
 8018900:	2000      	movle	r0, #0
 8018902:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018906:	bd70      	pople	{r4, r5, r6, pc}
 8018908:	f1c4 0400 	rsb	r4, r4, #0
 801890c:	3c20      	subs	r4, #32
 801890e:	da35      	bge.n	801897c <__aeabi_dmul+0x164>
 8018910:	340c      	adds	r4, #12
 8018912:	dc1b      	bgt.n	801894c <__aeabi_dmul+0x134>
 8018914:	f104 0414 	add.w	r4, r4, #20
 8018918:	f1c4 0520 	rsb	r5, r4, #32
 801891c:	fa00 f305 	lsl.w	r3, r0, r5
 8018920:	fa20 f004 	lsr.w	r0, r0, r4
 8018924:	fa01 f205 	lsl.w	r2, r1, r5
 8018928:	ea40 0002 	orr.w	r0, r0, r2
 801892c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8018930:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018934:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018938:	fa21 f604 	lsr.w	r6, r1, r4
 801893c:	eb42 0106 	adc.w	r1, r2, r6
 8018940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018944:	bf08      	it	eq
 8018946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801894a:	bd70      	pop	{r4, r5, r6, pc}
 801894c:	f1c4 040c 	rsb	r4, r4, #12
 8018950:	f1c4 0520 	rsb	r5, r4, #32
 8018954:	fa00 f304 	lsl.w	r3, r0, r4
 8018958:	fa20 f005 	lsr.w	r0, r0, r5
 801895c:	fa01 f204 	lsl.w	r2, r1, r4
 8018960:	ea40 0002 	orr.w	r0, r0, r2
 8018964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018968:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801896c:	f141 0100 	adc.w	r1, r1, #0
 8018970:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018974:	bf08      	it	eq
 8018976:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801897a:	bd70      	pop	{r4, r5, r6, pc}
 801897c:	f1c4 0520 	rsb	r5, r4, #32
 8018980:	fa00 f205 	lsl.w	r2, r0, r5
 8018984:	ea4e 0e02 	orr.w	lr, lr, r2
 8018988:	fa20 f304 	lsr.w	r3, r0, r4
 801898c:	fa01 f205 	lsl.w	r2, r1, r5
 8018990:	ea43 0302 	orr.w	r3, r3, r2
 8018994:	fa21 f004 	lsr.w	r0, r1, r4
 8018998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801899c:	fa21 f204 	lsr.w	r2, r1, r4
 80189a0:	ea20 0002 	bic.w	r0, r0, r2
 80189a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80189a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80189ac:	bf08      	it	eq
 80189ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80189b2:	bd70      	pop	{r4, r5, r6, pc}
 80189b4:	f094 0f00 	teq	r4, #0
 80189b8:	d10f      	bne.n	80189da <__aeabi_dmul+0x1c2>
 80189ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80189be:	0040      	lsls	r0, r0, #1
 80189c0:	eb41 0101 	adc.w	r1, r1, r1
 80189c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80189c8:	bf08      	it	eq
 80189ca:	3c01      	subeq	r4, #1
 80189cc:	d0f7      	beq.n	80189be <__aeabi_dmul+0x1a6>
 80189ce:	ea41 0106 	orr.w	r1, r1, r6
 80189d2:	f095 0f00 	teq	r5, #0
 80189d6:	bf18      	it	ne
 80189d8:	4770      	bxne	lr
 80189da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80189de:	0052      	lsls	r2, r2, #1
 80189e0:	eb43 0303 	adc.w	r3, r3, r3
 80189e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80189e8:	bf08      	it	eq
 80189ea:	3d01      	subeq	r5, #1
 80189ec:	d0f7      	beq.n	80189de <__aeabi_dmul+0x1c6>
 80189ee:	ea43 0306 	orr.w	r3, r3, r6
 80189f2:	4770      	bx	lr
 80189f4:	ea94 0f0c 	teq	r4, ip
 80189f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80189fc:	bf18      	it	ne
 80189fe:	ea95 0f0c 	teqne	r5, ip
 8018a02:	d00c      	beq.n	8018a1e <__aeabi_dmul+0x206>
 8018a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018a08:	bf18      	it	ne
 8018a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018a0e:	d1d1      	bne.n	80189b4 <__aeabi_dmul+0x19c>
 8018a10:	ea81 0103 	eor.w	r1, r1, r3
 8018a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018a18:	f04f 0000 	mov.w	r0, #0
 8018a1c:	bd70      	pop	{r4, r5, r6, pc}
 8018a1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018a22:	bf06      	itte	eq
 8018a24:	4610      	moveq	r0, r2
 8018a26:	4619      	moveq	r1, r3
 8018a28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018a2c:	d019      	beq.n	8018a62 <__aeabi_dmul+0x24a>
 8018a2e:	ea94 0f0c 	teq	r4, ip
 8018a32:	d102      	bne.n	8018a3a <__aeabi_dmul+0x222>
 8018a34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8018a38:	d113      	bne.n	8018a62 <__aeabi_dmul+0x24a>
 8018a3a:	ea95 0f0c 	teq	r5, ip
 8018a3e:	d105      	bne.n	8018a4c <__aeabi_dmul+0x234>
 8018a40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8018a44:	bf1c      	itt	ne
 8018a46:	4610      	movne	r0, r2
 8018a48:	4619      	movne	r1, r3
 8018a4a:	d10a      	bne.n	8018a62 <__aeabi_dmul+0x24a>
 8018a4c:	ea81 0103 	eor.w	r1, r1, r3
 8018a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018a54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018a58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018a5c:	f04f 0000 	mov.w	r0, #0
 8018a60:	bd70      	pop	{r4, r5, r6, pc}
 8018a62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018a66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8018a6a:	bd70      	pop	{r4, r5, r6, pc}

08018a6c <__aeabi_ddiv>:
 8018a6c:	b570      	push	{r4, r5, r6, lr}
 8018a6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018a72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018a76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018a7a:	bf1d      	ittte	ne
 8018a7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018a80:	ea94 0f0c 	teqne	r4, ip
 8018a84:	ea95 0f0c 	teqne	r5, ip
 8018a88:	f000 f8a7 	bleq	8018bda <__aeabi_ddiv+0x16e>
 8018a8c:	eba4 0405 	sub.w	r4, r4, r5
 8018a90:	ea81 0e03 	eor.w	lr, r1, r3
 8018a94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018a98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018a9c:	f000 8088 	beq.w	8018bb0 <__aeabi_ddiv+0x144>
 8018aa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018aa4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8018aa8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8018aac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018ab0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8018ab4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8018ab8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8018abc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8018ac0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8018ac4:	429d      	cmp	r5, r3
 8018ac6:	bf08      	it	eq
 8018ac8:	4296      	cmpeq	r6, r2
 8018aca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8018ace:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8018ad2:	d202      	bcs.n	8018ada <__aeabi_ddiv+0x6e>
 8018ad4:	085b      	lsrs	r3, r3, #1
 8018ad6:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ada:	1ab6      	subs	r6, r6, r2
 8018adc:	eb65 0503 	sbc.w	r5, r5, r3
 8018ae0:	085b      	lsrs	r3, r3, #1
 8018ae2:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ae6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8018aea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8018aee:	ebb6 0e02 	subs.w	lr, r6, r2
 8018af2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018af6:	bf22      	ittt	cs
 8018af8:	1ab6      	subcs	r6, r6, r2
 8018afa:	4675      	movcs	r5, lr
 8018afc:	ea40 000c 	orrcs.w	r0, r0, ip
 8018b00:	085b      	lsrs	r3, r3, #1
 8018b02:	ea4f 0232 	mov.w	r2, r2, rrx
 8018b06:	ebb6 0e02 	subs.w	lr, r6, r2
 8018b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018b0e:	bf22      	ittt	cs
 8018b10:	1ab6      	subcs	r6, r6, r2
 8018b12:	4675      	movcs	r5, lr
 8018b14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018b18:	085b      	lsrs	r3, r3, #1
 8018b1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8018b1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8018b22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018b26:	bf22      	ittt	cs
 8018b28:	1ab6      	subcs	r6, r6, r2
 8018b2a:	4675      	movcs	r5, lr
 8018b2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8018b30:	085b      	lsrs	r3, r3, #1
 8018b32:	ea4f 0232 	mov.w	r2, r2, rrx
 8018b36:	ebb6 0e02 	subs.w	lr, r6, r2
 8018b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018b3e:	bf22      	ittt	cs
 8018b40:	1ab6      	subcs	r6, r6, r2
 8018b42:	4675      	movcs	r5, lr
 8018b44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8018b48:	ea55 0e06 	orrs.w	lr, r5, r6
 8018b4c:	d018      	beq.n	8018b80 <__aeabi_ddiv+0x114>
 8018b4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8018b52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8018b56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8018b5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018b5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8018b62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018b66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8018b6a:	d1c0      	bne.n	8018aee <__aeabi_ddiv+0x82>
 8018b6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018b70:	d10b      	bne.n	8018b8a <__aeabi_ddiv+0x11e>
 8018b72:	ea41 0100 	orr.w	r1, r1, r0
 8018b76:	f04f 0000 	mov.w	r0, #0
 8018b7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8018b7e:	e7b6      	b.n	8018aee <__aeabi_ddiv+0x82>
 8018b80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018b84:	bf04      	itt	eq
 8018b86:	4301      	orreq	r1, r0
 8018b88:	2000      	moveq	r0, #0
 8018b8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018b8e:	bf88      	it	hi
 8018b90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018b94:	f63f aeaf 	bhi.w	80188f6 <__aeabi_dmul+0xde>
 8018b98:	ebb5 0c03 	subs.w	ip, r5, r3
 8018b9c:	bf04      	itt	eq
 8018b9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8018ba2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018ba6:	f150 0000 	adcs.w	r0, r0, #0
 8018baa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018bae:	bd70      	pop	{r4, r5, r6, pc}
 8018bb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8018bb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8018bb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8018bbc:	bfc2      	ittt	gt
 8018bbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018bc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018bc6:	bd70      	popgt	{r4, r5, r6, pc}
 8018bc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018bcc:	f04f 0e00 	mov.w	lr, #0
 8018bd0:	3c01      	subs	r4, #1
 8018bd2:	e690      	b.n	80188f6 <__aeabi_dmul+0xde>
 8018bd4:	ea45 0e06 	orr.w	lr, r5, r6
 8018bd8:	e68d      	b.n	80188f6 <__aeabi_dmul+0xde>
 8018bda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018bde:	ea94 0f0c 	teq	r4, ip
 8018be2:	bf08      	it	eq
 8018be4:	ea95 0f0c 	teqeq	r5, ip
 8018be8:	f43f af3b 	beq.w	8018a62 <__aeabi_dmul+0x24a>
 8018bec:	ea94 0f0c 	teq	r4, ip
 8018bf0:	d10a      	bne.n	8018c08 <__aeabi_ddiv+0x19c>
 8018bf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018bf6:	f47f af34 	bne.w	8018a62 <__aeabi_dmul+0x24a>
 8018bfa:	ea95 0f0c 	teq	r5, ip
 8018bfe:	f47f af25 	bne.w	8018a4c <__aeabi_dmul+0x234>
 8018c02:	4610      	mov	r0, r2
 8018c04:	4619      	mov	r1, r3
 8018c06:	e72c      	b.n	8018a62 <__aeabi_dmul+0x24a>
 8018c08:	ea95 0f0c 	teq	r5, ip
 8018c0c:	d106      	bne.n	8018c1c <__aeabi_ddiv+0x1b0>
 8018c0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018c12:	f43f aefd 	beq.w	8018a10 <__aeabi_dmul+0x1f8>
 8018c16:	4610      	mov	r0, r2
 8018c18:	4619      	mov	r1, r3
 8018c1a:	e722      	b.n	8018a62 <__aeabi_dmul+0x24a>
 8018c1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018c20:	bf18      	it	ne
 8018c22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018c26:	f47f aec5 	bne.w	80189b4 <__aeabi_dmul+0x19c>
 8018c2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8018c2e:	f47f af0d 	bne.w	8018a4c <__aeabi_dmul+0x234>
 8018c32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8018c36:	f47f aeeb 	bne.w	8018a10 <__aeabi_dmul+0x1f8>
 8018c3a:	e712      	b.n	8018a62 <__aeabi_dmul+0x24a>

08018c3c <__gedf2>:
 8018c3c:	f04f 3cff 	mov.w	ip, #4294967295
 8018c40:	e006      	b.n	8018c50 <__cmpdf2+0x4>
 8018c42:	bf00      	nop

08018c44 <__ledf2>:
 8018c44:	f04f 0c01 	mov.w	ip, #1
 8018c48:	e002      	b.n	8018c50 <__cmpdf2+0x4>
 8018c4a:	bf00      	nop

08018c4c <__cmpdf2>:
 8018c4c:	f04f 0c01 	mov.w	ip, #1
 8018c50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8018c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018c60:	bf18      	it	ne
 8018c62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8018c66:	d01b      	beq.n	8018ca0 <__cmpdf2+0x54>
 8018c68:	b001      	add	sp, #4
 8018c6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8018c6e:	bf0c      	ite	eq
 8018c70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8018c74:	ea91 0f03 	teqne	r1, r3
 8018c78:	bf02      	ittt	eq
 8018c7a:	ea90 0f02 	teqeq	r0, r2
 8018c7e:	2000      	moveq	r0, #0
 8018c80:	4770      	bxeq	lr
 8018c82:	f110 0f00 	cmn.w	r0, #0
 8018c86:	ea91 0f03 	teq	r1, r3
 8018c8a:	bf58      	it	pl
 8018c8c:	4299      	cmppl	r1, r3
 8018c8e:	bf08      	it	eq
 8018c90:	4290      	cmpeq	r0, r2
 8018c92:	bf2c      	ite	cs
 8018c94:	17d8      	asrcs	r0, r3, #31
 8018c96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8018c9a:	f040 0001 	orr.w	r0, r0, #1
 8018c9e:	4770      	bx	lr
 8018ca0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018ca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018ca8:	d102      	bne.n	8018cb0 <__cmpdf2+0x64>
 8018caa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8018cae:	d107      	bne.n	8018cc0 <__cmpdf2+0x74>
 8018cb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018cb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018cb8:	d1d6      	bne.n	8018c68 <__cmpdf2+0x1c>
 8018cba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8018cbe:	d0d3      	beq.n	8018c68 <__cmpdf2+0x1c>
 8018cc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8018cc4:	4770      	bx	lr
 8018cc6:	bf00      	nop

08018cc8 <__aeabi_cdrcmple>:
 8018cc8:	4684      	mov	ip, r0
 8018cca:	4610      	mov	r0, r2
 8018ccc:	4662      	mov	r2, ip
 8018cce:	468c      	mov	ip, r1
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	4663      	mov	r3, ip
 8018cd4:	e000      	b.n	8018cd8 <__aeabi_cdcmpeq>
 8018cd6:	bf00      	nop

08018cd8 <__aeabi_cdcmpeq>:
 8018cd8:	b501      	push	{r0, lr}
 8018cda:	f7ff ffb7 	bl	8018c4c <__cmpdf2>
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	bf48      	it	mi
 8018ce2:	f110 0f00 	cmnmi.w	r0, #0
 8018ce6:	bd01      	pop	{r0, pc}

08018ce8 <__aeabi_dcmpeq>:
 8018ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018cec:	f7ff fff4 	bl	8018cd8 <__aeabi_cdcmpeq>
 8018cf0:	bf0c      	ite	eq
 8018cf2:	2001      	moveq	r0, #1
 8018cf4:	2000      	movne	r0, #0
 8018cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8018cfa:	bf00      	nop

08018cfc <__aeabi_dcmplt>:
 8018cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018d00:	f7ff ffea 	bl	8018cd8 <__aeabi_cdcmpeq>
 8018d04:	bf34      	ite	cc
 8018d06:	2001      	movcc	r0, #1
 8018d08:	2000      	movcs	r0, #0
 8018d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8018d0e:	bf00      	nop

08018d10 <__aeabi_dcmple>:
 8018d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018d14:	f7ff ffe0 	bl	8018cd8 <__aeabi_cdcmpeq>
 8018d18:	bf94      	ite	ls
 8018d1a:	2001      	movls	r0, #1
 8018d1c:	2000      	movhi	r0, #0
 8018d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8018d22:	bf00      	nop

08018d24 <__aeabi_dcmpge>:
 8018d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018d28:	f7ff ffce 	bl	8018cc8 <__aeabi_cdrcmple>
 8018d2c:	bf94      	ite	ls
 8018d2e:	2001      	movls	r0, #1
 8018d30:	2000      	movhi	r0, #0
 8018d32:	f85d fb08 	ldr.w	pc, [sp], #8
 8018d36:	bf00      	nop

08018d38 <__aeabi_dcmpgt>:
 8018d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018d3c:	f7ff ffc4 	bl	8018cc8 <__aeabi_cdrcmple>
 8018d40:	bf34      	ite	cc
 8018d42:	2001      	movcc	r0, #1
 8018d44:	2000      	movcs	r0, #0
 8018d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8018d4a:	bf00      	nop

08018d4c <__aeabi_dcmpun>:
 8018d4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018d50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018d54:	d102      	bne.n	8018d5c <__aeabi_dcmpun+0x10>
 8018d56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8018d5a:	d10a      	bne.n	8018d72 <__aeabi_dcmpun+0x26>
 8018d5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018d64:	d102      	bne.n	8018d6c <__aeabi_dcmpun+0x20>
 8018d66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8018d6a:	d102      	bne.n	8018d72 <__aeabi_dcmpun+0x26>
 8018d6c:	f04f 0000 	mov.w	r0, #0
 8018d70:	4770      	bx	lr
 8018d72:	f04f 0001 	mov.w	r0, #1
 8018d76:	4770      	bx	lr

08018d78 <__aeabi_d2iz>:
 8018d78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8018d7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8018d80:	d215      	bcs.n	8018dae <__aeabi_d2iz+0x36>
 8018d82:	d511      	bpl.n	8018da8 <__aeabi_d2iz+0x30>
 8018d84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018d88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018d8c:	d912      	bls.n	8018db4 <__aeabi_d2iz+0x3c>
 8018d8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018d96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018d9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018d9e:	fa23 f002 	lsr.w	r0, r3, r2
 8018da2:	bf18      	it	ne
 8018da4:	4240      	negne	r0, r0
 8018da6:	4770      	bx	lr
 8018da8:	f04f 0000 	mov.w	r0, #0
 8018dac:	4770      	bx	lr
 8018dae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8018db2:	d105      	bne.n	8018dc0 <__aeabi_d2iz+0x48>
 8018db4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8018db8:	bf08      	it	eq
 8018dba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8018dbe:	4770      	bx	lr
 8018dc0:	f04f 0000 	mov.w	r0, #0
 8018dc4:	4770      	bx	lr
 8018dc6:	bf00      	nop

08018dc8 <__aeabi_d2uiz>:
 8018dc8:	004a      	lsls	r2, r1, #1
 8018dca:	d211      	bcs.n	8018df0 <__aeabi_d2uiz+0x28>
 8018dcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8018dd0:	d211      	bcs.n	8018df6 <__aeabi_d2uiz+0x2e>
 8018dd2:	d50d      	bpl.n	8018df0 <__aeabi_d2uiz+0x28>
 8018dd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018dd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018ddc:	d40e      	bmi.n	8018dfc <__aeabi_d2uiz+0x34>
 8018dde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018de6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018dea:	fa23 f002 	lsr.w	r0, r3, r2
 8018dee:	4770      	bx	lr
 8018df0:	f04f 0000 	mov.w	r0, #0
 8018df4:	4770      	bx	lr
 8018df6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8018dfa:	d102      	bne.n	8018e02 <__aeabi_d2uiz+0x3a>
 8018dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8018e00:	4770      	bx	lr
 8018e02:	f04f 0000 	mov.w	r0, #0
 8018e06:	4770      	bx	lr

08018e08 <__aeabi_d2f>:
 8018e08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8018e0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8018e10:	bf24      	itt	cs
 8018e12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8018e16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8018e1a:	d90d      	bls.n	8018e38 <__aeabi_d2f+0x30>
 8018e1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8018e20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8018e24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8018e28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8018e2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8018e30:	bf08      	it	eq
 8018e32:	f020 0001 	biceq.w	r0, r0, #1
 8018e36:	4770      	bx	lr
 8018e38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8018e3c:	d121      	bne.n	8018e82 <__aeabi_d2f+0x7a>
 8018e3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8018e42:	bfbc      	itt	lt
 8018e44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8018e48:	4770      	bxlt	lr
 8018e4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018e4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8018e52:	f1c2 0218 	rsb	r2, r2, #24
 8018e56:	f1c2 0c20 	rsb	ip, r2, #32
 8018e5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8018e5e:	fa20 f002 	lsr.w	r0, r0, r2
 8018e62:	bf18      	it	ne
 8018e64:	f040 0001 	orrne.w	r0, r0, #1
 8018e68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018e6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8018e70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8018e74:	ea40 000c 	orr.w	r0, r0, ip
 8018e78:	fa23 f302 	lsr.w	r3, r3, r2
 8018e7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018e80:	e7cc      	b.n	8018e1c <__aeabi_d2f+0x14>
 8018e82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8018e86:	d107      	bne.n	8018e98 <__aeabi_d2f+0x90>
 8018e88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8018e8c:	bf1e      	ittt	ne
 8018e8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8018e92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8018e96:	4770      	bxne	lr
 8018e98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8018e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8018ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018ea4:	4770      	bx	lr
 8018ea6:	bf00      	nop

08018ea8 <__aeabi_d2lz>:
 8018ea8:	b538      	push	{r3, r4, r5, lr}
 8018eaa:	2200      	movs	r2, #0
 8018eac:	2300      	movs	r3, #0
 8018eae:	4604      	mov	r4, r0
 8018eb0:	460d      	mov	r5, r1
 8018eb2:	f7ff ff23 	bl	8018cfc <__aeabi_dcmplt>
 8018eb6:	b928      	cbnz	r0, 8018ec4 <__aeabi_d2lz+0x1c>
 8018eb8:	4620      	mov	r0, r4
 8018eba:	4629      	mov	r1, r5
 8018ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ec0:	f000 b80a 	b.w	8018ed8 <__aeabi_d2ulz>
 8018ec4:	4620      	mov	r0, r4
 8018ec6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8018eca:	f000 f805 	bl	8018ed8 <__aeabi_d2ulz>
 8018ece:	4240      	negs	r0, r0
 8018ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018ed4:	bd38      	pop	{r3, r4, r5, pc}
 8018ed6:	bf00      	nop

08018ed8 <__aeabi_d2ulz>:
 8018ed8:	b5d0      	push	{r4, r6, r7, lr}
 8018eda:	4b0c      	ldr	r3, [pc, #48]	; (8018f0c <__aeabi_d2ulz+0x34>)
 8018edc:	2200      	movs	r2, #0
 8018ede:	4606      	mov	r6, r0
 8018ee0:	460f      	mov	r7, r1
 8018ee2:	f7ff fc99 	bl	8018818 <__aeabi_dmul>
 8018ee6:	f7ff ff6f 	bl	8018dc8 <__aeabi_d2uiz>
 8018eea:	4604      	mov	r4, r0
 8018eec:	f7ff fc1a 	bl	8018724 <__aeabi_ui2d>
 8018ef0:	4b07      	ldr	r3, [pc, #28]	; (8018f10 <__aeabi_d2ulz+0x38>)
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	f7ff fc90 	bl	8018818 <__aeabi_dmul>
 8018ef8:	4602      	mov	r2, r0
 8018efa:	460b      	mov	r3, r1
 8018efc:	4630      	mov	r0, r6
 8018efe:	4639      	mov	r1, r7
 8018f00:	f7ff fad2 	bl	80184a8 <__aeabi_dsub>
 8018f04:	f7ff ff60 	bl	8018dc8 <__aeabi_d2uiz>
 8018f08:	4621      	mov	r1, r4
 8018f0a:	bdd0      	pop	{r4, r6, r7, pc}
 8018f0c:	3df00000 	.word	0x3df00000
 8018f10:	41f00000 	.word	0x41f00000

08018f14 <__aeabi_uldivmod>:
 8018f14:	b953      	cbnz	r3, 8018f2c <__aeabi_uldivmod+0x18>
 8018f16:	b94a      	cbnz	r2, 8018f2c <__aeabi_uldivmod+0x18>
 8018f18:	2900      	cmp	r1, #0
 8018f1a:	bf08      	it	eq
 8018f1c:	2800      	cmpeq	r0, #0
 8018f1e:	bf1c      	itt	ne
 8018f20:	f04f 31ff 	movne.w	r1, #4294967295
 8018f24:	f04f 30ff 	movne.w	r0, #4294967295
 8018f28:	f000 b974 	b.w	8019214 <__aeabi_idiv0>
 8018f2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8018f30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8018f34:	f000 f806 	bl	8018f44 <__udivmoddi4>
 8018f38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018f40:	b004      	add	sp, #16
 8018f42:	4770      	bx	lr

08018f44 <__udivmoddi4>:
 8018f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f48:	9d08      	ldr	r5, [sp, #32]
 8018f4a:	4604      	mov	r4, r0
 8018f4c:	468e      	mov	lr, r1
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d14d      	bne.n	8018fee <__udivmoddi4+0xaa>
 8018f52:	428a      	cmp	r2, r1
 8018f54:	4694      	mov	ip, r2
 8018f56:	d969      	bls.n	801902c <__udivmoddi4+0xe8>
 8018f58:	fab2 f282 	clz	r2, r2
 8018f5c:	b152      	cbz	r2, 8018f74 <__udivmoddi4+0x30>
 8018f5e:	fa01 f302 	lsl.w	r3, r1, r2
 8018f62:	f1c2 0120 	rsb	r1, r2, #32
 8018f66:	fa20 f101 	lsr.w	r1, r0, r1
 8018f6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8018f6e:	ea41 0e03 	orr.w	lr, r1, r3
 8018f72:	4094      	lsls	r4, r2
 8018f74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8018f78:	0c21      	lsrs	r1, r4, #16
 8018f7a:	fbbe f6f8 	udiv	r6, lr, r8
 8018f7e:	fa1f f78c 	uxth.w	r7, ip
 8018f82:	fb08 e316 	mls	r3, r8, r6, lr
 8018f86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018f8a:	fb06 f107 	mul.w	r1, r6, r7
 8018f8e:	4299      	cmp	r1, r3
 8018f90:	d90a      	bls.n	8018fa8 <__udivmoddi4+0x64>
 8018f92:	eb1c 0303 	adds.w	r3, ip, r3
 8018f96:	f106 30ff 	add.w	r0, r6, #4294967295
 8018f9a:	f080 811f 	bcs.w	80191dc <__udivmoddi4+0x298>
 8018f9e:	4299      	cmp	r1, r3
 8018fa0:	f240 811c 	bls.w	80191dc <__udivmoddi4+0x298>
 8018fa4:	3e02      	subs	r6, #2
 8018fa6:	4463      	add	r3, ip
 8018fa8:	1a5b      	subs	r3, r3, r1
 8018faa:	b2a4      	uxth	r4, r4
 8018fac:	fbb3 f0f8 	udiv	r0, r3, r8
 8018fb0:	fb08 3310 	mls	r3, r8, r0, r3
 8018fb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8018fb8:	fb00 f707 	mul.w	r7, r0, r7
 8018fbc:	42a7      	cmp	r7, r4
 8018fbe:	d90a      	bls.n	8018fd6 <__udivmoddi4+0x92>
 8018fc0:	eb1c 0404 	adds.w	r4, ip, r4
 8018fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8018fc8:	f080 810a 	bcs.w	80191e0 <__udivmoddi4+0x29c>
 8018fcc:	42a7      	cmp	r7, r4
 8018fce:	f240 8107 	bls.w	80191e0 <__udivmoddi4+0x29c>
 8018fd2:	4464      	add	r4, ip
 8018fd4:	3802      	subs	r0, #2
 8018fd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8018fda:	1be4      	subs	r4, r4, r7
 8018fdc:	2600      	movs	r6, #0
 8018fde:	b11d      	cbz	r5, 8018fe8 <__udivmoddi4+0xa4>
 8018fe0:	40d4      	lsrs	r4, r2
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	e9c5 4300 	strd	r4, r3, [r5]
 8018fe8:	4631      	mov	r1, r6
 8018fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fee:	428b      	cmp	r3, r1
 8018ff0:	d909      	bls.n	8019006 <__udivmoddi4+0xc2>
 8018ff2:	2d00      	cmp	r5, #0
 8018ff4:	f000 80ef 	beq.w	80191d6 <__udivmoddi4+0x292>
 8018ff8:	2600      	movs	r6, #0
 8018ffa:	e9c5 0100 	strd	r0, r1, [r5]
 8018ffe:	4630      	mov	r0, r6
 8019000:	4631      	mov	r1, r6
 8019002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019006:	fab3 f683 	clz	r6, r3
 801900a:	2e00      	cmp	r6, #0
 801900c:	d14a      	bne.n	80190a4 <__udivmoddi4+0x160>
 801900e:	428b      	cmp	r3, r1
 8019010:	d302      	bcc.n	8019018 <__udivmoddi4+0xd4>
 8019012:	4282      	cmp	r2, r0
 8019014:	f200 80f9 	bhi.w	801920a <__udivmoddi4+0x2c6>
 8019018:	1a84      	subs	r4, r0, r2
 801901a:	eb61 0303 	sbc.w	r3, r1, r3
 801901e:	2001      	movs	r0, #1
 8019020:	469e      	mov	lr, r3
 8019022:	2d00      	cmp	r5, #0
 8019024:	d0e0      	beq.n	8018fe8 <__udivmoddi4+0xa4>
 8019026:	e9c5 4e00 	strd	r4, lr, [r5]
 801902a:	e7dd      	b.n	8018fe8 <__udivmoddi4+0xa4>
 801902c:	b902      	cbnz	r2, 8019030 <__udivmoddi4+0xec>
 801902e:	deff      	udf	#255	; 0xff
 8019030:	fab2 f282 	clz	r2, r2
 8019034:	2a00      	cmp	r2, #0
 8019036:	f040 8092 	bne.w	801915e <__udivmoddi4+0x21a>
 801903a:	eba1 010c 	sub.w	r1, r1, ip
 801903e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019042:	fa1f fe8c 	uxth.w	lr, ip
 8019046:	2601      	movs	r6, #1
 8019048:	0c20      	lsrs	r0, r4, #16
 801904a:	fbb1 f3f7 	udiv	r3, r1, r7
 801904e:	fb07 1113 	mls	r1, r7, r3, r1
 8019052:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019056:	fb0e f003 	mul.w	r0, lr, r3
 801905a:	4288      	cmp	r0, r1
 801905c:	d908      	bls.n	8019070 <__udivmoddi4+0x12c>
 801905e:	eb1c 0101 	adds.w	r1, ip, r1
 8019062:	f103 38ff 	add.w	r8, r3, #4294967295
 8019066:	d202      	bcs.n	801906e <__udivmoddi4+0x12a>
 8019068:	4288      	cmp	r0, r1
 801906a:	f200 80cb 	bhi.w	8019204 <__udivmoddi4+0x2c0>
 801906e:	4643      	mov	r3, r8
 8019070:	1a09      	subs	r1, r1, r0
 8019072:	b2a4      	uxth	r4, r4
 8019074:	fbb1 f0f7 	udiv	r0, r1, r7
 8019078:	fb07 1110 	mls	r1, r7, r0, r1
 801907c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019080:	fb0e fe00 	mul.w	lr, lr, r0
 8019084:	45a6      	cmp	lr, r4
 8019086:	d908      	bls.n	801909a <__udivmoddi4+0x156>
 8019088:	eb1c 0404 	adds.w	r4, ip, r4
 801908c:	f100 31ff 	add.w	r1, r0, #4294967295
 8019090:	d202      	bcs.n	8019098 <__udivmoddi4+0x154>
 8019092:	45a6      	cmp	lr, r4
 8019094:	f200 80bb 	bhi.w	801920e <__udivmoddi4+0x2ca>
 8019098:	4608      	mov	r0, r1
 801909a:	eba4 040e 	sub.w	r4, r4, lr
 801909e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80190a2:	e79c      	b.n	8018fde <__udivmoddi4+0x9a>
 80190a4:	f1c6 0720 	rsb	r7, r6, #32
 80190a8:	40b3      	lsls	r3, r6
 80190aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80190ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80190b2:	fa20 f407 	lsr.w	r4, r0, r7
 80190b6:	fa01 f306 	lsl.w	r3, r1, r6
 80190ba:	431c      	orrs	r4, r3
 80190bc:	40f9      	lsrs	r1, r7
 80190be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80190c2:	fa00 f306 	lsl.w	r3, r0, r6
 80190c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80190ca:	0c20      	lsrs	r0, r4, #16
 80190cc:	fa1f fe8c 	uxth.w	lr, ip
 80190d0:	fb09 1118 	mls	r1, r9, r8, r1
 80190d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80190d8:	fb08 f00e 	mul.w	r0, r8, lr
 80190dc:	4288      	cmp	r0, r1
 80190de:	fa02 f206 	lsl.w	r2, r2, r6
 80190e2:	d90b      	bls.n	80190fc <__udivmoddi4+0x1b8>
 80190e4:	eb1c 0101 	adds.w	r1, ip, r1
 80190e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80190ec:	f080 8088 	bcs.w	8019200 <__udivmoddi4+0x2bc>
 80190f0:	4288      	cmp	r0, r1
 80190f2:	f240 8085 	bls.w	8019200 <__udivmoddi4+0x2bc>
 80190f6:	f1a8 0802 	sub.w	r8, r8, #2
 80190fa:	4461      	add	r1, ip
 80190fc:	1a09      	subs	r1, r1, r0
 80190fe:	b2a4      	uxth	r4, r4
 8019100:	fbb1 f0f9 	udiv	r0, r1, r9
 8019104:	fb09 1110 	mls	r1, r9, r0, r1
 8019108:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 801910c:	fb00 fe0e 	mul.w	lr, r0, lr
 8019110:	458e      	cmp	lr, r1
 8019112:	d908      	bls.n	8019126 <__udivmoddi4+0x1e2>
 8019114:	eb1c 0101 	adds.w	r1, ip, r1
 8019118:	f100 34ff 	add.w	r4, r0, #4294967295
 801911c:	d26c      	bcs.n	80191f8 <__udivmoddi4+0x2b4>
 801911e:	458e      	cmp	lr, r1
 8019120:	d96a      	bls.n	80191f8 <__udivmoddi4+0x2b4>
 8019122:	3802      	subs	r0, #2
 8019124:	4461      	add	r1, ip
 8019126:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801912a:	fba0 9402 	umull	r9, r4, r0, r2
 801912e:	eba1 010e 	sub.w	r1, r1, lr
 8019132:	42a1      	cmp	r1, r4
 8019134:	46c8      	mov	r8, r9
 8019136:	46a6      	mov	lr, r4
 8019138:	d356      	bcc.n	80191e8 <__udivmoddi4+0x2a4>
 801913a:	d053      	beq.n	80191e4 <__udivmoddi4+0x2a0>
 801913c:	b15d      	cbz	r5, 8019156 <__udivmoddi4+0x212>
 801913e:	ebb3 0208 	subs.w	r2, r3, r8
 8019142:	eb61 010e 	sbc.w	r1, r1, lr
 8019146:	fa01 f707 	lsl.w	r7, r1, r7
 801914a:	fa22 f306 	lsr.w	r3, r2, r6
 801914e:	40f1      	lsrs	r1, r6
 8019150:	431f      	orrs	r7, r3
 8019152:	e9c5 7100 	strd	r7, r1, [r5]
 8019156:	2600      	movs	r6, #0
 8019158:	4631      	mov	r1, r6
 801915a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801915e:	f1c2 0320 	rsb	r3, r2, #32
 8019162:	40d8      	lsrs	r0, r3
 8019164:	fa0c fc02 	lsl.w	ip, ip, r2
 8019168:	fa21 f303 	lsr.w	r3, r1, r3
 801916c:	4091      	lsls	r1, r2
 801916e:	4301      	orrs	r1, r0
 8019170:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019174:	fa1f fe8c 	uxth.w	lr, ip
 8019178:	fbb3 f0f7 	udiv	r0, r3, r7
 801917c:	fb07 3610 	mls	r6, r7, r0, r3
 8019180:	0c0b      	lsrs	r3, r1, #16
 8019182:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019186:	fb00 f60e 	mul.w	r6, r0, lr
 801918a:	429e      	cmp	r6, r3
 801918c:	fa04 f402 	lsl.w	r4, r4, r2
 8019190:	d908      	bls.n	80191a4 <__udivmoddi4+0x260>
 8019192:	eb1c 0303 	adds.w	r3, ip, r3
 8019196:	f100 38ff 	add.w	r8, r0, #4294967295
 801919a:	d22f      	bcs.n	80191fc <__udivmoddi4+0x2b8>
 801919c:	429e      	cmp	r6, r3
 801919e:	d92d      	bls.n	80191fc <__udivmoddi4+0x2b8>
 80191a0:	3802      	subs	r0, #2
 80191a2:	4463      	add	r3, ip
 80191a4:	1b9b      	subs	r3, r3, r6
 80191a6:	b289      	uxth	r1, r1
 80191a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80191ac:	fb07 3316 	mls	r3, r7, r6, r3
 80191b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80191b4:	fb06 f30e 	mul.w	r3, r6, lr
 80191b8:	428b      	cmp	r3, r1
 80191ba:	d908      	bls.n	80191ce <__udivmoddi4+0x28a>
 80191bc:	eb1c 0101 	adds.w	r1, ip, r1
 80191c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80191c4:	d216      	bcs.n	80191f4 <__udivmoddi4+0x2b0>
 80191c6:	428b      	cmp	r3, r1
 80191c8:	d914      	bls.n	80191f4 <__udivmoddi4+0x2b0>
 80191ca:	3e02      	subs	r6, #2
 80191cc:	4461      	add	r1, ip
 80191ce:	1ac9      	subs	r1, r1, r3
 80191d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80191d4:	e738      	b.n	8019048 <__udivmoddi4+0x104>
 80191d6:	462e      	mov	r6, r5
 80191d8:	4628      	mov	r0, r5
 80191da:	e705      	b.n	8018fe8 <__udivmoddi4+0xa4>
 80191dc:	4606      	mov	r6, r0
 80191de:	e6e3      	b.n	8018fa8 <__udivmoddi4+0x64>
 80191e0:	4618      	mov	r0, r3
 80191e2:	e6f8      	b.n	8018fd6 <__udivmoddi4+0x92>
 80191e4:	454b      	cmp	r3, r9
 80191e6:	d2a9      	bcs.n	801913c <__udivmoddi4+0x1f8>
 80191e8:	ebb9 0802 	subs.w	r8, r9, r2
 80191ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80191f0:	3801      	subs	r0, #1
 80191f2:	e7a3      	b.n	801913c <__udivmoddi4+0x1f8>
 80191f4:	4646      	mov	r6, r8
 80191f6:	e7ea      	b.n	80191ce <__udivmoddi4+0x28a>
 80191f8:	4620      	mov	r0, r4
 80191fa:	e794      	b.n	8019126 <__udivmoddi4+0x1e2>
 80191fc:	4640      	mov	r0, r8
 80191fe:	e7d1      	b.n	80191a4 <__udivmoddi4+0x260>
 8019200:	46d0      	mov	r8, sl
 8019202:	e77b      	b.n	80190fc <__udivmoddi4+0x1b8>
 8019204:	3b02      	subs	r3, #2
 8019206:	4461      	add	r1, ip
 8019208:	e732      	b.n	8019070 <__udivmoddi4+0x12c>
 801920a:	4630      	mov	r0, r6
 801920c:	e709      	b.n	8019022 <__udivmoddi4+0xde>
 801920e:	4464      	add	r4, ip
 8019210:	3802      	subs	r0, #2
 8019212:	e742      	b.n	801909a <__udivmoddi4+0x156>

08019214 <__aeabi_idiv0>:
 8019214:	4770      	bx	lr
 8019216:	bf00      	nop

08019218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801921c:	480d      	ldr	r0, [pc, #52]	; (8019254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801921e:	490e      	ldr	r1, [pc, #56]	; (8019258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019220:	4a0e      	ldr	r2, [pc, #56]	; (801925c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019224:	e002      	b.n	801922c <LoopCopyDataInit>

08019226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801922a:	3304      	adds	r3, #4

0801922c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801922c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801922e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019230:	d3f9      	bcc.n	8019226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019232:	4a0b      	ldr	r2, [pc, #44]	; (8019260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019234:	4c0b      	ldr	r4, [pc, #44]	; (8019264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019238:	e001      	b.n	801923e <LoopFillZerobss>

0801923a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801923a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801923c:	3204      	adds	r2, #4

0801923e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801923e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019240:	d3fb      	bcc.n	801923a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019242:	f7ec fda5 	bl	8005d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019246:	f000 f81b 	bl	8019280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801924a:	f7e8 fb85 	bl	8001958 <main>
  bx  lr    
 801924e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019258:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801925c:	08051f18 	.word	0x08051f18
  ldr r2, =_sbss
 8019260:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019264:	20000964 	.word	0x20000964

08019268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019268:	e7fe      	b.n	8019268 <ADC_IRQHandler>

0801926a <atoi>:
 801926a:	220a      	movs	r2, #10
 801926c:	2100      	movs	r1, #0
 801926e:	f001 bd7f 	b.w	801ad70 <strtol>
	...

08019274 <__errno>:
 8019274:	4b01      	ldr	r3, [pc, #4]	; (801927c <__errno+0x8>)
 8019276:	6818      	ldr	r0, [r3, #0]
 8019278:	4770      	bx	lr
 801927a:	bf00      	nop
 801927c:	20000064 	.word	0x20000064

08019280 <__libc_init_array>:
 8019280:	b570      	push	{r4, r5, r6, lr}
 8019282:	4d0d      	ldr	r5, [pc, #52]	; (80192b8 <__libc_init_array+0x38>)
 8019284:	4c0d      	ldr	r4, [pc, #52]	; (80192bc <__libc_init_array+0x3c>)
 8019286:	1b64      	subs	r4, r4, r5
 8019288:	10a4      	asrs	r4, r4, #2
 801928a:	2600      	movs	r6, #0
 801928c:	42a6      	cmp	r6, r4
 801928e:	d109      	bne.n	80192a4 <__libc_init_array+0x24>
 8019290:	4d0b      	ldr	r5, [pc, #44]	; (80192c0 <__libc_init_array+0x40>)
 8019292:	4c0c      	ldr	r4, [pc, #48]	; (80192c4 <__libc_init_array+0x44>)
 8019294:	f005 fc46 	bl	801eb24 <_init>
 8019298:	1b64      	subs	r4, r4, r5
 801929a:	10a4      	asrs	r4, r4, #2
 801929c:	2600      	movs	r6, #0
 801929e:	42a6      	cmp	r6, r4
 80192a0:	d105      	bne.n	80192ae <__libc_init_array+0x2e>
 80192a2:	bd70      	pop	{r4, r5, r6, pc}
 80192a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80192a8:	4798      	blx	r3
 80192aa:	3601      	adds	r6, #1
 80192ac:	e7ee      	b.n	801928c <__libc_init_array+0xc>
 80192ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80192b2:	4798      	blx	r3
 80192b4:	3601      	adds	r6, #1
 80192b6:	e7f2      	b.n	801929e <__libc_init_array+0x1e>
 80192b8:	08051f10 	.word	0x08051f10
 80192bc:	08051f10 	.word	0x08051f10
 80192c0:	08051f10 	.word	0x08051f10
 80192c4:	08051f14 	.word	0x08051f14

080192c8 <memset>:
 80192c8:	4402      	add	r2, r0
 80192ca:	4603      	mov	r3, r0
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d100      	bne.n	80192d2 <memset+0xa>
 80192d0:	4770      	bx	lr
 80192d2:	f803 1b01 	strb.w	r1, [r3], #1
 80192d6:	e7f9      	b.n	80192cc <memset+0x4>

080192d8 <__cvt>:
 80192d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192dc:	ec55 4b10 	vmov	r4, r5, d0
 80192e0:	2d00      	cmp	r5, #0
 80192e2:	460e      	mov	r6, r1
 80192e4:	4619      	mov	r1, r3
 80192e6:	462b      	mov	r3, r5
 80192e8:	bfbb      	ittet	lt
 80192ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80192ee:	461d      	movlt	r5, r3
 80192f0:	2300      	movge	r3, #0
 80192f2:	232d      	movlt	r3, #45	; 0x2d
 80192f4:	700b      	strb	r3, [r1, #0]
 80192f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80192fc:	4691      	mov	r9, r2
 80192fe:	f023 0820 	bic.w	r8, r3, #32
 8019302:	bfbc      	itt	lt
 8019304:	4622      	movlt	r2, r4
 8019306:	4614      	movlt	r4, r2
 8019308:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801930c:	d005      	beq.n	801931a <__cvt+0x42>
 801930e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019312:	d100      	bne.n	8019316 <__cvt+0x3e>
 8019314:	3601      	adds	r6, #1
 8019316:	2102      	movs	r1, #2
 8019318:	e000      	b.n	801931c <__cvt+0x44>
 801931a:	2103      	movs	r1, #3
 801931c:	ab03      	add	r3, sp, #12
 801931e:	9301      	str	r3, [sp, #4]
 8019320:	ab02      	add	r3, sp, #8
 8019322:	9300      	str	r3, [sp, #0]
 8019324:	ec45 4b10 	vmov	d0, r4, r5
 8019328:	4653      	mov	r3, sl
 801932a:	4632      	mov	r2, r6
 801932c:	f001 fdb8 	bl	801aea0 <_dtoa_r>
 8019330:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019334:	4607      	mov	r7, r0
 8019336:	d102      	bne.n	801933e <__cvt+0x66>
 8019338:	f019 0f01 	tst.w	r9, #1
 801933c:	d022      	beq.n	8019384 <__cvt+0xac>
 801933e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019342:	eb07 0906 	add.w	r9, r7, r6
 8019346:	d110      	bne.n	801936a <__cvt+0x92>
 8019348:	783b      	ldrb	r3, [r7, #0]
 801934a:	2b30      	cmp	r3, #48	; 0x30
 801934c:	d10a      	bne.n	8019364 <__cvt+0x8c>
 801934e:	2200      	movs	r2, #0
 8019350:	2300      	movs	r3, #0
 8019352:	4620      	mov	r0, r4
 8019354:	4629      	mov	r1, r5
 8019356:	f7ff fcc7 	bl	8018ce8 <__aeabi_dcmpeq>
 801935a:	b918      	cbnz	r0, 8019364 <__cvt+0x8c>
 801935c:	f1c6 0601 	rsb	r6, r6, #1
 8019360:	f8ca 6000 	str.w	r6, [sl]
 8019364:	f8da 3000 	ldr.w	r3, [sl]
 8019368:	4499      	add	r9, r3
 801936a:	2200      	movs	r2, #0
 801936c:	2300      	movs	r3, #0
 801936e:	4620      	mov	r0, r4
 8019370:	4629      	mov	r1, r5
 8019372:	f7ff fcb9 	bl	8018ce8 <__aeabi_dcmpeq>
 8019376:	b108      	cbz	r0, 801937c <__cvt+0xa4>
 8019378:	f8cd 900c 	str.w	r9, [sp, #12]
 801937c:	2230      	movs	r2, #48	; 0x30
 801937e:	9b03      	ldr	r3, [sp, #12]
 8019380:	454b      	cmp	r3, r9
 8019382:	d307      	bcc.n	8019394 <__cvt+0xbc>
 8019384:	9b03      	ldr	r3, [sp, #12]
 8019386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019388:	1bdb      	subs	r3, r3, r7
 801938a:	4638      	mov	r0, r7
 801938c:	6013      	str	r3, [r2, #0]
 801938e:	b004      	add	sp, #16
 8019390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019394:	1c59      	adds	r1, r3, #1
 8019396:	9103      	str	r1, [sp, #12]
 8019398:	701a      	strb	r2, [r3, #0]
 801939a:	e7f0      	b.n	801937e <__cvt+0xa6>

0801939c <__exponent>:
 801939c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801939e:	4603      	mov	r3, r0
 80193a0:	2900      	cmp	r1, #0
 80193a2:	bfb8      	it	lt
 80193a4:	4249      	neglt	r1, r1
 80193a6:	f803 2b02 	strb.w	r2, [r3], #2
 80193aa:	bfb4      	ite	lt
 80193ac:	222d      	movlt	r2, #45	; 0x2d
 80193ae:	222b      	movge	r2, #43	; 0x2b
 80193b0:	2909      	cmp	r1, #9
 80193b2:	7042      	strb	r2, [r0, #1]
 80193b4:	dd2a      	ble.n	801940c <__exponent+0x70>
 80193b6:	f10d 0407 	add.w	r4, sp, #7
 80193ba:	46a4      	mov	ip, r4
 80193bc:	270a      	movs	r7, #10
 80193be:	46a6      	mov	lr, r4
 80193c0:	460a      	mov	r2, r1
 80193c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80193c6:	fb07 1516 	mls	r5, r7, r6, r1
 80193ca:	3530      	adds	r5, #48	; 0x30
 80193cc:	2a63      	cmp	r2, #99	; 0x63
 80193ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80193d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80193d6:	4631      	mov	r1, r6
 80193d8:	dcf1      	bgt.n	80193be <__exponent+0x22>
 80193da:	3130      	adds	r1, #48	; 0x30
 80193dc:	f1ae 0502 	sub.w	r5, lr, #2
 80193e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80193e4:	1c44      	adds	r4, r0, #1
 80193e6:	4629      	mov	r1, r5
 80193e8:	4561      	cmp	r1, ip
 80193ea:	d30a      	bcc.n	8019402 <__exponent+0x66>
 80193ec:	f10d 0209 	add.w	r2, sp, #9
 80193f0:	eba2 020e 	sub.w	r2, r2, lr
 80193f4:	4565      	cmp	r5, ip
 80193f6:	bf88      	it	hi
 80193f8:	2200      	movhi	r2, #0
 80193fa:	4413      	add	r3, r2
 80193fc:	1a18      	subs	r0, r3, r0
 80193fe:	b003      	add	sp, #12
 8019400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019406:	f804 2f01 	strb.w	r2, [r4, #1]!
 801940a:	e7ed      	b.n	80193e8 <__exponent+0x4c>
 801940c:	2330      	movs	r3, #48	; 0x30
 801940e:	3130      	adds	r1, #48	; 0x30
 8019410:	7083      	strb	r3, [r0, #2]
 8019412:	70c1      	strb	r1, [r0, #3]
 8019414:	1d03      	adds	r3, r0, #4
 8019416:	e7f1      	b.n	80193fc <__exponent+0x60>

08019418 <_printf_float>:
 8019418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801941c:	ed2d 8b02 	vpush	{d8}
 8019420:	b08d      	sub	sp, #52	; 0x34
 8019422:	460c      	mov	r4, r1
 8019424:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019428:	4616      	mov	r6, r2
 801942a:	461f      	mov	r7, r3
 801942c:	4605      	mov	r5, r0
 801942e:	f002 fe95 	bl	801c15c <_localeconv_r>
 8019432:	f8d0 a000 	ldr.w	sl, [r0]
 8019436:	4650      	mov	r0, sl
 8019438:	f7fe ffd4 	bl	80183e4 <strlen>
 801943c:	2300      	movs	r3, #0
 801943e:	930a      	str	r3, [sp, #40]	; 0x28
 8019440:	6823      	ldr	r3, [r4, #0]
 8019442:	9305      	str	r3, [sp, #20]
 8019444:	f8d8 3000 	ldr.w	r3, [r8]
 8019448:	f894 b018 	ldrb.w	fp, [r4, #24]
 801944c:	3307      	adds	r3, #7
 801944e:	f023 0307 	bic.w	r3, r3, #7
 8019452:	f103 0208 	add.w	r2, r3, #8
 8019456:	f8c8 2000 	str.w	r2, [r8]
 801945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801945e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019462:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019466:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801946a:	9307      	str	r3, [sp, #28]
 801946c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019470:	ee08 0a10 	vmov	s16, r0
 8019474:	4b9f      	ldr	r3, [pc, #636]	; (80196f4 <_printf_float+0x2dc>)
 8019476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801947a:	f04f 32ff 	mov.w	r2, #4294967295
 801947e:	f7ff fc65 	bl	8018d4c <__aeabi_dcmpun>
 8019482:	bb88      	cbnz	r0, 80194e8 <_printf_float+0xd0>
 8019484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019488:	4b9a      	ldr	r3, [pc, #616]	; (80196f4 <_printf_float+0x2dc>)
 801948a:	f04f 32ff 	mov.w	r2, #4294967295
 801948e:	f7ff fc3f 	bl	8018d10 <__aeabi_dcmple>
 8019492:	bb48      	cbnz	r0, 80194e8 <_printf_float+0xd0>
 8019494:	2200      	movs	r2, #0
 8019496:	2300      	movs	r3, #0
 8019498:	4640      	mov	r0, r8
 801949a:	4649      	mov	r1, r9
 801949c:	f7ff fc2e 	bl	8018cfc <__aeabi_dcmplt>
 80194a0:	b110      	cbz	r0, 80194a8 <_printf_float+0x90>
 80194a2:	232d      	movs	r3, #45	; 0x2d
 80194a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194a8:	4b93      	ldr	r3, [pc, #588]	; (80196f8 <_printf_float+0x2e0>)
 80194aa:	4894      	ldr	r0, [pc, #592]	; (80196fc <_printf_float+0x2e4>)
 80194ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80194b0:	bf94      	ite	ls
 80194b2:	4698      	movls	r8, r3
 80194b4:	4680      	movhi	r8, r0
 80194b6:	2303      	movs	r3, #3
 80194b8:	6123      	str	r3, [r4, #16]
 80194ba:	9b05      	ldr	r3, [sp, #20]
 80194bc:	f023 0204 	bic.w	r2, r3, #4
 80194c0:	6022      	str	r2, [r4, #0]
 80194c2:	f04f 0900 	mov.w	r9, #0
 80194c6:	9700      	str	r7, [sp, #0]
 80194c8:	4633      	mov	r3, r6
 80194ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80194cc:	4621      	mov	r1, r4
 80194ce:	4628      	mov	r0, r5
 80194d0:	f000 f9d8 	bl	8019884 <_printf_common>
 80194d4:	3001      	adds	r0, #1
 80194d6:	f040 8090 	bne.w	80195fa <_printf_float+0x1e2>
 80194da:	f04f 30ff 	mov.w	r0, #4294967295
 80194de:	b00d      	add	sp, #52	; 0x34
 80194e0:	ecbd 8b02 	vpop	{d8}
 80194e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e8:	4642      	mov	r2, r8
 80194ea:	464b      	mov	r3, r9
 80194ec:	4640      	mov	r0, r8
 80194ee:	4649      	mov	r1, r9
 80194f0:	f7ff fc2c 	bl	8018d4c <__aeabi_dcmpun>
 80194f4:	b140      	cbz	r0, 8019508 <_printf_float+0xf0>
 80194f6:	464b      	mov	r3, r9
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	bfbc      	itt	lt
 80194fc:	232d      	movlt	r3, #45	; 0x2d
 80194fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019502:	487f      	ldr	r0, [pc, #508]	; (8019700 <_printf_float+0x2e8>)
 8019504:	4b7f      	ldr	r3, [pc, #508]	; (8019704 <_printf_float+0x2ec>)
 8019506:	e7d1      	b.n	80194ac <_printf_float+0x94>
 8019508:	6863      	ldr	r3, [r4, #4]
 801950a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801950e:	9206      	str	r2, [sp, #24]
 8019510:	1c5a      	adds	r2, r3, #1
 8019512:	d13f      	bne.n	8019594 <_printf_float+0x17c>
 8019514:	2306      	movs	r3, #6
 8019516:	6063      	str	r3, [r4, #4]
 8019518:	9b05      	ldr	r3, [sp, #20]
 801951a:	6861      	ldr	r1, [r4, #4]
 801951c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019520:	2300      	movs	r3, #0
 8019522:	9303      	str	r3, [sp, #12]
 8019524:	ab0a      	add	r3, sp, #40	; 0x28
 8019526:	e9cd b301 	strd	fp, r3, [sp, #4]
 801952a:	ab09      	add	r3, sp, #36	; 0x24
 801952c:	ec49 8b10 	vmov	d0, r8, r9
 8019530:	9300      	str	r3, [sp, #0]
 8019532:	6022      	str	r2, [r4, #0]
 8019534:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019538:	4628      	mov	r0, r5
 801953a:	f7ff fecd 	bl	80192d8 <__cvt>
 801953e:	9b06      	ldr	r3, [sp, #24]
 8019540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019542:	2b47      	cmp	r3, #71	; 0x47
 8019544:	4680      	mov	r8, r0
 8019546:	d108      	bne.n	801955a <_printf_float+0x142>
 8019548:	1cc8      	adds	r0, r1, #3
 801954a:	db02      	blt.n	8019552 <_printf_float+0x13a>
 801954c:	6863      	ldr	r3, [r4, #4]
 801954e:	4299      	cmp	r1, r3
 8019550:	dd41      	ble.n	80195d6 <_printf_float+0x1be>
 8019552:	f1ab 0b02 	sub.w	fp, fp, #2
 8019556:	fa5f fb8b 	uxtb.w	fp, fp
 801955a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801955e:	d820      	bhi.n	80195a2 <_printf_float+0x18a>
 8019560:	3901      	subs	r1, #1
 8019562:	465a      	mov	r2, fp
 8019564:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019568:	9109      	str	r1, [sp, #36]	; 0x24
 801956a:	f7ff ff17 	bl	801939c <__exponent>
 801956e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019570:	1813      	adds	r3, r2, r0
 8019572:	2a01      	cmp	r2, #1
 8019574:	4681      	mov	r9, r0
 8019576:	6123      	str	r3, [r4, #16]
 8019578:	dc02      	bgt.n	8019580 <_printf_float+0x168>
 801957a:	6822      	ldr	r2, [r4, #0]
 801957c:	07d2      	lsls	r2, r2, #31
 801957e:	d501      	bpl.n	8019584 <_printf_float+0x16c>
 8019580:	3301      	adds	r3, #1
 8019582:	6123      	str	r3, [r4, #16]
 8019584:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019588:	2b00      	cmp	r3, #0
 801958a:	d09c      	beq.n	80194c6 <_printf_float+0xae>
 801958c:	232d      	movs	r3, #45	; 0x2d
 801958e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019592:	e798      	b.n	80194c6 <_printf_float+0xae>
 8019594:	9a06      	ldr	r2, [sp, #24]
 8019596:	2a47      	cmp	r2, #71	; 0x47
 8019598:	d1be      	bne.n	8019518 <_printf_float+0x100>
 801959a:	2b00      	cmp	r3, #0
 801959c:	d1bc      	bne.n	8019518 <_printf_float+0x100>
 801959e:	2301      	movs	r3, #1
 80195a0:	e7b9      	b.n	8019516 <_printf_float+0xfe>
 80195a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80195a6:	d118      	bne.n	80195da <_printf_float+0x1c2>
 80195a8:	2900      	cmp	r1, #0
 80195aa:	6863      	ldr	r3, [r4, #4]
 80195ac:	dd0b      	ble.n	80195c6 <_printf_float+0x1ae>
 80195ae:	6121      	str	r1, [r4, #16]
 80195b0:	b913      	cbnz	r3, 80195b8 <_printf_float+0x1a0>
 80195b2:	6822      	ldr	r2, [r4, #0]
 80195b4:	07d0      	lsls	r0, r2, #31
 80195b6:	d502      	bpl.n	80195be <_printf_float+0x1a6>
 80195b8:	3301      	adds	r3, #1
 80195ba:	440b      	add	r3, r1
 80195bc:	6123      	str	r3, [r4, #16]
 80195be:	65a1      	str	r1, [r4, #88]	; 0x58
 80195c0:	f04f 0900 	mov.w	r9, #0
 80195c4:	e7de      	b.n	8019584 <_printf_float+0x16c>
 80195c6:	b913      	cbnz	r3, 80195ce <_printf_float+0x1b6>
 80195c8:	6822      	ldr	r2, [r4, #0]
 80195ca:	07d2      	lsls	r2, r2, #31
 80195cc:	d501      	bpl.n	80195d2 <_printf_float+0x1ba>
 80195ce:	3302      	adds	r3, #2
 80195d0:	e7f4      	b.n	80195bc <_printf_float+0x1a4>
 80195d2:	2301      	movs	r3, #1
 80195d4:	e7f2      	b.n	80195bc <_printf_float+0x1a4>
 80195d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80195da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195dc:	4299      	cmp	r1, r3
 80195de:	db05      	blt.n	80195ec <_printf_float+0x1d4>
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	6121      	str	r1, [r4, #16]
 80195e4:	07d8      	lsls	r0, r3, #31
 80195e6:	d5ea      	bpl.n	80195be <_printf_float+0x1a6>
 80195e8:	1c4b      	adds	r3, r1, #1
 80195ea:	e7e7      	b.n	80195bc <_printf_float+0x1a4>
 80195ec:	2900      	cmp	r1, #0
 80195ee:	bfd4      	ite	le
 80195f0:	f1c1 0202 	rsble	r2, r1, #2
 80195f4:	2201      	movgt	r2, #1
 80195f6:	4413      	add	r3, r2
 80195f8:	e7e0      	b.n	80195bc <_printf_float+0x1a4>
 80195fa:	6823      	ldr	r3, [r4, #0]
 80195fc:	055a      	lsls	r2, r3, #21
 80195fe:	d407      	bmi.n	8019610 <_printf_float+0x1f8>
 8019600:	6923      	ldr	r3, [r4, #16]
 8019602:	4642      	mov	r2, r8
 8019604:	4631      	mov	r1, r6
 8019606:	4628      	mov	r0, r5
 8019608:	47b8      	blx	r7
 801960a:	3001      	adds	r0, #1
 801960c:	d12c      	bne.n	8019668 <_printf_float+0x250>
 801960e:	e764      	b.n	80194da <_printf_float+0xc2>
 8019610:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019614:	f240 80e0 	bls.w	80197d8 <_printf_float+0x3c0>
 8019618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801961c:	2200      	movs	r2, #0
 801961e:	2300      	movs	r3, #0
 8019620:	f7ff fb62 	bl	8018ce8 <__aeabi_dcmpeq>
 8019624:	2800      	cmp	r0, #0
 8019626:	d034      	beq.n	8019692 <_printf_float+0x27a>
 8019628:	4a37      	ldr	r2, [pc, #220]	; (8019708 <_printf_float+0x2f0>)
 801962a:	2301      	movs	r3, #1
 801962c:	4631      	mov	r1, r6
 801962e:	4628      	mov	r0, r5
 8019630:	47b8      	blx	r7
 8019632:	3001      	adds	r0, #1
 8019634:	f43f af51 	beq.w	80194da <_printf_float+0xc2>
 8019638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801963c:	429a      	cmp	r2, r3
 801963e:	db02      	blt.n	8019646 <_printf_float+0x22e>
 8019640:	6823      	ldr	r3, [r4, #0]
 8019642:	07d8      	lsls	r0, r3, #31
 8019644:	d510      	bpl.n	8019668 <_printf_float+0x250>
 8019646:	ee18 3a10 	vmov	r3, s16
 801964a:	4652      	mov	r2, sl
 801964c:	4631      	mov	r1, r6
 801964e:	4628      	mov	r0, r5
 8019650:	47b8      	blx	r7
 8019652:	3001      	adds	r0, #1
 8019654:	f43f af41 	beq.w	80194da <_printf_float+0xc2>
 8019658:	f04f 0800 	mov.w	r8, #0
 801965c:	f104 091a 	add.w	r9, r4, #26
 8019660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019662:	3b01      	subs	r3, #1
 8019664:	4543      	cmp	r3, r8
 8019666:	dc09      	bgt.n	801967c <_printf_float+0x264>
 8019668:	6823      	ldr	r3, [r4, #0]
 801966a:	079b      	lsls	r3, r3, #30
 801966c:	f100 8105 	bmi.w	801987a <_printf_float+0x462>
 8019670:	68e0      	ldr	r0, [r4, #12]
 8019672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019674:	4298      	cmp	r0, r3
 8019676:	bfb8      	it	lt
 8019678:	4618      	movlt	r0, r3
 801967a:	e730      	b.n	80194de <_printf_float+0xc6>
 801967c:	2301      	movs	r3, #1
 801967e:	464a      	mov	r2, r9
 8019680:	4631      	mov	r1, r6
 8019682:	4628      	mov	r0, r5
 8019684:	47b8      	blx	r7
 8019686:	3001      	adds	r0, #1
 8019688:	f43f af27 	beq.w	80194da <_printf_float+0xc2>
 801968c:	f108 0801 	add.w	r8, r8, #1
 8019690:	e7e6      	b.n	8019660 <_printf_float+0x248>
 8019692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019694:	2b00      	cmp	r3, #0
 8019696:	dc39      	bgt.n	801970c <_printf_float+0x2f4>
 8019698:	4a1b      	ldr	r2, [pc, #108]	; (8019708 <_printf_float+0x2f0>)
 801969a:	2301      	movs	r3, #1
 801969c:	4631      	mov	r1, r6
 801969e:	4628      	mov	r0, r5
 80196a0:	47b8      	blx	r7
 80196a2:	3001      	adds	r0, #1
 80196a4:	f43f af19 	beq.w	80194da <_printf_float+0xc2>
 80196a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80196ac:	4313      	orrs	r3, r2
 80196ae:	d102      	bne.n	80196b6 <_printf_float+0x29e>
 80196b0:	6823      	ldr	r3, [r4, #0]
 80196b2:	07d9      	lsls	r1, r3, #31
 80196b4:	d5d8      	bpl.n	8019668 <_printf_float+0x250>
 80196b6:	ee18 3a10 	vmov	r3, s16
 80196ba:	4652      	mov	r2, sl
 80196bc:	4631      	mov	r1, r6
 80196be:	4628      	mov	r0, r5
 80196c0:	47b8      	blx	r7
 80196c2:	3001      	adds	r0, #1
 80196c4:	f43f af09 	beq.w	80194da <_printf_float+0xc2>
 80196c8:	f04f 0900 	mov.w	r9, #0
 80196cc:	f104 0a1a 	add.w	sl, r4, #26
 80196d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196d2:	425b      	negs	r3, r3
 80196d4:	454b      	cmp	r3, r9
 80196d6:	dc01      	bgt.n	80196dc <_printf_float+0x2c4>
 80196d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196da:	e792      	b.n	8019602 <_printf_float+0x1ea>
 80196dc:	2301      	movs	r3, #1
 80196de:	4652      	mov	r2, sl
 80196e0:	4631      	mov	r1, r6
 80196e2:	4628      	mov	r0, r5
 80196e4:	47b8      	blx	r7
 80196e6:	3001      	adds	r0, #1
 80196e8:	f43f aef7 	beq.w	80194da <_printf_float+0xc2>
 80196ec:	f109 0901 	add.w	r9, r9, #1
 80196f0:	e7ee      	b.n	80196d0 <_printf_float+0x2b8>
 80196f2:	bf00      	nop
 80196f4:	7fefffff 	.word	0x7fefffff
 80196f8:	08051a30 	.word	0x08051a30
 80196fc:	08051a34 	.word	0x08051a34
 8019700:	08051a3c 	.word	0x08051a3c
 8019704:	08051a38 	.word	0x08051a38
 8019708:	08051a40 	.word	0x08051a40
 801970c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801970e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019710:	429a      	cmp	r2, r3
 8019712:	bfa8      	it	ge
 8019714:	461a      	movge	r2, r3
 8019716:	2a00      	cmp	r2, #0
 8019718:	4691      	mov	r9, r2
 801971a:	dc37      	bgt.n	801978c <_printf_float+0x374>
 801971c:	f04f 0b00 	mov.w	fp, #0
 8019720:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019724:	f104 021a 	add.w	r2, r4, #26
 8019728:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801972a:	9305      	str	r3, [sp, #20]
 801972c:	eba3 0309 	sub.w	r3, r3, r9
 8019730:	455b      	cmp	r3, fp
 8019732:	dc33      	bgt.n	801979c <_printf_float+0x384>
 8019734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019738:	429a      	cmp	r2, r3
 801973a:	db3b      	blt.n	80197b4 <_printf_float+0x39c>
 801973c:	6823      	ldr	r3, [r4, #0]
 801973e:	07da      	lsls	r2, r3, #31
 8019740:	d438      	bmi.n	80197b4 <_printf_float+0x39c>
 8019742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019744:	9a05      	ldr	r2, [sp, #20]
 8019746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019748:	1a9a      	subs	r2, r3, r2
 801974a:	eba3 0901 	sub.w	r9, r3, r1
 801974e:	4591      	cmp	r9, r2
 8019750:	bfa8      	it	ge
 8019752:	4691      	movge	r9, r2
 8019754:	f1b9 0f00 	cmp.w	r9, #0
 8019758:	dc35      	bgt.n	80197c6 <_printf_float+0x3ae>
 801975a:	f04f 0800 	mov.w	r8, #0
 801975e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019762:	f104 0a1a 	add.w	sl, r4, #26
 8019766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801976a:	1a9b      	subs	r3, r3, r2
 801976c:	eba3 0309 	sub.w	r3, r3, r9
 8019770:	4543      	cmp	r3, r8
 8019772:	f77f af79 	ble.w	8019668 <_printf_float+0x250>
 8019776:	2301      	movs	r3, #1
 8019778:	4652      	mov	r2, sl
 801977a:	4631      	mov	r1, r6
 801977c:	4628      	mov	r0, r5
 801977e:	47b8      	blx	r7
 8019780:	3001      	adds	r0, #1
 8019782:	f43f aeaa 	beq.w	80194da <_printf_float+0xc2>
 8019786:	f108 0801 	add.w	r8, r8, #1
 801978a:	e7ec      	b.n	8019766 <_printf_float+0x34e>
 801978c:	4613      	mov	r3, r2
 801978e:	4631      	mov	r1, r6
 8019790:	4642      	mov	r2, r8
 8019792:	4628      	mov	r0, r5
 8019794:	47b8      	blx	r7
 8019796:	3001      	adds	r0, #1
 8019798:	d1c0      	bne.n	801971c <_printf_float+0x304>
 801979a:	e69e      	b.n	80194da <_printf_float+0xc2>
 801979c:	2301      	movs	r3, #1
 801979e:	4631      	mov	r1, r6
 80197a0:	4628      	mov	r0, r5
 80197a2:	9205      	str	r2, [sp, #20]
 80197a4:	47b8      	blx	r7
 80197a6:	3001      	adds	r0, #1
 80197a8:	f43f ae97 	beq.w	80194da <_printf_float+0xc2>
 80197ac:	9a05      	ldr	r2, [sp, #20]
 80197ae:	f10b 0b01 	add.w	fp, fp, #1
 80197b2:	e7b9      	b.n	8019728 <_printf_float+0x310>
 80197b4:	ee18 3a10 	vmov	r3, s16
 80197b8:	4652      	mov	r2, sl
 80197ba:	4631      	mov	r1, r6
 80197bc:	4628      	mov	r0, r5
 80197be:	47b8      	blx	r7
 80197c0:	3001      	adds	r0, #1
 80197c2:	d1be      	bne.n	8019742 <_printf_float+0x32a>
 80197c4:	e689      	b.n	80194da <_printf_float+0xc2>
 80197c6:	9a05      	ldr	r2, [sp, #20]
 80197c8:	464b      	mov	r3, r9
 80197ca:	4442      	add	r2, r8
 80197cc:	4631      	mov	r1, r6
 80197ce:	4628      	mov	r0, r5
 80197d0:	47b8      	blx	r7
 80197d2:	3001      	adds	r0, #1
 80197d4:	d1c1      	bne.n	801975a <_printf_float+0x342>
 80197d6:	e680      	b.n	80194da <_printf_float+0xc2>
 80197d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197da:	2a01      	cmp	r2, #1
 80197dc:	dc01      	bgt.n	80197e2 <_printf_float+0x3ca>
 80197de:	07db      	lsls	r3, r3, #31
 80197e0:	d538      	bpl.n	8019854 <_printf_float+0x43c>
 80197e2:	2301      	movs	r3, #1
 80197e4:	4642      	mov	r2, r8
 80197e6:	4631      	mov	r1, r6
 80197e8:	4628      	mov	r0, r5
 80197ea:	47b8      	blx	r7
 80197ec:	3001      	adds	r0, #1
 80197ee:	f43f ae74 	beq.w	80194da <_printf_float+0xc2>
 80197f2:	ee18 3a10 	vmov	r3, s16
 80197f6:	4652      	mov	r2, sl
 80197f8:	4631      	mov	r1, r6
 80197fa:	4628      	mov	r0, r5
 80197fc:	47b8      	blx	r7
 80197fe:	3001      	adds	r0, #1
 8019800:	f43f ae6b 	beq.w	80194da <_printf_float+0xc2>
 8019804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019808:	2200      	movs	r2, #0
 801980a:	2300      	movs	r3, #0
 801980c:	f7ff fa6c 	bl	8018ce8 <__aeabi_dcmpeq>
 8019810:	b9d8      	cbnz	r0, 801984a <_printf_float+0x432>
 8019812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019814:	f108 0201 	add.w	r2, r8, #1
 8019818:	3b01      	subs	r3, #1
 801981a:	4631      	mov	r1, r6
 801981c:	4628      	mov	r0, r5
 801981e:	47b8      	blx	r7
 8019820:	3001      	adds	r0, #1
 8019822:	d10e      	bne.n	8019842 <_printf_float+0x42a>
 8019824:	e659      	b.n	80194da <_printf_float+0xc2>
 8019826:	2301      	movs	r3, #1
 8019828:	4652      	mov	r2, sl
 801982a:	4631      	mov	r1, r6
 801982c:	4628      	mov	r0, r5
 801982e:	47b8      	blx	r7
 8019830:	3001      	adds	r0, #1
 8019832:	f43f ae52 	beq.w	80194da <_printf_float+0xc2>
 8019836:	f108 0801 	add.w	r8, r8, #1
 801983a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801983c:	3b01      	subs	r3, #1
 801983e:	4543      	cmp	r3, r8
 8019840:	dcf1      	bgt.n	8019826 <_printf_float+0x40e>
 8019842:	464b      	mov	r3, r9
 8019844:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019848:	e6dc      	b.n	8019604 <_printf_float+0x1ec>
 801984a:	f04f 0800 	mov.w	r8, #0
 801984e:	f104 0a1a 	add.w	sl, r4, #26
 8019852:	e7f2      	b.n	801983a <_printf_float+0x422>
 8019854:	2301      	movs	r3, #1
 8019856:	4642      	mov	r2, r8
 8019858:	e7df      	b.n	801981a <_printf_float+0x402>
 801985a:	2301      	movs	r3, #1
 801985c:	464a      	mov	r2, r9
 801985e:	4631      	mov	r1, r6
 8019860:	4628      	mov	r0, r5
 8019862:	47b8      	blx	r7
 8019864:	3001      	adds	r0, #1
 8019866:	f43f ae38 	beq.w	80194da <_printf_float+0xc2>
 801986a:	f108 0801 	add.w	r8, r8, #1
 801986e:	68e3      	ldr	r3, [r4, #12]
 8019870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019872:	1a5b      	subs	r3, r3, r1
 8019874:	4543      	cmp	r3, r8
 8019876:	dcf0      	bgt.n	801985a <_printf_float+0x442>
 8019878:	e6fa      	b.n	8019670 <_printf_float+0x258>
 801987a:	f04f 0800 	mov.w	r8, #0
 801987e:	f104 0919 	add.w	r9, r4, #25
 8019882:	e7f4      	b.n	801986e <_printf_float+0x456>

08019884 <_printf_common>:
 8019884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019888:	4616      	mov	r6, r2
 801988a:	4699      	mov	r9, r3
 801988c:	688a      	ldr	r2, [r1, #8]
 801988e:	690b      	ldr	r3, [r1, #16]
 8019890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019894:	4293      	cmp	r3, r2
 8019896:	bfb8      	it	lt
 8019898:	4613      	movlt	r3, r2
 801989a:	6033      	str	r3, [r6, #0]
 801989c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80198a0:	4607      	mov	r7, r0
 80198a2:	460c      	mov	r4, r1
 80198a4:	b10a      	cbz	r2, 80198aa <_printf_common+0x26>
 80198a6:	3301      	adds	r3, #1
 80198a8:	6033      	str	r3, [r6, #0]
 80198aa:	6823      	ldr	r3, [r4, #0]
 80198ac:	0699      	lsls	r1, r3, #26
 80198ae:	bf42      	ittt	mi
 80198b0:	6833      	ldrmi	r3, [r6, #0]
 80198b2:	3302      	addmi	r3, #2
 80198b4:	6033      	strmi	r3, [r6, #0]
 80198b6:	6825      	ldr	r5, [r4, #0]
 80198b8:	f015 0506 	ands.w	r5, r5, #6
 80198bc:	d106      	bne.n	80198cc <_printf_common+0x48>
 80198be:	f104 0a19 	add.w	sl, r4, #25
 80198c2:	68e3      	ldr	r3, [r4, #12]
 80198c4:	6832      	ldr	r2, [r6, #0]
 80198c6:	1a9b      	subs	r3, r3, r2
 80198c8:	42ab      	cmp	r3, r5
 80198ca:	dc26      	bgt.n	801991a <_printf_common+0x96>
 80198cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80198d0:	1e13      	subs	r3, r2, #0
 80198d2:	6822      	ldr	r2, [r4, #0]
 80198d4:	bf18      	it	ne
 80198d6:	2301      	movne	r3, #1
 80198d8:	0692      	lsls	r2, r2, #26
 80198da:	d42b      	bmi.n	8019934 <_printf_common+0xb0>
 80198dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80198e0:	4649      	mov	r1, r9
 80198e2:	4638      	mov	r0, r7
 80198e4:	47c0      	blx	r8
 80198e6:	3001      	adds	r0, #1
 80198e8:	d01e      	beq.n	8019928 <_printf_common+0xa4>
 80198ea:	6823      	ldr	r3, [r4, #0]
 80198ec:	68e5      	ldr	r5, [r4, #12]
 80198ee:	6832      	ldr	r2, [r6, #0]
 80198f0:	f003 0306 	and.w	r3, r3, #6
 80198f4:	2b04      	cmp	r3, #4
 80198f6:	bf08      	it	eq
 80198f8:	1aad      	subeq	r5, r5, r2
 80198fa:	68a3      	ldr	r3, [r4, #8]
 80198fc:	6922      	ldr	r2, [r4, #16]
 80198fe:	bf0c      	ite	eq
 8019900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019904:	2500      	movne	r5, #0
 8019906:	4293      	cmp	r3, r2
 8019908:	bfc4      	itt	gt
 801990a:	1a9b      	subgt	r3, r3, r2
 801990c:	18ed      	addgt	r5, r5, r3
 801990e:	2600      	movs	r6, #0
 8019910:	341a      	adds	r4, #26
 8019912:	42b5      	cmp	r5, r6
 8019914:	d11a      	bne.n	801994c <_printf_common+0xc8>
 8019916:	2000      	movs	r0, #0
 8019918:	e008      	b.n	801992c <_printf_common+0xa8>
 801991a:	2301      	movs	r3, #1
 801991c:	4652      	mov	r2, sl
 801991e:	4649      	mov	r1, r9
 8019920:	4638      	mov	r0, r7
 8019922:	47c0      	blx	r8
 8019924:	3001      	adds	r0, #1
 8019926:	d103      	bne.n	8019930 <_printf_common+0xac>
 8019928:	f04f 30ff 	mov.w	r0, #4294967295
 801992c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019930:	3501      	adds	r5, #1
 8019932:	e7c6      	b.n	80198c2 <_printf_common+0x3e>
 8019934:	18e1      	adds	r1, r4, r3
 8019936:	1c5a      	adds	r2, r3, #1
 8019938:	2030      	movs	r0, #48	; 0x30
 801993a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801993e:	4422      	add	r2, r4
 8019940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019948:	3302      	adds	r3, #2
 801994a:	e7c7      	b.n	80198dc <_printf_common+0x58>
 801994c:	2301      	movs	r3, #1
 801994e:	4622      	mov	r2, r4
 8019950:	4649      	mov	r1, r9
 8019952:	4638      	mov	r0, r7
 8019954:	47c0      	blx	r8
 8019956:	3001      	adds	r0, #1
 8019958:	d0e6      	beq.n	8019928 <_printf_common+0xa4>
 801995a:	3601      	adds	r6, #1
 801995c:	e7d9      	b.n	8019912 <_printf_common+0x8e>
	...

08019960 <_printf_i>:
 8019960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019964:	7e0f      	ldrb	r7, [r1, #24]
 8019966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019968:	2f78      	cmp	r7, #120	; 0x78
 801996a:	4691      	mov	r9, r2
 801996c:	4680      	mov	r8, r0
 801996e:	460c      	mov	r4, r1
 8019970:	469a      	mov	sl, r3
 8019972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019976:	d807      	bhi.n	8019988 <_printf_i+0x28>
 8019978:	2f62      	cmp	r7, #98	; 0x62
 801997a:	d80a      	bhi.n	8019992 <_printf_i+0x32>
 801997c:	2f00      	cmp	r7, #0
 801997e:	f000 80d8 	beq.w	8019b32 <_printf_i+0x1d2>
 8019982:	2f58      	cmp	r7, #88	; 0x58
 8019984:	f000 80a3 	beq.w	8019ace <_printf_i+0x16e>
 8019988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801998c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019990:	e03a      	b.n	8019a08 <_printf_i+0xa8>
 8019992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019996:	2b15      	cmp	r3, #21
 8019998:	d8f6      	bhi.n	8019988 <_printf_i+0x28>
 801999a:	a101      	add	r1, pc, #4	; (adr r1, 80199a0 <_printf_i+0x40>)
 801999c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199a0:	080199f9 	.word	0x080199f9
 80199a4:	08019a0d 	.word	0x08019a0d
 80199a8:	08019989 	.word	0x08019989
 80199ac:	08019989 	.word	0x08019989
 80199b0:	08019989 	.word	0x08019989
 80199b4:	08019989 	.word	0x08019989
 80199b8:	08019a0d 	.word	0x08019a0d
 80199bc:	08019989 	.word	0x08019989
 80199c0:	08019989 	.word	0x08019989
 80199c4:	08019989 	.word	0x08019989
 80199c8:	08019989 	.word	0x08019989
 80199cc:	08019b19 	.word	0x08019b19
 80199d0:	08019a3d 	.word	0x08019a3d
 80199d4:	08019afb 	.word	0x08019afb
 80199d8:	08019989 	.word	0x08019989
 80199dc:	08019989 	.word	0x08019989
 80199e0:	08019b3b 	.word	0x08019b3b
 80199e4:	08019989 	.word	0x08019989
 80199e8:	08019a3d 	.word	0x08019a3d
 80199ec:	08019989 	.word	0x08019989
 80199f0:	08019989 	.word	0x08019989
 80199f4:	08019b03 	.word	0x08019b03
 80199f8:	682b      	ldr	r3, [r5, #0]
 80199fa:	1d1a      	adds	r2, r3, #4
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	602a      	str	r2, [r5, #0]
 8019a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a08:	2301      	movs	r3, #1
 8019a0a:	e0a3      	b.n	8019b54 <_printf_i+0x1f4>
 8019a0c:	6820      	ldr	r0, [r4, #0]
 8019a0e:	6829      	ldr	r1, [r5, #0]
 8019a10:	0606      	lsls	r6, r0, #24
 8019a12:	f101 0304 	add.w	r3, r1, #4
 8019a16:	d50a      	bpl.n	8019a2e <_printf_i+0xce>
 8019a18:	680e      	ldr	r6, [r1, #0]
 8019a1a:	602b      	str	r3, [r5, #0]
 8019a1c:	2e00      	cmp	r6, #0
 8019a1e:	da03      	bge.n	8019a28 <_printf_i+0xc8>
 8019a20:	232d      	movs	r3, #45	; 0x2d
 8019a22:	4276      	negs	r6, r6
 8019a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a28:	485e      	ldr	r0, [pc, #376]	; (8019ba4 <_printf_i+0x244>)
 8019a2a:	230a      	movs	r3, #10
 8019a2c:	e019      	b.n	8019a62 <_printf_i+0x102>
 8019a2e:	680e      	ldr	r6, [r1, #0]
 8019a30:	602b      	str	r3, [r5, #0]
 8019a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019a36:	bf18      	it	ne
 8019a38:	b236      	sxthne	r6, r6
 8019a3a:	e7ef      	b.n	8019a1c <_printf_i+0xbc>
 8019a3c:	682b      	ldr	r3, [r5, #0]
 8019a3e:	6820      	ldr	r0, [r4, #0]
 8019a40:	1d19      	adds	r1, r3, #4
 8019a42:	6029      	str	r1, [r5, #0]
 8019a44:	0601      	lsls	r1, r0, #24
 8019a46:	d501      	bpl.n	8019a4c <_printf_i+0xec>
 8019a48:	681e      	ldr	r6, [r3, #0]
 8019a4a:	e002      	b.n	8019a52 <_printf_i+0xf2>
 8019a4c:	0646      	lsls	r6, r0, #25
 8019a4e:	d5fb      	bpl.n	8019a48 <_printf_i+0xe8>
 8019a50:	881e      	ldrh	r6, [r3, #0]
 8019a52:	4854      	ldr	r0, [pc, #336]	; (8019ba4 <_printf_i+0x244>)
 8019a54:	2f6f      	cmp	r7, #111	; 0x6f
 8019a56:	bf0c      	ite	eq
 8019a58:	2308      	moveq	r3, #8
 8019a5a:	230a      	movne	r3, #10
 8019a5c:	2100      	movs	r1, #0
 8019a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019a62:	6865      	ldr	r5, [r4, #4]
 8019a64:	60a5      	str	r5, [r4, #8]
 8019a66:	2d00      	cmp	r5, #0
 8019a68:	bfa2      	ittt	ge
 8019a6a:	6821      	ldrge	r1, [r4, #0]
 8019a6c:	f021 0104 	bicge.w	r1, r1, #4
 8019a70:	6021      	strge	r1, [r4, #0]
 8019a72:	b90e      	cbnz	r6, 8019a78 <_printf_i+0x118>
 8019a74:	2d00      	cmp	r5, #0
 8019a76:	d04d      	beq.n	8019b14 <_printf_i+0x1b4>
 8019a78:	4615      	mov	r5, r2
 8019a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8019a82:	5dc7      	ldrb	r7, [r0, r7]
 8019a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019a88:	4637      	mov	r7, r6
 8019a8a:	42bb      	cmp	r3, r7
 8019a8c:	460e      	mov	r6, r1
 8019a8e:	d9f4      	bls.n	8019a7a <_printf_i+0x11a>
 8019a90:	2b08      	cmp	r3, #8
 8019a92:	d10b      	bne.n	8019aac <_printf_i+0x14c>
 8019a94:	6823      	ldr	r3, [r4, #0]
 8019a96:	07de      	lsls	r6, r3, #31
 8019a98:	d508      	bpl.n	8019aac <_printf_i+0x14c>
 8019a9a:	6923      	ldr	r3, [r4, #16]
 8019a9c:	6861      	ldr	r1, [r4, #4]
 8019a9e:	4299      	cmp	r1, r3
 8019aa0:	bfde      	ittt	le
 8019aa2:	2330      	movle	r3, #48	; 0x30
 8019aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019aa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019aac:	1b52      	subs	r2, r2, r5
 8019aae:	6122      	str	r2, [r4, #16]
 8019ab0:	f8cd a000 	str.w	sl, [sp]
 8019ab4:	464b      	mov	r3, r9
 8019ab6:	aa03      	add	r2, sp, #12
 8019ab8:	4621      	mov	r1, r4
 8019aba:	4640      	mov	r0, r8
 8019abc:	f7ff fee2 	bl	8019884 <_printf_common>
 8019ac0:	3001      	adds	r0, #1
 8019ac2:	d14c      	bne.n	8019b5e <_printf_i+0x1fe>
 8019ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ac8:	b004      	add	sp, #16
 8019aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ace:	4835      	ldr	r0, [pc, #212]	; (8019ba4 <_printf_i+0x244>)
 8019ad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019ad4:	6829      	ldr	r1, [r5, #0]
 8019ad6:	6823      	ldr	r3, [r4, #0]
 8019ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8019adc:	6029      	str	r1, [r5, #0]
 8019ade:	061d      	lsls	r5, r3, #24
 8019ae0:	d514      	bpl.n	8019b0c <_printf_i+0x1ac>
 8019ae2:	07df      	lsls	r7, r3, #31
 8019ae4:	bf44      	itt	mi
 8019ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8019aea:	6023      	strmi	r3, [r4, #0]
 8019aec:	b91e      	cbnz	r6, 8019af6 <_printf_i+0x196>
 8019aee:	6823      	ldr	r3, [r4, #0]
 8019af0:	f023 0320 	bic.w	r3, r3, #32
 8019af4:	6023      	str	r3, [r4, #0]
 8019af6:	2310      	movs	r3, #16
 8019af8:	e7b0      	b.n	8019a5c <_printf_i+0xfc>
 8019afa:	6823      	ldr	r3, [r4, #0]
 8019afc:	f043 0320 	orr.w	r3, r3, #32
 8019b00:	6023      	str	r3, [r4, #0]
 8019b02:	2378      	movs	r3, #120	; 0x78
 8019b04:	4828      	ldr	r0, [pc, #160]	; (8019ba8 <_printf_i+0x248>)
 8019b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b0a:	e7e3      	b.n	8019ad4 <_printf_i+0x174>
 8019b0c:	0659      	lsls	r1, r3, #25
 8019b0e:	bf48      	it	mi
 8019b10:	b2b6      	uxthmi	r6, r6
 8019b12:	e7e6      	b.n	8019ae2 <_printf_i+0x182>
 8019b14:	4615      	mov	r5, r2
 8019b16:	e7bb      	b.n	8019a90 <_printf_i+0x130>
 8019b18:	682b      	ldr	r3, [r5, #0]
 8019b1a:	6826      	ldr	r6, [r4, #0]
 8019b1c:	6961      	ldr	r1, [r4, #20]
 8019b1e:	1d18      	adds	r0, r3, #4
 8019b20:	6028      	str	r0, [r5, #0]
 8019b22:	0635      	lsls	r5, r6, #24
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	d501      	bpl.n	8019b2c <_printf_i+0x1cc>
 8019b28:	6019      	str	r1, [r3, #0]
 8019b2a:	e002      	b.n	8019b32 <_printf_i+0x1d2>
 8019b2c:	0670      	lsls	r0, r6, #25
 8019b2e:	d5fb      	bpl.n	8019b28 <_printf_i+0x1c8>
 8019b30:	8019      	strh	r1, [r3, #0]
 8019b32:	2300      	movs	r3, #0
 8019b34:	6123      	str	r3, [r4, #16]
 8019b36:	4615      	mov	r5, r2
 8019b38:	e7ba      	b.n	8019ab0 <_printf_i+0x150>
 8019b3a:	682b      	ldr	r3, [r5, #0]
 8019b3c:	1d1a      	adds	r2, r3, #4
 8019b3e:	602a      	str	r2, [r5, #0]
 8019b40:	681d      	ldr	r5, [r3, #0]
 8019b42:	6862      	ldr	r2, [r4, #4]
 8019b44:	2100      	movs	r1, #0
 8019b46:	4628      	mov	r0, r5
 8019b48:	f7fe fc5a 	bl	8018400 <memchr>
 8019b4c:	b108      	cbz	r0, 8019b52 <_printf_i+0x1f2>
 8019b4e:	1b40      	subs	r0, r0, r5
 8019b50:	6060      	str	r0, [r4, #4]
 8019b52:	6863      	ldr	r3, [r4, #4]
 8019b54:	6123      	str	r3, [r4, #16]
 8019b56:	2300      	movs	r3, #0
 8019b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b5c:	e7a8      	b.n	8019ab0 <_printf_i+0x150>
 8019b5e:	6923      	ldr	r3, [r4, #16]
 8019b60:	462a      	mov	r2, r5
 8019b62:	4649      	mov	r1, r9
 8019b64:	4640      	mov	r0, r8
 8019b66:	47d0      	blx	sl
 8019b68:	3001      	adds	r0, #1
 8019b6a:	d0ab      	beq.n	8019ac4 <_printf_i+0x164>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	079b      	lsls	r3, r3, #30
 8019b70:	d413      	bmi.n	8019b9a <_printf_i+0x23a>
 8019b72:	68e0      	ldr	r0, [r4, #12]
 8019b74:	9b03      	ldr	r3, [sp, #12]
 8019b76:	4298      	cmp	r0, r3
 8019b78:	bfb8      	it	lt
 8019b7a:	4618      	movlt	r0, r3
 8019b7c:	e7a4      	b.n	8019ac8 <_printf_i+0x168>
 8019b7e:	2301      	movs	r3, #1
 8019b80:	4632      	mov	r2, r6
 8019b82:	4649      	mov	r1, r9
 8019b84:	4640      	mov	r0, r8
 8019b86:	47d0      	blx	sl
 8019b88:	3001      	adds	r0, #1
 8019b8a:	d09b      	beq.n	8019ac4 <_printf_i+0x164>
 8019b8c:	3501      	adds	r5, #1
 8019b8e:	68e3      	ldr	r3, [r4, #12]
 8019b90:	9903      	ldr	r1, [sp, #12]
 8019b92:	1a5b      	subs	r3, r3, r1
 8019b94:	42ab      	cmp	r3, r5
 8019b96:	dcf2      	bgt.n	8019b7e <_printf_i+0x21e>
 8019b98:	e7eb      	b.n	8019b72 <_printf_i+0x212>
 8019b9a:	2500      	movs	r5, #0
 8019b9c:	f104 0619 	add.w	r6, r4, #25
 8019ba0:	e7f5      	b.n	8019b8e <_printf_i+0x22e>
 8019ba2:	bf00      	nop
 8019ba4:	08051a42 	.word	0x08051a42
 8019ba8:	08051a53 	.word	0x08051a53

08019bac <_scanf_float>:
 8019bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb0:	b087      	sub	sp, #28
 8019bb2:	4617      	mov	r7, r2
 8019bb4:	9303      	str	r3, [sp, #12]
 8019bb6:	688b      	ldr	r3, [r1, #8]
 8019bb8:	1e5a      	subs	r2, r3, #1
 8019bba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019bbe:	bf83      	ittte	hi
 8019bc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019bc4:	195b      	addhi	r3, r3, r5
 8019bc6:	9302      	strhi	r3, [sp, #8]
 8019bc8:	2300      	movls	r3, #0
 8019bca:	bf86      	itte	hi
 8019bcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019bd0:	608b      	strhi	r3, [r1, #8]
 8019bd2:	9302      	strls	r3, [sp, #8]
 8019bd4:	680b      	ldr	r3, [r1, #0]
 8019bd6:	468b      	mov	fp, r1
 8019bd8:	2500      	movs	r5, #0
 8019bda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019bde:	f84b 3b1c 	str.w	r3, [fp], #28
 8019be2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019be6:	4680      	mov	r8, r0
 8019be8:	460c      	mov	r4, r1
 8019bea:	465e      	mov	r6, fp
 8019bec:	46aa      	mov	sl, r5
 8019bee:	46a9      	mov	r9, r5
 8019bf0:	9501      	str	r5, [sp, #4]
 8019bf2:	68a2      	ldr	r2, [r4, #8]
 8019bf4:	b152      	cbz	r2, 8019c0c <_scanf_float+0x60>
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	781b      	ldrb	r3, [r3, #0]
 8019bfa:	2b4e      	cmp	r3, #78	; 0x4e
 8019bfc:	d864      	bhi.n	8019cc8 <_scanf_float+0x11c>
 8019bfe:	2b40      	cmp	r3, #64	; 0x40
 8019c00:	d83c      	bhi.n	8019c7c <_scanf_float+0xd0>
 8019c02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019c06:	b2c8      	uxtb	r0, r1
 8019c08:	280e      	cmp	r0, #14
 8019c0a:	d93a      	bls.n	8019c82 <_scanf_float+0xd6>
 8019c0c:	f1b9 0f00 	cmp.w	r9, #0
 8019c10:	d003      	beq.n	8019c1a <_scanf_float+0x6e>
 8019c12:	6823      	ldr	r3, [r4, #0]
 8019c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019c18:	6023      	str	r3, [r4, #0]
 8019c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c1e:	f1ba 0f01 	cmp.w	sl, #1
 8019c22:	f200 8113 	bhi.w	8019e4c <_scanf_float+0x2a0>
 8019c26:	455e      	cmp	r6, fp
 8019c28:	f200 8105 	bhi.w	8019e36 <_scanf_float+0x28a>
 8019c2c:	2501      	movs	r5, #1
 8019c2e:	4628      	mov	r0, r5
 8019c30:	b007      	add	sp, #28
 8019c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019c3a:	2a0d      	cmp	r2, #13
 8019c3c:	d8e6      	bhi.n	8019c0c <_scanf_float+0x60>
 8019c3e:	a101      	add	r1, pc, #4	; (adr r1, 8019c44 <_scanf_float+0x98>)
 8019c40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019c44:	08019d83 	.word	0x08019d83
 8019c48:	08019c0d 	.word	0x08019c0d
 8019c4c:	08019c0d 	.word	0x08019c0d
 8019c50:	08019c0d 	.word	0x08019c0d
 8019c54:	08019de3 	.word	0x08019de3
 8019c58:	08019dbb 	.word	0x08019dbb
 8019c5c:	08019c0d 	.word	0x08019c0d
 8019c60:	08019c0d 	.word	0x08019c0d
 8019c64:	08019d91 	.word	0x08019d91
 8019c68:	08019c0d 	.word	0x08019c0d
 8019c6c:	08019c0d 	.word	0x08019c0d
 8019c70:	08019c0d 	.word	0x08019c0d
 8019c74:	08019c0d 	.word	0x08019c0d
 8019c78:	08019d49 	.word	0x08019d49
 8019c7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019c80:	e7db      	b.n	8019c3a <_scanf_float+0x8e>
 8019c82:	290e      	cmp	r1, #14
 8019c84:	d8c2      	bhi.n	8019c0c <_scanf_float+0x60>
 8019c86:	a001      	add	r0, pc, #4	; (adr r0, 8019c8c <_scanf_float+0xe0>)
 8019c88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019c8c:	08019d3b 	.word	0x08019d3b
 8019c90:	08019c0d 	.word	0x08019c0d
 8019c94:	08019d3b 	.word	0x08019d3b
 8019c98:	08019dcf 	.word	0x08019dcf
 8019c9c:	08019c0d 	.word	0x08019c0d
 8019ca0:	08019ce9 	.word	0x08019ce9
 8019ca4:	08019d25 	.word	0x08019d25
 8019ca8:	08019d25 	.word	0x08019d25
 8019cac:	08019d25 	.word	0x08019d25
 8019cb0:	08019d25 	.word	0x08019d25
 8019cb4:	08019d25 	.word	0x08019d25
 8019cb8:	08019d25 	.word	0x08019d25
 8019cbc:	08019d25 	.word	0x08019d25
 8019cc0:	08019d25 	.word	0x08019d25
 8019cc4:	08019d25 	.word	0x08019d25
 8019cc8:	2b6e      	cmp	r3, #110	; 0x6e
 8019cca:	d809      	bhi.n	8019ce0 <_scanf_float+0x134>
 8019ccc:	2b60      	cmp	r3, #96	; 0x60
 8019cce:	d8b2      	bhi.n	8019c36 <_scanf_float+0x8a>
 8019cd0:	2b54      	cmp	r3, #84	; 0x54
 8019cd2:	d077      	beq.n	8019dc4 <_scanf_float+0x218>
 8019cd4:	2b59      	cmp	r3, #89	; 0x59
 8019cd6:	d199      	bne.n	8019c0c <_scanf_float+0x60>
 8019cd8:	2d07      	cmp	r5, #7
 8019cda:	d197      	bne.n	8019c0c <_scanf_float+0x60>
 8019cdc:	2508      	movs	r5, #8
 8019cde:	e029      	b.n	8019d34 <_scanf_float+0x188>
 8019ce0:	2b74      	cmp	r3, #116	; 0x74
 8019ce2:	d06f      	beq.n	8019dc4 <_scanf_float+0x218>
 8019ce4:	2b79      	cmp	r3, #121	; 0x79
 8019ce6:	e7f6      	b.n	8019cd6 <_scanf_float+0x12a>
 8019ce8:	6821      	ldr	r1, [r4, #0]
 8019cea:	05c8      	lsls	r0, r1, #23
 8019cec:	d51a      	bpl.n	8019d24 <_scanf_float+0x178>
 8019cee:	9b02      	ldr	r3, [sp, #8]
 8019cf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019cf4:	6021      	str	r1, [r4, #0]
 8019cf6:	f109 0901 	add.w	r9, r9, #1
 8019cfa:	b11b      	cbz	r3, 8019d04 <_scanf_float+0x158>
 8019cfc:	3b01      	subs	r3, #1
 8019cfe:	3201      	adds	r2, #1
 8019d00:	9302      	str	r3, [sp, #8]
 8019d02:	60a2      	str	r2, [r4, #8]
 8019d04:	68a3      	ldr	r3, [r4, #8]
 8019d06:	3b01      	subs	r3, #1
 8019d08:	60a3      	str	r3, [r4, #8]
 8019d0a:	6923      	ldr	r3, [r4, #16]
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	6123      	str	r3, [r4, #16]
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	3b01      	subs	r3, #1
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	607b      	str	r3, [r7, #4]
 8019d18:	f340 8084 	ble.w	8019e24 <_scanf_float+0x278>
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	3301      	adds	r3, #1
 8019d20:	603b      	str	r3, [r7, #0]
 8019d22:	e766      	b.n	8019bf2 <_scanf_float+0x46>
 8019d24:	eb1a 0f05 	cmn.w	sl, r5
 8019d28:	f47f af70 	bne.w	8019c0c <_scanf_float+0x60>
 8019d2c:	6822      	ldr	r2, [r4, #0]
 8019d2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019d32:	6022      	str	r2, [r4, #0]
 8019d34:	f806 3b01 	strb.w	r3, [r6], #1
 8019d38:	e7e4      	b.n	8019d04 <_scanf_float+0x158>
 8019d3a:	6822      	ldr	r2, [r4, #0]
 8019d3c:	0610      	lsls	r0, r2, #24
 8019d3e:	f57f af65 	bpl.w	8019c0c <_scanf_float+0x60>
 8019d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019d46:	e7f4      	b.n	8019d32 <_scanf_float+0x186>
 8019d48:	f1ba 0f00 	cmp.w	sl, #0
 8019d4c:	d10e      	bne.n	8019d6c <_scanf_float+0x1c0>
 8019d4e:	f1b9 0f00 	cmp.w	r9, #0
 8019d52:	d10e      	bne.n	8019d72 <_scanf_float+0x1c6>
 8019d54:	6822      	ldr	r2, [r4, #0]
 8019d56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019d5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019d5e:	d108      	bne.n	8019d72 <_scanf_float+0x1c6>
 8019d60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019d64:	6022      	str	r2, [r4, #0]
 8019d66:	f04f 0a01 	mov.w	sl, #1
 8019d6a:	e7e3      	b.n	8019d34 <_scanf_float+0x188>
 8019d6c:	f1ba 0f02 	cmp.w	sl, #2
 8019d70:	d055      	beq.n	8019e1e <_scanf_float+0x272>
 8019d72:	2d01      	cmp	r5, #1
 8019d74:	d002      	beq.n	8019d7c <_scanf_float+0x1d0>
 8019d76:	2d04      	cmp	r5, #4
 8019d78:	f47f af48 	bne.w	8019c0c <_scanf_float+0x60>
 8019d7c:	3501      	adds	r5, #1
 8019d7e:	b2ed      	uxtb	r5, r5
 8019d80:	e7d8      	b.n	8019d34 <_scanf_float+0x188>
 8019d82:	f1ba 0f01 	cmp.w	sl, #1
 8019d86:	f47f af41 	bne.w	8019c0c <_scanf_float+0x60>
 8019d8a:	f04f 0a02 	mov.w	sl, #2
 8019d8e:	e7d1      	b.n	8019d34 <_scanf_float+0x188>
 8019d90:	b97d      	cbnz	r5, 8019db2 <_scanf_float+0x206>
 8019d92:	f1b9 0f00 	cmp.w	r9, #0
 8019d96:	f47f af3c 	bne.w	8019c12 <_scanf_float+0x66>
 8019d9a:	6822      	ldr	r2, [r4, #0]
 8019d9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019da0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019da4:	f47f af39 	bne.w	8019c1a <_scanf_float+0x6e>
 8019da8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019dac:	6022      	str	r2, [r4, #0]
 8019dae:	2501      	movs	r5, #1
 8019db0:	e7c0      	b.n	8019d34 <_scanf_float+0x188>
 8019db2:	2d03      	cmp	r5, #3
 8019db4:	d0e2      	beq.n	8019d7c <_scanf_float+0x1d0>
 8019db6:	2d05      	cmp	r5, #5
 8019db8:	e7de      	b.n	8019d78 <_scanf_float+0x1cc>
 8019dba:	2d02      	cmp	r5, #2
 8019dbc:	f47f af26 	bne.w	8019c0c <_scanf_float+0x60>
 8019dc0:	2503      	movs	r5, #3
 8019dc2:	e7b7      	b.n	8019d34 <_scanf_float+0x188>
 8019dc4:	2d06      	cmp	r5, #6
 8019dc6:	f47f af21 	bne.w	8019c0c <_scanf_float+0x60>
 8019dca:	2507      	movs	r5, #7
 8019dcc:	e7b2      	b.n	8019d34 <_scanf_float+0x188>
 8019dce:	6822      	ldr	r2, [r4, #0]
 8019dd0:	0591      	lsls	r1, r2, #22
 8019dd2:	f57f af1b 	bpl.w	8019c0c <_scanf_float+0x60>
 8019dd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019dda:	6022      	str	r2, [r4, #0]
 8019ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8019de0:	e7a8      	b.n	8019d34 <_scanf_float+0x188>
 8019de2:	6822      	ldr	r2, [r4, #0]
 8019de4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019de8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019dec:	d006      	beq.n	8019dfc <_scanf_float+0x250>
 8019dee:	0550      	lsls	r0, r2, #21
 8019df0:	f57f af0c 	bpl.w	8019c0c <_scanf_float+0x60>
 8019df4:	f1b9 0f00 	cmp.w	r9, #0
 8019df8:	f43f af0f 	beq.w	8019c1a <_scanf_float+0x6e>
 8019dfc:	0591      	lsls	r1, r2, #22
 8019dfe:	bf58      	it	pl
 8019e00:	9901      	ldrpl	r1, [sp, #4]
 8019e02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019e06:	bf58      	it	pl
 8019e08:	eba9 0101 	subpl.w	r1, r9, r1
 8019e0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019e10:	bf58      	it	pl
 8019e12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019e16:	6022      	str	r2, [r4, #0]
 8019e18:	f04f 0900 	mov.w	r9, #0
 8019e1c:	e78a      	b.n	8019d34 <_scanf_float+0x188>
 8019e1e:	f04f 0a03 	mov.w	sl, #3
 8019e22:	e787      	b.n	8019d34 <_scanf_float+0x188>
 8019e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e28:	4639      	mov	r1, r7
 8019e2a:	4640      	mov	r0, r8
 8019e2c:	4798      	blx	r3
 8019e2e:	2800      	cmp	r0, #0
 8019e30:	f43f aedf 	beq.w	8019bf2 <_scanf_float+0x46>
 8019e34:	e6ea      	b.n	8019c0c <_scanf_float+0x60>
 8019e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019e3e:	463a      	mov	r2, r7
 8019e40:	4640      	mov	r0, r8
 8019e42:	4798      	blx	r3
 8019e44:	6923      	ldr	r3, [r4, #16]
 8019e46:	3b01      	subs	r3, #1
 8019e48:	6123      	str	r3, [r4, #16]
 8019e4a:	e6ec      	b.n	8019c26 <_scanf_float+0x7a>
 8019e4c:	1e6b      	subs	r3, r5, #1
 8019e4e:	2b06      	cmp	r3, #6
 8019e50:	d825      	bhi.n	8019e9e <_scanf_float+0x2f2>
 8019e52:	2d02      	cmp	r5, #2
 8019e54:	d836      	bhi.n	8019ec4 <_scanf_float+0x318>
 8019e56:	455e      	cmp	r6, fp
 8019e58:	f67f aee8 	bls.w	8019c2c <_scanf_float+0x80>
 8019e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019e64:	463a      	mov	r2, r7
 8019e66:	4640      	mov	r0, r8
 8019e68:	4798      	blx	r3
 8019e6a:	6923      	ldr	r3, [r4, #16]
 8019e6c:	3b01      	subs	r3, #1
 8019e6e:	6123      	str	r3, [r4, #16]
 8019e70:	e7f1      	b.n	8019e56 <_scanf_float+0x2aa>
 8019e72:	9802      	ldr	r0, [sp, #8]
 8019e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019e7c:	9002      	str	r0, [sp, #8]
 8019e7e:	463a      	mov	r2, r7
 8019e80:	4640      	mov	r0, r8
 8019e82:	4798      	blx	r3
 8019e84:	6923      	ldr	r3, [r4, #16]
 8019e86:	3b01      	subs	r3, #1
 8019e88:	6123      	str	r3, [r4, #16]
 8019e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019e8e:	fa5f fa8a 	uxtb.w	sl, sl
 8019e92:	f1ba 0f02 	cmp.w	sl, #2
 8019e96:	d1ec      	bne.n	8019e72 <_scanf_float+0x2c6>
 8019e98:	3d03      	subs	r5, #3
 8019e9a:	b2ed      	uxtb	r5, r5
 8019e9c:	1b76      	subs	r6, r6, r5
 8019e9e:	6823      	ldr	r3, [r4, #0]
 8019ea0:	05da      	lsls	r2, r3, #23
 8019ea2:	d52f      	bpl.n	8019f04 <_scanf_float+0x358>
 8019ea4:	055b      	lsls	r3, r3, #21
 8019ea6:	d510      	bpl.n	8019eca <_scanf_float+0x31e>
 8019ea8:	455e      	cmp	r6, fp
 8019eaa:	f67f aebf 	bls.w	8019c2c <_scanf_float+0x80>
 8019eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019eb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019eb6:	463a      	mov	r2, r7
 8019eb8:	4640      	mov	r0, r8
 8019eba:	4798      	blx	r3
 8019ebc:	6923      	ldr	r3, [r4, #16]
 8019ebe:	3b01      	subs	r3, #1
 8019ec0:	6123      	str	r3, [r4, #16]
 8019ec2:	e7f1      	b.n	8019ea8 <_scanf_float+0x2fc>
 8019ec4:	46aa      	mov	sl, r5
 8019ec6:	9602      	str	r6, [sp, #8]
 8019ec8:	e7df      	b.n	8019e8a <_scanf_float+0x2de>
 8019eca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019ece:	6923      	ldr	r3, [r4, #16]
 8019ed0:	2965      	cmp	r1, #101	; 0x65
 8019ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8019ed6:	f106 35ff 	add.w	r5, r6, #4294967295
 8019eda:	6123      	str	r3, [r4, #16]
 8019edc:	d00c      	beq.n	8019ef8 <_scanf_float+0x34c>
 8019ede:	2945      	cmp	r1, #69	; 0x45
 8019ee0:	d00a      	beq.n	8019ef8 <_scanf_float+0x34c>
 8019ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019ee6:	463a      	mov	r2, r7
 8019ee8:	4640      	mov	r0, r8
 8019eea:	4798      	blx	r3
 8019eec:	6923      	ldr	r3, [r4, #16]
 8019eee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019ef2:	3b01      	subs	r3, #1
 8019ef4:	1eb5      	subs	r5, r6, #2
 8019ef6:	6123      	str	r3, [r4, #16]
 8019ef8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019efc:	463a      	mov	r2, r7
 8019efe:	4640      	mov	r0, r8
 8019f00:	4798      	blx	r3
 8019f02:	462e      	mov	r6, r5
 8019f04:	6825      	ldr	r5, [r4, #0]
 8019f06:	f015 0510 	ands.w	r5, r5, #16
 8019f0a:	d159      	bne.n	8019fc0 <_scanf_float+0x414>
 8019f0c:	7035      	strb	r5, [r6, #0]
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f18:	d11b      	bne.n	8019f52 <_scanf_float+0x3a6>
 8019f1a:	9b01      	ldr	r3, [sp, #4]
 8019f1c:	454b      	cmp	r3, r9
 8019f1e:	eba3 0209 	sub.w	r2, r3, r9
 8019f22:	d123      	bne.n	8019f6c <_scanf_float+0x3c0>
 8019f24:	2200      	movs	r2, #0
 8019f26:	4659      	mov	r1, fp
 8019f28:	4640      	mov	r0, r8
 8019f2a:	f000 fe97 	bl	801ac5c <_strtod_r>
 8019f2e:	6822      	ldr	r2, [r4, #0]
 8019f30:	9b03      	ldr	r3, [sp, #12]
 8019f32:	f012 0f02 	tst.w	r2, #2
 8019f36:	ec57 6b10 	vmov	r6, r7, d0
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	d021      	beq.n	8019f82 <_scanf_float+0x3d6>
 8019f3e:	9903      	ldr	r1, [sp, #12]
 8019f40:	1d1a      	adds	r2, r3, #4
 8019f42:	600a      	str	r2, [r1, #0]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	e9c3 6700 	strd	r6, r7, [r3]
 8019f4a:	68e3      	ldr	r3, [r4, #12]
 8019f4c:	3301      	adds	r3, #1
 8019f4e:	60e3      	str	r3, [r4, #12]
 8019f50:	e66d      	b.n	8019c2e <_scanf_float+0x82>
 8019f52:	9b04      	ldr	r3, [sp, #16]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d0e5      	beq.n	8019f24 <_scanf_float+0x378>
 8019f58:	9905      	ldr	r1, [sp, #20]
 8019f5a:	230a      	movs	r3, #10
 8019f5c:	462a      	mov	r2, r5
 8019f5e:	3101      	adds	r1, #1
 8019f60:	4640      	mov	r0, r8
 8019f62:	f000 ff03 	bl	801ad6c <_strtol_r>
 8019f66:	9b04      	ldr	r3, [sp, #16]
 8019f68:	9e05      	ldr	r6, [sp, #20]
 8019f6a:	1ac2      	subs	r2, r0, r3
 8019f6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019f70:	429e      	cmp	r6, r3
 8019f72:	bf28      	it	cs
 8019f74:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019f78:	4912      	ldr	r1, [pc, #72]	; (8019fc4 <_scanf_float+0x418>)
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	f000 f82c 	bl	8019fd8 <siprintf>
 8019f80:	e7d0      	b.n	8019f24 <_scanf_float+0x378>
 8019f82:	9903      	ldr	r1, [sp, #12]
 8019f84:	f012 0f04 	tst.w	r2, #4
 8019f88:	f103 0204 	add.w	r2, r3, #4
 8019f8c:	600a      	str	r2, [r1, #0]
 8019f8e:	d1d9      	bne.n	8019f44 <_scanf_float+0x398>
 8019f90:	f8d3 8000 	ldr.w	r8, [r3]
 8019f94:	ee10 2a10 	vmov	r2, s0
 8019f98:	ee10 0a10 	vmov	r0, s0
 8019f9c:	463b      	mov	r3, r7
 8019f9e:	4639      	mov	r1, r7
 8019fa0:	f7fe fed4 	bl	8018d4c <__aeabi_dcmpun>
 8019fa4:	b128      	cbz	r0, 8019fb2 <_scanf_float+0x406>
 8019fa6:	4808      	ldr	r0, [pc, #32]	; (8019fc8 <_scanf_float+0x41c>)
 8019fa8:	f000 f810 	bl	8019fcc <nanf>
 8019fac:	ed88 0a00 	vstr	s0, [r8]
 8019fb0:	e7cb      	b.n	8019f4a <_scanf_float+0x39e>
 8019fb2:	4630      	mov	r0, r6
 8019fb4:	4639      	mov	r1, r7
 8019fb6:	f7fe ff27 	bl	8018e08 <__aeabi_d2f>
 8019fba:	f8c8 0000 	str.w	r0, [r8]
 8019fbe:	e7c4      	b.n	8019f4a <_scanf_float+0x39e>
 8019fc0:	2500      	movs	r5, #0
 8019fc2:	e634      	b.n	8019c2e <_scanf_float+0x82>
 8019fc4:	08051a64 	.word	0x08051a64
 8019fc8:	08051e70 	.word	0x08051e70

08019fcc <nanf>:
 8019fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019fd4 <nanf+0x8>
 8019fd0:	4770      	bx	lr
 8019fd2:	bf00      	nop
 8019fd4:	7fc00000 	.word	0x7fc00000

08019fd8 <siprintf>:
 8019fd8:	b40e      	push	{r1, r2, r3}
 8019fda:	b500      	push	{lr}
 8019fdc:	b09c      	sub	sp, #112	; 0x70
 8019fde:	ab1d      	add	r3, sp, #116	; 0x74
 8019fe0:	9002      	str	r0, [sp, #8]
 8019fe2:	9006      	str	r0, [sp, #24]
 8019fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019fe8:	4809      	ldr	r0, [pc, #36]	; (801a010 <siprintf+0x38>)
 8019fea:	9107      	str	r1, [sp, #28]
 8019fec:	9104      	str	r1, [sp, #16]
 8019fee:	4909      	ldr	r1, [pc, #36]	; (801a014 <siprintf+0x3c>)
 8019ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ff4:	9105      	str	r1, [sp, #20]
 8019ff6:	6800      	ldr	r0, [r0, #0]
 8019ff8:	9301      	str	r3, [sp, #4]
 8019ffa:	a902      	add	r1, sp, #8
 8019ffc:	f002 feee 	bl	801cddc <_svfiprintf_r>
 801a000:	9b02      	ldr	r3, [sp, #8]
 801a002:	2200      	movs	r2, #0
 801a004:	701a      	strb	r2, [r3, #0]
 801a006:	b01c      	add	sp, #112	; 0x70
 801a008:	f85d eb04 	ldr.w	lr, [sp], #4
 801a00c:	b003      	add	sp, #12
 801a00e:	4770      	bx	lr
 801a010:	20000064 	.word	0x20000064
 801a014:	ffff0208 	.word	0xffff0208

0801a018 <sulp>:
 801a018:	b570      	push	{r4, r5, r6, lr}
 801a01a:	4604      	mov	r4, r0
 801a01c:	460d      	mov	r5, r1
 801a01e:	ec45 4b10 	vmov	d0, r4, r5
 801a022:	4616      	mov	r6, r2
 801a024:	f002 fc38 	bl	801c898 <__ulp>
 801a028:	ec51 0b10 	vmov	r0, r1, d0
 801a02c:	b17e      	cbz	r6, 801a04e <sulp+0x36>
 801a02e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a036:	2b00      	cmp	r3, #0
 801a038:	dd09      	ble.n	801a04e <sulp+0x36>
 801a03a:	051b      	lsls	r3, r3, #20
 801a03c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a040:	2400      	movs	r4, #0
 801a042:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a046:	4622      	mov	r2, r4
 801a048:	462b      	mov	r3, r5
 801a04a:	f7fe fbe5 	bl	8018818 <__aeabi_dmul>
 801a04e:	bd70      	pop	{r4, r5, r6, pc}

0801a050 <_strtod_l>:
 801a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a054:	ed2d 8b02 	vpush	{d8}
 801a058:	b09d      	sub	sp, #116	; 0x74
 801a05a:	461f      	mov	r7, r3
 801a05c:	2300      	movs	r3, #0
 801a05e:	9318      	str	r3, [sp, #96]	; 0x60
 801a060:	4ba2      	ldr	r3, [pc, #648]	; (801a2ec <_strtod_l+0x29c>)
 801a062:	9213      	str	r2, [sp, #76]	; 0x4c
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	9305      	str	r3, [sp, #20]
 801a068:	4604      	mov	r4, r0
 801a06a:	4618      	mov	r0, r3
 801a06c:	4688      	mov	r8, r1
 801a06e:	f7fe f9b9 	bl	80183e4 <strlen>
 801a072:	f04f 0a00 	mov.w	sl, #0
 801a076:	4605      	mov	r5, r0
 801a078:	f04f 0b00 	mov.w	fp, #0
 801a07c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a082:	781a      	ldrb	r2, [r3, #0]
 801a084:	2a2b      	cmp	r2, #43	; 0x2b
 801a086:	d04e      	beq.n	801a126 <_strtod_l+0xd6>
 801a088:	d83b      	bhi.n	801a102 <_strtod_l+0xb2>
 801a08a:	2a0d      	cmp	r2, #13
 801a08c:	d834      	bhi.n	801a0f8 <_strtod_l+0xa8>
 801a08e:	2a08      	cmp	r2, #8
 801a090:	d834      	bhi.n	801a0fc <_strtod_l+0xac>
 801a092:	2a00      	cmp	r2, #0
 801a094:	d03e      	beq.n	801a114 <_strtod_l+0xc4>
 801a096:	2300      	movs	r3, #0
 801a098:	930a      	str	r3, [sp, #40]	; 0x28
 801a09a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a09c:	7833      	ldrb	r3, [r6, #0]
 801a09e:	2b30      	cmp	r3, #48	; 0x30
 801a0a0:	f040 80b0 	bne.w	801a204 <_strtod_l+0x1b4>
 801a0a4:	7873      	ldrb	r3, [r6, #1]
 801a0a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a0aa:	2b58      	cmp	r3, #88	; 0x58
 801a0ac:	d168      	bne.n	801a180 <_strtod_l+0x130>
 801a0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0b0:	9301      	str	r3, [sp, #4]
 801a0b2:	ab18      	add	r3, sp, #96	; 0x60
 801a0b4:	9702      	str	r7, [sp, #8]
 801a0b6:	9300      	str	r3, [sp, #0]
 801a0b8:	4a8d      	ldr	r2, [pc, #564]	; (801a2f0 <_strtod_l+0x2a0>)
 801a0ba:	ab19      	add	r3, sp, #100	; 0x64
 801a0bc:	a917      	add	r1, sp, #92	; 0x5c
 801a0be:	4620      	mov	r0, r4
 801a0c0:	f001 fd44 	bl	801bb4c <__gethex>
 801a0c4:	f010 0707 	ands.w	r7, r0, #7
 801a0c8:	4605      	mov	r5, r0
 801a0ca:	d005      	beq.n	801a0d8 <_strtod_l+0x88>
 801a0cc:	2f06      	cmp	r7, #6
 801a0ce:	d12c      	bne.n	801a12a <_strtod_l+0xda>
 801a0d0:	3601      	adds	r6, #1
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	9617      	str	r6, [sp, #92]	; 0x5c
 801a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 801a0d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	f040 8590 	bne.w	801ac00 <_strtod_l+0xbb0>
 801a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a0e2:	b1eb      	cbz	r3, 801a120 <_strtod_l+0xd0>
 801a0e4:	4652      	mov	r2, sl
 801a0e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a0ea:	ec43 2b10 	vmov	d0, r2, r3
 801a0ee:	b01d      	add	sp, #116	; 0x74
 801a0f0:	ecbd 8b02 	vpop	{d8}
 801a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0f8:	2a20      	cmp	r2, #32
 801a0fa:	d1cc      	bne.n	801a096 <_strtod_l+0x46>
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	9317      	str	r3, [sp, #92]	; 0x5c
 801a100:	e7be      	b.n	801a080 <_strtod_l+0x30>
 801a102:	2a2d      	cmp	r2, #45	; 0x2d
 801a104:	d1c7      	bne.n	801a096 <_strtod_l+0x46>
 801a106:	2201      	movs	r2, #1
 801a108:	920a      	str	r2, [sp, #40]	; 0x28
 801a10a:	1c5a      	adds	r2, r3, #1
 801a10c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a10e:	785b      	ldrb	r3, [r3, #1]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d1c2      	bne.n	801a09a <_strtod_l+0x4a>
 801a114:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a116:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f040 856e 	bne.w	801abfc <_strtod_l+0xbac>
 801a120:	4652      	mov	r2, sl
 801a122:	465b      	mov	r3, fp
 801a124:	e7e1      	b.n	801a0ea <_strtod_l+0x9a>
 801a126:	2200      	movs	r2, #0
 801a128:	e7ee      	b.n	801a108 <_strtod_l+0xb8>
 801a12a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a12c:	b13a      	cbz	r2, 801a13e <_strtod_l+0xee>
 801a12e:	2135      	movs	r1, #53	; 0x35
 801a130:	a81a      	add	r0, sp, #104	; 0x68
 801a132:	f002 fcbc 	bl	801caae <__copybits>
 801a136:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a138:	4620      	mov	r0, r4
 801a13a:	f002 f87b 	bl	801c234 <_Bfree>
 801a13e:	3f01      	subs	r7, #1
 801a140:	2f04      	cmp	r7, #4
 801a142:	d806      	bhi.n	801a152 <_strtod_l+0x102>
 801a144:	e8df f007 	tbb	[pc, r7]
 801a148:	1714030a 	.word	0x1714030a
 801a14c:	0a          	.byte	0x0a
 801a14d:	00          	.byte	0x00
 801a14e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a152:	0728      	lsls	r0, r5, #28
 801a154:	d5c0      	bpl.n	801a0d8 <_strtod_l+0x88>
 801a156:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a15a:	e7bd      	b.n	801a0d8 <_strtod_l+0x88>
 801a15c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a160:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a166:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a16a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a16e:	e7f0      	b.n	801a152 <_strtod_l+0x102>
 801a170:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a2f4 <_strtod_l+0x2a4>
 801a174:	e7ed      	b.n	801a152 <_strtod_l+0x102>
 801a176:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a17a:	f04f 3aff 	mov.w	sl, #4294967295
 801a17e:	e7e8      	b.n	801a152 <_strtod_l+0x102>
 801a180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a182:	1c5a      	adds	r2, r3, #1
 801a184:	9217      	str	r2, [sp, #92]	; 0x5c
 801a186:	785b      	ldrb	r3, [r3, #1]
 801a188:	2b30      	cmp	r3, #48	; 0x30
 801a18a:	d0f9      	beq.n	801a180 <_strtod_l+0x130>
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d0a3      	beq.n	801a0d8 <_strtod_l+0x88>
 801a190:	2301      	movs	r3, #1
 801a192:	f04f 0900 	mov.w	r9, #0
 801a196:	9304      	str	r3, [sp, #16]
 801a198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a19a:	9308      	str	r3, [sp, #32]
 801a19c:	f8cd 901c 	str.w	r9, [sp, #28]
 801a1a0:	464f      	mov	r7, r9
 801a1a2:	220a      	movs	r2, #10
 801a1a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a1a6:	7806      	ldrb	r6, [r0, #0]
 801a1a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a1ac:	b2d9      	uxtb	r1, r3
 801a1ae:	2909      	cmp	r1, #9
 801a1b0:	d92a      	bls.n	801a208 <_strtod_l+0x1b8>
 801a1b2:	9905      	ldr	r1, [sp, #20]
 801a1b4:	462a      	mov	r2, r5
 801a1b6:	f002 ff2b 	bl	801d010 <strncmp>
 801a1ba:	b398      	cbz	r0, 801a224 <_strtod_l+0x1d4>
 801a1bc:	2000      	movs	r0, #0
 801a1be:	4632      	mov	r2, r6
 801a1c0:	463d      	mov	r5, r7
 801a1c2:	9005      	str	r0, [sp, #20]
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	2a65      	cmp	r2, #101	; 0x65
 801a1c8:	d001      	beq.n	801a1ce <_strtod_l+0x17e>
 801a1ca:	2a45      	cmp	r2, #69	; 0x45
 801a1cc:	d118      	bne.n	801a200 <_strtod_l+0x1b0>
 801a1ce:	b91d      	cbnz	r5, 801a1d8 <_strtod_l+0x188>
 801a1d0:	9a04      	ldr	r2, [sp, #16]
 801a1d2:	4302      	orrs	r2, r0
 801a1d4:	d09e      	beq.n	801a114 <_strtod_l+0xc4>
 801a1d6:	2500      	movs	r5, #0
 801a1d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a1dc:	f108 0201 	add.w	r2, r8, #1
 801a1e0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a1e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a1e6:	2a2b      	cmp	r2, #43	; 0x2b
 801a1e8:	d075      	beq.n	801a2d6 <_strtod_l+0x286>
 801a1ea:	2a2d      	cmp	r2, #45	; 0x2d
 801a1ec:	d07b      	beq.n	801a2e6 <_strtod_l+0x296>
 801a1ee:	f04f 0c00 	mov.w	ip, #0
 801a1f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a1f6:	2909      	cmp	r1, #9
 801a1f8:	f240 8082 	bls.w	801a300 <_strtod_l+0x2b0>
 801a1fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a200:	2600      	movs	r6, #0
 801a202:	e09d      	b.n	801a340 <_strtod_l+0x2f0>
 801a204:	2300      	movs	r3, #0
 801a206:	e7c4      	b.n	801a192 <_strtod_l+0x142>
 801a208:	2f08      	cmp	r7, #8
 801a20a:	bfd8      	it	le
 801a20c:	9907      	ldrle	r1, [sp, #28]
 801a20e:	f100 0001 	add.w	r0, r0, #1
 801a212:	bfda      	itte	le
 801a214:	fb02 3301 	mlale	r3, r2, r1, r3
 801a218:	9307      	strle	r3, [sp, #28]
 801a21a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a21e:	3701      	adds	r7, #1
 801a220:	9017      	str	r0, [sp, #92]	; 0x5c
 801a222:	e7bf      	b.n	801a1a4 <_strtod_l+0x154>
 801a224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a226:	195a      	adds	r2, r3, r5
 801a228:	9217      	str	r2, [sp, #92]	; 0x5c
 801a22a:	5d5a      	ldrb	r2, [r3, r5]
 801a22c:	2f00      	cmp	r7, #0
 801a22e:	d037      	beq.n	801a2a0 <_strtod_l+0x250>
 801a230:	9005      	str	r0, [sp, #20]
 801a232:	463d      	mov	r5, r7
 801a234:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a238:	2b09      	cmp	r3, #9
 801a23a:	d912      	bls.n	801a262 <_strtod_l+0x212>
 801a23c:	2301      	movs	r3, #1
 801a23e:	e7c2      	b.n	801a1c6 <_strtod_l+0x176>
 801a240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a242:	1c5a      	adds	r2, r3, #1
 801a244:	9217      	str	r2, [sp, #92]	; 0x5c
 801a246:	785a      	ldrb	r2, [r3, #1]
 801a248:	3001      	adds	r0, #1
 801a24a:	2a30      	cmp	r2, #48	; 0x30
 801a24c:	d0f8      	beq.n	801a240 <_strtod_l+0x1f0>
 801a24e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a252:	2b08      	cmp	r3, #8
 801a254:	f200 84d9 	bhi.w	801ac0a <_strtod_l+0xbba>
 801a258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a25a:	9005      	str	r0, [sp, #20]
 801a25c:	2000      	movs	r0, #0
 801a25e:	9308      	str	r3, [sp, #32]
 801a260:	4605      	mov	r5, r0
 801a262:	3a30      	subs	r2, #48	; 0x30
 801a264:	f100 0301 	add.w	r3, r0, #1
 801a268:	d014      	beq.n	801a294 <_strtod_l+0x244>
 801a26a:	9905      	ldr	r1, [sp, #20]
 801a26c:	4419      	add	r1, r3
 801a26e:	9105      	str	r1, [sp, #20]
 801a270:	462b      	mov	r3, r5
 801a272:	eb00 0e05 	add.w	lr, r0, r5
 801a276:	210a      	movs	r1, #10
 801a278:	4573      	cmp	r3, lr
 801a27a:	d113      	bne.n	801a2a4 <_strtod_l+0x254>
 801a27c:	182b      	adds	r3, r5, r0
 801a27e:	2b08      	cmp	r3, #8
 801a280:	f105 0501 	add.w	r5, r5, #1
 801a284:	4405      	add	r5, r0
 801a286:	dc1c      	bgt.n	801a2c2 <_strtod_l+0x272>
 801a288:	9907      	ldr	r1, [sp, #28]
 801a28a:	230a      	movs	r3, #10
 801a28c:	fb03 2301 	mla	r3, r3, r1, r2
 801a290:	9307      	str	r3, [sp, #28]
 801a292:	2300      	movs	r3, #0
 801a294:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a296:	1c51      	adds	r1, r2, #1
 801a298:	9117      	str	r1, [sp, #92]	; 0x5c
 801a29a:	7852      	ldrb	r2, [r2, #1]
 801a29c:	4618      	mov	r0, r3
 801a29e:	e7c9      	b.n	801a234 <_strtod_l+0x1e4>
 801a2a0:	4638      	mov	r0, r7
 801a2a2:	e7d2      	b.n	801a24a <_strtod_l+0x1fa>
 801a2a4:	2b08      	cmp	r3, #8
 801a2a6:	dc04      	bgt.n	801a2b2 <_strtod_l+0x262>
 801a2a8:	9e07      	ldr	r6, [sp, #28]
 801a2aa:	434e      	muls	r6, r1
 801a2ac:	9607      	str	r6, [sp, #28]
 801a2ae:	3301      	adds	r3, #1
 801a2b0:	e7e2      	b.n	801a278 <_strtod_l+0x228>
 801a2b2:	f103 0c01 	add.w	ip, r3, #1
 801a2b6:	f1bc 0f10 	cmp.w	ip, #16
 801a2ba:	bfd8      	it	le
 801a2bc:	fb01 f909 	mulle.w	r9, r1, r9
 801a2c0:	e7f5      	b.n	801a2ae <_strtod_l+0x25e>
 801a2c2:	2d10      	cmp	r5, #16
 801a2c4:	bfdc      	itt	le
 801a2c6:	230a      	movle	r3, #10
 801a2c8:	fb03 2909 	mlale	r9, r3, r9, r2
 801a2cc:	e7e1      	b.n	801a292 <_strtod_l+0x242>
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	9305      	str	r3, [sp, #20]
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	e77c      	b.n	801a1d0 <_strtod_l+0x180>
 801a2d6:	f04f 0c00 	mov.w	ip, #0
 801a2da:	f108 0202 	add.w	r2, r8, #2
 801a2de:	9217      	str	r2, [sp, #92]	; 0x5c
 801a2e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a2e4:	e785      	b.n	801a1f2 <_strtod_l+0x1a2>
 801a2e6:	f04f 0c01 	mov.w	ip, #1
 801a2ea:	e7f6      	b.n	801a2da <_strtod_l+0x28a>
 801a2ec:	08051cb8 	.word	0x08051cb8
 801a2f0:	08051a6c 	.word	0x08051a6c
 801a2f4:	7ff00000 	.word	0x7ff00000
 801a2f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a2fa:	1c51      	adds	r1, r2, #1
 801a2fc:	9117      	str	r1, [sp, #92]	; 0x5c
 801a2fe:	7852      	ldrb	r2, [r2, #1]
 801a300:	2a30      	cmp	r2, #48	; 0x30
 801a302:	d0f9      	beq.n	801a2f8 <_strtod_l+0x2a8>
 801a304:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a308:	2908      	cmp	r1, #8
 801a30a:	f63f af79 	bhi.w	801a200 <_strtod_l+0x1b0>
 801a30e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a312:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a314:	9206      	str	r2, [sp, #24]
 801a316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a318:	1c51      	adds	r1, r2, #1
 801a31a:	9117      	str	r1, [sp, #92]	; 0x5c
 801a31c:	7852      	ldrb	r2, [r2, #1]
 801a31e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a322:	2e09      	cmp	r6, #9
 801a324:	d937      	bls.n	801a396 <_strtod_l+0x346>
 801a326:	9e06      	ldr	r6, [sp, #24]
 801a328:	1b89      	subs	r1, r1, r6
 801a32a:	2908      	cmp	r1, #8
 801a32c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a330:	dc02      	bgt.n	801a338 <_strtod_l+0x2e8>
 801a332:	4576      	cmp	r6, lr
 801a334:	bfa8      	it	ge
 801a336:	4676      	movge	r6, lr
 801a338:	f1bc 0f00 	cmp.w	ip, #0
 801a33c:	d000      	beq.n	801a340 <_strtod_l+0x2f0>
 801a33e:	4276      	negs	r6, r6
 801a340:	2d00      	cmp	r5, #0
 801a342:	d14d      	bne.n	801a3e0 <_strtod_l+0x390>
 801a344:	9904      	ldr	r1, [sp, #16]
 801a346:	4301      	orrs	r1, r0
 801a348:	f47f aec6 	bne.w	801a0d8 <_strtod_l+0x88>
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	f47f aee1 	bne.w	801a114 <_strtod_l+0xc4>
 801a352:	2a69      	cmp	r2, #105	; 0x69
 801a354:	d027      	beq.n	801a3a6 <_strtod_l+0x356>
 801a356:	dc24      	bgt.n	801a3a2 <_strtod_l+0x352>
 801a358:	2a49      	cmp	r2, #73	; 0x49
 801a35a:	d024      	beq.n	801a3a6 <_strtod_l+0x356>
 801a35c:	2a4e      	cmp	r2, #78	; 0x4e
 801a35e:	f47f aed9 	bne.w	801a114 <_strtod_l+0xc4>
 801a362:	499f      	ldr	r1, [pc, #636]	; (801a5e0 <_strtod_l+0x590>)
 801a364:	a817      	add	r0, sp, #92	; 0x5c
 801a366:	f001 fe49 	bl	801bffc <__match>
 801a36a:	2800      	cmp	r0, #0
 801a36c:	f43f aed2 	beq.w	801a114 <_strtod_l+0xc4>
 801a370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a372:	781b      	ldrb	r3, [r3, #0]
 801a374:	2b28      	cmp	r3, #40	; 0x28
 801a376:	d12d      	bne.n	801a3d4 <_strtod_l+0x384>
 801a378:	499a      	ldr	r1, [pc, #616]	; (801a5e4 <_strtod_l+0x594>)
 801a37a:	aa1a      	add	r2, sp, #104	; 0x68
 801a37c:	a817      	add	r0, sp, #92	; 0x5c
 801a37e:	f001 fe51 	bl	801c024 <__hexnan>
 801a382:	2805      	cmp	r0, #5
 801a384:	d126      	bne.n	801a3d4 <_strtod_l+0x384>
 801a386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a388:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a38c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a390:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a394:	e6a0      	b.n	801a0d8 <_strtod_l+0x88>
 801a396:	210a      	movs	r1, #10
 801a398:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a39c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a3a0:	e7b9      	b.n	801a316 <_strtod_l+0x2c6>
 801a3a2:	2a6e      	cmp	r2, #110	; 0x6e
 801a3a4:	e7db      	b.n	801a35e <_strtod_l+0x30e>
 801a3a6:	4990      	ldr	r1, [pc, #576]	; (801a5e8 <_strtod_l+0x598>)
 801a3a8:	a817      	add	r0, sp, #92	; 0x5c
 801a3aa:	f001 fe27 	bl	801bffc <__match>
 801a3ae:	2800      	cmp	r0, #0
 801a3b0:	f43f aeb0 	beq.w	801a114 <_strtod_l+0xc4>
 801a3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a3b6:	498d      	ldr	r1, [pc, #564]	; (801a5ec <_strtod_l+0x59c>)
 801a3b8:	3b01      	subs	r3, #1
 801a3ba:	a817      	add	r0, sp, #92	; 0x5c
 801a3bc:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3be:	f001 fe1d 	bl	801bffc <__match>
 801a3c2:	b910      	cbnz	r0, 801a3ca <_strtod_l+0x37a>
 801a3c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	9317      	str	r3, [sp, #92]	; 0x5c
 801a3ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 801a5fc <_strtod_l+0x5ac>
 801a3ce:	f04f 0a00 	mov.w	sl, #0
 801a3d2:	e681      	b.n	801a0d8 <_strtod_l+0x88>
 801a3d4:	4886      	ldr	r0, [pc, #536]	; (801a5f0 <_strtod_l+0x5a0>)
 801a3d6:	f002 fe03 	bl	801cfe0 <nan>
 801a3da:	ec5b ab10 	vmov	sl, fp, d0
 801a3de:	e67b      	b.n	801a0d8 <_strtod_l+0x88>
 801a3e0:	9b05      	ldr	r3, [sp, #20]
 801a3e2:	9807      	ldr	r0, [sp, #28]
 801a3e4:	1af3      	subs	r3, r6, r3
 801a3e6:	2f00      	cmp	r7, #0
 801a3e8:	bf08      	it	eq
 801a3ea:	462f      	moveq	r7, r5
 801a3ec:	2d10      	cmp	r5, #16
 801a3ee:	9306      	str	r3, [sp, #24]
 801a3f0:	46a8      	mov	r8, r5
 801a3f2:	bfa8      	it	ge
 801a3f4:	f04f 0810 	movge.w	r8, #16
 801a3f8:	f7fe f994 	bl	8018724 <__aeabi_ui2d>
 801a3fc:	2d09      	cmp	r5, #9
 801a3fe:	4682      	mov	sl, r0
 801a400:	468b      	mov	fp, r1
 801a402:	dd13      	ble.n	801a42c <_strtod_l+0x3dc>
 801a404:	4b7b      	ldr	r3, [pc, #492]	; (801a5f4 <_strtod_l+0x5a4>)
 801a406:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a40a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a40e:	f7fe fa03 	bl	8018818 <__aeabi_dmul>
 801a412:	4682      	mov	sl, r0
 801a414:	4648      	mov	r0, r9
 801a416:	468b      	mov	fp, r1
 801a418:	f7fe f984 	bl	8018724 <__aeabi_ui2d>
 801a41c:	4602      	mov	r2, r0
 801a41e:	460b      	mov	r3, r1
 801a420:	4650      	mov	r0, sl
 801a422:	4659      	mov	r1, fp
 801a424:	f7fe f842 	bl	80184ac <__adddf3>
 801a428:	4682      	mov	sl, r0
 801a42a:	468b      	mov	fp, r1
 801a42c:	2d0f      	cmp	r5, #15
 801a42e:	dc38      	bgt.n	801a4a2 <_strtod_l+0x452>
 801a430:	9b06      	ldr	r3, [sp, #24]
 801a432:	2b00      	cmp	r3, #0
 801a434:	f43f ae50 	beq.w	801a0d8 <_strtod_l+0x88>
 801a438:	dd24      	ble.n	801a484 <_strtod_l+0x434>
 801a43a:	2b16      	cmp	r3, #22
 801a43c:	dc0b      	bgt.n	801a456 <_strtod_l+0x406>
 801a43e:	496d      	ldr	r1, [pc, #436]	; (801a5f4 <_strtod_l+0x5a4>)
 801a440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a444:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a448:	4652      	mov	r2, sl
 801a44a:	465b      	mov	r3, fp
 801a44c:	f7fe f9e4 	bl	8018818 <__aeabi_dmul>
 801a450:	4682      	mov	sl, r0
 801a452:	468b      	mov	fp, r1
 801a454:	e640      	b.n	801a0d8 <_strtod_l+0x88>
 801a456:	9a06      	ldr	r2, [sp, #24]
 801a458:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a45c:	4293      	cmp	r3, r2
 801a45e:	db20      	blt.n	801a4a2 <_strtod_l+0x452>
 801a460:	4c64      	ldr	r4, [pc, #400]	; (801a5f4 <_strtod_l+0x5a4>)
 801a462:	f1c5 050f 	rsb	r5, r5, #15
 801a466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a46a:	4652      	mov	r2, sl
 801a46c:	465b      	mov	r3, fp
 801a46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a472:	f7fe f9d1 	bl	8018818 <__aeabi_dmul>
 801a476:	9b06      	ldr	r3, [sp, #24]
 801a478:	1b5d      	subs	r5, r3, r5
 801a47a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a47e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a482:	e7e3      	b.n	801a44c <_strtod_l+0x3fc>
 801a484:	9b06      	ldr	r3, [sp, #24]
 801a486:	3316      	adds	r3, #22
 801a488:	db0b      	blt.n	801a4a2 <_strtod_l+0x452>
 801a48a:	9b05      	ldr	r3, [sp, #20]
 801a48c:	1b9e      	subs	r6, r3, r6
 801a48e:	4b59      	ldr	r3, [pc, #356]	; (801a5f4 <_strtod_l+0x5a4>)
 801a490:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a494:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a498:	4650      	mov	r0, sl
 801a49a:	4659      	mov	r1, fp
 801a49c:	f7fe fae6 	bl	8018a6c <__aeabi_ddiv>
 801a4a0:	e7d6      	b.n	801a450 <_strtod_l+0x400>
 801a4a2:	9b06      	ldr	r3, [sp, #24]
 801a4a4:	eba5 0808 	sub.w	r8, r5, r8
 801a4a8:	4498      	add	r8, r3
 801a4aa:	f1b8 0f00 	cmp.w	r8, #0
 801a4ae:	dd74      	ble.n	801a59a <_strtod_l+0x54a>
 801a4b0:	f018 030f 	ands.w	r3, r8, #15
 801a4b4:	d00a      	beq.n	801a4cc <_strtod_l+0x47c>
 801a4b6:	494f      	ldr	r1, [pc, #316]	; (801a5f4 <_strtod_l+0x5a4>)
 801a4b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a4bc:	4652      	mov	r2, sl
 801a4be:	465b      	mov	r3, fp
 801a4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4c4:	f7fe f9a8 	bl	8018818 <__aeabi_dmul>
 801a4c8:	4682      	mov	sl, r0
 801a4ca:	468b      	mov	fp, r1
 801a4cc:	f038 080f 	bics.w	r8, r8, #15
 801a4d0:	d04f      	beq.n	801a572 <_strtod_l+0x522>
 801a4d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a4d6:	dd22      	ble.n	801a51e <_strtod_l+0x4ce>
 801a4d8:	2500      	movs	r5, #0
 801a4da:	462e      	mov	r6, r5
 801a4dc:	9507      	str	r5, [sp, #28]
 801a4de:	9505      	str	r5, [sp, #20]
 801a4e0:	2322      	movs	r3, #34	; 0x22
 801a4e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a5fc <_strtod_l+0x5ac>
 801a4e6:	6023      	str	r3, [r4, #0]
 801a4e8:	f04f 0a00 	mov.w	sl, #0
 801a4ec:	9b07      	ldr	r3, [sp, #28]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	f43f adf2 	beq.w	801a0d8 <_strtod_l+0x88>
 801a4f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	f001 fe9c 	bl	801c234 <_Bfree>
 801a4fc:	9905      	ldr	r1, [sp, #20]
 801a4fe:	4620      	mov	r0, r4
 801a500:	f001 fe98 	bl	801c234 <_Bfree>
 801a504:	4631      	mov	r1, r6
 801a506:	4620      	mov	r0, r4
 801a508:	f001 fe94 	bl	801c234 <_Bfree>
 801a50c:	9907      	ldr	r1, [sp, #28]
 801a50e:	4620      	mov	r0, r4
 801a510:	f001 fe90 	bl	801c234 <_Bfree>
 801a514:	4629      	mov	r1, r5
 801a516:	4620      	mov	r0, r4
 801a518:	f001 fe8c 	bl	801c234 <_Bfree>
 801a51c:	e5dc      	b.n	801a0d8 <_strtod_l+0x88>
 801a51e:	4b36      	ldr	r3, [pc, #216]	; (801a5f8 <_strtod_l+0x5a8>)
 801a520:	9304      	str	r3, [sp, #16]
 801a522:	2300      	movs	r3, #0
 801a524:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a528:	4650      	mov	r0, sl
 801a52a:	4659      	mov	r1, fp
 801a52c:	4699      	mov	r9, r3
 801a52e:	f1b8 0f01 	cmp.w	r8, #1
 801a532:	dc21      	bgt.n	801a578 <_strtod_l+0x528>
 801a534:	b10b      	cbz	r3, 801a53a <_strtod_l+0x4ea>
 801a536:	4682      	mov	sl, r0
 801a538:	468b      	mov	fp, r1
 801a53a:	4b2f      	ldr	r3, [pc, #188]	; (801a5f8 <_strtod_l+0x5a8>)
 801a53c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a540:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a544:	4652      	mov	r2, sl
 801a546:	465b      	mov	r3, fp
 801a548:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a54c:	f7fe f964 	bl	8018818 <__aeabi_dmul>
 801a550:	4b2a      	ldr	r3, [pc, #168]	; (801a5fc <_strtod_l+0x5ac>)
 801a552:	460a      	mov	r2, r1
 801a554:	400b      	ands	r3, r1
 801a556:	492a      	ldr	r1, [pc, #168]	; (801a600 <_strtod_l+0x5b0>)
 801a558:	428b      	cmp	r3, r1
 801a55a:	4682      	mov	sl, r0
 801a55c:	d8bc      	bhi.n	801a4d8 <_strtod_l+0x488>
 801a55e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a562:	428b      	cmp	r3, r1
 801a564:	bf86      	itte	hi
 801a566:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801a604 <_strtod_l+0x5b4>
 801a56a:	f04f 3aff 	movhi.w	sl, #4294967295
 801a56e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a572:	2300      	movs	r3, #0
 801a574:	9304      	str	r3, [sp, #16]
 801a576:	e084      	b.n	801a682 <_strtod_l+0x632>
 801a578:	f018 0f01 	tst.w	r8, #1
 801a57c:	d005      	beq.n	801a58a <_strtod_l+0x53a>
 801a57e:	9b04      	ldr	r3, [sp, #16]
 801a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a584:	f7fe f948 	bl	8018818 <__aeabi_dmul>
 801a588:	2301      	movs	r3, #1
 801a58a:	9a04      	ldr	r2, [sp, #16]
 801a58c:	3208      	adds	r2, #8
 801a58e:	f109 0901 	add.w	r9, r9, #1
 801a592:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a596:	9204      	str	r2, [sp, #16]
 801a598:	e7c9      	b.n	801a52e <_strtod_l+0x4de>
 801a59a:	d0ea      	beq.n	801a572 <_strtod_l+0x522>
 801a59c:	f1c8 0800 	rsb	r8, r8, #0
 801a5a0:	f018 020f 	ands.w	r2, r8, #15
 801a5a4:	d00a      	beq.n	801a5bc <_strtod_l+0x56c>
 801a5a6:	4b13      	ldr	r3, [pc, #76]	; (801a5f4 <_strtod_l+0x5a4>)
 801a5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a5ac:	4650      	mov	r0, sl
 801a5ae:	4659      	mov	r1, fp
 801a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b4:	f7fe fa5a 	bl	8018a6c <__aeabi_ddiv>
 801a5b8:	4682      	mov	sl, r0
 801a5ba:	468b      	mov	fp, r1
 801a5bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a5c0:	d0d7      	beq.n	801a572 <_strtod_l+0x522>
 801a5c2:	f1b8 0f1f 	cmp.w	r8, #31
 801a5c6:	dd1f      	ble.n	801a608 <_strtod_l+0x5b8>
 801a5c8:	2500      	movs	r5, #0
 801a5ca:	462e      	mov	r6, r5
 801a5cc:	9507      	str	r5, [sp, #28]
 801a5ce:	9505      	str	r5, [sp, #20]
 801a5d0:	2322      	movs	r3, #34	; 0x22
 801a5d2:	f04f 0a00 	mov.w	sl, #0
 801a5d6:	f04f 0b00 	mov.w	fp, #0
 801a5da:	6023      	str	r3, [r4, #0]
 801a5dc:	e786      	b.n	801a4ec <_strtod_l+0x49c>
 801a5de:	bf00      	nop
 801a5e0:	08051a3d 	.word	0x08051a3d
 801a5e4:	08051a80 	.word	0x08051a80
 801a5e8:	08051a35 	.word	0x08051a35
 801a5ec:	08051bc4 	.word	0x08051bc4
 801a5f0:	08051e70 	.word	0x08051e70
 801a5f4:	08051d50 	.word	0x08051d50
 801a5f8:	08051d28 	.word	0x08051d28
 801a5fc:	7ff00000 	.word	0x7ff00000
 801a600:	7ca00000 	.word	0x7ca00000
 801a604:	7fefffff 	.word	0x7fefffff
 801a608:	f018 0310 	ands.w	r3, r8, #16
 801a60c:	bf18      	it	ne
 801a60e:	236a      	movne	r3, #106	; 0x6a
 801a610:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801a9c0 <_strtod_l+0x970>
 801a614:	9304      	str	r3, [sp, #16]
 801a616:	4650      	mov	r0, sl
 801a618:	4659      	mov	r1, fp
 801a61a:	2300      	movs	r3, #0
 801a61c:	f018 0f01 	tst.w	r8, #1
 801a620:	d004      	beq.n	801a62c <_strtod_l+0x5dc>
 801a622:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a626:	f7fe f8f7 	bl	8018818 <__aeabi_dmul>
 801a62a:	2301      	movs	r3, #1
 801a62c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a630:	f109 0908 	add.w	r9, r9, #8
 801a634:	d1f2      	bne.n	801a61c <_strtod_l+0x5cc>
 801a636:	b10b      	cbz	r3, 801a63c <_strtod_l+0x5ec>
 801a638:	4682      	mov	sl, r0
 801a63a:	468b      	mov	fp, r1
 801a63c:	9b04      	ldr	r3, [sp, #16]
 801a63e:	b1c3      	cbz	r3, 801a672 <_strtod_l+0x622>
 801a640:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a644:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a648:	2b00      	cmp	r3, #0
 801a64a:	4659      	mov	r1, fp
 801a64c:	dd11      	ble.n	801a672 <_strtod_l+0x622>
 801a64e:	2b1f      	cmp	r3, #31
 801a650:	f340 8124 	ble.w	801a89c <_strtod_l+0x84c>
 801a654:	2b34      	cmp	r3, #52	; 0x34
 801a656:	bfde      	ittt	le
 801a658:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801a65c:	f04f 33ff 	movle.w	r3, #4294967295
 801a660:	fa03 f202 	lslle.w	r2, r3, r2
 801a664:	f04f 0a00 	mov.w	sl, #0
 801a668:	bfcc      	ite	gt
 801a66a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a66e:	ea02 0b01 	andle.w	fp, r2, r1
 801a672:	2200      	movs	r2, #0
 801a674:	2300      	movs	r3, #0
 801a676:	4650      	mov	r0, sl
 801a678:	4659      	mov	r1, fp
 801a67a:	f7fe fb35 	bl	8018ce8 <__aeabi_dcmpeq>
 801a67e:	2800      	cmp	r0, #0
 801a680:	d1a2      	bne.n	801a5c8 <_strtod_l+0x578>
 801a682:	9b07      	ldr	r3, [sp, #28]
 801a684:	9300      	str	r3, [sp, #0]
 801a686:	9908      	ldr	r1, [sp, #32]
 801a688:	462b      	mov	r3, r5
 801a68a:	463a      	mov	r2, r7
 801a68c:	4620      	mov	r0, r4
 801a68e:	f001 fe39 	bl	801c304 <__s2b>
 801a692:	9007      	str	r0, [sp, #28]
 801a694:	2800      	cmp	r0, #0
 801a696:	f43f af1f 	beq.w	801a4d8 <_strtod_l+0x488>
 801a69a:	9b05      	ldr	r3, [sp, #20]
 801a69c:	1b9e      	subs	r6, r3, r6
 801a69e:	9b06      	ldr	r3, [sp, #24]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	bfb4      	ite	lt
 801a6a4:	4633      	movlt	r3, r6
 801a6a6:	2300      	movge	r3, #0
 801a6a8:	930c      	str	r3, [sp, #48]	; 0x30
 801a6aa:	9b06      	ldr	r3, [sp, #24]
 801a6ac:	2500      	movs	r5, #0
 801a6ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6b2:	9312      	str	r3, [sp, #72]	; 0x48
 801a6b4:	462e      	mov	r6, r5
 801a6b6:	9b07      	ldr	r3, [sp, #28]
 801a6b8:	4620      	mov	r0, r4
 801a6ba:	6859      	ldr	r1, [r3, #4]
 801a6bc:	f001 fd7a 	bl	801c1b4 <_Balloc>
 801a6c0:	9005      	str	r0, [sp, #20]
 801a6c2:	2800      	cmp	r0, #0
 801a6c4:	f43f af0c 	beq.w	801a4e0 <_strtod_l+0x490>
 801a6c8:	9b07      	ldr	r3, [sp, #28]
 801a6ca:	691a      	ldr	r2, [r3, #16]
 801a6cc:	3202      	adds	r2, #2
 801a6ce:	f103 010c 	add.w	r1, r3, #12
 801a6d2:	0092      	lsls	r2, r2, #2
 801a6d4:	300c      	adds	r0, #12
 801a6d6:	f001 fd5f 	bl	801c198 <memcpy>
 801a6da:	ec4b ab10 	vmov	d0, sl, fp
 801a6de:	aa1a      	add	r2, sp, #104	; 0x68
 801a6e0:	a919      	add	r1, sp, #100	; 0x64
 801a6e2:	4620      	mov	r0, r4
 801a6e4:	f002 f954 	bl	801c990 <__d2b>
 801a6e8:	ec4b ab18 	vmov	d8, sl, fp
 801a6ec:	9018      	str	r0, [sp, #96]	; 0x60
 801a6ee:	2800      	cmp	r0, #0
 801a6f0:	f43f aef6 	beq.w	801a4e0 <_strtod_l+0x490>
 801a6f4:	2101      	movs	r1, #1
 801a6f6:	4620      	mov	r0, r4
 801a6f8:	f001 fe9e 	bl	801c438 <__i2b>
 801a6fc:	4606      	mov	r6, r0
 801a6fe:	2800      	cmp	r0, #0
 801a700:	f43f aeee 	beq.w	801a4e0 <_strtod_l+0x490>
 801a704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a706:	9904      	ldr	r1, [sp, #16]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	bfab      	itete	ge
 801a70c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801a70e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801a710:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801a712:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801a716:	bfac      	ite	ge
 801a718:	eb03 0902 	addge.w	r9, r3, r2
 801a71c:	1ad7      	sublt	r7, r2, r3
 801a71e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a720:	eba3 0801 	sub.w	r8, r3, r1
 801a724:	4490      	add	r8, r2
 801a726:	4ba1      	ldr	r3, [pc, #644]	; (801a9ac <_strtod_l+0x95c>)
 801a728:	f108 38ff 	add.w	r8, r8, #4294967295
 801a72c:	4598      	cmp	r8, r3
 801a72e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a732:	f280 80c7 	bge.w	801a8c4 <_strtod_l+0x874>
 801a736:	eba3 0308 	sub.w	r3, r3, r8
 801a73a:	2b1f      	cmp	r3, #31
 801a73c:	eba2 0203 	sub.w	r2, r2, r3
 801a740:	f04f 0101 	mov.w	r1, #1
 801a744:	f300 80b1 	bgt.w	801a8aa <_strtod_l+0x85a>
 801a748:	fa01 f303 	lsl.w	r3, r1, r3
 801a74c:	930d      	str	r3, [sp, #52]	; 0x34
 801a74e:	2300      	movs	r3, #0
 801a750:	9308      	str	r3, [sp, #32]
 801a752:	eb09 0802 	add.w	r8, r9, r2
 801a756:	9b04      	ldr	r3, [sp, #16]
 801a758:	45c1      	cmp	r9, r8
 801a75a:	4417      	add	r7, r2
 801a75c:	441f      	add	r7, r3
 801a75e:	464b      	mov	r3, r9
 801a760:	bfa8      	it	ge
 801a762:	4643      	movge	r3, r8
 801a764:	42bb      	cmp	r3, r7
 801a766:	bfa8      	it	ge
 801a768:	463b      	movge	r3, r7
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	bfc2      	ittt	gt
 801a76e:	eba8 0803 	subgt.w	r8, r8, r3
 801a772:	1aff      	subgt	r7, r7, r3
 801a774:	eba9 0903 	subgt.w	r9, r9, r3
 801a778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	dd17      	ble.n	801a7ae <_strtod_l+0x75e>
 801a77e:	4631      	mov	r1, r6
 801a780:	461a      	mov	r2, r3
 801a782:	4620      	mov	r0, r4
 801a784:	f001 ff18 	bl	801c5b8 <__pow5mult>
 801a788:	4606      	mov	r6, r0
 801a78a:	2800      	cmp	r0, #0
 801a78c:	f43f aea8 	beq.w	801a4e0 <_strtod_l+0x490>
 801a790:	4601      	mov	r1, r0
 801a792:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a794:	4620      	mov	r0, r4
 801a796:	f001 fe65 	bl	801c464 <__multiply>
 801a79a:	900b      	str	r0, [sp, #44]	; 0x2c
 801a79c:	2800      	cmp	r0, #0
 801a79e:	f43f ae9f 	beq.w	801a4e0 <_strtod_l+0x490>
 801a7a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a7a4:	4620      	mov	r0, r4
 801a7a6:	f001 fd45 	bl	801c234 <_Bfree>
 801a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7ac:	9318      	str	r3, [sp, #96]	; 0x60
 801a7ae:	f1b8 0f00 	cmp.w	r8, #0
 801a7b2:	f300 808c 	bgt.w	801a8ce <_strtod_l+0x87e>
 801a7b6:	9b06      	ldr	r3, [sp, #24]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	dd08      	ble.n	801a7ce <_strtod_l+0x77e>
 801a7bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a7be:	9905      	ldr	r1, [sp, #20]
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	f001 fef9 	bl	801c5b8 <__pow5mult>
 801a7c6:	9005      	str	r0, [sp, #20]
 801a7c8:	2800      	cmp	r0, #0
 801a7ca:	f43f ae89 	beq.w	801a4e0 <_strtod_l+0x490>
 801a7ce:	2f00      	cmp	r7, #0
 801a7d0:	dd08      	ble.n	801a7e4 <_strtod_l+0x794>
 801a7d2:	9905      	ldr	r1, [sp, #20]
 801a7d4:	463a      	mov	r2, r7
 801a7d6:	4620      	mov	r0, r4
 801a7d8:	f001 ff48 	bl	801c66c <__lshift>
 801a7dc:	9005      	str	r0, [sp, #20]
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	f43f ae7e 	beq.w	801a4e0 <_strtod_l+0x490>
 801a7e4:	f1b9 0f00 	cmp.w	r9, #0
 801a7e8:	dd08      	ble.n	801a7fc <_strtod_l+0x7ac>
 801a7ea:	4631      	mov	r1, r6
 801a7ec:	464a      	mov	r2, r9
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f001 ff3c 	bl	801c66c <__lshift>
 801a7f4:	4606      	mov	r6, r0
 801a7f6:	2800      	cmp	r0, #0
 801a7f8:	f43f ae72 	beq.w	801a4e0 <_strtod_l+0x490>
 801a7fc:	9a05      	ldr	r2, [sp, #20]
 801a7fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a800:	4620      	mov	r0, r4
 801a802:	f001 ffbf 	bl	801c784 <__mdiff>
 801a806:	4605      	mov	r5, r0
 801a808:	2800      	cmp	r0, #0
 801a80a:	f43f ae69 	beq.w	801a4e0 <_strtod_l+0x490>
 801a80e:	68c3      	ldr	r3, [r0, #12]
 801a810:	930b      	str	r3, [sp, #44]	; 0x2c
 801a812:	2300      	movs	r3, #0
 801a814:	60c3      	str	r3, [r0, #12]
 801a816:	4631      	mov	r1, r6
 801a818:	f001 ff98 	bl	801c74c <__mcmp>
 801a81c:	2800      	cmp	r0, #0
 801a81e:	da60      	bge.n	801a8e2 <_strtod_l+0x892>
 801a820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a822:	ea53 030a 	orrs.w	r3, r3, sl
 801a826:	f040 8082 	bne.w	801a92e <_strtod_l+0x8de>
 801a82a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d17d      	bne.n	801a92e <_strtod_l+0x8de>
 801a832:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a836:	0d1b      	lsrs	r3, r3, #20
 801a838:	051b      	lsls	r3, r3, #20
 801a83a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a83e:	d976      	bls.n	801a92e <_strtod_l+0x8de>
 801a840:	696b      	ldr	r3, [r5, #20]
 801a842:	b913      	cbnz	r3, 801a84a <_strtod_l+0x7fa>
 801a844:	692b      	ldr	r3, [r5, #16]
 801a846:	2b01      	cmp	r3, #1
 801a848:	dd71      	ble.n	801a92e <_strtod_l+0x8de>
 801a84a:	4629      	mov	r1, r5
 801a84c:	2201      	movs	r2, #1
 801a84e:	4620      	mov	r0, r4
 801a850:	f001 ff0c 	bl	801c66c <__lshift>
 801a854:	4631      	mov	r1, r6
 801a856:	4605      	mov	r5, r0
 801a858:	f001 ff78 	bl	801c74c <__mcmp>
 801a85c:	2800      	cmp	r0, #0
 801a85e:	dd66      	ble.n	801a92e <_strtod_l+0x8de>
 801a860:	9904      	ldr	r1, [sp, #16]
 801a862:	4a53      	ldr	r2, [pc, #332]	; (801a9b0 <_strtod_l+0x960>)
 801a864:	465b      	mov	r3, fp
 801a866:	2900      	cmp	r1, #0
 801a868:	f000 8081 	beq.w	801a96e <_strtod_l+0x91e>
 801a86c:	ea02 010b 	and.w	r1, r2, fp
 801a870:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a874:	dc7b      	bgt.n	801a96e <_strtod_l+0x91e>
 801a876:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a87a:	f77f aea9 	ble.w	801a5d0 <_strtod_l+0x580>
 801a87e:	4b4d      	ldr	r3, [pc, #308]	; (801a9b4 <_strtod_l+0x964>)
 801a880:	4650      	mov	r0, sl
 801a882:	4659      	mov	r1, fp
 801a884:	2200      	movs	r2, #0
 801a886:	f7fd ffc7 	bl	8018818 <__aeabi_dmul>
 801a88a:	460b      	mov	r3, r1
 801a88c:	4303      	orrs	r3, r0
 801a88e:	bf08      	it	eq
 801a890:	2322      	moveq	r3, #34	; 0x22
 801a892:	4682      	mov	sl, r0
 801a894:	468b      	mov	fp, r1
 801a896:	bf08      	it	eq
 801a898:	6023      	streq	r3, [r4, #0]
 801a89a:	e62b      	b.n	801a4f4 <_strtod_l+0x4a4>
 801a89c:	f04f 32ff 	mov.w	r2, #4294967295
 801a8a0:	fa02 f303 	lsl.w	r3, r2, r3
 801a8a4:	ea03 0a0a 	and.w	sl, r3, sl
 801a8a8:	e6e3      	b.n	801a672 <_strtod_l+0x622>
 801a8aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a8ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a8b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a8b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a8ba:	fa01 f308 	lsl.w	r3, r1, r8
 801a8be:	9308      	str	r3, [sp, #32]
 801a8c0:	910d      	str	r1, [sp, #52]	; 0x34
 801a8c2:	e746      	b.n	801a752 <_strtod_l+0x702>
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	9308      	str	r3, [sp, #32]
 801a8c8:	2301      	movs	r3, #1
 801a8ca:	930d      	str	r3, [sp, #52]	; 0x34
 801a8cc:	e741      	b.n	801a752 <_strtod_l+0x702>
 801a8ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a8d0:	4642      	mov	r2, r8
 801a8d2:	4620      	mov	r0, r4
 801a8d4:	f001 feca 	bl	801c66c <__lshift>
 801a8d8:	9018      	str	r0, [sp, #96]	; 0x60
 801a8da:	2800      	cmp	r0, #0
 801a8dc:	f47f af6b 	bne.w	801a7b6 <_strtod_l+0x766>
 801a8e0:	e5fe      	b.n	801a4e0 <_strtod_l+0x490>
 801a8e2:	465f      	mov	r7, fp
 801a8e4:	d16e      	bne.n	801a9c4 <_strtod_l+0x974>
 801a8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a8e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a8ec:	b342      	cbz	r2, 801a940 <_strtod_l+0x8f0>
 801a8ee:	4a32      	ldr	r2, [pc, #200]	; (801a9b8 <_strtod_l+0x968>)
 801a8f0:	4293      	cmp	r3, r2
 801a8f2:	d128      	bne.n	801a946 <_strtod_l+0x8f6>
 801a8f4:	9b04      	ldr	r3, [sp, #16]
 801a8f6:	4651      	mov	r1, sl
 801a8f8:	b1eb      	cbz	r3, 801a936 <_strtod_l+0x8e6>
 801a8fa:	4b2d      	ldr	r3, [pc, #180]	; (801a9b0 <_strtod_l+0x960>)
 801a8fc:	403b      	ands	r3, r7
 801a8fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a902:	f04f 32ff 	mov.w	r2, #4294967295
 801a906:	d819      	bhi.n	801a93c <_strtod_l+0x8ec>
 801a908:	0d1b      	lsrs	r3, r3, #20
 801a90a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a90e:	fa02 f303 	lsl.w	r3, r2, r3
 801a912:	4299      	cmp	r1, r3
 801a914:	d117      	bne.n	801a946 <_strtod_l+0x8f6>
 801a916:	4b29      	ldr	r3, [pc, #164]	; (801a9bc <_strtod_l+0x96c>)
 801a918:	429f      	cmp	r7, r3
 801a91a:	d102      	bne.n	801a922 <_strtod_l+0x8d2>
 801a91c:	3101      	adds	r1, #1
 801a91e:	f43f addf 	beq.w	801a4e0 <_strtod_l+0x490>
 801a922:	4b23      	ldr	r3, [pc, #140]	; (801a9b0 <_strtod_l+0x960>)
 801a924:	403b      	ands	r3, r7
 801a926:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a92a:	f04f 0a00 	mov.w	sl, #0
 801a92e:	9b04      	ldr	r3, [sp, #16]
 801a930:	2b00      	cmp	r3, #0
 801a932:	d1a4      	bne.n	801a87e <_strtod_l+0x82e>
 801a934:	e5de      	b.n	801a4f4 <_strtod_l+0x4a4>
 801a936:	f04f 33ff 	mov.w	r3, #4294967295
 801a93a:	e7ea      	b.n	801a912 <_strtod_l+0x8c2>
 801a93c:	4613      	mov	r3, r2
 801a93e:	e7e8      	b.n	801a912 <_strtod_l+0x8c2>
 801a940:	ea53 030a 	orrs.w	r3, r3, sl
 801a944:	d08c      	beq.n	801a860 <_strtod_l+0x810>
 801a946:	9b08      	ldr	r3, [sp, #32]
 801a948:	b1db      	cbz	r3, 801a982 <_strtod_l+0x932>
 801a94a:	423b      	tst	r3, r7
 801a94c:	d0ef      	beq.n	801a92e <_strtod_l+0x8de>
 801a94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a950:	9a04      	ldr	r2, [sp, #16]
 801a952:	4650      	mov	r0, sl
 801a954:	4659      	mov	r1, fp
 801a956:	b1c3      	cbz	r3, 801a98a <_strtod_l+0x93a>
 801a958:	f7ff fb5e 	bl	801a018 <sulp>
 801a95c:	4602      	mov	r2, r0
 801a95e:	460b      	mov	r3, r1
 801a960:	ec51 0b18 	vmov	r0, r1, d8
 801a964:	f7fd fda2 	bl	80184ac <__adddf3>
 801a968:	4682      	mov	sl, r0
 801a96a:	468b      	mov	fp, r1
 801a96c:	e7df      	b.n	801a92e <_strtod_l+0x8de>
 801a96e:	4013      	ands	r3, r2
 801a970:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a974:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a978:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a97c:	f04f 3aff 	mov.w	sl, #4294967295
 801a980:	e7d5      	b.n	801a92e <_strtod_l+0x8de>
 801a982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a984:	ea13 0f0a 	tst.w	r3, sl
 801a988:	e7e0      	b.n	801a94c <_strtod_l+0x8fc>
 801a98a:	f7ff fb45 	bl	801a018 <sulp>
 801a98e:	4602      	mov	r2, r0
 801a990:	460b      	mov	r3, r1
 801a992:	ec51 0b18 	vmov	r0, r1, d8
 801a996:	f7fd fd87 	bl	80184a8 <__aeabi_dsub>
 801a99a:	2200      	movs	r2, #0
 801a99c:	2300      	movs	r3, #0
 801a99e:	4682      	mov	sl, r0
 801a9a0:	468b      	mov	fp, r1
 801a9a2:	f7fe f9a1 	bl	8018ce8 <__aeabi_dcmpeq>
 801a9a6:	2800      	cmp	r0, #0
 801a9a8:	d0c1      	beq.n	801a92e <_strtod_l+0x8de>
 801a9aa:	e611      	b.n	801a5d0 <_strtod_l+0x580>
 801a9ac:	fffffc02 	.word	0xfffffc02
 801a9b0:	7ff00000 	.word	0x7ff00000
 801a9b4:	39500000 	.word	0x39500000
 801a9b8:	000fffff 	.word	0x000fffff
 801a9bc:	7fefffff 	.word	0x7fefffff
 801a9c0:	08051a98 	.word	0x08051a98
 801a9c4:	4631      	mov	r1, r6
 801a9c6:	4628      	mov	r0, r5
 801a9c8:	f002 f83e 	bl	801ca48 <__ratio>
 801a9cc:	ec59 8b10 	vmov	r8, r9, d0
 801a9d0:	ee10 0a10 	vmov	r0, s0
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a9da:	4649      	mov	r1, r9
 801a9dc:	f7fe f998 	bl	8018d10 <__aeabi_dcmple>
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	d07a      	beq.n	801aada <_strtod_l+0xa8a>
 801a9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d04a      	beq.n	801aa80 <_strtod_l+0xa30>
 801a9ea:	4b95      	ldr	r3, [pc, #596]	; (801ac40 <_strtod_l+0xbf0>)
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a9f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ac40 <_strtod_l+0xbf0>
 801a9f6:	f04f 0800 	mov.w	r8, #0
 801a9fa:	4b92      	ldr	r3, [pc, #584]	; (801ac44 <_strtod_l+0xbf4>)
 801a9fc:	403b      	ands	r3, r7
 801a9fe:	930d      	str	r3, [sp, #52]	; 0x34
 801aa00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa02:	4b91      	ldr	r3, [pc, #580]	; (801ac48 <_strtod_l+0xbf8>)
 801aa04:	429a      	cmp	r2, r3
 801aa06:	f040 80b0 	bne.w	801ab6a <_strtod_l+0xb1a>
 801aa0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aa0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801aa12:	ec4b ab10 	vmov	d0, sl, fp
 801aa16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aa1a:	f001 ff3d 	bl	801c898 <__ulp>
 801aa1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aa22:	ec53 2b10 	vmov	r2, r3, d0
 801aa26:	f7fd fef7 	bl	8018818 <__aeabi_dmul>
 801aa2a:	4652      	mov	r2, sl
 801aa2c:	465b      	mov	r3, fp
 801aa2e:	f7fd fd3d 	bl	80184ac <__adddf3>
 801aa32:	460b      	mov	r3, r1
 801aa34:	4983      	ldr	r1, [pc, #524]	; (801ac44 <_strtod_l+0xbf4>)
 801aa36:	4a85      	ldr	r2, [pc, #532]	; (801ac4c <_strtod_l+0xbfc>)
 801aa38:	4019      	ands	r1, r3
 801aa3a:	4291      	cmp	r1, r2
 801aa3c:	4682      	mov	sl, r0
 801aa3e:	d960      	bls.n	801ab02 <_strtod_l+0xab2>
 801aa40:	ee18 3a90 	vmov	r3, s17
 801aa44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801aa48:	4293      	cmp	r3, r2
 801aa4a:	d104      	bne.n	801aa56 <_strtod_l+0xa06>
 801aa4c:	ee18 3a10 	vmov	r3, s16
 801aa50:	3301      	adds	r3, #1
 801aa52:	f43f ad45 	beq.w	801a4e0 <_strtod_l+0x490>
 801aa56:	f8df b200 	ldr.w	fp, [pc, #512]	; 801ac58 <_strtod_l+0xc08>
 801aa5a:	f04f 3aff 	mov.w	sl, #4294967295
 801aa5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aa60:	4620      	mov	r0, r4
 801aa62:	f001 fbe7 	bl	801c234 <_Bfree>
 801aa66:	9905      	ldr	r1, [sp, #20]
 801aa68:	4620      	mov	r0, r4
 801aa6a:	f001 fbe3 	bl	801c234 <_Bfree>
 801aa6e:	4631      	mov	r1, r6
 801aa70:	4620      	mov	r0, r4
 801aa72:	f001 fbdf 	bl	801c234 <_Bfree>
 801aa76:	4629      	mov	r1, r5
 801aa78:	4620      	mov	r0, r4
 801aa7a:	f001 fbdb 	bl	801c234 <_Bfree>
 801aa7e:	e61a      	b.n	801a6b6 <_strtod_l+0x666>
 801aa80:	f1ba 0f00 	cmp.w	sl, #0
 801aa84:	d11b      	bne.n	801aabe <_strtod_l+0xa6e>
 801aa86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aa8a:	b9f3      	cbnz	r3, 801aaca <_strtod_l+0xa7a>
 801aa8c:	4b6c      	ldr	r3, [pc, #432]	; (801ac40 <_strtod_l+0xbf0>)
 801aa8e:	2200      	movs	r2, #0
 801aa90:	4640      	mov	r0, r8
 801aa92:	4649      	mov	r1, r9
 801aa94:	f7fe f932 	bl	8018cfc <__aeabi_dcmplt>
 801aa98:	b9d0      	cbnz	r0, 801aad0 <_strtod_l+0xa80>
 801aa9a:	4640      	mov	r0, r8
 801aa9c:	4649      	mov	r1, r9
 801aa9e:	4b6c      	ldr	r3, [pc, #432]	; (801ac50 <_strtod_l+0xc00>)
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	f7fd feb9 	bl	8018818 <__aeabi_dmul>
 801aaa6:	4680      	mov	r8, r0
 801aaa8:	4689      	mov	r9, r1
 801aaaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801aaae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801aab2:	9315      	str	r3, [sp, #84]	; 0x54
 801aab4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801aab8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aabc:	e79d      	b.n	801a9fa <_strtod_l+0x9aa>
 801aabe:	f1ba 0f01 	cmp.w	sl, #1
 801aac2:	d102      	bne.n	801aaca <_strtod_l+0xa7a>
 801aac4:	2f00      	cmp	r7, #0
 801aac6:	f43f ad83 	beq.w	801a5d0 <_strtod_l+0x580>
 801aaca:	4b62      	ldr	r3, [pc, #392]	; (801ac54 <_strtod_l+0xc04>)
 801aacc:	2200      	movs	r2, #0
 801aace:	e78e      	b.n	801a9ee <_strtod_l+0x99e>
 801aad0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801ac50 <_strtod_l+0xc00>
 801aad4:	f04f 0800 	mov.w	r8, #0
 801aad8:	e7e7      	b.n	801aaaa <_strtod_l+0xa5a>
 801aada:	4b5d      	ldr	r3, [pc, #372]	; (801ac50 <_strtod_l+0xc00>)
 801aadc:	4640      	mov	r0, r8
 801aade:	4649      	mov	r1, r9
 801aae0:	2200      	movs	r2, #0
 801aae2:	f7fd fe99 	bl	8018818 <__aeabi_dmul>
 801aae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aae8:	4680      	mov	r8, r0
 801aaea:	4689      	mov	r9, r1
 801aaec:	b933      	cbnz	r3, 801aafc <_strtod_l+0xaac>
 801aaee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aaf2:	900e      	str	r0, [sp, #56]	; 0x38
 801aaf4:	930f      	str	r3, [sp, #60]	; 0x3c
 801aaf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801aafa:	e7dd      	b.n	801aab8 <_strtod_l+0xa68>
 801aafc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801ab00:	e7f9      	b.n	801aaf6 <_strtod_l+0xaa6>
 801ab02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ab06:	9b04      	ldr	r3, [sp, #16]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d1a8      	bne.n	801aa5e <_strtod_l+0xa0e>
 801ab0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ab10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab12:	0d1b      	lsrs	r3, r3, #20
 801ab14:	051b      	lsls	r3, r3, #20
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d1a1      	bne.n	801aa5e <_strtod_l+0xa0e>
 801ab1a:	4640      	mov	r0, r8
 801ab1c:	4649      	mov	r1, r9
 801ab1e:	f7fe f9c3 	bl	8018ea8 <__aeabi_d2lz>
 801ab22:	f7fd fe4b 	bl	80187bc <__aeabi_l2d>
 801ab26:	4602      	mov	r2, r0
 801ab28:	460b      	mov	r3, r1
 801ab2a:	4640      	mov	r0, r8
 801ab2c:	4649      	mov	r1, r9
 801ab2e:	f7fd fcbb 	bl	80184a8 <__aeabi_dsub>
 801ab32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab38:	ea43 030a 	orr.w	r3, r3, sl
 801ab3c:	4313      	orrs	r3, r2
 801ab3e:	4680      	mov	r8, r0
 801ab40:	4689      	mov	r9, r1
 801ab42:	d055      	beq.n	801abf0 <_strtod_l+0xba0>
 801ab44:	a336      	add	r3, pc, #216	; (adr r3, 801ac20 <_strtod_l+0xbd0>)
 801ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4a:	f7fe f8d7 	bl	8018cfc <__aeabi_dcmplt>
 801ab4e:	2800      	cmp	r0, #0
 801ab50:	f47f acd0 	bne.w	801a4f4 <_strtod_l+0x4a4>
 801ab54:	a334      	add	r3, pc, #208	; (adr r3, 801ac28 <_strtod_l+0xbd8>)
 801ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab5a:	4640      	mov	r0, r8
 801ab5c:	4649      	mov	r1, r9
 801ab5e:	f7fe f8eb 	bl	8018d38 <__aeabi_dcmpgt>
 801ab62:	2800      	cmp	r0, #0
 801ab64:	f43f af7b 	beq.w	801aa5e <_strtod_l+0xa0e>
 801ab68:	e4c4      	b.n	801a4f4 <_strtod_l+0x4a4>
 801ab6a:	9b04      	ldr	r3, [sp, #16]
 801ab6c:	b333      	cbz	r3, 801abbc <_strtod_l+0xb6c>
 801ab6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ab74:	d822      	bhi.n	801abbc <_strtod_l+0xb6c>
 801ab76:	a32e      	add	r3, pc, #184	; (adr r3, 801ac30 <_strtod_l+0xbe0>)
 801ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab7c:	4640      	mov	r0, r8
 801ab7e:	4649      	mov	r1, r9
 801ab80:	f7fe f8c6 	bl	8018d10 <__aeabi_dcmple>
 801ab84:	b1a0      	cbz	r0, 801abb0 <_strtod_l+0xb60>
 801ab86:	4649      	mov	r1, r9
 801ab88:	4640      	mov	r0, r8
 801ab8a:	f7fe f91d 	bl	8018dc8 <__aeabi_d2uiz>
 801ab8e:	2801      	cmp	r0, #1
 801ab90:	bf38      	it	cc
 801ab92:	2001      	movcc	r0, #1
 801ab94:	f7fd fdc6 	bl	8018724 <__aeabi_ui2d>
 801ab98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab9a:	4680      	mov	r8, r0
 801ab9c:	4689      	mov	r9, r1
 801ab9e:	bb23      	cbnz	r3, 801abea <_strtod_l+0xb9a>
 801aba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aba4:	9010      	str	r0, [sp, #64]	; 0x40
 801aba6:	9311      	str	r3, [sp, #68]	; 0x44
 801aba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801abac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801abb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801abb8:	1a9b      	subs	r3, r3, r2
 801abba:	9309      	str	r3, [sp, #36]	; 0x24
 801abbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801abc0:	eeb0 0a48 	vmov.f32	s0, s16
 801abc4:	eef0 0a68 	vmov.f32	s1, s17
 801abc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801abcc:	f001 fe64 	bl	801c898 <__ulp>
 801abd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801abd4:	ec53 2b10 	vmov	r2, r3, d0
 801abd8:	f7fd fe1e 	bl	8018818 <__aeabi_dmul>
 801abdc:	ec53 2b18 	vmov	r2, r3, d8
 801abe0:	f7fd fc64 	bl	80184ac <__adddf3>
 801abe4:	4682      	mov	sl, r0
 801abe6:	468b      	mov	fp, r1
 801abe8:	e78d      	b.n	801ab06 <_strtod_l+0xab6>
 801abea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801abee:	e7db      	b.n	801aba8 <_strtod_l+0xb58>
 801abf0:	a311      	add	r3, pc, #68	; (adr r3, 801ac38 <_strtod_l+0xbe8>)
 801abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf6:	f7fe f881 	bl	8018cfc <__aeabi_dcmplt>
 801abfa:	e7b2      	b.n	801ab62 <_strtod_l+0xb12>
 801abfc:	2300      	movs	r3, #0
 801abfe:	930a      	str	r3, [sp, #40]	; 0x28
 801ac00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ac04:	6013      	str	r3, [r2, #0]
 801ac06:	f7ff ba6b 	b.w	801a0e0 <_strtod_l+0x90>
 801ac0a:	2a65      	cmp	r2, #101	; 0x65
 801ac0c:	f43f ab5f 	beq.w	801a2ce <_strtod_l+0x27e>
 801ac10:	2a45      	cmp	r2, #69	; 0x45
 801ac12:	f43f ab5c 	beq.w	801a2ce <_strtod_l+0x27e>
 801ac16:	2301      	movs	r3, #1
 801ac18:	f7ff bb94 	b.w	801a344 <_strtod_l+0x2f4>
 801ac1c:	f3af 8000 	nop.w
 801ac20:	94a03595 	.word	0x94a03595
 801ac24:	3fdfffff 	.word	0x3fdfffff
 801ac28:	35afe535 	.word	0x35afe535
 801ac2c:	3fe00000 	.word	0x3fe00000
 801ac30:	ffc00000 	.word	0xffc00000
 801ac34:	41dfffff 	.word	0x41dfffff
 801ac38:	94a03595 	.word	0x94a03595
 801ac3c:	3fcfffff 	.word	0x3fcfffff
 801ac40:	3ff00000 	.word	0x3ff00000
 801ac44:	7ff00000 	.word	0x7ff00000
 801ac48:	7fe00000 	.word	0x7fe00000
 801ac4c:	7c9fffff 	.word	0x7c9fffff
 801ac50:	3fe00000 	.word	0x3fe00000
 801ac54:	bff00000 	.word	0xbff00000
 801ac58:	7fefffff 	.word	0x7fefffff

0801ac5c <_strtod_r>:
 801ac5c:	4b01      	ldr	r3, [pc, #4]	; (801ac64 <_strtod_r+0x8>)
 801ac5e:	f7ff b9f7 	b.w	801a050 <_strtod_l>
 801ac62:	bf00      	nop
 801ac64:	200000cc 	.word	0x200000cc

0801ac68 <_strtol_l.constprop.0>:
 801ac68:	2b01      	cmp	r3, #1
 801ac6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac6e:	d001      	beq.n	801ac74 <_strtol_l.constprop.0+0xc>
 801ac70:	2b24      	cmp	r3, #36	; 0x24
 801ac72:	d906      	bls.n	801ac82 <_strtol_l.constprop.0+0x1a>
 801ac74:	f7fe fafe 	bl	8019274 <__errno>
 801ac78:	2316      	movs	r3, #22
 801ac7a:	6003      	str	r3, [r0, #0]
 801ac7c:	2000      	movs	r0, #0
 801ac7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ad68 <_strtol_l.constprop.0+0x100>
 801ac86:	460d      	mov	r5, r1
 801ac88:	462e      	mov	r6, r5
 801ac8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ac8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801ac92:	f017 0708 	ands.w	r7, r7, #8
 801ac96:	d1f7      	bne.n	801ac88 <_strtol_l.constprop.0+0x20>
 801ac98:	2c2d      	cmp	r4, #45	; 0x2d
 801ac9a:	d132      	bne.n	801ad02 <_strtol_l.constprop.0+0x9a>
 801ac9c:	782c      	ldrb	r4, [r5, #0]
 801ac9e:	2701      	movs	r7, #1
 801aca0:	1cb5      	adds	r5, r6, #2
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d05b      	beq.n	801ad5e <_strtol_l.constprop.0+0xf6>
 801aca6:	2b10      	cmp	r3, #16
 801aca8:	d109      	bne.n	801acbe <_strtol_l.constprop.0+0x56>
 801acaa:	2c30      	cmp	r4, #48	; 0x30
 801acac:	d107      	bne.n	801acbe <_strtol_l.constprop.0+0x56>
 801acae:	782c      	ldrb	r4, [r5, #0]
 801acb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801acb4:	2c58      	cmp	r4, #88	; 0x58
 801acb6:	d14d      	bne.n	801ad54 <_strtol_l.constprop.0+0xec>
 801acb8:	786c      	ldrb	r4, [r5, #1]
 801acba:	2310      	movs	r3, #16
 801acbc:	3502      	adds	r5, #2
 801acbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801acc2:	f108 38ff 	add.w	r8, r8, #4294967295
 801acc6:	f04f 0c00 	mov.w	ip, #0
 801acca:	fbb8 f9f3 	udiv	r9, r8, r3
 801acce:	4666      	mov	r6, ip
 801acd0:	fb03 8a19 	mls	sl, r3, r9, r8
 801acd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801acd8:	f1be 0f09 	cmp.w	lr, #9
 801acdc:	d816      	bhi.n	801ad0c <_strtol_l.constprop.0+0xa4>
 801acde:	4674      	mov	r4, lr
 801ace0:	42a3      	cmp	r3, r4
 801ace2:	dd24      	ble.n	801ad2e <_strtol_l.constprop.0+0xc6>
 801ace4:	f1bc 0f00 	cmp.w	ip, #0
 801ace8:	db1e      	blt.n	801ad28 <_strtol_l.constprop.0+0xc0>
 801acea:	45b1      	cmp	r9, r6
 801acec:	d31c      	bcc.n	801ad28 <_strtol_l.constprop.0+0xc0>
 801acee:	d101      	bne.n	801acf4 <_strtol_l.constprop.0+0x8c>
 801acf0:	45a2      	cmp	sl, r4
 801acf2:	db19      	blt.n	801ad28 <_strtol_l.constprop.0+0xc0>
 801acf4:	fb06 4603 	mla	r6, r6, r3, r4
 801acf8:	f04f 0c01 	mov.w	ip, #1
 801acfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad00:	e7e8      	b.n	801acd4 <_strtol_l.constprop.0+0x6c>
 801ad02:	2c2b      	cmp	r4, #43	; 0x2b
 801ad04:	bf04      	itt	eq
 801ad06:	782c      	ldrbeq	r4, [r5, #0]
 801ad08:	1cb5      	addeq	r5, r6, #2
 801ad0a:	e7ca      	b.n	801aca2 <_strtol_l.constprop.0+0x3a>
 801ad0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801ad10:	f1be 0f19 	cmp.w	lr, #25
 801ad14:	d801      	bhi.n	801ad1a <_strtol_l.constprop.0+0xb2>
 801ad16:	3c37      	subs	r4, #55	; 0x37
 801ad18:	e7e2      	b.n	801ace0 <_strtol_l.constprop.0+0x78>
 801ad1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801ad1e:	f1be 0f19 	cmp.w	lr, #25
 801ad22:	d804      	bhi.n	801ad2e <_strtol_l.constprop.0+0xc6>
 801ad24:	3c57      	subs	r4, #87	; 0x57
 801ad26:	e7db      	b.n	801ace0 <_strtol_l.constprop.0+0x78>
 801ad28:	f04f 3cff 	mov.w	ip, #4294967295
 801ad2c:	e7e6      	b.n	801acfc <_strtol_l.constprop.0+0x94>
 801ad2e:	f1bc 0f00 	cmp.w	ip, #0
 801ad32:	da05      	bge.n	801ad40 <_strtol_l.constprop.0+0xd8>
 801ad34:	2322      	movs	r3, #34	; 0x22
 801ad36:	6003      	str	r3, [r0, #0]
 801ad38:	4646      	mov	r6, r8
 801ad3a:	b942      	cbnz	r2, 801ad4e <_strtol_l.constprop.0+0xe6>
 801ad3c:	4630      	mov	r0, r6
 801ad3e:	e79e      	b.n	801ac7e <_strtol_l.constprop.0+0x16>
 801ad40:	b107      	cbz	r7, 801ad44 <_strtol_l.constprop.0+0xdc>
 801ad42:	4276      	negs	r6, r6
 801ad44:	2a00      	cmp	r2, #0
 801ad46:	d0f9      	beq.n	801ad3c <_strtol_l.constprop.0+0xd4>
 801ad48:	f1bc 0f00 	cmp.w	ip, #0
 801ad4c:	d000      	beq.n	801ad50 <_strtol_l.constprop.0+0xe8>
 801ad4e:	1e69      	subs	r1, r5, #1
 801ad50:	6011      	str	r1, [r2, #0]
 801ad52:	e7f3      	b.n	801ad3c <_strtol_l.constprop.0+0xd4>
 801ad54:	2430      	movs	r4, #48	; 0x30
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d1b1      	bne.n	801acbe <_strtol_l.constprop.0+0x56>
 801ad5a:	2308      	movs	r3, #8
 801ad5c:	e7af      	b.n	801acbe <_strtol_l.constprop.0+0x56>
 801ad5e:	2c30      	cmp	r4, #48	; 0x30
 801ad60:	d0a5      	beq.n	801acae <_strtol_l.constprop.0+0x46>
 801ad62:	230a      	movs	r3, #10
 801ad64:	e7ab      	b.n	801acbe <_strtol_l.constprop.0+0x56>
 801ad66:	bf00      	nop
 801ad68:	08051ac1 	.word	0x08051ac1

0801ad6c <_strtol_r>:
 801ad6c:	f7ff bf7c 	b.w	801ac68 <_strtol_l.constprop.0>

0801ad70 <strtol>:
 801ad70:	4613      	mov	r3, r2
 801ad72:	460a      	mov	r2, r1
 801ad74:	4601      	mov	r1, r0
 801ad76:	4802      	ldr	r0, [pc, #8]	; (801ad80 <strtol+0x10>)
 801ad78:	6800      	ldr	r0, [r0, #0]
 801ad7a:	f7ff bf75 	b.w	801ac68 <_strtol_l.constprop.0>
 801ad7e:	bf00      	nop
 801ad80:	20000064 	.word	0x20000064

0801ad84 <quorem>:
 801ad84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad88:	6903      	ldr	r3, [r0, #16]
 801ad8a:	690c      	ldr	r4, [r1, #16]
 801ad8c:	42a3      	cmp	r3, r4
 801ad8e:	4607      	mov	r7, r0
 801ad90:	f2c0 8081 	blt.w	801ae96 <quorem+0x112>
 801ad94:	3c01      	subs	r4, #1
 801ad96:	f101 0814 	add.w	r8, r1, #20
 801ad9a:	f100 0514 	add.w	r5, r0, #20
 801ad9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ada2:	9301      	str	r3, [sp, #4]
 801ada4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ada8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801adac:	3301      	adds	r3, #1
 801adae:	429a      	cmp	r2, r3
 801adb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801adb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801adb8:	fbb2 f6f3 	udiv	r6, r2, r3
 801adbc:	d331      	bcc.n	801ae22 <quorem+0x9e>
 801adbe:	f04f 0e00 	mov.w	lr, #0
 801adc2:	4640      	mov	r0, r8
 801adc4:	46ac      	mov	ip, r5
 801adc6:	46f2      	mov	sl, lr
 801adc8:	f850 2b04 	ldr.w	r2, [r0], #4
 801adcc:	b293      	uxth	r3, r2
 801adce:	fb06 e303 	mla	r3, r6, r3, lr
 801add2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801add6:	b29b      	uxth	r3, r3
 801add8:	ebaa 0303 	sub.w	r3, sl, r3
 801addc:	f8dc a000 	ldr.w	sl, [ip]
 801ade0:	0c12      	lsrs	r2, r2, #16
 801ade2:	fa13 f38a 	uxtah	r3, r3, sl
 801ade6:	fb06 e202 	mla	r2, r6, r2, lr
 801adea:	9300      	str	r3, [sp, #0]
 801adec:	9b00      	ldr	r3, [sp, #0]
 801adee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801adf2:	b292      	uxth	r2, r2
 801adf4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801adf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801adfc:	f8bd 3000 	ldrh.w	r3, [sp]
 801ae00:	4581      	cmp	r9, r0
 801ae02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ae06:	f84c 3b04 	str.w	r3, [ip], #4
 801ae0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ae0e:	d2db      	bcs.n	801adc8 <quorem+0x44>
 801ae10:	f855 300b 	ldr.w	r3, [r5, fp]
 801ae14:	b92b      	cbnz	r3, 801ae22 <quorem+0x9e>
 801ae16:	9b01      	ldr	r3, [sp, #4]
 801ae18:	3b04      	subs	r3, #4
 801ae1a:	429d      	cmp	r5, r3
 801ae1c:	461a      	mov	r2, r3
 801ae1e:	d32e      	bcc.n	801ae7e <quorem+0xfa>
 801ae20:	613c      	str	r4, [r7, #16]
 801ae22:	4638      	mov	r0, r7
 801ae24:	f001 fc92 	bl	801c74c <__mcmp>
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	db24      	blt.n	801ae76 <quorem+0xf2>
 801ae2c:	3601      	adds	r6, #1
 801ae2e:	4628      	mov	r0, r5
 801ae30:	f04f 0c00 	mov.w	ip, #0
 801ae34:	f858 2b04 	ldr.w	r2, [r8], #4
 801ae38:	f8d0 e000 	ldr.w	lr, [r0]
 801ae3c:	b293      	uxth	r3, r2
 801ae3e:	ebac 0303 	sub.w	r3, ip, r3
 801ae42:	0c12      	lsrs	r2, r2, #16
 801ae44:	fa13 f38e 	uxtah	r3, r3, lr
 801ae48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ae4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ae50:	b29b      	uxth	r3, r3
 801ae52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ae56:	45c1      	cmp	r9, r8
 801ae58:	f840 3b04 	str.w	r3, [r0], #4
 801ae5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ae60:	d2e8      	bcs.n	801ae34 <quorem+0xb0>
 801ae62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ae66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ae6a:	b922      	cbnz	r2, 801ae76 <quorem+0xf2>
 801ae6c:	3b04      	subs	r3, #4
 801ae6e:	429d      	cmp	r5, r3
 801ae70:	461a      	mov	r2, r3
 801ae72:	d30a      	bcc.n	801ae8a <quorem+0x106>
 801ae74:	613c      	str	r4, [r7, #16]
 801ae76:	4630      	mov	r0, r6
 801ae78:	b003      	add	sp, #12
 801ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae7e:	6812      	ldr	r2, [r2, #0]
 801ae80:	3b04      	subs	r3, #4
 801ae82:	2a00      	cmp	r2, #0
 801ae84:	d1cc      	bne.n	801ae20 <quorem+0x9c>
 801ae86:	3c01      	subs	r4, #1
 801ae88:	e7c7      	b.n	801ae1a <quorem+0x96>
 801ae8a:	6812      	ldr	r2, [r2, #0]
 801ae8c:	3b04      	subs	r3, #4
 801ae8e:	2a00      	cmp	r2, #0
 801ae90:	d1f0      	bne.n	801ae74 <quorem+0xf0>
 801ae92:	3c01      	subs	r4, #1
 801ae94:	e7eb      	b.n	801ae6e <quorem+0xea>
 801ae96:	2000      	movs	r0, #0
 801ae98:	e7ee      	b.n	801ae78 <quorem+0xf4>
 801ae9a:	0000      	movs	r0, r0
 801ae9c:	0000      	movs	r0, r0
	...

0801aea0 <_dtoa_r>:
 801aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea4:	ed2d 8b04 	vpush	{d8-d9}
 801aea8:	ec57 6b10 	vmov	r6, r7, d0
 801aeac:	b093      	sub	sp, #76	; 0x4c
 801aeae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801aeb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801aeb4:	9106      	str	r1, [sp, #24]
 801aeb6:	ee10 aa10 	vmov	sl, s0
 801aeba:	4604      	mov	r4, r0
 801aebc:	9209      	str	r2, [sp, #36]	; 0x24
 801aebe:	930c      	str	r3, [sp, #48]	; 0x30
 801aec0:	46bb      	mov	fp, r7
 801aec2:	b975      	cbnz	r5, 801aee2 <_dtoa_r+0x42>
 801aec4:	2010      	movs	r0, #16
 801aec6:	f001 f94d 	bl	801c164 <malloc>
 801aeca:	4602      	mov	r2, r0
 801aecc:	6260      	str	r0, [r4, #36]	; 0x24
 801aece:	b920      	cbnz	r0, 801aeda <_dtoa_r+0x3a>
 801aed0:	4ba7      	ldr	r3, [pc, #668]	; (801b170 <_dtoa_r+0x2d0>)
 801aed2:	21ea      	movs	r1, #234	; 0xea
 801aed4:	48a7      	ldr	r0, [pc, #668]	; (801b174 <_dtoa_r+0x2d4>)
 801aed6:	f002 f8bd 	bl	801d054 <__assert_func>
 801aeda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801aede:	6005      	str	r5, [r0, #0]
 801aee0:	60c5      	str	r5, [r0, #12]
 801aee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aee4:	6819      	ldr	r1, [r3, #0]
 801aee6:	b151      	cbz	r1, 801aefe <_dtoa_r+0x5e>
 801aee8:	685a      	ldr	r2, [r3, #4]
 801aeea:	604a      	str	r2, [r1, #4]
 801aeec:	2301      	movs	r3, #1
 801aeee:	4093      	lsls	r3, r2
 801aef0:	608b      	str	r3, [r1, #8]
 801aef2:	4620      	mov	r0, r4
 801aef4:	f001 f99e 	bl	801c234 <_Bfree>
 801aef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aefa:	2200      	movs	r2, #0
 801aefc:	601a      	str	r2, [r3, #0]
 801aefe:	1e3b      	subs	r3, r7, #0
 801af00:	bfaa      	itet	ge
 801af02:	2300      	movge	r3, #0
 801af04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801af08:	f8c8 3000 	strge.w	r3, [r8]
 801af0c:	4b9a      	ldr	r3, [pc, #616]	; (801b178 <_dtoa_r+0x2d8>)
 801af0e:	bfbc      	itt	lt
 801af10:	2201      	movlt	r2, #1
 801af12:	f8c8 2000 	strlt.w	r2, [r8]
 801af16:	ea33 030b 	bics.w	r3, r3, fp
 801af1a:	d11b      	bne.n	801af54 <_dtoa_r+0xb4>
 801af1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801af1e:	f242 730f 	movw	r3, #9999	; 0x270f
 801af22:	6013      	str	r3, [r2, #0]
 801af24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af28:	4333      	orrs	r3, r6
 801af2a:	f000 8592 	beq.w	801ba52 <_dtoa_r+0xbb2>
 801af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801af30:	b963      	cbnz	r3, 801af4c <_dtoa_r+0xac>
 801af32:	4b92      	ldr	r3, [pc, #584]	; (801b17c <_dtoa_r+0x2dc>)
 801af34:	e022      	b.n	801af7c <_dtoa_r+0xdc>
 801af36:	4b92      	ldr	r3, [pc, #584]	; (801b180 <_dtoa_r+0x2e0>)
 801af38:	9301      	str	r3, [sp, #4]
 801af3a:	3308      	adds	r3, #8
 801af3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801af3e:	6013      	str	r3, [r2, #0]
 801af40:	9801      	ldr	r0, [sp, #4]
 801af42:	b013      	add	sp, #76	; 0x4c
 801af44:	ecbd 8b04 	vpop	{d8-d9}
 801af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af4c:	4b8b      	ldr	r3, [pc, #556]	; (801b17c <_dtoa_r+0x2dc>)
 801af4e:	9301      	str	r3, [sp, #4]
 801af50:	3303      	adds	r3, #3
 801af52:	e7f3      	b.n	801af3c <_dtoa_r+0x9c>
 801af54:	2200      	movs	r2, #0
 801af56:	2300      	movs	r3, #0
 801af58:	4650      	mov	r0, sl
 801af5a:	4659      	mov	r1, fp
 801af5c:	f7fd fec4 	bl	8018ce8 <__aeabi_dcmpeq>
 801af60:	ec4b ab19 	vmov	d9, sl, fp
 801af64:	4680      	mov	r8, r0
 801af66:	b158      	cbz	r0, 801af80 <_dtoa_r+0xe0>
 801af68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801af6a:	2301      	movs	r3, #1
 801af6c:	6013      	str	r3, [r2, #0]
 801af6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801af70:	2b00      	cmp	r3, #0
 801af72:	f000 856b 	beq.w	801ba4c <_dtoa_r+0xbac>
 801af76:	4883      	ldr	r0, [pc, #524]	; (801b184 <_dtoa_r+0x2e4>)
 801af78:	6018      	str	r0, [r3, #0]
 801af7a:	1e43      	subs	r3, r0, #1
 801af7c:	9301      	str	r3, [sp, #4]
 801af7e:	e7df      	b.n	801af40 <_dtoa_r+0xa0>
 801af80:	ec4b ab10 	vmov	d0, sl, fp
 801af84:	aa10      	add	r2, sp, #64	; 0x40
 801af86:	a911      	add	r1, sp, #68	; 0x44
 801af88:	4620      	mov	r0, r4
 801af8a:	f001 fd01 	bl	801c990 <__d2b>
 801af8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801af92:	ee08 0a10 	vmov	s16, r0
 801af96:	2d00      	cmp	r5, #0
 801af98:	f000 8084 	beq.w	801b0a4 <_dtoa_r+0x204>
 801af9c:	ee19 3a90 	vmov	r3, s19
 801afa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801afa4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801afa8:	4656      	mov	r6, sl
 801afaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801afae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801afb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801afb6:	4b74      	ldr	r3, [pc, #464]	; (801b188 <_dtoa_r+0x2e8>)
 801afb8:	2200      	movs	r2, #0
 801afba:	4630      	mov	r0, r6
 801afbc:	4639      	mov	r1, r7
 801afbe:	f7fd fa73 	bl	80184a8 <__aeabi_dsub>
 801afc2:	a365      	add	r3, pc, #404	; (adr r3, 801b158 <_dtoa_r+0x2b8>)
 801afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc8:	f7fd fc26 	bl	8018818 <__aeabi_dmul>
 801afcc:	a364      	add	r3, pc, #400	; (adr r3, 801b160 <_dtoa_r+0x2c0>)
 801afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd2:	f7fd fa6b 	bl	80184ac <__adddf3>
 801afd6:	4606      	mov	r6, r0
 801afd8:	4628      	mov	r0, r5
 801afda:	460f      	mov	r7, r1
 801afdc:	f7fd fbb2 	bl	8018744 <__aeabi_i2d>
 801afe0:	a361      	add	r3, pc, #388	; (adr r3, 801b168 <_dtoa_r+0x2c8>)
 801afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe6:	f7fd fc17 	bl	8018818 <__aeabi_dmul>
 801afea:	4602      	mov	r2, r0
 801afec:	460b      	mov	r3, r1
 801afee:	4630      	mov	r0, r6
 801aff0:	4639      	mov	r1, r7
 801aff2:	f7fd fa5b 	bl	80184ac <__adddf3>
 801aff6:	4606      	mov	r6, r0
 801aff8:	460f      	mov	r7, r1
 801affa:	f7fd febd 	bl	8018d78 <__aeabi_d2iz>
 801affe:	2200      	movs	r2, #0
 801b000:	9000      	str	r0, [sp, #0]
 801b002:	2300      	movs	r3, #0
 801b004:	4630      	mov	r0, r6
 801b006:	4639      	mov	r1, r7
 801b008:	f7fd fe78 	bl	8018cfc <__aeabi_dcmplt>
 801b00c:	b150      	cbz	r0, 801b024 <_dtoa_r+0x184>
 801b00e:	9800      	ldr	r0, [sp, #0]
 801b010:	f7fd fb98 	bl	8018744 <__aeabi_i2d>
 801b014:	4632      	mov	r2, r6
 801b016:	463b      	mov	r3, r7
 801b018:	f7fd fe66 	bl	8018ce8 <__aeabi_dcmpeq>
 801b01c:	b910      	cbnz	r0, 801b024 <_dtoa_r+0x184>
 801b01e:	9b00      	ldr	r3, [sp, #0]
 801b020:	3b01      	subs	r3, #1
 801b022:	9300      	str	r3, [sp, #0]
 801b024:	9b00      	ldr	r3, [sp, #0]
 801b026:	2b16      	cmp	r3, #22
 801b028:	d85a      	bhi.n	801b0e0 <_dtoa_r+0x240>
 801b02a:	9a00      	ldr	r2, [sp, #0]
 801b02c:	4b57      	ldr	r3, [pc, #348]	; (801b18c <_dtoa_r+0x2ec>)
 801b02e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b036:	ec51 0b19 	vmov	r0, r1, d9
 801b03a:	f7fd fe5f 	bl	8018cfc <__aeabi_dcmplt>
 801b03e:	2800      	cmp	r0, #0
 801b040:	d050      	beq.n	801b0e4 <_dtoa_r+0x244>
 801b042:	9b00      	ldr	r3, [sp, #0]
 801b044:	3b01      	subs	r3, #1
 801b046:	9300      	str	r3, [sp, #0]
 801b048:	2300      	movs	r3, #0
 801b04a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b04e:	1b5d      	subs	r5, r3, r5
 801b050:	1e6b      	subs	r3, r5, #1
 801b052:	9305      	str	r3, [sp, #20]
 801b054:	bf45      	ittet	mi
 801b056:	f1c5 0301 	rsbmi	r3, r5, #1
 801b05a:	9304      	strmi	r3, [sp, #16]
 801b05c:	2300      	movpl	r3, #0
 801b05e:	2300      	movmi	r3, #0
 801b060:	bf4c      	ite	mi
 801b062:	9305      	strmi	r3, [sp, #20]
 801b064:	9304      	strpl	r3, [sp, #16]
 801b066:	9b00      	ldr	r3, [sp, #0]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	db3d      	blt.n	801b0e8 <_dtoa_r+0x248>
 801b06c:	9b05      	ldr	r3, [sp, #20]
 801b06e:	9a00      	ldr	r2, [sp, #0]
 801b070:	920a      	str	r2, [sp, #40]	; 0x28
 801b072:	4413      	add	r3, r2
 801b074:	9305      	str	r3, [sp, #20]
 801b076:	2300      	movs	r3, #0
 801b078:	9307      	str	r3, [sp, #28]
 801b07a:	9b06      	ldr	r3, [sp, #24]
 801b07c:	2b09      	cmp	r3, #9
 801b07e:	f200 8089 	bhi.w	801b194 <_dtoa_r+0x2f4>
 801b082:	2b05      	cmp	r3, #5
 801b084:	bfc4      	itt	gt
 801b086:	3b04      	subgt	r3, #4
 801b088:	9306      	strgt	r3, [sp, #24]
 801b08a:	9b06      	ldr	r3, [sp, #24]
 801b08c:	f1a3 0302 	sub.w	r3, r3, #2
 801b090:	bfcc      	ite	gt
 801b092:	2500      	movgt	r5, #0
 801b094:	2501      	movle	r5, #1
 801b096:	2b03      	cmp	r3, #3
 801b098:	f200 8087 	bhi.w	801b1aa <_dtoa_r+0x30a>
 801b09c:	e8df f003 	tbb	[pc, r3]
 801b0a0:	59383a2d 	.word	0x59383a2d
 801b0a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b0a8:	441d      	add	r5, r3
 801b0aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b0ae:	2b20      	cmp	r3, #32
 801b0b0:	bfc1      	itttt	gt
 801b0b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b0b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b0ba:	fa0b f303 	lslgt.w	r3, fp, r3
 801b0be:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b0c2:	bfda      	itte	le
 801b0c4:	f1c3 0320 	rsble	r3, r3, #32
 801b0c8:	fa06 f003 	lslle.w	r0, r6, r3
 801b0cc:	4318      	orrgt	r0, r3
 801b0ce:	f7fd fb29 	bl	8018724 <__aeabi_ui2d>
 801b0d2:	2301      	movs	r3, #1
 801b0d4:	4606      	mov	r6, r0
 801b0d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b0da:	3d01      	subs	r5, #1
 801b0dc:	930e      	str	r3, [sp, #56]	; 0x38
 801b0de:	e76a      	b.n	801afb6 <_dtoa_r+0x116>
 801b0e0:	2301      	movs	r3, #1
 801b0e2:	e7b2      	b.n	801b04a <_dtoa_r+0x1aa>
 801b0e4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b0e6:	e7b1      	b.n	801b04c <_dtoa_r+0x1ac>
 801b0e8:	9b04      	ldr	r3, [sp, #16]
 801b0ea:	9a00      	ldr	r2, [sp, #0]
 801b0ec:	1a9b      	subs	r3, r3, r2
 801b0ee:	9304      	str	r3, [sp, #16]
 801b0f0:	4253      	negs	r3, r2
 801b0f2:	9307      	str	r3, [sp, #28]
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	930a      	str	r3, [sp, #40]	; 0x28
 801b0f8:	e7bf      	b.n	801b07a <_dtoa_r+0x1da>
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	9308      	str	r3, [sp, #32]
 801b0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b100:	2b00      	cmp	r3, #0
 801b102:	dc55      	bgt.n	801b1b0 <_dtoa_r+0x310>
 801b104:	2301      	movs	r3, #1
 801b106:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b10a:	461a      	mov	r2, r3
 801b10c:	9209      	str	r2, [sp, #36]	; 0x24
 801b10e:	e00c      	b.n	801b12a <_dtoa_r+0x28a>
 801b110:	2301      	movs	r3, #1
 801b112:	e7f3      	b.n	801b0fc <_dtoa_r+0x25c>
 801b114:	2300      	movs	r3, #0
 801b116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b118:	9308      	str	r3, [sp, #32]
 801b11a:	9b00      	ldr	r3, [sp, #0]
 801b11c:	4413      	add	r3, r2
 801b11e:	9302      	str	r3, [sp, #8]
 801b120:	3301      	adds	r3, #1
 801b122:	2b01      	cmp	r3, #1
 801b124:	9303      	str	r3, [sp, #12]
 801b126:	bfb8      	it	lt
 801b128:	2301      	movlt	r3, #1
 801b12a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b12c:	2200      	movs	r2, #0
 801b12e:	6042      	str	r2, [r0, #4]
 801b130:	2204      	movs	r2, #4
 801b132:	f102 0614 	add.w	r6, r2, #20
 801b136:	429e      	cmp	r6, r3
 801b138:	6841      	ldr	r1, [r0, #4]
 801b13a:	d93d      	bls.n	801b1b8 <_dtoa_r+0x318>
 801b13c:	4620      	mov	r0, r4
 801b13e:	f001 f839 	bl	801c1b4 <_Balloc>
 801b142:	9001      	str	r0, [sp, #4]
 801b144:	2800      	cmp	r0, #0
 801b146:	d13b      	bne.n	801b1c0 <_dtoa_r+0x320>
 801b148:	4b11      	ldr	r3, [pc, #68]	; (801b190 <_dtoa_r+0x2f0>)
 801b14a:	4602      	mov	r2, r0
 801b14c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b150:	e6c0      	b.n	801aed4 <_dtoa_r+0x34>
 801b152:	2301      	movs	r3, #1
 801b154:	e7df      	b.n	801b116 <_dtoa_r+0x276>
 801b156:	bf00      	nop
 801b158:	636f4361 	.word	0x636f4361
 801b15c:	3fd287a7 	.word	0x3fd287a7
 801b160:	8b60c8b3 	.word	0x8b60c8b3
 801b164:	3fc68a28 	.word	0x3fc68a28
 801b168:	509f79fb 	.word	0x509f79fb
 801b16c:	3fd34413 	.word	0x3fd34413
 801b170:	08051bce 	.word	0x08051bce
 801b174:	08051be5 	.word	0x08051be5
 801b178:	7ff00000 	.word	0x7ff00000
 801b17c:	08051bca 	.word	0x08051bca
 801b180:	08051bc1 	.word	0x08051bc1
 801b184:	08051a41 	.word	0x08051a41
 801b188:	3ff80000 	.word	0x3ff80000
 801b18c:	08051d50 	.word	0x08051d50
 801b190:	08051c40 	.word	0x08051c40
 801b194:	2501      	movs	r5, #1
 801b196:	2300      	movs	r3, #0
 801b198:	9306      	str	r3, [sp, #24]
 801b19a:	9508      	str	r5, [sp, #32]
 801b19c:	f04f 33ff 	mov.w	r3, #4294967295
 801b1a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b1a4:	2200      	movs	r2, #0
 801b1a6:	2312      	movs	r3, #18
 801b1a8:	e7b0      	b.n	801b10c <_dtoa_r+0x26c>
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	9308      	str	r3, [sp, #32]
 801b1ae:	e7f5      	b.n	801b19c <_dtoa_r+0x2fc>
 801b1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b1b6:	e7b8      	b.n	801b12a <_dtoa_r+0x28a>
 801b1b8:	3101      	adds	r1, #1
 801b1ba:	6041      	str	r1, [r0, #4]
 801b1bc:	0052      	lsls	r2, r2, #1
 801b1be:	e7b8      	b.n	801b132 <_dtoa_r+0x292>
 801b1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b1c2:	9a01      	ldr	r2, [sp, #4]
 801b1c4:	601a      	str	r2, [r3, #0]
 801b1c6:	9b03      	ldr	r3, [sp, #12]
 801b1c8:	2b0e      	cmp	r3, #14
 801b1ca:	f200 809d 	bhi.w	801b308 <_dtoa_r+0x468>
 801b1ce:	2d00      	cmp	r5, #0
 801b1d0:	f000 809a 	beq.w	801b308 <_dtoa_r+0x468>
 801b1d4:	9b00      	ldr	r3, [sp, #0]
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	dd32      	ble.n	801b240 <_dtoa_r+0x3a0>
 801b1da:	4ab7      	ldr	r2, [pc, #732]	; (801b4b8 <_dtoa_r+0x618>)
 801b1dc:	f003 030f 	and.w	r3, r3, #15
 801b1e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b1e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b1e8:	9b00      	ldr	r3, [sp, #0]
 801b1ea:	05d8      	lsls	r0, r3, #23
 801b1ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b1f0:	d516      	bpl.n	801b220 <_dtoa_r+0x380>
 801b1f2:	4bb2      	ldr	r3, [pc, #712]	; (801b4bc <_dtoa_r+0x61c>)
 801b1f4:	ec51 0b19 	vmov	r0, r1, d9
 801b1f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b1fc:	f7fd fc36 	bl	8018a6c <__aeabi_ddiv>
 801b200:	f007 070f 	and.w	r7, r7, #15
 801b204:	4682      	mov	sl, r0
 801b206:	468b      	mov	fp, r1
 801b208:	2503      	movs	r5, #3
 801b20a:	4eac      	ldr	r6, [pc, #688]	; (801b4bc <_dtoa_r+0x61c>)
 801b20c:	b957      	cbnz	r7, 801b224 <_dtoa_r+0x384>
 801b20e:	4642      	mov	r2, r8
 801b210:	464b      	mov	r3, r9
 801b212:	4650      	mov	r0, sl
 801b214:	4659      	mov	r1, fp
 801b216:	f7fd fc29 	bl	8018a6c <__aeabi_ddiv>
 801b21a:	4682      	mov	sl, r0
 801b21c:	468b      	mov	fp, r1
 801b21e:	e028      	b.n	801b272 <_dtoa_r+0x3d2>
 801b220:	2502      	movs	r5, #2
 801b222:	e7f2      	b.n	801b20a <_dtoa_r+0x36a>
 801b224:	07f9      	lsls	r1, r7, #31
 801b226:	d508      	bpl.n	801b23a <_dtoa_r+0x39a>
 801b228:	4640      	mov	r0, r8
 801b22a:	4649      	mov	r1, r9
 801b22c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b230:	f7fd faf2 	bl	8018818 <__aeabi_dmul>
 801b234:	3501      	adds	r5, #1
 801b236:	4680      	mov	r8, r0
 801b238:	4689      	mov	r9, r1
 801b23a:	107f      	asrs	r7, r7, #1
 801b23c:	3608      	adds	r6, #8
 801b23e:	e7e5      	b.n	801b20c <_dtoa_r+0x36c>
 801b240:	f000 809b 	beq.w	801b37a <_dtoa_r+0x4da>
 801b244:	9b00      	ldr	r3, [sp, #0]
 801b246:	4f9d      	ldr	r7, [pc, #628]	; (801b4bc <_dtoa_r+0x61c>)
 801b248:	425e      	negs	r6, r3
 801b24a:	4b9b      	ldr	r3, [pc, #620]	; (801b4b8 <_dtoa_r+0x618>)
 801b24c:	f006 020f 	and.w	r2, r6, #15
 801b250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b258:	ec51 0b19 	vmov	r0, r1, d9
 801b25c:	f7fd fadc 	bl	8018818 <__aeabi_dmul>
 801b260:	1136      	asrs	r6, r6, #4
 801b262:	4682      	mov	sl, r0
 801b264:	468b      	mov	fp, r1
 801b266:	2300      	movs	r3, #0
 801b268:	2502      	movs	r5, #2
 801b26a:	2e00      	cmp	r6, #0
 801b26c:	d17a      	bne.n	801b364 <_dtoa_r+0x4c4>
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d1d3      	bne.n	801b21a <_dtoa_r+0x37a>
 801b272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b274:	2b00      	cmp	r3, #0
 801b276:	f000 8082 	beq.w	801b37e <_dtoa_r+0x4de>
 801b27a:	4b91      	ldr	r3, [pc, #580]	; (801b4c0 <_dtoa_r+0x620>)
 801b27c:	2200      	movs	r2, #0
 801b27e:	4650      	mov	r0, sl
 801b280:	4659      	mov	r1, fp
 801b282:	f7fd fd3b 	bl	8018cfc <__aeabi_dcmplt>
 801b286:	2800      	cmp	r0, #0
 801b288:	d079      	beq.n	801b37e <_dtoa_r+0x4de>
 801b28a:	9b03      	ldr	r3, [sp, #12]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d076      	beq.n	801b37e <_dtoa_r+0x4de>
 801b290:	9b02      	ldr	r3, [sp, #8]
 801b292:	2b00      	cmp	r3, #0
 801b294:	dd36      	ble.n	801b304 <_dtoa_r+0x464>
 801b296:	9b00      	ldr	r3, [sp, #0]
 801b298:	4650      	mov	r0, sl
 801b29a:	4659      	mov	r1, fp
 801b29c:	1e5f      	subs	r7, r3, #1
 801b29e:	2200      	movs	r2, #0
 801b2a0:	4b88      	ldr	r3, [pc, #544]	; (801b4c4 <_dtoa_r+0x624>)
 801b2a2:	f7fd fab9 	bl	8018818 <__aeabi_dmul>
 801b2a6:	9e02      	ldr	r6, [sp, #8]
 801b2a8:	4682      	mov	sl, r0
 801b2aa:	468b      	mov	fp, r1
 801b2ac:	3501      	adds	r5, #1
 801b2ae:	4628      	mov	r0, r5
 801b2b0:	f7fd fa48 	bl	8018744 <__aeabi_i2d>
 801b2b4:	4652      	mov	r2, sl
 801b2b6:	465b      	mov	r3, fp
 801b2b8:	f7fd faae 	bl	8018818 <__aeabi_dmul>
 801b2bc:	4b82      	ldr	r3, [pc, #520]	; (801b4c8 <_dtoa_r+0x628>)
 801b2be:	2200      	movs	r2, #0
 801b2c0:	f7fd f8f4 	bl	80184ac <__adddf3>
 801b2c4:	46d0      	mov	r8, sl
 801b2c6:	46d9      	mov	r9, fp
 801b2c8:	4682      	mov	sl, r0
 801b2ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b2ce:	2e00      	cmp	r6, #0
 801b2d0:	d158      	bne.n	801b384 <_dtoa_r+0x4e4>
 801b2d2:	4b7e      	ldr	r3, [pc, #504]	; (801b4cc <_dtoa_r+0x62c>)
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	4640      	mov	r0, r8
 801b2d8:	4649      	mov	r1, r9
 801b2da:	f7fd f8e5 	bl	80184a8 <__aeabi_dsub>
 801b2de:	4652      	mov	r2, sl
 801b2e0:	465b      	mov	r3, fp
 801b2e2:	4680      	mov	r8, r0
 801b2e4:	4689      	mov	r9, r1
 801b2e6:	f7fd fd27 	bl	8018d38 <__aeabi_dcmpgt>
 801b2ea:	2800      	cmp	r0, #0
 801b2ec:	f040 8295 	bne.w	801b81a <_dtoa_r+0x97a>
 801b2f0:	4652      	mov	r2, sl
 801b2f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b2f6:	4640      	mov	r0, r8
 801b2f8:	4649      	mov	r1, r9
 801b2fa:	f7fd fcff 	bl	8018cfc <__aeabi_dcmplt>
 801b2fe:	2800      	cmp	r0, #0
 801b300:	f040 8289 	bne.w	801b816 <_dtoa_r+0x976>
 801b304:	ec5b ab19 	vmov	sl, fp, d9
 801b308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	f2c0 8148 	blt.w	801b5a0 <_dtoa_r+0x700>
 801b310:	9a00      	ldr	r2, [sp, #0]
 801b312:	2a0e      	cmp	r2, #14
 801b314:	f300 8144 	bgt.w	801b5a0 <_dtoa_r+0x700>
 801b318:	4b67      	ldr	r3, [pc, #412]	; (801b4b8 <_dtoa_r+0x618>)
 801b31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b31e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b324:	2b00      	cmp	r3, #0
 801b326:	f280 80d5 	bge.w	801b4d4 <_dtoa_r+0x634>
 801b32a:	9b03      	ldr	r3, [sp, #12]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f300 80d1 	bgt.w	801b4d4 <_dtoa_r+0x634>
 801b332:	f040 826f 	bne.w	801b814 <_dtoa_r+0x974>
 801b336:	4b65      	ldr	r3, [pc, #404]	; (801b4cc <_dtoa_r+0x62c>)
 801b338:	2200      	movs	r2, #0
 801b33a:	4640      	mov	r0, r8
 801b33c:	4649      	mov	r1, r9
 801b33e:	f7fd fa6b 	bl	8018818 <__aeabi_dmul>
 801b342:	4652      	mov	r2, sl
 801b344:	465b      	mov	r3, fp
 801b346:	f7fd fced 	bl	8018d24 <__aeabi_dcmpge>
 801b34a:	9e03      	ldr	r6, [sp, #12]
 801b34c:	4637      	mov	r7, r6
 801b34e:	2800      	cmp	r0, #0
 801b350:	f040 8245 	bne.w	801b7de <_dtoa_r+0x93e>
 801b354:	9d01      	ldr	r5, [sp, #4]
 801b356:	2331      	movs	r3, #49	; 0x31
 801b358:	f805 3b01 	strb.w	r3, [r5], #1
 801b35c:	9b00      	ldr	r3, [sp, #0]
 801b35e:	3301      	adds	r3, #1
 801b360:	9300      	str	r3, [sp, #0]
 801b362:	e240      	b.n	801b7e6 <_dtoa_r+0x946>
 801b364:	07f2      	lsls	r2, r6, #31
 801b366:	d505      	bpl.n	801b374 <_dtoa_r+0x4d4>
 801b368:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b36c:	f7fd fa54 	bl	8018818 <__aeabi_dmul>
 801b370:	3501      	adds	r5, #1
 801b372:	2301      	movs	r3, #1
 801b374:	1076      	asrs	r6, r6, #1
 801b376:	3708      	adds	r7, #8
 801b378:	e777      	b.n	801b26a <_dtoa_r+0x3ca>
 801b37a:	2502      	movs	r5, #2
 801b37c:	e779      	b.n	801b272 <_dtoa_r+0x3d2>
 801b37e:	9f00      	ldr	r7, [sp, #0]
 801b380:	9e03      	ldr	r6, [sp, #12]
 801b382:	e794      	b.n	801b2ae <_dtoa_r+0x40e>
 801b384:	9901      	ldr	r1, [sp, #4]
 801b386:	4b4c      	ldr	r3, [pc, #304]	; (801b4b8 <_dtoa_r+0x618>)
 801b388:	4431      	add	r1, r6
 801b38a:	910d      	str	r1, [sp, #52]	; 0x34
 801b38c:	9908      	ldr	r1, [sp, #32]
 801b38e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b396:	2900      	cmp	r1, #0
 801b398:	d043      	beq.n	801b422 <_dtoa_r+0x582>
 801b39a:	494d      	ldr	r1, [pc, #308]	; (801b4d0 <_dtoa_r+0x630>)
 801b39c:	2000      	movs	r0, #0
 801b39e:	f7fd fb65 	bl	8018a6c <__aeabi_ddiv>
 801b3a2:	4652      	mov	r2, sl
 801b3a4:	465b      	mov	r3, fp
 801b3a6:	f7fd f87f 	bl	80184a8 <__aeabi_dsub>
 801b3aa:	9d01      	ldr	r5, [sp, #4]
 801b3ac:	4682      	mov	sl, r0
 801b3ae:	468b      	mov	fp, r1
 801b3b0:	4649      	mov	r1, r9
 801b3b2:	4640      	mov	r0, r8
 801b3b4:	f7fd fce0 	bl	8018d78 <__aeabi_d2iz>
 801b3b8:	4606      	mov	r6, r0
 801b3ba:	f7fd f9c3 	bl	8018744 <__aeabi_i2d>
 801b3be:	4602      	mov	r2, r0
 801b3c0:	460b      	mov	r3, r1
 801b3c2:	4640      	mov	r0, r8
 801b3c4:	4649      	mov	r1, r9
 801b3c6:	f7fd f86f 	bl	80184a8 <__aeabi_dsub>
 801b3ca:	3630      	adds	r6, #48	; 0x30
 801b3cc:	f805 6b01 	strb.w	r6, [r5], #1
 801b3d0:	4652      	mov	r2, sl
 801b3d2:	465b      	mov	r3, fp
 801b3d4:	4680      	mov	r8, r0
 801b3d6:	4689      	mov	r9, r1
 801b3d8:	f7fd fc90 	bl	8018cfc <__aeabi_dcmplt>
 801b3dc:	2800      	cmp	r0, #0
 801b3de:	d163      	bne.n	801b4a8 <_dtoa_r+0x608>
 801b3e0:	4642      	mov	r2, r8
 801b3e2:	464b      	mov	r3, r9
 801b3e4:	4936      	ldr	r1, [pc, #216]	; (801b4c0 <_dtoa_r+0x620>)
 801b3e6:	2000      	movs	r0, #0
 801b3e8:	f7fd f85e 	bl	80184a8 <__aeabi_dsub>
 801b3ec:	4652      	mov	r2, sl
 801b3ee:	465b      	mov	r3, fp
 801b3f0:	f7fd fc84 	bl	8018cfc <__aeabi_dcmplt>
 801b3f4:	2800      	cmp	r0, #0
 801b3f6:	f040 80b5 	bne.w	801b564 <_dtoa_r+0x6c4>
 801b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3fc:	429d      	cmp	r5, r3
 801b3fe:	d081      	beq.n	801b304 <_dtoa_r+0x464>
 801b400:	4b30      	ldr	r3, [pc, #192]	; (801b4c4 <_dtoa_r+0x624>)
 801b402:	2200      	movs	r2, #0
 801b404:	4650      	mov	r0, sl
 801b406:	4659      	mov	r1, fp
 801b408:	f7fd fa06 	bl	8018818 <__aeabi_dmul>
 801b40c:	4b2d      	ldr	r3, [pc, #180]	; (801b4c4 <_dtoa_r+0x624>)
 801b40e:	4682      	mov	sl, r0
 801b410:	468b      	mov	fp, r1
 801b412:	4640      	mov	r0, r8
 801b414:	4649      	mov	r1, r9
 801b416:	2200      	movs	r2, #0
 801b418:	f7fd f9fe 	bl	8018818 <__aeabi_dmul>
 801b41c:	4680      	mov	r8, r0
 801b41e:	4689      	mov	r9, r1
 801b420:	e7c6      	b.n	801b3b0 <_dtoa_r+0x510>
 801b422:	4650      	mov	r0, sl
 801b424:	4659      	mov	r1, fp
 801b426:	f7fd f9f7 	bl	8018818 <__aeabi_dmul>
 801b42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b42c:	9d01      	ldr	r5, [sp, #4]
 801b42e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b430:	4682      	mov	sl, r0
 801b432:	468b      	mov	fp, r1
 801b434:	4649      	mov	r1, r9
 801b436:	4640      	mov	r0, r8
 801b438:	f7fd fc9e 	bl	8018d78 <__aeabi_d2iz>
 801b43c:	4606      	mov	r6, r0
 801b43e:	f7fd f981 	bl	8018744 <__aeabi_i2d>
 801b442:	3630      	adds	r6, #48	; 0x30
 801b444:	4602      	mov	r2, r0
 801b446:	460b      	mov	r3, r1
 801b448:	4640      	mov	r0, r8
 801b44a:	4649      	mov	r1, r9
 801b44c:	f7fd f82c 	bl	80184a8 <__aeabi_dsub>
 801b450:	f805 6b01 	strb.w	r6, [r5], #1
 801b454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b456:	429d      	cmp	r5, r3
 801b458:	4680      	mov	r8, r0
 801b45a:	4689      	mov	r9, r1
 801b45c:	f04f 0200 	mov.w	r2, #0
 801b460:	d124      	bne.n	801b4ac <_dtoa_r+0x60c>
 801b462:	4b1b      	ldr	r3, [pc, #108]	; (801b4d0 <_dtoa_r+0x630>)
 801b464:	4650      	mov	r0, sl
 801b466:	4659      	mov	r1, fp
 801b468:	f7fd f820 	bl	80184ac <__adddf3>
 801b46c:	4602      	mov	r2, r0
 801b46e:	460b      	mov	r3, r1
 801b470:	4640      	mov	r0, r8
 801b472:	4649      	mov	r1, r9
 801b474:	f7fd fc60 	bl	8018d38 <__aeabi_dcmpgt>
 801b478:	2800      	cmp	r0, #0
 801b47a:	d173      	bne.n	801b564 <_dtoa_r+0x6c4>
 801b47c:	4652      	mov	r2, sl
 801b47e:	465b      	mov	r3, fp
 801b480:	4913      	ldr	r1, [pc, #76]	; (801b4d0 <_dtoa_r+0x630>)
 801b482:	2000      	movs	r0, #0
 801b484:	f7fd f810 	bl	80184a8 <__aeabi_dsub>
 801b488:	4602      	mov	r2, r0
 801b48a:	460b      	mov	r3, r1
 801b48c:	4640      	mov	r0, r8
 801b48e:	4649      	mov	r1, r9
 801b490:	f7fd fc34 	bl	8018cfc <__aeabi_dcmplt>
 801b494:	2800      	cmp	r0, #0
 801b496:	f43f af35 	beq.w	801b304 <_dtoa_r+0x464>
 801b49a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b49c:	1e6b      	subs	r3, r5, #1
 801b49e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b4a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b4a4:	2b30      	cmp	r3, #48	; 0x30
 801b4a6:	d0f8      	beq.n	801b49a <_dtoa_r+0x5fa>
 801b4a8:	9700      	str	r7, [sp, #0]
 801b4aa:	e049      	b.n	801b540 <_dtoa_r+0x6a0>
 801b4ac:	4b05      	ldr	r3, [pc, #20]	; (801b4c4 <_dtoa_r+0x624>)
 801b4ae:	f7fd f9b3 	bl	8018818 <__aeabi_dmul>
 801b4b2:	4680      	mov	r8, r0
 801b4b4:	4689      	mov	r9, r1
 801b4b6:	e7bd      	b.n	801b434 <_dtoa_r+0x594>
 801b4b8:	08051d50 	.word	0x08051d50
 801b4bc:	08051d28 	.word	0x08051d28
 801b4c0:	3ff00000 	.word	0x3ff00000
 801b4c4:	40240000 	.word	0x40240000
 801b4c8:	401c0000 	.word	0x401c0000
 801b4cc:	40140000 	.word	0x40140000
 801b4d0:	3fe00000 	.word	0x3fe00000
 801b4d4:	9d01      	ldr	r5, [sp, #4]
 801b4d6:	4656      	mov	r6, sl
 801b4d8:	465f      	mov	r7, fp
 801b4da:	4642      	mov	r2, r8
 801b4dc:	464b      	mov	r3, r9
 801b4de:	4630      	mov	r0, r6
 801b4e0:	4639      	mov	r1, r7
 801b4e2:	f7fd fac3 	bl	8018a6c <__aeabi_ddiv>
 801b4e6:	f7fd fc47 	bl	8018d78 <__aeabi_d2iz>
 801b4ea:	4682      	mov	sl, r0
 801b4ec:	f7fd f92a 	bl	8018744 <__aeabi_i2d>
 801b4f0:	4642      	mov	r2, r8
 801b4f2:	464b      	mov	r3, r9
 801b4f4:	f7fd f990 	bl	8018818 <__aeabi_dmul>
 801b4f8:	4602      	mov	r2, r0
 801b4fa:	460b      	mov	r3, r1
 801b4fc:	4630      	mov	r0, r6
 801b4fe:	4639      	mov	r1, r7
 801b500:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801b504:	f7fc ffd0 	bl	80184a8 <__aeabi_dsub>
 801b508:	f805 6b01 	strb.w	r6, [r5], #1
 801b50c:	9e01      	ldr	r6, [sp, #4]
 801b50e:	9f03      	ldr	r7, [sp, #12]
 801b510:	1bae      	subs	r6, r5, r6
 801b512:	42b7      	cmp	r7, r6
 801b514:	4602      	mov	r2, r0
 801b516:	460b      	mov	r3, r1
 801b518:	d135      	bne.n	801b586 <_dtoa_r+0x6e6>
 801b51a:	f7fc ffc7 	bl	80184ac <__adddf3>
 801b51e:	4642      	mov	r2, r8
 801b520:	464b      	mov	r3, r9
 801b522:	4606      	mov	r6, r0
 801b524:	460f      	mov	r7, r1
 801b526:	f7fd fc07 	bl	8018d38 <__aeabi_dcmpgt>
 801b52a:	b9d0      	cbnz	r0, 801b562 <_dtoa_r+0x6c2>
 801b52c:	4642      	mov	r2, r8
 801b52e:	464b      	mov	r3, r9
 801b530:	4630      	mov	r0, r6
 801b532:	4639      	mov	r1, r7
 801b534:	f7fd fbd8 	bl	8018ce8 <__aeabi_dcmpeq>
 801b538:	b110      	cbz	r0, 801b540 <_dtoa_r+0x6a0>
 801b53a:	f01a 0f01 	tst.w	sl, #1
 801b53e:	d110      	bne.n	801b562 <_dtoa_r+0x6c2>
 801b540:	4620      	mov	r0, r4
 801b542:	ee18 1a10 	vmov	r1, s16
 801b546:	f000 fe75 	bl	801c234 <_Bfree>
 801b54a:	2300      	movs	r3, #0
 801b54c:	9800      	ldr	r0, [sp, #0]
 801b54e:	702b      	strb	r3, [r5, #0]
 801b550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b552:	3001      	adds	r0, #1
 801b554:	6018      	str	r0, [r3, #0]
 801b556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b558:	2b00      	cmp	r3, #0
 801b55a:	f43f acf1 	beq.w	801af40 <_dtoa_r+0xa0>
 801b55e:	601d      	str	r5, [r3, #0]
 801b560:	e4ee      	b.n	801af40 <_dtoa_r+0xa0>
 801b562:	9f00      	ldr	r7, [sp, #0]
 801b564:	462b      	mov	r3, r5
 801b566:	461d      	mov	r5, r3
 801b568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b56c:	2a39      	cmp	r2, #57	; 0x39
 801b56e:	d106      	bne.n	801b57e <_dtoa_r+0x6de>
 801b570:	9a01      	ldr	r2, [sp, #4]
 801b572:	429a      	cmp	r2, r3
 801b574:	d1f7      	bne.n	801b566 <_dtoa_r+0x6c6>
 801b576:	9901      	ldr	r1, [sp, #4]
 801b578:	2230      	movs	r2, #48	; 0x30
 801b57a:	3701      	adds	r7, #1
 801b57c:	700a      	strb	r2, [r1, #0]
 801b57e:	781a      	ldrb	r2, [r3, #0]
 801b580:	3201      	adds	r2, #1
 801b582:	701a      	strb	r2, [r3, #0]
 801b584:	e790      	b.n	801b4a8 <_dtoa_r+0x608>
 801b586:	4ba6      	ldr	r3, [pc, #664]	; (801b820 <_dtoa_r+0x980>)
 801b588:	2200      	movs	r2, #0
 801b58a:	f7fd f945 	bl	8018818 <__aeabi_dmul>
 801b58e:	2200      	movs	r2, #0
 801b590:	2300      	movs	r3, #0
 801b592:	4606      	mov	r6, r0
 801b594:	460f      	mov	r7, r1
 801b596:	f7fd fba7 	bl	8018ce8 <__aeabi_dcmpeq>
 801b59a:	2800      	cmp	r0, #0
 801b59c:	d09d      	beq.n	801b4da <_dtoa_r+0x63a>
 801b59e:	e7cf      	b.n	801b540 <_dtoa_r+0x6a0>
 801b5a0:	9a08      	ldr	r2, [sp, #32]
 801b5a2:	2a00      	cmp	r2, #0
 801b5a4:	f000 80d7 	beq.w	801b756 <_dtoa_r+0x8b6>
 801b5a8:	9a06      	ldr	r2, [sp, #24]
 801b5aa:	2a01      	cmp	r2, #1
 801b5ac:	f300 80ba 	bgt.w	801b724 <_dtoa_r+0x884>
 801b5b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b5b2:	2a00      	cmp	r2, #0
 801b5b4:	f000 80b2 	beq.w	801b71c <_dtoa_r+0x87c>
 801b5b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b5bc:	9e07      	ldr	r6, [sp, #28]
 801b5be:	9d04      	ldr	r5, [sp, #16]
 801b5c0:	9a04      	ldr	r2, [sp, #16]
 801b5c2:	441a      	add	r2, r3
 801b5c4:	9204      	str	r2, [sp, #16]
 801b5c6:	9a05      	ldr	r2, [sp, #20]
 801b5c8:	2101      	movs	r1, #1
 801b5ca:	441a      	add	r2, r3
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	9205      	str	r2, [sp, #20]
 801b5d0:	f000 ff32 	bl	801c438 <__i2b>
 801b5d4:	4607      	mov	r7, r0
 801b5d6:	2d00      	cmp	r5, #0
 801b5d8:	dd0c      	ble.n	801b5f4 <_dtoa_r+0x754>
 801b5da:	9b05      	ldr	r3, [sp, #20]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	dd09      	ble.n	801b5f4 <_dtoa_r+0x754>
 801b5e0:	42ab      	cmp	r3, r5
 801b5e2:	9a04      	ldr	r2, [sp, #16]
 801b5e4:	bfa8      	it	ge
 801b5e6:	462b      	movge	r3, r5
 801b5e8:	1ad2      	subs	r2, r2, r3
 801b5ea:	9204      	str	r2, [sp, #16]
 801b5ec:	9a05      	ldr	r2, [sp, #20]
 801b5ee:	1aed      	subs	r5, r5, r3
 801b5f0:	1ad3      	subs	r3, r2, r3
 801b5f2:	9305      	str	r3, [sp, #20]
 801b5f4:	9b07      	ldr	r3, [sp, #28]
 801b5f6:	b31b      	cbz	r3, 801b640 <_dtoa_r+0x7a0>
 801b5f8:	9b08      	ldr	r3, [sp, #32]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	f000 80af 	beq.w	801b75e <_dtoa_r+0x8be>
 801b600:	2e00      	cmp	r6, #0
 801b602:	dd13      	ble.n	801b62c <_dtoa_r+0x78c>
 801b604:	4639      	mov	r1, r7
 801b606:	4632      	mov	r2, r6
 801b608:	4620      	mov	r0, r4
 801b60a:	f000 ffd5 	bl	801c5b8 <__pow5mult>
 801b60e:	ee18 2a10 	vmov	r2, s16
 801b612:	4601      	mov	r1, r0
 801b614:	4607      	mov	r7, r0
 801b616:	4620      	mov	r0, r4
 801b618:	f000 ff24 	bl	801c464 <__multiply>
 801b61c:	ee18 1a10 	vmov	r1, s16
 801b620:	4680      	mov	r8, r0
 801b622:	4620      	mov	r0, r4
 801b624:	f000 fe06 	bl	801c234 <_Bfree>
 801b628:	ee08 8a10 	vmov	s16, r8
 801b62c:	9b07      	ldr	r3, [sp, #28]
 801b62e:	1b9a      	subs	r2, r3, r6
 801b630:	d006      	beq.n	801b640 <_dtoa_r+0x7a0>
 801b632:	ee18 1a10 	vmov	r1, s16
 801b636:	4620      	mov	r0, r4
 801b638:	f000 ffbe 	bl	801c5b8 <__pow5mult>
 801b63c:	ee08 0a10 	vmov	s16, r0
 801b640:	2101      	movs	r1, #1
 801b642:	4620      	mov	r0, r4
 801b644:	f000 fef8 	bl	801c438 <__i2b>
 801b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	4606      	mov	r6, r0
 801b64e:	f340 8088 	ble.w	801b762 <_dtoa_r+0x8c2>
 801b652:	461a      	mov	r2, r3
 801b654:	4601      	mov	r1, r0
 801b656:	4620      	mov	r0, r4
 801b658:	f000 ffae 	bl	801c5b8 <__pow5mult>
 801b65c:	9b06      	ldr	r3, [sp, #24]
 801b65e:	2b01      	cmp	r3, #1
 801b660:	4606      	mov	r6, r0
 801b662:	f340 8081 	ble.w	801b768 <_dtoa_r+0x8c8>
 801b666:	f04f 0800 	mov.w	r8, #0
 801b66a:	6933      	ldr	r3, [r6, #16]
 801b66c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b670:	6918      	ldr	r0, [r3, #16]
 801b672:	f000 fe91 	bl	801c398 <__hi0bits>
 801b676:	f1c0 0020 	rsb	r0, r0, #32
 801b67a:	9b05      	ldr	r3, [sp, #20]
 801b67c:	4418      	add	r0, r3
 801b67e:	f010 001f 	ands.w	r0, r0, #31
 801b682:	f000 8092 	beq.w	801b7aa <_dtoa_r+0x90a>
 801b686:	f1c0 0320 	rsb	r3, r0, #32
 801b68a:	2b04      	cmp	r3, #4
 801b68c:	f340 808a 	ble.w	801b7a4 <_dtoa_r+0x904>
 801b690:	f1c0 001c 	rsb	r0, r0, #28
 801b694:	9b04      	ldr	r3, [sp, #16]
 801b696:	4403      	add	r3, r0
 801b698:	9304      	str	r3, [sp, #16]
 801b69a:	9b05      	ldr	r3, [sp, #20]
 801b69c:	4403      	add	r3, r0
 801b69e:	4405      	add	r5, r0
 801b6a0:	9305      	str	r3, [sp, #20]
 801b6a2:	9b04      	ldr	r3, [sp, #16]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	dd07      	ble.n	801b6b8 <_dtoa_r+0x818>
 801b6a8:	ee18 1a10 	vmov	r1, s16
 801b6ac:	461a      	mov	r2, r3
 801b6ae:	4620      	mov	r0, r4
 801b6b0:	f000 ffdc 	bl	801c66c <__lshift>
 801b6b4:	ee08 0a10 	vmov	s16, r0
 801b6b8:	9b05      	ldr	r3, [sp, #20]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	dd05      	ble.n	801b6ca <_dtoa_r+0x82a>
 801b6be:	4631      	mov	r1, r6
 801b6c0:	461a      	mov	r2, r3
 801b6c2:	4620      	mov	r0, r4
 801b6c4:	f000 ffd2 	bl	801c66c <__lshift>
 801b6c8:	4606      	mov	r6, r0
 801b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d06e      	beq.n	801b7ae <_dtoa_r+0x90e>
 801b6d0:	ee18 0a10 	vmov	r0, s16
 801b6d4:	4631      	mov	r1, r6
 801b6d6:	f001 f839 	bl	801c74c <__mcmp>
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	da67      	bge.n	801b7ae <_dtoa_r+0x90e>
 801b6de:	9b00      	ldr	r3, [sp, #0]
 801b6e0:	3b01      	subs	r3, #1
 801b6e2:	ee18 1a10 	vmov	r1, s16
 801b6e6:	9300      	str	r3, [sp, #0]
 801b6e8:	220a      	movs	r2, #10
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	4620      	mov	r0, r4
 801b6ee:	f000 fdc3 	bl	801c278 <__multadd>
 801b6f2:	9b08      	ldr	r3, [sp, #32]
 801b6f4:	ee08 0a10 	vmov	s16, r0
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	f000 81b1 	beq.w	801ba60 <_dtoa_r+0xbc0>
 801b6fe:	2300      	movs	r3, #0
 801b700:	4639      	mov	r1, r7
 801b702:	220a      	movs	r2, #10
 801b704:	4620      	mov	r0, r4
 801b706:	f000 fdb7 	bl	801c278 <__multadd>
 801b70a:	9b02      	ldr	r3, [sp, #8]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	4607      	mov	r7, r0
 801b710:	f300 808e 	bgt.w	801b830 <_dtoa_r+0x990>
 801b714:	9b06      	ldr	r3, [sp, #24]
 801b716:	2b02      	cmp	r3, #2
 801b718:	dc51      	bgt.n	801b7be <_dtoa_r+0x91e>
 801b71a:	e089      	b.n	801b830 <_dtoa_r+0x990>
 801b71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b71e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b722:	e74b      	b.n	801b5bc <_dtoa_r+0x71c>
 801b724:	9b03      	ldr	r3, [sp, #12]
 801b726:	1e5e      	subs	r6, r3, #1
 801b728:	9b07      	ldr	r3, [sp, #28]
 801b72a:	42b3      	cmp	r3, r6
 801b72c:	bfbf      	itttt	lt
 801b72e:	9b07      	ldrlt	r3, [sp, #28]
 801b730:	9607      	strlt	r6, [sp, #28]
 801b732:	1af2      	sublt	r2, r6, r3
 801b734:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b736:	bfb6      	itet	lt
 801b738:	189b      	addlt	r3, r3, r2
 801b73a:	1b9e      	subge	r6, r3, r6
 801b73c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b73e:	9b03      	ldr	r3, [sp, #12]
 801b740:	bfb8      	it	lt
 801b742:	2600      	movlt	r6, #0
 801b744:	2b00      	cmp	r3, #0
 801b746:	bfb7      	itett	lt
 801b748:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b74c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b750:	1a9d      	sublt	r5, r3, r2
 801b752:	2300      	movlt	r3, #0
 801b754:	e734      	b.n	801b5c0 <_dtoa_r+0x720>
 801b756:	9e07      	ldr	r6, [sp, #28]
 801b758:	9d04      	ldr	r5, [sp, #16]
 801b75a:	9f08      	ldr	r7, [sp, #32]
 801b75c:	e73b      	b.n	801b5d6 <_dtoa_r+0x736>
 801b75e:	9a07      	ldr	r2, [sp, #28]
 801b760:	e767      	b.n	801b632 <_dtoa_r+0x792>
 801b762:	9b06      	ldr	r3, [sp, #24]
 801b764:	2b01      	cmp	r3, #1
 801b766:	dc18      	bgt.n	801b79a <_dtoa_r+0x8fa>
 801b768:	f1ba 0f00 	cmp.w	sl, #0
 801b76c:	d115      	bne.n	801b79a <_dtoa_r+0x8fa>
 801b76e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b772:	b993      	cbnz	r3, 801b79a <_dtoa_r+0x8fa>
 801b774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b778:	0d1b      	lsrs	r3, r3, #20
 801b77a:	051b      	lsls	r3, r3, #20
 801b77c:	b183      	cbz	r3, 801b7a0 <_dtoa_r+0x900>
 801b77e:	9b04      	ldr	r3, [sp, #16]
 801b780:	3301      	adds	r3, #1
 801b782:	9304      	str	r3, [sp, #16]
 801b784:	9b05      	ldr	r3, [sp, #20]
 801b786:	3301      	adds	r3, #1
 801b788:	9305      	str	r3, [sp, #20]
 801b78a:	f04f 0801 	mov.w	r8, #1
 801b78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b790:	2b00      	cmp	r3, #0
 801b792:	f47f af6a 	bne.w	801b66a <_dtoa_r+0x7ca>
 801b796:	2001      	movs	r0, #1
 801b798:	e76f      	b.n	801b67a <_dtoa_r+0x7da>
 801b79a:	f04f 0800 	mov.w	r8, #0
 801b79e:	e7f6      	b.n	801b78e <_dtoa_r+0x8ee>
 801b7a0:	4698      	mov	r8, r3
 801b7a2:	e7f4      	b.n	801b78e <_dtoa_r+0x8ee>
 801b7a4:	f43f af7d 	beq.w	801b6a2 <_dtoa_r+0x802>
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	301c      	adds	r0, #28
 801b7ac:	e772      	b.n	801b694 <_dtoa_r+0x7f4>
 801b7ae:	9b03      	ldr	r3, [sp, #12]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	dc37      	bgt.n	801b824 <_dtoa_r+0x984>
 801b7b4:	9b06      	ldr	r3, [sp, #24]
 801b7b6:	2b02      	cmp	r3, #2
 801b7b8:	dd34      	ble.n	801b824 <_dtoa_r+0x984>
 801b7ba:	9b03      	ldr	r3, [sp, #12]
 801b7bc:	9302      	str	r3, [sp, #8]
 801b7be:	9b02      	ldr	r3, [sp, #8]
 801b7c0:	b96b      	cbnz	r3, 801b7de <_dtoa_r+0x93e>
 801b7c2:	4631      	mov	r1, r6
 801b7c4:	2205      	movs	r2, #5
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	f000 fd56 	bl	801c278 <__multadd>
 801b7cc:	4601      	mov	r1, r0
 801b7ce:	4606      	mov	r6, r0
 801b7d0:	ee18 0a10 	vmov	r0, s16
 801b7d4:	f000 ffba 	bl	801c74c <__mcmp>
 801b7d8:	2800      	cmp	r0, #0
 801b7da:	f73f adbb 	bgt.w	801b354 <_dtoa_r+0x4b4>
 801b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e0:	9d01      	ldr	r5, [sp, #4]
 801b7e2:	43db      	mvns	r3, r3
 801b7e4:	9300      	str	r3, [sp, #0]
 801b7e6:	f04f 0800 	mov.w	r8, #0
 801b7ea:	4631      	mov	r1, r6
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f000 fd21 	bl	801c234 <_Bfree>
 801b7f2:	2f00      	cmp	r7, #0
 801b7f4:	f43f aea4 	beq.w	801b540 <_dtoa_r+0x6a0>
 801b7f8:	f1b8 0f00 	cmp.w	r8, #0
 801b7fc:	d005      	beq.n	801b80a <_dtoa_r+0x96a>
 801b7fe:	45b8      	cmp	r8, r7
 801b800:	d003      	beq.n	801b80a <_dtoa_r+0x96a>
 801b802:	4641      	mov	r1, r8
 801b804:	4620      	mov	r0, r4
 801b806:	f000 fd15 	bl	801c234 <_Bfree>
 801b80a:	4639      	mov	r1, r7
 801b80c:	4620      	mov	r0, r4
 801b80e:	f000 fd11 	bl	801c234 <_Bfree>
 801b812:	e695      	b.n	801b540 <_dtoa_r+0x6a0>
 801b814:	2600      	movs	r6, #0
 801b816:	4637      	mov	r7, r6
 801b818:	e7e1      	b.n	801b7de <_dtoa_r+0x93e>
 801b81a:	9700      	str	r7, [sp, #0]
 801b81c:	4637      	mov	r7, r6
 801b81e:	e599      	b.n	801b354 <_dtoa_r+0x4b4>
 801b820:	40240000 	.word	0x40240000
 801b824:	9b08      	ldr	r3, [sp, #32]
 801b826:	2b00      	cmp	r3, #0
 801b828:	f000 80ca 	beq.w	801b9c0 <_dtoa_r+0xb20>
 801b82c:	9b03      	ldr	r3, [sp, #12]
 801b82e:	9302      	str	r3, [sp, #8]
 801b830:	2d00      	cmp	r5, #0
 801b832:	dd05      	ble.n	801b840 <_dtoa_r+0x9a0>
 801b834:	4639      	mov	r1, r7
 801b836:	462a      	mov	r2, r5
 801b838:	4620      	mov	r0, r4
 801b83a:	f000 ff17 	bl	801c66c <__lshift>
 801b83e:	4607      	mov	r7, r0
 801b840:	f1b8 0f00 	cmp.w	r8, #0
 801b844:	d05b      	beq.n	801b8fe <_dtoa_r+0xa5e>
 801b846:	6879      	ldr	r1, [r7, #4]
 801b848:	4620      	mov	r0, r4
 801b84a:	f000 fcb3 	bl	801c1b4 <_Balloc>
 801b84e:	4605      	mov	r5, r0
 801b850:	b928      	cbnz	r0, 801b85e <_dtoa_r+0x9be>
 801b852:	4b87      	ldr	r3, [pc, #540]	; (801ba70 <_dtoa_r+0xbd0>)
 801b854:	4602      	mov	r2, r0
 801b856:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b85a:	f7ff bb3b 	b.w	801aed4 <_dtoa_r+0x34>
 801b85e:	693a      	ldr	r2, [r7, #16]
 801b860:	3202      	adds	r2, #2
 801b862:	0092      	lsls	r2, r2, #2
 801b864:	f107 010c 	add.w	r1, r7, #12
 801b868:	300c      	adds	r0, #12
 801b86a:	f000 fc95 	bl	801c198 <memcpy>
 801b86e:	2201      	movs	r2, #1
 801b870:	4629      	mov	r1, r5
 801b872:	4620      	mov	r0, r4
 801b874:	f000 fefa 	bl	801c66c <__lshift>
 801b878:	9b01      	ldr	r3, [sp, #4]
 801b87a:	f103 0901 	add.w	r9, r3, #1
 801b87e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b882:	4413      	add	r3, r2
 801b884:	9305      	str	r3, [sp, #20]
 801b886:	f00a 0301 	and.w	r3, sl, #1
 801b88a:	46b8      	mov	r8, r7
 801b88c:	9304      	str	r3, [sp, #16]
 801b88e:	4607      	mov	r7, r0
 801b890:	4631      	mov	r1, r6
 801b892:	ee18 0a10 	vmov	r0, s16
 801b896:	f7ff fa75 	bl	801ad84 <quorem>
 801b89a:	4641      	mov	r1, r8
 801b89c:	9002      	str	r0, [sp, #8]
 801b89e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b8a2:	ee18 0a10 	vmov	r0, s16
 801b8a6:	f000 ff51 	bl	801c74c <__mcmp>
 801b8aa:	463a      	mov	r2, r7
 801b8ac:	9003      	str	r0, [sp, #12]
 801b8ae:	4631      	mov	r1, r6
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	f000 ff67 	bl	801c784 <__mdiff>
 801b8b6:	68c2      	ldr	r2, [r0, #12]
 801b8b8:	f109 3bff 	add.w	fp, r9, #4294967295
 801b8bc:	4605      	mov	r5, r0
 801b8be:	bb02      	cbnz	r2, 801b902 <_dtoa_r+0xa62>
 801b8c0:	4601      	mov	r1, r0
 801b8c2:	ee18 0a10 	vmov	r0, s16
 801b8c6:	f000 ff41 	bl	801c74c <__mcmp>
 801b8ca:	4602      	mov	r2, r0
 801b8cc:	4629      	mov	r1, r5
 801b8ce:	4620      	mov	r0, r4
 801b8d0:	9207      	str	r2, [sp, #28]
 801b8d2:	f000 fcaf 	bl	801c234 <_Bfree>
 801b8d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b8da:	ea43 0102 	orr.w	r1, r3, r2
 801b8de:	9b04      	ldr	r3, [sp, #16]
 801b8e0:	430b      	orrs	r3, r1
 801b8e2:	464d      	mov	r5, r9
 801b8e4:	d10f      	bne.n	801b906 <_dtoa_r+0xa66>
 801b8e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b8ea:	d02a      	beq.n	801b942 <_dtoa_r+0xaa2>
 801b8ec:	9b03      	ldr	r3, [sp, #12]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	dd02      	ble.n	801b8f8 <_dtoa_r+0xa58>
 801b8f2:	9b02      	ldr	r3, [sp, #8]
 801b8f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b8f8:	f88b a000 	strb.w	sl, [fp]
 801b8fc:	e775      	b.n	801b7ea <_dtoa_r+0x94a>
 801b8fe:	4638      	mov	r0, r7
 801b900:	e7ba      	b.n	801b878 <_dtoa_r+0x9d8>
 801b902:	2201      	movs	r2, #1
 801b904:	e7e2      	b.n	801b8cc <_dtoa_r+0xa2c>
 801b906:	9b03      	ldr	r3, [sp, #12]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	db04      	blt.n	801b916 <_dtoa_r+0xa76>
 801b90c:	9906      	ldr	r1, [sp, #24]
 801b90e:	430b      	orrs	r3, r1
 801b910:	9904      	ldr	r1, [sp, #16]
 801b912:	430b      	orrs	r3, r1
 801b914:	d122      	bne.n	801b95c <_dtoa_r+0xabc>
 801b916:	2a00      	cmp	r2, #0
 801b918:	ddee      	ble.n	801b8f8 <_dtoa_r+0xa58>
 801b91a:	ee18 1a10 	vmov	r1, s16
 801b91e:	2201      	movs	r2, #1
 801b920:	4620      	mov	r0, r4
 801b922:	f000 fea3 	bl	801c66c <__lshift>
 801b926:	4631      	mov	r1, r6
 801b928:	ee08 0a10 	vmov	s16, r0
 801b92c:	f000 ff0e 	bl	801c74c <__mcmp>
 801b930:	2800      	cmp	r0, #0
 801b932:	dc03      	bgt.n	801b93c <_dtoa_r+0xa9c>
 801b934:	d1e0      	bne.n	801b8f8 <_dtoa_r+0xa58>
 801b936:	f01a 0f01 	tst.w	sl, #1
 801b93a:	d0dd      	beq.n	801b8f8 <_dtoa_r+0xa58>
 801b93c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b940:	d1d7      	bne.n	801b8f2 <_dtoa_r+0xa52>
 801b942:	2339      	movs	r3, #57	; 0x39
 801b944:	f88b 3000 	strb.w	r3, [fp]
 801b948:	462b      	mov	r3, r5
 801b94a:	461d      	mov	r5, r3
 801b94c:	3b01      	subs	r3, #1
 801b94e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b952:	2a39      	cmp	r2, #57	; 0x39
 801b954:	d071      	beq.n	801ba3a <_dtoa_r+0xb9a>
 801b956:	3201      	adds	r2, #1
 801b958:	701a      	strb	r2, [r3, #0]
 801b95a:	e746      	b.n	801b7ea <_dtoa_r+0x94a>
 801b95c:	2a00      	cmp	r2, #0
 801b95e:	dd07      	ble.n	801b970 <_dtoa_r+0xad0>
 801b960:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b964:	d0ed      	beq.n	801b942 <_dtoa_r+0xaa2>
 801b966:	f10a 0301 	add.w	r3, sl, #1
 801b96a:	f88b 3000 	strb.w	r3, [fp]
 801b96e:	e73c      	b.n	801b7ea <_dtoa_r+0x94a>
 801b970:	9b05      	ldr	r3, [sp, #20]
 801b972:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b976:	4599      	cmp	r9, r3
 801b978:	d047      	beq.n	801ba0a <_dtoa_r+0xb6a>
 801b97a:	ee18 1a10 	vmov	r1, s16
 801b97e:	2300      	movs	r3, #0
 801b980:	220a      	movs	r2, #10
 801b982:	4620      	mov	r0, r4
 801b984:	f000 fc78 	bl	801c278 <__multadd>
 801b988:	45b8      	cmp	r8, r7
 801b98a:	ee08 0a10 	vmov	s16, r0
 801b98e:	f04f 0300 	mov.w	r3, #0
 801b992:	f04f 020a 	mov.w	r2, #10
 801b996:	4641      	mov	r1, r8
 801b998:	4620      	mov	r0, r4
 801b99a:	d106      	bne.n	801b9aa <_dtoa_r+0xb0a>
 801b99c:	f000 fc6c 	bl	801c278 <__multadd>
 801b9a0:	4680      	mov	r8, r0
 801b9a2:	4607      	mov	r7, r0
 801b9a4:	f109 0901 	add.w	r9, r9, #1
 801b9a8:	e772      	b.n	801b890 <_dtoa_r+0x9f0>
 801b9aa:	f000 fc65 	bl	801c278 <__multadd>
 801b9ae:	4639      	mov	r1, r7
 801b9b0:	4680      	mov	r8, r0
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	220a      	movs	r2, #10
 801b9b6:	4620      	mov	r0, r4
 801b9b8:	f000 fc5e 	bl	801c278 <__multadd>
 801b9bc:	4607      	mov	r7, r0
 801b9be:	e7f1      	b.n	801b9a4 <_dtoa_r+0xb04>
 801b9c0:	9b03      	ldr	r3, [sp, #12]
 801b9c2:	9302      	str	r3, [sp, #8]
 801b9c4:	9d01      	ldr	r5, [sp, #4]
 801b9c6:	ee18 0a10 	vmov	r0, s16
 801b9ca:	4631      	mov	r1, r6
 801b9cc:	f7ff f9da 	bl	801ad84 <quorem>
 801b9d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b9d4:	9b01      	ldr	r3, [sp, #4]
 801b9d6:	f805 ab01 	strb.w	sl, [r5], #1
 801b9da:	1aea      	subs	r2, r5, r3
 801b9dc:	9b02      	ldr	r3, [sp, #8]
 801b9de:	4293      	cmp	r3, r2
 801b9e0:	dd09      	ble.n	801b9f6 <_dtoa_r+0xb56>
 801b9e2:	ee18 1a10 	vmov	r1, s16
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	220a      	movs	r2, #10
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f000 fc44 	bl	801c278 <__multadd>
 801b9f0:	ee08 0a10 	vmov	s16, r0
 801b9f4:	e7e7      	b.n	801b9c6 <_dtoa_r+0xb26>
 801b9f6:	9b02      	ldr	r3, [sp, #8]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	bfc8      	it	gt
 801b9fc:	461d      	movgt	r5, r3
 801b9fe:	9b01      	ldr	r3, [sp, #4]
 801ba00:	bfd8      	it	le
 801ba02:	2501      	movle	r5, #1
 801ba04:	441d      	add	r5, r3
 801ba06:	f04f 0800 	mov.w	r8, #0
 801ba0a:	ee18 1a10 	vmov	r1, s16
 801ba0e:	2201      	movs	r2, #1
 801ba10:	4620      	mov	r0, r4
 801ba12:	f000 fe2b 	bl	801c66c <__lshift>
 801ba16:	4631      	mov	r1, r6
 801ba18:	ee08 0a10 	vmov	s16, r0
 801ba1c:	f000 fe96 	bl	801c74c <__mcmp>
 801ba20:	2800      	cmp	r0, #0
 801ba22:	dc91      	bgt.n	801b948 <_dtoa_r+0xaa8>
 801ba24:	d102      	bne.n	801ba2c <_dtoa_r+0xb8c>
 801ba26:	f01a 0f01 	tst.w	sl, #1
 801ba2a:	d18d      	bne.n	801b948 <_dtoa_r+0xaa8>
 801ba2c:	462b      	mov	r3, r5
 801ba2e:	461d      	mov	r5, r3
 801ba30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ba34:	2a30      	cmp	r2, #48	; 0x30
 801ba36:	d0fa      	beq.n	801ba2e <_dtoa_r+0xb8e>
 801ba38:	e6d7      	b.n	801b7ea <_dtoa_r+0x94a>
 801ba3a:	9a01      	ldr	r2, [sp, #4]
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d184      	bne.n	801b94a <_dtoa_r+0xaaa>
 801ba40:	9b00      	ldr	r3, [sp, #0]
 801ba42:	3301      	adds	r3, #1
 801ba44:	9300      	str	r3, [sp, #0]
 801ba46:	2331      	movs	r3, #49	; 0x31
 801ba48:	7013      	strb	r3, [r2, #0]
 801ba4a:	e6ce      	b.n	801b7ea <_dtoa_r+0x94a>
 801ba4c:	4b09      	ldr	r3, [pc, #36]	; (801ba74 <_dtoa_r+0xbd4>)
 801ba4e:	f7ff ba95 	b.w	801af7c <_dtoa_r+0xdc>
 801ba52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	f47f aa6e 	bne.w	801af36 <_dtoa_r+0x96>
 801ba5a:	4b07      	ldr	r3, [pc, #28]	; (801ba78 <_dtoa_r+0xbd8>)
 801ba5c:	f7ff ba8e 	b.w	801af7c <_dtoa_r+0xdc>
 801ba60:	9b02      	ldr	r3, [sp, #8]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	dcae      	bgt.n	801b9c4 <_dtoa_r+0xb24>
 801ba66:	9b06      	ldr	r3, [sp, #24]
 801ba68:	2b02      	cmp	r3, #2
 801ba6a:	f73f aea8 	bgt.w	801b7be <_dtoa_r+0x91e>
 801ba6e:	e7a9      	b.n	801b9c4 <_dtoa_r+0xb24>
 801ba70:	08051c40 	.word	0x08051c40
 801ba74:	08051a40 	.word	0x08051a40
 801ba78:	08051bc1 	.word	0x08051bc1

0801ba7c <rshift>:
 801ba7c:	6903      	ldr	r3, [r0, #16]
 801ba7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ba82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba86:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ba8a:	f100 0414 	add.w	r4, r0, #20
 801ba8e:	dd45      	ble.n	801bb1c <rshift+0xa0>
 801ba90:	f011 011f 	ands.w	r1, r1, #31
 801ba94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ba98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ba9c:	d10c      	bne.n	801bab8 <rshift+0x3c>
 801ba9e:	f100 0710 	add.w	r7, r0, #16
 801baa2:	4629      	mov	r1, r5
 801baa4:	42b1      	cmp	r1, r6
 801baa6:	d334      	bcc.n	801bb12 <rshift+0x96>
 801baa8:	1a9b      	subs	r3, r3, r2
 801baaa:	009b      	lsls	r3, r3, #2
 801baac:	1eea      	subs	r2, r5, #3
 801baae:	4296      	cmp	r6, r2
 801bab0:	bf38      	it	cc
 801bab2:	2300      	movcc	r3, #0
 801bab4:	4423      	add	r3, r4
 801bab6:	e015      	b.n	801bae4 <rshift+0x68>
 801bab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801babc:	f1c1 0820 	rsb	r8, r1, #32
 801bac0:	40cf      	lsrs	r7, r1
 801bac2:	f105 0e04 	add.w	lr, r5, #4
 801bac6:	46a1      	mov	r9, r4
 801bac8:	4576      	cmp	r6, lr
 801baca:	46f4      	mov	ip, lr
 801bacc:	d815      	bhi.n	801bafa <rshift+0x7e>
 801bace:	1a9a      	subs	r2, r3, r2
 801bad0:	0092      	lsls	r2, r2, #2
 801bad2:	3a04      	subs	r2, #4
 801bad4:	3501      	adds	r5, #1
 801bad6:	42ae      	cmp	r6, r5
 801bad8:	bf38      	it	cc
 801bada:	2200      	movcc	r2, #0
 801badc:	18a3      	adds	r3, r4, r2
 801bade:	50a7      	str	r7, [r4, r2]
 801bae0:	b107      	cbz	r7, 801bae4 <rshift+0x68>
 801bae2:	3304      	adds	r3, #4
 801bae4:	1b1a      	subs	r2, r3, r4
 801bae6:	42a3      	cmp	r3, r4
 801bae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801baec:	bf08      	it	eq
 801baee:	2300      	moveq	r3, #0
 801baf0:	6102      	str	r2, [r0, #16]
 801baf2:	bf08      	it	eq
 801baf4:	6143      	streq	r3, [r0, #20]
 801baf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bafa:	f8dc c000 	ldr.w	ip, [ip]
 801bafe:	fa0c fc08 	lsl.w	ip, ip, r8
 801bb02:	ea4c 0707 	orr.w	r7, ip, r7
 801bb06:	f849 7b04 	str.w	r7, [r9], #4
 801bb0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bb0e:	40cf      	lsrs	r7, r1
 801bb10:	e7da      	b.n	801bac8 <rshift+0x4c>
 801bb12:	f851 cb04 	ldr.w	ip, [r1], #4
 801bb16:	f847 cf04 	str.w	ip, [r7, #4]!
 801bb1a:	e7c3      	b.n	801baa4 <rshift+0x28>
 801bb1c:	4623      	mov	r3, r4
 801bb1e:	e7e1      	b.n	801bae4 <rshift+0x68>

0801bb20 <__hexdig_fun>:
 801bb20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801bb24:	2b09      	cmp	r3, #9
 801bb26:	d802      	bhi.n	801bb2e <__hexdig_fun+0xe>
 801bb28:	3820      	subs	r0, #32
 801bb2a:	b2c0      	uxtb	r0, r0
 801bb2c:	4770      	bx	lr
 801bb2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801bb32:	2b05      	cmp	r3, #5
 801bb34:	d801      	bhi.n	801bb3a <__hexdig_fun+0x1a>
 801bb36:	3847      	subs	r0, #71	; 0x47
 801bb38:	e7f7      	b.n	801bb2a <__hexdig_fun+0xa>
 801bb3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801bb3e:	2b05      	cmp	r3, #5
 801bb40:	d801      	bhi.n	801bb46 <__hexdig_fun+0x26>
 801bb42:	3827      	subs	r0, #39	; 0x27
 801bb44:	e7f1      	b.n	801bb2a <__hexdig_fun+0xa>
 801bb46:	2000      	movs	r0, #0
 801bb48:	4770      	bx	lr
	...

0801bb4c <__gethex>:
 801bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb50:	ed2d 8b02 	vpush	{d8}
 801bb54:	b089      	sub	sp, #36	; 0x24
 801bb56:	ee08 0a10 	vmov	s16, r0
 801bb5a:	9304      	str	r3, [sp, #16]
 801bb5c:	4bb4      	ldr	r3, [pc, #720]	; (801be30 <__gethex+0x2e4>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	9301      	str	r3, [sp, #4]
 801bb62:	4618      	mov	r0, r3
 801bb64:	468b      	mov	fp, r1
 801bb66:	4690      	mov	r8, r2
 801bb68:	f7fc fc3c 	bl	80183e4 <strlen>
 801bb6c:	9b01      	ldr	r3, [sp, #4]
 801bb6e:	f8db 2000 	ldr.w	r2, [fp]
 801bb72:	4403      	add	r3, r0
 801bb74:	4682      	mov	sl, r0
 801bb76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bb7a:	9305      	str	r3, [sp, #20]
 801bb7c:	1c93      	adds	r3, r2, #2
 801bb7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bb82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bb86:	32fe      	adds	r2, #254	; 0xfe
 801bb88:	18d1      	adds	r1, r2, r3
 801bb8a:	461f      	mov	r7, r3
 801bb8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bb90:	9100      	str	r1, [sp, #0]
 801bb92:	2830      	cmp	r0, #48	; 0x30
 801bb94:	d0f8      	beq.n	801bb88 <__gethex+0x3c>
 801bb96:	f7ff ffc3 	bl	801bb20 <__hexdig_fun>
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	2800      	cmp	r0, #0
 801bb9e:	d13a      	bne.n	801bc16 <__gethex+0xca>
 801bba0:	9901      	ldr	r1, [sp, #4]
 801bba2:	4652      	mov	r2, sl
 801bba4:	4638      	mov	r0, r7
 801bba6:	f001 fa33 	bl	801d010 <strncmp>
 801bbaa:	4605      	mov	r5, r0
 801bbac:	2800      	cmp	r0, #0
 801bbae:	d168      	bne.n	801bc82 <__gethex+0x136>
 801bbb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801bbb4:	eb07 060a 	add.w	r6, r7, sl
 801bbb8:	f7ff ffb2 	bl	801bb20 <__hexdig_fun>
 801bbbc:	2800      	cmp	r0, #0
 801bbbe:	d062      	beq.n	801bc86 <__gethex+0x13a>
 801bbc0:	4633      	mov	r3, r6
 801bbc2:	7818      	ldrb	r0, [r3, #0]
 801bbc4:	2830      	cmp	r0, #48	; 0x30
 801bbc6:	461f      	mov	r7, r3
 801bbc8:	f103 0301 	add.w	r3, r3, #1
 801bbcc:	d0f9      	beq.n	801bbc2 <__gethex+0x76>
 801bbce:	f7ff ffa7 	bl	801bb20 <__hexdig_fun>
 801bbd2:	2301      	movs	r3, #1
 801bbd4:	fab0 f480 	clz	r4, r0
 801bbd8:	0964      	lsrs	r4, r4, #5
 801bbda:	4635      	mov	r5, r6
 801bbdc:	9300      	str	r3, [sp, #0]
 801bbde:	463a      	mov	r2, r7
 801bbe0:	4616      	mov	r6, r2
 801bbe2:	3201      	adds	r2, #1
 801bbe4:	7830      	ldrb	r0, [r6, #0]
 801bbe6:	f7ff ff9b 	bl	801bb20 <__hexdig_fun>
 801bbea:	2800      	cmp	r0, #0
 801bbec:	d1f8      	bne.n	801bbe0 <__gethex+0x94>
 801bbee:	9901      	ldr	r1, [sp, #4]
 801bbf0:	4652      	mov	r2, sl
 801bbf2:	4630      	mov	r0, r6
 801bbf4:	f001 fa0c 	bl	801d010 <strncmp>
 801bbf8:	b980      	cbnz	r0, 801bc1c <__gethex+0xd0>
 801bbfa:	b94d      	cbnz	r5, 801bc10 <__gethex+0xc4>
 801bbfc:	eb06 050a 	add.w	r5, r6, sl
 801bc00:	462a      	mov	r2, r5
 801bc02:	4616      	mov	r6, r2
 801bc04:	3201      	adds	r2, #1
 801bc06:	7830      	ldrb	r0, [r6, #0]
 801bc08:	f7ff ff8a 	bl	801bb20 <__hexdig_fun>
 801bc0c:	2800      	cmp	r0, #0
 801bc0e:	d1f8      	bne.n	801bc02 <__gethex+0xb6>
 801bc10:	1bad      	subs	r5, r5, r6
 801bc12:	00ad      	lsls	r5, r5, #2
 801bc14:	e004      	b.n	801bc20 <__gethex+0xd4>
 801bc16:	2400      	movs	r4, #0
 801bc18:	4625      	mov	r5, r4
 801bc1a:	e7e0      	b.n	801bbde <__gethex+0x92>
 801bc1c:	2d00      	cmp	r5, #0
 801bc1e:	d1f7      	bne.n	801bc10 <__gethex+0xc4>
 801bc20:	7833      	ldrb	r3, [r6, #0]
 801bc22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bc26:	2b50      	cmp	r3, #80	; 0x50
 801bc28:	d13b      	bne.n	801bca2 <__gethex+0x156>
 801bc2a:	7873      	ldrb	r3, [r6, #1]
 801bc2c:	2b2b      	cmp	r3, #43	; 0x2b
 801bc2e:	d02c      	beq.n	801bc8a <__gethex+0x13e>
 801bc30:	2b2d      	cmp	r3, #45	; 0x2d
 801bc32:	d02e      	beq.n	801bc92 <__gethex+0x146>
 801bc34:	1c71      	adds	r1, r6, #1
 801bc36:	f04f 0900 	mov.w	r9, #0
 801bc3a:	7808      	ldrb	r0, [r1, #0]
 801bc3c:	f7ff ff70 	bl	801bb20 <__hexdig_fun>
 801bc40:	1e43      	subs	r3, r0, #1
 801bc42:	b2db      	uxtb	r3, r3
 801bc44:	2b18      	cmp	r3, #24
 801bc46:	d82c      	bhi.n	801bca2 <__gethex+0x156>
 801bc48:	f1a0 0210 	sub.w	r2, r0, #16
 801bc4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bc50:	f7ff ff66 	bl	801bb20 <__hexdig_fun>
 801bc54:	1e43      	subs	r3, r0, #1
 801bc56:	b2db      	uxtb	r3, r3
 801bc58:	2b18      	cmp	r3, #24
 801bc5a:	d91d      	bls.n	801bc98 <__gethex+0x14c>
 801bc5c:	f1b9 0f00 	cmp.w	r9, #0
 801bc60:	d000      	beq.n	801bc64 <__gethex+0x118>
 801bc62:	4252      	negs	r2, r2
 801bc64:	4415      	add	r5, r2
 801bc66:	f8cb 1000 	str.w	r1, [fp]
 801bc6a:	b1e4      	cbz	r4, 801bca6 <__gethex+0x15a>
 801bc6c:	9b00      	ldr	r3, [sp, #0]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	bf14      	ite	ne
 801bc72:	2700      	movne	r7, #0
 801bc74:	2706      	moveq	r7, #6
 801bc76:	4638      	mov	r0, r7
 801bc78:	b009      	add	sp, #36	; 0x24
 801bc7a:	ecbd 8b02 	vpop	{d8}
 801bc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc82:	463e      	mov	r6, r7
 801bc84:	4625      	mov	r5, r4
 801bc86:	2401      	movs	r4, #1
 801bc88:	e7ca      	b.n	801bc20 <__gethex+0xd4>
 801bc8a:	f04f 0900 	mov.w	r9, #0
 801bc8e:	1cb1      	adds	r1, r6, #2
 801bc90:	e7d3      	b.n	801bc3a <__gethex+0xee>
 801bc92:	f04f 0901 	mov.w	r9, #1
 801bc96:	e7fa      	b.n	801bc8e <__gethex+0x142>
 801bc98:	230a      	movs	r3, #10
 801bc9a:	fb03 0202 	mla	r2, r3, r2, r0
 801bc9e:	3a10      	subs	r2, #16
 801bca0:	e7d4      	b.n	801bc4c <__gethex+0x100>
 801bca2:	4631      	mov	r1, r6
 801bca4:	e7df      	b.n	801bc66 <__gethex+0x11a>
 801bca6:	1bf3      	subs	r3, r6, r7
 801bca8:	3b01      	subs	r3, #1
 801bcaa:	4621      	mov	r1, r4
 801bcac:	2b07      	cmp	r3, #7
 801bcae:	dc0b      	bgt.n	801bcc8 <__gethex+0x17c>
 801bcb0:	ee18 0a10 	vmov	r0, s16
 801bcb4:	f000 fa7e 	bl	801c1b4 <_Balloc>
 801bcb8:	4604      	mov	r4, r0
 801bcba:	b940      	cbnz	r0, 801bcce <__gethex+0x182>
 801bcbc:	4b5d      	ldr	r3, [pc, #372]	; (801be34 <__gethex+0x2e8>)
 801bcbe:	4602      	mov	r2, r0
 801bcc0:	21de      	movs	r1, #222	; 0xde
 801bcc2:	485d      	ldr	r0, [pc, #372]	; (801be38 <__gethex+0x2ec>)
 801bcc4:	f001 f9c6 	bl	801d054 <__assert_func>
 801bcc8:	3101      	adds	r1, #1
 801bcca:	105b      	asrs	r3, r3, #1
 801bccc:	e7ee      	b.n	801bcac <__gethex+0x160>
 801bcce:	f100 0914 	add.w	r9, r0, #20
 801bcd2:	f04f 0b00 	mov.w	fp, #0
 801bcd6:	f1ca 0301 	rsb	r3, sl, #1
 801bcda:	f8cd 9008 	str.w	r9, [sp, #8]
 801bcde:	f8cd b000 	str.w	fp, [sp]
 801bce2:	9306      	str	r3, [sp, #24]
 801bce4:	42b7      	cmp	r7, r6
 801bce6:	d340      	bcc.n	801bd6a <__gethex+0x21e>
 801bce8:	9802      	ldr	r0, [sp, #8]
 801bcea:	9b00      	ldr	r3, [sp, #0]
 801bcec:	f840 3b04 	str.w	r3, [r0], #4
 801bcf0:	eba0 0009 	sub.w	r0, r0, r9
 801bcf4:	1080      	asrs	r0, r0, #2
 801bcf6:	0146      	lsls	r6, r0, #5
 801bcf8:	6120      	str	r0, [r4, #16]
 801bcfa:	4618      	mov	r0, r3
 801bcfc:	f000 fb4c 	bl	801c398 <__hi0bits>
 801bd00:	1a30      	subs	r0, r6, r0
 801bd02:	f8d8 6000 	ldr.w	r6, [r8]
 801bd06:	42b0      	cmp	r0, r6
 801bd08:	dd63      	ble.n	801bdd2 <__gethex+0x286>
 801bd0a:	1b87      	subs	r7, r0, r6
 801bd0c:	4639      	mov	r1, r7
 801bd0e:	4620      	mov	r0, r4
 801bd10:	f000 fef0 	bl	801caf4 <__any_on>
 801bd14:	4682      	mov	sl, r0
 801bd16:	b1a8      	cbz	r0, 801bd44 <__gethex+0x1f8>
 801bd18:	1e7b      	subs	r3, r7, #1
 801bd1a:	1159      	asrs	r1, r3, #5
 801bd1c:	f003 021f 	and.w	r2, r3, #31
 801bd20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801bd24:	f04f 0a01 	mov.w	sl, #1
 801bd28:	fa0a f202 	lsl.w	r2, sl, r2
 801bd2c:	420a      	tst	r2, r1
 801bd2e:	d009      	beq.n	801bd44 <__gethex+0x1f8>
 801bd30:	4553      	cmp	r3, sl
 801bd32:	dd05      	ble.n	801bd40 <__gethex+0x1f4>
 801bd34:	1eb9      	subs	r1, r7, #2
 801bd36:	4620      	mov	r0, r4
 801bd38:	f000 fedc 	bl	801caf4 <__any_on>
 801bd3c:	2800      	cmp	r0, #0
 801bd3e:	d145      	bne.n	801bdcc <__gethex+0x280>
 801bd40:	f04f 0a02 	mov.w	sl, #2
 801bd44:	4639      	mov	r1, r7
 801bd46:	4620      	mov	r0, r4
 801bd48:	f7ff fe98 	bl	801ba7c <rshift>
 801bd4c:	443d      	add	r5, r7
 801bd4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bd52:	42ab      	cmp	r3, r5
 801bd54:	da4c      	bge.n	801bdf0 <__gethex+0x2a4>
 801bd56:	ee18 0a10 	vmov	r0, s16
 801bd5a:	4621      	mov	r1, r4
 801bd5c:	f000 fa6a 	bl	801c234 <_Bfree>
 801bd60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd62:	2300      	movs	r3, #0
 801bd64:	6013      	str	r3, [r2, #0]
 801bd66:	27a3      	movs	r7, #163	; 0xa3
 801bd68:	e785      	b.n	801bc76 <__gethex+0x12a>
 801bd6a:	1e73      	subs	r3, r6, #1
 801bd6c:	9a05      	ldr	r2, [sp, #20]
 801bd6e:	9303      	str	r3, [sp, #12]
 801bd70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bd74:	4293      	cmp	r3, r2
 801bd76:	d019      	beq.n	801bdac <__gethex+0x260>
 801bd78:	f1bb 0f20 	cmp.w	fp, #32
 801bd7c:	d107      	bne.n	801bd8e <__gethex+0x242>
 801bd7e:	9b02      	ldr	r3, [sp, #8]
 801bd80:	9a00      	ldr	r2, [sp, #0]
 801bd82:	f843 2b04 	str.w	r2, [r3], #4
 801bd86:	9302      	str	r3, [sp, #8]
 801bd88:	2300      	movs	r3, #0
 801bd8a:	9300      	str	r3, [sp, #0]
 801bd8c:	469b      	mov	fp, r3
 801bd8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801bd92:	f7ff fec5 	bl	801bb20 <__hexdig_fun>
 801bd96:	9b00      	ldr	r3, [sp, #0]
 801bd98:	f000 000f 	and.w	r0, r0, #15
 801bd9c:	fa00 f00b 	lsl.w	r0, r0, fp
 801bda0:	4303      	orrs	r3, r0
 801bda2:	9300      	str	r3, [sp, #0]
 801bda4:	f10b 0b04 	add.w	fp, fp, #4
 801bda8:	9b03      	ldr	r3, [sp, #12]
 801bdaa:	e00d      	b.n	801bdc8 <__gethex+0x27c>
 801bdac:	9b03      	ldr	r3, [sp, #12]
 801bdae:	9a06      	ldr	r2, [sp, #24]
 801bdb0:	4413      	add	r3, r2
 801bdb2:	42bb      	cmp	r3, r7
 801bdb4:	d3e0      	bcc.n	801bd78 <__gethex+0x22c>
 801bdb6:	4618      	mov	r0, r3
 801bdb8:	9901      	ldr	r1, [sp, #4]
 801bdba:	9307      	str	r3, [sp, #28]
 801bdbc:	4652      	mov	r2, sl
 801bdbe:	f001 f927 	bl	801d010 <strncmp>
 801bdc2:	9b07      	ldr	r3, [sp, #28]
 801bdc4:	2800      	cmp	r0, #0
 801bdc6:	d1d7      	bne.n	801bd78 <__gethex+0x22c>
 801bdc8:	461e      	mov	r6, r3
 801bdca:	e78b      	b.n	801bce4 <__gethex+0x198>
 801bdcc:	f04f 0a03 	mov.w	sl, #3
 801bdd0:	e7b8      	b.n	801bd44 <__gethex+0x1f8>
 801bdd2:	da0a      	bge.n	801bdea <__gethex+0x29e>
 801bdd4:	1a37      	subs	r7, r6, r0
 801bdd6:	4621      	mov	r1, r4
 801bdd8:	ee18 0a10 	vmov	r0, s16
 801bddc:	463a      	mov	r2, r7
 801bdde:	f000 fc45 	bl	801c66c <__lshift>
 801bde2:	1bed      	subs	r5, r5, r7
 801bde4:	4604      	mov	r4, r0
 801bde6:	f100 0914 	add.w	r9, r0, #20
 801bdea:	f04f 0a00 	mov.w	sl, #0
 801bdee:	e7ae      	b.n	801bd4e <__gethex+0x202>
 801bdf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bdf4:	42a8      	cmp	r0, r5
 801bdf6:	dd72      	ble.n	801bede <__gethex+0x392>
 801bdf8:	1b45      	subs	r5, r0, r5
 801bdfa:	42ae      	cmp	r6, r5
 801bdfc:	dc36      	bgt.n	801be6c <__gethex+0x320>
 801bdfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801be02:	2b02      	cmp	r3, #2
 801be04:	d02a      	beq.n	801be5c <__gethex+0x310>
 801be06:	2b03      	cmp	r3, #3
 801be08:	d02c      	beq.n	801be64 <__gethex+0x318>
 801be0a:	2b01      	cmp	r3, #1
 801be0c:	d11c      	bne.n	801be48 <__gethex+0x2fc>
 801be0e:	42ae      	cmp	r6, r5
 801be10:	d11a      	bne.n	801be48 <__gethex+0x2fc>
 801be12:	2e01      	cmp	r6, #1
 801be14:	d112      	bne.n	801be3c <__gethex+0x2f0>
 801be16:	9a04      	ldr	r2, [sp, #16]
 801be18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801be1c:	6013      	str	r3, [r2, #0]
 801be1e:	2301      	movs	r3, #1
 801be20:	6123      	str	r3, [r4, #16]
 801be22:	f8c9 3000 	str.w	r3, [r9]
 801be26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801be28:	2762      	movs	r7, #98	; 0x62
 801be2a:	601c      	str	r4, [r3, #0]
 801be2c:	e723      	b.n	801bc76 <__gethex+0x12a>
 801be2e:	bf00      	nop
 801be30:	08051cb8 	.word	0x08051cb8
 801be34:	08051c40 	.word	0x08051c40
 801be38:	08051c51 	.word	0x08051c51
 801be3c:	1e71      	subs	r1, r6, #1
 801be3e:	4620      	mov	r0, r4
 801be40:	f000 fe58 	bl	801caf4 <__any_on>
 801be44:	2800      	cmp	r0, #0
 801be46:	d1e6      	bne.n	801be16 <__gethex+0x2ca>
 801be48:	ee18 0a10 	vmov	r0, s16
 801be4c:	4621      	mov	r1, r4
 801be4e:	f000 f9f1 	bl	801c234 <_Bfree>
 801be52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801be54:	2300      	movs	r3, #0
 801be56:	6013      	str	r3, [r2, #0]
 801be58:	2750      	movs	r7, #80	; 0x50
 801be5a:	e70c      	b.n	801bc76 <__gethex+0x12a>
 801be5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d1f2      	bne.n	801be48 <__gethex+0x2fc>
 801be62:	e7d8      	b.n	801be16 <__gethex+0x2ca>
 801be64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801be66:	2b00      	cmp	r3, #0
 801be68:	d1d5      	bne.n	801be16 <__gethex+0x2ca>
 801be6a:	e7ed      	b.n	801be48 <__gethex+0x2fc>
 801be6c:	1e6f      	subs	r7, r5, #1
 801be6e:	f1ba 0f00 	cmp.w	sl, #0
 801be72:	d131      	bne.n	801bed8 <__gethex+0x38c>
 801be74:	b127      	cbz	r7, 801be80 <__gethex+0x334>
 801be76:	4639      	mov	r1, r7
 801be78:	4620      	mov	r0, r4
 801be7a:	f000 fe3b 	bl	801caf4 <__any_on>
 801be7e:	4682      	mov	sl, r0
 801be80:	117b      	asrs	r3, r7, #5
 801be82:	2101      	movs	r1, #1
 801be84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801be88:	f007 071f 	and.w	r7, r7, #31
 801be8c:	fa01 f707 	lsl.w	r7, r1, r7
 801be90:	421f      	tst	r7, r3
 801be92:	4629      	mov	r1, r5
 801be94:	4620      	mov	r0, r4
 801be96:	bf18      	it	ne
 801be98:	f04a 0a02 	orrne.w	sl, sl, #2
 801be9c:	1b76      	subs	r6, r6, r5
 801be9e:	f7ff fded 	bl	801ba7c <rshift>
 801bea2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bea6:	2702      	movs	r7, #2
 801bea8:	f1ba 0f00 	cmp.w	sl, #0
 801beac:	d048      	beq.n	801bf40 <__gethex+0x3f4>
 801beae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801beb2:	2b02      	cmp	r3, #2
 801beb4:	d015      	beq.n	801bee2 <__gethex+0x396>
 801beb6:	2b03      	cmp	r3, #3
 801beb8:	d017      	beq.n	801beea <__gethex+0x39e>
 801beba:	2b01      	cmp	r3, #1
 801bebc:	d109      	bne.n	801bed2 <__gethex+0x386>
 801bebe:	f01a 0f02 	tst.w	sl, #2
 801bec2:	d006      	beq.n	801bed2 <__gethex+0x386>
 801bec4:	f8d9 0000 	ldr.w	r0, [r9]
 801bec8:	ea4a 0a00 	orr.w	sl, sl, r0
 801becc:	f01a 0f01 	tst.w	sl, #1
 801bed0:	d10e      	bne.n	801bef0 <__gethex+0x3a4>
 801bed2:	f047 0710 	orr.w	r7, r7, #16
 801bed6:	e033      	b.n	801bf40 <__gethex+0x3f4>
 801bed8:	f04f 0a01 	mov.w	sl, #1
 801bedc:	e7d0      	b.n	801be80 <__gethex+0x334>
 801bede:	2701      	movs	r7, #1
 801bee0:	e7e2      	b.n	801bea8 <__gethex+0x35c>
 801bee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bee4:	f1c3 0301 	rsb	r3, r3, #1
 801bee8:	9315      	str	r3, [sp, #84]	; 0x54
 801beea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801beec:	2b00      	cmp	r3, #0
 801beee:	d0f0      	beq.n	801bed2 <__gethex+0x386>
 801bef0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bef4:	f104 0314 	add.w	r3, r4, #20
 801bef8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801befc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bf00:	f04f 0c00 	mov.w	ip, #0
 801bf04:	4618      	mov	r0, r3
 801bf06:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bf0e:	d01c      	beq.n	801bf4a <__gethex+0x3fe>
 801bf10:	3201      	adds	r2, #1
 801bf12:	6002      	str	r2, [r0, #0]
 801bf14:	2f02      	cmp	r7, #2
 801bf16:	f104 0314 	add.w	r3, r4, #20
 801bf1a:	d13f      	bne.n	801bf9c <__gethex+0x450>
 801bf1c:	f8d8 2000 	ldr.w	r2, [r8]
 801bf20:	3a01      	subs	r2, #1
 801bf22:	42b2      	cmp	r2, r6
 801bf24:	d10a      	bne.n	801bf3c <__gethex+0x3f0>
 801bf26:	1171      	asrs	r1, r6, #5
 801bf28:	2201      	movs	r2, #1
 801bf2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bf2e:	f006 061f 	and.w	r6, r6, #31
 801bf32:	fa02 f606 	lsl.w	r6, r2, r6
 801bf36:	421e      	tst	r6, r3
 801bf38:	bf18      	it	ne
 801bf3a:	4617      	movne	r7, r2
 801bf3c:	f047 0720 	orr.w	r7, r7, #32
 801bf40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bf42:	601c      	str	r4, [r3, #0]
 801bf44:	9b04      	ldr	r3, [sp, #16]
 801bf46:	601d      	str	r5, [r3, #0]
 801bf48:	e695      	b.n	801bc76 <__gethex+0x12a>
 801bf4a:	4299      	cmp	r1, r3
 801bf4c:	f843 cc04 	str.w	ip, [r3, #-4]
 801bf50:	d8d8      	bhi.n	801bf04 <__gethex+0x3b8>
 801bf52:	68a3      	ldr	r3, [r4, #8]
 801bf54:	459b      	cmp	fp, r3
 801bf56:	db19      	blt.n	801bf8c <__gethex+0x440>
 801bf58:	6861      	ldr	r1, [r4, #4]
 801bf5a:	ee18 0a10 	vmov	r0, s16
 801bf5e:	3101      	adds	r1, #1
 801bf60:	f000 f928 	bl	801c1b4 <_Balloc>
 801bf64:	4681      	mov	r9, r0
 801bf66:	b918      	cbnz	r0, 801bf70 <__gethex+0x424>
 801bf68:	4b1a      	ldr	r3, [pc, #104]	; (801bfd4 <__gethex+0x488>)
 801bf6a:	4602      	mov	r2, r0
 801bf6c:	2184      	movs	r1, #132	; 0x84
 801bf6e:	e6a8      	b.n	801bcc2 <__gethex+0x176>
 801bf70:	6922      	ldr	r2, [r4, #16]
 801bf72:	3202      	adds	r2, #2
 801bf74:	f104 010c 	add.w	r1, r4, #12
 801bf78:	0092      	lsls	r2, r2, #2
 801bf7a:	300c      	adds	r0, #12
 801bf7c:	f000 f90c 	bl	801c198 <memcpy>
 801bf80:	4621      	mov	r1, r4
 801bf82:	ee18 0a10 	vmov	r0, s16
 801bf86:	f000 f955 	bl	801c234 <_Bfree>
 801bf8a:	464c      	mov	r4, r9
 801bf8c:	6923      	ldr	r3, [r4, #16]
 801bf8e:	1c5a      	adds	r2, r3, #1
 801bf90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bf94:	6122      	str	r2, [r4, #16]
 801bf96:	2201      	movs	r2, #1
 801bf98:	615a      	str	r2, [r3, #20]
 801bf9a:	e7bb      	b.n	801bf14 <__gethex+0x3c8>
 801bf9c:	6922      	ldr	r2, [r4, #16]
 801bf9e:	455a      	cmp	r2, fp
 801bfa0:	dd0b      	ble.n	801bfba <__gethex+0x46e>
 801bfa2:	2101      	movs	r1, #1
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f7ff fd69 	bl	801ba7c <rshift>
 801bfaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bfae:	3501      	adds	r5, #1
 801bfb0:	42ab      	cmp	r3, r5
 801bfb2:	f6ff aed0 	blt.w	801bd56 <__gethex+0x20a>
 801bfb6:	2701      	movs	r7, #1
 801bfb8:	e7c0      	b.n	801bf3c <__gethex+0x3f0>
 801bfba:	f016 061f 	ands.w	r6, r6, #31
 801bfbe:	d0fa      	beq.n	801bfb6 <__gethex+0x46a>
 801bfc0:	4453      	add	r3, sl
 801bfc2:	f1c6 0620 	rsb	r6, r6, #32
 801bfc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801bfca:	f000 f9e5 	bl	801c398 <__hi0bits>
 801bfce:	42b0      	cmp	r0, r6
 801bfd0:	dbe7      	blt.n	801bfa2 <__gethex+0x456>
 801bfd2:	e7f0      	b.n	801bfb6 <__gethex+0x46a>
 801bfd4:	08051c40 	.word	0x08051c40

0801bfd8 <L_shift>:
 801bfd8:	f1c2 0208 	rsb	r2, r2, #8
 801bfdc:	0092      	lsls	r2, r2, #2
 801bfde:	b570      	push	{r4, r5, r6, lr}
 801bfe0:	f1c2 0620 	rsb	r6, r2, #32
 801bfe4:	6843      	ldr	r3, [r0, #4]
 801bfe6:	6804      	ldr	r4, [r0, #0]
 801bfe8:	fa03 f506 	lsl.w	r5, r3, r6
 801bfec:	432c      	orrs	r4, r5
 801bfee:	40d3      	lsrs	r3, r2
 801bff0:	6004      	str	r4, [r0, #0]
 801bff2:	f840 3f04 	str.w	r3, [r0, #4]!
 801bff6:	4288      	cmp	r0, r1
 801bff8:	d3f4      	bcc.n	801bfe4 <L_shift+0xc>
 801bffa:	bd70      	pop	{r4, r5, r6, pc}

0801bffc <__match>:
 801bffc:	b530      	push	{r4, r5, lr}
 801bffe:	6803      	ldr	r3, [r0, #0]
 801c000:	3301      	adds	r3, #1
 801c002:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c006:	b914      	cbnz	r4, 801c00e <__match+0x12>
 801c008:	6003      	str	r3, [r0, #0]
 801c00a:	2001      	movs	r0, #1
 801c00c:	bd30      	pop	{r4, r5, pc}
 801c00e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c012:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c016:	2d19      	cmp	r5, #25
 801c018:	bf98      	it	ls
 801c01a:	3220      	addls	r2, #32
 801c01c:	42a2      	cmp	r2, r4
 801c01e:	d0f0      	beq.n	801c002 <__match+0x6>
 801c020:	2000      	movs	r0, #0
 801c022:	e7f3      	b.n	801c00c <__match+0x10>

0801c024 <__hexnan>:
 801c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c028:	680b      	ldr	r3, [r1, #0]
 801c02a:	115e      	asrs	r6, r3, #5
 801c02c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c030:	f013 031f 	ands.w	r3, r3, #31
 801c034:	b087      	sub	sp, #28
 801c036:	bf18      	it	ne
 801c038:	3604      	addne	r6, #4
 801c03a:	2500      	movs	r5, #0
 801c03c:	1f37      	subs	r7, r6, #4
 801c03e:	4690      	mov	r8, r2
 801c040:	6802      	ldr	r2, [r0, #0]
 801c042:	9301      	str	r3, [sp, #4]
 801c044:	4682      	mov	sl, r0
 801c046:	f846 5c04 	str.w	r5, [r6, #-4]
 801c04a:	46b9      	mov	r9, r7
 801c04c:	463c      	mov	r4, r7
 801c04e:	9502      	str	r5, [sp, #8]
 801c050:	46ab      	mov	fp, r5
 801c052:	7851      	ldrb	r1, [r2, #1]
 801c054:	1c53      	adds	r3, r2, #1
 801c056:	9303      	str	r3, [sp, #12]
 801c058:	b341      	cbz	r1, 801c0ac <__hexnan+0x88>
 801c05a:	4608      	mov	r0, r1
 801c05c:	9205      	str	r2, [sp, #20]
 801c05e:	9104      	str	r1, [sp, #16]
 801c060:	f7ff fd5e 	bl	801bb20 <__hexdig_fun>
 801c064:	2800      	cmp	r0, #0
 801c066:	d14f      	bne.n	801c108 <__hexnan+0xe4>
 801c068:	9904      	ldr	r1, [sp, #16]
 801c06a:	9a05      	ldr	r2, [sp, #20]
 801c06c:	2920      	cmp	r1, #32
 801c06e:	d818      	bhi.n	801c0a2 <__hexnan+0x7e>
 801c070:	9b02      	ldr	r3, [sp, #8]
 801c072:	459b      	cmp	fp, r3
 801c074:	dd13      	ble.n	801c09e <__hexnan+0x7a>
 801c076:	454c      	cmp	r4, r9
 801c078:	d206      	bcs.n	801c088 <__hexnan+0x64>
 801c07a:	2d07      	cmp	r5, #7
 801c07c:	dc04      	bgt.n	801c088 <__hexnan+0x64>
 801c07e:	462a      	mov	r2, r5
 801c080:	4649      	mov	r1, r9
 801c082:	4620      	mov	r0, r4
 801c084:	f7ff ffa8 	bl	801bfd8 <L_shift>
 801c088:	4544      	cmp	r4, r8
 801c08a:	d950      	bls.n	801c12e <__hexnan+0x10a>
 801c08c:	2300      	movs	r3, #0
 801c08e:	f1a4 0904 	sub.w	r9, r4, #4
 801c092:	f844 3c04 	str.w	r3, [r4, #-4]
 801c096:	f8cd b008 	str.w	fp, [sp, #8]
 801c09a:	464c      	mov	r4, r9
 801c09c:	461d      	mov	r5, r3
 801c09e:	9a03      	ldr	r2, [sp, #12]
 801c0a0:	e7d7      	b.n	801c052 <__hexnan+0x2e>
 801c0a2:	2929      	cmp	r1, #41	; 0x29
 801c0a4:	d156      	bne.n	801c154 <__hexnan+0x130>
 801c0a6:	3202      	adds	r2, #2
 801c0a8:	f8ca 2000 	str.w	r2, [sl]
 801c0ac:	f1bb 0f00 	cmp.w	fp, #0
 801c0b0:	d050      	beq.n	801c154 <__hexnan+0x130>
 801c0b2:	454c      	cmp	r4, r9
 801c0b4:	d206      	bcs.n	801c0c4 <__hexnan+0xa0>
 801c0b6:	2d07      	cmp	r5, #7
 801c0b8:	dc04      	bgt.n	801c0c4 <__hexnan+0xa0>
 801c0ba:	462a      	mov	r2, r5
 801c0bc:	4649      	mov	r1, r9
 801c0be:	4620      	mov	r0, r4
 801c0c0:	f7ff ff8a 	bl	801bfd8 <L_shift>
 801c0c4:	4544      	cmp	r4, r8
 801c0c6:	d934      	bls.n	801c132 <__hexnan+0x10e>
 801c0c8:	f1a8 0204 	sub.w	r2, r8, #4
 801c0cc:	4623      	mov	r3, r4
 801c0ce:	f853 1b04 	ldr.w	r1, [r3], #4
 801c0d2:	f842 1f04 	str.w	r1, [r2, #4]!
 801c0d6:	429f      	cmp	r7, r3
 801c0d8:	d2f9      	bcs.n	801c0ce <__hexnan+0xaa>
 801c0da:	1b3b      	subs	r3, r7, r4
 801c0dc:	f023 0303 	bic.w	r3, r3, #3
 801c0e0:	3304      	adds	r3, #4
 801c0e2:	3401      	adds	r4, #1
 801c0e4:	3e03      	subs	r6, #3
 801c0e6:	42b4      	cmp	r4, r6
 801c0e8:	bf88      	it	hi
 801c0ea:	2304      	movhi	r3, #4
 801c0ec:	4443      	add	r3, r8
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	f843 2b04 	str.w	r2, [r3], #4
 801c0f4:	429f      	cmp	r7, r3
 801c0f6:	d2fb      	bcs.n	801c0f0 <__hexnan+0xcc>
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	b91b      	cbnz	r3, 801c104 <__hexnan+0xe0>
 801c0fc:	4547      	cmp	r7, r8
 801c0fe:	d127      	bne.n	801c150 <__hexnan+0x12c>
 801c100:	2301      	movs	r3, #1
 801c102:	603b      	str	r3, [r7, #0]
 801c104:	2005      	movs	r0, #5
 801c106:	e026      	b.n	801c156 <__hexnan+0x132>
 801c108:	3501      	adds	r5, #1
 801c10a:	2d08      	cmp	r5, #8
 801c10c:	f10b 0b01 	add.w	fp, fp, #1
 801c110:	dd06      	ble.n	801c120 <__hexnan+0xfc>
 801c112:	4544      	cmp	r4, r8
 801c114:	d9c3      	bls.n	801c09e <__hexnan+0x7a>
 801c116:	2300      	movs	r3, #0
 801c118:	f844 3c04 	str.w	r3, [r4, #-4]
 801c11c:	2501      	movs	r5, #1
 801c11e:	3c04      	subs	r4, #4
 801c120:	6822      	ldr	r2, [r4, #0]
 801c122:	f000 000f 	and.w	r0, r0, #15
 801c126:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c12a:	6022      	str	r2, [r4, #0]
 801c12c:	e7b7      	b.n	801c09e <__hexnan+0x7a>
 801c12e:	2508      	movs	r5, #8
 801c130:	e7b5      	b.n	801c09e <__hexnan+0x7a>
 801c132:	9b01      	ldr	r3, [sp, #4]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d0df      	beq.n	801c0f8 <__hexnan+0xd4>
 801c138:	f04f 32ff 	mov.w	r2, #4294967295
 801c13c:	f1c3 0320 	rsb	r3, r3, #32
 801c140:	fa22 f303 	lsr.w	r3, r2, r3
 801c144:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c148:	401a      	ands	r2, r3
 801c14a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c14e:	e7d3      	b.n	801c0f8 <__hexnan+0xd4>
 801c150:	3f04      	subs	r7, #4
 801c152:	e7d1      	b.n	801c0f8 <__hexnan+0xd4>
 801c154:	2004      	movs	r0, #4
 801c156:	b007      	add	sp, #28
 801c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c15c <_localeconv_r>:
 801c15c:	4800      	ldr	r0, [pc, #0]	; (801c160 <_localeconv_r+0x4>)
 801c15e:	4770      	bx	lr
 801c160:	200001bc 	.word	0x200001bc

0801c164 <malloc>:
 801c164:	4b02      	ldr	r3, [pc, #8]	; (801c170 <malloc+0xc>)
 801c166:	4601      	mov	r1, r0
 801c168:	6818      	ldr	r0, [r3, #0]
 801c16a:	f000 bd67 	b.w	801cc3c <_malloc_r>
 801c16e:	bf00      	nop
 801c170:	20000064 	.word	0x20000064

0801c174 <__ascii_mbtowc>:
 801c174:	b082      	sub	sp, #8
 801c176:	b901      	cbnz	r1, 801c17a <__ascii_mbtowc+0x6>
 801c178:	a901      	add	r1, sp, #4
 801c17a:	b142      	cbz	r2, 801c18e <__ascii_mbtowc+0x1a>
 801c17c:	b14b      	cbz	r3, 801c192 <__ascii_mbtowc+0x1e>
 801c17e:	7813      	ldrb	r3, [r2, #0]
 801c180:	600b      	str	r3, [r1, #0]
 801c182:	7812      	ldrb	r2, [r2, #0]
 801c184:	1e10      	subs	r0, r2, #0
 801c186:	bf18      	it	ne
 801c188:	2001      	movne	r0, #1
 801c18a:	b002      	add	sp, #8
 801c18c:	4770      	bx	lr
 801c18e:	4610      	mov	r0, r2
 801c190:	e7fb      	b.n	801c18a <__ascii_mbtowc+0x16>
 801c192:	f06f 0001 	mvn.w	r0, #1
 801c196:	e7f8      	b.n	801c18a <__ascii_mbtowc+0x16>

0801c198 <memcpy>:
 801c198:	440a      	add	r2, r1
 801c19a:	4291      	cmp	r1, r2
 801c19c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c1a0:	d100      	bne.n	801c1a4 <memcpy+0xc>
 801c1a2:	4770      	bx	lr
 801c1a4:	b510      	push	{r4, lr}
 801c1a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c1aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c1ae:	4291      	cmp	r1, r2
 801c1b0:	d1f9      	bne.n	801c1a6 <memcpy+0xe>
 801c1b2:	bd10      	pop	{r4, pc}

0801c1b4 <_Balloc>:
 801c1b4:	b570      	push	{r4, r5, r6, lr}
 801c1b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c1b8:	4604      	mov	r4, r0
 801c1ba:	460d      	mov	r5, r1
 801c1bc:	b976      	cbnz	r6, 801c1dc <_Balloc+0x28>
 801c1be:	2010      	movs	r0, #16
 801c1c0:	f7ff ffd0 	bl	801c164 <malloc>
 801c1c4:	4602      	mov	r2, r0
 801c1c6:	6260      	str	r0, [r4, #36]	; 0x24
 801c1c8:	b920      	cbnz	r0, 801c1d4 <_Balloc+0x20>
 801c1ca:	4b18      	ldr	r3, [pc, #96]	; (801c22c <_Balloc+0x78>)
 801c1cc:	4818      	ldr	r0, [pc, #96]	; (801c230 <_Balloc+0x7c>)
 801c1ce:	2166      	movs	r1, #102	; 0x66
 801c1d0:	f000 ff40 	bl	801d054 <__assert_func>
 801c1d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c1d8:	6006      	str	r6, [r0, #0]
 801c1da:	60c6      	str	r6, [r0, #12]
 801c1dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c1de:	68f3      	ldr	r3, [r6, #12]
 801c1e0:	b183      	cbz	r3, 801c204 <_Balloc+0x50>
 801c1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c1e4:	68db      	ldr	r3, [r3, #12]
 801c1e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c1ea:	b9b8      	cbnz	r0, 801c21c <_Balloc+0x68>
 801c1ec:	2101      	movs	r1, #1
 801c1ee:	fa01 f605 	lsl.w	r6, r1, r5
 801c1f2:	1d72      	adds	r2, r6, #5
 801c1f4:	0092      	lsls	r2, r2, #2
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	f000 fc9d 	bl	801cb36 <_calloc_r>
 801c1fc:	b160      	cbz	r0, 801c218 <_Balloc+0x64>
 801c1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c202:	e00e      	b.n	801c222 <_Balloc+0x6e>
 801c204:	2221      	movs	r2, #33	; 0x21
 801c206:	2104      	movs	r1, #4
 801c208:	4620      	mov	r0, r4
 801c20a:	f000 fc94 	bl	801cb36 <_calloc_r>
 801c20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c210:	60f0      	str	r0, [r6, #12]
 801c212:	68db      	ldr	r3, [r3, #12]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d1e4      	bne.n	801c1e2 <_Balloc+0x2e>
 801c218:	2000      	movs	r0, #0
 801c21a:	bd70      	pop	{r4, r5, r6, pc}
 801c21c:	6802      	ldr	r2, [r0, #0]
 801c21e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c222:	2300      	movs	r3, #0
 801c224:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c228:	e7f7      	b.n	801c21a <_Balloc+0x66>
 801c22a:	bf00      	nop
 801c22c:	08051bce 	.word	0x08051bce
 801c230:	08051ccc 	.word	0x08051ccc

0801c234 <_Bfree>:
 801c234:	b570      	push	{r4, r5, r6, lr}
 801c236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c238:	4605      	mov	r5, r0
 801c23a:	460c      	mov	r4, r1
 801c23c:	b976      	cbnz	r6, 801c25c <_Bfree+0x28>
 801c23e:	2010      	movs	r0, #16
 801c240:	f7ff ff90 	bl	801c164 <malloc>
 801c244:	4602      	mov	r2, r0
 801c246:	6268      	str	r0, [r5, #36]	; 0x24
 801c248:	b920      	cbnz	r0, 801c254 <_Bfree+0x20>
 801c24a:	4b09      	ldr	r3, [pc, #36]	; (801c270 <_Bfree+0x3c>)
 801c24c:	4809      	ldr	r0, [pc, #36]	; (801c274 <_Bfree+0x40>)
 801c24e:	218a      	movs	r1, #138	; 0x8a
 801c250:	f000 ff00 	bl	801d054 <__assert_func>
 801c254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c258:	6006      	str	r6, [r0, #0]
 801c25a:	60c6      	str	r6, [r0, #12]
 801c25c:	b13c      	cbz	r4, 801c26e <_Bfree+0x3a>
 801c25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c260:	6862      	ldr	r2, [r4, #4]
 801c262:	68db      	ldr	r3, [r3, #12]
 801c264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c268:	6021      	str	r1, [r4, #0]
 801c26a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c26e:	bd70      	pop	{r4, r5, r6, pc}
 801c270:	08051bce 	.word	0x08051bce
 801c274:	08051ccc 	.word	0x08051ccc

0801c278 <__multadd>:
 801c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c27c:	690d      	ldr	r5, [r1, #16]
 801c27e:	4607      	mov	r7, r0
 801c280:	460c      	mov	r4, r1
 801c282:	461e      	mov	r6, r3
 801c284:	f101 0c14 	add.w	ip, r1, #20
 801c288:	2000      	movs	r0, #0
 801c28a:	f8dc 3000 	ldr.w	r3, [ip]
 801c28e:	b299      	uxth	r1, r3
 801c290:	fb02 6101 	mla	r1, r2, r1, r6
 801c294:	0c1e      	lsrs	r6, r3, #16
 801c296:	0c0b      	lsrs	r3, r1, #16
 801c298:	fb02 3306 	mla	r3, r2, r6, r3
 801c29c:	b289      	uxth	r1, r1
 801c29e:	3001      	adds	r0, #1
 801c2a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c2a4:	4285      	cmp	r5, r0
 801c2a6:	f84c 1b04 	str.w	r1, [ip], #4
 801c2aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c2ae:	dcec      	bgt.n	801c28a <__multadd+0x12>
 801c2b0:	b30e      	cbz	r6, 801c2f6 <__multadd+0x7e>
 801c2b2:	68a3      	ldr	r3, [r4, #8]
 801c2b4:	42ab      	cmp	r3, r5
 801c2b6:	dc19      	bgt.n	801c2ec <__multadd+0x74>
 801c2b8:	6861      	ldr	r1, [r4, #4]
 801c2ba:	4638      	mov	r0, r7
 801c2bc:	3101      	adds	r1, #1
 801c2be:	f7ff ff79 	bl	801c1b4 <_Balloc>
 801c2c2:	4680      	mov	r8, r0
 801c2c4:	b928      	cbnz	r0, 801c2d2 <__multadd+0x5a>
 801c2c6:	4602      	mov	r2, r0
 801c2c8:	4b0c      	ldr	r3, [pc, #48]	; (801c2fc <__multadd+0x84>)
 801c2ca:	480d      	ldr	r0, [pc, #52]	; (801c300 <__multadd+0x88>)
 801c2cc:	21b5      	movs	r1, #181	; 0xb5
 801c2ce:	f000 fec1 	bl	801d054 <__assert_func>
 801c2d2:	6922      	ldr	r2, [r4, #16]
 801c2d4:	3202      	adds	r2, #2
 801c2d6:	f104 010c 	add.w	r1, r4, #12
 801c2da:	0092      	lsls	r2, r2, #2
 801c2dc:	300c      	adds	r0, #12
 801c2de:	f7ff ff5b 	bl	801c198 <memcpy>
 801c2e2:	4621      	mov	r1, r4
 801c2e4:	4638      	mov	r0, r7
 801c2e6:	f7ff ffa5 	bl	801c234 <_Bfree>
 801c2ea:	4644      	mov	r4, r8
 801c2ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c2f0:	3501      	adds	r5, #1
 801c2f2:	615e      	str	r6, [r3, #20]
 801c2f4:	6125      	str	r5, [r4, #16]
 801c2f6:	4620      	mov	r0, r4
 801c2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2fc:	08051c40 	.word	0x08051c40
 801c300:	08051ccc 	.word	0x08051ccc

0801c304 <__s2b>:
 801c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c308:	460c      	mov	r4, r1
 801c30a:	4615      	mov	r5, r2
 801c30c:	461f      	mov	r7, r3
 801c30e:	2209      	movs	r2, #9
 801c310:	3308      	adds	r3, #8
 801c312:	4606      	mov	r6, r0
 801c314:	fb93 f3f2 	sdiv	r3, r3, r2
 801c318:	2100      	movs	r1, #0
 801c31a:	2201      	movs	r2, #1
 801c31c:	429a      	cmp	r2, r3
 801c31e:	db09      	blt.n	801c334 <__s2b+0x30>
 801c320:	4630      	mov	r0, r6
 801c322:	f7ff ff47 	bl	801c1b4 <_Balloc>
 801c326:	b940      	cbnz	r0, 801c33a <__s2b+0x36>
 801c328:	4602      	mov	r2, r0
 801c32a:	4b19      	ldr	r3, [pc, #100]	; (801c390 <__s2b+0x8c>)
 801c32c:	4819      	ldr	r0, [pc, #100]	; (801c394 <__s2b+0x90>)
 801c32e:	21ce      	movs	r1, #206	; 0xce
 801c330:	f000 fe90 	bl	801d054 <__assert_func>
 801c334:	0052      	lsls	r2, r2, #1
 801c336:	3101      	adds	r1, #1
 801c338:	e7f0      	b.n	801c31c <__s2b+0x18>
 801c33a:	9b08      	ldr	r3, [sp, #32]
 801c33c:	6143      	str	r3, [r0, #20]
 801c33e:	2d09      	cmp	r5, #9
 801c340:	f04f 0301 	mov.w	r3, #1
 801c344:	6103      	str	r3, [r0, #16]
 801c346:	dd16      	ble.n	801c376 <__s2b+0x72>
 801c348:	f104 0909 	add.w	r9, r4, #9
 801c34c:	46c8      	mov	r8, r9
 801c34e:	442c      	add	r4, r5
 801c350:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c354:	4601      	mov	r1, r0
 801c356:	3b30      	subs	r3, #48	; 0x30
 801c358:	220a      	movs	r2, #10
 801c35a:	4630      	mov	r0, r6
 801c35c:	f7ff ff8c 	bl	801c278 <__multadd>
 801c360:	45a0      	cmp	r8, r4
 801c362:	d1f5      	bne.n	801c350 <__s2b+0x4c>
 801c364:	f1a5 0408 	sub.w	r4, r5, #8
 801c368:	444c      	add	r4, r9
 801c36a:	1b2d      	subs	r5, r5, r4
 801c36c:	1963      	adds	r3, r4, r5
 801c36e:	42bb      	cmp	r3, r7
 801c370:	db04      	blt.n	801c37c <__s2b+0x78>
 801c372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c376:	340a      	adds	r4, #10
 801c378:	2509      	movs	r5, #9
 801c37a:	e7f6      	b.n	801c36a <__s2b+0x66>
 801c37c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c380:	4601      	mov	r1, r0
 801c382:	3b30      	subs	r3, #48	; 0x30
 801c384:	220a      	movs	r2, #10
 801c386:	4630      	mov	r0, r6
 801c388:	f7ff ff76 	bl	801c278 <__multadd>
 801c38c:	e7ee      	b.n	801c36c <__s2b+0x68>
 801c38e:	bf00      	nop
 801c390:	08051c40 	.word	0x08051c40
 801c394:	08051ccc 	.word	0x08051ccc

0801c398 <__hi0bits>:
 801c398:	0c03      	lsrs	r3, r0, #16
 801c39a:	041b      	lsls	r3, r3, #16
 801c39c:	b9d3      	cbnz	r3, 801c3d4 <__hi0bits+0x3c>
 801c39e:	0400      	lsls	r0, r0, #16
 801c3a0:	2310      	movs	r3, #16
 801c3a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c3a6:	bf04      	itt	eq
 801c3a8:	0200      	lsleq	r0, r0, #8
 801c3aa:	3308      	addeq	r3, #8
 801c3ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c3b0:	bf04      	itt	eq
 801c3b2:	0100      	lsleq	r0, r0, #4
 801c3b4:	3304      	addeq	r3, #4
 801c3b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c3ba:	bf04      	itt	eq
 801c3bc:	0080      	lsleq	r0, r0, #2
 801c3be:	3302      	addeq	r3, #2
 801c3c0:	2800      	cmp	r0, #0
 801c3c2:	db05      	blt.n	801c3d0 <__hi0bits+0x38>
 801c3c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c3c8:	f103 0301 	add.w	r3, r3, #1
 801c3cc:	bf08      	it	eq
 801c3ce:	2320      	moveq	r3, #32
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	4770      	bx	lr
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	e7e4      	b.n	801c3a2 <__hi0bits+0xa>

0801c3d8 <__lo0bits>:
 801c3d8:	6803      	ldr	r3, [r0, #0]
 801c3da:	f013 0207 	ands.w	r2, r3, #7
 801c3de:	4601      	mov	r1, r0
 801c3e0:	d00b      	beq.n	801c3fa <__lo0bits+0x22>
 801c3e2:	07da      	lsls	r2, r3, #31
 801c3e4:	d423      	bmi.n	801c42e <__lo0bits+0x56>
 801c3e6:	0798      	lsls	r0, r3, #30
 801c3e8:	bf49      	itett	mi
 801c3ea:	085b      	lsrmi	r3, r3, #1
 801c3ec:	089b      	lsrpl	r3, r3, #2
 801c3ee:	2001      	movmi	r0, #1
 801c3f0:	600b      	strmi	r3, [r1, #0]
 801c3f2:	bf5c      	itt	pl
 801c3f4:	600b      	strpl	r3, [r1, #0]
 801c3f6:	2002      	movpl	r0, #2
 801c3f8:	4770      	bx	lr
 801c3fa:	b298      	uxth	r0, r3
 801c3fc:	b9a8      	cbnz	r0, 801c42a <__lo0bits+0x52>
 801c3fe:	0c1b      	lsrs	r3, r3, #16
 801c400:	2010      	movs	r0, #16
 801c402:	b2da      	uxtb	r2, r3
 801c404:	b90a      	cbnz	r2, 801c40a <__lo0bits+0x32>
 801c406:	3008      	adds	r0, #8
 801c408:	0a1b      	lsrs	r3, r3, #8
 801c40a:	071a      	lsls	r2, r3, #28
 801c40c:	bf04      	itt	eq
 801c40e:	091b      	lsreq	r3, r3, #4
 801c410:	3004      	addeq	r0, #4
 801c412:	079a      	lsls	r2, r3, #30
 801c414:	bf04      	itt	eq
 801c416:	089b      	lsreq	r3, r3, #2
 801c418:	3002      	addeq	r0, #2
 801c41a:	07da      	lsls	r2, r3, #31
 801c41c:	d403      	bmi.n	801c426 <__lo0bits+0x4e>
 801c41e:	085b      	lsrs	r3, r3, #1
 801c420:	f100 0001 	add.w	r0, r0, #1
 801c424:	d005      	beq.n	801c432 <__lo0bits+0x5a>
 801c426:	600b      	str	r3, [r1, #0]
 801c428:	4770      	bx	lr
 801c42a:	4610      	mov	r0, r2
 801c42c:	e7e9      	b.n	801c402 <__lo0bits+0x2a>
 801c42e:	2000      	movs	r0, #0
 801c430:	4770      	bx	lr
 801c432:	2020      	movs	r0, #32
 801c434:	4770      	bx	lr
	...

0801c438 <__i2b>:
 801c438:	b510      	push	{r4, lr}
 801c43a:	460c      	mov	r4, r1
 801c43c:	2101      	movs	r1, #1
 801c43e:	f7ff feb9 	bl	801c1b4 <_Balloc>
 801c442:	4602      	mov	r2, r0
 801c444:	b928      	cbnz	r0, 801c452 <__i2b+0x1a>
 801c446:	4b05      	ldr	r3, [pc, #20]	; (801c45c <__i2b+0x24>)
 801c448:	4805      	ldr	r0, [pc, #20]	; (801c460 <__i2b+0x28>)
 801c44a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c44e:	f000 fe01 	bl	801d054 <__assert_func>
 801c452:	2301      	movs	r3, #1
 801c454:	6144      	str	r4, [r0, #20]
 801c456:	6103      	str	r3, [r0, #16]
 801c458:	bd10      	pop	{r4, pc}
 801c45a:	bf00      	nop
 801c45c:	08051c40 	.word	0x08051c40
 801c460:	08051ccc 	.word	0x08051ccc

0801c464 <__multiply>:
 801c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c468:	4691      	mov	r9, r2
 801c46a:	690a      	ldr	r2, [r1, #16]
 801c46c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c470:	429a      	cmp	r2, r3
 801c472:	bfb8      	it	lt
 801c474:	460b      	movlt	r3, r1
 801c476:	460c      	mov	r4, r1
 801c478:	bfbc      	itt	lt
 801c47a:	464c      	movlt	r4, r9
 801c47c:	4699      	movlt	r9, r3
 801c47e:	6927      	ldr	r7, [r4, #16]
 801c480:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c484:	68a3      	ldr	r3, [r4, #8]
 801c486:	6861      	ldr	r1, [r4, #4]
 801c488:	eb07 060a 	add.w	r6, r7, sl
 801c48c:	42b3      	cmp	r3, r6
 801c48e:	b085      	sub	sp, #20
 801c490:	bfb8      	it	lt
 801c492:	3101      	addlt	r1, #1
 801c494:	f7ff fe8e 	bl	801c1b4 <_Balloc>
 801c498:	b930      	cbnz	r0, 801c4a8 <__multiply+0x44>
 801c49a:	4602      	mov	r2, r0
 801c49c:	4b44      	ldr	r3, [pc, #272]	; (801c5b0 <__multiply+0x14c>)
 801c49e:	4845      	ldr	r0, [pc, #276]	; (801c5b4 <__multiply+0x150>)
 801c4a0:	f240 115d 	movw	r1, #349	; 0x15d
 801c4a4:	f000 fdd6 	bl	801d054 <__assert_func>
 801c4a8:	f100 0514 	add.w	r5, r0, #20
 801c4ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c4b0:	462b      	mov	r3, r5
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	4543      	cmp	r3, r8
 801c4b6:	d321      	bcc.n	801c4fc <__multiply+0x98>
 801c4b8:	f104 0314 	add.w	r3, r4, #20
 801c4bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c4c0:	f109 0314 	add.w	r3, r9, #20
 801c4c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c4c8:	9202      	str	r2, [sp, #8]
 801c4ca:	1b3a      	subs	r2, r7, r4
 801c4cc:	3a15      	subs	r2, #21
 801c4ce:	f022 0203 	bic.w	r2, r2, #3
 801c4d2:	3204      	adds	r2, #4
 801c4d4:	f104 0115 	add.w	r1, r4, #21
 801c4d8:	428f      	cmp	r7, r1
 801c4da:	bf38      	it	cc
 801c4dc:	2204      	movcc	r2, #4
 801c4de:	9201      	str	r2, [sp, #4]
 801c4e0:	9a02      	ldr	r2, [sp, #8]
 801c4e2:	9303      	str	r3, [sp, #12]
 801c4e4:	429a      	cmp	r2, r3
 801c4e6:	d80c      	bhi.n	801c502 <__multiply+0x9e>
 801c4e8:	2e00      	cmp	r6, #0
 801c4ea:	dd03      	ble.n	801c4f4 <__multiply+0x90>
 801c4ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d05a      	beq.n	801c5aa <__multiply+0x146>
 801c4f4:	6106      	str	r6, [r0, #16]
 801c4f6:	b005      	add	sp, #20
 801c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4fc:	f843 2b04 	str.w	r2, [r3], #4
 801c500:	e7d8      	b.n	801c4b4 <__multiply+0x50>
 801c502:	f8b3 a000 	ldrh.w	sl, [r3]
 801c506:	f1ba 0f00 	cmp.w	sl, #0
 801c50a:	d024      	beq.n	801c556 <__multiply+0xf2>
 801c50c:	f104 0e14 	add.w	lr, r4, #20
 801c510:	46a9      	mov	r9, r5
 801c512:	f04f 0c00 	mov.w	ip, #0
 801c516:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c51a:	f8d9 1000 	ldr.w	r1, [r9]
 801c51e:	fa1f fb82 	uxth.w	fp, r2
 801c522:	b289      	uxth	r1, r1
 801c524:	fb0a 110b 	mla	r1, sl, fp, r1
 801c528:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c52c:	f8d9 2000 	ldr.w	r2, [r9]
 801c530:	4461      	add	r1, ip
 801c532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c536:	fb0a c20b 	mla	r2, sl, fp, ip
 801c53a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c53e:	b289      	uxth	r1, r1
 801c540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c544:	4577      	cmp	r7, lr
 801c546:	f849 1b04 	str.w	r1, [r9], #4
 801c54a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c54e:	d8e2      	bhi.n	801c516 <__multiply+0xb2>
 801c550:	9a01      	ldr	r2, [sp, #4]
 801c552:	f845 c002 	str.w	ip, [r5, r2]
 801c556:	9a03      	ldr	r2, [sp, #12]
 801c558:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c55c:	3304      	adds	r3, #4
 801c55e:	f1b9 0f00 	cmp.w	r9, #0
 801c562:	d020      	beq.n	801c5a6 <__multiply+0x142>
 801c564:	6829      	ldr	r1, [r5, #0]
 801c566:	f104 0c14 	add.w	ip, r4, #20
 801c56a:	46ae      	mov	lr, r5
 801c56c:	f04f 0a00 	mov.w	sl, #0
 801c570:	f8bc b000 	ldrh.w	fp, [ip]
 801c574:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c578:	fb09 220b 	mla	r2, r9, fp, r2
 801c57c:	4492      	add	sl, r2
 801c57e:	b289      	uxth	r1, r1
 801c580:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c584:	f84e 1b04 	str.w	r1, [lr], #4
 801c588:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c58c:	f8be 1000 	ldrh.w	r1, [lr]
 801c590:	0c12      	lsrs	r2, r2, #16
 801c592:	fb09 1102 	mla	r1, r9, r2, r1
 801c596:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c59a:	4567      	cmp	r7, ip
 801c59c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c5a0:	d8e6      	bhi.n	801c570 <__multiply+0x10c>
 801c5a2:	9a01      	ldr	r2, [sp, #4]
 801c5a4:	50a9      	str	r1, [r5, r2]
 801c5a6:	3504      	adds	r5, #4
 801c5a8:	e79a      	b.n	801c4e0 <__multiply+0x7c>
 801c5aa:	3e01      	subs	r6, #1
 801c5ac:	e79c      	b.n	801c4e8 <__multiply+0x84>
 801c5ae:	bf00      	nop
 801c5b0:	08051c40 	.word	0x08051c40
 801c5b4:	08051ccc 	.word	0x08051ccc

0801c5b8 <__pow5mult>:
 801c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5bc:	4615      	mov	r5, r2
 801c5be:	f012 0203 	ands.w	r2, r2, #3
 801c5c2:	4606      	mov	r6, r0
 801c5c4:	460f      	mov	r7, r1
 801c5c6:	d007      	beq.n	801c5d8 <__pow5mult+0x20>
 801c5c8:	4c25      	ldr	r4, [pc, #148]	; (801c660 <__pow5mult+0xa8>)
 801c5ca:	3a01      	subs	r2, #1
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c5d2:	f7ff fe51 	bl	801c278 <__multadd>
 801c5d6:	4607      	mov	r7, r0
 801c5d8:	10ad      	asrs	r5, r5, #2
 801c5da:	d03d      	beq.n	801c658 <__pow5mult+0xa0>
 801c5dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c5de:	b97c      	cbnz	r4, 801c600 <__pow5mult+0x48>
 801c5e0:	2010      	movs	r0, #16
 801c5e2:	f7ff fdbf 	bl	801c164 <malloc>
 801c5e6:	4602      	mov	r2, r0
 801c5e8:	6270      	str	r0, [r6, #36]	; 0x24
 801c5ea:	b928      	cbnz	r0, 801c5f8 <__pow5mult+0x40>
 801c5ec:	4b1d      	ldr	r3, [pc, #116]	; (801c664 <__pow5mult+0xac>)
 801c5ee:	481e      	ldr	r0, [pc, #120]	; (801c668 <__pow5mult+0xb0>)
 801c5f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c5f4:	f000 fd2e 	bl	801d054 <__assert_func>
 801c5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c5fc:	6004      	str	r4, [r0, #0]
 801c5fe:	60c4      	str	r4, [r0, #12]
 801c600:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c608:	b94c      	cbnz	r4, 801c61e <__pow5mult+0x66>
 801c60a:	f240 2171 	movw	r1, #625	; 0x271
 801c60e:	4630      	mov	r0, r6
 801c610:	f7ff ff12 	bl	801c438 <__i2b>
 801c614:	2300      	movs	r3, #0
 801c616:	f8c8 0008 	str.w	r0, [r8, #8]
 801c61a:	4604      	mov	r4, r0
 801c61c:	6003      	str	r3, [r0, #0]
 801c61e:	f04f 0900 	mov.w	r9, #0
 801c622:	07eb      	lsls	r3, r5, #31
 801c624:	d50a      	bpl.n	801c63c <__pow5mult+0x84>
 801c626:	4639      	mov	r1, r7
 801c628:	4622      	mov	r2, r4
 801c62a:	4630      	mov	r0, r6
 801c62c:	f7ff ff1a 	bl	801c464 <__multiply>
 801c630:	4639      	mov	r1, r7
 801c632:	4680      	mov	r8, r0
 801c634:	4630      	mov	r0, r6
 801c636:	f7ff fdfd 	bl	801c234 <_Bfree>
 801c63a:	4647      	mov	r7, r8
 801c63c:	106d      	asrs	r5, r5, #1
 801c63e:	d00b      	beq.n	801c658 <__pow5mult+0xa0>
 801c640:	6820      	ldr	r0, [r4, #0]
 801c642:	b938      	cbnz	r0, 801c654 <__pow5mult+0x9c>
 801c644:	4622      	mov	r2, r4
 801c646:	4621      	mov	r1, r4
 801c648:	4630      	mov	r0, r6
 801c64a:	f7ff ff0b 	bl	801c464 <__multiply>
 801c64e:	6020      	str	r0, [r4, #0]
 801c650:	f8c0 9000 	str.w	r9, [r0]
 801c654:	4604      	mov	r4, r0
 801c656:	e7e4      	b.n	801c622 <__pow5mult+0x6a>
 801c658:	4638      	mov	r0, r7
 801c65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c65e:	bf00      	nop
 801c660:	08051e18 	.word	0x08051e18
 801c664:	08051bce 	.word	0x08051bce
 801c668:	08051ccc 	.word	0x08051ccc

0801c66c <__lshift>:
 801c66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c670:	460c      	mov	r4, r1
 801c672:	6849      	ldr	r1, [r1, #4]
 801c674:	6923      	ldr	r3, [r4, #16]
 801c676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c67a:	68a3      	ldr	r3, [r4, #8]
 801c67c:	4607      	mov	r7, r0
 801c67e:	4691      	mov	r9, r2
 801c680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c684:	f108 0601 	add.w	r6, r8, #1
 801c688:	42b3      	cmp	r3, r6
 801c68a:	db0b      	blt.n	801c6a4 <__lshift+0x38>
 801c68c:	4638      	mov	r0, r7
 801c68e:	f7ff fd91 	bl	801c1b4 <_Balloc>
 801c692:	4605      	mov	r5, r0
 801c694:	b948      	cbnz	r0, 801c6aa <__lshift+0x3e>
 801c696:	4602      	mov	r2, r0
 801c698:	4b2a      	ldr	r3, [pc, #168]	; (801c744 <__lshift+0xd8>)
 801c69a:	482b      	ldr	r0, [pc, #172]	; (801c748 <__lshift+0xdc>)
 801c69c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c6a0:	f000 fcd8 	bl	801d054 <__assert_func>
 801c6a4:	3101      	adds	r1, #1
 801c6a6:	005b      	lsls	r3, r3, #1
 801c6a8:	e7ee      	b.n	801c688 <__lshift+0x1c>
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	f100 0114 	add.w	r1, r0, #20
 801c6b0:	f100 0210 	add.w	r2, r0, #16
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	4553      	cmp	r3, sl
 801c6b8:	db37      	blt.n	801c72a <__lshift+0xbe>
 801c6ba:	6920      	ldr	r0, [r4, #16]
 801c6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c6c0:	f104 0314 	add.w	r3, r4, #20
 801c6c4:	f019 091f 	ands.w	r9, r9, #31
 801c6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c6cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c6d0:	d02f      	beq.n	801c732 <__lshift+0xc6>
 801c6d2:	f1c9 0e20 	rsb	lr, r9, #32
 801c6d6:	468a      	mov	sl, r1
 801c6d8:	f04f 0c00 	mov.w	ip, #0
 801c6dc:	681a      	ldr	r2, [r3, #0]
 801c6de:	fa02 f209 	lsl.w	r2, r2, r9
 801c6e2:	ea42 020c 	orr.w	r2, r2, ip
 801c6e6:	f84a 2b04 	str.w	r2, [sl], #4
 801c6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6ee:	4298      	cmp	r0, r3
 801c6f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801c6f4:	d8f2      	bhi.n	801c6dc <__lshift+0x70>
 801c6f6:	1b03      	subs	r3, r0, r4
 801c6f8:	3b15      	subs	r3, #21
 801c6fa:	f023 0303 	bic.w	r3, r3, #3
 801c6fe:	3304      	adds	r3, #4
 801c700:	f104 0215 	add.w	r2, r4, #21
 801c704:	4290      	cmp	r0, r2
 801c706:	bf38      	it	cc
 801c708:	2304      	movcc	r3, #4
 801c70a:	f841 c003 	str.w	ip, [r1, r3]
 801c70e:	f1bc 0f00 	cmp.w	ip, #0
 801c712:	d001      	beq.n	801c718 <__lshift+0xac>
 801c714:	f108 0602 	add.w	r6, r8, #2
 801c718:	3e01      	subs	r6, #1
 801c71a:	4638      	mov	r0, r7
 801c71c:	612e      	str	r6, [r5, #16]
 801c71e:	4621      	mov	r1, r4
 801c720:	f7ff fd88 	bl	801c234 <_Bfree>
 801c724:	4628      	mov	r0, r5
 801c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c72a:	f842 0f04 	str.w	r0, [r2, #4]!
 801c72e:	3301      	adds	r3, #1
 801c730:	e7c1      	b.n	801c6b6 <__lshift+0x4a>
 801c732:	3904      	subs	r1, #4
 801c734:	f853 2b04 	ldr.w	r2, [r3], #4
 801c738:	f841 2f04 	str.w	r2, [r1, #4]!
 801c73c:	4298      	cmp	r0, r3
 801c73e:	d8f9      	bhi.n	801c734 <__lshift+0xc8>
 801c740:	e7ea      	b.n	801c718 <__lshift+0xac>
 801c742:	bf00      	nop
 801c744:	08051c40 	.word	0x08051c40
 801c748:	08051ccc 	.word	0x08051ccc

0801c74c <__mcmp>:
 801c74c:	b530      	push	{r4, r5, lr}
 801c74e:	6902      	ldr	r2, [r0, #16]
 801c750:	690c      	ldr	r4, [r1, #16]
 801c752:	1b12      	subs	r2, r2, r4
 801c754:	d10e      	bne.n	801c774 <__mcmp+0x28>
 801c756:	f100 0314 	add.w	r3, r0, #20
 801c75a:	3114      	adds	r1, #20
 801c75c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c760:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c764:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c768:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c76c:	42a5      	cmp	r5, r4
 801c76e:	d003      	beq.n	801c778 <__mcmp+0x2c>
 801c770:	d305      	bcc.n	801c77e <__mcmp+0x32>
 801c772:	2201      	movs	r2, #1
 801c774:	4610      	mov	r0, r2
 801c776:	bd30      	pop	{r4, r5, pc}
 801c778:	4283      	cmp	r3, r0
 801c77a:	d3f3      	bcc.n	801c764 <__mcmp+0x18>
 801c77c:	e7fa      	b.n	801c774 <__mcmp+0x28>
 801c77e:	f04f 32ff 	mov.w	r2, #4294967295
 801c782:	e7f7      	b.n	801c774 <__mcmp+0x28>

0801c784 <__mdiff>:
 801c784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c788:	460c      	mov	r4, r1
 801c78a:	4606      	mov	r6, r0
 801c78c:	4611      	mov	r1, r2
 801c78e:	4620      	mov	r0, r4
 801c790:	4690      	mov	r8, r2
 801c792:	f7ff ffdb 	bl	801c74c <__mcmp>
 801c796:	1e05      	subs	r5, r0, #0
 801c798:	d110      	bne.n	801c7bc <__mdiff+0x38>
 801c79a:	4629      	mov	r1, r5
 801c79c:	4630      	mov	r0, r6
 801c79e:	f7ff fd09 	bl	801c1b4 <_Balloc>
 801c7a2:	b930      	cbnz	r0, 801c7b2 <__mdiff+0x2e>
 801c7a4:	4b3a      	ldr	r3, [pc, #232]	; (801c890 <__mdiff+0x10c>)
 801c7a6:	4602      	mov	r2, r0
 801c7a8:	f240 2132 	movw	r1, #562	; 0x232
 801c7ac:	4839      	ldr	r0, [pc, #228]	; (801c894 <__mdiff+0x110>)
 801c7ae:	f000 fc51 	bl	801d054 <__assert_func>
 801c7b2:	2301      	movs	r3, #1
 801c7b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7bc:	bfa4      	itt	ge
 801c7be:	4643      	movge	r3, r8
 801c7c0:	46a0      	movge	r8, r4
 801c7c2:	4630      	mov	r0, r6
 801c7c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c7c8:	bfa6      	itte	ge
 801c7ca:	461c      	movge	r4, r3
 801c7cc:	2500      	movge	r5, #0
 801c7ce:	2501      	movlt	r5, #1
 801c7d0:	f7ff fcf0 	bl	801c1b4 <_Balloc>
 801c7d4:	b920      	cbnz	r0, 801c7e0 <__mdiff+0x5c>
 801c7d6:	4b2e      	ldr	r3, [pc, #184]	; (801c890 <__mdiff+0x10c>)
 801c7d8:	4602      	mov	r2, r0
 801c7da:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c7de:	e7e5      	b.n	801c7ac <__mdiff+0x28>
 801c7e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c7e4:	6926      	ldr	r6, [r4, #16]
 801c7e6:	60c5      	str	r5, [r0, #12]
 801c7e8:	f104 0914 	add.w	r9, r4, #20
 801c7ec:	f108 0514 	add.w	r5, r8, #20
 801c7f0:	f100 0e14 	add.w	lr, r0, #20
 801c7f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c7f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c7fc:	f108 0210 	add.w	r2, r8, #16
 801c800:	46f2      	mov	sl, lr
 801c802:	2100      	movs	r1, #0
 801c804:	f859 3b04 	ldr.w	r3, [r9], #4
 801c808:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c80c:	fa1f f883 	uxth.w	r8, r3
 801c810:	fa11 f18b 	uxtah	r1, r1, fp
 801c814:	0c1b      	lsrs	r3, r3, #16
 801c816:	eba1 0808 	sub.w	r8, r1, r8
 801c81a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c81e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c822:	fa1f f888 	uxth.w	r8, r8
 801c826:	1419      	asrs	r1, r3, #16
 801c828:	454e      	cmp	r6, r9
 801c82a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c82e:	f84a 3b04 	str.w	r3, [sl], #4
 801c832:	d8e7      	bhi.n	801c804 <__mdiff+0x80>
 801c834:	1b33      	subs	r3, r6, r4
 801c836:	3b15      	subs	r3, #21
 801c838:	f023 0303 	bic.w	r3, r3, #3
 801c83c:	3304      	adds	r3, #4
 801c83e:	3415      	adds	r4, #21
 801c840:	42a6      	cmp	r6, r4
 801c842:	bf38      	it	cc
 801c844:	2304      	movcc	r3, #4
 801c846:	441d      	add	r5, r3
 801c848:	4473      	add	r3, lr
 801c84a:	469e      	mov	lr, r3
 801c84c:	462e      	mov	r6, r5
 801c84e:	4566      	cmp	r6, ip
 801c850:	d30e      	bcc.n	801c870 <__mdiff+0xec>
 801c852:	f10c 0203 	add.w	r2, ip, #3
 801c856:	1b52      	subs	r2, r2, r5
 801c858:	f022 0203 	bic.w	r2, r2, #3
 801c85c:	3d03      	subs	r5, #3
 801c85e:	45ac      	cmp	ip, r5
 801c860:	bf38      	it	cc
 801c862:	2200      	movcc	r2, #0
 801c864:	441a      	add	r2, r3
 801c866:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c86a:	b17b      	cbz	r3, 801c88c <__mdiff+0x108>
 801c86c:	6107      	str	r7, [r0, #16]
 801c86e:	e7a3      	b.n	801c7b8 <__mdiff+0x34>
 801c870:	f856 8b04 	ldr.w	r8, [r6], #4
 801c874:	fa11 f288 	uxtah	r2, r1, r8
 801c878:	1414      	asrs	r4, r2, #16
 801c87a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c87e:	b292      	uxth	r2, r2
 801c880:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c884:	f84e 2b04 	str.w	r2, [lr], #4
 801c888:	1421      	asrs	r1, r4, #16
 801c88a:	e7e0      	b.n	801c84e <__mdiff+0xca>
 801c88c:	3f01      	subs	r7, #1
 801c88e:	e7ea      	b.n	801c866 <__mdiff+0xe2>
 801c890:	08051c40 	.word	0x08051c40
 801c894:	08051ccc 	.word	0x08051ccc

0801c898 <__ulp>:
 801c898:	b082      	sub	sp, #8
 801c89a:	ed8d 0b00 	vstr	d0, [sp]
 801c89e:	9b01      	ldr	r3, [sp, #4]
 801c8a0:	4912      	ldr	r1, [pc, #72]	; (801c8ec <__ulp+0x54>)
 801c8a2:	4019      	ands	r1, r3
 801c8a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801c8a8:	2900      	cmp	r1, #0
 801c8aa:	dd05      	ble.n	801c8b8 <__ulp+0x20>
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	460b      	mov	r3, r1
 801c8b0:	ec43 2b10 	vmov	d0, r2, r3
 801c8b4:	b002      	add	sp, #8
 801c8b6:	4770      	bx	lr
 801c8b8:	4249      	negs	r1, r1
 801c8ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801c8be:	ea4f 5021 	mov.w	r0, r1, asr #20
 801c8c2:	f04f 0200 	mov.w	r2, #0
 801c8c6:	f04f 0300 	mov.w	r3, #0
 801c8ca:	da04      	bge.n	801c8d6 <__ulp+0x3e>
 801c8cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801c8d0:	fa41 f300 	asr.w	r3, r1, r0
 801c8d4:	e7ec      	b.n	801c8b0 <__ulp+0x18>
 801c8d6:	f1a0 0114 	sub.w	r1, r0, #20
 801c8da:	291e      	cmp	r1, #30
 801c8dc:	bfda      	itte	le
 801c8de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801c8e2:	fa20 f101 	lsrle.w	r1, r0, r1
 801c8e6:	2101      	movgt	r1, #1
 801c8e8:	460a      	mov	r2, r1
 801c8ea:	e7e1      	b.n	801c8b0 <__ulp+0x18>
 801c8ec:	7ff00000 	.word	0x7ff00000

0801c8f0 <__b2d>:
 801c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8f2:	6905      	ldr	r5, [r0, #16]
 801c8f4:	f100 0714 	add.w	r7, r0, #20
 801c8f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c8fc:	1f2e      	subs	r6, r5, #4
 801c8fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c902:	4620      	mov	r0, r4
 801c904:	f7ff fd48 	bl	801c398 <__hi0bits>
 801c908:	f1c0 0320 	rsb	r3, r0, #32
 801c90c:	280a      	cmp	r0, #10
 801c90e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c98c <__b2d+0x9c>
 801c912:	600b      	str	r3, [r1, #0]
 801c914:	dc14      	bgt.n	801c940 <__b2d+0x50>
 801c916:	f1c0 0e0b 	rsb	lr, r0, #11
 801c91a:	fa24 f10e 	lsr.w	r1, r4, lr
 801c91e:	42b7      	cmp	r7, r6
 801c920:	ea41 030c 	orr.w	r3, r1, ip
 801c924:	bf34      	ite	cc
 801c926:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c92a:	2100      	movcs	r1, #0
 801c92c:	3015      	adds	r0, #21
 801c92e:	fa04 f000 	lsl.w	r0, r4, r0
 801c932:	fa21 f10e 	lsr.w	r1, r1, lr
 801c936:	ea40 0201 	orr.w	r2, r0, r1
 801c93a:	ec43 2b10 	vmov	d0, r2, r3
 801c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c940:	42b7      	cmp	r7, r6
 801c942:	bf3a      	itte	cc
 801c944:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c948:	f1a5 0608 	subcc.w	r6, r5, #8
 801c94c:	2100      	movcs	r1, #0
 801c94e:	380b      	subs	r0, #11
 801c950:	d017      	beq.n	801c982 <__b2d+0x92>
 801c952:	f1c0 0c20 	rsb	ip, r0, #32
 801c956:	fa04 f500 	lsl.w	r5, r4, r0
 801c95a:	42be      	cmp	r6, r7
 801c95c:	fa21 f40c 	lsr.w	r4, r1, ip
 801c960:	ea45 0504 	orr.w	r5, r5, r4
 801c964:	bf8c      	ite	hi
 801c966:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c96a:	2400      	movls	r4, #0
 801c96c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c970:	fa01 f000 	lsl.w	r0, r1, r0
 801c974:	fa24 f40c 	lsr.w	r4, r4, ip
 801c978:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c97c:	ea40 0204 	orr.w	r2, r0, r4
 801c980:	e7db      	b.n	801c93a <__b2d+0x4a>
 801c982:	ea44 030c 	orr.w	r3, r4, ip
 801c986:	460a      	mov	r2, r1
 801c988:	e7d7      	b.n	801c93a <__b2d+0x4a>
 801c98a:	bf00      	nop
 801c98c:	3ff00000 	.word	0x3ff00000

0801c990 <__d2b>:
 801c990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c994:	4689      	mov	r9, r1
 801c996:	2101      	movs	r1, #1
 801c998:	ec57 6b10 	vmov	r6, r7, d0
 801c99c:	4690      	mov	r8, r2
 801c99e:	f7ff fc09 	bl	801c1b4 <_Balloc>
 801c9a2:	4604      	mov	r4, r0
 801c9a4:	b930      	cbnz	r0, 801c9b4 <__d2b+0x24>
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	4b25      	ldr	r3, [pc, #148]	; (801ca40 <__d2b+0xb0>)
 801c9aa:	4826      	ldr	r0, [pc, #152]	; (801ca44 <__d2b+0xb4>)
 801c9ac:	f240 310a 	movw	r1, #778	; 0x30a
 801c9b0:	f000 fb50 	bl	801d054 <__assert_func>
 801c9b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c9b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c9bc:	bb35      	cbnz	r5, 801ca0c <__d2b+0x7c>
 801c9be:	2e00      	cmp	r6, #0
 801c9c0:	9301      	str	r3, [sp, #4]
 801c9c2:	d028      	beq.n	801ca16 <__d2b+0x86>
 801c9c4:	4668      	mov	r0, sp
 801c9c6:	9600      	str	r6, [sp, #0]
 801c9c8:	f7ff fd06 	bl	801c3d8 <__lo0bits>
 801c9cc:	9900      	ldr	r1, [sp, #0]
 801c9ce:	b300      	cbz	r0, 801ca12 <__d2b+0x82>
 801c9d0:	9a01      	ldr	r2, [sp, #4]
 801c9d2:	f1c0 0320 	rsb	r3, r0, #32
 801c9d6:	fa02 f303 	lsl.w	r3, r2, r3
 801c9da:	430b      	orrs	r3, r1
 801c9dc:	40c2      	lsrs	r2, r0
 801c9de:	6163      	str	r3, [r4, #20]
 801c9e0:	9201      	str	r2, [sp, #4]
 801c9e2:	9b01      	ldr	r3, [sp, #4]
 801c9e4:	61a3      	str	r3, [r4, #24]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	bf14      	ite	ne
 801c9ea:	2202      	movne	r2, #2
 801c9ec:	2201      	moveq	r2, #1
 801c9ee:	6122      	str	r2, [r4, #16]
 801c9f0:	b1d5      	cbz	r5, 801ca28 <__d2b+0x98>
 801c9f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c9f6:	4405      	add	r5, r0
 801c9f8:	f8c9 5000 	str.w	r5, [r9]
 801c9fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ca00:	f8c8 0000 	str.w	r0, [r8]
 801ca04:	4620      	mov	r0, r4
 801ca06:	b003      	add	sp, #12
 801ca08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ca10:	e7d5      	b.n	801c9be <__d2b+0x2e>
 801ca12:	6161      	str	r1, [r4, #20]
 801ca14:	e7e5      	b.n	801c9e2 <__d2b+0x52>
 801ca16:	a801      	add	r0, sp, #4
 801ca18:	f7ff fcde 	bl	801c3d8 <__lo0bits>
 801ca1c:	9b01      	ldr	r3, [sp, #4]
 801ca1e:	6163      	str	r3, [r4, #20]
 801ca20:	2201      	movs	r2, #1
 801ca22:	6122      	str	r2, [r4, #16]
 801ca24:	3020      	adds	r0, #32
 801ca26:	e7e3      	b.n	801c9f0 <__d2b+0x60>
 801ca28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ca2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ca30:	f8c9 0000 	str.w	r0, [r9]
 801ca34:	6918      	ldr	r0, [r3, #16]
 801ca36:	f7ff fcaf 	bl	801c398 <__hi0bits>
 801ca3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ca3e:	e7df      	b.n	801ca00 <__d2b+0x70>
 801ca40:	08051c40 	.word	0x08051c40
 801ca44:	08051ccc 	.word	0x08051ccc

0801ca48 <__ratio>:
 801ca48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca4c:	4688      	mov	r8, r1
 801ca4e:	4669      	mov	r1, sp
 801ca50:	4681      	mov	r9, r0
 801ca52:	f7ff ff4d 	bl	801c8f0 <__b2d>
 801ca56:	a901      	add	r1, sp, #4
 801ca58:	4640      	mov	r0, r8
 801ca5a:	ec55 4b10 	vmov	r4, r5, d0
 801ca5e:	f7ff ff47 	bl	801c8f0 <__b2d>
 801ca62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ca66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ca6a:	eba3 0c02 	sub.w	ip, r3, r2
 801ca6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ca72:	1a9b      	subs	r3, r3, r2
 801ca74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ca78:	ec51 0b10 	vmov	r0, r1, d0
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	bfd6      	itet	le
 801ca80:	460a      	movle	r2, r1
 801ca82:	462a      	movgt	r2, r5
 801ca84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ca88:	468b      	mov	fp, r1
 801ca8a:	462f      	mov	r7, r5
 801ca8c:	bfd4      	ite	le
 801ca8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ca92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ca96:	4620      	mov	r0, r4
 801ca98:	ee10 2a10 	vmov	r2, s0
 801ca9c:	465b      	mov	r3, fp
 801ca9e:	4639      	mov	r1, r7
 801caa0:	f7fb ffe4 	bl	8018a6c <__aeabi_ddiv>
 801caa4:	ec41 0b10 	vmov	d0, r0, r1
 801caa8:	b003      	add	sp, #12
 801caaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801caae <__copybits>:
 801caae:	3901      	subs	r1, #1
 801cab0:	b570      	push	{r4, r5, r6, lr}
 801cab2:	1149      	asrs	r1, r1, #5
 801cab4:	6914      	ldr	r4, [r2, #16]
 801cab6:	3101      	adds	r1, #1
 801cab8:	f102 0314 	add.w	r3, r2, #20
 801cabc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cac0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cac4:	1f05      	subs	r5, r0, #4
 801cac6:	42a3      	cmp	r3, r4
 801cac8:	d30c      	bcc.n	801cae4 <__copybits+0x36>
 801caca:	1aa3      	subs	r3, r4, r2
 801cacc:	3b11      	subs	r3, #17
 801cace:	f023 0303 	bic.w	r3, r3, #3
 801cad2:	3211      	adds	r2, #17
 801cad4:	42a2      	cmp	r2, r4
 801cad6:	bf88      	it	hi
 801cad8:	2300      	movhi	r3, #0
 801cada:	4418      	add	r0, r3
 801cadc:	2300      	movs	r3, #0
 801cade:	4288      	cmp	r0, r1
 801cae0:	d305      	bcc.n	801caee <__copybits+0x40>
 801cae2:	bd70      	pop	{r4, r5, r6, pc}
 801cae4:	f853 6b04 	ldr.w	r6, [r3], #4
 801cae8:	f845 6f04 	str.w	r6, [r5, #4]!
 801caec:	e7eb      	b.n	801cac6 <__copybits+0x18>
 801caee:	f840 3b04 	str.w	r3, [r0], #4
 801caf2:	e7f4      	b.n	801cade <__copybits+0x30>

0801caf4 <__any_on>:
 801caf4:	f100 0214 	add.w	r2, r0, #20
 801caf8:	6900      	ldr	r0, [r0, #16]
 801cafa:	114b      	asrs	r3, r1, #5
 801cafc:	4298      	cmp	r0, r3
 801cafe:	b510      	push	{r4, lr}
 801cb00:	db11      	blt.n	801cb26 <__any_on+0x32>
 801cb02:	dd0a      	ble.n	801cb1a <__any_on+0x26>
 801cb04:	f011 011f 	ands.w	r1, r1, #31
 801cb08:	d007      	beq.n	801cb1a <__any_on+0x26>
 801cb0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cb0e:	fa24 f001 	lsr.w	r0, r4, r1
 801cb12:	fa00 f101 	lsl.w	r1, r0, r1
 801cb16:	428c      	cmp	r4, r1
 801cb18:	d10b      	bne.n	801cb32 <__any_on+0x3e>
 801cb1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb1e:	4293      	cmp	r3, r2
 801cb20:	d803      	bhi.n	801cb2a <__any_on+0x36>
 801cb22:	2000      	movs	r0, #0
 801cb24:	bd10      	pop	{r4, pc}
 801cb26:	4603      	mov	r3, r0
 801cb28:	e7f7      	b.n	801cb1a <__any_on+0x26>
 801cb2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cb2e:	2900      	cmp	r1, #0
 801cb30:	d0f5      	beq.n	801cb1e <__any_on+0x2a>
 801cb32:	2001      	movs	r0, #1
 801cb34:	e7f6      	b.n	801cb24 <__any_on+0x30>

0801cb36 <_calloc_r>:
 801cb36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb38:	fba1 2402 	umull	r2, r4, r1, r2
 801cb3c:	b94c      	cbnz	r4, 801cb52 <_calloc_r+0x1c>
 801cb3e:	4611      	mov	r1, r2
 801cb40:	9201      	str	r2, [sp, #4]
 801cb42:	f000 f87b 	bl	801cc3c <_malloc_r>
 801cb46:	9a01      	ldr	r2, [sp, #4]
 801cb48:	4605      	mov	r5, r0
 801cb4a:	b930      	cbnz	r0, 801cb5a <_calloc_r+0x24>
 801cb4c:	4628      	mov	r0, r5
 801cb4e:	b003      	add	sp, #12
 801cb50:	bd30      	pop	{r4, r5, pc}
 801cb52:	220c      	movs	r2, #12
 801cb54:	6002      	str	r2, [r0, #0]
 801cb56:	2500      	movs	r5, #0
 801cb58:	e7f8      	b.n	801cb4c <_calloc_r+0x16>
 801cb5a:	4621      	mov	r1, r4
 801cb5c:	f7fc fbb4 	bl	80192c8 <memset>
 801cb60:	e7f4      	b.n	801cb4c <_calloc_r+0x16>
	...

0801cb64 <_free_r>:
 801cb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb66:	2900      	cmp	r1, #0
 801cb68:	d044      	beq.n	801cbf4 <_free_r+0x90>
 801cb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb6e:	9001      	str	r0, [sp, #4]
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	f1a1 0404 	sub.w	r4, r1, #4
 801cb76:	bfb8      	it	lt
 801cb78:	18e4      	addlt	r4, r4, r3
 801cb7a:	f000 fab5 	bl	801d0e8 <__malloc_lock>
 801cb7e:	4a1e      	ldr	r2, [pc, #120]	; (801cbf8 <_free_r+0x94>)
 801cb80:	9801      	ldr	r0, [sp, #4]
 801cb82:	6813      	ldr	r3, [r2, #0]
 801cb84:	b933      	cbnz	r3, 801cb94 <_free_r+0x30>
 801cb86:	6063      	str	r3, [r4, #4]
 801cb88:	6014      	str	r4, [r2, #0]
 801cb8a:	b003      	add	sp, #12
 801cb8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cb90:	f000 bab0 	b.w	801d0f4 <__malloc_unlock>
 801cb94:	42a3      	cmp	r3, r4
 801cb96:	d908      	bls.n	801cbaa <_free_r+0x46>
 801cb98:	6825      	ldr	r5, [r4, #0]
 801cb9a:	1961      	adds	r1, r4, r5
 801cb9c:	428b      	cmp	r3, r1
 801cb9e:	bf01      	itttt	eq
 801cba0:	6819      	ldreq	r1, [r3, #0]
 801cba2:	685b      	ldreq	r3, [r3, #4]
 801cba4:	1949      	addeq	r1, r1, r5
 801cba6:	6021      	streq	r1, [r4, #0]
 801cba8:	e7ed      	b.n	801cb86 <_free_r+0x22>
 801cbaa:	461a      	mov	r2, r3
 801cbac:	685b      	ldr	r3, [r3, #4]
 801cbae:	b10b      	cbz	r3, 801cbb4 <_free_r+0x50>
 801cbb0:	42a3      	cmp	r3, r4
 801cbb2:	d9fa      	bls.n	801cbaa <_free_r+0x46>
 801cbb4:	6811      	ldr	r1, [r2, #0]
 801cbb6:	1855      	adds	r5, r2, r1
 801cbb8:	42a5      	cmp	r5, r4
 801cbba:	d10b      	bne.n	801cbd4 <_free_r+0x70>
 801cbbc:	6824      	ldr	r4, [r4, #0]
 801cbbe:	4421      	add	r1, r4
 801cbc0:	1854      	adds	r4, r2, r1
 801cbc2:	42a3      	cmp	r3, r4
 801cbc4:	6011      	str	r1, [r2, #0]
 801cbc6:	d1e0      	bne.n	801cb8a <_free_r+0x26>
 801cbc8:	681c      	ldr	r4, [r3, #0]
 801cbca:	685b      	ldr	r3, [r3, #4]
 801cbcc:	6053      	str	r3, [r2, #4]
 801cbce:	4421      	add	r1, r4
 801cbd0:	6011      	str	r1, [r2, #0]
 801cbd2:	e7da      	b.n	801cb8a <_free_r+0x26>
 801cbd4:	d902      	bls.n	801cbdc <_free_r+0x78>
 801cbd6:	230c      	movs	r3, #12
 801cbd8:	6003      	str	r3, [r0, #0]
 801cbda:	e7d6      	b.n	801cb8a <_free_r+0x26>
 801cbdc:	6825      	ldr	r5, [r4, #0]
 801cbde:	1961      	adds	r1, r4, r5
 801cbe0:	428b      	cmp	r3, r1
 801cbe2:	bf04      	itt	eq
 801cbe4:	6819      	ldreq	r1, [r3, #0]
 801cbe6:	685b      	ldreq	r3, [r3, #4]
 801cbe8:	6063      	str	r3, [r4, #4]
 801cbea:	bf04      	itt	eq
 801cbec:	1949      	addeq	r1, r1, r5
 801cbee:	6021      	streq	r1, [r4, #0]
 801cbf0:	6054      	str	r4, [r2, #4]
 801cbf2:	e7ca      	b.n	801cb8a <_free_r+0x26>
 801cbf4:	b003      	add	sp, #12
 801cbf6:	bd30      	pop	{r4, r5, pc}
 801cbf8:	20000954 	.word	0x20000954

0801cbfc <sbrk_aligned>:
 801cbfc:	b570      	push	{r4, r5, r6, lr}
 801cbfe:	4e0e      	ldr	r6, [pc, #56]	; (801cc38 <sbrk_aligned+0x3c>)
 801cc00:	460c      	mov	r4, r1
 801cc02:	6831      	ldr	r1, [r6, #0]
 801cc04:	4605      	mov	r5, r0
 801cc06:	b911      	cbnz	r1, 801cc0e <sbrk_aligned+0x12>
 801cc08:	f000 f9f2 	bl	801cff0 <_sbrk_r>
 801cc0c:	6030      	str	r0, [r6, #0]
 801cc0e:	4621      	mov	r1, r4
 801cc10:	4628      	mov	r0, r5
 801cc12:	f000 f9ed 	bl	801cff0 <_sbrk_r>
 801cc16:	1c43      	adds	r3, r0, #1
 801cc18:	d00a      	beq.n	801cc30 <sbrk_aligned+0x34>
 801cc1a:	1cc4      	adds	r4, r0, #3
 801cc1c:	f024 0403 	bic.w	r4, r4, #3
 801cc20:	42a0      	cmp	r0, r4
 801cc22:	d007      	beq.n	801cc34 <sbrk_aligned+0x38>
 801cc24:	1a21      	subs	r1, r4, r0
 801cc26:	4628      	mov	r0, r5
 801cc28:	f000 f9e2 	bl	801cff0 <_sbrk_r>
 801cc2c:	3001      	adds	r0, #1
 801cc2e:	d101      	bne.n	801cc34 <sbrk_aligned+0x38>
 801cc30:	f04f 34ff 	mov.w	r4, #4294967295
 801cc34:	4620      	mov	r0, r4
 801cc36:	bd70      	pop	{r4, r5, r6, pc}
 801cc38:	20000958 	.word	0x20000958

0801cc3c <_malloc_r>:
 801cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc40:	1ccd      	adds	r5, r1, #3
 801cc42:	f025 0503 	bic.w	r5, r5, #3
 801cc46:	3508      	adds	r5, #8
 801cc48:	2d0c      	cmp	r5, #12
 801cc4a:	bf38      	it	cc
 801cc4c:	250c      	movcc	r5, #12
 801cc4e:	2d00      	cmp	r5, #0
 801cc50:	4607      	mov	r7, r0
 801cc52:	db01      	blt.n	801cc58 <_malloc_r+0x1c>
 801cc54:	42a9      	cmp	r1, r5
 801cc56:	d905      	bls.n	801cc64 <_malloc_r+0x28>
 801cc58:	230c      	movs	r3, #12
 801cc5a:	603b      	str	r3, [r7, #0]
 801cc5c:	2600      	movs	r6, #0
 801cc5e:	4630      	mov	r0, r6
 801cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc64:	4e2e      	ldr	r6, [pc, #184]	; (801cd20 <_malloc_r+0xe4>)
 801cc66:	f000 fa3f 	bl	801d0e8 <__malloc_lock>
 801cc6a:	6833      	ldr	r3, [r6, #0]
 801cc6c:	461c      	mov	r4, r3
 801cc6e:	bb34      	cbnz	r4, 801ccbe <_malloc_r+0x82>
 801cc70:	4629      	mov	r1, r5
 801cc72:	4638      	mov	r0, r7
 801cc74:	f7ff ffc2 	bl	801cbfc <sbrk_aligned>
 801cc78:	1c43      	adds	r3, r0, #1
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	d14d      	bne.n	801cd1a <_malloc_r+0xde>
 801cc7e:	6834      	ldr	r4, [r6, #0]
 801cc80:	4626      	mov	r6, r4
 801cc82:	2e00      	cmp	r6, #0
 801cc84:	d140      	bne.n	801cd08 <_malloc_r+0xcc>
 801cc86:	6823      	ldr	r3, [r4, #0]
 801cc88:	4631      	mov	r1, r6
 801cc8a:	4638      	mov	r0, r7
 801cc8c:	eb04 0803 	add.w	r8, r4, r3
 801cc90:	f000 f9ae 	bl	801cff0 <_sbrk_r>
 801cc94:	4580      	cmp	r8, r0
 801cc96:	d13a      	bne.n	801cd0e <_malloc_r+0xd2>
 801cc98:	6821      	ldr	r1, [r4, #0]
 801cc9a:	3503      	adds	r5, #3
 801cc9c:	1a6d      	subs	r5, r5, r1
 801cc9e:	f025 0503 	bic.w	r5, r5, #3
 801cca2:	3508      	adds	r5, #8
 801cca4:	2d0c      	cmp	r5, #12
 801cca6:	bf38      	it	cc
 801cca8:	250c      	movcc	r5, #12
 801ccaa:	4629      	mov	r1, r5
 801ccac:	4638      	mov	r0, r7
 801ccae:	f7ff ffa5 	bl	801cbfc <sbrk_aligned>
 801ccb2:	3001      	adds	r0, #1
 801ccb4:	d02b      	beq.n	801cd0e <_malloc_r+0xd2>
 801ccb6:	6823      	ldr	r3, [r4, #0]
 801ccb8:	442b      	add	r3, r5
 801ccba:	6023      	str	r3, [r4, #0]
 801ccbc:	e00e      	b.n	801ccdc <_malloc_r+0xa0>
 801ccbe:	6822      	ldr	r2, [r4, #0]
 801ccc0:	1b52      	subs	r2, r2, r5
 801ccc2:	d41e      	bmi.n	801cd02 <_malloc_r+0xc6>
 801ccc4:	2a0b      	cmp	r2, #11
 801ccc6:	d916      	bls.n	801ccf6 <_malloc_r+0xba>
 801ccc8:	1961      	adds	r1, r4, r5
 801ccca:	42a3      	cmp	r3, r4
 801cccc:	6025      	str	r5, [r4, #0]
 801ccce:	bf18      	it	ne
 801ccd0:	6059      	strne	r1, [r3, #4]
 801ccd2:	6863      	ldr	r3, [r4, #4]
 801ccd4:	bf08      	it	eq
 801ccd6:	6031      	streq	r1, [r6, #0]
 801ccd8:	5162      	str	r2, [r4, r5]
 801ccda:	604b      	str	r3, [r1, #4]
 801ccdc:	4638      	mov	r0, r7
 801ccde:	f104 060b 	add.w	r6, r4, #11
 801cce2:	f000 fa07 	bl	801d0f4 <__malloc_unlock>
 801cce6:	f026 0607 	bic.w	r6, r6, #7
 801ccea:	1d23      	adds	r3, r4, #4
 801ccec:	1af2      	subs	r2, r6, r3
 801ccee:	d0b6      	beq.n	801cc5e <_malloc_r+0x22>
 801ccf0:	1b9b      	subs	r3, r3, r6
 801ccf2:	50a3      	str	r3, [r4, r2]
 801ccf4:	e7b3      	b.n	801cc5e <_malloc_r+0x22>
 801ccf6:	6862      	ldr	r2, [r4, #4]
 801ccf8:	42a3      	cmp	r3, r4
 801ccfa:	bf0c      	ite	eq
 801ccfc:	6032      	streq	r2, [r6, #0]
 801ccfe:	605a      	strne	r2, [r3, #4]
 801cd00:	e7ec      	b.n	801ccdc <_malloc_r+0xa0>
 801cd02:	4623      	mov	r3, r4
 801cd04:	6864      	ldr	r4, [r4, #4]
 801cd06:	e7b2      	b.n	801cc6e <_malloc_r+0x32>
 801cd08:	4634      	mov	r4, r6
 801cd0a:	6876      	ldr	r6, [r6, #4]
 801cd0c:	e7b9      	b.n	801cc82 <_malloc_r+0x46>
 801cd0e:	230c      	movs	r3, #12
 801cd10:	603b      	str	r3, [r7, #0]
 801cd12:	4638      	mov	r0, r7
 801cd14:	f000 f9ee 	bl	801d0f4 <__malloc_unlock>
 801cd18:	e7a1      	b.n	801cc5e <_malloc_r+0x22>
 801cd1a:	6025      	str	r5, [r4, #0]
 801cd1c:	e7de      	b.n	801ccdc <_malloc_r+0xa0>
 801cd1e:	bf00      	nop
 801cd20:	20000954 	.word	0x20000954

0801cd24 <__ssputs_r>:
 801cd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd28:	688e      	ldr	r6, [r1, #8]
 801cd2a:	429e      	cmp	r6, r3
 801cd2c:	4682      	mov	sl, r0
 801cd2e:	460c      	mov	r4, r1
 801cd30:	4690      	mov	r8, r2
 801cd32:	461f      	mov	r7, r3
 801cd34:	d838      	bhi.n	801cda8 <__ssputs_r+0x84>
 801cd36:	898a      	ldrh	r2, [r1, #12]
 801cd38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cd3c:	d032      	beq.n	801cda4 <__ssputs_r+0x80>
 801cd3e:	6825      	ldr	r5, [r4, #0]
 801cd40:	6909      	ldr	r1, [r1, #16]
 801cd42:	eba5 0901 	sub.w	r9, r5, r1
 801cd46:	6965      	ldr	r5, [r4, #20]
 801cd48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cd50:	3301      	adds	r3, #1
 801cd52:	444b      	add	r3, r9
 801cd54:	106d      	asrs	r5, r5, #1
 801cd56:	429d      	cmp	r5, r3
 801cd58:	bf38      	it	cc
 801cd5a:	461d      	movcc	r5, r3
 801cd5c:	0553      	lsls	r3, r2, #21
 801cd5e:	d531      	bpl.n	801cdc4 <__ssputs_r+0xa0>
 801cd60:	4629      	mov	r1, r5
 801cd62:	f7ff ff6b 	bl	801cc3c <_malloc_r>
 801cd66:	4606      	mov	r6, r0
 801cd68:	b950      	cbnz	r0, 801cd80 <__ssputs_r+0x5c>
 801cd6a:	230c      	movs	r3, #12
 801cd6c:	f8ca 3000 	str.w	r3, [sl]
 801cd70:	89a3      	ldrh	r3, [r4, #12]
 801cd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd76:	81a3      	strh	r3, [r4, #12]
 801cd78:	f04f 30ff 	mov.w	r0, #4294967295
 801cd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd80:	6921      	ldr	r1, [r4, #16]
 801cd82:	464a      	mov	r2, r9
 801cd84:	f7ff fa08 	bl	801c198 <memcpy>
 801cd88:	89a3      	ldrh	r3, [r4, #12]
 801cd8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cd92:	81a3      	strh	r3, [r4, #12]
 801cd94:	6126      	str	r6, [r4, #16]
 801cd96:	6165      	str	r5, [r4, #20]
 801cd98:	444e      	add	r6, r9
 801cd9a:	eba5 0509 	sub.w	r5, r5, r9
 801cd9e:	6026      	str	r6, [r4, #0]
 801cda0:	60a5      	str	r5, [r4, #8]
 801cda2:	463e      	mov	r6, r7
 801cda4:	42be      	cmp	r6, r7
 801cda6:	d900      	bls.n	801cdaa <__ssputs_r+0x86>
 801cda8:	463e      	mov	r6, r7
 801cdaa:	6820      	ldr	r0, [r4, #0]
 801cdac:	4632      	mov	r2, r6
 801cdae:	4641      	mov	r1, r8
 801cdb0:	f000 f980 	bl	801d0b4 <memmove>
 801cdb4:	68a3      	ldr	r3, [r4, #8]
 801cdb6:	1b9b      	subs	r3, r3, r6
 801cdb8:	60a3      	str	r3, [r4, #8]
 801cdba:	6823      	ldr	r3, [r4, #0]
 801cdbc:	4433      	add	r3, r6
 801cdbe:	6023      	str	r3, [r4, #0]
 801cdc0:	2000      	movs	r0, #0
 801cdc2:	e7db      	b.n	801cd7c <__ssputs_r+0x58>
 801cdc4:	462a      	mov	r2, r5
 801cdc6:	f000 f99b 	bl	801d100 <_realloc_r>
 801cdca:	4606      	mov	r6, r0
 801cdcc:	2800      	cmp	r0, #0
 801cdce:	d1e1      	bne.n	801cd94 <__ssputs_r+0x70>
 801cdd0:	6921      	ldr	r1, [r4, #16]
 801cdd2:	4650      	mov	r0, sl
 801cdd4:	f7ff fec6 	bl	801cb64 <_free_r>
 801cdd8:	e7c7      	b.n	801cd6a <__ssputs_r+0x46>
	...

0801cddc <_svfiprintf_r>:
 801cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde0:	4698      	mov	r8, r3
 801cde2:	898b      	ldrh	r3, [r1, #12]
 801cde4:	061b      	lsls	r3, r3, #24
 801cde6:	b09d      	sub	sp, #116	; 0x74
 801cde8:	4607      	mov	r7, r0
 801cdea:	460d      	mov	r5, r1
 801cdec:	4614      	mov	r4, r2
 801cdee:	d50e      	bpl.n	801ce0e <_svfiprintf_r+0x32>
 801cdf0:	690b      	ldr	r3, [r1, #16]
 801cdf2:	b963      	cbnz	r3, 801ce0e <_svfiprintf_r+0x32>
 801cdf4:	2140      	movs	r1, #64	; 0x40
 801cdf6:	f7ff ff21 	bl	801cc3c <_malloc_r>
 801cdfa:	6028      	str	r0, [r5, #0]
 801cdfc:	6128      	str	r0, [r5, #16]
 801cdfe:	b920      	cbnz	r0, 801ce0a <_svfiprintf_r+0x2e>
 801ce00:	230c      	movs	r3, #12
 801ce02:	603b      	str	r3, [r7, #0]
 801ce04:	f04f 30ff 	mov.w	r0, #4294967295
 801ce08:	e0d1      	b.n	801cfae <_svfiprintf_r+0x1d2>
 801ce0a:	2340      	movs	r3, #64	; 0x40
 801ce0c:	616b      	str	r3, [r5, #20]
 801ce0e:	2300      	movs	r3, #0
 801ce10:	9309      	str	r3, [sp, #36]	; 0x24
 801ce12:	2320      	movs	r3, #32
 801ce14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ce18:	f8cd 800c 	str.w	r8, [sp, #12]
 801ce1c:	2330      	movs	r3, #48	; 0x30
 801ce1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801cfc8 <_svfiprintf_r+0x1ec>
 801ce22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ce26:	f04f 0901 	mov.w	r9, #1
 801ce2a:	4623      	mov	r3, r4
 801ce2c:	469a      	mov	sl, r3
 801ce2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce32:	b10a      	cbz	r2, 801ce38 <_svfiprintf_r+0x5c>
 801ce34:	2a25      	cmp	r2, #37	; 0x25
 801ce36:	d1f9      	bne.n	801ce2c <_svfiprintf_r+0x50>
 801ce38:	ebba 0b04 	subs.w	fp, sl, r4
 801ce3c:	d00b      	beq.n	801ce56 <_svfiprintf_r+0x7a>
 801ce3e:	465b      	mov	r3, fp
 801ce40:	4622      	mov	r2, r4
 801ce42:	4629      	mov	r1, r5
 801ce44:	4638      	mov	r0, r7
 801ce46:	f7ff ff6d 	bl	801cd24 <__ssputs_r>
 801ce4a:	3001      	adds	r0, #1
 801ce4c:	f000 80aa 	beq.w	801cfa4 <_svfiprintf_r+0x1c8>
 801ce50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce52:	445a      	add	r2, fp
 801ce54:	9209      	str	r2, [sp, #36]	; 0x24
 801ce56:	f89a 3000 	ldrb.w	r3, [sl]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	f000 80a2 	beq.w	801cfa4 <_svfiprintf_r+0x1c8>
 801ce60:	2300      	movs	r3, #0
 801ce62:	f04f 32ff 	mov.w	r2, #4294967295
 801ce66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ce6a:	f10a 0a01 	add.w	sl, sl, #1
 801ce6e:	9304      	str	r3, [sp, #16]
 801ce70:	9307      	str	r3, [sp, #28]
 801ce72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ce76:	931a      	str	r3, [sp, #104]	; 0x68
 801ce78:	4654      	mov	r4, sl
 801ce7a:	2205      	movs	r2, #5
 801ce7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce80:	4851      	ldr	r0, [pc, #324]	; (801cfc8 <_svfiprintf_r+0x1ec>)
 801ce82:	f7fb fabd 	bl	8018400 <memchr>
 801ce86:	9a04      	ldr	r2, [sp, #16]
 801ce88:	b9d8      	cbnz	r0, 801cec2 <_svfiprintf_r+0xe6>
 801ce8a:	06d0      	lsls	r0, r2, #27
 801ce8c:	bf44      	itt	mi
 801ce8e:	2320      	movmi	r3, #32
 801ce90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ce94:	0711      	lsls	r1, r2, #28
 801ce96:	bf44      	itt	mi
 801ce98:	232b      	movmi	r3, #43	; 0x2b
 801ce9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ce9e:	f89a 3000 	ldrb.w	r3, [sl]
 801cea2:	2b2a      	cmp	r3, #42	; 0x2a
 801cea4:	d015      	beq.n	801ced2 <_svfiprintf_r+0xf6>
 801cea6:	9a07      	ldr	r2, [sp, #28]
 801cea8:	4654      	mov	r4, sl
 801ceaa:	2000      	movs	r0, #0
 801ceac:	f04f 0c0a 	mov.w	ip, #10
 801ceb0:	4621      	mov	r1, r4
 801ceb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ceb6:	3b30      	subs	r3, #48	; 0x30
 801ceb8:	2b09      	cmp	r3, #9
 801ceba:	d94e      	bls.n	801cf5a <_svfiprintf_r+0x17e>
 801cebc:	b1b0      	cbz	r0, 801ceec <_svfiprintf_r+0x110>
 801cebe:	9207      	str	r2, [sp, #28]
 801cec0:	e014      	b.n	801ceec <_svfiprintf_r+0x110>
 801cec2:	eba0 0308 	sub.w	r3, r0, r8
 801cec6:	fa09 f303 	lsl.w	r3, r9, r3
 801ceca:	4313      	orrs	r3, r2
 801cecc:	9304      	str	r3, [sp, #16]
 801cece:	46a2      	mov	sl, r4
 801ced0:	e7d2      	b.n	801ce78 <_svfiprintf_r+0x9c>
 801ced2:	9b03      	ldr	r3, [sp, #12]
 801ced4:	1d19      	adds	r1, r3, #4
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	9103      	str	r1, [sp, #12]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	bfbb      	ittet	lt
 801cede:	425b      	neglt	r3, r3
 801cee0:	f042 0202 	orrlt.w	r2, r2, #2
 801cee4:	9307      	strge	r3, [sp, #28]
 801cee6:	9307      	strlt	r3, [sp, #28]
 801cee8:	bfb8      	it	lt
 801ceea:	9204      	strlt	r2, [sp, #16]
 801ceec:	7823      	ldrb	r3, [r4, #0]
 801ceee:	2b2e      	cmp	r3, #46	; 0x2e
 801cef0:	d10c      	bne.n	801cf0c <_svfiprintf_r+0x130>
 801cef2:	7863      	ldrb	r3, [r4, #1]
 801cef4:	2b2a      	cmp	r3, #42	; 0x2a
 801cef6:	d135      	bne.n	801cf64 <_svfiprintf_r+0x188>
 801cef8:	9b03      	ldr	r3, [sp, #12]
 801cefa:	1d1a      	adds	r2, r3, #4
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	9203      	str	r2, [sp, #12]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	bfb8      	it	lt
 801cf04:	f04f 33ff 	movlt.w	r3, #4294967295
 801cf08:	3402      	adds	r4, #2
 801cf0a:	9305      	str	r3, [sp, #20]
 801cf0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801cfd8 <_svfiprintf_r+0x1fc>
 801cf10:	7821      	ldrb	r1, [r4, #0]
 801cf12:	2203      	movs	r2, #3
 801cf14:	4650      	mov	r0, sl
 801cf16:	f7fb fa73 	bl	8018400 <memchr>
 801cf1a:	b140      	cbz	r0, 801cf2e <_svfiprintf_r+0x152>
 801cf1c:	2340      	movs	r3, #64	; 0x40
 801cf1e:	eba0 000a 	sub.w	r0, r0, sl
 801cf22:	fa03 f000 	lsl.w	r0, r3, r0
 801cf26:	9b04      	ldr	r3, [sp, #16]
 801cf28:	4303      	orrs	r3, r0
 801cf2a:	3401      	adds	r4, #1
 801cf2c:	9304      	str	r3, [sp, #16]
 801cf2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf32:	4826      	ldr	r0, [pc, #152]	; (801cfcc <_svfiprintf_r+0x1f0>)
 801cf34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cf38:	2206      	movs	r2, #6
 801cf3a:	f7fb fa61 	bl	8018400 <memchr>
 801cf3e:	2800      	cmp	r0, #0
 801cf40:	d038      	beq.n	801cfb4 <_svfiprintf_r+0x1d8>
 801cf42:	4b23      	ldr	r3, [pc, #140]	; (801cfd0 <_svfiprintf_r+0x1f4>)
 801cf44:	bb1b      	cbnz	r3, 801cf8e <_svfiprintf_r+0x1b2>
 801cf46:	9b03      	ldr	r3, [sp, #12]
 801cf48:	3307      	adds	r3, #7
 801cf4a:	f023 0307 	bic.w	r3, r3, #7
 801cf4e:	3308      	adds	r3, #8
 801cf50:	9303      	str	r3, [sp, #12]
 801cf52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf54:	4433      	add	r3, r6
 801cf56:	9309      	str	r3, [sp, #36]	; 0x24
 801cf58:	e767      	b.n	801ce2a <_svfiprintf_r+0x4e>
 801cf5a:	fb0c 3202 	mla	r2, ip, r2, r3
 801cf5e:	460c      	mov	r4, r1
 801cf60:	2001      	movs	r0, #1
 801cf62:	e7a5      	b.n	801ceb0 <_svfiprintf_r+0xd4>
 801cf64:	2300      	movs	r3, #0
 801cf66:	3401      	adds	r4, #1
 801cf68:	9305      	str	r3, [sp, #20]
 801cf6a:	4619      	mov	r1, r3
 801cf6c:	f04f 0c0a 	mov.w	ip, #10
 801cf70:	4620      	mov	r0, r4
 801cf72:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf76:	3a30      	subs	r2, #48	; 0x30
 801cf78:	2a09      	cmp	r2, #9
 801cf7a:	d903      	bls.n	801cf84 <_svfiprintf_r+0x1a8>
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d0c5      	beq.n	801cf0c <_svfiprintf_r+0x130>
 801cf80:	9105      	str	r1, [sp, #20]
 801cf82:	e7c3      	b.n	801cf0c <_svfiprintf_r+0x130>
 801cf84:	fb0c 2101 	mla	r1, ip, r1, r2
 801cf88:	4604      	mov	r4, r0
 801cf8a:	2301      	movs	r3, #1
 801cf8c:	e7f0      	b.n	801cf70 <_svfiprintf_r+0x194>
 801cf8e:	ab03      	add	r3, sp, #12
 801cf90:	9300      	str	r3, [sp, #0]
 801cf92:	462a      	mov	r2, r5
 801cf94:	4b0f      	ldr	r3, [pc, #60]	; (801cfd4 <_svfiprintf_r+0x1f8>)
 801cf96:	a904      	add	r1, sp, #16
 801cf98:	4638      	mov	r0, r7
 801cf9a:	f7fc fa3d 	bl	8019418 <_printf_float>
 801cf9e:	1c42      	adds	r2, r0, #1
 801cfa0:	4606      	mov	r6, r0
 801cfa2:	d1d6      	bne.n	801cf52 <_svfiprintf_r+0x176>
 801cfa4:	89ab      	ldrh	r3, [r5, #12]
 801cfa6:	065b      	lsls	r3, r3, #25
 801cfa8:	f53f af2c 	bmi.w	801ce04 <_svfiprintf_r+0x28>
 801cfac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cfae:	b01d      	add	sp, #116	; 0x74
 801cfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfb4:	ab03      	add	r3, sp, #12
 801cfb6:	9300      	str	r3, [sp, #0]
 801cfb8:	462a      	mov	r2, r5
 801cfba:	4b06      	ldr	r3, [pc, #24]	; (801cfd4 <_svfiprintf_r+0x1f8>)
 801cfbc:	a904      	add	r1, sp, #16
 801cfbe:	4638      	mov	r0, r7
 801cfc0:	f7fc fcce 	bl	8019960 <_printf_i>
 801cfc4:	e7eb      	b.n	801cf9e <_svfiprintf_r+0x1c2>
 801cfc6:	bf00      	nop
 801cfc8:	08051e24 	.word	0x08051e24
 801cfcc:	08051e2e 	.word	0x08051e2e
 801cfd0:	08019419 	.word	0x08019419
 801cfd4:	0801cd25 	.word	0x0801cd25
 801cfd8:	08051e2a 	.word	0x08051e2a
 801cfdc:	00000000 	.word	0x00000000

0801cfe0 <nan>:
 801cfe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cfe8 <nan+0x8>
 801cfe4:	4770      	bx	lr
 801cfe6:	bf00      	nop
 801cfe8:	00000000 	.word	0x00000000
 801cfec:	7ff80000 	.word	0x7ff80000

0801cff0 <_sbrk_r>:
 801cff0:	b538      	push	{r3, r4, r5, lr}
 801cff2:	4d06      	ldr	r5, [pc, #24]	; (801d00c <_sbrk_r+0x1c>)
 801cff4:	2300      	movs	r3, #0
 801cff6:	4604      	mov	r4, r0
 801cff8:	4608      	mov	r0, r1
 801cffa:	602b      	str	r3, [r5, #0]
 801cffc:	f7e8 fe92 	bl	8005d24 <_sbrk>
 801d000:	1c43      	adds	r3, r0, #1
 801d002:	d102      	bne.n	801d00a <_sbrk_r+0x1a>
 801d004:	682b      	ldr	r3, [r5, #0]
 801d006:	b103      	cbz	r3, 801d00a <_sbrk_r+0x1a>
 801d008:	6023      	str	r3, [r4, #0]
 801d00a:	bd38      	pop	{r3, r4, r5, pc}
 801d00c:	2000095c 	.word	0x2000095c

0801d010 <strncmp>:
 801d010:	b510      	push	{r4, lr}
 801d012:	b17a      	cbz	r2, 801d034 <strncmp+0x24>
 801d014:	4603      	mov	r3, r0
 801d016:	3901      	subs	r1, #1
 801d018:	1884      	adds	r4, r0, r2
 801d01a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d01e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d022:	4290      	cmp	r0, r2
 801d024:	d101      	bne.n	801d02a <strncmp+0x1a>
 801d026:	42a3      	cmp	r3, r4
 801d028:	d101      	bne.n	801d02e <strncmp+0x1e>
 801d02a:	1a80      	subs	r0, r0, r2
 801d02c:	bd10      	pop	{r4, pc}
 801d02e:	2800      	cmp	r0, #0
 801d030:	d1f3      	bne.n	801d01a <strncmp+0xa>
 801d032:	e7fa      	b.n	801d02a <strncmp+0x1a>
 801d034:	4610      	mov	r0, r2
 801d036:	e7f9      	b.n	801d02c <strncmp+0x1c>

0801d038 <__ascii_wctomb>:
 801d038:	b149      	cbz	r1, 801d04e <__ascii_wctomb+0x16>
 801d03a:	2aff      	cmp	r2, #255	; 0xff
 801d03c:	bf85      	ittet	hi
 801d03e:	238a      	movhi	r3, #138	; 0x8a
 801d040:	6003      	strhi	r3, [r0, #0]
 801d042:	700a      	strbls	r2, [r1, #0]
 801d044:	f04f 30ff 	movhi.w	r0, #4294967295
 801d048:	bf98      	it	ls
 801d04a:	2001      	movls	r0, #1
 801d04c:	4770      	bx	lr
 801d04e:	4608      	mov	r0, r1
 801d050:	4770      	bx	lr
	...

0801d054 <__assert_func>:
 801d054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d056:	4614      	mov	r4, r2
 801d058:	461a      	mov	r2, r3
 801d05a:	4b09      	ldr	r3, [pc, #36]	; (801d080 <__assert_func+0x2c>)
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	4605      	mov	r5, r0
 801d060:	68d8      	ldr	r0, [r3, #12]
 801d062:	b14c      	cbz	r4, 801d078 <__assert_func+0x24>
 801d064:	4b07      	ldr	r3, [pc, #28]	; (801d084 <__assert_func+0x30>)
 801d066:	9100      	str	r1, [sp, #0]
 801d068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d06c:	4906      	ldr	r1, [pc, #24]	; (801d088 <__assert_func+0x34>)
 801d06e:	462b      	mov	r3, r5
 801d070:	f000 f80e 	bl	801d090 <fiprintf>
 801d074:	f000 fa8c 	bl	801d590 <abort>
 801d078:	4b04      	ldr	r3, [pc, #16]	; (801d08c <__assert_func+0x38>)
 801d07a:	461c      	mov	r4, r3
 801d07c:	e7f3      	b.n	801d066 <__assert_func+0x12>
 801d07e:	bf00      	nop
 801d080:	20000064 	.word	0x20000064
 801d084:	08051e35 	.word	0x08051e35
 801d088:	08051e42 	.word	0x08051e42
 801d08c:	08051e70 	.word	0x08051e70

0801d090 <fiprintf>:
 801d090:	b40e      	push	{r1, r2, r3}
 801d092:	b503      	push	{r0, r1, lr}
 801d094:	4601      	mov	r1, r0
 801d096:	ab03      	add	r3, sp, #12
 801d098:	4805      	ldr	r0, [pc, #20]	; (801d0b0 <fiprintf+0x20>)
 801d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d09e:	6800      	ldr	r0, [r0, #0]
 801d0a0:	9301      	str	r3, [sp, #4]
 801d0a2:	f000 f885 	bl	801d1b0 <_vfiprintf_r>
 801d0a6:	b002      	add	sp, #8
 801d0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0ac:	b003      	add	sp, #12
 801d0ae:	4770      	bx	lr
 801d0b0:	20000064 	.word	0x20000064

0801d0b4 <memmove>:
 801d0b4:	4288      	cmp	r0, r1
 801d0b6:	b510      	push	{r4, lr}
 801d0b8:	eb01 0402 	add.w	r4, r1, r2
 801d0bc:	d902      	bls.n	801d0c4 <memmove+0x10>
 801d0be:	4284      	cmp	r4, r0
 801d0c0:	4623      	mov	r3, r4
 801d0c2:	d807      	bhi.n	801d0d4 <memmove+0x20>
 801d0c4:	1e43      	subs	r3, r0, #1
 801d0c6:	42a1      	cmp	r1, r4
 801d0c8:	d008      	beq.n	801d0dc <memmove+0x28>
 801d0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d0ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d0d2:	e7f8      	b.n	801d0c6 <memmove+0x12>
 801d0d4:	4402      	add	r2, r0
 801d0d6:	4601      	mov	r1, r0
 801d0d8:	428a      	cmp	r2, r1
 801d0da:	d100      	bne.n	801d0de <memmove+0x2a>
 801d0dc:	bd10      	pop	{r4, pc}
 801d0de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d0e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d0e6:	e7f7      	b.n	801d0d8 <memmove+0x24>

0801d0e8 <__malloc_lock>:
 801d0e8:	4801      	ldr	r0, [pc, #4]	; (801d0f0 <__malloc_lock+0x8>)
 801d0ea:	f000 bc11 	b.w	801d910 <__retarget_lock_acquire_recursive>
 801d0ee:	bf00      	nop
 801d0f0:	20000960 	.word	0x20000960

0801d0f4 <__malloc_unlock>:
 801d0f4:	4801      	ldr	r0, [pc, #4]	; (801d0fc <__malloc_unlock+0x8>)
 801d0f6:	f000 bc0c 	b.w	801d912 <__retarget_lock_release_recursive>
 801d0fa:	bf00      	nop
 801d0fc:	20000960 	.word	0x20000960

0801d100 <_realloc_r>:
 801d100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d104:	4680      	mov	r8, r0
 801d106:	4614      	mov	r4, r2
 801d108:	460e      	mov	r6, r1
 801d10a:	b921      	cbnz	r1, 801d116 <_realloc_r+0x16>
 801d10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d110:	4611      	mov	r1, r2
 801d112:	f7ff bd93 	b.w	801cc3c <_malloc_r>
 801d116:	b92a      	cbnz	r2, 801d124 <_realloc_r+0x24>
 801d118:	f7ff fd24 	bl	801cb64 <_free_r>
 801d11c:	4625      	mov	r5, r4
 801d11e:	4628      	mov	r0, r5
 801d120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d124:	f000 fc5c 	bl	801d9e0 <_malloc_usable_size_r>
 801d128:	4284      	cmp	r4, r0
 801d12a:	4607      	mov	r7, r0
 801d12c:	d802      	bhi.n	801d134 <_realloc_r+0x34>
 801d12e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d132:	d812      	bhi.n	801d15a <_realloc_r+0x5a>
 801d134:	4621      	mov	r1, r4
 801d136:	4640      	mov	r0, r8
 801d138:	f7ff fd80 	bl	801cc3c <_malloc_r>
 801d13c:	4605      	mov	r5, r0
 801d13e:	2800      	cmp	r0, #0
 801d140:	d0ed      	beq.n	801d11e <_realloc_r+0x1e>
 801d142:	42bc      	cmp	r4, r7
 801d144:	4622      	mov	r2, r4
 801d146:	4631      	mov	r1, r6
 801d148:	bf28      	it	cs
 801d14a:	463a      	movcs	r2, r7
 801d14c:	f7ff f824 	bl	801c198 <memcpy>
 801d150:	4631      	mov	r1, r6
 801d152:	4640      	mov	r0, r8
 801d154:	f7ff fd06 	bl	801cb64 <_free_r>
 801d158:	e7e1      	b.n	801d11e <_realloc_r+0x1e>
 801d15a:	4635      	mov	r5, r6
 801d15c:	e7df      	b.n	801d11e <_realloc_r+0x1e>

0801d15e <__sfputc_r>:
 801d15e:	6893      	ldr	r3, [r2, #8]
 801d160:	3b01      	subs	r3, #1
 801d162:	2b00      	cmp	r3, #0
 801d164:	b410      	push	{r4}
 801d166:	6093      	str	r3, [r2, #8]
 801d168:	da08      	bge.n	801d17c <__sfputc_r+0x1e>
 801d16a:	6994      	ldr	r4, [r2, #24]
 801d16c:	42a3      	cmp	r3, r4
 801d16e:	db01      	blt.n	801d174 <__sfputc_r+0x16>
 801d170:	290a      	cmp	r1, #10
 801d172:	d103      	bne.n	801d17c <__sfputc_r+0x1e>
 801d174:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d178:	f000 b94a 	b.w	801d410 <__swbuf_r>
 801d17c:	6813      	ldr	r3, [r2, #0]
 801d17e:	1c58      	adds	r0, r3, #1
 801d180:	6010      	str	r0, [r2, #0]
 801d182:	7019      	strb	r1, [r3, #0]
 801d184:	4608      	mov	r0, r1
 801d186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d18a:	4770      	bx	lr

0801d18c <__sfputs_r>:
 801d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d18e:	4606      	mov	r6, r0
 801d190:	460f      	mov	r7, r1
 801d192:	4614      	mov	r4, r2
 801d194:	18d5      	adds	r5, r2, r3
 801d196:	42ac      	cmp	r4, r5
 801d198:	d101      	bne.n	801d19e <__sfputs_r+0x12>
 801d19a:	2000      	movs	r0, #0
 801d19c:	e007      	b.n	801d1ae <__sfputs_r+0x22>
 801d19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1a2:	463a      	mov	r2, r7
 801d1a4:	4630      	mov	r0, r6
 801d1a6:	f7ff ffda 	bl	801d15e <__sfputc_r>
 801d1aa:	1c43      	adds	r3, r0, #1
 801d1ac:	d1f3      	bne.n	801d196 <__sfputs_r+0xa>
 801d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d1b0 <_vfiprintf_r>:
 801d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1b4:	460d      	mov	r5, r1
 801d1b6:	b09d      	sub	sp, #116	; 0x74
 801d1b8:	4614      	mov	r4, r2
 801d1ba:	4698      	mov	r8, r3
 801d1bc:	4606      	mov	r6, r0
 801d1be:	b118      	cbz	r0, 801d1c8 <_vfiprintf_r+0x18>
 801d1c0:	6983      	ldr	r3, [r0, #24]
 801d1c2:	b90b      	cbnz	r3, 801d1c8 <_vfiprintf_r+0x18>
 801d1c4:	f000 fb06 	bl	801d7d4 <__sinit>
 801d1c8:	4b89      	ldr	r3, [pc, #548]	; (801d3f0 <_vfiprintf_r+0x240>)
 801d1ca:	429d      	cmp	r5, r3
 801d1cc:	d11b      	bne.n	801d206 <_vfiprintf_r+0x56>
 801d1ce:	6875      	ldr	r5, [r6, #4]
 801d1d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1d2:	07d9      	lsls	r1, r3, #31
 801d1d4:	d405      	bmi.n	801d1e2 <_vfiprintf_r+0x32>
 801d1d6:	89ab      	ldrh	r3, [r5, #12]
 801d1d8:	059a      	lsls	r2, r3, #22
 801d1da:	d402      	bmi.n	801d1e2 <_vfiprintf_r+0x32>
 801d1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d1de:	f000 fb97 	bl	801d910 <__retarget_lock_acquire_recursive>
 801d1e2:	89ab      	ldrh	r3, [r5, #12]
 801d1e4:	071b      	lsls	r3, r3, #28
 801d1e6:	d501      	bpl.n	801d1ec <_vfiprintf_r+0x3c>
 801d1e8:	692b      	ldr	r3, [r5, #16]
 801d1ea:	b9eb      	cbnz	r3, 801d228 <_vfiprintf_r+0x78>
 801d1ec:	4629      	mov	r1, r5
 801d1ee:	4630      	mov	r0, r6
 801d1f0:	f000 f960 	bl	801d4b4 <__swsetup_r>
 801d1f4:	b1c0      	cbz	r0, 801d228 <_vfiprintf_r+0x78>
 801d1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1f8:	07dc      	lsls	r4, r3, #31
 801d1fa:	d50e      	bpl.n	801d21a <_vfiprintf_r+0x6a>
 801d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 801d200:	b01d      	add	sp, #116	; 0x74
 801d202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d206:	4b7b      	ldr	r3, [pc, #492]	; (801d3f4 <_vfiprintf_r+0x244>)
 801d208:	429d      	cmp	r5, r3
 801d20a:	d101      	bne.n	801d210 <_vfiprintf_r+0x60>
 801d20c:	68b5      	ldr	r5, [r6, #8]
 801d20e:	e7df      	b.n	801d1d0 <_vfiprintf_r+0x20>
 801d210:	4b79      	ldr	r3, [pc, #484]	; (801d3f8 <_vfiprintf_r+0x248>)
 801d212:	429d      	cmp	r5, r3
 801d214:	bf08      	it	eq
 801d216:	68f5      	ldreq	r5, [r6, #12]
 801d218:	e7da      	b.n	801d1d0 <_vfiprintf_r+0x20>
 801d21a:	89ab      	ldrh	r3, [r5, #12]
 801d21c:	0598      	lsls	r0, r3, #22
 801d21e:	d4ed      	bmi.n	801d1fc <_vfiprintf_r+0x4c>
 801d220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d222:	f000 fb76 	bl	801d912 <__retarget_lock_release_recursive>
 801d226:	e7e9      	b.n	801d1fc <_vfiprintf_r+0x4c>
 801d228:	2300      	movs	r3, #0
 801d22a:	9309      	str	r3, [sp, #36]	; 0x24
 801d22c:	2320      	movs	r3, #32
 801d22e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d232:	f8cd 800c 	str.w	r8, [sp, #12]
 801d236:	2330      	movs	r3, #48	; 0x30
 801d238:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d3fc <_vfiprintf_r+0x24c>
 801d23c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d240:	f04f 0901 	mov.w	r9, #1
 801d244:	4623      	mov	r3, r4
 801d246:	469a      	mov	sl, r3
 801d248:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d24c:	b10a      	cbz	r2, 801d252 <_vfiprintf_r+0xa2>
 801d24e:	2a25      	cmp	r2, #37	; 0x25
 801d250:	d1f9      	bne.n	801d246 <_vfiprintf_r+0x96>
 801d252:	ebba 0b04 	subs.w	fp, sl, r4
 801d256:	d00b      	beq.n	801d270 <_vfiprintf_r+0xc0>
 801d258:	465b      	mov	r3, fp
 801d25a:	4622      	mov	r2, r4
 801d25c:	4629      	mov	r1, r5
 801d25e:	4630      	mov	r0, r6
 801d260:	f7ff ff94 	bl	801d18c <__sfputs_r>
 801d264:	3001      	adds	r0, #1
 801d266:	f000 80aa 	beq.w	801d3be <_vfiprintf_r+0x20e>
 801d26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d26c:	445a      	add	r2, fp
 801d26e:	9209      	str	r2, [sp, #36]	; 0x24
 801d270:	f89a 3000 	ldrb.w	r3, [sl]
 801d274:	2b00      	cmp	r3, #0
 801d276:	f000 80a2 	beq.w	801d3be <_vfiprintf_r+0x20e>
 801d27a:	2300      	movs	r3, #0
 801d27c:	f04f 32ff 	mov.w	r2, #4294967295
 801d280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d284:	f10a 0a01 	add.w	sl, sl, #1
 801d288:	9304      	str	r3, [sp, #16]
 801d28a:	9307      	str	r3, [sp, #28]
 801d28c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d290:	931a      	str	r3, [sp, #104]	; 0x68
 801d292:	4654      	mov	r4, sl
 801d294:	2205      	movs	r2, #5
 801d296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d29a:	4858      	ldr	r0, [pc, #352]	; (801d3fc <_vfiprintf_r+0x24c>)
 801d29c:	f7fb f8b0 	bl	8018400 <memchr>
 801d2a0:	9a04      	ldr	r2, [sp, #16]
 801d2a2:	b9d8      	cbnz	r0, 801d2dc <_vfiprintf_r+0x12c>
 801d2a4:	06d1      	lsls	r1, r2, #27
 801d2a6:	bf44      	itt	mi
 801d2a8:	2320      	movmi	r3, #32
 801d2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d2ae:	0713      	lsls	r3, r2, #28
 801d2b0:	bf44      	itt	mi
 801d2b2:	232b      	movmi	r3, #43	; 0x2b
 801d2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d2b8:	f89a 3000 	ldrb.w	r3, [sl]
 801d2bc:	2b2a      	cmp	r3, #42	; 0x2a
 801d2be:	d015      	beq.n	801d2ec <_vfiprintf_r+0x13c>
 801d2c0:	9a07      	ldr	r2, [sp, #28]
 801d2c2:	4654      	mov	r4, sl
 801d2c4:	2000      	movs	r0, #0
 801d2c6:	f04f 0c0a 	mov.w	ip, #10
 801d2ca:	4621      	mov	r1, r4
 801d2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2d0:	3b30      	subs	r3, #48	; 0x30
 801d2d2:	2b09      	cmp	r3, #9
 801d2d4:	d94e      	bls.n	801d374 <_vfiprintf_r+0x1c4>
 801d2d6:	b1b0      	cbz	r0, 801d306 <_vfiprintf_r+0x156>
 801d2d8:	9207      	str	r2, [sp, #28]
 801d2da:	e014      	b.n	801d306 <_vfiprintf_r+0x156>
 801d2dc:	eba0 0308 	sub.w	r3, r0, r8
 801d2e0:	fa09 f303 	lsl.w	r3, r9, r3
 801d2e4:	4313      	orrs	r3, r2
 801d2e6:	9304      	str	r3, [sp, #16]
 801d2e8:	46a2      	mov	sl, r4
 801d2ea:	e7d2      	b.n	801d292 <_vfiprintf_r+0xe2>
 801d2ec:	9b03      	ldr	r3, [sp, #12]
 801d2ee:	1d19      	adds	r1, r3, #4
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	9103      	str	r1, [sp, #12]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	bfbb      	ittet	lt
 801d2f8:	425b      	neglt	r3, r3
 801d2fa:	f042 0202 	orrlt.w	r2, r2, #2
 801d2fe:	9307      	strge	r3, [sp, #28]
 801d300:	9307      	strlt	r3, [sp, #28]
 801d302:	bfb8      	it	lt
 801d304:	9204      	strlt	r2, [sp, #16]
 801d306:	7823      	ldrb	r3, [r4, #0]
 801d308:	2b2e      	cmp	r3, #46	; 0x2e
 801d30a:	d10c      	bne.n	801d326 <_vfiprintf_r+0x176>
 801d30c:	7863      	ldrb	r3, [r4, #1]
 801d30e:	2b2a      	cmp	r3, #42	; 0x2a
 801d310:	d135      	bne.n	801d37e <_vfiprintf_r+0x1ce>
 801d312:	9b03      	ldr	r3, [sp, #12]
 801d314:	1d1a      	adds	r2, r3, #4
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	9203      	str	r2, [sp, #12]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	bfb8      	it	lt
 801d31e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d322:	3402      	adds	r4, #2
 801d324:	9305      	str	r3, [sp, #20]
 801d326:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d40c <_vfiprintf_r+0x25c>
 801d32a:	7821      	ldrb	r1, [r4, #0]
 801d32c:	2203      	movs	r2, #3
 801d32e:	4650      	mov	r0, sl
 801d330:	f7fb f866 	bl	8018400 <memchr>
 801d334:	b140      	cbz	r0, 801d348 <_vfiprintf_r+0x198>
 801d336:	2340      	movs	r3, #64	; 0x40
 801d338:	eba0 000a 	sub.w	r0, r0, sl
 801d33c:	fa03 f000 	lsl.w	r0, r3, r0
 801d340:	9b04      	ldr	r3, [sp, #16]
 801d342:	4303      	orrs	r3, r0
 801d344:	3401      	adds	r4, #1
 801d346:	9304      	str	r3, [sp, #16]
 801d348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d34c:	482c      	ldr	r0, [pc, #176]	; (801d400 <_vfiprintf_r+0x250>)
 801d34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d352:	2206      	movs	r2, #6
 801d354:	f7fb f854 	bl	8018400 <memchr>
 801d358:	2800      	cmp	r0, #0
 801d35a:	d03f      	beq.n	801d3dc <_vfiprintf_r+0x22c>
 801d35c:	4b29      	ldr	r3, [pc, #164]	; (801d404 <_vfiprintf_r+0x254>)
 801d35e:	bb1b      	cbnz	r3, 801d3a8 <_vfiprintf_r+0x1f8>
 801d360:	9b03      	ldr	r3, [sp, #12]
 801d362:	3307      	adds	r3, #7
 801d364:	f023 0307 	bic.w	r3, r3, #7
 801d368:	3308      	adds	r3, #8
 801d36a:	9303      	str	r3, [sp, #12]
 801d36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d36e:	443b      	add	r3, r7
 801d370:	9309      	str	r3, [sp, #36]	; 0x24
 801d372:	e767      	b.n	801d244 <_vfiprintf_r+0x94>
 801d374:	fb0c 3202 	mla	r2, ip, r2, r3
 801d378:	460c      	mov	r4, r1
 801d37a:	2001      	movs	r0, #1
 801d37c:	e7a5      	b.n	801d2ca <_vfiprintf_r+0x11a>
 801d37e:	2300      	movs	r3, #0
 801d380:	3401      	adds	r4, #1
 801d382:	9305      	str	r3, [sp, #20]
 801d384:	4619      	mov	r1, r3
 801d386:	f04f 0c0a 	mov.w	ip, #10
 801d38a:	4620      	mov	r0, r4
 801d38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d390:	3a30      	subs	r2, #48	; 0x30
 801d392:	2a09      	cmp	r2, #9
 801d394:	d903      	bls.n	801d39e <_vfiprintf_r+0x1ee>
 801d396:	2b00      	cmp	r3, #0
 801d398:	d0c5      	beq.n	801d326 <_vfiprintf_r+0x176>
 801d39a:	9105      	str	r1, [sp, #20]
 801d39c:	e7c3      	b.n	801d326 <_vfiprintf_r+0x176>
 801d39e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	e7f0      	b.n	801d38a <_vfiprintf_r+0x1da>
 801d3a8:	ab03      	add	r3, sp, #12
 801d3aa:	9300      	str	r3, [sp, #0]
 801d3ac:	462a      	mov	r2, r5
 801d3ae:	4b16      	ldr	r3, [pc, #88]	; (801d408 <_vfiprintf_r+0x258>)
 801d3b0:	a904      	add	r1, sp, #16
 801d3b2:	4630      	mov	r0, r6
 801d3b4:	f7fc f830 	bl	8019418 <_printf_float>
 801d3b8:	4607      	mov	r7, r0
 801d3ba:	1c78      	adds	r0, r7, #1
 801d3bc:	d1d6      	bne.n	801d36c <_vfiprintf_r+0x1bc>
 801d3be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d3c0:	07d9      	lsls	r1, r3, #31
 801d3c2:	d405      	bmi.n	801d3d0 <_vfiprintf_r+0x220>
 801d3c4:	89ab      	ldrh	r3, [r5, #12]
 801d3c6:	059a      	lsls	r2, r3, #22
 801d3c8:	d402      	bmi.n	801d3d0 <_vfiprintf_r+0x220>
 801d3ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d3cc:	f000 faa1 	bl	801d912 <__retarget_lock_release_recursive>
 801d3d0:	89ab      	ldrh	r3, [r5, #12]
 801d3d2:	065b      	lsls	r3, r3, #25
 801d3d4:	f53f af12 	bmi.w	801d1fc <_vfiprintf_r+0x4c>
 801d3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d3da:	e711      	b.n	801d200 <_vfiprintf_r+0x50>
 801d3dc:	ab03      	add	r3, sp, #12
 801d3de:	9300      	str	r3, [sp, #0]
 801d3e0:	462a      	mov	r2, r5
 801d3e2:	4b09      	ldr	r3, [pc, #36]	; (801d408 <_vfiprintf_r+0x258>)
 801d3e4:	a904      	add	r1, sp, #16
 801d3e6:	4630      	mov	r0, r6
 801d3e8:	f7fc faba 	bl	8019960 <_printf_i>
 801d3ec:	e7e4      	b.n	801d3b8 <_vfiprintf_r+0x208>
 801d3ee:	bf00      	nop
 801d3f0:	08051e94 	.word	0x08051e94
 801d3f4:	08051eb4 	.word	0x08051eb4
 801d3f8:	08051e74 	.word	0x08051e74
 801d3fc:	08051e24 	.word	0x08051e24
 801d400:	08051e2e 	.word	0x08051e2e
 801d404:	08019419 	.word	0x08019419
 801d408:	0801d18d 	.word	0x0801d18d
 801d40c:	08051e2a 	.word	0x08051e2a

0801d410 <__swbuf_r>:
 801d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d412:	460e      	mov	r6, r1
 801d414:	4614      	mov	r4, r2
 801d416:	4605      	mov	r5, r0
 801d418:	b118      	cbz	r0, 801d422 <__swbuf_r+0x12>
 801d41a:	6983      	ldr	r3, [r0, #24]
 801d41c:	b90b      	cbnz	r3, 801d422 <__swbuf_r+0x12>
 801d41e:	f000 f9d9 	bl	801d7d4 <__sinit>
 801d422:	4b21      	ldr	r3, [pc, #132]	; (801d4a8 <__swbuf_r+0x98>)
 801d424:	429c      	cmp	r4, r3
 801d426:	d12b      	bne.n	801d480 <__swbuf_r+0x70>
 801d428:	686c      	ldr	r4, [r5, #4]
 801d42a:	69a3      	ldr	r3, [r4, #24]
 801d42c:	60a3      	str	r3, [r4, #8]
 801d42e:	89a3      	ldrh	r3, [r4, #12]
 801d430:	071a      	lsls	r2, r3, #28
 801d432:	d52f      	bpl.n	801d494 <__swbuf_r+0x84>
 801d434:	6923      	ldr	r3, [r4, #16]
 801d436:	b36b      	cbz	r3, 801d494 <__swbuf_r+0x84>
 801d438:	6923      	ldr	r3, [r4, #16]
 801d43a:	6820      	ldr	r0, [r4, #0]
 801d43c:	1ac0      	subs	r0, r0, r3
 801d43e:	6963      	ldr	r3, [r4, #20]
 801d440:	b2f6      	uxtb	r6, r6
 801d442:	4283      	cmp	r3, r0
 801d444:	4637      	mov	r7, r6
 801d446:	dc04      	bgt.n	801d452 <__swbuf_r+0x42>
 801d448:	4621      	mov	r1, r4
 801d44a:	4628      	mov	r0, r5
 801d44c:	f000 f92e 	bl	801d6ac <_fflush_r>
 801d450:	bb30      	cbnz	r0, 801d4a0 <__swbuf_r+0x90>
 801d452:	68a3      	ldr	r3, [r4, #8]
 801d454:	3b01      	subs	r3, #1
 801d456:	60a3      	str	r3, [r4, #8]
 801d458:	6823      	ldr	r3, [r4, #0]
 801d45a:	1c5a      	adds	r2, r3, #1
 801d45c:	6022      	str	r2, [r4, #0]
 801d45e:	701e      	strb	r6, [r3, #0]
 801d460:	6963      	ldr	r3, [r4, #20]
 801d462:	3001      	adds	r0, #1
 801d464:	4283      	cmp	r3, r0
 801d466:	d004      	beq.n	801d472 <__swbuf_r+0x62>
 801d468:	89a3      	ldrh	r3, [r4, #12]
 801d46a:	07db      	lsls	r3, r3, #31
 801d46c:	d506      	bpl.n	801d47c <__swbuf_r+0x6c>
 801d46e:	2e0a      	cmp	r6, #10
 801d470:	d104      	bne.n	801d47c <__swbuf_r+0x6c>
 801d472:	4621      	mov	r1, r4
 801d474:	4628      	mov	r0, r5
 801d476:	f000 f919 	bl	801d6ac <_fflush_r>
 801d47a:	b988      	cbnz	r0, 801d4a0 <__swbuf_r+0x90>
 801d47c:	4638      	mov	r0, r7
 801d47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d480:	4b0a      	ldr	r3, [pc, #40]	; (801d4ac <__swbuf_r+0x9c>)
 801d482:	429c      	cmp	r4, r3
 801d484:	d101      	bne.n	801d48a <__swbuf_r+0x7a>
 801d486:	68ac      	ldr	r4, [r5, #8]
 801d488:	e7cf      	b.n	801d42a <__swbuf_r+0x1a>
 801d48a:	4b09      	ldr	r3, [pc, #36]	; (801d4b0 <__swbuf_r+0xa0>)
 801d48c:	429c      	cmp	r4, r3
 801d48e:	bf08      	it	eq
 801d490:	68ec      	ldreq	r4, [r5, #12]
 801d492:	e7ca      	b.n	801d42a <__swbuf_r+0x1a>
 801d494:	4621      	mov	r1, r4
 801d496:	4628      	mov	r0, r5
 801d498:	f000 f80c 	bl	801d4b4 <__swsetup_r>
 801d49c:	2800      	cmp	r0, #0
 801d49e:	d0cb      	beq.n	801d438 <__swbuf_r+0x28>
 801d4a0:	f04f 37ff 	mov.w	r7, #4294967295
 801d4a4:	e7ea      	b.n	801d47c <__swbuf_r+0x6c>
 801d4a6:	bf00      	nop
 801d4a8:	08051e94 	.word	0x08051e94
 801d4ac:	08051eb4 	.word	0x08051eb4
 801d4b0:	08051e74 	.word	0x08051e74

0801d4b4 <__swsetup_r>:
 801d4b4:	4b32      	ldr	r3, [pc, #200]	; (801d580 <__swsetup_r+0xcc>)
 801d4b6:	b570      	push	{r4, r5, r6, lr}
 801d4b8:	681d      	ldr	r5, [r3, #0]
 801d4ba:	4606      	mov	r6, r0
 801d4bc:	460c      	mov	r4, r1
 801d4be:	b125      	cbz	r5, 801d4ca <__swsetup_r+0x16>
 801d4c0:	69ab      	ldr	r3, [r5, #24]
 801d4c2:	b913      	cbnz	r3, 801d4ca <__swsetup_r+0x16>
 801d4c4:	4628      	mov	r0, r5
 801d4c6:	f000 f985 	bl	801d7d4 <__sinit>
 801d4ca:	4b2e      	ldr	r3, [pc, #184]	; (801d584 <__swsetup_r+0xd0>)
 801d4cc:	429c      	cmp	r4, r3
 801d4ce:	d10f      	bne.n	801d4f0 <__swsetup_r+0x3c>
 801d4d0:	686c      	ldr	r4, [r5, #4]
 801d4d2:	89a3      	ldrh	r3, [r4, #12]
 801d4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d4d8:	0719      	lsls	r1, r3, #28
 801d4da:	d42c      	bmi.n	801d536 <__swsetup_r+0x82>
 801d4dc:	06dd      	lsls	r5, r3, #27
 801d4de:	d411      	bmi.n	801d504 <__swsetup_r+0x50>
 801d4e0:	2309      	movs	r3, #9
 801d4e2:	6033      	str	r3, [r6, #0]
 801d4e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d4e8:	81a3      	strh	r3, [r4, #12]
 801d4ea:	f04f 30ff 	mov.w	r0, #4294967295
 801d4ee:	e03e      	b.n	801d56e <__swsetup_r+0xba>
 801d4f0:	4b25      	ldr	r3, [pc, #148]	; (801d588 <__swsetup_r+0xd4>)
 801d4f2:	429c      	cmp	r4, r3
 801d4f4:	d101      	bne.n	801d4fa <__swsetup_r+0x46>
 801d4f6:	68ac      	ldr	r4, [r5, #8]
 801d4f8:	e7eb      	b.n	801d4d2 <__swsetup_r+0x1e>
 801d4fa:	4b24      	ldr	r3, [pc, #144]	; (801d58c <__swsetup_r+0xd8>)
 801d4fc:	429c      	cmp	r4, r3
 801d4fe:	bf08      	it	eq
 801d500:	68ec      	ldreq	r4, [r5, #12]
 801d502:	e7e6      	b.n	801d4d2 <__swsetup_r+0x1e>
 801d504:	0758      	lsls	r0, r3, #29
 801d506:	d512      	bpl.n	801d52e <__swsetup_r+0x7a>
 801d508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d50a:	b141      	cbz	r1, 801d51e <__swsetup_r+0x6a>
 801d50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d510:	4299      	cmp	r1, r3
 801d512:	d002      	beq.n	801d51a <__swsetup_r+0x66>
 801d514:	4630      	mov	r0, r6
 801d516:	f7ff fb25 	bl	801cb64 <_free_r>
 801d51a:	2300      	movs	r3, #0
 801d51c:	6363      	str	r3, [r4, #52]	; 0x34
 801d51e:	89a3      	ldrh	r3, [r4, #12]
 801d520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d524:	81a3      	strh	r3, [r4, #12]
 801d526:	2300      	movs	r3, #0
 801d528:	6063      	str	r3, [r4, #4]
 801d52a:	6923      	ldr	r3, [r4, #16]
 801d52c:	6023      	str	r3, [r4, #0]
 801d52e:	89a3      	ldrh	r3, [r4, #12]
 801d530:	f043 0308 	orr.w	r3, r3, #8
 801d534:	81a3      	strh	r3, [r4, #12]
 801d536:	6923      	ldr	r3, [r4, #16]
 801d538:	b94b      	cbnz	r3, 801d54e <__swsetup_r+0x9a>
 801d53a:	89a3      	ldrh	r3, [r4, #12]
 801d53c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d544:	d003      	beq.n	801d54e <__swsetup_r+0x9a>
 801d546:	4621      	mov	r1, r4
 801d548:	4630      	mov	r0, r6
 801d54a:	f000 fa09 	bl	801d960 <__smakebuf_r>
 801d54e:	89a0      	ldrh	r0, [r4, #12]
 801d550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d554:	f010 0301 	ands.w	r3, r0, #1
 801d558:	d00a      	beq.n	801d570 <__swsetup_r+0xbc>
 801d55a:	2300      	movs	r3, #0
 801d55c:	60a3      	str	r3, [r4, #8]
 801d55e:	6963      	ldr	r3, [r4, #20]
 801d560:	425b      	negs	r3, r3
 801d562:	61a3      	str	r3, [r4, #24]
 801d564:	6923      	ldr	r3, [r4, #16]
 801d566:	b943      	cbnz	r3, 801d57a <__swsetup_r+0xc6>
 801d568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d56c:	d1ba      	bne.n	801d4e4 <__swsetup_r+0x30>
 801d56e:	bd70      	pop	{r4, r5, r6, pc}
 801d570:	0781      	lsls	r1, r0, #30
 801d572:	bf58      	it	pl
 801d574:	6963      	ldrpl	r3, [r4, #20]
 801d576:	60a3      	str	r3, [r4, #8]
 801d578:	e7f4      	b.n	801d564 <__swsetup_r+0xb0>
 801d57a:	2000      	movs	r0, #0
 801d57c:	e7f7      	b.n	801d56e <__swsetup_r+0xba>
 801d57e:	bf00      	nop
 801d580:	20000064 	.word	0x20000064
 801d584:	08051e94 	.word	0x08051e94
 801d588:	08051eb4 	.word	0x08051eb4
 801d58c:	08051e74 	.word	0x08051e74

0801d590 <abort>:
 801d590:	b508      	push	{r3, lr}
 801d592:	2006      	movs	r0, #6
 801d594:	f000 fa54 	bl	801da40 <raise>
 801d598:	2001      	movs	r0, #1
 801d59a:	f7e8 fad8 	bl	8005b4e <_exit>
	...

0801d5a0 <__sflush_r>:
 801d5a0:	898a      	ldrh	r2, [r1, #12]
 801d5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a6:	4605      	mov	r5, r0
 801d5a8:	0710      	lsls	r0, r2, #28
 801d5aa:	460c      	mov	r4, r1
 801d5ac:	d458      	bmi.n	801d660 <__sflush_r+0xc0>
 801d5ae:	684b      	ldr	r3, [r1, #4]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	dc05      	bgt.n	801d5c0 <__sflush_r+0x20>
 801d5b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	dc02      	bgt.n	801d5c0 <__sflush_r+0x20>
 801d5ba:	2000      	movs	r0, #0
 801d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d5c2:	2e00      	cmp	r6, #0
 801d5c4:	d0f9      	beq.n	801d5ba <__sflush_r+0x1a>
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d5cc:	682f      	ldr	r7, [r5, #0]
 801d5ce:	602b      	str	r3, [r5, #0]
 801d5d0:	d032      	beq.n	801d638 <__sflush_r+0x98>
 801d5d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d5d4:	89a3      	ldrh	r3, [r4, #12]
 801d5d6:	075a      	lsls	r2, r3, #29
 801d5d8:	d505      	bpl.n	801d5e6 <__sflush_r+0x46>
 801d5da:	6863      	ldr	r3, [r4, #4]
 801d5dc:	1ac0      	subs	r0, r0, r3
 801d5de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d5e0:	b10b      	cbz	r3, 801d5e6 <__sflush_r+0x46>
 801d5e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d5e4:	1ac0      	subs	r0, r0, r3
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	4602      	mov	r2, r0
 801d5ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d5ec:	6a21      	ldr	r1, [r4, #32]
 801d5ee:	4628      	mov	r0, r5
 801d5f0:	47b0      	blx	r6
 801d5f2:	1c43      	adds	r3, r0, #1
 801d5f4:	89a3      	ldrh	r3, [r4, #12]
 801d5f6:	d106      	bne.n	801d606 <__sflush_r+0x66>
 801d5f8:	6829      	ldr	r1, [r5, #0]
 801d5fa:	291d      	cmp	r1, #29
 801d5fc:	d82c      	bhi.n	801d658 <__sflush_r+0xb8>
 801d5fe:	4a2a      	ldr	r2, [pc, #168]	; (801d6a8 <__sflush_r+0x108>)
 801d600:	40ca      	lsrs	r2, r1
 801d602:	07d6      	lsls	r6, r2, #31
 801d604:	d528      	bpl.n	801d658 <__sflush_r+0xb8>
 801d606:	2200      	movs	r2, #0
 801d608:	6062      	str	r2, [r4, #4]
 801d60a:	04d9      	lsls	r1, r3, #19
 801d60c:	6922      	ldr	r2, [r4, #16]
 801d60e:	6022      	str	r2, [r4, #0]
 801d610:	d504      	bpl.n	801d61c <__sflush_r+0x7c>
 801d612:	1c42      	adds	r2, r0, #1
 801d614:	d101      	bne.n	801d61a <__sflush_r+0x7a>
 801d616:	682b      	ldr	r3, [r5, #0]
 801d618:	b903      	cbnz	r3, 801d61c <__sflush_r+0x7c>
 801d61a:	6560      	str	r0, [r4, #84]	; 0x54
 801d61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d61e:	602f      	str	r7, [r5, #0]
 801d620:	2900      	cmp	r1, #0
 801d622:	d0ca      	beq.n	801d5ba <__sflush_r+0x1a>
 801d624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d628:	4299      	cmp	r1, r3
 801d62a:	d002      	beq.n	801d632 <__sflush_r+0x92>
 801d62c:	4628      	mov	r0, r5
 801d62e:	f7ff fa99 	bl	801cb64 <_free_r>
 801d632:	2000      	movs	r0, #0
 801d634:	6360      	str	r0, [r4, #52]	; 0x34
 801d636:	e7c1      	b.n	801d5bc <__sflush_r+0x1c>
 801d638:	6a21      	ldr	r1, [r4, #32]
 801d63a:	2301      	movs	r3, #1
 801d63c:	4628      	mov	r0, r5
 801d63e:	47b0      	blx	r6
 801d640:	1c41      	adds	r1, r0, #1
 801d642:	d1c7      	bne.n	801d5d4 <__sflush_r+0x34>
 801d644:	682b      	ldr	r3, [r5, #0]
 801d646:	2b00      	cmp	r3, #0
 801d648:	d0c4      	beq.n	801d5d4 <__sflush_r+0x34>
 801d64a:	2b1d      	cmp	r3, #29
 801d64c:	d001      	beq.n	801d652 <__sflush_r+0xb2>
 801d64e:	2b16      	cmp	r3, #22
 801d650:	d101      	bne.n	801d656 <__sflush_r+0xb6>
 801d652:	602f      	str	r7, [r5, #0]
 801d654:	e7b1      	b.n	801d5ba <__sflush_r+0x1a>
 801d656:	89a3      	ldrh	r3, [r4, #12]
 801d658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d65c:	81a3      	strh	r3, [r4, #12]
 801d65e:	e7ad      	b.n	801d5bc <__sflush_r+0x1c>
 801d660:	690f      	ldr	r7, [r1, #16]
 801d662:	2f00      	cmp	r7, #0
 801d664:	d0a9      	beq.n	801d5ba <__sflush_r+0x1a>
 801d666:	0793      	lsls	r3, r2, #30
 801d668:	680e      	ldr	r6, [r1, #0]
 801d66a:	bf08      	it	eq
 801d66c:	694b      	ldreq	r3, [r1, #20]
 801d66e:	600f      	str	r7, [r1, #0]
 801d670:	bf18      	it	ne
 801d672:	2300      	movne	r3, #0
 801d674:	eba6 0807 	sub.w	r8, r6, r7
 801d678:	608b      	str	r3, [r1, #8]
 801d67a:	f1b8 0f00 	cmp.w	r8, #0
 801d67e:	dd9c      	ble.n	801d5ba <__sflush_r+0x1a>
 801d680:	6a21      	ldr	r1, [r4, #32]
 801d682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d684:	4643      	mov	r3, r8
 801d686:	463a      	mov	r2, r7
 801d688:	4628      	mov	r0, r5
 801d68a:	47b0      	blx	r6
 801d68c:	2800      	cmp	r0, #0
 801d68e:	dc06      	bgt.n	801d69e <__sflush_r+0xfe>
 801d690:	89a3      	ldrh	r3, [r4, #12]
 801d692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d696:	81a3      	strh	r3, [r4, #12]
 801d698:	f04f 30ff 	mov.w	r0, #4294967295
 801d69c:	e78e      	b.n	801d5bc <__sflush_r+0x1c>
 801d69e:	4407      	add	r7, r0
 801d6a0:	eba8 0800 	sub.w	r8, r8, r0
 801d6a4:	e7e9      	b.n	801d67a <__sflush_r+0xda>
 801d6a6:	bf00      	nop
 801d6a8:	20400001 	.word	0x20400001

0801d6ac <_fflush_r>:
 801d6ac:	b538      	push	{r3, r4, r5, lr}
 801d6ae:	690b      	ldr	r3, [r1, #16]
 801d6b0:	4605      	mov	r5, r0
 801d6b2:	460c      	mov	r4, r1
 801d6b4:	b913      	cbnz	r3, 801d6bc <_fflush_r+0x10>
 801d6b6:	2500      	movs	r5, #0
 801d6b8:	4628      	mov	r0, r5
 801d6ba:	bd38      	pop	{r3, r4, r5, pc}
 801d6bc:	b118      	cbz	r0, 801d6c6 <_fflush_r+0x1a>
 801d6be:	6983      	ldr	r3, [r0, #24]
 801d6c0:	b90b      	cbnz	r3, 801d6c6 <_fflush_r+0x1a>
 801d6c2:	f000 f887 	bl	801d7d4 <__sinit>
 801d6c6:	4b14      	ldr	r3, [pc, #80]	; (801d718 <_fflush_r+0x6c>)
 801d6c8:	429c      	cmp	r4, r3
 801d6ca:	d11b      	bne.n	801d704 <_fflush_r+0x58>
 801d6cc:	686c      	ldr	r4, [r5, #4]
 801d6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d0ef      	beq.n	801d6b6 <_fflush_r+0xa>
 801d6d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d6d8:	07d0      	lsls	r0, r2, #31
 801d6da:	d404      	bmi.n	801d6e6 <_fflush_r+0x3a>
 801d6dc:	0599      	lsls	r1, r3, #22
 801d6de:	d402      	bmi.n	801d6e6 <_fflush_r+0x3a>
 801d6e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6e2:	f000 f915 	bl	801d910 <__retarget_lock_acquire_recursive>
 801d6e6:	4628      	mov	r0, r5
 801d6e8:	4621      	mov	r1, r4
 801d6ea:	f7ff ff59 	bl	801d5a0 <__sflush_r>
 801d6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d6f0:	07da      	lsls	r2, r3, #31
 801d6f2:	4605      	mov	r5, r0
 801d6f4:	d4e0      	bmi.n	801d6b8 <_fflush_r+0xc>
 801d6f6:	89a3      	ldrh	r3, [r4, #12]
 801d6f8:	059b      	lsls	r3, r3, #22
 801d6fa:	d4dd      	bmi.n	801d6b8 <_fflush_r+0xc>
 801d6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6fe:	f000 f908 	bl	801d912 <__retarget_lock_release_recursive>
 801d702:	e7d9      	b.n	801d6b8 <_fflush_r+0xc>
 801d704:	4b05      	ldr	r3, [pc, #20]	; (801d71c <_fflush_r+0x70>)
 801d706:	429c      	cmp	r4, r3
 801d708:	d101      	bne.n	801d70e <_fflush_r+0x62>
 801d70a:	68ac      	ldr	r4, [r5, #8]
 801d70c:	e7df      	b.n	801d6ce <_fflush_r+0x22>
 801d70e:	4b04      	ldr	r3, [pc, #16]	; (801d720 <_fflush_r+0x74>)
 801d710:	429c      	cmp	r4, r3
 801d712:	bf08      	it	eq
 801d714:	68ec      	ldreq	r4, [r5, #12]
 801d716:	e7da      	b.n	801d6ce <_fflush_r+0x22>
 801d718:	08051e94 	.word	0x08051e94
 801d71c:	08051eb4 	.word	0x08051eb4
 801d720:	08051e74 	.word	0x08051e74

0801d724 <std>:
 801d724:	2300      	movs	r3, #0
 801d726:	b510      	push	{r4, lr}
 801d728:	4604      	mov	r4, r0
 801d72a:	e9c0 3300 	strd	r3, r3, [r0]
 801d72e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d732:	6083      	str	r3, [r0, #8]
 801d734:	8181      	strh	r1, [r0, #12]
 801d736:	6643      	str	r3, [r0, #100]	; 0x64
 801d738:	81c2      	strh	r2, [r0, #14]
 801d73a:	6183      	str	r3, [r0, #24]
 801d73c:	4619      	mov	r1, r3
 801d73e:	2208      	movs	r2, #8
 801d740:	305c      	adds	r0, #92	; 0x5c
 801d742:	f7fb fdc1 	bl	80192c8 <memset>
 801d746:	4b05      	ldr	r3, [pc, #20]	; (801d75c <std+0x38>)
 801d748:	6263      	str	r3, [r4, #36]	; 0x24
 801d74a:	4b05      	ldr	r3, [pc, #20]	; (801d760 <std+0x3c>)
 801d74c:	62a3      	str	r3, [r4, #40]	; 0x28
 801d74e:	4b05      	ldr	r3, [pc, #20]	; (801d764 <std+0x40>)
 801d750:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d752:	4b05      	ldr	r3, [pc, #20]	; (801d768 <std+0x44>)
 801d754:	6224      	str	r4, [r4, #32]
 801d756:	6323      	str	r3, [r4, #48]	; 0x30
 801d758:	bd10      	pop	{r4, pc}
 801d75a:	bf00      	nop
 801d75c:	0801da79 	.word	0x0801da79
 801d760:	0801da9b 	.word	0x0801da9b
 801d764:	0801dad3 	.word	0x0801dad3
 801d768:	0801daf7 	.word	0x0801daf7

0801d76c <_cleanup_r>:
 801d76c:	4901      	ldr	r1, [pc, #4]	; (801d774 <_cleanup_r+0x8>)
 801d76e:	f000 b8af 	b.w	801d8d0 <_fwalk_reent>
 801d772:	bf00      	nop
 801d774:	0801d6ad 	.word	0x0801d6ad

0801d778 <__sfmoreglue>:
 801d778:	b570      	push	{r4, r5, r6, lr}
 801d77a:	2268      	movs	r2, #104	; 0x68
 801d77c:	1e4d      	subs	r5, r1, #1
 801d77e:	4355      	muls	r5, r2
 801d780:	460e      	mov	r6, r1
 801d782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d786:	f7ff fa59 	bl	801cc3c <_malloc_r>
 801d78a:	4604      	mov	r4, r0
 801d78c:	b140      	cbz	r0, 801d7a0 <__sfmoreglue+0x28>
 801d78e:	2100      	movs	r1, #0
 801d790:	e9c0 1600 	strd	r1, r6, [r0]
 801d794:	300c      	adds	r0, #12
 801d796:	60a0      	str	r0, [r4, #8]
 801d798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d79c:	f7fb fd94 	bl	80192c8 <memset>
 801d7a0:	4620      	mov	r0, r4
 801d7a2:	bd70      	pop	{r4, r5, r6, pc}

0801d7a4 <__sfp_lock_acquire>:
 801d7a4:	4801      	ldr	r0, [pc, #4]	; (801d7ac <__sfp_lock_acquire+0x8>)
 801d7a6:	f000 b8b3 	b.w	801d910 <__retarget_lock_acquire_recursive>
 801d7aa:	bf00      	nop
 801d7ac:	20000961 	.word	0x20000961

0801d7b0 <__sfp_lock_release>:
 801d7b0:	4801      	ldr	r0, [pc, #4]	; (801d7b8 <__sfp_lock_release+0x8>)
 801d7b2:	f000 b8ae 	b.w	801d912 <__retarget_lock_release_recursive>
 801d7b6:	bf00      	nop
 801d7b8:	20000961 	.word	0x20000961

0801d7bc <__sinit_lock_acquire>:
 801d7bc:	4801      	ldr	r0, [pc, #4]	; (801d7c4 <__sinit_lock_acquire+0x8>)
 801d7be:	f000 b8a7 	b.w	801d910 <__retarget_lock_acquire_recursive>
 801d7c2:	bf00      	nop
 801d7c4:	20000962 	.word	0x20000962

0801d7c8 <__sinit_lock_release>:
 801d7c8:	4801      	ldr	r0, [pc, #4]	; (801d7d0 <__sinit_lock_release+0x8>)
 801d7ca:	f000 b8a2 	b.w	801d912 <__retarget_lock_release_recursive>
 801d7ce:	bf00      	nop
 801d7d0:	20000962 	.word	0x20000962

0801d7d4 <__sinit>:
 801d7d4:	b510      	push	{r4, lr}
 801d7d6:	4604      	mov	r4, r0
 801d7d8:	f7ff fff0 	bl	801d7bc <__sinit_lock_acquire>
 801d7dc:	69a3      	ldr	r3, [r4, #24]
 801d7de:	b11b      	cbz	r3, 801d7e8 <__sinit+0x14>
 801d7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7e4:	f7ff bff0 	b.w	801d7c8 <__sinit_lock_release>
 801d7e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d7ec:	6523      	str	r3, [r4, #80]	; 0x50
 801d7ee:	4b13      	ldr	r3, [pc, #76]	; (801d83c <__sinit+0x68>)
 801d7f0:	4a13      	ldr	r2, [pc, #76]	; (801d840 <__sinit+0x6c>)
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	62a2      	str	r2, [r4, #40]	; 0x28
 801d7f6:	42a3      	cmp	r3, r4
 801d7f8:	bf04      	itt	eq
 801d7fa:	2301      	moveq	r3, #1
 801d7fc:	61a3      	streq	r3, [r4, #24]
 801d7fe:	4620      	mov	r0, r4
 801d800:	f000 f820 	bl	801d844 <__sfp>
 801d804:	6060      	str	r0, [r4, #4]
 801d806:	4620      	mov	r0, r4
 801d808:	f000 f81c 	bl	801d844 <__sfp>
 801d80c:	60a0      	str	r0, [r4, #8]
 801d80e:	4620      	mov	r0, r4
 801d810:	f000 f818 	bl	801d844 <__sfp>
 801d814:	2200      	movs	r2, #0
 801d816:	60e0      	str	r0, [r4, #12]
 801d818:	2104      	movs	r1, #4
 801d81a:	6860      	ldr	r0, [r4, #4]
 801d81c:	f7ff ff82 	bl	801d724 <std>
 801d820:	68a0      	ldr	r0, [r4, #8]
 801d822:	2201      	movs	r2, #1
 801d824:	2109      	movs	r1, #9
 801d826:	f7ff ff7d 	bl	801d724 <std>
 801d82a:	68e0      	ldr	r0, [r4, #12]
 801d82c:	2202      	movs	r2, #2
 801d82e:	2112      	movs	r1, #18
 801d830:	f7ff ff78 	bl	801d724 <std>
 801d834:	2301      	movs	r3, #1
 801d836:	61a3      	str	r3, [r4, #24]
 801d838:	e7d2      	b.n	801d7e0 <__sinit+0xc>
 801d83a:	bf00      	nop
 801d83c:	08051a2c 	.word	0x08051a2c
 801d840:	0801d76d 	.word	0x0801d76d

0801d844 <__sfp>:
 801d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d846:	4607      	mov	r7, r0
 801d848:	f7ff ffac 	bl	801d7a4 <__sfp_lock_acquire>
 801d84c:	4b1e      	ldr	r3, [pc, #120]	; (801d8c8 <__sfp+0x84>)
 801d84e:	681e      	ldr	r6, [r3, #0]
 801d850:	69b3      	ldr	r3, [r6, #24]
 801d852:	b913      	cbnz	r3, 801d85a <__sfp+0x16>
 801d854:	4630      	mov	r0, r6
 801d856:	f7ff ffbd 	bl	801d7d4 <__sinit>
 801d85a:	3648      	adds	r6, #72	; 0x48
 801d85c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d860:	3b01      	subs	r3, #1
 801d862:	d503      	bpl.n	801d86c <__sfp+0x28>
 801d864:	6833      	ldr	r3, [r6, #0]
 801d866:	b30b      	cbz	r3, 801d8ac <__sfp+0x68>
 801d868:	6836      	ldr	r6, [r6, #0]
 801d86a:	e7f7      	b.n	801d85c <__sfp+0x18>
 801d86c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d870:	b9d5      	cbnz	r5, 801d8a8 <__sfp+0x64>
 801d872:	4b16      	ldr	r3, [pc, #88]	; (801d8cc <__sfp+0x88>)
 801d874:	60e3      	str	r3, [r4, #12]
 801d876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d87a:	6665      	str	r5, [r4, #100]	; 0x64
 801d87c:	f000 f847 	bl	801d90e <__retarget_lock_init_recursive>
 801d880:	f7ff ff96 	bl	801d7b0 <__sfp_lock_release>
 801d884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d88c:	6025      	str	r5, [r4, #0]
 801d88e:	61a5      	str	r5, [r4, #24]
 801d890:	2208      	movs	r2, #8
 801d892:	4629      	mov	r1, r5
 801d894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d898:	f7fb fd16 	bl	80192c8 <memset>
 801d89c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d8a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d8a4:	4620      	mov	r0, r4
 801d8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8a8:	3468      	adds	r4, #104	; 0x68
 801d8aa:	e7d9      	b.n	801d860 <__sfp+0x1c>
 801d8ac:	2104      	movs	r1, #4
 801d8ae:	4638      	mov	r0, r7
 801d8b0:	f7ff ff62 	bl	801d778 <__sfmoreglue>
 801d8b4:	4604      	mov	r4, r0
 801d8b6:	6030      	str	r0, [r6, #0]
 801d8b8:	2800      	cmp	r0, #0
 801d8ba:	d1d5      	bne.n	801d868 <__sfp+0x24>
 801d8bc:	f7ff ff78 	bl	801d7b0 <__sfp_lock_release>
 801d8c0:	230c      	movs	r3, #12
 801d8c2:	603b      	str	r3, [r7, #0]
 801d8c4:	e7ee      	b.n	801d8a4 <__sfp+0x60>
 801d8c6:	bf00      	nop
 801d8c8:	08051a2c 	.word	0x08051a2c
 801d8cc:	ffff0001 	.word	0xffff0001

0801d8d0 <_fwalk_reent>:
 801d8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8d4:	4606      	mov	r6, r0
 801d8d6:	4688      	mov	r8, r1
 801d8d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d8dc:	2700      	movs	r7, #0
 801d8de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d8e2:	f1b9 0901 	subs.w	r9, r9, #1
 801d8e6:	d505      	bpl.n	801d8f4 <_fwalk_reent+0x24>
 801d8e8:	6824      	ldr	r4, [r4, #0]
 801d8ea:	2c00      	cmp	r4, #0
 801d8ec:	d1f7      	bne.n	801d8de <_fwalk_reent+0xe>
 801d8ee:	4638      	mov	r0, r7
 801d8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8f4:	89ab      	ldrh	r3, [r5, #12]
 801d8f6:	2b01      	cmp	r3, #1
 801d8f8:	d907      	bls.n	801d90a <_fwalk_reent+0x3a>
 801d8fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d8fe:	3301      	adds	r3, #1
 801d900:	d003      	beq.n	801d90a <_fwalk_reent+0x3a>
 801d902:	4629      	mov	r1, r5
 801d904:	4630      	mov	r0, r6
 801d906:	47c0      	blx	r8
 801d908:	4307      	orrs	r7, r0
 801d90a:	3568      	adds	r5, #104	; 0x68
 801d90c:	e7e9      	b.n	801d8e2 <_fwalk_reent+0x12>

0801d90e <__retarget_lock_init_recursive>:
 801d90e:	4770      	bx	lr

0801d910 <__retarget_lock_acquire_recursive>:
 801d910:	4770      	bx	lr

0801d912 <__retarget_lock_release_recursive>:
 801d912:	4770      	bx	lr

0801d914 <__swhatbuf_r>:
 801d914:	b570      	push	{r4, r5, r6, lr}
 801d916:	460e      	mov	r6, r1
 801d918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d91c:	2900      	cmp	r1, #0
 801d91e:	b096      	sub	sp, #88	; 0x58
 801d920:	4614      	mov	r4, r2
 801d922:	461d      	mov	r5, r3
 801d924:	da08      	bge.n	801d938 <__swhatbuf_r+0x24>
 801d926:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d92a:	2200      	movs	r2, #0
 801d92c:	602a      	str	r2, [r5, #0]
 801d92e:	061a      	lsls	r2, r3, #24
 801d930:	d410      	bmi.n	801d954 <__swhatbuf_r+0x40>
 801d932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d936:	e00e      	b.n	801d956 <__swhatbuf_r+0x42>
 801d938:	466a      	mov	r2, sp
 801d93a:	f000 f903 	bl	801db44 <_fstat_r>
 801d93e:	2800      	cmp	r0, #0
 801d940:	dbf1      	blt.n	801d926 <__swhatbuf_r+0x12>
 801d942:	9a01      	ldr	r2, [sp, #4]
 801d944:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d948:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d94c:	425a      	negs	r2, r3
 801d94e:	415a      	adcs	r2, r3
 801d950:	602a      	str	r2, [r5, #0]
 801d952:	e7ee      	b.n	801d932 <__swhatbuf_r+0x1e>
 801d954:	2340      	movs	r3, #64	; 0x40
 801d956:	2000      	movs	r0, #0
 801d958:	6023      	str	r3, [r4, #0]
 801d95a:	b016      	add	sp, #88	; 0x58
 801d95c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d960 <__smakebuf_r>:
 801d960:	898b      	ldrh	r3, [r1, #12]
 801d962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d964:	079d      	lsls	r5, r3, #30
 801d966:	4606      	mov	r6, r0
 801d968:	460c      	mov	r4, r1
 801d96a:	d507      	bpl.n	801d97c <__smakebuf_r+0x1c>
 801d96c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d970:	6023      	str	r3, [r4, #0]
 801d972:	6123      	str	r3, [r4, #16]
 801d974:	2301      	movs	r3, #1
 801d976:	6163      	str	r3, [r4, #20]
 801d978:	b002      	add	sp, #8
 801d97a:	bd70      	pop	{r4, r5, r6, pc}
 801d97c:	ab01      	add	r3, sp, #4
 801d97e:	466a      	mov	r2, sp
 801d980:	f7ff ffc8 	bl	801d914 <__swhatbuf_r>
 801d984:	9900      	ldr	r1, [sp, #0]
 801d986:	4605      	mov	r5, r0
 801d988:	4630      	mov	r0, r6
 801d98a:	f7ff f957 	bl	801cc3c <_malloc_r>
 801d98e:	b948      	cbnz	r0, 801d9a4 <__smakebuf_r+0x44>
 801d990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d994:	059a      	lsls	r2, r3, #22
 801d996:	d4ef      	bmi.n	801d978 <__smakebuf_r+0x18>
 801d998:	f023 0303 	bic.w	r3, r3, #3
 801d99c:	f043 0302 	orr.w	r3, r3, #2
 801d9a0:	81a3      	strh	r3, [r4, #12]
 801d9a2:	e7e3      	b.n	801d96c <__smakebuf_r+0xc>
 801d9a4:	4b0d      	ldr	r3, [pc, #52]	; (801d9dc <__smakebuf_r+0x7c>)
 801d9a6:	62b3      	str	r3, [r6, #40]	; 0x28
 801d9a8:	89a3      	ldrh	r3, [r4, #12]
 801d9aa:	6020      	str	r0, [r4, #0]
 801d9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d9b0:	81a3      	strh	r3, [r4, #12]
 801d9b2:	9b00      	ldr	r3, [sp, #0]
 801d9b4:	6163      	str	r3, [r4, #20]
 801d9b6:	9b01      	ldr	r3, [sp, #4]
 801d9b8:	6120      	str	r0, [r4, #16]
 801d9ba:	b15b      	cbz	r3, 801d9d4 <__smakebuf_r+0x74>
 801d9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9c0:	4630      	mov	r0, r6
 801d9c2:	f000 f8d1 	bl	801db68 <_isatty_r>
 801d9c6:	b128      	cbz	r0, 801d9d4 <__smakebuf_r+0x74>
 801d9c8:	89a3      	ldrh	r3, [r4, #12]
 801d9ca:	f023 0303 	bic.w	r3, r3, #3
 801d9ce:	f043 0301 	orr.w	r3, r3, #1
 801d9d2:	81a3      	strh	r3, [r4, #12]
 801d9d4:	89a0      	ldrh	r0, [r4, #12]
 801d9d6:	4305      	orrs	r5, r0
 801d9d8:	81a5      	strh	r5, [r4, #12]
 801d9da:	e7cd      	b.n	801d978 <__smakebuf_r+0x18>
 801d9dc:	0801d76d 	.word	0x0801d76d

0801d9e0 <_malloc_usable_size_r>:
 801d9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d9e4:	1f18      	subs	r0, r3, #4
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	bfbc      	itt	lt
 801d9ea:	580b      	ldrlt	r3, [r1, r0]
 801d9ec:	18c0      	addlt	r0, r0, r3
 801d9ee:	4770      	bx	lr

0801d9f0 <_raise_r>:
 801d9f0:	291f      	cmp	r1, #31
 801d9f2:	b538      	push	{r3, r4, r5, lr}
 801d9f4:	4604      	mov	r4, r0
 801d9f6:	460d      	mov	r5, r1
 801d9f8:	d904      	bls.n	801da04 <_raise_r+0x14>
 801d9fa:	2316      	movs	r3, #22
 801d9fc:	6003      	str	r3, [r0, #0]
 801d9fe:	f04f 30ff 	mov.w	r0, #4294967295
 801da02:	bd38      	pop	{r3, r4, r5, pc}
 801da04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801da06:	b112      	cbz	r2, 801da0e <_raise_r+0x1e>
 801da08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801da0c:	b94b      	cbnz	r3, 801da22 <_raise_r+0x32>
 801da0e:	4620      	mov	r0, r4
 801da10:	f000 f830 	bl	801da74 <_getpid_r>
 801da14:	462a      	mov	r2, r5
 801da16:	4601      	mov	r1, r0
 801da18:	4620      	mov	r0, r4
 801da1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801da1e:	f000 b817 	b.w	801da50 <_kill_r>
 801da22:	2b01      	cmp	r3, #1
 801da24:	d00a      	beq.n	801da3c <_raise_r+0x4c>
 801da26:	1c59      	adds	r1, r3, #1
 801da28:	d103      	bne.n	801da32 <_raise_r+0x42>
 801da2a:	2316      	movs	r3, #22
 801da2c:	6003      	str	r3, [r0, #0]
 801da2e:	2001      	movs	r0, #1
 801da30:	e7e7      	b.n	801da02 <_raise_r+0x12>
 801da32:	2400      	movs	r4, #0
 801da34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801da38:	4628      	mov	r0, r5
 801da3a:	4798      	blx	r3
 801da3c:	2000      	movs	r0, #0
 801da3e:	e7e0      	b.n	801da02 <_raise_r+0x12>

0801da40 <raise>:
 801da40:	4b02      	ldr	r3, [pc, #8]	; (801da4c <raise+0xc>)
 801da42:	4601      	mov	r1, r0
 801da44:	6818      	ldr	r0, [r3, #0]
 801da46:	f7ff bfd3 	b.w	801d9f0 <_raise_r>
 801da4a:	bf00      	nop
 801da4c:	20000064 	.word	0x20000064

0801da50 <_kill_r>:
 801da50:	b538      	push	{r3, r4, r5, lr}
 801da52:	4d07      	ldr	r5, [pc, #28]	; (801da70 <_kill_r+0x20>)
 801da54:	2300      	movs	r3, #0
 801da56:	4604      	mov	r4, r0
 801da58:	4608      	mov	r0, r1
 801da5a:	4611      	mov	r1, r2
 801da5c:	602b      	str	r3, [r5, #0]
 801da5e:	f7e8 f866 	bl	8005b2e <_kill>
 801da62:	1c43      	adds	r3, r0, #1
 801da64:	d102      	bne.n	801da6c <_kill_r+0x1c>
 801da66:	682b      	ldr	r3, [r5, #0]
 801da68:	b103      	cbz	r3, 801da6c <_kill_r+0x1c>
 801da6a:	6023      	str	r3, [r4, #0]
 801da6c:	bd38      	pop	{r3, r4, r5, pc}
 801da6e:	bf00      	nop
 801da70:	2000095c 	.word	0x2000095c

0801da74 <_getpid_r>:
 801da74:	f7e8 b853 	b.w	8005b1e <_getpid>

0801da78 <__sread>:
 801da78:	b510      	push	{r4, lr}
 801da7a:	460c      	mov	r4, r1
 801da7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da80:	f000 f894 	bl	801dbac <_read_r>
 801da84:	2800      	cmp	r0, #0
 801da86:	bfab      	itete	ge
 801da88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801da8a:	89a3      	ldrhlt	r3, [r4, #12]
 801da8c:	181b      	addge	r3, r3, r0
 801da8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801da92:	bfac      	ite	ge
 801da94:	6563      	strge	r3, [r4, #84]	; 0x54
 801da96:	81a3      	strhlt	r3, [r4, #12]
 801da98:	bd10      	pop	{r4, pc}

0801da9a <__swrite>:
 801da9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da9e:	461f      	mov	r7, r3
 801daa0:	898b      	ldrh	r3, [r1, #12]
 801daa2:	05db      	lsls	r3, r3, #23
 801daa4:	4605      	mov	r5, r0
 801daa6:	460c      	mov	r4, r1
 801daa8:	4616      	mov	r6, r2
 801daaa:	d505      	bpl.n	801dab8 <__swrite+0x1e>
 801daac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dab0:	2302      	movs	r3, #2
 801dab2:	2200      	movs	r2, #0
 801dab4:	f000 f868 	bl	801db88 <_lseek_r>
 801dab8:	89a3      	ldrh	r3, [r4, #12]
 801daba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dabe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dac2:	81a3      	strh	r3, [r4, #12]
 801dac4:	4632      	mov	r2, r6
 801dac6:	463b      	mov	r3, r7
 801dac8:	4628      	mov	r0, r5
 801daca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dace:	f000 b817 	b.w	801db00 <_write_r>

0801dad2 <__sseek>:
 801dad2:	b510      	push	{r4, lr}
 801dad4:	460c      	mov	r4, r1
 801dad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dada:	f000 f855 	bl	801db88 <_lseek_r>
 801dade:	1c43      	adds	r3, r0, #1
 801dae0:	89a3      	ldrh	r3, [r4, #12]
 801dae2:	bf15      	itete	ne
 801dae4:	6560      	strne	r0, [r4, #84]	; 0x54
 801dae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801daea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801daee:	81a3      	strheq	r3, [r4, #12]
 801daf0:	bf18      	it	ne
 801daf2:	81a3      	strhne	r3, [r4, #12]
 801daf4:	bd10      	pop	{r4, pc}

0801daf6 <__sclose>:
 801daf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dafa:	f000 b813 	b.w	801db24 <_close_r>
	...

0801db00 <_write_r>:
 801db00:	b538      	push	{r3, r4, r5, lr}
 801db02:	4d07      	ldr	r5, [pc, #28]	; (801db20 <_write_r+0x20>)
 801db04:	4604      	mov	r4, r0
 801db06:	4608      	mov	r0, r1
 801db08:	4611      	mov	r1, r2
 801db0a:	2200      	movs	r2, #0
 801db0c:	602a      	str	r2, [r5, #0]
 801db0e:	461a      	mov	r2, r3
 801db10:	f7e8 f844 	bl	8005b9c <_write>
 801db14:	1c43      	adds	r3, r0, #1
 801db16:	d102      	bne.n	801db1e <_write_r+0x1e>
 801db18:	682b      	ldr	r3, [r5, #0]
 801db1a:	b103      	cbz	r3, 801db1e <_write_r+0x1e>
 801db1c:	6023      	str	r3, [r4, #0]
 801db1e:	bd38      	pop	{r3, r4, r5, pc}
 801db20:	2000095c 	.word	0x2000095c

0801db24 <_close_r>:
 801db24:	b538      	push	{r3, r4, r5, lr}
 801db26:	4d06      	ldr	r5, [pc, #24]	; (801db40 <_close_r+0x1c>)
 801db28:	2300      	movs	r3, #0
 801db2a:	4604      	mov	r4, r0
 801db2c:	4608      	mov	r0, r1
 801db2e:	602b      	str	r3, [r5, #0]
 801db30:	f7e8 f850 	bl	8005bd4 <_close>
 801db34:	1c43      	adds	r3, r0, #1
 801db36:	d102      	bne.n	801db3e <_close_r+0x1a>
 801db38:	682b      	ldr	r3, [r5, #0]
 801db3a:	b103      	cbz	r3, 801db3e <_close_r+0x1a>
 801db3c:	6023      	str	r3, [r4, #0]
 801db3e:	bd38      	pop	{r3, r4, r5, pc}
 801db40:	2000095c 	.word	0x2000095c

0801db44 <_fstat_r>:
 801db44:	b538      	push	{r3, r4, r5, lr}
 801db46:	4d07      	ldr	r5, [pc, #28]	; (801db64 <_fstat_r+0x20>)
 801db48:	2300      	movs	r3, #0
 801db4a:	4604      	mov	r4, r0
 801db4c:	4608      	mov	r0, r1
 801db4e:	4611      	mov	r1, r2
 801db50:	602b      	str	r3, [r5, #0]
 801db52:	f7e8 f84b 	bl	8005bec <_fstat>
 801db56:	1c43      	adds	r3, r0, #1
 801db58:	d102      	bne.n	801db60 <_fstat_r+0x1c>
 801db5a:	682b      	ldr	r3, [r5, #0]
 801db5c:	b103      	cbz	r3, 801db60 <_fstat_r+0x1c>
 801db5e:	6023      	str	r3, [r4, #0]
 801db60:	bd38      	pop	{r3, r4, r5, pc}
 801db62:	bf00      	nop
 801db64:	2000095c 	.word	0x2000095c

0801db68 <_isatty_r>:
 801db68:	b538      	push	{r3, r4, r5, lr}
 801db6a:	4d06      	ldr	r5, [pc, #24]	; (801db84 <_isatty_r+0x1c>)
 801db6c:	2300      	movs	r3, #0
 801db6e:	4604      	mov	r4, r0
 801db70:	4608      	mov	r0, r1
 801db72:	602b      	str	r3, [r5, #0]
 801db74:	f7e8 f84a 	bl	8005c0c <_isatty>
 801db78:	1c43      	adds	r3, r0, #1
 801db7a:	d102      	bne.n	801db82 <_isatty_r+0x1a>
 801db7c:	682b      	ldr	r3, [r5, #0]
 801db7e:	b103      	cbz	r3, 801db82 <_isatty_r+0x1a>
 801db80:	6023      	str	r3, [r4, #0]
 801db82:	bd38      	pop	{r3, r4, r5, pc}
 801db84:	2000095c 	.word	0x2000095c

0801db88 <_lseek_r>:
 801db88:	b538      	push	{r3, r4, r5, lr}
 801db8a:	4d07      	ldr	r5, [pc, #28]	; (801dba8 <_lseek_r+0x20>)
 801db8c:	4604      	mov	r4, r0
 801db8e:	4608      	mov	r0, r1
 801db90:	4611      	mov	r1, r2
 801db92:	2200      	movs	r2, #0
 801db94:	602a      	str	r2, [r5, #0]
 801db96:	461a      	mov	r2, r3
 801db98:	f7e8 f843 	bl	8005c22 <_lseek>
 801db9c:	1c43      	adds	r3, r0, #1
 801db9e:	d102      	bne.n	801dba6 <_lseek_r+0x1e>
 801dba0:	682b      	ldr	r3, [r5, #0]
 801dba2:	b103      	cbz	r3, 801dba6 <_lseek_r+0x1e>
 801dba4:	6023      	str	r3, [r4, #0]
 801dba6:	bd38      	pop	{r3, r4, r5, pc}
 801dba8:	2000095c 	.word	0x2000095c

0801dbac <_read_r>:
 801dbac:	b538      	push	{r3, r4, r5, lr}
 801dbae:	4d07      	ldr	r5, [pc, #28]	; (801dbcc <_read_r+0x20>)
 801dbb0:	4604      	mov	r4, r0
 801dbb2:	4608      	mov	r0, r1
 801dbb4:	4611      	mov	r1, r2
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	602a      	str	r2, [r5, #0]
 801dbba:	461a      	mov	r2, r3
 801dbbc:	f7e7 ffd1 	bl	8005b62 <_read>
 801dbc0:	1c43      	adds	r3, r0, #1
 801dbc2:	d102      	bne.n	801dbca <_read_r+0x1e>
 801dbc4:	682b      	ldr	r3, [r5, #0]
 801dbc6:	b103      	cbz	r3, 801dbca <_read_r+0x1e>
 801dbc8:	6023      	str	r3, [r4, #0]
 801dbca:	bd38      	pop	{r3, r4, r5, pc}
 801dbcc:	2000095c 	.word	0x2000095c

0801dbd0 <memcmp>:
 801dbd0:	b510      	push	{r4, lr}
 801dbd2:	3901      	subs	r1, #1
 801dbd4:	4402      	add	r2, r0
 801dbd6:	4290      	cmp	r0, r2
 801dbd8:	d101      	bne.n	801dbde <memcmp+0xe>
 801dbda:	2000      	movs	r0, #0
 801dbdc:	e005      	b.n	801dbea <memcmp+0x1a>
 801dbde:	7803      	ldrb	r3, [r0, #0]
 801dbe0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dbe4:	42a3      	cmp	r3, r4
 801dbe6:	d001      	beq.n	801dbec <memcmp+0x1c>
 801dbe8:	1b18      	subs	r0, r3, r4
 801dbea:	bd10      	pop	{r4, pc}
 801dbec:	3001      	adds	r0, #1
 801dbee:	e7f2      	b.n	801dbd6 <memcmp+0x6>

0801dbf0 <floor>:
 801dbf0:	ec51 0b10 	vmov	r0, r1, d0
 801dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801dbfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801dc00:	2e13      	cmp	r6, #19
 801dc02:	ee10 5a10 	vmov	r5, s0
 801dc06:	ee10 8a10 	vmov	r8, s0
 801dc0a:	460c      	mov	r4, r1
 801dc0c:	dc32      	bgt.n	801dc74 <floor+0x84>
 801dc0e:	2e00      	cmp	r6, #0
 801dc10:	da14      	bge.n	801dc3c <floor+0x4c>
 801dc12:	a333      	add	r3, pc, #204	; (adr r3, 801dce0 <floor+0xf0>)
 801dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc18:	f7fa fc48 	bl	80184ac <__adddf3>
 801dc1c:	2200      	movs	r2, #0
 801dc1e:	2300      	movs	r3, #0
 801dc20:	f7fb f88a 	bl	8018d38 <__aeabi_dcmpgt>
 801dc24:	b138      	cbz	r0, 801dc36 <floor+0x46>
 801dc26:	2c00      	cmp	r4, #0
 801dc28:	da57      	bge.n	801dcda <floor+0xea>
 801dc2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801dc2e:	431d      	orrs	r5, r3
 801dc30:	d001      	beq.n	801dc36 <floor+0x46>
 801dc32:	4c2d      	ldr	r4, [pc, #180]	; (801dce8 <floor+0xf8>)
 801dc34:	2500      	movs	r5, #0
 801dc36:	4621      	mov	r1, r4
 801dc38:	4628      	mov	r0, r5
 801dc3a:	e025      	b.n	801dc88 <floor+0x98>
 801dc3c:	4f2b      	ldr	r7, [pc, #172]	; (801dcec <floor+0xfc>)
 801dc3e:	4137      	asrs	r7, r6
 801dc40:	ea01 0307 	and.w	r3, r1, r7
 801dc44:	4303      	orrs	r3, r0
 801dc46:	d01f      	beq.n	801dc88 <floor+0x98>
 801dc48:	a325      	add	r3, pc, #148	; (adr r3, 801dce0 <floor+0xf0>)
 801dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc4e:	f7fa fc2d 	bl	80184ac <__adddf3>
 801dc52:	2200      	movs	r2, #0
 801dc54:	2300      	movs	r3, #0
 801dc56:	f7fb f86f 	bl	8018d38 <__aeabi_dcmpgt>
 801dc5a:	2800      	cmp	r0, #0
 801dc5c:	d0eb      	beq.n	801dc36 <floor+0x46>
 801dc5e:	2c00      	cmp	r4, #0
 801dc60:	bfbe      	ittt	lt
 801dc62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801dc66:	fa43 f606 	asrlt.w	r6, r3, r6
 801dc6a:	19a4      	addlt	r4, r4, r6
 801dc6c:	ea24 0407 	bic.w	r4, r4, r7
 801dc70:	2500      	movs	r5, #0
 801dc72:	e7e0      	b.n	801dc36 <floor+0x46>
 801dc74:	2e33      	cmp	r6, #51	; 0x33
 801dc76:	dd0b      	ble.n	801dc90 <floor+0xa0>
 801dc78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dc7c:	d104      	bne.n	801dc88 <floor+0x98>
 801dc7e:	ee10 2a10 	vmov	r2, s0
 801dc82:	460b      	mov	r3, r1
 801dc84:	f7fa fc12 	bl	80184ac <__adddf3>
 801dc88:	ec41 0b10 	vmov	d0, r0, r1
 801dc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801dc94:	f04f 33ff 	mov.w	r3, #4294967295
 801dc98:	fa23 f707 	lsr.w	r7, r3, r7
 801dc9c:	4207      	tst	r7, r0
 801dc9e:	d0f3      	beq.n	801dc88 <floor+0x98>
 801dca0:	a30f      	add	r3, pc, #60	; (adr r3, 801dce0 <floor+0xf0>)
 801dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dca6:	f7fa fc01 	bl	80184ac <__adddf3>
 801dcaa:	2200      	movs	r2, #0
 801dcac:	2300      	movs	r3, #0
 801dcae:	f7fb f843 	bl	8018d38 <__aeabi_dcmpgt>
 801dcb2:	2800      	cmp	r0, #0
 801dcb4:	d0bf      	beq.n	801dc36 <floor+0x46>
 801dcb6:	2c00      	cmp	r4, #0
 801dcb8:	da02      	bge.n	801dcc0 <floor+0xd0>
 801dcba:	2e14      	cmp	r6, #20
 801dcbc:	d103      	bne.n	801dcc6 <floor+0xd6>
 801dcbe:	3401      	adds	r4, #1
 801dcc0:	ea25 0507 	bic.w	r5, r5, r7
 801dcc4:	e7b7      	b.n	801dc36 <floor+0x46>
 801dcc6:	2301      	movs	r3, #1
 801dcc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801dccc:	fa03 f606 	lsl.w	r6, r3, r6
 801dcd0:	4435      	add	r5, r6
 801dcd2:	4545      	cmp	r5, r8
 801dcd4:	bf38      	it	cc
 801dcd6:	18e4      	addcc	r4, r4, r3
 801dcd8:	e7f2      	b.n	801dcc0 <floor+0xd0>
 801dcda:	2500      	movs	r5, #0
 801dcdc:	462c      	mov	r4, r5
 801dcde:	e7aa      	b.n	801dc36 <floor+0x46>
 801dce0:	8800759c 	.word	0x8800759c
 801dce4:	7e37e43c 	.word	0x7e37e43c
 801dce8:	bff00000 	.word	0xbff00000
 801dcec:	000fffff 	.word	0x000fffff

0801dcf0 <pow>:
 801dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcf2:	ed2d 8b02 	vpush	{d8}
 801dcf6:	eeb0 8a40 	vmov.f32	s16, s0
 801dcfa:	eef0 8a60 	vmov.f32	s17, s1
 801dcfe:	ec55 4b11 	vmov	r4, r5, d1
 801dd02:	f000 f865 	bl	801ddd0 <__ieee754_pow>
 801dd06:	4622      	mov	r2, r4
 801dd08:	462b      	mov	r3, r5
 801dd0a:	4620      	mov	r0, r4
 801dd0c:	4629      	mov	r1, r5
 801dd0e:	ec57 6b10 	vmov	r6, r7, d0
 801dd12:	f7fb f81b 	bl	8018d4c <__aeabi_dcmpun>
 801dd16:	2800      	cmp	r0, #0
 801dd18:	d13b      	bne.n	801dd92 <pow+0xa2>
 801dd1a:	ec51 0b18 	vmov	r0, r1, d8
 801dd1e:	2200      	movs	r2, #0
 801dd20:	2300      	movs	r3, #0
 801dd22:	f7fa ffe1 	bl	8018ce8 <__aeabi_dcmpeq>
 801dd26:	b1b8      	cbz	r0, 801dd58 <pow+0x68>
 801dd28:	2200      	movs	r2, #0
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	4629      	mov	r1, r5
 801dd30:	f7fa ffda 	bl	8018ce8 <__aeabi_dcmpeq>
 801dd34:	2800      	cmp	r0, #0
 801dd36:	d146      	bne.n	801ddc6 <pow+0xd6>
 801dd38:	ec45 4b10 	vmov	d0, r4, r5
 801dd3c:	f000 fe61 	bl	801ea02 <finite>
 801dd40:	b338      	cbz	r0, 801dd92 <pow+0xa2>
 801dd42:	2200      	movs	r2, #0
 801dd44:	2300      	movs	r3, #0
 801dd46:	4620      	mov	r0, r4
 801dd48:	4629      	mov	r1, r5
 801dd4a:	f7fa ffd7 	bl	8018cfc <__aeabi_dcmplt>
 801dd4e:	b300      	cbz	r0, 801dd92 <pow+0xa2>
 801dd50:	f7fb fa90 	bl	8019274 <__errno>
 801dd54:	2322      	movs	r3, #34	; 0x22
 801dd56:	e01b      	b.n	801dd90 <pow+0xa0>
 801dd58:	ec47 6b10 	vmov	d0, r6, r7
 801dd5c:	f000 fe51 	bl	801ea02 <finite>
 801dd60:	b9e0      	cbnz	r0, 801dd9c <pow+0xac>
 801dd62:	eeb0 0a48 	vmov.f32	s0, s16
 801dd66:	eef0 0a68 	vmov.f32	s1, s17
 801dd6a:	f000 fe4a 	bl	801ea02 <finite>
 801dd6e:	b1a8      	cbz	r0, 801dd9c <pow+0xac>
 801dd70:	ec45 4b10 	vmov	d0, r4, r5
 801dd74:	f000 fe45 	bl	801ea02 <finite>
 801dd78:	b180      	cbz	r0, 801dd9c <pow+0xac>
 801dd7a:	4632      	mov	r2, r6
 801dd7c:	463b      	mov	r3, r7
 801dd7e:	4630      	mov	r0, r6
 801dd80:	4639      	mov	r1, r7
 801dd82:	f7fa ffe3 	bl	8018d4c <__aeabi_dcmpun>
 801dd86:	2800      	cmp	r0, #0
 801dd88:	d0e2      	beq.n	801dd50 <pow+0x60>
 801dd8a:	f7fb fa73 	bl	8019274 <__errno>
 801dd8e:	2321      	movs	r3, #33	; 0x21
 801dd90:	6003      	str	r3, [r0, #0]
 801dd92:	ecbd 8b02 	vpop	{d8}
 801dd96:	ec47 6b10 	vmov	d0, r6, r7
 801dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd9c:	2200      	movs	r2, #0
 801dd9e:	2300      	movs	r3, #0
 801dda0:	4630      	mov	r0, r6
 801dda2:	4639      	mov	r1, r7
 801dda4:	f7fa ffa0 	bl	8018ce8 <__aeabi_dcmpeq>
 801dda8:	2800      	cmp	r0, #0
 801ddaa:	d0f2      	beq.n	801dd92 <pow+0xa2>
 801ddac:	eeb0 0a48 	vmov.f32	s0, s16
 801ddb0:	eef0 0a68 	vmov.f32	s1, s17
 801ddb4:	f000 fe25 	bl	801ea02 <finite>
 801ddb8:	2800      	cmp	r0, #0
 801ddba:	d0ea      	beq.n	801dd92 <pow+0xa2>
 801ddbc:	ec45 4b10 	vmov	d0, r4, r5
 801ddc0:	f000 fe1f 	bl	801ea02 <finite>
 801ddc4:	e7c3      	b.n	801dd4e <pow+0x5e>
 801ddc6:	4f01      	ldr	r7, [pc, #4]	; (801ddcc <pow+0xdc>)
 801ddc8:	2600      	movs	r6, #0
 801ddca:	e7e2      	b.n	801dd92 <pow+0xa2>
 801ddcc:	3ff00000 	.word	0x3ff00000

0801ddd0 <__ieee754_pow>:
 801ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd4:	ed2d 8b06 	vpush	{d8-d10}
 801ddd8:	b089      	sub	sp, #36	; 0x24
 801ddda:	ed8d 1b00 	vstr	d1, [sp]
 801ddde:	e9dd 2900 	ldrd	r2, r9, [sp]
 801dde2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801dde6:	ea58 0102 	orrs.w	r1, r8, r2
 801ddea:	ec57 6b10 	vmov	r6, r7, d0
 801ddee:	d115      	bne.n	801de1c <__ieee754_pow+0x4c>
 801ddf0:	19b3      	adds	r3, r6, r6
 801ddf2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ddf6:	4152      	adcs	r2, r2
 801ddf8:	4299      	cmp	r1, r3
 801ddfa:	4b89      	ldr	r3, [pc, #548]	; (801e020 <__ieee754_pow+0x250>)
 801ddfc:	4193      	sbcs	r3, r2
 801ddfe:	f080 84d2 	bcs.w	801e7a6 <__ieee754_pow+0x9d6>
 801de02:	e9dd 2300 	ldrd	r2, r3, [sp]
 801de06:	4630      	mov	r0, r6
 801de08:	4639      	mov	r1, r7
 801de0a:	f7fa fb4f 	bl	80184ac <__adddf3>
 801de0e:	ec41 0b10 	vmov	d0, r0, r1
 801de12:	b009      	add	sp, #36	; 0x24
 801de14:	ecbd 8b06 	vpop	{d8-d10}
 801de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de1c:	4b81      	ldr	r3, [pc, #516]	; (801e024 <__ieee754_pow+0x254>)
 801de1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801de22:	429c      	cmp	r4, r3
 801de24:	ee10 aa10 	vmov	sl, s0
 801de28:	463d      	mov	r5, r7
 801de2a:	dc06      	bgt.n	801de3a <__ieee754_pow+0x6a>
 801de2c:	d101      	bne.n	801de32 <__ieee754_pow+0x62>
 801de2e:	2e00      	cmp	r6, #0
 801de30:	d1e7      	bne.n	801de02 <__ieee754_pow+0x32>
 801de32:	4598      	cmp	r8, r3
 801de34:	dc01      	bgt.n	801de3a <__ieee754_pow+0x6a>
 801de36:	d10f      	bne.n	801de58 <__ieee754_pow+0x88>
 801de38:	b172      	cbz	r2, 801de58 <__ieee754_pow+0x88>
 801de3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801de3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801de42:	ea55 050a 	orrs.w	r5, r5, sl
 801de46:	d1dc      	bne.n	801de02 <__ieee754_pow+0x32>
 801de48:	e9dd 3200 	ldrd	r3, r2, [sp]
 801de4c:	18db      	adds	r3, r3, r3
 801de4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801de52:	4152      	adcs	r2, r2
 801de54:	429d      	cmp	r5, r3
 801de56:	e7d0      	b.n	801ddfa <__ieee754_pow+0x2a>
 801de58:	2d00      	cmp	r5, #0
 801de5a:	da3b      	bge.n	801ded4 <__ieee754_pow+0x104>
 801de5c:	4b72      	ldr	r3, [pc, #456]	; (801e028 <__ieee754_pow+0x258>)
 801de5e:	4598      	cmp	r8, r3
 801de60:	dc51      	bgt.n	801df06 <__ieee754_pow+0x136>
 801de62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801de66:	4598      	cmp	r8, r3
 801de68:	f340 84ac 	ble.w	801e7c4 <__ieee754_pow+0x9f4>
 801de6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801de70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801de74:	2b14      	cmp	r3, #20
 801de76:	dd0f      	ble.n	801de98 <__ieee754_pow+0xc8>
 801de78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801de7c:	fa22 f103 	lsr.w	r1, r2, r3
 801de80:	fa01 f303 	lsl.w	r3, r1, r3
 801de84:	4293      	cmp	r3, r2
 801de86:	f040 849d 	bne.w	801e7c4 <__ieee754_pow+0x9f4>
 801de8a:	f001 0101 	and.w	r1, r1, #1
 801de8e:	f1c1 0302 	rsb	r3, r1, #2
 801de92:	9304      	str	r3, [sp, #16]
 801de94:	b182      	cbz	r2, 801deb8 <__ieee754_pow+0xe8>
 801de96:	e05f      	b.n	801df58 <__ieee754_pow+0x188>
 801de98:	2a00      	cmp	r2, #0
 801de9a:	d15b      	bne.n	801df54 <__ieee754_pow+0x184>
 801de9c:	f1c3 0314 	rsb	r3, r3, #20
 801dea0:	fa48 f103 	asr.w	r1, r8, r3
 801dea4:	fa01 f303 	lsl.w	r3, r1, r3
 801dea8:	4543      	cmp	r3, r8
 801deaa:	f040 8488 	bne.w	801e7be <__ieee754_pow+0x9ee>
 801deae:	f001 0101 	and.w	r1, r1, #1
 801deb2:	f1c1 0302 	rsb	r3, r1, #2
 801deb6:	9304      	str	r3, [sp, #16]
 801deb8:	4b5c      	ldr	r3, [pc, #368]	; (801e02c <__ieee754_pow+0x25c>)
 801deba:	4598      	cmp	r8, r3
 801debc:	d132      	bne.n	801df24 <__ieee754_pow+0x154>
 801debe:	f1b9 0f00 	cmp.w	r9, #0
 801dec2:	f280 8478 	bge.w	801e7b6 <__ieee754_pow+0x9e6>
 801dec6:	4959      	ldr	r1, [pc, #356]	; (801e02c <__ieee754_pow+0x25c>)
 801dec8:	4632      	mov	r2, r6
 801deca:	463b      	mov	r3, r7
 801decc:	2000      	movs	r0, #0
 801dece:	f7fa fdcd 	bl	8018a6c <__aeabi_ddiv>
 801ded2:	e79c      	b.n	801de0e <__ieee754_pow+0x3e>
 801ded4:	2300      	movs	r3, #0
 801ded6:	9304      	str	r3, [sp, #16]
 801ded8:	2a00      	cmp	r2, #0
 801deda:	d13d      	bne.n	801df58 <__ieee754_pow+0x188>
 801dedc:	4b51      	ldr	r3, [pc, #324]	; (801e024 <__ieee754_pow+0x254>)
 801dede:	4598      	cmp	r8, r3
 801dee0:	d1ea      	bne.n	801deb8 <__ieee754_pow+0xe8>
 801dee2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801dee6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801deea:	ea53 030a 	orrs.w	r3, r3, sl
 801deee:	f000 845a 	beq.w	801e7a6 <__ieee754_pow+0x9d6>
 801def2:	4b4f      	ldr	r3, [pc, #316]	; (801e030 <__ieee754_pow+0x260>)
 801def4:	429c      	cmp	r4, r3
 801def6:	dd08      	ble.n	801df0a <__ieee754_pow+0x13a>
 801def8:	f1b9 0f00 	cmp.w	r9, #0
 801defc:	f2c0 8457 	blt.w	801e7ae <__ieee754_pow+0x9de>
 801df00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801df04:	e783      	b.n	801de0e <__ieee754_pow+0x3e>
 801df06:	2302      	movs	r3, #2
 801df08:	e7e5      	b.n	801ded6 <__ieee754_pow+0x106>
 801df0a:	f1b9 0f00 	cmp.w	r9, #0
 801df0e:	f04f 0000 	mov.w	r0, #0
 801df12:	f04f 0100 	mov.w	r1, #0
 801df16:	f6bf af7a 	bge.w	801de0e <__ieee754_pow+0x3e>
 801df1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801df1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801df22:	e774      	b.n	801de0e <__ieee754_pow+0x3e>
 801df24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801df28:	d106      	bne.n	801df38 <__ieee754_pow+0x168>
 801df2a:	4632      	mov	r2, r6
 801df2c:	463b      	mov	r3, r7
 801df2e:	4630      	mov	r0, r6
 801df30:	4639      	mov	r1, r7
 801df32:	f7fa fc71 	bl	8018818 <__aeabi_dmul>
 801df36:	e76a      	b.n	801de0e <__ieee754_pow+0x3e>
 801df38:	4b3e      	ldr	r3, [pc, #248]	; (801e034 <__ieee754_pow+0x264>)
 801df3a:	4599      	cmp	r9, r3
 801df3c:	d10c      	bne.n	801df58 <__ieee754_pow+0x188>
 801df3e:	2d00      	cmp	r5, #0
 801df40:	db0a      	blt.n	801df58 <__ieee754_pow+0x188>
 801df42:	ec47 6b10 	vmov	d0, r6, r7
 801df46:	b009      	add	sp, #36	; 0x24
 801df48:	ecbd 8b06 	vpop	{d8-d10}
 801df4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df50:	f000 bc6c 	b.w	801e82c <__ieee754_sqrt>
 801df54:	2300      	movs	r3, #0
 801df56:	9304      	str	r3, [sp, #16]
 801df58:	ec47 6b10 	vmov	d0, r6, r7
 801df5c:	f000 fd48 	bl	801e9f0 <fabs>
 801df60:	ec51 0b10 	vmov	r0, r1, d0
 801df64:	f1ba 0f00 	cmp.w	sl, #0
 801df68:	d129      	bne.n	801dfbe <__ieee754_pow+0x1ee>
 801df6a:	b124      	cbz	r4, 801df76 <__ieee754_pow+0x1a6>
 801df6c:	4b2f      	ldr	r3, [pc, #188]	; (801e02c <__ieee754_pow+0x25c>)
 801df6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801df72:	429a      	cmp	r2, r3
 801df74:	d123      	bne.n	801dfbe <__ieee754_pow+0x1ee>
 801df76:	f1b9 0f00 	cmp.w	r9, #0
 801df7a:	da05      	bge.n	801df88 <__ieee754_pow+0x1b8>
 801df7c:	4602      	mov	r2, r0
 801df7e:	460b      	mov	r3, r1
 801df80:	2000      	movs	r0, #0
 801df82:	492a      	ldr	r1, [pc, #168]	; (801e02c <__ieee754_pow+0x25c>)
 801df84:	f7fa fd72 	bl	8018a6c <__aeabi_ddiv>
 801df88:	2d00      	cmp	r5, #0
 801df8a:	f6bf af40 	bge.w	801de0e <__ieee754_pow+0x3e>
 801df8e:	9b04      	ldr	r3, [sp, #16]
 801df90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801df94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801df98:	4323      	orrs	r3, r4
 801df9a:	d108      	bne.n	801dfae <__ieee754_pow+0x1de>
 801df9c:	4602      	mov	r2, r0
 801df9e:	460b      	mov	r3, r1
 801dfa0:	4610      	mov	r0, r2
 801dfa2:	4619      	mov	r1, r3
 801dfa4:	f7fa fa80 	bl	80184a8 <__aeabi_dsub>
 801dfa8:	4602      	mov	r2, r0
 801dfaa:	460b      	mov	r3, r1
 801dfac:	e78f      	b.n	801dece <__ieee754_pow+0xfe>
 801dfae:	9b04      	ldr	r3, [sp, #16]
 801dfb0:	2b01      	cmp	r3, #1
 801dfb2:	f47f af2c 	bne.w	801de0e <__ieee754_pow+0x3e>
 801dfb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dfba:	4619      	mov	r1, r3
 801dfbc:	e727      	b.n	801de0e <__ieee754_pow+0x3e>
 801dfbe:	0feb      	lsrs	r3, r5, #31
 801dfc0:	3b01      	subs	r3, #1
 801dfc2:	9306      	str	r3, [sp, #24]
 801dfc4:	9a06      	ldr	r2, [sp, #24]
 801dfc6:	9b04      	ldr	r3, [sp, #16]
 801dfc8:	4313      	orrs	r3, r2
 801dfca:	d102      	bne.n	801dfd2 <__ieee754_pow+0x202>
 801dfcc:	4632      	mov	r2, r6
 801dfce:	463b      	mov	r3, r7
 801dfd0:	e7e6      	b.n	801dfa0 <__ieee754_pow+0x1d0>
 801dfd2:	4b19      	ldr	r3, [pc, #100]	; (801e038 <__ieee754_pow+0x268>)
 801dfd4:	4598      	cmp	r8, r3
 801dfd6:	f340 80fb 	ble.w	801e1d0 <__ieee754_pow+0x400>
 801dfda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801dfde:	4598      	cmp	r8, r3
 801dfe0:	4b13      	ldr	r3, [pc, #76]	; (801e030 <__ieee754_pow+0x260>)
 801dfe2:	dd0c      	ble.n	801dffe <__ieee754_pow+0x22e>
 801dfe4:	429c      	cmp	r4, r3
 801dfe6:	dc0f      	bgt.n	801e008 <__ieee754_pow+0x238>
 801dfe8:	f1b9 0f00 	cmp.w	r9, #0
 801dfec:	da0f      	bge.n	801e00e <__ieee754_pow+0x23e>
 801dfee:	2000      	movs	r0, #0
 801dff0:	b009      	add	sp, #36	; 0x24
 801dff2:	ecbd 8b06 	vpop	{d8-d10}
 801dff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dffa:	f000 bcf0 	b.w	801e9de <__math_oflow>
 801dffe:	429c      	cmp	r4, r3
 801e000:	dbf2      	blt.n	801dfe8 <__ieee754_pow+0x218>
 801e002:	4b0a      	ldr	r3, [pc, #40]	; (801e02c <__ieee754_pow+0x25c>)
 801e004:	429c      	cmp	r4, r3
 801e006:	dd19      	ble.n	801e03c <__ieee754_pow+0x26c>
 801e008:	f1b9 0f00 	cmp.w	r9, #0
 801e00c:	dcef      	bgt.n	801dfee <__ieee754_pow+0x21e>
 801e00e:	2000      	movs	r0, #0
 801e010:	b009      	add	sp, #36	; 0x24
 801e012:	ecbd 8b06 	vpop	{d8-d10}
 801e016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e01a:	f000 bcd7 	b.w	801e9cc <__math_uflow>
 801e01e:	bf00      	nop
 801e020:	fff00000 	.word	0xfff00000
 801e024:	7ff00000 	.word	0x7ff00000
 801e028:	433fffff 	.word	0x433fffff
 801e02c:	3ff00000 	.word	0x3ff00000
 801e030:	3fefffff 	.word	0x3fefffff
 801e034:	3fe00000 	.word	0x3fe00000
 801e038:	41e00000 	.word	0x41e00000
 801e03c:	4b60      	ldr	r3, [pc, #384]	; (801e1c0 <__ieee754_pow+0x3f0>)
 801e03e:	2200      	movs	r2, #0
 801e040:	f7fa fa32 	bl	80184a8 <__aeabi_dsub>
 801e044:	a354      	add	r3, pc, #336	; (adr r3, 801e198 <__ieee754_pow+0x3c8>)
 801e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e04a:	4604      	mov	r4, r0
 801e04c:	460d      	mov	r5, r1
 801e04e:	f7fa fbe3 	bl	8018818 <__aeabi_dmul>
 801e052:	a353      	add	r3, pc, #332	; (adr r3, 801e1a0 <__ieee754_pow+0x3d0>)
 801e054:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e058:	4606      	mov	r6, r0
 801e05a:	460f      	mov	r7, r1
 801e05c:	4620      	mov	r0, r4
 801e05e:	4629      	mov	r1, r5
 801e060:	f7fa fbda 	bl	8018818 <__aeabi_dmul>
 801e064:	4b57      	ldr	r3, [pc, #348]	; (801e1c4 <__ieee754_pow+0x3f4>)
 801e066:	4682      	mov	sl, r0
 801e068:	468b      	mov	fp, r1
 801e06a:	2200      	movs	r2, #0
 801e06c:	4620      	mov	r0, r4
 801e06e:	4629      	mov	r1, r5
 801e070:	f7fa fbd2 	bl	8018818 <__aeabi_dmul>
 801e074:	4602      	mov	r2, r0
 801e076:	460b      	mov	r3, r1
 801e078:	a14b      	add	r1, pc, #300	; (adr r1, 801e1a8 <__ieee754_pow+0x3d8>)
 801e07a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e07e:	f7fa fa13 	bl	80184a8 <__aeabi_dsub>
 801e082:	4622      	mov	r2, r4
 801e084:	462b      	mov	r3, r5
 801e086:	f7fa fbc7 	bl	8018818 <__aeabi_dmul>
 801e08a:	4602      	mov	r2, r0
 801e08c:	460b      	mov	r3, r1
 801e08e:	2000      	movs	r0, #0
 801e090:	494d      	ldr	r1, [pc, #308]	; (801e1c8 <__ieee754_pow+0x3f8>)
 801e092:	f7fa fa09 	bl	80184a8 <__aeabi_dsub>
 801e096:	4622      	mov	r2, r4
 801e098:	4680      	mov	r8, r0
 801e09a:	4689      	mov	r9, r1
 801e09c:	462b      	mov	r3, r5
 801e09e:	4620      	mov	r0, r4
 801e0a0:	4629      	mov	r1, r5
 801e0a2:	f7fa fbb9 	bl	8018818 <__aeabi_dmul>
 801e0a6:	4602      	mov	r2, r0
 801e0a8:	460b      	mov	r3, r1
 801e0aa:	4640      	mov	r0, r8
 801e0ac:	4649      	mov	r1, r9
 801e0ae:	f7fa fbb3 	bl	8018818 <__aeabi_dmul>
 801e0b2:	a33f      	add	r3, pc, #252	; (adr r3, 801e1b0 <__ieee754_pow+0x3e0>)
 801e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0b8:	f7fa fbae 	bl	8018818 <__aeabi_dmul>
 801e0bc:	4602      	mov	r2, r0
 801e0be:	460b      	mov	r3, r1
 801e0c0:	4650      	mov	r0, sl
 801e0c2:	4659      	mov	r1, fp
 801e0c4:	f7fa f9f0 	bl	80184a8 <__aeabi_dsub>
 801e0c8:	4602      	mov	r2, r0
 801e0ca:	460b      	mov	r3, r1
 801e0cc:	4680      	mov	r8, r0
 801e0ce:	4689      	mov	r9, r1
 801e0d0:	4630      	mov	r0, r6
 801e0d2:	4639      	mov	r1, r7
 801e0d4:	f7fa f9ea 	bl	80184ac <__adddf3>
 801e0d8:	2000      	movs	r0, #0
 801e0da:	4632      	mov	r2, r6
 801e0dc:	463b      	mov	r3, r7
 801e0de:	4604      	mov	r4, r0
 801e0e0:	460d      	mov	r5, r1
 801e0e2:	f7fa f9e1 	bl	80184a8 <__aeabi_dsub>
 801e0e6:	4602      	mov	r2, r0
 801e0e8:	460b      	mov	r3, r1
 801e0ea:	4640      	mov	r0, r8
 801e0ec:	4649      	mov	r1, r9
 801e0ee:	f7fa f9db 	bl	80184a8 <__aeabi_dsub>
 801e0f2:	9b04      	ldr	r3, [sp, #16]
 801e0f4:	9a06      	ldr	r2, [sp, #24]
 801e0f6:	3b01      	subs	r3, #1
 801e0f8:	4313      	orrs	r3, r2
 801e0fa:	4682      	mov	sl, r0
 801e0fc:	468b      	mov	fp, r1
 801e0fe:	f040 81e7 	bne.w	801e4d0 <__ieee754_pow+0x700>
 801e102:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e1b8 <__ieee754_pow+0x3e8>
 801e106:	eeb0 8a47 	vmov.f32	s16, s14
 801e10a:	eef0 8a67 	vmov.f32	s17, s15
 801e10e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801e112:	2600      	movs	r6, #0
 801e114:	4632      	mov	r2, r6
 801e116:	463b      	mov	r3, r7
 801e118:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e11c:	f7fa f9c4 	bl	80184a8 <__aeabi_dsub>
 801e120:	4622      	mov	r2, r4
 801e122:	462b      	mov	r3, r5
 801e124:	f7fa fb78 	bl	8018818 <__aeabi_dmul>
 801e128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e12c:	4680      	mov	r8, r0
 801e12e:	4689      	mov	r9, r1
 801e130:	4650      	mov	r0, sl
 801e132:	4659      	mov	r1, fp
 801e134:	f7fa fb70 	bl	8018818 <__aeabi_dmul>
 801e138:	4602      	mov	r2, r0
 801e13a:	460b      	mov	r3, r1
 801e13c:	4640      	mov	r0, r8
 801e13e:	4649      	mov	r1, r9
 801e140:	f7fa f9b4 	bl	80184ac <__adddf3>
 801e144:	4632      	mov	r2, r6
 801e146:	463b      	mov	r3, r7
 801e148:	4680      	mov	r8, r0
 801e14a:	4689      	mov	r9, r1
 801e14c:	4620      	mov	r0, r4
 801e14e:	4629      	mov	r1, r5
 801e150:	f7fa fb62 	bl	8018818 <__aeabi_dmul>
 801e154:	460b      	mov	r3, r1
 801e156:	4604      	mov	r4, r0
 801e158:	460d      	mov	r5, r1
 801e15a:	4602      	mov	r2, r0
 801e15c:	4649      	mov	r1, r9
 801e15e:	4640      	mov	r0, r8
 801e160:	f7fa f9a4 	bl	80184ac <__adddf3>
 801e164:	4b19      	ldr	r3, [pc, #100]	; (801e1cc <__ieee754_pow+0x3fc>)
 801e166:	4299      	cmp	r1, r3
 801e168:	ec45 4b19 	vmov	d9, r4, r5
 801e16c:	4606      	mov	r6, r0
 801e16e:	460f      	mov	r7, r1
 801e170:	468b      	mov	fp, r1
 801e172:	f340 82f1 	ble.w	801e758 <__ieee754_pow+0x988>
 801e176:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e17a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e17e:	4303      	orrs	r3, r0
 801e180:	f000 81e4 	beq.w	801e54c <__ieee754_pow+0x77c>
 801e184:	ec51 0b18 	vmov	r0, r1, d8
 801e188:	2200      	movs	r2, #0
 801e18a:	2300      	movs	r3, #0
 801e18c:	f7fa fdb6 	bl	8018cfc <__aeabi_dcmplt>
 801e190:	3800      	subs	r0, #0
 801e192:	bf18      	it	ne
 801e194:	2001      	movne	r0, #1
 801e196:	e72b      	b.n	801dff0 <__ieee754_pow+0x220>
 801e198:	60000000 	.word	0x60000000
 801e19c:	3ff71547 	.word	0x3ff71547
 801e1a0:	f85ddf44 	.word	0xf85ddf44
 801e1a4:	3e54ae0b 	.word	0x3e54ae0b
 801e1a8:	55555555 	.word	0x55555555
 801e1ac:	3fd55555 	.word	0x3fd55555
 801e1b0:	652b82fe 	.word	0x652b82fe
 801e1b4:	3ff71547 	.word	0x3ff71547
 801e1b8:	00000000 	.word	0x00000000
 801e1bc:	bff00000 	.word	0xbff00000
 801e1c0:	3ff00000 	.word	0x3ff00000
 801e1c4:	3fd00000 	.word	0x3fd00000
 801e1c8:	3fe00000 	.word	0x3fe00000
 801e1cc:	408fffff 	.word	0x408fffff
 801e1d0:	4bd5      	ldr	r3, [pc, #852]	; (801e528 <__ieee754_pow+0x758>)
 801e1d2:	402b      	ands	r3, r5
 801e1d4:	2200      	movs	r2, #0
 801e1d6:	b92b      	cbnz	r3, 801e1e4 <__ieee754_pow+0x414>
 801e1d8:	4bd4      	ldr	r3, [pc, #848]	; (801e52c <__ieee754_pow+0x75c>)
 801e1da:	f7fa fb1d 	bl	8018818 <__aeabi_dmul>
 801e1de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e1e2:	460c      	mov	r4, r1
 801e1e4:	1523      	asrs	r3, r4, #20
 801e1e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e1ea:	4413      	add	r3, r2
 801e1ec:	9305      	str	r3, [sp, #20]
 801e1ee:	4bd0      	ldr	r3, [pc, #832]	; (801e530 <__ieee754_pow+0x760>)
 801e1f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e1f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e1f8:	429c      	cmp	r4, r3
 801e1fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e1fe:	dd08      	ble.n	801e212 <__ieee754_pow+0x442>
 801e200:	4bcc      	ldr	r3, [pc, #816]	; (801e534 <__ieee754_pow+0x764>)
 801e202:	429c      	cmp	r4, r3
 801e204:	f340 8162 	ble.w	801e4cc <__ieee754_pow+0x6fc>
 801e208:	9b05      	ldr	r3, [sp, #20]
 801e20a:	3301      	adds	r3, #1
 801e20c:	9305      	str	r3, [sp, #20]
 801e20e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e212:	2400      	movs	r4, #0
 801e214:	00e3      	lsls	r3, r4, #3
 801e216:	9307      	str	r3, [sp, #28]
 801e218:	4bc7      	ldr	r3, [pc, #796]	; (801e538 <__ieee754_pow+0x768>)
 801e21a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e21e:	ed93 7b00 	vldr	d7, [r3]
 801e222:	4629      	mov	r1, r5
 801e224:	ec53 2b17 	vmov	r2, r3, d7
 801e228:	eeb0 9a47 	vmov.f32	s18, s14
 801e22c:	eef0 9a67 	vmov.f32	s19, s15
 801e230:	4682      	mov	sl, r0
 801e232:	f7fa f939 	bl	80184a8 <__aeabi_dsub>
 801e236:	4652      	mov	r2, sl
 801e238:	4606      	mov	r6, r0
 801e23a:	460f      	mov	r7, r1
 801e23c:	462b      	mov	r3, r5
 801e23e:	ec51 0b19 	vmov	r0, r1, d9
 801e242:	f7fa f933 	bl	80184ac <__adddf3>
 801e246:	4602      	mov	r2, r0
 801e248:	460b      	mov	r3, r1
 801e24a:	2000      	movs	r0, #0
 801e24c:	49bb      	ldr	r1, [pc, #748]	; (801e53c <__ieee754_pow+0x76c>)
 801e24e:	f7fa fc0d 	bl	8018a6c <__aeabi_ddiv>
 801e252:	ec41 0b1a 	vmov	d10, r0, r1
 801e256:	4602      	mov	r2, r0
 801e258:	460b      	mov	r3, r1
 801e25a:	4630      	mov	r0, r6
 801e25c:	4639      	mov	r1, r7
 801e25e:	f7fa fadb 	bl	8018818 <__aeabi_dmul>
 801e262:	2300      	movs	r3, #0
 801e264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e268:	9302      	str	r3, [sp, #8]
 801e26a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e26e:	46ab      	mov	fp, r5
 801e270:	106d      	asrs	r5, r5, #1
 801e272:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e276:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e27a:	ec41 0b18 	vmov	d8, r0, r1
 801e27e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e282:	2200      	movs	r2, #0
 801e284:	4640      	mov	r0, r8
 801e286:	4649      	mov	r1, r9
 801e288:	4614      	mov	r4, r2
 801e28a:	461d      	mov	r5, r3
 801e28c:	f7fa fac4 	bl	8018818 <__aeabi_dmul>
 801e290:	4602      	mov	r2, r0
 801e292:	460b      	mov	r3, r1
 801e294:	4630      	mov	r0, r6
 801e296:	4639      	mov	r1, r7
 801e298:	f7fa f906 	bl	80184a8 <__aeabi_dsub>
 801e29c:	ec53 2b19 	vmov	r2, r3, d9
 801e2a0:	4606      	mov	r6, r0
 801e2a2:	460f      	mov	r7, r1
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	4629      	mov	r1, r5
 801e2a8:	f7fa f8fe 	bl	80184a8 <__aeabi_dsub>
 801e2ac:	4602      	mov	r2, r0
 801e2ae:	460b      	mov	r3, r1
 801e2b0:	4650      	mov	r0, sl
 801e2b2:	4659      	mov	r1, fp
 801e2b4:	f7fa f8f8 	bl	80184a8 <__aeabi_dsub>
 801e2b8:	4642      	mov	r2, r8
 801e2ba:	464b      	mov	r3, r9
 801e2bc:	f7fa faac 	bl	8018818 <__aeabi_dmul>
 801e2c0:	4602      	mov	r2, r0
 801e2c2:	460b      	mov	r3, r1
 801e2c4:	4630      	mov	r0, r6
 801e2c6:	4639      	mov	r1, r7
 801e2c8:	f7fa f8ee 	bl	80184a8 <__aeabi_dsub>
 801e2cc:	ec53 2b1a 	vmov	r2, r3, d10
 801e2d0:	f7fa faa2 	bl	8018818 <__aeabi_dmul>
 801e2d4:	ec53 2b18 	vmov	r2, r3, d8
 801e2d8:	ec41 0b19 	vmov	d9, r0, r1
 801e2dc:	ec51 0b18 	vmov	r0, r1, d8
 801e2e0:	f7fa fa9a 	bl	8018818 <__aeabi_dmul>
 801e2e4:	a37c      	add	r3, pc, #496	; (adr r3, 801e4d8 <__ieee754_pow+0x708>)
 801e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ea:	4604      	mov	r4, r0
 801e2ec:	460d      	mov	r5, r1
 801e2ee:	f7fa fa93 	bl	8018818 <__aeabi_dmul>
 801e2f2:	a37b      	add	r3, pc, #492	; (adr r3, 801e4e0 <__ieee754_pow+0x710>)
 801e2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f8:	f7fa f8d8 	bl	80184ac <__adddf3>
 801e2fc:	4622      	mov	r2, r4
 801e2fe:	462b      	mov	r3, r5
 801e300:	f7fa fa8a 	bl	8018818 <__aeabi_dmul>
 801e304:	a378      	add	r3, pc, #480	; (adr r3, 801e4e8 <__ieee754_pow+0x718>)
 801e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e30a:	f7fa f8cf 	bl	80184ac <__adddf3>
 801e30e:	4622      	mov	r2, r4
 801e310:	462b      	mov	r3, r5
 801e312:	f7fa fa81 	bl	8018818 <__aeabi_dmul>
 801e316:	a376      	add	r3, pc, #472	; (adr r3, 801e4f0 <__ieee754_pow+0x720>)
 801e318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e31c:	f7fa f8c6 	bl	80184ac <__adddf3>
 801e320:	4622      	mov	r2, r4
 801e322:	462b      	mov	r3, r5
 801e324:	f7fa fa78 	bl	8018818 <__aeabi_dmul>
 801e328:	a373      	add	r3, pc, #460	; (adr r3, 801e4f8 <__ieee754_pow+0x728>)
 801e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e32e:	f7fa f8bd 	bl	80184ac <__adddf3>
 801e332:	4622      	mov	r2, r4
 801e334:	462b      	mov	r3, r5
 801e336:	f7fa fa6f 	bl	8018818 <__aeabi_dmul>
 801e33a:	a371      	add	r3, pc, #452	; (adr r3, 801e500 <__ieee754_pow+0x730>)
 801e33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e340:	f7fa f8b4 	bl	80184ac <__adddf3>
 801e344:	4622      	mov	r2, r4
 801e346:	4606      	mov	r6, r0
 801e348:	460f      	mov	r7, r1
 801e34a:	462b      	mov	r3, r5
 801e34c:	4620      	mov	r0, r4
 801e34e:	4629      	mov	r1, r5
 801e350:	f7fa fa62 	bl	8018818 <__aeabi_dmul>
 801e354:	4602      	mov	r2, r0
 801e356:	460b      	mov	r3, r1
 801e358:	4630      	mov	r0, r6
 801e35a:	4639      	mov	r1, r7
 801e35c:	f7fa fa5c 	bl	8018818 <__aeabi_dmul>
 801e360:	4642      	mov	r2, r8
 801e362:	4604      	mov	r4, r0
 801e364:	460d      	mov	r5, r1
 801e366:	464b      	mov	r3, r9
 801e368:	ec51 0b18 	vmov	r0, r1, d8
 801e36c:	f7fa f89e 	bl	80184ac <__adddf3>
 801e370:	ec53 2b19 	vmov	r2, r3, d9
 801e374:	f7fa fa50 	bl	8018818 <__aeabi_dmul>
 801e378:	4622      	mov	r2, r4
 801e37a:	462b      	mov	r3, r5
 801e37c:	f7fa f896 	bl	80184ac <__adddf3>
 801e380:	4642      	mov	r2, r8
 801e382:	4682      	mov	sl, r0
 801e384:	468b      	mov	fp, r1
 801e386:	464b      	mov	r3, r9
 801e388:	4640      	mov	r0, r8
 801e38a:	4649      	mov	r1, r9
 801e38c:	f7fa fa44 	bl	8018818 <__aeabi_dmul>
 801e390:	4b6b      	ldr	r3, [pc, #428]	; (801e540 <__ieee754_pow+0x770>)
 801e392:	2200      	movs	r2, #0
 801e394:	4606      	mov	r6, r0
 801e396:	460f      	mov	r7, r1
 801e398:	f7fa f888 	bl	80184ac <__adddf3>
 801e39c:	4652      	mov	r2, sl
 801e39e:	465b      	mov	r3, fp
 801e3a0:	f7fa f884 	bl	80184ac <__adddf3>
 801e3a4:	2000      	movs	r0, #0
 801e3a6:	4604      	mov	r4, r0
 801e3a8:	460d      	mov	r5, r1
 801e3aa:	4602      	mov	r2, r0
 801e3ac:	460b      	mov	r3, r1
 801e3ae:	4640      	mov	r0, r8
 801e3b0:	4649      	mov	r1, r9
 801e3b2:	f7fa fa31 	bl	8018818 <__aeabi_dmul>
 801e3b6:	4b62      	ldr	r3, [pc, #392]	; (801e540 <__ieee754_pow+0x770>)
 801e3b8:	4680      	mov	r8, r0
 801e3ba:	4689      	mov	r9, r1
 801e3bc:	2200      	movs	r2, #0
 801e3be:	4620      	mov	r0, r4
 801e3c0:	4629      	mov	r1, r5
 801e3c2:	f7fa f871 	bl	80184a8 <__aeabi_dsub>
 801e3c6:	4632      	mov	r2, r6
 801e3c8:	463b      	mov	r3, r7
 801e3ca:	f7fa f86d 	bl	80184a8 <__aeabi_dsub>
 801e3ce:	4602      	mov	r2, r0
 801e3d0:	460b      	mov	r3, r1
 801e3d2:	4650      	mov	r0, sl
 801e3d4:	4659      	mov	r1, fp
 801e3d6:	f7fa f867 	bl	80184a8 <__aeabi_dsub>
 801e3da:	ec53 2b18 	vmov	r2, r3, d8
 801e3de:	f7fa fa1b 	bl	8018818 <__aeabi_dmul>
 801e3e2:	4622      	mov	r2, r4
 801e3e4:	4606      	mov	r6, r0
 801e3e6:	460f      	mov	r7, r1
 801e3e8:	462b      	mov	r3, r5
 801e3ea:	ec51 0b19 	vmov	r0, r1, d9
 801e3ee:	f7fa fa13 	bl	8018818 <__aeabi_dmul>
 801e3f2:	4602      	mov	r2, r0
 801e3f4:	460b      	mov	r3, r1
 801e3f6:	4630      	mov	r0, r6
 801e3f8:	4639      	mov	r1, r7
 801e3fa:	f7fa f857 	bl	80184ac <__adddf3>
 801e3fe:	4606      	mov	r6, r0
 801e400:	460f      	mov	r7, r1
 801e402:	4602      	mov	r2, r0
 801e404:	460b      	mov	r3, r1
 801e406:	4640      	mov	r0, r8
 801e408:	4649      	mov	r1, r9
 801e40a:	f7fa f84f 	bl	80184ac <__adddf3>
 801e40e:	a33e      	add	r3, pc, #248	; (adr r3, 801e508 <__ieee754_pow+0x738>)
 801e410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e414:	2000      	movs	r0, #0
 801e416:	4604      	mov	r4, r0
 801e418:	460d      	mov	r5, r1
 801e41a:	f7fa f9fd 	bl	8018818 <__aeabi_dmul>
 801e41e:	4642      	mov	r2, r8
 801e420:	ec41 0b18 	vmov	d8, r0, r1
 801e424:	464b      	mov	r3, r9
 801e426:	4620      	mov	r0, r4
 801e428:	4629      	mov	r1, r5
 801e42a:	f7fa f83d 	bl	80184a8 <__aeabi_dsub>
 801e42e:	4602      	mov	r2, r0
 801e430:	460b      	mov	r3, r1
 801e432:	4630      	mov	r0, r6
 801e434:	4639      	mov	r1, r7
 801e436:	f7fa f837 	bl	80184a8 <__aeabi_dsub>
 801e43a:	a335      	add	r3, pc, #212	; (adr r3, 801e510 <__ieee754_pow+0x740>)
 801e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e440:	f7fa f9ea 	bl	8018818 <__aeabi_dmul>
 801e444:	a334      	add	r3, pc, #208	; (adr r3, 801e518 <__ieee754_pow+0x748>)
 801e446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e44a:	4606      	mov	r6, r0
 801e44c:	460f      	mov	r7, r1
 801e44e:	4620      	mov	r0, r4
 801e450:	4629      	mov	r1, r5
 801e452:	f7fa f9e1 	bl	8018818 <__aeabi_dmul>
 801e456:	4602      	mov	r2, r0
 801e458:	460b      	mov	r3, r1
 801e45a:	4630      	mov	r0, r6
 801e45c:	4639      	mov	r1, r7
 801e45e:	f7fa f825 	bl	80184ac <__adddf3>
 801e462:	9a07      	ldr	r2, [sp, #28]
 801e464:	4b37      	ldr	r3, [pc, #220]	; (801e544 <__ieee754_pow+0x774>)
 801e466:	4413      	add	r3, r2
 801e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e46c:	f7fa f81e 	bl	80184ac <__adddf3>
 801e470:	4682      	mov	sl, r0
 801e472:	9805      	ldr	r0, [sp, #20]
 801e474:	468b      	mov	fp, r1
 801e476:	f7fa f965 	bl	8018744 <__aeabi_i2d>
 801e47a:	9a07      	ldr	r2, [sp, #28]
 801e47c:	4b32      	ldr	r3, [pc, #200]	; (801e548 <__ieee754_pow+0x778>)
 801e47e:	4413      	add	r3, r2
 801e480:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e484:	4606      	mov	r6, r0
 801e486:	460f      	mov	r7, r1
 801e488:	4652      	mov	r2, sl
 801e48a:	465b      	mov	r3, fp
 801e48c:	ec51 0b18 	vmov	r0, r1, d8
 801e490:	f7fa f80c 	bl	80184ac <__adddf3>
 801e494:	4642      	mov	r2, r8
 801e496:	464b      	mov	r3, r9
 801e498:	f7fa f808 	bl	80184ac <__adddf3>
 801e49c:	4632      	mov	r2, r6
 801e49e:	463b      	mov	r3, r7
 801e4a0:	f7fa f804 	bl	80184ac <__adddf3>
 801e4a4:	2000      	movs	r0, #0
 801e4a6:	4632      	mov	r2, r6
 801e4a8:	463b      	mov	r3, r7
 801e4aa:	4604      	mov	r4, r0
 801e4ac:	460d      	mov	r5, r1
 801e4ae:	f7f9 fffb 	bl	80184a8 <__aeabi_dsub>
 801e4b2:	4642      	mov	r2, r8
 801e4b4:	464b      	mov	r3, r9
 801e4b6:	f7f9 fff7 	bl	80184a8 <__aeabi_dsub>
 801e4ba:	ec53 2b18 	vmov	r2, r3, d8
 801e4be:	f7f9 fff3 	bl	80184a8 <__aeabi_dsub>
 801e4c2:	4602      	mov	r2, r0
 801e4c4:	460b      	mov	r3, r1
 801e4c6:	4650      	mov	r0, sl
 801e4c8:	4659      	mov	r1, fp
 801e4ca:	e610      	b.n	801e0ee <__ieee754_pow+0x31e>
 801e4cc:	2401      	movs	r4, #1
 801e4ce:	e6a1      	b.n	801e214 <__ieee754_pow+0x444>
 801e4d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801e520 <__ieee754_pow+0x750>
 801e4d4:	e617      	b.n	801e106 <__ieee754_pow+0x336>
 801e4d6:	bf00      	nop
 801e4d8:	4a454eef 	.word	0x4a454eef
 801e4dc:	3fca7e28 	.word	0x3fca7e28
 801e4e0:	93c9db65 	.word	0x93c9db65
 801e4e4:	3fcd864a 	.word	0x3fcd864a
 801e4e8:	a91d4101 	.word	0xa91d4101
 801e4ec:	3fd17460 	.word	0x3fd17460
 801e4f0:	518f264d 	.word	0x518f264d
 801e4f4:	3fd55555 	.word	0x3fd55555
 801e4f8:	db6fabff 	.word	0xdb6fabff
 801e4fc:	3fdb6db6 	.word	0x3fdb6db6
 801e500:	33333303 	.word	0x33333303
 801e504:	3fe33333 	.word	0x3fe33333
 801e508:	e0000000 	.word	0xe0000000
 801e50c:	3feec709 	.word	0x3feec709
 801e510:	dc3a03fd 	.word	0xdc3a03fd
 801e514:	3feec709 	.word	0x3feec709
 801e518:	145b01f5 	.word	0x145b01f5
 801e51c:	be3e2fe0 	.word	0xbe3e2fe0
 801e520:	00000000 	.word	0x00000000
 801e524:	3ff00000 	.word	0x3ff00000
 801e528:	7ff00000 	.word	0x7ff00000
 801e52c:	43400000 	.word	0x43400000
 801e530:	0003988e 	.word	0x0003988e
 801e534:	000bb679 	.word	0x000bb679
 801e538:	08051ed8 	.word	0x08051ed8
 801e53c:	3ff00000 	.word	0x3ff00000
 801e540:	40080000 	.word	0x40080000
 801e544:	08051ef8 	.word	0x08051ef8
 801e548:	08051ee8 	.word	0x08051ee8
 801e54c:	a3b5      	add	r3, pc, #724	; (adr r3, 801e824 <__ieee754_pow+0xa54>)
 801e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e552:	4640      	mov	r0, r8
 801e554:	4649      	mov	r1, r9
 801e556:	f7f9 ffa9 	bl	80184ac <__adddf3>
 801e55a:	4622      	mov	r2, r4
 801e55c:	ec41 0b1a 	vmov	d10, r0, r1
 801e560:	462b      	mov	r3, r5
 801e562:	4630      	mov	r0, r6
 801e564:	4639      	mov	r1, r7
 801e566:	f7f9 ff9f 	bl	80184a8 <__aeabi_dsub>
 801e56a:	4602      	mov	r2, r0
 801e56c:	460b      	mov	r3, r1
 801e56e:	ec51 0b1a 	vmov	r0, r1, d10
 801e572:	f7fa fbe1 	bl	8018d38 <__aeabi_dcmpgt>
 801e576:	2800      	cmp	r0, #0
 801e578:	f47f ae04 	bne.w	801e184 <__ieee754_pow+0x3b4>
 801e57c:	4aa4      	ldr	r2, [pc, #656]	; (801e810 <__ieee754_pow+0xa40>)
 801e57e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e582:	4293      	cmp	r3, r2
 801e584:	f340 8108 	ble.w	801e798 <__ieee754_pow+0x9c8>
 801e588:	151b      	asrs	r3, r3, #20
 801e58a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801e58e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801e592:	fa4a f303 	asr.w	r3, sl, r3
 801e596:	445b      	add	r3, fp
 801e598:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801e59c:	4e9d      	ldr	r6, [pc, #628]	; (801e814 <__ieee754_pow+0xa44>)
 801e59e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801e5a2:	4116      	asrs	r6, r2
 801e5a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801e5a8:	2000      	movs	r0, #0
 801e5aa:	ea23 0106 	bic.w	r1, r3, r6
 801e5ae:	f1c2 0214 	rsb	r2, r2, #20
 801e5b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801e5b6:	fa4a fa02 	asr.w	sl, sl, r2
 801e5ba:	f1bb 0f00 	cmp.w	fp, #0
 801e5be:	4602      	mov	r2, r0
 801e5c0:	460b      	mov	r3, r1
 801e5c2:	4620      	mov	r0, r4
 801e5c4:	4629      	mov	r1, r5
 801e5c6:	bfb8      	it	lt
 801e5c8:	f1ca 0a00 	rsblt	sl, sl, #0
 801e5cc:	f7f9 ff6c 	bl	80184a8 <__aeabi_dsub>
 801e5d0:	ec41 0b19 	vmov	d9, r0, r1
 801e5d4:	4642      	mov	r2, r8
 801e5d6:	464b      	mov	r3, r9
 801e5d8:	ec51 0b19 	vmov	r0, r1, d9
 801e5dc:	f7f9 ff66 	bl	80184ac <__adddf3>
 801e5e0:	a37b      	add	r3, pc, #492	; (adr r3, 801e7d0 <__ieee754_pow+0xa00>)
 801e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e6:	2000      	movs	r0, #0
 801e5e8:	4604      	mov	r4, r0
 801e5ea:	460d      	mov	r5, r1
 801e5ec:	f7fa f914 	bl	8018818 <__aeabi_dmul>
 801e5f0:	ec53 2b19 	vmov	r2, r3, d9
 801e5f4:	4606      	mov	r6, r0
 801e5f6:	460f      	mov	r7, r1
 801e5f8:	4620      	mov	r0, r4
 801e5fa:	4629      	mov	r1, r5
 801e5fc:	f7f9 ff54 	bl	80184a8 <__aeabi_dsub>
 801e600:	4602      	mov	r2, r0
 801e602:	460b      	mov	r3, r1
 801e604:	4640      	mov	r0, r8
 801e606:	4649      	mov	r1, r9
 801e608:	f7f9 ff4e 	bl	80184a8 <__aeabi_dsub>
 801e60c:	a372      	add	r3, pc, #456	; (adr r3, 801e7d8 <__ieee754_pow+0xa08>)
 801e60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e612:	f7fa f901 	bl	8018818 <__aeabi_dmul>
 801e616:	a372      	add	r3, pc, #456	; (adr r3, 801e7e0 <__ieee754_pow+0xa10>)
 801e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61c:	4680      	mov	r8, r0
 801e61e:	4689      	mov	r9, r1
 801e620:	4620      	mov	r0, r4
 801e622:	4629      	mov	r1, r5
 801e624:	f7fa f8f8 	bl	8018818 <__aeabi_dmul>
 801e628:	4602      	mov	r2, r0
 801e62a:	460b      	mov	r3, r1
 801e62c:	4640      	mov	r0, r8
 801e62e:	4649      	mov	r1, r9
 801e630:	f7f9 ff3c 	bl	80184ac <__adddf3>
 801e634:	4604      	mov	r4, r0
 801e636:	460d      	mov	r5, r1
 801e638:	4602      	mov	r2, r0
 801e63a:	460b      	mov	r3, r1
 801e63c:	4630      	mov	r0, r6
 801e63e:	4639      	mov	r1, r7
 801e640:	f7f9 ff34 	bl	80184ac <__adddf3>
 801e644:	4632      	mov	r2, r6
 801e646:	463b      	mov	r3, r7
 801e648:	4680      	mov	r8, r0
 801e64a:	4689      	mov	r9, r1
 801e64c:	f7f9 ff2c 	bl	80184a8 <__aeabi_dsub>
 801e650:	4602      	mov	r2, r0
 801e652:	460b      	mov	r3, r1
 801e654:	4620      	mov	r0, r4
 801e656:	4629      	mov	r1, r5
 801e658:	f7f9 ff26 	bl	80184a8 <__aeabi_dsub>
 801e65c:	4642      	mov	r2, r8
 801e65e:	4606      	mov	r6, r0
 801e660:	460f      	mov	r7, r1
 801e662:	464b      	mov	r3, r9
 801e664:	4640      	mov	r0, r8
 801e666:	4649      	mov	r1, r9
 801e668:	f7fa f8d6 	bl	8018818 <__aeabi_dmul>
 801e66c:	a35e      	add	r3, pc, #376	; (adr r3, 801e7e8 <__ieee754_pow+0xa18>)
 801e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e672:	4604      	mov	r4, r0
 801e674:	460d      	mov	r5, r1
 801e676:	f7fa f8cf 	bl	8018818 <__aeabi_dmul>
 801e67a:	a35d      	add	r3, pc, #372	; (adr r3, 801e7f0 <__ieee754_pow+0xa20>)
 801e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e680:	f7f9 ff12 	bl	80184a8 <__aeabi_dsub>
 801e684:	4622      	mov	r2, r4
 801e686:	462b      	mov	r3, r5
 801e688:	f7fa f8c6 	bl	8018818 <__aeabi_dmul>
 801e68c:	a35a      	add	r3, pc, #360	; (adr r3, 801e7f8 <__ieee754_pow+0xa28>)
 801e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e692:	f7f9 ff0b 	bl	80184ac <__adddf3>
 801e696:	4622      	mov	r2, r4
 801e698:	462b      	mov	r3, r5
 801e69a:	f7fa f8bd 	bl	8018818 <__aeabi_dmul>
 801e69e:	a358      	add	r3, pc, #352	; (adr r3, 801e800 <__ieee754_pow+0xa30>)
 801e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a4:	f7f9 ff00 	bl	80184a8 <__aeabi_dsub>
 801e6a8:	4622      	mov	r2, r4
 801e6aa:	462b      	mov	r3, r5
 801e6ac:	f7fa f8b4 	bl	8018818 <__aeabi_dmul>
 801e6b0:	a355      	add	r3, pc, #340	; (adr r3, 801e808 <__ieee754_pow+0xa38>)
 801e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6b6:	f7f9 fef9 	bl	80184ac <__adddf3>
 801e6ba:	4622      	mov	r2, r4
 801e6bc:	462b      	mov	r3, r5
 801e6be:	f7fa f8ab 	bl	8018818 <__aeabi_dmul>
 801e6c2:	4602      	mov	r2, r0
 801e6c4:	460b      	mov	r3, r1
 801e6c6:	4640      	mov	r0, r8
 801e6c8:	4649      	mov	r1, r9
 801e6ca:	f7f9 feed 	bl	80184a8 <__aeabi_dsub>
 801e6ce:	4604      	mov	r4, r0
 801e6d0:	460d      	mov	r5, r1
 801e6d2:	4602      	mov	r2, r0
 801e6d4:	460b      	mov	r3, r1
 801e6d6:	4640      	mov	r0, r8
 801e6d8:	4649      	mov	r1, r9
 801e6da:	f7fa f89d 	bl	8018818 <__aeabi_dmul>
 801e6de:	2200      	movs	r2, #0
 801e6e0:	ec41 0b19 	vmov	d9, r0, r1
 801e6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e6e8:	4620      	mov	r0, r4
 801e6ea:	4629      	mov	r1, r5
 801e6ec:	f7f9 fedc 	bl	80184a8 <__aeabi_dsub>
 801e6f0:	4602      	mov	r2, r0
 801e6f2:	460b      	mov	r3, r1
 801e6f4:	ec51 0b19 	vmov	r0, r1, d9
 801e6f8:	f7fa f9b8 	bl	8018a6c <__aeabi_ddiv>
 801e6fc:	4632      	mov	r2, r6
 801e6fe:	4604      	mov	r4, r0
 801e700:	460d      	mov	r5, r1
 801e702:	463b      	mov	r3, r7
 801e704:	4640      	mov	r0, r8
 801e706:	4649      	mov	r1, r9
 801e708:	f7fa f886 	bl	8018818 <__aeabi_dmul>
 801e70c:	4632      	mov	r2, r6
 801e70e:	463b      	mov	r3, r7
 801e710:	f7f9 fecc 	bl	80184ac <__adddf3>
 801e714:	4602      	mov	r2, r0
 801e716:	460b      	mov	r3, r1
 801e718:	4620      	mov	r0, r4
 801e71a:	4629      	mov	r1, r5
 801e71c:	f7f9 fec4 	bl	80184a8 <__aeabi_dsub>
 801e720:	4642      	mov	r2, r8
 801e722:	464b      	mov	r3, r9
 801e724:	f7f9 fec0 	bl	80184a8 <__aeabi_dsub>
 801e728:	460b      	mov	r3, r1
 801e72a:	4602      	mov	r2, r0
 801e72c:	493a      	ldr	r1, [pc, #232]	; (801e818 <__ieee754_pow+0xa48>)
 801e72e:	2000      	movs	r0, #0
 801e730:	f7f9 feba 	bl	80184a8 <__aeabi_dsub>
 801e734:	ec41 0b10 	vmov	d0, r0, r1
 801e738:	ee10 3a90 	vmov	r3, s1
 801e73c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801e740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e744:	da2b      	bge.n	801e79e <__ieee754_pow+0x9ce>
 801e746:	4650      	mov	r0, sl
 801e748:	f000 f966 	bl	801ea18 <scalbn>
 801e74c:	ec51 0b10 	vmov	r0, r1, d0
 801e750:	ec53 2b18 	vmov	r2, r3, d8
 801e754:	f7ff bbed 	b.w	801df32 <__ieee754_pow+0x162>
 801e758:	4b30      	ldr	r3, [pc, #192]	; (801e81c <__ieee754_pow+0xa4c>)
 801e75a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801e75e:	429e      	cmp	r6, r3
 801e760:	f77f af0c 	ble.w	801e57c <__ieee754_pow+0x7ac>
 801e764:	4b2e      	ldr	r3, [pc, #184]	; (801e820 <__ieee754_pow+0xa50>)
 801e766:	440b      	add	r3, r1
 801e768:	4303      	orrs	r3, r0
 801e76a:	d009      	beq.n	801e780 <__ieee754_pow+0x9b0>
 801e76c:	ec51 0b18 	vmov	r0, r1, d8
 801e770:	2200      	movs	r2, #0
 801e772:	2300      	movs	r3, #0
 801e774:	f7fa fac2 	bl	8018cfc <__aeabi_dcmplt>
 801e778:	3800      	subs	r0, #0
 801e77a:	bf18      	it	ne
 801e77c:	2001      	movne	r0, #1
 801e77e:	e447      	b.n	801e010 <__ieee754_pow+0x240>
 801e780:	4622      	mov	r2, r4
 801e782:	462b      	mov	r3, r5
 801e784:	f7f9 fe90 	bl	80184a8 <__aeabi_dsub>
 801e788:	4642      	mov	r2, r8
 801e78a:	464b      	mov	r3, r9
 801e78c:	f7fa faca 	bl	8018d24 <__aeabi_dcmpge>
 801e790:	2800      	cmp	r0, #0
 801e792:	f43f aef3 	beq.w	801e57c <__ieee754_pow+0x7ac>
 801e796:	e7e9      	b.n	801e76c <__ieee754_pow+0x99c>
 801e798:	f04f 0a00 	mov.w	sl, #0
 801e79c:	e71a      	b.n	801e5d4 <__ieee754_pow+0x804>
 801e79e:	ec51 0b10 	vmov	r0, r1, d0
 801e7a2:	4619      	mov	r1, r3
 801e7a4:	e7d4      	b.n	801e750 <__ieee754_pow+0x980>
 801e7a6:	491c      	ldr	r1, [pc, #112]	; (801e818 <__ieee754_pow+0xa48>)
 801e7a8:	2000      	movs	r0, #0
 801e7aa:	f7ff bb30 	b.w	801de0e <__ieee754_pow+0x3e>
 801e7ae:	2000      	movs	r0, #0
 801e7b0:	2100      	movs	r1, #0
 801e7b2:	f7ff bb2c 	b.w	801de0e <__ieee754_pow+0x3e>
 801e7b6:	4630      	mov	r0, r6
 801e7b8:	4639      	mov	r1, r7
 801e7ba:	f7ff bb28 	b.w	801de0e <__ieee754_pow+0x3e>
 801e7be:	9204      	str	r2, [sp, #16]
 801e7c0:	f7ff bb7a 	b.w	801deb8 <__ieee754_pow+0xe8>
 801e7c4:	2300      	movs	r3, #0
 801e7c6:	f7ff bb64 	b.w	801de92 <__ieee754_pow+0xc2>
 801e7ca:	bf00      	nop
 801e7cc:	f3af 8000 	nop.w
 801e7d0:	00000000 	.word	0x00000000
 801e7d4:	3fe62e43 	.word	0x3fe62e43
 801e7d8:	fefa39ef 	.word	0xfefa39ef
 801e7dc:	3fe62e42 	.word	0x3fe62e42
 801e7e0:	0ca86c39 	.word	0x0ca86c39
 801e7e4:	be205c61 	.word	0xbe205c61
 801e7e8:	72bea4d0 	.word	0x72bea4d0
 801e7ec:	3e663769 	.word	0x3e663769
 801e7f0:	c5d26bf1 	.word	0xc5d26bf1
 801e7f4:	3ebbbd41 	.word	0x3ebbbd41
 801e7f8:	af25de2c 	.word	0xaf25de2c
 801e7fc:	3f11566a 	.word	0x3f11566a
 801e800:	16bebd93 	.word	0x16bebd93
 801e804:	3f66c16c 	.word	0x3f66c16c
 801e808:	5555553e 	.word	0x5555553e
 801e80c:	3fc55555 	.word	0x3fc55555
 801e810:	3fe00000 	.word	0x3fe00000
 801e814:	000fffff 	.word	0x000fffff
 801e818:	3ff00000 	.word	0x3ff00000
 801e81c:	4090cbff 	.word	0x4090cbff
 801e820:	3f6f3400 	.word	0x3f6f3400
 801e824:	652b82fe 	.word	0x652b82fe
 801e828:	3c971547 	.word	0x3c971547

0801e82c <__ieee754_sqrt>:
 801e82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e830:	ec55 4b10 	vmov	r4, r5, d0
 801e834:	4e55      	ldr	r6, [pc, #340]	; (801e98c <__ieee754_sqrt+0x160>)
 801e836:	43ae      	bics	r6, r5
 801e838:	ee10 0a10 	vmov	r0, s0
 801e83c:	ee10 3a10 	vmov	r3, s0
 801e840:	462a      	mov	r2, r5
 801e842:	4629      	mov	r1, r5
 801e844:	d110      	bne.n	801e868 <__ieee754_sqrt+0x3c>
 801e846:	ee10 2a10 	vmov	r2, s0
 801e84a:	462b      	mov	r3, r5
 801e84c:	f7f9 ffe4 	bl	8018818 <__aeabi_dmul>
 801e850:	4602      	mov	r2, r0
 801e852:	460b      	mov	r3, r1
 801e854:	4620      	mov	r0, r4
 801e856:	4629      	mov	r1, r5
 801e858:	f7f9 fe28 	bl	80184ac <__adddf3>
 801e85c:	4604      	mov	r4, r0
 801e85e:	460d      	mov	r5, r1
 801e860:	ec45 4b10 	vmov	d0, r4, r5
 801e864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e868:	2d00      	cmp	r5, #0
 801e86a:	dc10      	bgt.n	801e88e <__ieee754_sqrt+0x62>
 801e86c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e870:	4330      	orrs	r0, r6
 801e872:	d0f5      	beq.n	801e860 <__ieee754_sqrt+0x34>
 801e874:	b15d      	cbz	r5, 801e88e <__ieee754_sqrt+0x62>
 801e876:	ee10 2a10 	vmov	r2, s0
 801e87a:	462b      	mov	r3, r5
 801e87c:	ee10 0a10 	vmov	r0, s0
 801e880:	f7f9 fe12 	bl	80184a8 <__aeabi_dsub>
 801e884:	4602      	mov	r2, r0
 801e886:	460b      	mov	r3, r1
 801e888:	f7fa f8f0 	bl	8018a6c <__aeabi_ddiv>
 801e88c:	e7e6      	b.n	801e85c <__ieee754_sqrt+0x30>
 801e88e:	1512      	asrs	r2, r2, #20
 801e890:	d074      	beq.n	801e97c <__ieee754_sqrt+0x150>
 801e892:	07d4      	lsls	r4, r2, #31
 801e894:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e898:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801e89c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801e8a0:	bf5e      	ittt	pl
 801e8a2:	0fda      	lsrpl	r2, r3, #31
 801e8a4:	005b      	lslpl	r3, r3, #1
 801e8a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801e8aa:	2400      	movs	r4, #0
 801e8ac:	0fda      	lsrs	r2, r3, #31
 801e8ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801e8b2:	107f      	asrs	r7, r7, #1
 801e8b4:	005b      	lsls	r3, r3, #1
 801e8b6:	2516      	movs	r5, #22
 801e8b8:	4620      	mov	r0, r4
 801e8ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801e8be:	1886      	adds	r6, r0, r2
 801e8c0:	428e      	cmp	r6, r1
 801e8c2:	bfde      	ittt	le
 801e8c4:	1b89      	suble	r1, r1, r6
 801e8c6:	18b0      	addle	r0, r6, r2
 801e8c8:	18a4      	addle	r4, r4, r2
 801e8ca:	0049      	lsls	r1, r1, #1
 801e8cc:	3d01      	subs	r5, #1
 801e8ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801e8d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801e8d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e8da:	d1f0      	bne.n	801e8be <__ieee754_sqrt+0x92>
 801e8dc:	462a      	mov	r2, r5
 801e8de:	f04f 0e20 	mov.w	lr, #32
 801e8e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e8e6:	4281      	cmp	r1, r0
 801e8e8:	eb06 0c05 	add.w	ip, r6, r5
 801e8ec:	dc02      	bgt.n	801e8f4 <__ieee754_sqrt+0xc8>
 801e8ee:	d113      	bne.n	801e918 <__ieee754_sqrt+0xec>
 801e8f0:	459c      	cmp	ip, r3
 801e8f2:	d811      	bhi.n	801e918 <__ieee754_sqrt+0xec>
 801e8f4:	f1bc 0f00 	cmp.w	ip, #0
 801e8f8:	eb0c 0506 	add.w	r5, ip, r6
 801e8fc:	da43      	bge.n	801e986 <__ieee754_sqrt+0x15a>
 801e8fe:	2d00      	cmp	r5, #0
 801e900:	db41      	blt.n	801e986 <__ieee754_sqrt+0x15a>
 801e902:	f100 0801 	add.w	r8, r0, #1
 801e906:	1a09      	subs	r1, r1, r0
 801e908:	459c      	cmp	ip, r3
 801e90a:	bf88      	it	hi
 801e90c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801e910:	eba3 030c 	sub.w	r3, r3, ip
 801e914:	4432      	add	r2, r6
 801e916:	4640      	mov	r0, r8
 801e918:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801e91c:	f1be 0e01 	subs.w	lr, lr, #1
 801e920:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801e924:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e928:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801e92c:	d1db      	bne.n	801e8e6 <__ieee754_sqrt+0xba>
 801e92e:	430b      	orrs	r3, r1
 801e930:	d006      	beq.n	801e940 <__ieee754_sqrt+0x114>
 801e932:	1c50      	adds	r0, r2, #1
 801e934:	bf13      	iteet	ne
 801e936:	3201      	addne	r2, #1
 801e938:	3401      	addeq	r4, #1
 801e93a:	4672      	moveq	r2, lr
 801e93c:	f022 0201 	bicne.w	r2, r2, #1
 801e940:	1063      	asrs	r3, r4, #1
 801e942:	0852      	lsrs	r2, r2, #1
 801e944:	07e1      	lsls	r1, r4, #31
 801e946:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801e94a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801e94e:	bf48      	it	mi
 801e950:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801e954:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801e958:	4614      	mov	r4, r2
 801e95a:	e781      	b.n	801e860 <__ieee754_sqrt+0x34>
 801e95c:	0ad9      	lsrs	r1, r3, #11
 801e95e:	3815      	subs	r0, #21
 801e960:	055b      	lsls	r3, r3, #21
 801e962:	2900      	cmp	r1, #0
 801e964:	d0fa      	beq.n	801e95c <__ieee754_sqrt+0x130>
 801e966:	02cd      	lsls	r5, r1, #11
 801e968:	d50a      	bpl.n	801e980 <__ieee754_sqrt+0x154>
 801e96a:	f1c2 0420 	rsb	r4, r2, #32
 801e96e:	fa23 f404 	lsr.w	r4, r3, r4
 801e972:	1e55      	subs	r5, r2, #1
 801e974:	4093      	lsls	r3, r2
 801e976:	4321      	orrs	r1, r4
 801e978:	1b42      	subs	r2, r0, r5
 801e97a:	e78a      	b.n	801e892 <__ieee754_sqrt+0x66>
 801e97c:	4610      	mov	r0, r2
 801e97e:	e7f0      	b.n	801e962 <__ieee754_sqrt+0x136>
 801e980:	0049      	lsls	r1, r1, #1
 801e982:	3201      	adds	r2, #1
 801e984:	e7ef      	b.n	801e966 <__ieee754_sqrt+0x13a>
 801e986:	4680      	mov	r8, r0
 801e988:	e7bd      	b.n	801e906 <__ieee754_sqrt+0xda>
 801e98a:	bf00      	nop
 801e98c:	7ff00000 	.word	0x7ff00000

0801e990 <with_errno>:
 801e990:	b570      	push	{r4, r5, r6, lr}
 801e992:	4604      	mov	r4, r0
 801e994:	460d      	mov	r5, r1
 801e996:	4616      	mov	r6, r2
 801e998:	f7fa fc6c 	bl	8019274 <__errno>
 801e99c:	4629      	mov	r1, r5
 801e99e:	6006      	str	r6, [r0, #0]
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	bd70      	pop	{r4, r5, r6, pc}

0801e9a4 <xflow>:
 801e9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e9a6:	4614      	mov	r4, r2
 801e9a8:	461d      	mov	r5, r3
 801e9aa:	b108      	cbz	r0, 801e9b0 <xflow+0xc>
 801e9ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e9b0:	e9cd 2300 	strd	r2, r3, [sp]
 801e9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e9b8:	4620      	mov	r0, r4
 801e9ba:	4629      	mov	r1, r5
 801e9bc:	f7f9 ff2c 	bl	8018818 <__aeabi_dmul>
 801e9c0:	2222      	movs	r2, #34	; 0x22
 801e9c2:	b003      	add	sp, #12
 801e9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e9c8:	f7ff bfe2 	b.w	801e990 <with_errno>

0801e9cc <__math_uflow>:
 801e9cc:	b508      	push	{r3, lr}
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801e9d4:	f7ff ffe6 	bl	801e9a4 <xflow>
 801e9d8:	ec41 0b10 	vmov	d0, r0, r1
 801e9dc:	bd08      	pop	{r3, pc}

0801e9de <__math_oflow>:
 801e9de:	b508      	push	{r3, lr}
 801e9e0:	2200      	movs	r2, #0
 801e9e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801e9e6:	f7ff ffdd 	bl	801e9a4 <xflow>
 801e9ea:	ec41 0b10 	vmov	d0, r0, r1
 801e9ee:	bd08      	pop	{r3, pc}

0801e9f0 <fabs>:
 801e9f0:	ec51 0b10 	vmov	r0, r1, d0
 801e9f4:	ee10 2a10 	vmov	r2, s0
 801e9f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e9fc:	ec43 2b10 	vmov	d0, r2, r3
 801ea00:	4770      	bx	lr

0801ea02 <finite>:
 801ea02:	b082      	sub	sp, #8
 801ea04:	ed8d 0b00 	vstr	d0, [sp]
 801ea08:	9801      	ldr	r0, [sp, #4]
 801ea0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ea0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ea12:	0fc0      	lsrs	r0, r0, #31
 801ea14:	b002      	add	sp, #8
 801ea16:	4770      	bx	lr

0801ea18 <scalbn>:
 801ea18:	b570      	push	{r4, r5, r6, lr}
 801ea1a:	ec55 4b10 	vmov	r4, r5, d0
 801ea1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ea22:	4606      	mov	r6, r0
 801ea24:	462b      	mov	r3, r5
 801ea26:	b99a      	cbnz	r2, 801ea50 <scalbn+0x38>
 801ea28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ea2c:	4323      	orrs	r3, r4
 801ea2e:	d036      	beq.n	801ea9e <scalbn+0x86>
 801ea30:	4b39      	ldr	r3, [pc, #228]	; (801eb18 <scalbn+0x100>)
 801ea32:	4629      	mov	r1, r5
 801ea34:	ee10 0a10 	vmov	r0, s0
 801ea38:	2200      	movs	r2, #0
 801ea3a:	f7f9 feed 	bl	8018818 <__aeabi_dmul>
 801ea3e:	4b37      	ldr	r3, [pc, #220]	; (801eb1c <scalbn+0x104>)
 801ea40:	429e      	cmp	r6, r3
 801ea42:	4604      	mov	r4, r0
 801ea44:	460d      	mov	r5, r1
 801ea46:	da10      	bge.n	801ea6a <scalbn+0x52>
 801ea48:	a32b      	add	r3, pc, #172	; (adr r3, 801eaf8 <scalbn+0xe0>)
 801ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4e:	e03a      	b.n	801eac6 <scalbn+0xae>
 801ea50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ea54:	428a      	cmp	r2, r1
 801ea56:	d10c      	bne.n	801ea72 <scalbn+0x5a>
 801ea58:	ee10 2a10 	vmov	r2, s0
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	4629      	mov	r1, r5
 801ea60:	f7f9 fd24 	bl	80184ac <__adddf3>
 801ea64:	4604      	mov	r4, r0
 801ea66:	460d      	mov	r5, r1
 801ea68:	e019      	b.n	801ea9e <scalbn+0x86>
 801ea6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ea6e:	460b      	mov	r3, r1
 801ea70:	3a36      	subs	r2, #54	; 0x36
 801ea72:	4432      	add	r2, r6
 801ea74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ea78:	428a      	cmp	r2, r1
 801ea7a:	dd08      	ble.n	801ea8e <scalbn+0x76>
 801ea7c:	2d00      	cmp	r5, #0
 801ea7e:	a120      	add	r1, pc, #128	; (adr r1, 801eb00 <scalbn+0xe8>)
 801ea80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ea84:	da1c      	bge.n	801eac0 <scalbn+0xa8>
 801ea86:	a120      	add	r1, pc, #128	; (adr r1, 801eb08 <scalbn+0xf0>)
 801ea88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ea8c:	e018      	b.n	801eac0 <scalbn+0xa8>
 801ea8e:	2a00      	cmp	r2, #0
 801ea90:	dd08      	ble.n	801eaa4 <scalbn+0x8c>
 801ea92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ea96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ea9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ea9e:	ec45 4b10 	vmov	d0, r4, r5
 801eaa2:	bd70      	pop	{r4, r5, r6, pc}
 801eaa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801eaa8:	da19      	bge.n	801eade <scalbn+0xc6>
 801eaaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 801eaae:	429e      	cmp	r6, r3
 801eab0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801eab4:	dd0a      	ble.n	801eacc <scalbn+0xb4>
 801eab6:	a112      	add	r1, pc, #72	; (adr r1, 801eb00 <scalbn+0xe8>)
 801eab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	d1e2      	bne.n	801ea86 <scalbn+0x6e>
 801eac0:	a30f      	add	r3, pc, #60	; (adr r3, 801eb00 <scalbn+0xe8>)
 801eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eac6:	f7f9 fea7 	bl	8018818 <__aeabi_dmul>
 801eaca:	e7cb      	b.n	801ea64 <scalbn+0x4c>
 801eacc:	a10a      	add	r1, pc, #40	; (adr r1, 801eaf8 <scalbn+0xe0>)
 801eace:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	d0b8      	beq.n	801ea48 <scalbn+0x30>
 801ead6:	a10e      	add	r1, pc, #56	; (adr r1, 801eb10 <scalbn+0xf8>)
 801ead8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eadc:	e7b4      	b.n	801ea48 <scalbn+0x30>
 801eade:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801eae2:	3236      	adds	r2, #54	; 0x36
 801eae4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801eae8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801eaec:	4620      	mov	r0, r4
 801eaee:	4b0c      	ldr	r3, [pc, #48]	; (801eb20 <scalbn+0x108>)
 801eaf0:	2200      	movs	r2, #0
 801eaf2:	e7e8      	b.n	801eac6 <scalbn+0xae>
 801eaf4:	f3af 8000 	nop.w
 801eaf8:	c2f8f359 	.word	0xc2f8f359
 801eafc:	01a56e1f 	.word	0x01a56e1f
 801eb00:	8800759c 	.word	0x8800759c
 801eb04:	7e37e43c 	.word	0x7e37e43c
 801eb08:	8800759c 	.word	0x8800759c
 801eb0c:	fe37e43c 	.word	0xfe37e43c
 801eb10:	c2f8f359 	.word	0xc2f8f359
 801eb14:	81a56e1f 	.word	0x81a56e1f
 801eb18:	43500000 	.word	0x43500000
 801eb1c:	ffff3cb0 	.word	0xffff3cb0
 801eb20:	3c900000 	.word	0x3c900000

0801eb24 <_init>:
 801eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb26:	bf00      	nop
 801eb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb2a:	bc08      	pop	{r3}
 801eb2c:	469e      	mov	lr, r3
 801eb2e:	4770      	bx	lr

0801eb30 <_fini>:
 801eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb32:	bf00      	nop
 801eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb36:	bc08      	pop	{r3}
 801eb38:	469e      	mov	lr, r3
 801eb3a:	4770      	bx	lr
