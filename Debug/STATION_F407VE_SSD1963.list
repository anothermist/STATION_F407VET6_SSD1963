
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f12c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011f78  0800f2c0  0800f2c0  0001f2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021238  08021238  00040234  2**0
                  CONTENTS
  4 .ARM          00000008  08021238  08021238  00031238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021240  08021240  00040234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021240  08021240  00031240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021244  08021244  00031244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08021248  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040234  2**0
                  CONTENTS
 10 .bss          00000700  20000238  20000238  00040238  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20000938  20000938  00040238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ce9  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d4d  00000000  00000000  00054f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00057ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  00058e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ee0  00000000  00000000  00059ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f08  00000000  00000000  0007dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceb04  00000000  00000000  00093ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001627ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000625c  00000000  00000000  001627fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2a4 	.word	0x0800f2a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800f2a4 	.word	0x0800f2a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <AT24XX_Save>:
		return 1;
	else
		return 0;
}

uint8_t AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b20      	cmp	r3, #32
 800100a:	d901      	bls.n	8001010 <AT24XX_Save+0x18>
		return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e016      	b.n	800103e <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b29b      	uxth	r3, r3
 8001014:	89fa      	ldrh	r2, [r7, #14]
 8001016:	f04f 31ff 	mov.w	r1, #4294967295
 800101a:	9102      	str	r1, [sp, #8]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2310      	movs	r3, #16
 8001024:	21ae      	movs	r1, #174	; 0xae
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <AT24XX_Save+0x50>)
 8001028:	f005 fc9c 	bl	8006964 <HAL_I2C_Mem_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8001032:	2005      	movs	r0, #5
 8001034:	f004 fce6 	bl	8005a04 <HAL_Delay>
			return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <AT24XX_Save+0x46>
} else
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002b8 	.word	0x200002b8

0800104c <AT24XX_Load>:

uint8_t AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, HAL_MAX_DELAY) == HAL_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	9102      	str	r1, [sp, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2310      	movs	r3, #16
 800106e:	21ae      	movs	r1, #174	; 0xae
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <AT24XX_Load+0x40>)
 8001072:	f005 fd71 	bl	8006b58 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <AT24XX_Load+0x36>
} else
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002b8 	.word	0x200002b8

08001090 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800109a:	2300      	movs	r3, #0
 800109c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ffd0 	bl	800104c <AT24XX_Load>
	return dt[0];
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	4613      	mov	r3, r2
 80010c6:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2201      	movs	r2, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff8f 	bl	8000ff8 <AT24XX_Save>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	460a      	mov	r2, r1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffcb 	bl	8001090 <AT24XX_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	4293      	cmp	r3, r2
 8001102:	d005      	beq.n	8001110 <AT24XX_Update+0x2e>
 8001104:	797a      	ldrb	r2, [r7, #5]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffd4 	bl	80010b8 <AT24XX_Write>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001122:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8001126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800112a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800112e:	f7ff fb8d 	bl	800084c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <round_eps+0x68>)
 8001140:	f7ff f8a4 	bl	800028c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	f00d f90c 	bl	800e370 <floor>
 8001158:	ec51 0b10 	vmov	r0, r1, d0
 800115c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	3fe00000 	.word	0x3fe00000
 8001184:	00000000 	.word	0x00000000

08001188 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f9d6 	bl	8000548 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b11 	vmov	d1, r2, r3
 80011b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80011e0 <round_nth+0x58>
 80011b6:	f00d f95b 	bl	800e470 <pow>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	eeb0 1a47 	vmov.f32	s2, s14
 80011c6:	eef0 1a67 	vmov.f32	s3, s15
 80011ca:	ec45 4b10 	vmov	d0, r4, r5
 80011ce:	f7ff ffa3 	bl	8001118 <round_eps>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdb0      	pop	{r4, r5, r7, pc}
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40240000 	.word	0x40240000

080011e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2301      	movs	r3, #1
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	482e      	ldr	r0, [pc, #184]	; (80012c0 <BME280_getTemperature+0xd8>)
 8001206:	f005 f889 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2303      	movs	r3, #3
 8001218:	21ec      	movs	r1, #236	; 0xec
 800121a:	4829      	ldr	r0, [pc, #164]	; (80012c0 <BME280_getTemperature+0xd8>)
 800121c:	f005 f97c 	bl	8006518 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8001220:	7a7b      	ldrb	r3, [r7, #9]
 8001222:	031a      	lsls	r2, r3, #12
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4313      	orrs	r3, r2
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	0912      	lsrs	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <BME280_getTemperature+0xdc>)
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <BME280_getTemperature+0xe0>)
 8001242:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	491c      	ldr	r1, [pc, #112]	; (80012c4 <BME280_getTemperature+0xdc>)
 8001252:	8809      	ldrh	r1, [r1, #0]
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	6979      	ldr	r1, [r7, #20]
 8001258:	0909      	lsrs	r1, r1, #4
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <BME280_getTemperature+0xdc>)
 800125c:	8800      	ldrh	r0, [r0, #0]
 800125e:	1a09      	subs	r1, r1, r0
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	0b1b      	lsrs	r3, r3, #12
 8001266:	4919      	ldr	r1, [pc, #100]	; (80012cc <BME280_getTemperature+0xe4>)
 8001268:	f9b1 1000 	ldrsh.w	r1, [r1]
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8001272:	4413      	add	r3, r2
    temp =
 8001274:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <BME280_getTemperature+0xe8>)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3380      	adds	r3, #128	; 0x80
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8001298:	edd7 7a03 	vldr	s15, [r7, #12]
 800129c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012d4 <BME280_getTemperature+0xec>
 80012a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	f7ff ff6b 	bl	8001188 <round_nth>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002b8 	.word	0x200002b8
 80012c4:	20000254 	.word	0x20000254
 80012c8:	20000256 	.word	0x20000256
 80012cc:	20000258 	.word	0x20000258
 80012d0:	20000278 	.word	0x20000278
 80012d4:	42c80000 	.word	0x42c80000

080012d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80012e2:	23fd      	movs	r3, #253	; 0xfd
 80012e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	21ec      	movs	r1, #236	; 0xec
 80012f4:	4840      	ldr	r0, [pc, #256]	; (80013f8 <BME280_getHumidity+0x120>)
 80012f6:	f005 f811 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, HAL_MAX_DELAY);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2302      	movs	r3, #2
 8001308:	21ec      	movs	r1, #236	; 0xec
 800130a:	483b      	ldr	r0, [pc, #236]	; (80013f8 <BME280_getHumidity+0x120>)
 800130c:	f005 f904 	bl	8006518 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 8001310:	7a7b      	ldrb	r3, [r7, #9]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	7aba      	ldrb	r2, [r7, #10]
 8001316:	4313      	orrs	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <BME280_getHumidity+0x124>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001322:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <BME280_getHumidity+0x128>)
 800132a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800132e:	0512      	lsls	r2, r2, #20
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	4a34      	ldr	r2, [pc, #208]	; (8001404 <BME280_getHumidity+0x12c>)
 8001334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001338:	4611      	mov	r1, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	fb01 f202 	mul.w	r2, r1, r2
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001346:	0bdb      	lsrs	r3, r3, #15
 8001348:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <BME280_getHumidity+0x130>)
 800134a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800134e:	4611      	mov	r1, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	fb01 f202 	mul.w	r2, r1, r2
 8001356:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8001358:	492c      	ldr	r1, [pc, #176]	; (800140c <BME280_getHumidity+0x134>)
 800135a:	8809      	ldrh	r1, [r1, #0]
 800135c:	4608      	mov	r0, r1
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	fb00 f101 	mul.w	r1, r0, r1
 8001364:	12c9      	asrs	r1, r1, #11
 8001366:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 800136a:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800136e:	1292      	asrs	r2, r2, #10
 8001370:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8001374:	4926      	ldr	r1, [pc, #152]	; (8001410 <BME280_getHumidity+0x138>)
 8001376:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800137a:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800137e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001382:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8001384:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8001388:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	13db      	asrs	r3, r3, #15
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	13d2      	asrs	r2, r2, #15
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	11db      	asrs	r3, r3, #7
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <BME280_getHumidity+0x13c>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80013ae:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80013b6:	bfa8      	it	ge
 80013b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80013bc:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001418 <BME280_getHumidity+0x140>
 80013d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	eeb0 0a47 	vmov.f32	s0, s14
 80013e4:	f7ff fed0 	bl	8001188 <round_nth>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002b8 	.word	0x200002b8
 80013fc:	20000278 	.word	0x20000278
 8001400:	20000272 	.word	0x20000272
 8001404:	20000274 	.word	0x20000274
 8001408:	20000276 	.word	0x20000276
 800140c:	2000026e 	.word	0x2000026e
 8001410:	20000270 	.word	0x20000270
 8001414:	2000026c 	.word	0x2000026c
 8001418:	44800000 	.word	0x44800000

0800141c <BME280_getPressure>:

float BME280_getPressure(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 8001422:	23f7      	movs	r3, #247	; 0xf7
 8001424:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001426:	463a      	mov	r2, r7
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	485d      	ldr	r0, [pc, #372]	; (80015a8 <BME280_getPressure+0x18c>)
 8001434:	f004 ff72 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, HAL_MAX_DELAY);
 8001438:	463b      	mov	r3, r7
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2303      	movs	r3, #3
 8001444:	21ec      	movs	r1, #236	; 0xec
 8001446:	4858      	ldr	r0, [pc, #352]	; (80015a8 <BME280_getPressure+0x18c>)
 8001448:	f005 f866 	bl	8006518 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	031a      	lsls	r2, r3, #12
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4313      	orrs	r3, r2
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	0912      	lsrs	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <BME280_getPressure+0x190>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800146a:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	12db      	asrs	r3, r3, #11
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <BME280_getPressure+0x194>)
 800147c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <BME280_getPressure+0x198>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	109a      	asrs	r2, r3, #2
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <BME280_getPressure+0x19c>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <BME280_getPressure+0x1a0>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	4619      	mov	r1, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	109b      	asrs	r3, r3, #2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	1092      	asrs	r2, r2, #2
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	135b      	asrs	r3, r3, #13
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	10da      	asrs	r2, r3, #3
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <BME280_getPressure+0x1a4>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	105b      	asrs	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	149b      	asrs	r3, r3, #18
 80014dc:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014e4:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <BME280_getPressure+0x1a8>)
 80014e6:	8812      	ldrh	r2, [r2, #0]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	13db      	asrs	r3, r3, #15
 80014ee:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <BME280_getPressure+0xe0>
        return 0;
 80014f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80015c8 <BME280_getPressure+0x1ac>
 80014fa:	e04e      	b.n	800159a <BME280_getPressure+0x17e>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	131b      	asrs	r3, r3, #12
 8001500:	461a      	mov	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4413      	add	r3, r2
 8001506:	4a31      	ldr	r2, [pc, #196]	; (80015cc <BME280_getPressure+0x1b0>)
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001510:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8001514:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db06      	blt.n	800152a <BME280_getPressure+0x10e>
        press = (press << 1) / var1;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005a      	lsls	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e005      	b.n	8001536 <BME280_getPressure+0x11a>
    } else {
        press = (press / var1) * 2;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <BME280_getPressure+0x1b4>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4619      	mov	r1, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	08d2      	lsrs	r2, r2, #3
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	131b      	asrs	r3, r3, #12
 8001552:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <BME280_getPressure+0x1b8>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	135b      	asrs	r3, r3, #13
 8001566:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <BME280_getPressure+0x1bc>)
 8001570:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001574:	4413      	add	r3, r2
 8001576:	111b      	asrs	r3, r3, #4
 8001578:	461a      	mov	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eddf 6a12 	vldr	s13, [pc, #72]	; 80015dc <BME280_getPressure+0x1c0>
 8001596:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 800159a:	eef0 7a47 	vmov.f32	s15, s14
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002b8 	.word	0x200002b8
 80015ac:	20000278 	.word	0x20000278
 80015b0:	20000264 	.word	0x20000264
 80015b4:	20000262 	.word	0x20000262
 80015b8:	20000260 	.word	0x20000260
 80015bc:	2000025e 	.word	0x2000025e
 80015c0:	2000025c 	.word	0x2000025c
 80015c4:	2000025a 	.word	0x2000025a
 80015c8:	00000000 	.word	0x00000000
 80015cc:	fffff3cb 	.word	0xfffff3cb
 80015d0:	2000026a 	.word	0x2000026a
 80015d4:	20000268 	.word	0x20000268
 80015d8:	20000266 	.word	0x20000266
 80015dc:	42c80000 	.word	0x42c80000

080015e0 <BME280_Init>:

void BME280_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80015e6:	23f2      	movs	r3, #242	; 0xf2
 80015e8:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80015ea:	2305      	movs	r3, #5
 80015ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 80015ee:	1d3a      	adds	r2, r7, #4
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	21ec      	movs	r1, #236	; 0xec
 80015fa:	4888      	ldr	r0, [pc, #544]	; (800181c <BME280_Init+0x23c>)
 80015fc:	f004 fe8e 	bl	800631c <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 8001600:	23f4      	movs	r3, #244	; 0xf4
 8001602:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 8001604:	23b7      	movs	r3, #183	; 0xb7
 8001606:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	21ec      	movs	r1, #236	; 0xec
 8001614:	4881      	ldr	r0, [pc, #516]	; (800181c <BME280_Init+0x23c>)
 8001616:	f004 fe81 	bl	800631c <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 800161a:	23f5      	movs	r3, #245	; 0xf5
 800161c:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby HAL_MAX_DELAYms, Filter off
 800161e:	23a0      	movs	r3, #160	; 0xa0
 8001620:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001622:	1d3a      	adds	r2, r7, #4
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2302      	movs	r3, #2
 800162c:	21ec      	movs	r1, #236	; 0xec
 800162e:	487b      	ldr	r0, [pc, #492]	; (800181c <BME280_Init+0x23c>)
 8001630:	f004 fe74 	bl	800631c <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 8001634:	2388      	movs	r3, #136	; 0x88
 8001636:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001638:	1d3a      	adds	r2, r7, #4
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	21ec      	movs	r1, #236	; 0xec
 8001644:	4875      	ldr	r0, [pc, #468]	; (800181c <BME280_Init+0x23c>)
 8001646:	f004 fe69 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, HAL_MAX_DELAY);
 800164a:	1d3a      	adds	r2, r7, #4
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2306      	movs	r3, #6
 8001654:	21ec      	movs	r1, #236	; 0xec
 8001656:	4871      	ldr	r0, [pc, #452]	; (800181c <BME280_Init+0x23c>)
 8001658:	f004 ff5e 	bl	8006518 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800165c:	797b      	ldrb	r3, [r7, #5]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	793b      	ldrb	r3, [r7, #4]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <BME280_Init+0x240>)
 800166e:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b21a      	sxth	r2, r3
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b69      	ldr	r3, [pc, #420]	; (8001824 <BME280_Init+0x244>)
 8001680:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8001682:	7a7b      	ldrb	r3, [r7, #9]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <BME280_Init+0x248>)
 8001692:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8001694:	238e      	movs	r3, #142	; 0x8e
 8001696:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001698:	1d3a      	adds	r2, r7, #4
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	21ec      	movs	r1, #236	; 0xec
 80016a4:	485d      	ldr	r0, [pc, #372]	; (800181c <BME280_Init+0x23c>)
 80016a6:	f004 fe39 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, HAL_MAX_DELAY);
 80016aa:	1d3a      	adds	r2, r7, #4
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2312      	movs	r3, #18
 80016b4:	21ec      	movs	r1, #236	; 0xec
 80016b6:	4859      	ldr	r0, [pc, #356]	; (800181c <BME280_Init+0x23c>)
 80016b8:	f004 ff2e 	bl	8006518 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	793b      	ldrb	r3, [r7, #4]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <BME280_Init+0x24c>)
 80016ce:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <BME280_Init+0x250>)
 80016e0:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <BME280_Init+0x254>)
 80016f2:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7abb      	ldrb	r3, [r7, #10]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <BME280_Init+0x258>)
 8001704:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 8001706:	7b7b      	ldrb	r3, [r7, #13]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <BME280_Init+0x25c>)
 8001716:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <BME280_Init+0x260>)
 8001728:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 800172a:	7c7b      	ldrb	r3, [r7, #17]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <BME280_Init+0x264>)
 800173a:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7cbb      	ldrb	r3, [r7, #18]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <BME280_Init+0x268>)
 800174c:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800174e:	7d7b      	ldrb	r3, [r7, #21]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b3b      	ldr	r3, [pc, #236]	; (800184c <BME280_Init+0x26c>)
 800175e:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 8001760:	23a1      	movs	r3, #161	; 0xa1
 8001762:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001764:	1d3a      	adds	r2, r7, #4
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	21ec      	movs	r1, #236	; 0xec
 8001770:	482a      	ldr	r0, [pc, #168]	; (800181c <BME280_Init+0x23c>)
 8001772:	f004 fdd3 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, HAL_MAX_DELAY);
 8001776:	1d3a      	adds	r2, r7, #4
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	21ec      	movs	r1, #236	; 0xec
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <BME280_Init+0x23c>)
 8001784:	f004 fec8 	bl	8006518 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8001788:	23e1      	movs	r3, #225	; 0xe1
 800178a:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, HAL_MAX_DELAY);
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	21ec      	movs	r1, #236	; 0xec
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <BME280_Init+0x23c>)
 800179c:	f004 fdbe 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, HAL_MAX_DELAY);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2307      	movs	r3, #7
 80017ac:	21ec      	movs	r1, #236	; 0xec
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <BME280_Init+0x23c>)
 80017b0:	f004 feb2 	bl	8006518 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <BME280_Init+0x270>)
 80017ba:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	797b      	ldrb	r3, [r7, #5]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <BME280_Init+0x274>)
 80017cc:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <BME280_Init+0x278>)
 80017d4:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80017d6:	7a3b      	ldrb	r3, [r7, #8]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <BME280_Init+0x27c>)
 80017ec:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80017ee:	7abb      	ldrb	r3, [r7, #10]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7a7b      	ldrb	r3, [r7, #9]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <BME280_Init+0x280>)
 8001808:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 800180a:	7afb      	ldrb	r3, [r7, #11]
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <BME280_Init+0x284>)
 8001810:	801a      	strh	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200002b8 	.word	0x200002b8
 8001820:	20000254 	.word	0x20000254
 8001824:	20000256 	.word	0x20000256
 8001828:	20000258 	.word	0x20000258
 800182c:	2000025a 	.word	0x2000025a
 8001830:	2000025c 	.word	0x2000025c
 8001834:	2000025e 	.word	0x2000025e
 8001838:	20000260 	.word	0x20000260
 800183c:	20000262 	.word	0x20000262
 8001840:	20000264 	.word	0x20000264
 8001844:	20000266 	.word	0x20000266
 8001848:	20000268 	.word	0x20000268
 800184c:	2000026a 	.word	0x2000026a
 8001850:	2000026c 	.word	0x2000026c
 8001854:	20000270 	.word	0x20000270
 8001858:	2000026e 	.word	0x2000026e
 800185c:	20000272 	.word	0x20000272
 8001860:	20000274 	.word	0x20000274
 8001864:	20000276 	.word	0x20000276

08001868 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <decToBcd+0x40>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	b2d8      	uxtb	r0, r3
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <decToBcd+0x40>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	08d9      	lsrs	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4403      	add	r3, r0
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	cccccccd 	.word	0xcccccccd

080018ac <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b2db      	uxtb	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <DS3231_Update>:

void DS3231_Update(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 80018ea:	1dfa      	adds	r2, r7, #7
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	21d0      	movs	r1, #208	; 0xd0
 80018f6:	4828      	ldr	r0, [pc, #160]	; (8001998 <DS3231_Update+0xb8>)
 80018f8:	f004 fd10 	bl	800631c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, HAL_MAX_DELAY);
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2313      	movs	r3, #19
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <DS3231_Update+0xbc>)
 8001906:	21d0      	movs	r1, #208	; 0xd0
 8001908:	4823      	ldr	r0, [pc, #140]	; (8001998 <DS3231_Update+0xb8>)
 800190a:	f004 fe05 	bl	8006518 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <DS3231_Update+0xbc>)
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <DS3231_Update+0xc0>)
 8001914:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <DS3231_Update+0xbc>)
 8001918:	785a      	ldrb	r2, [r3, #1]
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <DS3231_Update+0xc0>)
 800191c:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <DS3231_Update+0xbc>)
 8001920:	789a      	ldrb	r2, [r3, #2]
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <DS3231_Update+0xc0>)
 8001924:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <DS3231_Update+0xbc>)
 8001928:	78da      	ldrb	r2, [r3, #3]
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <DS3231_Update+0xc0>)
 800192c:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <DS3231_Update+0xbc>)
 8001930:	791a      	ldrb	r2, [r3, #4]
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <DS3231_Update+0xc0>)
 8001934:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <DS3231_Update+0xbc>)
 8001938:	795a      	ldrb	r2, [r3, #5]
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <DS3231_Update+0xc0>)
 800193c:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <DS3231_Update+0xbc>)
 8001940:	799a      	ldrb	r2, [r3, #6]
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <DS3231_Update+0xc0>)
 8001944:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <DS3231_Update+0xbc>)
 8001948:	79da      	ldrb	r2, [r3, #7]
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <DS3231_Update+0xc0>)
 800194c:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <DS3231_Update+0xbc>)
 8001950:	7a1a      	ldrb	r2, [r3, #8]
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <DS3231_Update+0xc0>)
 8001954:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <DS3231_Update+0xbc>)
 8001958:	7a5a      	ldrb	r2, [r3, #9]
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <DS3231_Update+0xc0>)
 800195c:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <DS3231_Update+0xbc>)
 8001960:	7a9a      	ldrb	r2, [r3, #10]
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <DS3231_Update+0xc0>)
 8001964:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <DS3231_Update+0xbc>)
 8001968:	7ada      	ldrb	r2, [r3, #11]
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <DS3231_Update+0xc0>)
 800196c:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <DS3231_Update+0xbc>)
 8001970:	7b1a      	ldrb	r2, [r3, #12]
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <DS3231_Update+0xc0>)
 8001974:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <DS3231_Update+0xbc>)
 8001978:	7b5a      	ldrb	r2, [r3, #13]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <DS3231_Update+0xc0>)
 800197c:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <DS3231_Update+0xbc>)
 8001980:	7b9a      	ldrb	r2, [r3, #14]
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <DS3231_Update+0xc0>)
 8001984:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <DS3231_Update+0xbc>)
 8001988:	7bda      	ldrb	r2, [r3, #15]
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <DS3231_Update+0xc0>)
 800198c:	741a      	strb	r2, [r3, #16]
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200002b8 	.word	0x200002b8
 800199c:	2000027c 	.word	0x2000027c
 80019a0:	20000290 	.word	0x20000290

080019a4 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019a8:	f7ff ff9a 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <DS3231_getSec+0x18>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff7b 	bl	80018ac <bcdToDec>
 80019b6:	4603      	mov	r3, r0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000027c 	.word	0x2000027c

080019c0 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019c4:	f7ff ff8c 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <DS3231_getMin+0x18>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff6d 	bl	80018ac <bcdToDec>
 80019d2:	4603      	mov	r3, r0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000027c 	.word	0x2000027c

080019dc <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019e0:	f7ff ff7e 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <DS3231_getHrs+0x18>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5f 	bl	80018ac <bcdToDec>
 80019ee:	4603      	mov	r3, r0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000027c 	.word	0x2000027c

080019f8 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	DS3231_Update();
 80019fc:	f7ff ff70 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <DS3231_getDay+0x18>)
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff51 	bl	80018ac <bcdToDec>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000027c 	.word	0x2000027c

08001a14 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	DS3231_Update();
 8001a18:	f7ff ff62 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <DS3231_getDate+0x18>)
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff43 	bl	80018ac <bcdToDec>
 8001a26:	4603      	mov	r3, r0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000027c 	.word	0x2000027c

08001a30 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	DS3231_Update();
 8001a34:	f7ff ff54 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <DS3231_getMonth+0x18>)
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff35 	bl	80018ac <bcdToDec>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000027c 	.word	0x2000027c

08001a4c <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8001a50:	f7ff ff46 	bl	80018e0 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <DS3231_getYear+0x18>)
 8001a56:	799b      	ldrb	r3, [r3, #6]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff27 	bl	80018ac <bcdToDec>
 8001a5e:	4603      	mov	r3, r0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000027c 	.word	0x2000027c

08001a68 <DS3231_setSec>:
    t *= 0.25;
    t += tempMSB;
    return t;
}

void DS3231_setSec(uint8_t value) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001a72:	f7ff ff35 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fef5 	bl	8001868 <decToBcd>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <DS3231_setSec+0x38>)
 8001a84:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2311      	movs	r3, #17
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <DS3231_setSec+0x38>)
 8001a90:	21d0      	movs	r1, #208	; 0xd0
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <DS3231_setSec+0x3c>)
 8001a94:	f004 fc42 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000290 	.word	0x20000290
 8001aa4:	200002b8 	.word	0x200002b8

08001aa8 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001ab2:	f7ff ff15 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fed5 	bl	8001868 <decToBcd>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <DS3231_setMin+0x38>)
 8001ac4:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2311      	movs	r3, #17
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <DS3231_setMin+0x38>)
 8001ad0:	21d0      	movs	r1, #208	; 0xd0
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <DS3231_setMin+0x3c>)
 8001ad4:	f004 fc22 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000290 	.word	0x20000290
 8001ae4:	200002b8 	.word	0x200002b8

08001ae8 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001af2:	f7ff fef5 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff feb5 	bl	8001868 <decToBcd>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <DS3231_setHrs+0x38>)
 8001b04:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2311      	movs	r3, #17
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <DS3231_setHrs+0x38>)
 8001b10:	21d0      	movs	r1, #208	; 0xd0
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <DS3231_setHrs+0x3c>)
 8001b14:	f004 fc02 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000290 	.word	0x20000290
 8001b24:	200002b8 	.word	0x200002b8

08001b28 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001b32:	f7ff fed5 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe95 	bl	8001868 <decToBcd>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <DS3231_setDay+0x38>)
 8001b44:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2311      	movs	r3, #17
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <DS3231_setDay+0x38>)
 8001b50:	21d0      	movs	r1, #208	; 0xd0
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <DS3231_setDay+0x3c>)
 8001b54:	f004 fbe2 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000290 	.word	0x20000290
 8001b64:	200002b8 	.word	0x200002b8

08001b68 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001b72:	f7ff feb5 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe75 	bl	8001868 <decToBcd>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <DS3231_setDate+0x38>)
 8001b84:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2311      	movs	r3, #17
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <DS3231_setDate+0x38>)
 8001b90:	21d0      	movs	r1, #208	; 0xd0
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <DS3231_setDate+0x3c>)
 8001b94:	f004 fbc2 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000290 	.word	0x20000290
 8001ba4:	200002b8 	.word	0x200002b8

08001ba8 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001bb2:	f7ff fe95 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fe55 	bl	8001868 <decToBcd>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <DS3231_setMonth+0x38>)
 8001bc4:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2311      	movs	r3, #17
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <DS3231_setMonth+0x38>)
 8001bd0:	21d0      	movs	r1, #208	; 0xd0
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <DS3231_setMonth+0x3c>)
 8001bd4:	f004 fba2 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000290 	.word	0x20000290
 8001be4:	200002b8 	.word	0x200002b8

08001be8 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001bf2:	f7ff fe75 	bl	80018e0 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe35 	bl	8001868 <decToBcd>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <DS3231_setYear+0x38>)
 8001c04:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, HAL_MAX_DELAY);
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2311      	movs	r3, #17
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <DS3231_setYear+0x38>)
 8001c10:	21d0      	movs	r1, #208	; 0xd0
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <DS3231_setYear+0x3c>)
 8001c14:	f004 fb82 	bl	800631c <HAL_I2C_Master_Transmit>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000290 	.word	0x20000290
 8001c24:	200002b8 	.word	0x200002b8

08001c28 <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4604      	mov	r4, r0
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	80fb      	strh	r3, [r7, #6]
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80bb      	strh	r3, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	88bb      	ldrh	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	8b39      	ldrh	r1, [r7, #24]
 8001c4e:	883a      	ldrh	r2, [r7, #0]
 8001c50:	1a8a      	subs	r2, r1, r2
 8001c52:	fb03 f202 	mul.w	r2, r3, r2
 8001c56:	8879      	ldrh	r1, [r7, #2]
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	1acb      	subs	r3, r1, r3
 8001c5c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c60:	883b      	ldrh	r3, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc5d 	bl	8000524 <__aeabi_i2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c72:	eeb0 0a47 	vmov.f32	s0, s14
 8001c76:	eef0 0a67 	vmov.f32	s1, s15
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <byteL>:

uint8_t byteL(uint16_t val) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	b2db      	uxtb	r3, r3
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <byteH>:

uint8_t byteH(uint16_t val) {
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	b29b      	uxth	r3, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <I2C_Scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b09a      	sub	sp, #104	; 0x68
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	char info[] = "SCANNING I2C BUS... \r\n";
 8001cec:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <I2C_Scan+0xbc>)
 8001cee:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cfc:	6020      	str	r0, [r4, #0]
 8001cfe:	3404      	adds	r4, #4
 8001d00:	8021      	strh	r1, [r4, #0]
 8001d02:	3402      	adds	r4, #2
 8001d04:	0c0b      	lsrs	r3, r1, #16
 8001d06:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 1000);
 8001d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fa5f 	bl	80001d0 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	4821      	ldr	r0, [pc, #132]	; (8001da4 <I2C_Scan+0xc0>)
 8001d20:	f007 f9eb 	bl	80090fa <HAL_UART_Transmit>

	for(uint16_t i = 0; i < 128; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001d2a:	e02f      	b.n	8001d8c <I2C_Scan+0xa8>
		if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK) {
 8001d2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	b299      	uxth	r1, r3
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	2201      	movs	r2, #1
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f005 f933 	bl	8006fa4 <HAL_I2C_IsDeviceReady>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11e      	bne.n	8001d82 <I2C_Scan+0x9e>
			char msg[64] = {0,};
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	223c      	movs	r2, #60	; 0x3c
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 fe63 	bl	8009a1c <memset>
			snprintf(msg, 64, "I2C DEVICE: 0x%02X \r\n", i);
 8001d56:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d5a:	f107 000c 	add.w	r0, r7, #12
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <I2C_Scan+0xc4>)
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	f008 fce3 	bl	800a72c <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fa30 	bl	80001d0 <strlen>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f107 010c 	add.w	r1, r7, #12
 8001d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <I2C_Scan+0xc0>)
 8001d7e:	f007 f9bc 	bl	80090fa <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++) {
 8001d82:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d86:	3301      	adds	r3, #1
 8001d88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001d8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d90:	2b7f      	cmp	r3, #127	; 0x7f
 8001d92:	d9cb      	bls.n	8001d2c <I2C_Scan+0x48>
		}
	}
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3768      	adds	r7, #104	; 0x68
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	0800f2d8 	.word	0x0800f2d8
 8001da4:	20000414 	.word	0x20000414
 8001da8:	0800f2c0 	.word	0x0800f2c0

08001dac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b0af      	sub	sp, #188	; 0xbc
 8001db0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001db2:	f003 fdb5 	bl	8005920 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001db6:	f001 ff39 	bl	8003c2c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 8001dba:	2064      	movs	r0, #100	; 0x64
 8001dbc:	f003 fe22 	bl	8005a04 <HAL_Delay>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dc4:	4baf      	ldr	r3, [pc, #700]	; (8002084 <main+0x2d8>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4aae      	ldr	r2, [pc, #696]	; (8002084 <main+0x2d8>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4bac      	ldr	r3, [pc, #688]	; (8002084 <main+0x2d8>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	HAL_Delay(100);
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f003 fe11 	bl	8005a04 <HAL_Delay>
	//  __HAL_RCC_I2C1_RELEASE_RESET();
	//  HAL_Delay(100);
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001de2:	f002 f8bb 	bl	8003f5c <MX_GPIO_Init>
	MX_FSMC_Init();
 8001de6:	f002 f993 	bl	8004110 <MX_FSMC_Init>
	MX_USART1_UART_Init();
 8001dea:	f002 f88d 	bl	8003f08 <MX_USART1_UART_Init>
	MX_SPI3_Init();
 8001dee:	f002 f855 	bl	8003e9c <MX_SPI3_Init>
	MX_SPI2_Init();
 8001df2:	f002 f81d 	bl	8003e30 <MX_SPI2_Init>
	MX_DAC_Init();
 8001df6:	f001 ff83 	bl	8003d00 <MX_DAC_Init>
	MX_SPI1_Init();
 8001dfa:	f001 ffe3 	bl	8003dc4 <MX_SPI1_Init>
	MX_I2C1_Init();
 8001dfe:	f001 ffb3 	bl	8003d68 <MX_I2C1_Init>
	//	__HAL_RCC_I2C1_FORCE_RESET();
	//	HAL_Delay(100);
	//	__HAL_RCC_I2C1_RELEASE_RESET();
	//	HAL_Delay(100);

	uint8_t uartTransmit[] = "DEBUG UART OK\r\n";
 8001e02:	4ba1      	ldr	r3, [pc, #644]	; (8002088 <main+0x2dc>)
 8001e04:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8001e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001e0e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	2210      	movs	r2, #16
 8001e16:	489d      	ldr	r0, [pc, #628]	; (800208c <main+0x2e0>)
 8001e18:	f007 f96f 	bl	80090fa <HAL_UART_Transmit>

	I2C_Scan(&hi2c1);
 8001e1c:	489c      	ldr	r0, [pc, #624]	; (8002090 <main+0x2e4>)
 8001e1e:	f7ff ff61 	bl	8001ce4 <I2C_Scan>
	BME280_Init();
 8001e22:	f7ff fbdd 	bl	80015e0 <BME280_Init>
	W25Q_Init();
 8001e26:	f003 fa13 	bl	8005250 <W25Q_Init>

	LCD_Init();
 8001e2a:	f002 fdf4 	bl	8004a16 <LCD_Init>
	XPT2046_Init();
 8001e2e:	f003 fc57 	bl	80056e0 <XPT2046_Init>
	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 8001e32:	23ff      	movs	r3, #255	; 0xff
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e3a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2000      	movs	r0, #0
 8001e42:	f002 fa93 	bl	800436c <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8001e4e:	f240 321e 	movw	r2, #798	; 0x31e
 8001e52:	2101      	movs	r1, #1
 8001e54:	2001      	movs	r0, #1
 8001e56:	f002 fa89 	bl	800436c <LCD_Rect_Fill>

	//	uint8_t flashOUT[10] = {0};
	//	W25Q_Load_Page(15, flashOUT, 10);
	//	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);

	for (uint16_t i = 0; i < 263; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001e60:	e027      	b.n	8001eb2 <main+0x106>
 8001e62:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001e66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f90d 	bl	8001090 <AT24XX_Read>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461c      	mov	r4, r3
 8001e7a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f901 	bl	8001090 <AT24XX_Read>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff10 	bl	8001cb8 <byteS>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001ea0:	b211      	sxth	r1, r2
 8001ea2:	4a7c      	ldr	r2, [pc, #496]	; (8002094 <main+0x2e8>)
 8001ea4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ea8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001eac:	3301      	adds	r3, #1
 8001eae:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001eb2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001eb6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001eba:	d9d2      	bls.n	8001e62 <main+0xb6>
	for (uint16_t i = 0; i < 263; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001ec2:	e027      	b.n	8001f14 <main+0x168>
 8001ec4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001ec8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f8dc 	bl	8001090 <AT24XX_Read>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461c      	mov	r4, r3
 8001edc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8d0 	bl	8001090 <AT24XX_Read>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fedf 	bl	8001cb8 <byteS>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001f02:	b211      	sxth	r1, r2
 8001f04:	4a64      	ldr	r2, [pc, #400]	; (8002098 <main+0x2ec>)
 8001f06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f0a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001f14:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001f18:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001f1c:	d9d2      	bls.n	8001ec4 <main+0x118>
	for (uint16_t i = 0; i < 263; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8001f24:	e027      	b.n	8001f76 <main+0x1ca>
 8001f26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001f2a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f8ab 	bl	8001090 <AT24XX_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff f89f 	bl	8001090 <AT24XX_Read>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4619      	mov	r1, r3
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff feae 	bl	8001cb8 <byteS>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001f64:	b211      	sxth	r1, r2
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <main+0x2f0>)
 8001f68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001f6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001f70:	3301      	adds	r3, #1
 8001f72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8001f76:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001f7a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001f7e:	d9d2      	bls.n	8001f26 <main+0x17a>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001f80:	2120      	movs	r1, #32
 8001f82:	4847      	ldr	r0, [pc, #284]	; (80020a0 <main+0x2f4>)
 8001f84:	f004 f854 	bl	8006030 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d12c      	bne.n	8001fe8 <main+0x23c>

			uint16_t touchX = getX();
 8001f8e:	f003 fc69 	bl	8005864 <getX>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			uint16_t touchY = getY();
 8001f98:	f003 fc7e 	bl	8005898 <getY>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			if (touchX && touchY && touchX != 0x0DB)
 8001fa2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <main+0x224>
 8001faa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <main+0x224>
 8001fb2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001fb6:	2bdb      	cmp	r3, #219	; 0xdb
 8001fb8:	d00a      	beq.n	8001fd0 <main+0x224>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001fba:	f8b7 107e 	ldrh.w	r1, [r7, #126]	; 0x7e
 8001fbe:	f8b7 0080 	ldrh.w	r0, [r7, #128]	; 0x80
 8001fc2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f002 f9ce 	bl	800436c <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	4833      	ldr	r0, [pc, #204]	; (80020a4 <main+0x2f8>)
 8001fd6:	f004 f843 	bl	8006060 <HAL_GPIO_WritePin>
			touchX = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			touchY = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001fe6:	e004      	b.n	8001ff2 <main+0x246>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	482d      	ldr	r0, [pc, #180]	; (80020a4 <main+0x2f8>)
 8001fee:	f004 f837 	bl	8006060 <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001ff2:	f7ff fcd7 	bl	80019a4 <DS3231_getSec>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <main+0x2fc>)
 8001ffc:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <main+0x300>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <main+0x2fc>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d0ba      	beq.n	8001f80 <main+0x1d4>

			rtcMin = DS3231_getMin();
 800200a:	f7ff fcd9 	bl	80019c0 <DS3231_getMin>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <main+0x304>)
 8002014:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <main+0x308>)
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	2301      	movs	r3, #1
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2300      	movs	r3, #0
 8002020:	2208      	movs	r2, #8
 8002022:	2123      	movs	r1, #35	; 0x23
 8002024:	20aa      	movs	r0, #170	; 0xaa
 8002026:	f002 faa6 	bl	8004576 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <main+0x308>)
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	2301      	movs	r3, #1
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	2208      	movs	r2, #8
 8002036:	214b      	movs	r1, #75	; 0x4b
 8002038:	20aa      	movs	r0, #170	; 0xaa
 800203a:	f002 fa9c 	bl	8004576 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <main+0x2fc>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d035      	beq.n	80020b8 <main+0x30c>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <main+0x308>)
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2301      	movs	r3, #1
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2301      	movs	r3, #1
 8002056:	2207      	movs	r2, #7
 8002058:	2123      	movs	r1, #35	; 0x23
 800205a:	20aa      	movs	r0, #170	; 0xaa
 800205c:	f002 fa8b 	bl	8004576 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <main+0x308>)
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2301      	movs	r3, #1
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2301      	movs	r3, #1
 800206a:	2207      	movs	r2, #7
 800206c:	214b      	movs	r1, #75	; 0x4b
 800206e:	20aa      	movs	r0, #170	; 0xaa
 8002070:	f002 fa81 	bl	8004576 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <main+0x2f4>)
 800207c:	f003 fff0 	bl	8006060 <HAL_GPIO_WritePin>
 8002080:	e034      	b.n	80020ec <main+0x340>
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	0800f34c 	.word	0x0800f34c
 800208c:	20000414 	.word	0x20000414
 8002090:	200002b8 	.word	0x200002b8
 8002094:	200004fc 	.word	0x200004fc
 8002098:	20000634 	.word	0x20000634
 800209c:	2000076c 	.word	0x2000076c
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	200004a9 	.word	0x200004a9
 80020ac:	20000000 	.word	0x20000000
 80020b0:	200004aa 	.word	0x200004aa
 80020b4:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 80020b8:	2300      	movs	r3, #0
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	2301      	movs	r3, #1
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2301      	movs	r3, #1
 80020c2:	2207      	movs	r2, #7
 80020c4:	2123      	movs	r1, #35	; 0x23
 80020c6:	20aa      	movs	r0, #170	; 0xaa
 80020c8:	f002 fa55 	bl	8004576 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2301      	movs	r3, #1
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2301      	movs	r3, #1
 80020d6:	2207      	movs	r2, #7
 80020d8:	214b      	movs	r1, #75	; 0x4b
 80020da:	20aa      	movs	r0, #170	; 0xaa
 80020dc:	f002 fa4b 	bl	8004576 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e6:	48bb      	ldr	r0, [pc, #748]	; (80023d4 <main+0x628>)
 80020e8:	f003 ffba 	bl	8006060 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 80020ec:	4bba      	ldr	r3, [pc, #744]	; (80023d8 <main+0x62c>)
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	4bba      	ldr	r3, [pc, #744]	; (80023dc <main+0x630>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f001 80a2 	beq.w	800323e <main+0x1492>

				rtcHrs = DS3231_getHrs();
 80020fa:	f7ff fc6f 	bl	80019dc <DS3231_getHrs>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	4bb7      	ldr	r3, [pc, #732]	; (80023e0 <main+0x634>)
 8002104:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8002106:	4bb4      	ldr	r3, [pc, #720]	; (80023d8 <main+0x62c>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002110:	49b4      	ldr	r1, [pc, #720]	; (80023e4 <main+0x638>)
 8002112:	4618      	mov	r0, r3
 8002114:	f008 fb3e 	bl	800a794 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8002118:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2301      	movs	r3, #1
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4bb0      	ldr	r3, [pc, #704]	; (80023e8 <main+0x63c>)
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	20b2      	movs	r0, #178	; 0xb2
 800212a:	f002 fbfa 	bl	8004922 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 800212e:	4bab      	ldr	r3, [pc, #684]	; (80023dc <main+0x630>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002138:	49aa      	ldr	r1, [pc, #680]	; (80023e4 <main+0x638>)
 800213a:	4618      	mov	r0, r3
 800213c:	f008 fb2a 	bl	800a794 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8002140:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002144:	4ba9      	ldr	r3, [pc, #676]	; (80023ec <main+0x640>)
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	2301      	movs	r3, #1
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4ba6      	ldr	r3, [pc, #664]	; (80023e8 <main+0x63c>)
 800214e:	2164      	movs	r1, #100	; 0x64
 8002150:	20b2      	movs	r0, #178	; 0xb2
 8002152:	f002 fbe6 	bl	8004922 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8002156:	4ba6      	ldr	r3, [pc, #664]	; (80023f0 <main+0x644>)
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	4ba1      	ldr	r3, [pc, #644]	; (80023e0 <main+0x634>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	f000 80fb 	beq.w	800235a <main+0x5ae>

					rtcDay = DS3231_getDay();
 8002164:	f7ff fc48 	bl	80019f8 <DS3231_getDay>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4ba1      	ldr	r3, [pc, #644]	; (80023f4 <main+0x648>)
 800216e:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8002170:	f7ff fc50 	bl	8001a14 <DS3231_getDate>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4b9f      	ldr	r3, [pc, #636]	; (80023f8 <main+0x64c>)
 800217a:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 800217c:	f7ff fc58 	bl	8001a30 <DS3231_getMonth>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b9d      	ldr	r3, [pc, #628]	; (80023fc <main+0x650>)
 8002186:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8002188:	f7ff fc60 	bl	8001a4c <DS3231_getYear>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b9b      	ldr	r3, [pc, #620]	; (8002400 <main+0x654>)
 8002192:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8002194:	4b96      	ldr	r3, [pc, #600]	; (80023f0 <main+0x644>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800219e:	4991      	ldr	r1, [pc, #580]	; (80023e4 <main+0x638>)
 80021a0:	4618      	mov	r0, r3
 80021a2:	f008 faf7 	bl	800a794 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 80021a6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021aa:	2300      	movs	r3, #0
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2301      	movs	r3, #1
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <main+0x63c>)
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	2000      	movs	r0, #0
 80021b8:	f002 fbb3 	bl	8004922 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 80021bc:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <main+0x634>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021c6:	4987      	ldr	r1, [pc, #540]	; (80023e4 <main+0x638>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f008 fae3 	bl	800a794 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 80021ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021d2:	4b86      	ldr	r3, [pc, #536]	; (80023ec <main+0x640>)
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2301      	movs	r3, #1
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <main+0x63c>)
 80021dc:	2164      	movs	r1, #100	; 0x64
 80021de:	2000      	movs	r0, #0
 80021e0:	f002 fb9f 	bl	8004922 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 80021e4:	4b87      	ldr	r3, [pc, #540]	; (8002404 <main+0x658>)
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b82      	ldr	r3, [pc, #520]	; (80023f4 <main+0x648>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f000 80a8 	beq.w	8002342 <main+0x596>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 80021f2:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <main+0x648>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	1d5a      	adds	r2, r3, #5
 80021f8:	4b83      	ldr	r3, [pc, #524]	; (8002408 <main+0x65c>)
 80021fa:	fb83 1302 	smull	r1, r3, r3, r2
 80021fe:	4413      	add	r3, r2
 8002200:	1099      	asrs	r1, r3, #2
 8002202:	17d3      	asrs	r3, r2, #31
 8002204:	1ac9      	subs	r1, r1, r3
 8002206:	460b      	mov	r3, r1
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	1ad1      	subs	r1, r2, r3
 800220e:	4b7f      	ldr	r3, [pc, #508]	; (800240c <main+0x660>)
 8002210:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002214:	2300      	movs	r3, #0
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	2301      	movs	r3, #1
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <main+0x664>)
 800221e:	218c      	movs	r1, #140	; 0x8c
 8002220:	2005      	movs	r0, #5
 8002222:	f002 fb7e 	bl	8004922 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <main+0x648>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	1d9a      	adds	r2, r3, #6
 800222c:	4b76      	ldr	r3, [pc, #472]	; (8002408 <main+0x65c>)
 800222e:	fb83 1302 	smull	r1, r3, r3, r2
 8002232:	4413      	add	r3, r2
 8002234:	1099      	asrs	r1, r3, #2
 8002236:	17d3      	asrs	r3, r2, #31
 8002238:	1ac9      	subs	r1, r1, r3
 800223a:	460b      	mov	r3, r1
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a5b      	subs	r3, r3, r1
 8002240:	1ad1      	subs	r1, r2, r3
 8002242:	4b72      	ldr	r3, [pc, #456]	; (800240c <main+0x660>)
 8002244:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002248:	23ff      	movs	r3, #255	; 0xff
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2301      	movs	r3, #1
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <main+0x664>)
 8002252:	218c      	movs	r1, #140	; 0x8c
 8002254:	2005      	movs	r0, #5
 8002256:	f002 fb64 	bl	8004922 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800225a:	4b68      	ldr	r3, [pc, #416]	; (80023fc <main+0x650>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f103 010a 	add.w	r1, r3, #10
 8002262:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <main+0x668>)
 8002264:	fb83 2301 	smull	r2, r3, r3, r1
 8002268:	105a      	asrs	r2, r3, #1
 800226a:	17cb      	asrs	r3, r1, #31
 800226c:	1ad2      	subs	r2, r2, r3
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	1aca      	subs	r2, r1, r3
 8002278:	4b67      	ldr	r3, [pc, #412]	; (8002418 <main+0x66c>)
 800227a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800227e:	2300      	movs	r3, #0
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	2301      	movs	r3, #1
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <main+0x664>)
 8002288:	218c      	movs	r1, #140	; 0x8c
 800228a:	2096      	movs	r0, #150	; 0x96
 800228c:	f002 fb49 	bl	8004922 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8002290:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <main+0x650>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f103 010b 	add.w	r1, r3, #11
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <main+0x668>)
 800229a:	fb83 2301 	smull	r2, r3, r3, r1
 800229e:	105a      	asrs	r2, r3, #1
 80022a0:	17cb      	asrs	r3, r1, #31
 80022a2:	1ad2      	subs	r2, r2, r3
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	1aca      	subs	r2, r1, r3
 80022ae:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <main+0x66c>)
 80022b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	2301      	movs	r3, #1
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4b54      	ldr	r3, [pc, #336]	; (8002410 <main+0x664>)
 80022c0:	218c      	movs	r1, #140	; 0x8c
 80022c2:	2096      	movs	r0, #150	; 0x96
 80022c4:	f002 fb2d 	bl	8004922 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80022c8:	4b54      	ldr	r3, [pc, #336]	; (800241c <main+0x670>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <main+0x674>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <main+0x678>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	460b      	mov	r3, r1
 80022e0:	4951      	ldr	r1, [pc, #324]	; (8002428 <main+0x67c>)
 80022e2:	f008 fa57 	bl	800a794 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80022e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80022ea:	2300      	movs	r3, #0
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2301      	movs	r3, #1
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <main+0x664>)
 80022f4:	218c      	movs	r1, #140	; 0x8c
 80022f6:	20fa      	movs	r0, #250	; 0xfa
 80022f8:	f002 fb13 	bl	8004922 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 80022fc:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <main+0x64c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <main+0x650>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <main+0x654>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	460b      	mov	r3, r1
 8002314:	4944      	ldr	r1, [pc, #272]	; (8002428 <main+0x67c>)
 8002316:	f008 fa3d 	bl	800a794 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 800231a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800231e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2301      	movs	r3, #1
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <main+0x664>)
 800232a:	218c      	movs	r1, #140	; 0x8c
 800232c:	20fa      	movs	r0, #250	; 0xfa
 800232e:	f002 faf8 	bl	8004922 <LCD_Font>

						rtcDayLast = rtcDay;
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <main+0x648>)
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <main+0x658>)
 8002338:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <main+0x64c>)
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <main+0x670>)
 8002340:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8002342:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <main+0x650>)
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <main+0x674>)
 8002348:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <main+0x654>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	4b35      	ldr	r3, [pc, #212]	; (8002424 <main+0x678>)
 8002350:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <main+0x634>)
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <main+0x644>)
 8002358:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <main+0x630>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <main+0x62c>)
 8002360:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8002362:	f04f 30ff 	mov.w	r0, #4294967295
 8002366:	f7fe ff3f 	bl	80011e8 <BME280_getTemperature>
 800236a:	ee10 3a10 	vmov	r3, s0
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f8ea 	bl	8000548 <__aeabi_f2d>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	492c      	ldr	r1, [pc, #176]	; (800242c <main+0x680>)
 800237a:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	f7fe ffa9 	bl	80012d8 <BME280_getHumidity>
 8002386:	ee10 3a10 	vmov	r3, s0
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8dc 	bl	8000548 <__aeabi_f2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4926      	ldr	r1, [pc, #152]	; (8002430 <main+0x684>)
 8002396:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 800239a:	f7ff f83f 	bl	800141c <BME280_getPressure>
 800239e:	eef0 7a40 	vmov.f32	s15, s0
 80023a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <main+0x688>)
 80023ae:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <main+0x688>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80023b8:	f240 8741 	bls.w	800323e <main+0x1492>
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <main+0x688>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f240 424b 	movw	r2, #1099	; 0x44b
 80023c4:	4293      	cmp	r3, r2
 80023c6:	f200 873a 	bhi.w	800323e <main+0x1492>
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <main+0x680>)
 80023cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d0:	e032      	b.n	8002438 <main+0x68c>
 80023d2:	bf00      	nop
 80023d4:	40020800 	.word	0x40020800
 80023d8:	20000001 	.word	0x20000001
 80023dc:	200004aa 	.word	0x200004aa
 80023e0:	200004ab 	.word	0x200004ab
 80023e4:	0800f2f0 	.word	0x0800f2f0
 80023e8:	08020d3c 	.word	0x08020d3c
 80023ec:	00ffa500 	.word	0x00ffa500
 80023f0:	20000002 	.word	0x20000002
 80023f4:	200004ac 	.word	0x200004ac
 80023f8:	200004ad 	.word	0x200004ad
 80023fc:	200004ae 	.word	0x200004ae
 8002400:	200004af 	.word	0x200004af
 8002404:	200004b0 	.word	0x200004b0
 8002408:	92492493 	.word	0x92492493
 800240c:	20000008 	.word	0x20000008
 8002410:	08011b2c 	.word	0x08011b2c
 8002414:	2aaaaaab 	.word	0x2aaaaaab
 8002418:	20000024 	.word	0x20000024
 800241c:	200004b1 	.word	0x200004b1
 8002420:	200004b2 	.word	0x200004b2
 8002424:	200004b3 	.word	0x200004b3
 8002428:	0800f2f8 	.word	0x0800f2f8
 800242c:	200004b8 	.word	0x200004b8
 8002430:	200004c8 	.word	0x200004c8
 8002434:	200004f8 	.word	0x200004f8
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <main+0x8d0>)
 800243e:	f7fe fb4d 	bl	8000adc <__aeabi_dcmplt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 86fa 	beq.w	800323e <main+0x1492>
 800244a:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <main+0x8d4>)
 800244c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <main+0x8d8>)
 8002456:	f7fe fb5f 	bl	8000b18 <__aeabi_dcmpgt>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 86ee 	beq.w	800323e <main+0x1492>
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <main+0x8dc>)
 8002464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f7fe fb52 	bl	8000b18 <__aeabi_dcmpgt>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 86e1 	beq.w	800323e <main+0x1492>
 800247c:	4b82      	ldr	r3, [pc, #520]	; (8002688 <main+0x8dc>)
 800247e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	4b81      	ldr	r3, [pc, #516]	; (800268c <main+0x8e0>)
 8002488:	f7fe fb28 	bl	8000adc <__aeabi_dcmplt>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 86d5 	beq.w	800323e <main+0x1492>

					if (temperature != temperatureLast) {
 8002494:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <main+0x8d4>)
 8002496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800249a:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <main+0x8e4>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 812c 	bne.w	8002704 <main+0x958>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80024ac:	4b78      	ldr	r3, [pc, #480]	; (8002690 <main+0x8e4>)
 80024ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <main+0x8e8>)
 80024b8:	f7fe fb24 	bl	8000b04 <__aeabi_dcmpge>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <main+0x744>
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <main+0x8e4>)
 80024c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	f7fe fb04 	bl	8000adc <__aeabi_dcmplt>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01e      	beq.n	8002518 <main+0x76c>
 80024da:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <main+0x8e4>)
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <main+0x8ec>)
 80024e6:	f7fe fb17 	bl	8000b18 <__aeabi_dcmpgt>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <main+0x76c>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80024f0:	4b67      	ldr	r3, [pc, #412]	; (8002690 <main+0x8e4>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80024fa:	4968      	ldr	r1, [pc, #416]	; (800269c <main+0x8f0>)
 80024fc:	f008 f94a 	bl	800a794 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002500:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2301      	movs	r3, #1
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <main+0x8f4>)
 800250e:	21bb      	movs	r1, #187	; 0xbb
 8002510:	2001      	movs	r0, #1
 8002512:	f002 fa06 	bl	8004922 <LCD_Font>
 8002516:	e050      	b.n	80025ba <main+0x80e>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002518:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <main+0x8e4>)
 800251a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <main+0x8e8>)
 8002524:	f7fe fada 	bl	8000adc <__aeabi_dcmplt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01f      	beq.n	800256e <main+0x7c2>
 800252e:	4b58      	ldr	r3, [pc, #352]	; (8002690 <main+0x8e4>)
 8002530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	f7fe faec 	bl	8000b18 <__aeabi_dcmpgt>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d013      	beq.n	800256e <main+0x7c2>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002546:	4b52      	ldr	r3, [pc, #328]	; (8002690 <main+0x8e4>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002550:	4952      	ldr	r1, [pc, #328]	; (800269c <main+0x8f0>)
 8002552:	f008 f91f 	bl	800a794 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002556:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800255a:	2300      	movs	r3, #0
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2301      	movs	r3, #1
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4b4f      	ldr	r3, [pc, #316]	; (80026a0 <main+0x8f4>)
 8002564:	21bb      	movs	r1, #187	; 0xbb
 8002566:	201b      	movs	r0, #27
 8002568:	f002 f9db 	bl	8004922 <LCD_Font>
 800256c:	e025      	b.n	80025ba <main+0x80e>
						}
						else if (temperatureLast <= -10) {
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <main+0x8e4>)
 8002570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <main+0x8ec>)
 800257a:	f7fe fab9 	bl	8000af0 <__aeabi_dcmple>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01a      	beq.n	80025ba <main+0x80e>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <main+0x8e4>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fae3 	bl	8000b58 <__aeabi_d2iz>
 8002592:	4603      	mov	r3, r0
 8002594:	b25b      	sxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800259c:	4941      	ldr	r1, [pc, #260]	; (80026a4 <main+0x8f8>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f008 f8f8 	bl	800a794 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80025a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025a8:	2300      	movs	r3, #0
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2301      	movs	r3, #1
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <main+0x8f4>)
 80025b2:	21bb      	movs	r1, #187	; 0xbb
 80025b4:	2001      	movs	r0, #1
 80025b6:	f002 f9b4 	bl	8004922 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <main+0x8d4>)
 80025bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <main+0x8e8>)
 80025c6:	f7fe fa9d 	bl	8000b04 <__aeabi_dcmpge>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <main+0x852>
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <main+0x8d4>)
 80025d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	f7fe fa7d 	bl	8000adc <__aeabi_dcmplt>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01e      	beq.n	8002626 <main+0x87a>
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <main+0x8d4>)
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	4b29      	ldr	r3, [pc, #164]	; (8002698 <main+0x8ec>)
 80025f4:	f7fe fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <main+0x87a>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <main+0x8d4>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002608:	4924      	ldr	r1, [pc, #144]	; (800269c <main+0x8f0>)
 800260a:	f008 f8c3 	bl	800a794 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 800260e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <main+0x8fc>)
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2301      	movs	r3, #1
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <main+0x8f4>)
 800261c:	21bb      	movs	r1, #187	; 0xbb
 800261e:	2001      	movs	r0, #1
 8002620:	f002 f97f 	bl	8004922 <LCD_Font>
 8002624:	e068      	b.n	80026f8 <main+0x94c>
						}
						else if (temperature < 10 && temperature > 0) {
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <main+0x8d4>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <main+0x8e8>)
 8002632:	f7fe fa53 	bl	8000adc <__aeabi_dcmplt>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d037      	beq.n	80026ac <main+0x900>
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <main+0x8d4>)
 800263e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f7fe fa65 	bl	8000b18 <__aeabi_dcmpgt>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02b      	beq.n	80026ac <main+0x900>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <main+0x8d4>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800265e:	490f      	ldr	r1, [pc, #60]	; (800269c <main+0x8f0>)
 8002660:	f008 f898 	bl	800a794 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002664:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <main+0x8fc>)
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2301      	movs	r3, #1
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <main+0x8f4>)
 8002672:	21bb      	movs	r1, #187	; 0xbb
 8002674:	201b      	movs	r0, #27
 8002676:	f002 f954 	bl	8004922 <LCD_Font>
 800267a:	e03d      	b.n	80026f8 <main+0x94c>
 800267c:	40554000 	.word	0x40554000
 8002680:	200004b8 	.word	0x200004b8
 8002684:	c0440000 	.word	0xc0440000
 8002688:	200004c8 	.word	0x200004c8
 800268c:	40590000 	.word	0x40590000
 8002690:	200004c0 	.word	0x200004c0
 8002694:	40240000 	.word	0x40240000
 8002698:	c0240000 	.word	0xc0240000
 800269c:	0800f308 	.word	0x0800f308
 80026a0:	08011b2c 	.word	0x08011b2c
 80026a4:	0800f310 	.word	0x0800f310
 80026a8:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 80026ac:	4bb6      	ldr	r3, [pc, #728]	; (8002988 <main+0xbdc>)
 80026ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	4bb5      	ldr	r3, [pc, #724]	; (800298c <main+0xbe0>)
 80026b8:	f7fe fa1a 	bl	8000af0 <__aeabi_dcmple>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <main+0x94c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80026c2:	4bb1      	ldr	r3, [pc, #708]	; (8002988 <main+0xbdc>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe fa44 	bl	8000b58 <__aeabi_d2iz>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026da:	49ad      	ldr	r1, [pc, #692]	; (8002990 <main+0xbe4>)
 80026dc:	4618      	mov	r0, r3
 80026de:	f008 f859 	bl	800a794 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80026e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026e6:	4bab      	ldr	r3, [pc, #684]	; (8002994 <main+0xbe8>)
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2301      	movs	r3, #1
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4baa      	ldr	r3, [pc, #680]	; (8002998 <main+0xbec>)
 80026f0:	21bb      	movs	r1, #187	; 0xbb
 80026f2:	2001      	movs	r0, #1
 80026f4:	f002 f915 	bl	8004922 <LCD_Font>
						}

						temperatureLast = temperature;
 80026f8:	4ba3      	ldr	r3, [pc, #652]	; (8002988 <main+0xbdc>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	49a7      	ldr	r1, [pc, #668]	; (800299c <main+0xbf0>)
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 8002704:	4ba6      	ldr	r3, [pc, #664]	; (80029a0 <main+0xbf4>)
 8002706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270a:	4ba6      	ldr	r3, [pc, #664]	; (80029a4 <main+0xbf8>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fe f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d15b      	bne.n	80027d2 <main+0xa26>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 800271a:	4ba2      	ldr	r3, [pc, #648]	; (80029a4 <main+0xbf8>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002724:	49a0      	ldr	r1, [pc, #640]	; (80029a8 <main+0xbfc>)
 8002726:	f008 f835 	bl	800a794 <siprintf>
						if (humidityLast >= 10)
 800272a:	4b9e      	ldr	r3, [pc, #632]	; (80029a4 <main+0xbf8>)
 800272c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	4b9d      	ldr	r3, [pc, #628]	; (80029ac <main+0xc00>)
 8002736:	f7fe f9e5 	bl	8000b04 <__aeabi_dcmpge>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <main+0x9ac>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002740:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2301      	movs	r3, #1
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4b92      	ldr	r3, [pc, #584]	; (8002998 <main+0xbec>)
 800274e:	21bb      	movs	r1, #187	; 0xbb
 8002750:	20a0      	movs	r0, #160	; 0xa0
 8002752:	f002 f8e6 	bl	8004922 <LCD_Font>
 8002756:	e00a      	b.n	800276e <main+0x9c2>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002758:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2301      	movs	r3, #1
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <main+0xbec>)
 8002766:	21bb      	movs	r1, #187	; 0xbb
 8002768:	20ba      	movs	r0, #186	; 0xba
 800276a:	f002 f8da 	bl	8004922 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800276e:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <main+0xbf4>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002778:	498b      	ldr	r1, [pc, #556]	; (80029a8 <main+0xbfc>)
 800277a:	f008 f80b 	bl	800a794 <siprintf>
						if (humidity >= 10)
 800277e:	4b88      	ldr	r3, [pc, #544]	; (80029a0 <main+0xbf4>)
 8002780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	4b88      	ldr	r3, [pc, #544]	; (80029ac <main+0xc00>)
 800278a:	f7fe f9bb 	bl	8000b04 <__aeabi_dcmpge>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <main+0xa02>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002794:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	2301      	movs	r3, #1
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <main+0xbec>)
 80027a4:	21bb      	movs	r1, #187	; 0xbb
 80027a6:	20a0      	movs	r0, #160	; 0xa0
 80027a8:	f002 f8bb 	bl	8004922 <LCD_Font>
 80027ac:	e00b      	b.n	80027c6 <main+0xa1a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80027ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2301      	movs	r3, #1
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	4b76      	ldr	r3, [pc, #472]	; (8002998 <main+0xbec>)
 80027be:	21bb      	movs	r1, #187	; 0xbb
 80027c0:	20ba      	movs	r0, #186	; 0xba
 80027c2:	f002 f8ae 	bl	8004922 <LCD_Font>

						humidityLast = humidity;
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <main+0xbf4>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	4975      	ldr	r1, [pc, #468]	; (80029a4 <main+0xbf8>)
 80027ce:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80027d2:	4b77      	ldr	r3, [pc, #476]	; (80029b0 <main+0xc04>)
 80027d4:	881a      	ldrh	r2, [r3, #0]
 80027d6:	4b77      	ldr	r3, [pc, #476]	; (80029b4 <main+0xc08>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d065      	beq.n	80028aa <main+0xafe>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 80027de:	4b74      	ldr	r3, [pc, #464]	; (80029b0 <main+0xc04>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e6:	d315      	bcc.n	8002814 <main+0xa68>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 80027e8:	4b71      	ldr	r3, [pc, #452]	; (80029b0 <main+0xc04>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027f2:	4971      	ldr	r1, [pc, #452]	; (80029b8 <main+0xc0c>)
 80027f4:	4618      	mov	r0, r3
 80027f6:	f007 ffcd 	bl	800a794 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80027fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027fe:	2300      	movs	r3, #0
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2301      	movs	r3, #1
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4b64      	ldr	r3, [pc, #400]	; (8002998 <main+0xbec>)
 8002808:	21bb      	movs	r1, #187	; 0xbb
 800280a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800280e:	f002 f888 	bl	8004922 <LCD_Font>
 8002812:	e014      	b.n	800283e <main+0xa92>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <main+0xc04>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800281e:	4967      	ldr	r1, [pc, #412]	; (80029bc <main+0xc10>)
 8002820:	4618      	mov	r0, r3
 8002822:	f007 ffb7 	bl	800a794 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002826:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800282a:	2300      	movs	r3, #0
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2301      	movs	r3, #1
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4b59      	ldr	r3, [pc, #356]	; (8002998 <main+0xbec>)
 8002834:	21bb      	movs	r1, #187	; 0xbb
 8002836:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800283a:	f002 f872 	bl	8004922 <LCD_Font>
						}

						pressureLast = pressure;
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <main+0xc08>)
 8002840:	881a      	ldrh	r2, [r3, #0]
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <main+0xc04>)
 8002844:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 8002846:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <main+0xc04>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284e:	d316      	bcc.n	800287e <main+0xad2>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <main+0xc04>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800285a:	4957      	ldr	r1, [pc, #348]	; (80029b8 <main+0xc0c>)
 800285c:	4618      	mov	r0, r3
 800285e:	f007 ff99 	bl	800a794 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002862:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002866:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4b49      	ldr	r3, [pc, #292]	; (8002998 <main+0xbec>)
 8002872:	21bb      	movs	r1, #187	; 0xbb
 8002874:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002878:	f002 f853 	bl	8004922 <LCD_Font>
 800287c:	e015      	b.n	80028aa <main+0xafe>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <main+0xc04>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002888:	494c      	ldr	r1, [pc, #304]	; (80029bc <main+0xc10>)
 800288a:	4618      	mov	r0, r3
 800288c:	f007 ff82 	bl	800a794 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002890:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002894:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2301      	movs	r3, #1
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <main+0xbec>)
 80028a0:	21bb      	movs	r1, #187	; 0xbb
 80028a2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80028a6:	f002 f83c 	bl	8004922 <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe fbf0 	bl	8001090 <AT24XX_Read>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <main+0xc14>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f000 81dd 	beq.w	8002c78 <main+0xecc>

						AT24XX_Update(0, rtcHrs);
 80028be:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <main+0xc14>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fc0c 	bl	80010e2 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80028d0:	e027      	b.n	8002922 <main+0xb76>
 80028d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80028d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80028da:	b29b      	uxth	r3, r3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fbd5 	bl	8001090 <AT24XX_Read>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fbc9 	bl	8001090 <AT24XX_Read>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff f9d8 	bl	8001cb8 <byteS>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002910:	b211      	sxth	r1, r2
 8002912:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <main+0xc18>)
 8002914:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002918:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800291c:	3301      	adds	r3, #1
 800291e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8002922:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002926:	2b9a      	cmp	r3, #154	; 0x9a
 8002928:	d9d3      	bls.n	80028d2 <main+0xb26>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 800292a:	239a      	movs	r3, #154	; 0x9a
 800292c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002930:	e00f      	b.n	8002952 <main+0xba6>
 8002932:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800293c:	4921      	ldr	r1, [pc, #132]	; (80029c4 <main+0xc18>)
 800293e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <main+0xc18>)
 8002944:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002948:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800294c:	3b01      	subs	r3, #1
 800294e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002952:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1eb      	bne.n	8002932 <main+0xb86>
						hT[0] = (uint16_t) (temperature * 10);
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <main+0xbdc>)
 800295c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <main+0xc00>)
 8002966:	f7fd fe47 	bl	80005f8 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f919 	bl	8000ba8 <__aeabi_d2uiz>
 8002976:	4603      	mov	r3, r0
 8002978:	b29b      	uxth	r3, r3
 800297a:	b21a      	sxth	r2, r3
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <main+0xc18>)
 800297e:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002980:	2300      	movs	r3, #0
 8002982:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002986:	e04e      	b.n	8002a26 <main+0xc7a>
 8002988:	200004b8 	.word	0x200004b8
 800298c:	c0240000 	.word	0xc0240000
 8002990:	0800f310 	.word	0x0800f310
 8002994:	00ffa500 	.word	0x00ffa500
 8002998:	08011b2c 	.word	0x08011b2c
 800299c:	200004c0 	.word	0x200004c0
 80029a0:	200004c8 	.word	0x200004c8
 80029a4:	200004d0 	.word	0x200004d0
 80029a8:	0800f318 	.word	0x0800f318
 80029ac:	40240000 	.word	0x40240000
 80029b0:	200004fa 	.word	0x200004fa
 80029b4:	200004f8 	.word	0x200004f8
 80029b8:	0800f320 	.word	0x0800f320
 80029bc:	0800f328 	.word	0x0800f328
 80029c0:	200004ab 	.word	0x200004ab
 80029c4:	200004fc 	.word	0x200004fc
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80029c8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	b29c      	uxth	r4, r3
 80029d6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029da:	4a86      	ldr	r2, [pc, #536]	; (8002bf4 <main+0xe48>)
 80029dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f94c 	bl	8001c80 <byteL>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4619      	mov	r1, r3
 80029ec:	4620      	mov	r0, r4
 80029ee:	f7fe fb78 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80029f2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80029fe:	b29c      	uxth	r4, r3
 8002a00:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a04:	4a7b      	ldr	r2, [pc, #492]	; (8002bf4 <main+0xe48>)
 8002a06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f944 	bl	8001c9a <byteH>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7fe fb63 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002a1c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a20:	3301      	adds	r3, #1
 8002a22:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002a26:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002a2a:	2b9a      	cmp	r3, #154	; 0x9a
 8002a2c:	d9cc      	bls.n	80029c8 <main+0xc1c>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002a34:	e027      	b.n	8002a86 <main+0xcda>
 8002a36:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a3a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fb23 	bl	8001090 <AT24XX_Read>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461c      	mov	r4, r3
 8002a4e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fb17 	bl	8001090 <AT24XX_Read>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	4620      	mov	r0, r4
 8002a68:	f7ff f926 	bl	8001cb8 <byteS>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a74:	b211      	sxth	r1, r2
 8002a76:	4a60      	ldr	r2, [pc, #384]	; (8002bf8 <main+0xe4c>)
 8002a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002a7c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a80:	3301      	adds	r3, #1
 8002a82:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002a86:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a8a:	2b9a      	cmp	r3, #154	; 0x9a
 8002a8c:	d9d3      	bls.n	8002a36 <main+0xc8a>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8002a8e:	239a      	movs	r3, #154	; 0x9a
 8002a90:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002a94:	e00f      	b.n	8002ab6 <main+0xd0a>
 8002a96:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002aa0:	4955      	ldr	r1, [pc, #340]	; (8002bf8 <main+0xe4c>)
 8002aa2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002aa6:	4a54      	ldr	r2, [pc, #336]	; (8002bf8 <main+0xe4c>)
 8002aa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002aac:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002ab6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1eb      	bne.n	8002a96 <main+0xcea>
						hH[0] = (uint16_t) (humidity * 10);
 8002abe:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <main+0xe50>)
 8002ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <main+0xe54>)
 8002aca:	f7fd fd95 	bl	80005f8 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7fe f867 	bl	8000ba8 <__aeabi_d2uiz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	4b45      	ldr	r3, [pc, #276]	; (8002bf8 <main+0xe4c>)
 8002ae2:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002aea:	e02e      	b.n	8002b4a <main+0xd9e>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 8002aec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002af0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	b29c      	uxth	r4, r3
 8002afa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002afe:	4a3e      	ldr	r2, [pc, #248]	; (8002bf8 <main+0xe4c>)
 8002b00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f8ba 	bl	8001c80 <byteL>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7fe fae6 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002b16:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002b22:	b29c      	uxth	r4, r3
 8002b24:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b28:	4a33      	ldr	r2, [pc, #204]	; (8002bf8 <main+0xe4c>)
 8002b2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f8b2 	bl	8001c9a <byteH>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fe fad1 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002b40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b44:	3301      	adds	r3, #1
 8002b46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002b4a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b4e:	2b9a      	cmp	r3, #154	; 0x9a
 8002b50:	d9cc      	bls.n	8002aec <main+0xd40>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002b58:	e027      	b.n	8002baa <main+0xdfe>
 8002b5a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002b5e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fa91 	bl	8001090 <AT24XX_Read>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461c      	mov	r4, r3
 8002b72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fa85 	bl	8001090 <AT24XX_Read>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7ff f894 	bl	8001cb8 <byteS>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002b98:	b211      	sxth	r1, r2
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <main+0xe58>)
 8002b9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ba0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002baa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bae:	2b9a      	cmp	r3, #154	; 0x9a
 8002bb0:	d9d3      	bls.n	8002b5a <main+0xdae>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002bb2:	239a      	movs	r3, #154	; 0x9a
 8002bb4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002bb8:	e00f      	b.n	8002bda <main+0xe2e>
 8002bba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002bc4:	490f      	ldr	r1, [pc, #60]	; (8002c04 <main+0xe58>)
 8002bc6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <main+0xe58>)
 8002bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002bd0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002bda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1eb      	bne.n	8002bba <main+0xe0e>
						hP[0] = (uint16_t)pressure;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <main+0xe5c>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <main+0xe58>)
 8002bea:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002bf2:	e03a      	b.n	8002c6a <main+0xebe>
 8002bf4:	200004fc 	.word	0x200004fc
 8002bf8:	20000634 	.word	0x20000634
 8002bfc:	200004c8 	.word	0x200004c8
 8002c00:	40240000 	.word	0x40240000
 8002c04:	2000076c 	.word	0x2000076c
 8002c08:	200004f8 	.word	0x200004f8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002c0c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c10:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	b29c      	uxth	r4, r3
 8002c1a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c1e:	4abf      	ldr	r2, [pc, #764]	; (8002f1c <main+0x1170>)
 8002c20:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f82a 	bl	8001c80 <byteL>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7fe fa56 	bl	80010e2 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002c36:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002c42:	b29c      	uxth	r4, r3
 8002c44:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c48:	4ab4      	ldr	r2, [pc, #720]	; (8002f1c <main+0x1170>)
 8002c4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f822 	bl	8001c9a <byteH>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7fe fa41 	bl	80010e2 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002c60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c64:	3301      	adds	r3, #1
 8002c66:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002c6a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c6e:	2b9a      	cmp	r3, #154	; 0x9a
 8002c70:	d9cc      	bls.n	8002c0c <main+0xe60>
						}

						viewGraphs = 0;
 8002c72:	4bab      	ldr	r3, [pc, #684]	; (8002f20 <main+0x1174>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
					}

					//					LCD_Rect(2, 189, 157, 129, 1, BLUE);
					LCD_Rect(1, 221, 265, 257, 1, BLUE);
 8002c78:	23ff      	movs	r3, #255	; 0xff
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f240 1301 	movw	r3, #257	; 0x101
 8002c84:	f240 1209 	movw	r2, #265	; 0x109
 8002c88:	21dd      	movs	r1, #221	; 0xdd
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f001 fc1a 	bl	80044c4 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002c90:	4ba4      	ldr	r3, [pc, #656]	; (8002f24 <main+0x1178>)
 8002c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	4ba3      	ldr	r3, [pc, #652]	; (8002f28 <main+0x117c>)
 8002c9c:	f7fd fcac 	bl	80005f8 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fd ff56 	bl	8000b58 <__aeabi_d2iz>
 8002cac:	4603      	mov	r3, r0
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002cbc:	21e2      	movs	r1, #226	; 0xe2
 8002cbe:	f7fe ffb3 	bl	8001c28 <map>
 8002cc2:	ec53 2b10 	vmov	r2, r3, d0
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd ff45 	bl	8000b58 <__aeabi_d2iz>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (valMap < 0) valMap = 0;
 8002cd4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da02      	bge.n	8002ce2 <main+0xf36>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (valMap > 127) valMap = 127;
 8002ce2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce8:	dd02      	ble.n	8002cf0 <main+0xf44>
 8002cea:	237f      	movs	r3, #127	; 0x7f
 8002cec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	f240 133d 	movw	r3, #317	; 0x13d
 8002cfc:	229e      	movs	r2, #158	; 0x9e
 8002cfe:	21bf      	movs	r1, #191	; 0xbf
 8002d00:	209e      	movs	r0, #158	; 0x9e
 8002d02:	f001 fb71 	bl	80043e8 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002d06:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d023      	beq.n	8002d56 <main+0xfaa>
 8002d0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002d12:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d16:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d18:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002d1c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d2a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002d2e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f001 fa4d 	bl	80041da <RGB>
 8002d40:	4603      	mov	r3, r0
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	2301      	movs	r3, #1
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f240 133d 	movw	r3, #317	; 0x13d
 8002d4c:	229e      	movs	r2, #158	; 0x9e
 8002d4e:	4621      	mov	r1, r4
 8002d50:	209e      	movs	r0, #158	; 0x9e
 8002d52:	f001 fb49 	bl	80043e8 <LCD_Line>

					//					LCD_Rect(161, 189, 157, 129, 1, BLUE);
					LCD_Rect(267, 221, 265, 257, 1, BLUE);
 8002d56:	23ff      	movs	r3, #255	; 0xff
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	f240 1301 	movw	r3, #257	; 0x101
 8002d62:	f240 1209 	movw	r2, #265	; 0x109
 8002d66:	21dd      	movs	r1, #221	; 0xdd
 8002d68:	f240 100b 	movw	r0, #267	; 0x10b
 8002d6c:	f001 fbaa 	bl	80044c4 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002d70:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <main+0x1180>)
 8002d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <main+0x117c>)
 8002d7c:	f7fd fc3c 	bl	80005f8 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7fd fee6 	bl	8000b58 <__aeabi_d2iz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	b298      	uxth	r0, r3
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2300      	movs	r3, #0
 8002d98:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002d9c:	2150      	movs	r1, #80	; 0x50
 8002d9e:	f7fe ff43 	bl	8001c28 <map>
 8002da2:	ec53 2b10 	vmov	r2, r3, d0
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd fed5 	bl	8000b58 <__aeabi_d2iz>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (valMap < 0) valMap = 0;
 8002db4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da02      	bge.n	8002dc2 <main+0x1016>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (valMap > 127) valMap = 127;
 8002dc2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8002dc8:	dd02      	ble.n	8002dd0 <main+0x1024>
 8002dca:	237f      	movs	r3, #127	; 0x7f
 8002dcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f240 133d 	movw	r3, #317	; 0x13d
 8002ddc:	f240 123d 	movw	r2, #317	; 0x13d
 8002de0:	21bf      	movs	r1, #191	; 0xbf
 8002de2:	f240 103d 	movw	r0, #317	; 0x13d
 8002de6:	f001 faff 	bl	80043e8 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002dea:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d025      	beq.n	8002e3e <main+0x1092>
 8002df2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002df6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002dfa:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002dfc:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002e00:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002e0e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002e12:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f001 f9db 	bl	80041da <RGB>
 8002e24:	4603      	mov	r3, r0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f240 133d 	movw	r3, #317	; 0x13d
 8002e30:	f240 123d 	movw	r2, #317	; 0x13d
 8002e34:	4621      	mov	r1, r4
 8002e36:	f240 103d 	movw	r0, #317	; 0x13d
 8002e3a:	f001 fad5 	bl	80043e8 <LCD_Line>

					//					LCD_Rect(320, 189, 157, 129, 1, BLUE);
					LCD_Rect(533, 221, 265, 257, 1, BLUE);
 8002e3e:	23ff      	movs	r3, #255	; 0xff
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2301      	movs	r3, #1
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f240 1301 	movw	r3, #257	; 0x101
 8002e4a:	f240 1209 	movw	r2, #265	; 0x109
 8002e4e:	21dd      	movs	r1, #221	; 0xdd
 8002e50:	f240 2015 	movw	r0, #533	; 0x215
 8002e54:	f001 fb36 	bl	80044c4 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002e58:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <main+0x1184>)
 8002e5a:	8818      	ldrh	r0, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2300      	movs	r3, #0
 8002e62:	f240 4229 	movw	r2, #1065	; 0x429
 8002e66:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002e6a:	f7fe fedd 	bl	8001c28 <map>
 8002e6e:	ec53 2b10 	vmov	r2, r3, d0
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fe6f 	bl	8000b58 <__aeabi_d2iz>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (valMap < 0) valMap = 0;
 8002e80:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	da02      	bge.n	8002e8e <main+0x10e2>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					if (valMap > 127) valMap = 127;
 8002e8e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002e92:	2b7f      	cmp	r3, #127	; 0x7f
 8002e94:	dd02      	ble.n	8002e9c <main+0x10f0>
 8002e96:	237f      	movs	r3, #127	; 0x7f
 8002e98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f240 133d 	movw	r3, #317	; 0x13d
 8002ea8:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002eac:	21bf      	movs	r1, #191	; 0xbf
 8002eae:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002eb2:	f001 fa99 	bl	80043e8 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002eb6:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d025      	beq.n	8002f0a <main+0x115e>
 8002ebe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002ec2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002ec6:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ec8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002ecc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002eda:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002ede:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	f001 f975 	bl	80041da <RGB>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	f240 133d 	movw	r3, #317	; 0x13d
 8002efc:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002f00:	4621      	mov	r1, r4
 8002f02:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002f06:	f001 fa6f 	bl	80043e8 <LCD_Line>

					if (!viewGraphs) {
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <main+0x1174>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8195 	bne.w	800323e <main+0x1492>

						for (uint16_t i = 0; i < 263 ; i++) {
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8002f1a:	e07a      	b.n	8003012 <main+0x1266>
 8002f1c:	2000076c 	.word	0x2000076c
 8002f20:	200004a8 	.word	0x200004a8
 8002f24:	200004b8 	.word	0x200004b8
 8002f28:	40240000 	.word	0x40240000
 8002f2c:	200004c8 	.word	0x200004c8
 8002f30:	200004f8 	.word	0x200004f8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002f34:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002f38:	4ab5      	ldr	r2, [pc, #724]	; (8003210 <main+0x1464>)
 8002f3a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f3e:	b298      	uxth	r0, r3
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002f4a:	21e2      	movs	r1, #226	; 0xe2
 8002f4c:	f7fe fe6c 	bl	8001c28 <map>
 8002f50:	ec53 2b10 	vmov	r2, r3, d0
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fdfe 	bl	8000b58 <__aeabi_d2iz>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							if (valMap < 0) valMap = 0;
 8002f62:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da02      	bge.n	8002f70 <main+0x11c4>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							if (valMap > 127) valMap = 127;
 8002f70:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002f74:	2b7f      	cmp	r3, #127	; 0x7f
 8002f76:	dd02      	ble.n	8002f7e <main+0x11d2>
 8002f78:	237f      	movs	r3, #127	; 0x7f
 8002f7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							LCD_Line(2 + (262 - i), 222, 2 + (262 - i), 477, 1, BLACK);
 8002f7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002f82:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002f86:	b298      	uxth	r0, r3
 8002f88:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002f8c:	f5c3 7384 	rsb	r3, r3, #264	; 0x108
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	2300      	movs	r3, #0
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2301      	movs	r3, #1
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	f240 13dd 	movw	r3, #477	; 0x1dd
 8002f9e:	21de      	movs	r1, #222	; 0xde
 8002fa0:	f001 fa22 	bl	80043e8 <LCD_Line>
							if (valMap) LCD_Line(3 + (154 - i), 191 + (127 - valMap), 3 + (154 - i), 317,
 8002fa4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <main+0x125c>
 8002fac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002fb0:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002fb4:	b29c      	uxth	r4, r3
 8002fb6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002fba:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002fbe:	b29d      	uxth	r5, r3
 8002fc0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002fc4:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002fc8:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fca:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002fce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154 - i), 191 + (127 - valMap), 3 + (154 - i), 317,
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fdc:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002fe0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154 - i), 191 + (127 - valMap), 3 + (154 - i), 317,
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	2100      	movs	r1, #0
 8002fee:	f001 f8f4 	bl	80041da <RGB>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	f240 133d 	movw	r3, #317	; 0x13d
 8002ffe:	4632      	mov	r2, r6
 8003000:	4629      	mov	r1, r5
 8003002:	4620      	mov	r0, r4
 8003004:	f001 f9f0 	bl	80043e8 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 8003008:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800300c:	3301      	adds	r3, #1
 800300e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003012:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003016:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800301a:	d98b      	bls.n	8002f34 <main+0x1188>
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 800301c:	2300      	movs	r3, #0
 800301e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8003022:	e070      	b.n	8003106 <main+0x135a>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8003024:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003028:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <main+0x1468>)
 800302a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800302e:	b298      	uxth	r0, r3
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800303a:	2150      	movs	r1, #80	; 0x50
 800303c:	f7fe fdf4 	bl	8001c28 <map>
 8003040:	ec53 2b10 	vmov	r2, r3, d0
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f7fd fd86 	bl	8000b58 <__aeabi_d2iz>
 800304c:	4603      	mov	r3, r0
 800304e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							if (valMap < 0) valMap = 0;
 8003052:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003056:	2b00      	cmp	r3, #0
 8003058:	da02      	bge.n	8003060 <main+0x12b4>
 800305a:	2300      	movs	r3, #0
 800305c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							if (valMap > 127) valMap = 127;
 8003060:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8003064:	2b7f      	cmp	r3, #127	; 0x7f
 8003066:	dd02      	ble.n	800306e <main+0x12c2>
 8003068:	237f      	movs	r3, #127	; 0x7f
 800306a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							LCD_Line(268 + (262 - i), 222, 268 + (262 - i), 477, 1, BLACK);
 800306e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003072:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003076:	3302      	adds	r3, #2
 8003078:	b298      	uxth	r0, r3
 800307a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800307e:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8003082:	3302      	adds	r3, #2
 8003084:	b29a      	uxth	r2, r3
 8003086:	2300      	movs	r3, #0
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2301      	movs	r3, #1
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f240 13dd 	movw	r3, #477	; 0x1dd
 8003092:	21de      	movs	r1, #222	; 0xde
 8003094:	f001 f9a8 	bl	80043e8 <LCD_Line>
							if (valMap) LCD_Line(162 + (154 - i), 191 + (127 - valMap), 162 + (154 - i), 317,
 8003098:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02d      	beq.n	80030fc <main+0x1350>
 80030a0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80030a4:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 80030a8:	b29c      	uxth	r4, r3
 80030aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80030ae:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80030b2:	b29d      	uxth	r5, r3
 80030b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80030b8:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 80030bc:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030be:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80030c2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154 - i), 191 + (127 - valMap), 162 + (154 - i), 317,
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80030d0:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80030d4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154 - i), 191 + (127 - valMap), 162 + (154 - i), 317,
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	2100      	movs	r1, #0
 80030e2:	f001 f87a 	bl	80041da <RGB>
 80030e6:	4603      	mov	r3, r0
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2301      	movs	r3, #1
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	f240 133d 	movw	r3, #317	; 0x13d
 80030f2:	4632      	mov	r2, r6
 80030f4:	4629      	mov	r1, r5
 80030f6:	4620      	mov	r0, r4
 80030f8:	f001 f976 	bl	80043e8 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80030fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003100:	3301      	adds	r3, #1
 8003102:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8003106:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800310a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800310e:	d989      	bls.n	8003024 <main+0x1278>
						}

						for (uint16_t i = 0; i < 263 ; i++) {
 8003110:	2300      	movs	r3, #0
 8003112:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8003116:	e071      	b.n	80031fc <main+0x1450>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8003118:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800311c:	4a3e      	ldr	r2, [pc, #248]	; (8003218 <main+0x146c>)
 800311e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003122:	b298      	uxth	r0, r3
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2300      	movs	r3, #0
 800312a:	f240 4229 	movw	r2, #1065	; 0x429
 800312e:	f240 31a9 	movw	r1, #937	; 0x3a9
 8003132:	f7fe fd79 	bl	8001c28 <map>
 8003136:	ec53 2b10 	vmov	r2, r3, d0
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	f7fd fd0b 	bl	8000b58 <__aeabi_d2iz>
 8003142:	4603      	mov	r3, r0
 8003144:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							if (valMap < 0) valMap = 0;
 8003148:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800314c:	2b00      	cmp	r3, #0
 800314e:	da02      	bge.n	8003156 <main+0x13aa>
 8003150:	2300      	movs	r3, #0
 8003152:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							if (valMap > 127) valMap = 127;
 8003156:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800315a:	2b7f      	cmp	r3, #127	; 0x7f
 800315c:	dd02      	ble.n	8003164 <main+0x13b8>
 800315e:	237f      	movs	r3, #127	; 0x7f
 8003160:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
							LCD_Line(534 + (262 - i), 222, 534 + (262 - i), 477, 1, BLACK);
 8003164:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003168:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 800316c:	b298      	uxth	r0, r3
 800316e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003172:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8003176:	b29a      	uxth	r2, r3
 8003178:	2300      	movs	r3, #0
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	2301      	movs	r3, #1
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f240 13dd 	movw	r3, #477	; 0x1dd
 8003184:	21de      	movs	r1, #222	; 0xde
 8003186:	f001 f92f 	bl	80043e8 <LCD_Line>
							if (valMap) LCD_Line(321 + (154 - i), 191 + (127 - valMap), 321 + (154 - i), 317,
 800318a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02f      	beq.n	80031f2 <main+0x1446>
 8003192:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003196:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 800319a:	3301      	adds	r3, #1
 800319c:	b29c      	uxth	r4, r3
 800319e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80031a2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80031a6:	b29d      	uxth	r5, r3
 80031a8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80031ac:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 80031b0:	3301      	adds	r3, #1
 80031b2:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80031b4:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80031b8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154 - i), 191 + (127 - valMap), 321 + (154 - i), 317,
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80031c6:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80031ca:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154 - i), 191 + (127 - valMap), 321 + (154 - i), 317,
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	2100      	movs	r1, #0
 80031d8:	f000 ffff 	bl	80041da <RGB>
 80031dc:	4603      	mov	r3, r0
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	2301      	movs	r3, #1
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f240 133d 	movw	r3, #317	; 0x13d
 80031e8:	4632      	mov	r2, r6
 80031ea:	4629      	mov	r1, r5
 80031ec:	4620      	mov	r0, r4
 80031ee:	f001 f8fb 	bl	80043e8 <LCD_Line>
						for (uint16_t i = 0; i < 263 ; i++) {
 80031f2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80031f6:	3301      	adds	r3, #1
 80031f8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80031fc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003200:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8003204:	d988      	bls.n	8003118 <main+0x136c>
						}

						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800320c:	e00f      	b.n	800322e <main+0x1482>
 800320e:	bf00      	nop
 8003210:	200004fc 	.word	0x200004fc
 8003214:	20000634 	.word	0x20000634
 8003218:	2000076c 	.word	0x2000076c
 800321c:	4a8d      	ldr	r2, [pc, #564]	; (8003454 <main+0x16a8>)
 800321e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003222:	6353      	str	r3, [r2, #52]	; 0x34
 8003224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003228:	3301      	adds	r3, #1
 800322a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d9f1      	bls.n	800321c <main+0x1470>
						viewGraphs = 1;
 8003238:	4b87      	ldr	r3, [pc, #540]	; (8003458 <main+0x16ac>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 800323e:	4b87      	ldr	r3, [pc, #540]	; (800345c <main+0x16b0>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8391 	beq.w	800396a <main+0x1bbe>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8003248:	2202      	movs	r2, #2
 800324a:	4985      	ldr	r1, [pc, #532]	; (8003460 <main+0x16b4>)
 800324c:	4885      	ldr	r0, [pc, #532]	; (8003464 <main+0x16b8>)
 800324e:	f006 fbc7 	bl	80099e0 <memcmp>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 808a 	bne.w	800336e <main+0x15c2>

					char val[2];

					val[0] = rx_buffer[2];
 800325a:	4b82      	ldr	r3, [pc, #520]	; (8003464 <main+0x16b8>)
 800325c:	789b      	ldrb	r3, [r3, #2]
 800325e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					val[1] = rx_buffer[3];
 8003262:	4b80      	ldr	r3, [pc, #512]	; (8003464 <main+0x16b8>)
 8003264:	78db      	ldrb	r3, [r3, #3]
 8003266:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setHrs(atoi(val));
 800326a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800326e:	4618      	mov	r0, r3
 8003270:	f006 fb88 	bl	8009984 <atoi>
 8003274:	4603      	mov	r3, r0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe fc35 	bl	8001ae8 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 800327e:	4b79      	ldr	r3, [pc, #484]	; (8003464 <main+0x16b8>)
 8003280:	791b      	ldrb	r3, [r3, #4]
 8003282:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					val[1] = rx_buffer[5];
 8003286:	4b77      	ldr	r3, [pc, #476]	; (8003464 <main+0x16b8>)
 8003288:	795b      	ldrb	r3, [r3, #5]
 800328a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setMin(atoi(val));
 800328e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003292:	4618      	mov	r0, r3
 8003294:	f006 fb76 	bl	8009984 <atoi>
 8003298:	4603      	mov	r3, r0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fc03 	bl	8001aa8 <DS3231_setMin>

					val[0] = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					val[1] = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setSec(atoi(val));
 80032ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032b2:	4618      	mov	r0, r3
 80032b4:	f006 fb66 	bl	8009984 <atoi>
 80032b8:	4603      	mov	r3, r0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fbd3 	bl	8001a68 <DS3231_setSec>

					val[0] = rx_buffer[6];
 80032c2:	4b68      	ldr	r3, [pc, #416]	; (8003464 <main+0x16b8>)
 80032c4:	799b      	ldrb	r3, [r3, #6]
 80032c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					val[1] = rx_buffer[7];
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <main+0x16b8>)
 80032cc:	79db      	ldrb	r3, [r3, #7]
 80032ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setDate(atoi(val));
 80032d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032d6:	4618      	mov	r0, r3
 80032d8:	f006 fb54 	bl	8009984 <atoi>
 80032dc:	4603      	mov	r3, r0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fc41 	bl	8001b68 <DS3231_setDate>

					val[0] = rx_buffer[8];
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <main+0x16b8>)
 80032e8:	7a1b      	ldrb	r3, [r3, #8]
 80032ea:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					val[1] = rx_buffer[9];
 80032ee:	4b5d      	ldr	r3, [pc, #372]	; (8003464 <main+0x16b8>)
 80032f0:	7a5b      	ldrb	r3, [r3, #9]
 80032f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setMonth(atoi(val));
 80032f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 fb42 	bl	8009984 <atoi>
 8003300:	4603      	mov	r3, r0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fc4f 	bl	8001ba8 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 800330a:	4b56      	ldr	r3, [pc, #344]	; (8003464 <main+0x16b8>)
 800330c:	7a9b      	ldrb	r3, [r3, #10]
 800330e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					val[1] = rx_buffer[11];
 8003312:	4b54      	ldr	r3, [pc, #336]	; (8003464 <main+0x16b8>)
 8003314:	7adb      	ldrb	r3, [r3, #11]
 8003316:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setYear(atoi(val));
 800331a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800331e:	4618      	mov	r0, r3
 8003320:	f006 fb30 	bl	8009984 <atoi>
 8003324:	4603      	mov	r3, r0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fc5d 	bl	8001be8 <DS3231_setYear>

					val[1] = rx_buffer[12];
 800332e:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <main+0x16b8>)
 8003330:	7b1b      	ldrb	r3, [r3, #12]
 8003332:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DS3231_setDay(atoi(val));
 8003336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800333a:	4618      	mov	r0, r3
 800333c:	f006 fb22 	bl	8009984 <atoi>
 8003340:	4603      	mov	r3, r0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fbef 	bl	8001b28 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003350:	e008      	b.n	8003364 <main+0x15b8>
 8003352:	4a40      	ldr	r2, [pc, #256]	; (8003454 <main+0x16a8>)
 8003354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003358:	6353      	str	r3, [r2, #52]	; 0x34
 800335a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800335e:	3301      	adds	r3, #1
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d9f1      	bls.n	8003352 <main+0x15a6>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 800336e:	2202      	movs	r2, #2
 8003370:	493d      	ldr	r1, [pc, #244]	; (8003468 <main+0x16bc>)
 8003372:	483c      	ldr	r0, [pc, #240]	; (8003464 <main+0x16b8>)
 8003374:	f006 fb34 	bl	80099e0 <memcmp>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d122      	bne.n	80033c4 <main+0x1618>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 800337e:	2300      	movs	r3, #0
 8003380:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8003384:	e00a      	b.n	800339c <main+0x15f0>
 8003386:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fea8 	bl	80010e2 <AT24XX_Update>
 8003392:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003396:	3301      	adds	r3, #1
 8003398:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800339c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d3ef      	bcc.n	8003386 <main+0x15da>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <main+0x16c0>)
 80033a8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80033ac:	461d      	mov	r5, r3
 80033ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80033b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80033ba:	2364      	movs	r3, #100	; 0x64
 80033bc:	2214      	movs	r2, #20
 80033be:	482c      	ldr	r0, [pc, #176]	; (8003470 <main+0x16c4>)
 80033c0:	f005 fe9b 	bl	80090fa <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 80033c4:	2202      	movs	r2, #2
 80033c6:	492b      	ldr	r1, [pc, #172]	; (8003474 <main+0x16c8>)
 80033c8:	4826      	ldr	r0, [pc, #152]	; (8003464 <main+0x16b8>)
 80033ca:	f006 fb09 	bl	80099e0 <memcmp>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 82b5 	bne.w	8003940 <main+0x1b94>

					char valT[4] = { 0 };
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80033e0:	e00f      	b.n	8003402 <main+0x1656>
 80033e2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80033e6:	1c9a      	adds	r2, r3, #2
 80033e8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80033ec:	491d      	ldr	r1, [pc, #116]	; (8003464 <main+0x16b8>)
 80033ee:	5c8a      	ldrb	r2, [r1, r2]
 80033f0:	33b0      	adds	r3, #176	; 0xb0
 80033f2:	443b      	add	r3, r7
 80033f4:	f803 2c90 	strb.w	r2, [r3, #-144]
 80033f8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80033fc:	3301      	adds	r3, #1
 80033fe:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8003402:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003406:	2b03      	cmp	r3, #3
 8003408:	d9eb      	bls.n	80033e2 <main+0x1636>

					temperatureRemote = atoi(valT);
 800340a:	f107 0320 	add.w	r3, r7, #32
 800340e:	4618      	mov	r0, r3
 8003410:	f006 fab8 	bl	8009984 <atoi>
 8003414:	4603      	mov	r3, r0
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f884 	bl	8000524 <__aeabi_i2d>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4915      	ldr	r1, [pc, #84]	; (8003478 <main+0x16cc>)
 8003422:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <main+0x16cc>)
 8003428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <main+0x16d0>)
 8003432:	f7fd fa0b 	bl	800084c <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	490f      	ldr	r1, [pc, #60]	; (8003478 <main+0x16cc>)
 800343c:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <main+0x16d4>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	83bb      	strh	r3, [r7, #28]
 8003446:	2300      	movs	r3, #0
 8003448:	77bb      	strb	r3, [r7, #30]

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8003450:	e028      	b.n	80034a4 <main+0x16f8>
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000
 8003458:	200004a8 	.word	0x200004a8
 800345c:	200008b4 	.word	0x200008b4
 8003460:	0800f330 	.word	0x0800f330
 8003464:	200008a4 	.word	0x200008a4
 8003468:	0800f334 	.word	0x0800f334
 800346c:	0800f35c 	.word	0x0800f35c
 8003470:	20000414 	.word	0x20000414
 8003474:	0800f338 	.word	0x0800f338
 8003478:	200004d8 	.word	0x200004d8
 800347c:	40240000 	.word	0x40240000
 8003480:	0800f370 	.word	0x0800f370
 8003484:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8003488:	1d9a      	adds	r2, r3, #6
 800348a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800348e:	499d      	ldr	r1, [pc, #628]	; (8003704 <main+0x1958>)
 8003490:	5c8a      	ldrb	r2, [r1, r2]
 8003492:	33b0      	adds	r3, #176	; 0xb0
 8003494:	443b      	add	r3, r7
 8003496:	f803 2c94 	strb.w	r2, [r3, #-148]
 800349a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800349e:	3301      	adds	r3, #1
 80034a0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80034a4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d9eb      	bls.n	8003484 <main+0x16d8>

					humidityRemote = atoi(valH);
 80034ac:	f107 031c 	add.w	r3, r7, #28
 80034b0:	4618      	mov	r0, r3
 80034b2:	f006 fa67 	bl	8009984 <atoi>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd f833 	bl	8000524 <__aeabi_i2d>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4991      	ldr	r1, [pc, #580]	; (8003708 <main+0x195c>)
 80034c4:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 80034c8:	4b8f      	ldr	r3, [pc, #572]	; (8003708 <main+0x195c>)
 80034ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	4b8e      	ldr	r3, [pc, #568]	; (800370c <main+0x1960>)
 80034d4:	f7fd f9ba 	bl	800084c <__aeabi_ddiv>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	498a      	ldr	r1, [pc, #552]	; (8003708 <main+0x195c>)
 80034de:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80034e2:	4b8b      	ldr	r3, [pc, #556]	; (8003710 <main+0x1964>)
 80034e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e8:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <main+0x1968>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d115      	bne.n	8003524 <main+0x1778>
 80034f8:	4b85      	ldr	r3, [pc, #532]	; (8003710 <main+0x1964>)
 80034fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	4b85      	ldr	r3, [pc, #532]	; (8003718 <main+0x196c>)
 8003504:	f7fd faea 	bl	8000adc <__aeabi_dcmplt>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <main+0x1778>
 800350e:	4b80      	ldr	r3, [pc, #512]	; (8003710 <main+0x1964>)
 8003510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	4b80      	ldr	r3, [pc, #512]	; (800371c <main+0x1970>)
 800351a:	f7fd fafd 	bl	8000b18 <__aeabi_dcmpgt>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <main+0x17aa>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003524:	4b78      	ldr	r3, [pc, #480]	; (8003708 <main+0x195c>)
 8003526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352a:	4b7d      	ldr	r3, [pc, #500]	; (8003720 <main+0x1974>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003530:	f7fd faca 	bl	8000ac8 <__aeabi_dcmpeq>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 8202 	bne.w	8003940 <main+0x1b94>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 800353c:	4b72      	ldr	r3, [pc, #456]	; (8003708 <main+0x195c>)
 800353e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	f7fd fae5 	bl	8000b18 <__aeabi_dcmpgt>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 81f5 	beq.w	8003940 <main+0x1b94>

						remoteSensorLastUpdate = 0;
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <main+0x1978>)
 8003558:	2200      	movs	r2, #0
 800355a:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 800355c:	4b72      	ldr	r3, [pc, #456]	; (8003728 <main+0x197c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003566:	4971      	ldr	r1, [pc, #452]	; (800372c <main+0x1980>)
 8003568:	4618      	mov	r0, r3
 800356a:	f007 f913 	bl	800a794 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800356e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003572:	2300      	movs	r3, #0
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2301      	movs	r3, #1
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <main+0x1984>)
 800357c:	2128      	movs	r1, #40	; 0x28
 800357e:	f240 1077 	movw	r0, #375	; 0x177
 8003582:	f001 f9ce 	bl	8004922 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <main+0x1968>)
 8003588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	4b68      	ldr	r3, [pc, #416]	; (8003734 <main+0x1988>)
 8003592:	f7fd faad 	bl	8000af0 <__aeabi_dcmple>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d014      	beq.n	80035c6 <main+0x181a>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800359c:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <main+0x1968>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f107 0014 	add.w	r0, r7, #20
 80035a6:	4964      	ldr	r1, [pc, #400]	; (8003738 <main+0x198c>)
 80035a8:	f007 f8f4 	bl	800a794 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80035ac:	f107 0214 	add.w	r2, r7, #20
 80035b0:	2300      	movs	r3, #0
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	2301      	movs	r3, #1
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <main+0x1984>)
 80035ba:	215a      	movs	r1, #90	; 0x5a
 80035bc:	f240 1061 	movw	r0, #353	; 0x161
 80035c0:	f001 f9af 	bl	8004922 <LCD_Font>
 80035c4:	e076      	b.n	80036b4 <main+0x1908>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80035c6:	4b53      	ldr	r3, [pc, #332]	; (8003714 <main+0x1968>)
 80035c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f7fd fa82 	bl	8000adc <__aeabi_dcmplt>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01f      	beq.n	800361e <main+0x1872>
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <main+0x1968>)
 80035e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	4b52      	ldr	r3, [pc, #328]	; (8003734 <main+0x1988>)
 80035ea:	f7fd fa95 	bl	8000b18 <__aeabi_dcmpgt>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d014      	beq.n	800361e <main+0x1872>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035f4:	4b47      	ldr	r3, [pc, #284]	; (8003714 <main+0x1968>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f107 0014 	add.w	r0, r7, #20
 80035fe:	494e      	ldr	r1, [pc, #312]	; (8003738 <main+0x198c>)
 8003600:	f007 f8c8 	bl	800a794 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003604:	f107 0214 	add.w	r2, r7, #20
 8003608:	2300      	movs	r3, #0
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	2301      	movs	r3, #1
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4b47      	ldr	r3, [pc, #284]	; (8003730 <main+0x1984>)
 8003612:	215a      	movs	r1, #90	; 0x5a
 8003614:	f240 1081 	movw	r0, #385	; 0x181
 8003618:	f001 f983 	bl	8004922 <LCD_Font>
 800361c:	e04a      	b.n	80036b4 <main+0x1908>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800361e:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <main+0x1968>)
 8003620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	f7fd fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01f      	beq.n	8003676 <main+0x18ca>
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <main+0x1968>)
 8003638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <main+0x1960>)
 8003642:	f7fd fa4b 	bl	8000adc <__aeabi_dcmplt>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d014      	beq.n	8003676 <main+0x18ca>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800364c:	4b31      	ldr	r3, [pc, #196]	; (8003714 <main+0x1968>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f107 0014 	add.w	r0, r7, #20
 8003656:	4939      	ldr	r1, [pc, #228]	; (800373c <main+0x1990>)
 8003658:	f007 f89c 	bl	800a794 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800365c:	f107 0214 	add.w	r2, r7, #20
 8003660:	2300      	movs	r3, #0
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2301      	movs	r3, #1
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <main+0x1984>)
 800366a:	215a      	movs	r1, #90	; 0x5a
 800366c:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003670:	f001 f957 	bl	8004922 <LCD_Font>
 8003674:	e01e      	b.n	80036b4 <main+0x1908>
						}
						else if (temperatureRemoteLast >= 10) {
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <main+0x1968>)
 8003678:	e9d3 0100 	ldrd	r0, r1, [r3]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <main+0x1960>)
 8003682:	f7fd fa3f 	bl	8000b04 <__aeabi_dcmpge>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <main+0x1908>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <main+0x1968>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f107 0014 	add.w	r0, r7, #20
 8003696:	4929      	ldr	r1, [pc, #164]	; (800373c <main+0x1990>)
 8003698:	f007 f87c 	bl	800a794 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800369c:	f107 0214 	add.w	r2, r7, #20
 80036a0:	2300      	movs	r3, #0
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2301      	movs	r3, #1
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <main+0x1984>)
 80036aa:	215a      	movs	r1, #90	; 0x5a
 80036ac:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80036b0:	f001 f937 	bl	8004922 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <main+0x1964>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <main+0x1968>)
 80036bc:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <main+0x1968>)
 80036c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <main+0x1988>)
 80036cc:	f7fd fa10 	bl	8000af0 <__aeabi_dcmple>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d034      	beq.n	8003740 <main+0x1994>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <main+0x1968>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f107 0014 	add.w	r0, r7, #20
 80036e0:	4915      	ldr	r1, [pc, #84]	; (8003738 <main+0x198c>)
 80036e2:	f007 f857 	bl	800a794 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80036e6:	f107 0214 	add.w	r2, r7, #20
 80036ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2301      	movs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <main+0x1984>)
 80036f6:	215a      	movs	r1, #90	; 0x5a
 80036f8:	f240 1061 	movw	r0, #353	; 0x161
 80036fc:	f001 f911 	bl	8004922 <LCD_Font>
 8003700:	e098      	b.n	8003834 <main+0x1a88>
 8003702:	bf00      	nop
 8003704:	200008a4 	.word	0x200008a4
 8003708:	200004e8 	.word	0x200004e8
 800370c:	40240000 	.word	0x40240000
 8003710:	200004d8 	.word	0x200004d8
 8003714:	200004e0 	.word	0x200004e0
 8003718:	40554000 	.word	0x40554000
 800371c:	c0440000 	.word	0xc0440000
 8003720:	200004f0 	.word	0x200004f0
 8003724:	20000004 	.word	0x20000004
 8003728:	20000000 	.word	0x20000000
 800372c:	0800f2f0 	.word	0x0800f2f0
 8003730:	08011b2c 	.word	0x08011b2c
 8003734:	c0240000 	.word	0xc0240000
 8003738:	0800f33c 	.word	0x0800f33c
 800373c:	0800f344 	.word	0x0800f344
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003740:	4bac      	ldr	r3, [pc, #688]	; (80039f4 <main+0x1c48>)
 8003742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	f7fd f9c5 	bl	8000adc <__aeabi_dcmplt>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <main+0x19ee>
 8003758:	4ba6      	ldr	r3, [pc, #664]	; (80039f4 <main+0x1c48>)
 800375a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	4ba5      	ldr	r3, [pc, #660]	; (80039f8 <main+0x1c4c>)
 8003764:	f7fd f9d8 	bl	8000b18 <__aeabi_dcmpgt>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d015      	beq.n	800379a <main+0x19ee>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800376e:	4ba1      	ldr	r3, [pc, #644]	; (80039f4 <main+0x1c48>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f107 0014 	add.w	r0, r7, #20
 8003778:	49a0      	ldr	r1, [pc, #640]	; (80039fc <main+0x1c50>)
 800377a:	f007 f80b 	bl	800a794 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800377e:	f107 0214 	add.w	r2, r7, #20
 8003782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	2301      	movs	r3, #1
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4b9c      	ldr	r3, [pc, #624]	; (8003a00 <main+0x1c54>)
 800378e:	215a      	movs	r1, #90	; 0x5a
 8003790:	f240 1081 	movw	r0, #385	; 0x181
 8003794:	f001 f8c5 	bl	8004922 <LCD_Font>
 8003798:	e04c      	b.n	8003834 <main+0x1a88>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800379a:	4b96      	ldr	r3, [pc, #600]	; (80039f4 <main+0x1c48>)
 800379c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f7fd f9b6 	bl	8000b18 <__aeabi_dcmpgt>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <main+0x1a48>
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <main+0x1c48>)
 80037b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b91      	ldr	r3, [pc, #580]	; (8003a04 <main+0x1c58>)
 80037be:	f7fd f98d 	bl	8000adc <__aeabi_dcmplt>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d015      	beq.n	80037f4 <main+0x1a48>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <main+0x1c48>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f107 0014 	add.w	r0, r7, #20
 80037d2:	498d      	ldr	r1, [pc, #564]	; (8003a08 <main+0x1c5c>)
 80037d4:	f006 ffde 	bl	800a794 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80037d8:	f107 0214 	add.w	r2, r7, #20
 80037dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2301      	movs	r3, #1
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4b86      	ldr	r3, [pc, #536]	; (8003a00 <main+0x1c54>)
 80037e8:	215a      	movs	r1, #90	; 0x5a
 80037ea:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80037ee:	f001 f898 	bl	8004922 <LCD_Font>
 80037f2:	e01f      	b.n	8003834 <main+0x1a88>
						}
						else if (temperatureRemoteLast >= 10) {
 80037f4:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <main+0x1c48>)
 80037f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <main+0x1c58>)
 8003800:	f7fd f980 	bl	8000b04 <__aeabi_dcmpge>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <main+0x1a88>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800380a:	4b7a      	ldr	r3, [pc, #488]	; (80039f4 <main+0x1c48>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f107 0014 	add.w	r0, r7, #20
 8003814:	497c      	ldr	r1, [pc, #496]	; (8003a08 <main+0x1c5c>)
 8003816:	f006 ffbd 	bl	800a794 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800381a:	f107 0214 	add.w	r2, r7, #20
 800381e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2301      	movs	r3, #1
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4b75      	ldr	r3, [pc, #468]	; (8003a00 <main+0x1c54>)
 800382a:	215a      	movs	r1, #90	; 0x5a
 800382c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003830:	f001 f877 	bl	8004922 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003834:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <main+0x1c60>)
 8003836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	4b71      	ldr	r3, [pc, #452]	; (8003a04 <main+0x1c58>)
 8003840:	f7fd f960 	bl	8000b04 <__aeabi_dcmpge>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d014      	beq.n	8003874 <main+0x1ac8>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800384a:	4b70      	ldr	r3, [pc, #448]	; (8003a0c <main+0x1c60>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f107 0010 	add.w	r0, r7, #16
 8003854:	4969      	ldr	r1, [pc, #420]	; (80039fc <main+0x1c50>)
 8003856:	f006 ff9d 	bl	800a794 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800385a:	f107 0210 	add.w	r2, r7, #16
 800385e:	2300      	movs	r3, #0
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2301      	movs	r3, #1
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <main+0x1c54>)
 8003868:	2128      	movs	r1, #40	; 0x28
 800386a:	f240 1073 	movw	r0, #371	; 0x173
 800386e:	f001 f858 	bl	8004922 <LCD_Font>
 8003872:	e01e      	b.n	80038b2 <main+0x1b06>
						}
						else if (humidityRemoteLast < 10) {
 8003874:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <main+0x1c60>)
 8003876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <main+0x1c58>)
 8003880:	f7fd f92c 	bl	8000adc <__aeabi_dcmplt>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d013      	beq.n	80038b2 <main+0x1b06>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <main+0x1c60>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f107 0010 	add.w	r0, r7, #16
 8003894:	4959      	ldr	r1, [pc, #356]	; (80039fc <main+0x1c50>)
 8003896:	f006 ff7d 	bl	800a794 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800389a:	f107 0210 	add.w	r2, r7, #16
 800389e:	2300      	movs	r3, #0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2301      	movs	r3, #1
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <main+0x1c54>)
 80038a8:	2128      	movs	r1, #40	; 0x28
 80038aa:	f240 1093 	movw	r0, #403	; 0x193
 80038ae:	f001 f838 	bl	8004922 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <main+0x1c64>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	4954      	ldr	r1, [pc, #336]	; (8003a0c <main+0x1c60>)
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 80038be:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <main+0x1c60>)
 80038c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	4b4e      	ldr	r3, [pc, #312]	; (8003a04 <main+0x1c58>)
 80038ca:	f7fd f91b 	bl	8000b04 <__aeabi_dcmpge>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <main+0x1b54>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80038d4:	4b4d      	ldr	r3, [pc, #308]	; (8003a0c <main+0x1c60>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f107 0010 	add.w	r0, r7, #16
 80038de:	4947      	ldr	r1, [pc, #284]	; (80039fc <main+0x1c50>)
 80038e0:	f006 ff58 	bl	800a794 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80038e4:	f107 0210 	add.w	r2, r7, #16
 80038e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	2301      	movs	r3, #1
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <main+0x1c54>)
 80038f4:	2128      	movs	r1, #40	; 0x28
 80038f6:	f240 1073 	movw	r0, #371	; 0x173
 80038fa:	f001 f812 	bl	8004922 <LCD_Font>
 80038fe:	e01f      	b.n	8003940 <main+0x1b94>
						}
						else if (humidityRemoteLast < 10) {
 8003900:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <main+0x1c60>)
 8003902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <main+0x1c58>)
 800390c:	f7fd f8e6 	bl	8000adc <__aeabi_dcmplt>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d014      	beq.n	8003940 <main+0x1b94>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <main+0x1c60>)
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f107 0010 	add.w	r0, r7, #16
 8003920:	4936      	ldr	r1, [pc, #216]	; (80039fc <main+0x1c50>)
 8003922:	f006 ff37 	bl	800a794 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003926:	f107 0210 	add.w	r2, r7, #16
 800392a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	2301      	movs	r3, #1
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <main+0x1c54>)
 8003936:	2128      	movs	r1, #40	; 0x28
 8003938:	f240 1093 	movw	r0, #403	; 0x193
 800393c:	f000 fff1 	bl	8004922 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 8003940:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <main+0x1c68>)
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800394c:	e009      	b.n	8003962 <main+0x1bb6>
 800394e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8003952:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <main+0x1c6c>)
 8003954:	2100      	movs	r1, #0
 8003956:	54d1      	strb	r1, [r2, r3]
 8003958:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800395c:	3301      	adds	r3, #1
 800395e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8003962:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8003966:	2b0f      	cmp	r3, #15
 8003968:	d9f1      	bls.n	800394e <main+0x1ba2>
			}

			remoteSensorLastUpdate++;
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <main+0x1c70>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <main+0x1c70>)
 8003974:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <main+0x1c70>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	f240 813a 	bls.w	8003bf4 <main+0x1e48>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <main+0x1c48>)
 8003982:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	f7fd f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 8103 	bne.w	8003ba0 <main+0x1df4>
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <main+0x1c60>)
 800399c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	f7fd f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 80f6 	bne.w	8003ba0 <main+0x1df4>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <main+0x1c48>)
 80039b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <main+0x1c4c>)
 80039c0:	f7fd f896 	bl	8000af0 <__aeabi_dcmple>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02a      	beq.n	8003a20 <main+0x1c74>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <main+0x1c48>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f107 0008 	add.w	r0, r7, #8
 80039d4:	4909      	ldr	r1, [pc, #36]	; (80039fc <main+0x1c50>)
 80039d6:	f006 fedd 	bl	800a794 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80039da:	f107 0208 	add.w	r2, r7, #8
 80039de:	2300      	movs	r3, #0
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	2301      	movs	r3, #1
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <main+0x1c54>)
 80039e8:	215a      	movs	r1, #90	; 0x5a
 80039ea:	f240 1061 	movw	r0, #353	; 0x161
 80039ee:	f000 ff98 	bl	8004922 <LCD_Font>
 80039f2:	e08c      	b.n	8003b0e <main+0x1d62>
 80039f4:	200004e0 	.word	0x200004e0
 80039f8:	c0240000 	.word	0xc0240000
 80039fc:	0800f33c 	.word	0x0800f33c
 8003a00:	08011b2c 	.word	0x08011b2c
 8003a04:	40240000 	.word	0x40240000
 8003a08:	0800f344 	.word	0x0800f344
 8003a0c:	200004f0 	.word	0x200004f0
 8003a10:	200004e8 	.word	0x200004e8
 8003a14:	200008b4 	.word	0x200008b4
 8003a18:	200008a4 	.word	0x200008a4
 8003a1c:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003a20:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <main+0x1e54>)
 8003a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	f7fd f855 	bl	8000adc <__aeabi_dcmplt>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01f      	beq.n	8003a78 <main+0x1ccc>
 8003a38:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <main+0x1e54>)
 8003a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <main+0x1e58>)
 8003a44:	f7fd f868 	bl	8000b18 <__aeabi_dcmpgt>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <main+0x1ccc>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <main+0x1e54>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f107 0008 	add.w	r0, r7, #8
 8003a58:	496b      	ldr	r1, [pc, #428]	; (8003c08 <main+0x1e5c>)
 8003a5a:	f006 fe9b 	bl	800a794 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003a5e:	f107 0208 	add.w	r2, r7, #8
 8003a62:	2300      	movs	r3, #0
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2301      	movs	r3, #1
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4b68      	ldr	r3, [pc, #416]	; (8003c0c <main+0x1e60>)
 8003a6c:	215a      	movs	r1, #90	; 0x5a
 8003a6e:	f240 1081 	movw	r0, #385	; 0x181
 8003a72:	f000 ff56 	bl	8004922 <LCD_Font>
 8003a76:	e04a      	b.n	8003b0e <main+0x1d62>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <main+0x1e54>)
 8003a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f7fd f847 	bl	8000b18 <__aeabi_dcmpgt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01f      	beq.n	8003ad0 <main+0x1d24>
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <main+0x1e54>)
 8003a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	; (8003c10 <main+0x1e64>)
 8003a9c:	f7fd f81e 	bl	8000adc <__aeabi_dcmplt>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d014      	beq.n	8003ad0 <main+0x1d24>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003aa6:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <main+0x1e54>)
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f107 0008 	add.w	r0, r7, #8
 8003ab0:	4958      	ldr	r1, [pc, #352]	; (8003c14 <main+0x1e68>)
 8003ab2:	f006 fe6f 	bl	800a794 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003ab6:	f107 0208 	add.w	r2, r7, #8
 8003aba:	2300      	movs	r3, #0
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	2301      	movs	r3, #1
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <main+0x1e60>)
 8003ac4:	215a      	movs	r1, #90	; 0x5a
 8003ac6:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003aca:	f000 ff2a 	bl	8004922 <LCD_Font>
 8003ace:	e01e      	b.n	8003b0e <main+0x1d62>
					}
					else if (temperatureRemoteLast >= 10) {
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <main+0x1e54>)
 8003ad2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <main+0x1e64>)
 8003adc:	f7fd f812 	bl	8000b04 <__aeabi_dcmpge>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d013      	beq.n	8003b0e <main+0x1d62>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <main+0x1e54>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f107 0008 	add.w	r0, r7, #8
 8003af0:	4948      	ldr	r1, [pc, #288]	; (8003c14 <main+0x1e68>)
 8003af2:	f006 fe4f 	bl	800a794 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003af6:	f107 0208 	add.w	r2, r7, #8
 8003afa:	2300      	movs	r3, #0
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	2301      	movs	r3, #1
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4b42      	ldr	r3, [pc, #264]	; (8003c0c <main+0x1e60>)
 8003b04:	215a      	movs	r1, #90	; 0x5a
 8003b06:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003b0a:	f000 ff0a 	bl	8004922 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003b0e:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <main+0x1e6c>)
 8003b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <main+0x1e64>)
 8003b1a:	f7fc fff3 	bl	8000b04 <__aeabi_dcmpge>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <main+0x1d9e>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <main+0x1e6c>)
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	1d38      	adds	r0, r7, #4
 8003b2c:	4936      	ldr	r1, [pc, #216]	; (8003c08 <main+0x1e5c>)
 8003b2e:	f006 fe31 	bl	800a794 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003b32:	1d3a      	adds	r2, r7, #4
 8003b34:	2300      	movs	r3, #0
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	2301      	movs	r3, #1
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <main+0x1e60>)
 8003b3e:	2128      	movs	r1, #40	; 0x28
 8003b40:	f240 1073 	movw	r0, #371	; 0x173
 8003b44:	f000 feed 	bl	8004922 <LCD_Font>
 8003b48:	e01c      	b.n	8003b84 <main+0x1dd8>
					}
					else if (humidityRemoteLast < 10) {
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <main+0x1e6c>)
 8003b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <main+0x1e64>)
 8003b56:	f7fc ffc1 	bl	8000adc <__aeabi_dcmplt>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d011      	beq.n	8003b84 <main+0x1dd8>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003b60:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <main+0x1e6c>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	1d38      	adds	r0, r7, #4
 8003b68:	4927      	ldr	r1, [pc, #156]	; (8003c08 <main+0x1e5c>)
 8003b6a:	f006 fe13 	bl	800a794 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003b6e:	1d3a      	adds	r2, r7, #4
 8003b70:	2300      	movs	r3, #0
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	2301      	movs	r3, #1
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <main+0x1e60>)
 8003b7a:	2128      	movs	r1, #40	; 0x28
 8003b7c:	f240 1093 	movw	r0, #403	; 0x193
 8003b80:	f000 fecf 	bl	8004922 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003b84:	491e      	ldr	r1, [pc, #120]	; (8003c00 <main+0x1e54>)
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 8003b92:	4921      	ldr	r1, [pc, #132]	; (8003c18 <main+0x1e6c>)
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <main+0x1e70>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003baa:	491d      	ldr	r1, [pc, #116]	; (8003c20 <main+0x1e74>)
 8003bac:	4618      	mov	r0, r3
 8003bae:	f006 fdf1 	bl	800a794 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003bb2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <main+0x1e60>)
 8003bc0:	2128      	movs	r1, #40	; 0x28
 8003bc2:	f240 1077 	movw	r0, #375	; 0x177
 8003bc6:	f000 feac 	bl	8004922 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <main+0x1e78>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <main+0x1e74>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f006 fddc 	bl	800a794 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003bdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <main+0x1e7c>)
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2301      	movs	r3, #1
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <main+0x1e60>)
 8003bea:	2128      	movs	r1, #40	; 0x28
 8003bec:	f240 1077 	movw	r0, #375	; 0x177
 8003bf0:	f000 fe97 	bl	8004922 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <main+0x1e78>)
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <main+0x1e70>)
 8003bfa:	701a      	strb	r2, [r3, #0]
	while (1) {
 8003bfc:	f7fe b9c0 	b.w	8001f80 <main+0x1d4>
 8003c00:	200004e0 	.word	0x200004e0
 8003c04:	c0240000 	.word	0xc0240000
 8003c08:	0800f33c 	.word	0x0800f33c
 8003c0c:	08011b2c 	.word	0x08011b2c
 8003c10:	40240000 	.word	0x40240000
 8003c14:	0800f344 	.word	0x0800f344
 8003c18:	200004f0 	.word	0x200004f0
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	0800f2f0 	.word	0x0800f2f0
 8003c24:	200004a9 	.word	0x200004a9
 8003c28:	00ffa500 	.word	0x00ffa500

08003c2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b094      	sub	sp, #80	; 0x50
 8003c30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c32:	f107 0320 	add.w	r3, r7, #32
 8003c36:	2230      	movs	r2, #48	; 0x30
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 feee 	bl	8009a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	4b28      	ldr	r3, [pc, #160]	; (8003cf8 <SystemClock_Config+0xcc>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <SystemClock_Config+0xcc>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <SystemClock_Config+0xcc>)
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <SystemClock_Config+0xd0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <SystemClock_Config+0xd0>)
 8003c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <SystemClock_Config+0xd0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c92:	2302      	movs	r3, #2
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8003ca0:	23a8      	movs	r3, #168	; 0xa8
 8003ca2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ca8:	2307      	movs	r3, #7
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cac:	f107 0320 	add.w	r3, r7, #32
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f003 ff51 	bl	8007b58 <HAL_RCC_OscConfig>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8003cbc:	f000 fa88 	bl	80041d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc0:	230f      	movs	r3, #15
 8003cc2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ccc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cd0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	2105      	movs	r1, #5
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 f9b2 	bl	8008048 <HAL_RCC_ClockConfig>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8003cea:	f000 fa71 	bl	80041d0 <Error_Handler>
	}
}
 8003cee:	bf00      	nop
 8003cf0:	3750      	adds	r7, #80	; 0x50
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000

08003d00 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8003d06:	463b      	mov	r3, r7
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <MX_DAC_Init+0x60>)
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <MX_DAC_Init+0x64>)
 8003d12:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003d14:	4812      	ldr	r0, [pc, #72]	; (8003d60 <MX_DAC_Init+0x60>)
 8003d16:	f001 ff7e 	bl	8005c16 <HAL_DAC_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 8003d20:	f000 fa56 	bl	80041d0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4619      	mov	r1, r3
 8003d32:	480b      	ldr	r0, [pc, #44]	; (8003d60 <MX_DAC_Init+0x60>)
 8003d34:	f001 ff91 	bl	8005c5a <HAL_DAC_ConfigChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_DAC_Init+0x42>
	{
		Error_Handler();
 8003d3e:	f000 fa47 	bl	80041d0 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003d42:	463b      	mov	r3, r7
 8003d44:	2210      	movs	r2, #16
 8003d46:	4619      	mov	r1, r3
 8003d48:	4805      	ldr	r0, [pc, #20]	; (8003d60 <MX_DAC_Init+0x60>)
 8003d4a:	f001 ff86 	bl	8005c5a <HAL_DAC_ConfigChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_DAC_Init+0x58>
	{
		Error_Handler();
 8003d54:	f000 fa3c 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200002a4 	.word	0x200002a4
 8003d64:	40007400 	.word	0x40007400

08003d68 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <MX_I2C1_Init+0x54>)
 8003d70:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d74:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <MX_I2C1_Init+0x58>)
 8003d76:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d8a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003da4:	4804      	ldr	r0, [pc, #16]	; (8003db8 <MX_I2C1_Init+0x50>)
 8003da6:	f002 f975 	bl	8006094 <HAL_I2C_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8003db0:	f000 fa0e 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200002b8 	.word	0x200002b8
 8003dbc:	40005400 	.word	0x40005400
 8003dc0:	00061a80 	.word	0x00061a80

08003dc4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <MX_SPI1_Init+0x68>)
 8003dcc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003dd4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003e10:	220a      	movs	r2, #10
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e14:	4804      	ldr	r0, [pc, #16]	; (8003e28 <MX_SPI1_Init+0x64>)
 8003e16:	f004 fb37 	bl	8008488 <HAL_SPI_Init>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8003e20:	f000 f9d6 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	2000030c 	.word	0x2000030c
 8003e2c:	40013000 	.word	0x40013000

08003e30 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003e34:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e38:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e40:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003e60:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e64:	2238      	movs	r2, #56	; 0x38
 8003e66:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e7c:	220a      	movs	r2, #10
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e80:	4804      	ldr	r0, [pc, #16]	; (8003e94 <MX_SPI2_Init+0x64>)
 8003e82:	f004 fb01 	bl	8008488 <HAL_SPI_Init>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8003e8c:	f000 f9a0 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000364 	.word	0x20000364
 8003e98:	40003800 	.word	0x40003800

08003e9c <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8003ea0:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <MX_SPI3_Init+0x68>)
 8003ea4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eac:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ec8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003ecc:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ed0:	2238      	movs	r2, #56	; 0x38
 8003ed2:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003ee8:	220a      	movs	r2, #10
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003eec:	4804      	ldr	r0, [pc, #16]	; (8003f00 <MX_SPI3_Init+0x64>)
 8003eee:	f004 facb 	bl	8008488 <HAL_SPI_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8003ef8:	f000 f96a 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200003bc 	.word	0x200003bc
 8003f04:	40003c00 	.word	0x40003c00

08003f08 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <MX_USART1_UART_Init+0x50>)
 8003f10:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3e:	4805      	ldr	r0, [pc, #20]	; (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f40:	f005 f88e 	bl	8009060 <HAL_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8003f4a:	f000 f941 	bl	80041d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000414 	.word	0x20000414
 8003f58:	40011000 	.word	0x40011000

08003f5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08c      	sub	sp, #48	; 0x30
 8003f60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	4b60      	ldr	r3, [pc, #384]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a5f      	ldr	r2, [pc, #380]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b5d      	ldr	r3, [pc, #372]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a51      	ldr	r2, [pc, #324]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <MX_GPIO_Init+0x19c>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800401a:	2201      	movs	r2, #1
 800401c:	2140      	movs	r1, #64	; 0x40
 800401e:	4837      	ldr	r0, [pc, #220]	; (80040fc <MX_GPIO_Init+0x1a0>)
 8004020:	f002 f81e 	bl	8006060 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	4834      	ldr	r0, [pc, #208]	; (80040fc <MX_GPIO_Init+0x1a0>)
 800402a:	f002 f819 	bl	8006060 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 800402e:	2201      	movs	r2, #1
 8004030:	2101      	movs	r1, #1
 8004032:	4833      	ldr	r0, [pc, #204]	; (8004100 <MX_GPIO_Init+0x1a4>)
 8004034:	f002 f814 	bl	8006060 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800403e:	4831      	ldr	r0, [pc, #196]	; (8004104 <MX_GPIO_Init+0x1a8>)
 8004040:	f002 f80e 	bl	8006060 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8004044:	2200      	movs	r2, #0
 8004046:	2104      	movs	r1, #4
 8004048:	482f      	ldr	r0, [pc, #188]	; (8004108 <MX_GPIO_Init+0x1ac>)
 800404a:	f002 f809 	bl	8006060 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
	GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 800404e:	2318      	movs	r3, #24
 8004050:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004052:	2300      	movs	r3, #0
 8004054:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800405a:	f107 031c 	add.w	r3, r7, #28
 800405e:	4619      	mov	r1, r3
 8004060:	482a      	ldr	r0, [pc, #168]	; (800410c <MX_GPIO_Init+0x1b0>)
 8004062:	f001 fe49 	bl	8005cf8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_A_Pin LED_B_Pin */
	GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8004066:	23c0      	movs	r3, #192	; 0xc0
 8004068:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406a:	2301      	movs	r3, #1
 800406c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2300      	movs	r3, #0
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004076:	f107 031c 	add.w	r3, r7, #28
 800407a:	4619      	mov	r1, r3
 800407c:	481f      	ldr	r0, [pc, #124]	; (80040fc <MX_GPIO_Init+0x1a0>)
 800407e:	f001 fe3b 	bl	8005cf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_IRQ_Pin */
	GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004082:	2320      	movs	r3, #32
 8004084:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800408a:	2301      	movs	r3, #1
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	4619      	mov	r1, r3
 8004094:	481b      	ldr	r0, [pc, #108]	; (8004104 <MX_GPIO_Init+0x1a8>)
 8004096:	f001 fe2f 	bl	8005cf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : FLASH25Q_CS_Pin */
	GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 800409a:	2301      	movs	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409e:	2301      	movs	r3, #1
 80040a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 80040aa:	f107 031c 	add.w	r3, r7, #28
 80040ae:	4619      	mov	r1, r3
 80040b0:	4813      	ldr	r0, [pc, #76]	; (8004100 <MX_GPIO_Init+0x1a4>)
 80040b2:	f001 fe21 	bl	8005cf8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
	GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 80040b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040bc:	2301      	movs	r3, #1
 80040be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c8:	f107 031c 	add.w	r3, r7, #28
 80040cc:	4619      	mov	r1, r3
 80040ce:	480d      	ldr	r0, [pc, #52]	; (8004104 <MX_GPIO_Init+0x1a8>)
 80040d0:	f001 fe12 	bl	8005cf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CMD_Pin */
	GPIO_InitStruct.Pin = SD_CMD_Pin;
 80040d4:	2304      	movs	r3, #4
 80040d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d8:	2301      	movs	r3, #1
 80040da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	2300      	movs	r3, #0
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80040e4:	f107 031c 	add.w	r3, r7, #28
 80040e8:	4619      	mov	r1, r3
 80040ea:	4807      	ldr	r0, [pc, #28]	; (8004108 <MX_GPIO_Init+0x1ac>)
 80040ec:	f001 fe04 	bl	8005cf8 <HAL_GPIO_Init>

}
 80040f0:	bf00      	nop
 80040f2:	3730      	adds	r7, #48	; 0x30
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40020000 	.word	0x40020000
 8004100:	40020400 	.word	0x40020400
 8004104:	40020800 	.word	0x40020800
 8004108:	40020c00 	.word	0x40020c00
 800410c:	40021000 	.word	0x40021000

08004110 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FSMC_Init 0 */

	/* USER CODE END FSMC_Init 0 */

	FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
 8004124:	615a      	str	r2, [r3, #20]
 8004126:	619a      	str	r2, [r3, #24]

	/* USER CODE END FSMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <MX_FSMC_Init+0xb8>)
 800412a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800412e:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004132:	4a26      	ldr	r2, [pc, #152]	; (80041cc <MX_FSMC_Init+0xbc>)
 8004134:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <MX_FSMC_Init+0xb8>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004142:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <MX_FSMC_Init+0xb8>)
 800414a:	2210      	movs	r2, #16
 800414c:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004150:	2200      	movs	r2, #0
 8004152:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004154:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004156:	2200      	movs	r2, #0
 8004158:	61da      	str	r2, [r3, #28]
	hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800415a:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <MX_FSMC_Init+0xb8>)
 800415c:	2200      	movs	r2, #0
 800415e:	621a      	str	r2, [r3, #32]
	hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004162:	2200      	movs	r2, #0
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004170:	2200      	movs	r2, #0
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <MX_FSMC_Init+0xb8>)
 800417c:	2200      	movs	r2, #0
 800417e:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004182:	2200      	movs	r2, #0
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <MX_FSMC_Init+0xb8>)
 8004188:	2200      	movs	r2, #0
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 2;
 800418c:	2302      	movs	r3, #2
 800418e:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 8004190:	230f      	movs	r3, #15
 8004192:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 5;
 8004194:	2305      	movs	r3, #5
 8004196:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 2;
 8004198:	2302      	movs	r3, #2
 800419a:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800419c:	2310      	movs	r3, #16
 800419e:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80041a0:	2311      	movs	r3, #17
 80041a2:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	2200      	movs	r2, #0
 80041ac:	4619      	mov	r1, r3
 80041ae:	4806      	ldr	r0, [pc, #24]	; (80041c8 <MX_FSMC_Init+0xb8>)
 80041b0:	f004 ff12 	bl	8008fd8 <HAL_SRAM_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_FSMC_Init+0xae>
	{
		Error_Handler( );
 80041ba:	f000 f809 	bl	80041d0 <Error_Handler>
	}

	/* USER CODE BEGIN FSMC_Init 2 */

	/* USER CODE END FSMC_Init 2 */
}
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000458 	.word	0x20000458
 80041cc:	a0000104 	.word	0xa0000104

080041d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
}
 80041d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80041d8:	e7fe      	b.n	80041d8 <Error_Handler+0x8>

080041da <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b) {
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	4603      	mov	r3, r0
 80041e2:	71fb      	strb	r3, [r7, #7]
 80041e4:	460b      	mov	r3, r1
 80041e6:	71bb      	strb	r3, [r7, #6]
 80041e8:	4613      	mov	r3, r2
 80041ea:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	041a      	lsls	r2, r3, #16
 80041f0:	79bb      	ldrb	r3, [r7, #6]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	441a      	add	r2, r3
 80041f6:	797b      	ldrb	r3, [r7, #5]
 80041f8:	4413      	add	r3, r2
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24) {
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	6039      	str	r1, [r7, #0]
 8004210:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <H24_RGB565+0x4a>
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	b2db      	uxtb	r3, r3
 800422e:	02db      	lsls	r3, r3, #11
 8004230:	b21a      	sxth	r2, r3
 8004232:	7bbb      	ldrb	r3, [r7, #14]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	b2db      	uxtb	r3, r3
 8004238:	015b      	lsls	r3, r3, #5
 800423a:	b21b      	sxth	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b21a      	sxth	r2, r3
 8004240:	7b7b      	ldrb	r3, [r7, #13]
 8004242:	08db      	lsrs	r3, r3, #3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	b21b      	sxth	r3, r3
 8004248:	4313      	orrs	r3, r2
 800424a:	b21b      	sxth	r3, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	e012      	b.n	8004276 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8004250:	7b7b      	ldrb	r3, [r7, #13]
 8004252:	08db      	lsrs	r3, r3, #3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	02db      	lsls	r3, r3, #11
 8004258:	b21a      	sxth	r2, r3
 800425a:	7bbb      	ldrb	r3, [r7, #14]
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	015b      	lsls	r3, r3, #5
 8004262:	b21b      	sxth	r3, r3
 8004264:	4313      	orrs	r3, r2
 8004266:	b21a      	sxth	r2, r3
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	08db      	lsrs	r3, r3, #3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	b21b      	sxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	b21b      	sxth	r3, r3
 8004274:	b29b      	uxth	r3, r3
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd) {
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	4603      	mov	r3, r0
 800428a:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 800428c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	8013      	strh	r3, [r2, #0]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat) {
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	e005      	b.n	80042bc <LCD_Send_Dat+0x1c>
	DAT = dat;
 80042b0:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <LCD_Send_Dat+0x30>)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	3301      	adds	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f6      	beq.n	80042b0 <LCD_Send_Dat+0x10>
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	60080000 	.word	0x60080000

080042d4 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	80fb      	strh	r3, [r7, #6]
 80042e6:	4603      	mov	r3, r0
 80042e8:	80bb      	strh	r3, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	807b      	strh	r3, [r7, #2]
 80042ee:	4613      	mov	r3, r2
 80042f0:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 80042f2:	202a      	movs	r0, #42	; 0x2a
 80042f4:	f7ff ffc5 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 80042f8:	88bb      	ldrh	r3, [r7, #4]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ffce 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004304:	88bb      	ldrh	r3, [r7, #4]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	b29b      	uxth	r3, r3
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ffc8 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8004310:	883b      	ldrh	r3, [r7, #0]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	b29b      	uxth	r3, r3
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ffc2 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 800431c:	883b      	ldrh	r3, [r7, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	b29b      	uxth	r3, r3
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ffbc 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8004328:	202b      	movs	r0, #43	; 0x2b
 800432a:	f7ff ffaa 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	b29b      	uxth	r3, r3
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ffb3 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	b29b      	uxth	r3, r3
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ffad 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	b29b      	uxth	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ffa7 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8004352:	887b      	ldrh	r3, [r7, #2]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ffa1 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	f7ff ff8f 	bl	8004282 <LCD_Send_Cmd>
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}

0800436c <LCD_Rect_Fill>:
void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24) {
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(1, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24) {
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	4604      	mov	r4, r0
 8004374:	4608      	mov	r0, r1
 8004376:	4611      	mov	r1, r2
 8004378:	461a      	mov	r2, r3
 800437a:	4623      	mov	r3, r4
 800437c:	80fb      	strh	r3, [r7, #6]
 800437e:	4603      	mov	r3, r0
 8004380:	80bb      	strh	r3, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	807b      	strh	r3, [r7, #2]
 8004386:	4613      	mov	r3, r2
 8004388:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 800438e:	887b      	ldrh	r3, [r7, #2]
 8004390:	883a      	ldrh	r2, [r7, #0]
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004398:	88ba      	ldrh	r2, [r7, #4]
 800439a:	883b      	ldrh	r3, [r7, #0]
 800439c:	4413      	add	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29c      	uxth	r4, r3
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	887b      	ldrh	r3, [r7, #2]
 80043a8:	4413      	add	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	88f9      	ldrh	r1, [r7, #6]
 80043b2:	88b8      	ldrh	r0, [r7, #4]
 80043b4:	4622      	mov	r2, r4
 80043b6:	f7ff ff8d 	bl	80042d4 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e00a      	b.n	80043d6 <LCD_Rect_Fill+0x6a>
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7ff ff1f 	bl	8004206 <H24_RGB565>
 80043c8:	4603      	mov	r3, r0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff68 	bl	80042a0 <LCD_Send_Dat>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3f0      	bcc.n	80043c0 <LCD_Rect_Fill+0x54>
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd90      	pop	{r4, r7, pc}

080043e8 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24) {
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b08b      	sub	sp, #44	; 0x2c
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	80fb      	strh	r3, [r7, #6]
 80043fa:	4603      	mov	r3, r0
 80043fc:	80bb      	strh	r3, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	807b      	strh	r3, [r7, #2]
 8004402:	4613      	mov	r3, r2
 8004404:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bfb8      	it	lt
 8004410:	425b      	neglt	r3, r3
 8004412:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8004414:	883a      	ldrh	r2, [r7, #0]
 8004416:	88bb      	ldrh	r3, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bfb8      	it	lt
 800441e:	425b      	neglt	r3, r3
 8004420:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	887b      	ldrh	r3, [r7, #2]
 8004426:	429a      	cmp	r2, r3
 8004428:	d201      	bcs.n	800442e <LCD_Line+0x46>
 800442a:	2301      	movs	r3, #1
 800442c:	e001      	b.n	8004432 <LCD_Line+0x4a>
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8004434:	88ba      	ldrh	r2, [r7, #4]
 8004436:	883b      	ldrh	r3, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d201      	bcs.n	8004440 <LCD_Line+0x58>
 800443c:	2301      	movs	r3, #1
 800443e:	e001      	b.n	8004444 <LCD_Line+0x5c>
 8004440:	f04f 33ff 	mov.w	r3, #4294967295
 8004444:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004452:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004456:	b29a      	uxth	r2, r3
 8004458:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800445c:	b29c      	uxth	r4, r3
 800445e:	88b9      	ldrh	r1, [r7, #4]
 8004460:	88f8      	ldrh	r0, [r7, #6]
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4623      	mov	r3, r4
 8004468:	f7ff ff80 	bl	800436c <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	429a      	cmp	r2, r3
 8004472:	d103      	bne.n	800447c <LCD_Line+0x94>
 8004474:	88ba      	ldrh	r2, [r7, #4]
 8004476:	883b      	ldrh	r3, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d01e      	beq.n	80044ba <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	425b      	negs	r3, r3
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	dd08      	ble.n	800449e <LCD_Line+0xb6>
		{
			error -= deltaY;
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	b29a      	uxth	r2, r3
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4413      	add	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	dad5      	bge.n	8004452 <LCD_Line+0x6a>
		{
			error += deltaX;
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	4413      	add	r3, r2
 80044ac:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80044b8:	e7cb      	b.n	8004452 <LCD_Line+0x6a>
		break;
 80044ba:	bf00      	nop
		}
	}
}
 80044bc:	bf00      	nop
 80044be:	3724      	adds	r7, #36	; 0x24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}

080044c4 <LCD_Rect>:
		x += xinc2;
		y += yinc2;
	}
}

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24) {
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	4604      	mov	r4, r0
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4623      	mov	r3, r4
 80044d4:	80fb      	strh	r3, [r7, #6]
 80044d6:	4603      	mov	r3, r0
 80044d8:	80bb      	strh	r3, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	807b      	strh	r3, [r7, #2]
 80044de:	4613      	mov	r3, r2
 80044e0:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	4413      	add	r3, r2
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	88bc      	ldrh	r4, [r7, #4]
 80044ec:	88b9      	ldrh	r1, [r7, #4]
 80044ee:	88f8      	ldrh	r0, [r7, #6]
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	7e3b      	ldrb	r3, [r7, #24]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4623      	mov	r3, r4
 80044fa:	f7ff ff75 	bl	80043e8 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80044fe:	88ba      	ldrh	r2, [r7, #4]
 8004500:	883b      	ldrh	r3, [r7, #0]
 8004502:	4413      	add	r3, r2
 8004504:	b299      	uxth	r1, r3
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	887b      	ldrh	r3, [r7, #2]
 800450a:	4413      	add	r3, r2
 800450c:	b29c      	uxth	r4, r3
 800450e:	88ba      	ldrh	r2, [r7, #4]
 8004510:	883b      	ldrh	r3, [r7, #0]
 8004512:	4413      	add	r3, r2
 8004514:	b29a      	uxth	r2, r3
 8004516:	88f8      	ldrh	r0, [r7, #6]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	7e3b      	ldrb	r3, [r7, #24]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	4622      	mov	r2, r4
 8004524:	f7ff ff60 	bl	80043e8 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004528:	88ba      	ldrh	r2, [r7, #4]
 800452a:	883b      	ldrh	r3, [r7, #0]
 800452c:	4413      	add	r3, r2
 800452e:	b29c      	uxth	r4, r3
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	88b9      	ldrh	r1, [r7, #4]
 8004534:	88f8      	ldrh	r0, [r7, #6]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	7e3b      	ldrb	r3, [r7, #24]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4623      	mov	r3, r4
 8004540:	f7ff ff52 	bl	80043e8 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	887b      	ldrh	r3, [r7, #2]
 8004548:	4413      	add	r3, r2
 800454a:	b298      	uxth	r0, r3
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	887b      	ldrh	r3, [r7, #2]
 8004550:	4413      	add	r3, r2
 8004552:	b29c      	uxth	r4, r3
 8004554:	88ba      	ldrh	r2, [r7, #4]
 8004556:	883b      	ldrh	r3, [r7, #0]
 8004558:	4413      	add	r3, r2
 800455a:	b29a      	uxth	r2, r3
 800455c:	88b9      	ldrh	r1, [r7, #4]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	7e3b      	ldrb	r3, [r7, #24]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	4622      	mov	r2, r4
 800456a:	f7ff ff3d 	bl	80043e8 <LCD_Line>
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bd90      	pop	{r4, r7, pc}

08004576 <LCD_Circle>:
			s += rx2 * ((4 * y) + 6);
		}
	}
}

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24) {
 8004576:	b590      	push	{r4, r7, lr}
 8004578:	b089      	sub	sp, #36	; 0x24
 800457a:	af02      	add	r7, sp, #8
 800457c:	4604      	mov	r4, r0
 800457e:	4608      	mov	r0, r1
 8004580:	4611      	mov	r1, r2
 8004582:	461a      	mov	r2, r3
 8004584:	4623      	mov	r3, r4
 8004586:	80fb      	strh	r3, [r7, #6]
 8004588:	4603      	mov	r3, r0
 800458a:	80bb      	strh	r3, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
 8004590:	4613      	mov	r3, r2
 8004592:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f1c3 0301 	rsb	r3, r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 80045a4:	e0fc      	b.n	80047a0 <LCD_Circle+0x22a>
	{
		if (fill == 1)
 80045a6:	78bb      	ldrb	r3, [r7, #2]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d136      	bne.n	800461a <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	b298      	uxth	r0, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	88ba      	ldrh	r2, [r7, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	b299      	uxth	r1, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	b29c      	uxth	r4, r3
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4623      	mov	r3, r4
 80045de:	f7ff fec5 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	b298      	uxth	r0, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	88ba      	ldrh	r2, [r7, #4]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	b299      	uxth	r1, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	b29b      	uxth	r3, r3
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	b29b      	uxth	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	b29c      	uxth	r4, r3
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4623      	mov	r3, r4
 8004614:	f7ff feaa 	bl	800436c <LCD_Rect_Fill>
 8004618:	e0a7      	b.n	800476a <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	b29a      	uxth	r2, r3
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	4413      	add	r3, r2
 8004622:	b298      	uxth	r0, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	b29a      	uxth	r2, r3
 8004628:	88bb      	ldrh	r3, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	b299      	uxth	r1, r3
 800462e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004632:	b29a      	uxth	r2, r3
 8004634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004638:	b29c      	uxth	r4, r3
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4623      	mov	r3, r4
 8004640:	f7ff fe94 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	b29a      	uxth	r2, r3
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4413      	add	r3, r2
 800464c:	b298      	uxth	r0, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	b29a      	uxth	r2, r3
 8004652:	88bb      	ldrh	r3, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	b299      	uxth	r1, r3
 8004658:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800465c:	b29a      	uxth	r2, r3
 800465e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004662:	b29c      	uxth	r4, r3
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4623      	mov	r3, r4
 800466a:	f7ff fe7f 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	b29b      	uxth	r3, r3
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	b298      	uxth	r0, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	b29a      	uxth	r2, r3
 800467c:	88bb      	ldrh	r3, [r7, #4]
 800467e:	4413      	add	r3, r2
 8004680:	b299      	uxth	r1, r3
 8004682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004686:	b29a      	uxth	r2, r3
 8004688:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800468c:	b29c      	uxth	r4, r3
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4623      	mov	r3, r4
 8004694:	f7ff fe6a 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	b29b      	uxth	r3, r3
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	b298      	uxth	r0, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	b299      	uxth	r1, r3
 80046ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b6:	b29c      	uxth	r4, r3
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	4623      	mov	r3, r4
 80046be:	f7ff fe55 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	4413      	add	r3, r2
 80046ca:	b298      	uxth	r0, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	88ba      	ldrh	r2, [r7, #4]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	b299      	uxth	r1, r3
 80046d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046da:	b29a      	uxth	r2, r3
 80046dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046e0:	b29c      	uxth	r4, r3
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	4623      	mov	r3, r4
 80046e8:	f7ff fe40 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	4413      	add	r3, r2
 80046f4:	b298      	uxth	r0, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	88ba      	ldrh	r2, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	b299      	uxth	r1, r3
 8004700:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004704:	b29a      	uxth	r2, r3
 8004706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800470a:	b29c      	uxth	r4, r3
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4623      	mov	r3, r4
 8004712:	f7ff fe2b 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	b29b      	uxth	r3, r3
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	b298      	uxth	r0, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	b29b      	uxth	r3, r3
 8004724:	88ba      	ldrh	r2, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	b299      	uxth	r1, r3
 800472a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800472e:	b29a      	uxth	r2, r3
 8004730:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004734:	b29c      	uxth	r4, r3
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4623      	mov	r3, r4
 800473c:	f7ff fe16 	bl	800436c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	b29b      	uxth	r3, r3
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	b298      	uxth	r0, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	b29b      	uxth	r3, r3
 800474e:	88ba      	ldrh	r2, [r7, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	b299      	uxth	r1, r3
 8004754:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004758:	b29a      	uxth	r2, r3
 800475a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800475e:	b29c      	uxth	r4, r3
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4623      	mov	r3, r4
 8004766:	f7ff fe01 	bl	800436c <LCD_Rect_Fill>
		}
		if (P < 0)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da09      	bge.n	8004784 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1cda      	adds	r2, r3, #3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
			a_++;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e00d      	b.n	80047a0 <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1d5a      	adds	r2, r3, #5
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1acb      	subs	r3, r1, r3
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
			a_++;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
			b_--;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3b01      	subs	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f77f aefe 	ble.w	80045a6 <LCD_Circle+0x30>
		}
	}
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <LCD_Char>:
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
}

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24) {
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b08b      	sub	sp, #44	; 0x2c
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60ba      	str	r2, [r7, #8]
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	4603      	mov	r3, r0
 80047c0:	81fb      	strh	r3, [r7, #14]
 80047c2:	460b      	mov	r3, r1
 80047c4:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	777b      	strb	r3, [r7, #29]
 80047d6:	2300      	movs	r3, #0
 80047d8:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80047de:	2300      	movs	r3, #0
 80047e0:	763b      	strb	r3, [r7, #24]
 80047e2:	e093      	b.n	800490c <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	767b      	strb	r3, [r7, #25]
 80047e8:	e052      	b.n	8004890 <LCD_Char+0xdc>
		{
			if(bit == 0)
 80047ea:	7f3b      	ldrb	r3, [r7, #28]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80047f0:	8bfb      	ldrh	r3, [r7, #30]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	83fa      	strh	r2, [r7, #30]
 80047f6:	461a      	mov	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8004804:	7f7a      	ldrb	r2, [r7, #29]
 8004806:	7f3b      	ldrb	r3, [r7, #28]
 8004808:	4013      	ands	r3, r2
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <LCD_Char+0x64>
			{
				set_pixels++;
 8004810:	8b7b      	ldrh	r3, [r7, #26]
 8004812:	3301      	adds	r3, #1
 8004814:	837b      	strh	r3, [r7, #26]
 8004816:	e035      	b.n	8004884 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8004818:	8b7b      	ldrh	r3, [r7, #26]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d032      	beq.n	8004884 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8004824:	461a      	mov	r2, r3
 8004826:	7e7b      	ldrb	r3, [r7, #25]
 8004828:	441a      	add	r2, r3
 800482a:	8b7b      	ldrh	r3, [r7, #26]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	b29a      	uxth	r2, r3
 8004830:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004834:	b29b      	uxth	r3, r3
 8004836:	fb12 f303 	smulbb	r3, r2, r3
 800483a:	b29a      	uxth	r2, r3
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	4413      	add	r3, r2
 8004840:	b298      	uxth	r0, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004848:	461a      	mov	r2, r3
 800484a:	7e3b      	ldrb	r3, [r7, #24]
 800484c:	4413      	add	r3, r2
 800484e:	b29a      	uxth	r2, r3
 8004850:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004854:	b29b      	uxth	r3, r3
 8004856:	fb12 f303 	smulbb	r3, r2, r3
 800485a:	b29a      	uxth	r2, r3
 800485c:	89bb      	ldrh	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	b299      	uxth	r1, r3
 8004862:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004866:	b29b      	uxth	r3, r3
 8004868:	8b7a      	ldrh	r2, [r7, #26]
 800486a:	fb12 f303 	smulbb	r3, r2, r3
 800486e:	b29a      	uxth	r2, r3
 8004870:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004874:	b29c      	uxth	r4, r3
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	4623      	mov	r3, r4
 800487c:	f7ff fd76 	bl	800436c <LCD_Rect_Fill>
				set_pixels = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8004884:	7f3b      	ldrb	r3, [r7, #28]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800488a:	7e7b      	ldrb	r3, [r7, #25]
 800488c:	3301      	adds	r3, #1
 800488e:	767b      	strb	r3, [r7, #25]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	789b      	ldrb	r3, [r3, #2]
 8004894:	7e7a      	ldrb	r2, [r7, #25]
 8004896:	429a      	cmp	r2, r3
 8004898:	d3a7      	bcc.n	80047ea <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 800489a:	8b7b      	ldrh	r3, [r7, #26]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d032      	beq.n	8004906 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80048a6:	461a      	mov	r2, r3
 80048a8:	7e7b      	ldrb	r3, [r7, #25]
 80048aa:	441a      	add	r2, r3
 80048ac:	8b7b      	ldrh	r3, [r7, #26]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	fb12 f303 	smulbb	r3, r2, r3
 80048bc:	b29a      	uxth	r2, r3
 80048be:	89fb      	ldrh	r3, [r7, #14]
 80048c0:	4413      	add	r3, r2
 80048c2:	b298      	uxth	r0, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80048ca:	461a      	mov	r2, r3
 80048cc:	7e3b      	ldrb	r3, [r7, #24]
 80048ce:	4413      	add	r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	fb12 f303 	smulbb	r3, r2, r3
 80048dc:	b29a      	uxth	r2, r3
 80048de:	89bb      	ldrh	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	b299      	uxth	r1, r3
 80048e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8b7a      	ldrh	r2, [r7, #26]
 80048ec:	fb12 f303 	smulbb	r3, r2, r3
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048f6:	b29c      	uxth	r4, r3
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4623      	mov	r3, r4
 80048fe:	f7ff fd35 	bl	800436c <LCD_Rect_Fill>
			set_pixels = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8004906:	7e3b      	ldrb	r3, [r7, #24]
 8004908:	3301      	adds	r3, #1
 800490a:	763b      	strb	r3, [r7, #24]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	78db      	ldrb	r3, [r3, #3]
 8004910:	7e3a      	ldrb	r2, [r7, #24]
 8004912:	429a      	cmp	r2, r3
 8004914:	f4ff af66 	bcc.w	80047e4 <LCD_Char+0x30>
		}
	}
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd90      	pop	{r4, r7, pc}

08004922 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24) {
 8004922:	b590      	push	{r4, r7, lr}
 8004924:	b08f      	sub	sp, #60	; 0x3c
 8004926:	af02      	add	r7, sp, #8
 8004928:	60ba      	str	r2, [r7, #8]
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	4603      	mov	r3, r0
 800492e:	81fb      	strh	r3, [r7, #14]
 8004930:	460b      	mov	r3, r1
 8004932:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8004934:	89fb      	ldrh	r3, [r7, #14]
 8004936:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8004938:	89bb      	ldrh	r3, [r7, #12]
 800493a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 800493c:	f107 031c 	add.w	r3, r7, #28
 8004940:	220c      	movs	r2, #12
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4618      	mov	r0, r3
 8004946:	f005 f85b 	bl	8009a00 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800494a:	2300      	movs	r3, #0
 800494c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800494e:	e056      	b.n	80049fe <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8004950:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 800495c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004960:	2b0a      	cmp	r3, #10
 8004962:	d10f      	bne.n	8004984 <LCD_Font+0x62>
		{
			cursor_x = x;
 8004964:	89fb      	ldrh	r3, [r7, #14]
 8004966:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8004968:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800496c:	b29a      	uxth	r2, r3
 800496e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004972:	b29b      	uxth	r3, r3
 8004974:	fb12 f303 	smulbb	r3, r2, r3
 8004978:	b29a      	uxth	r2, r3
 800497a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800497c:	4413      	add	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004982:	e039      	b.n	80049f8 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8004984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004988:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800498c:	429a      	cmp	r2, r3
 800498e:	d333      	bcc.n	80049f8 <LCD_Font+0xd6>
 8004990:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004994:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004998:	429a      	cmp	r2, r3
 800499a:	d82d      	bhi.n	80049f8 <LCD_Font+0xd6>
 800499c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80049a0:	2b0d      	cmp	r3, #13
 80049a2:	d029      	beq.n	80049f8 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80049aa:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80049ae:	1a5b      	subs	r3, r3, r1
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	18d1      	adds	r1, r2, r3
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	2208      	movs	r2, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f005 f820 	bl	8009a00 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80049c0:	f107 041c 	add.w	r4, r7, #28
 80049c4:	f107 0214 	add.w	r2, r7, #20
 80049c8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80049cc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80049d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	4623      	mov	r3, r4
 80049dc:	f7ff feea 	bl	80047b4 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80049e0:	7e3b      	ldrb	r3, [r7, #24]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	fb12 f303 	smulbb	r3, r2, r3
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049f2:	4413      	add	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80049f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049fa:	3301      	adds	r3, #1
 80049fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80049fe:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004a00:	68b8      	ldr	r0, [r7, #8]
 8004a02:	f7fb fbe5 	bl	80001d0 <strlen>
 8004a06:	4603      	mov	r3, r0
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	d3a1      	bcc.n	8004950 <LCD_Font+0x2e>
		}
	}
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	3734      	adds	r7, #52	; 0x34
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd90      	pop	{r4, r7, pc}

08004a16 <LCD_Init>:

void LCD_Init(void) {
 8004a16:	b580      	push	{r7, lr}
 8004a18:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8004a1a:	2096      	movs	r0, #150	; 0x96
 8004a1c:	f000 fff2 	bl	8005a04 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 8004a20:	2001      	movs	r0, #1
 8004a22:	f7ff fc2e 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 8004a26:	2029      	movs	r0, #41	; 0x29
 8004a28:	f7ff fc2b 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8004a2c:	20e2      	movs	r0, #226	; 0xe2
 8004a2e:	f7ff fc28 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 8004a32:	201d      	movs	r0, #29
 8004a34:	f7ff fc34 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 8004a38:	2002      	movs	r0, #2
 8004a3a:	f7ff fc31 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 8004a3e:	20ff      	movs	r0, #255	; 0xff
 8004a40:	f7ff fc2e 	bl	80042a0 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 8004a44:	20e0      	movs	r0, #224	; 0xe0
 8004a46:	f7ff fc1c 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7ff fc28 	bl	80042a0 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 8004a50:	2078      	movs	r0, #120	; 0x78
 8004a52:	f000 ffd7 	bl	8005a04 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 8004a56:	20e0      	movs	r0, #224	; 0xe0
 8004a58:	f7ff fc13 	bl	8004282 <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 8004a5c:	2003      	movs	r0, #3
 8004a5e:	f7ff fc1f 	bl	80042a0 <LCD_Send_Dat>
	HAL_Delay(120);
 8004a62:	2078      	movs	r0, #120	; 0x78
 8004a64:	f000 ffce 	bl	8005a04 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f7ff fc0a 	bl	8004282 <LCD_Send_Cmd>
	HAL_Delay(120);
 8004a6e:	2078      	movs	r0, #120	; 0x78
 8004a70:	f000 ffc8 	bl	8005a04 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8004a74:	20e6      	movs	r0, #230	; 0xe6
 8004a76:	f7ff fc04 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f7ff fc10 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 8004a80:	2085      	movs	r0, #133	; 0x85
 8004a82:	f7ff fc0d 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8004a86:	201d      	movs	r0, #29
 8004a88:	f7ff fc0a 	bl	80042a0 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 8004a8c:	20b0      	movs	r0, #176	; 0xb0
 8004a8e:	f7ff fbf8 	bl	8004282 <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8004a92:	20ae      	movs	r0, #174	; 0xae
 8004a94:	f7ff fc04 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 8004a98:	2020      	movs	r0, #32
 8004a9a:	f7ff fc01 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	f7ff fbfe 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8004aa4:	201f      	movs	r0, #31
 8004aa6:	f7ff fbfb 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f7ff fbf8 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 8004ab0:	20df      	movs	r0, #223	; 0xdf
 8004ab2:	f7ff fbf5 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8004ab6:	202d      	movs	r0, #45	; 0x2d
 8004ab8:	f7ff fbf2 	bl	80042a0 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 8004abc:	20b4      	movs	r0, #180	; 0xb4
 8004abe:	f7ff fbe0 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8004ac2:	2003      	movs	r0, #3
 8004ac4:	f7ff fbec 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8004ac8:	20a0      	movs	r0, #160	; 0xa0
 8004aca:	f7ff fbe9 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f7ff fbe6 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8004ad4:	202e      	movs	r0, #46	; 0x2e
 8004ad6:	f7ff fbe3 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8004ada:	2030      	movs	r0, #48	; 0x30
 8004adc:	f7ff fbe0 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7ff fbdd 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8004ae6:	200f      	movs	r0, #15
 8004ae8:	f7ff fbda 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8004aec:	2000      	movs	r0, #0
 8004aee:	f7ff fbd7 	bl	80042a0 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 8004af2:	20b6      	movs	r0, #182	; 0xb6
 8004af4:	f7ff fbc5 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8004af8:	2002      	movs	r0, #2
 8004afa:	f7ff fbd1 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8004afe:	200d      	movs	r0, #13
 8004b00:	f7ff fbce 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7ff fbcb 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8004b0a:	2010      	movs	r0, #16
 8004b0c:	f7ff fbc8 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 8004b10:	2010      	movs	r0, #16
 8004b12:	f7ff fbc5 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8004b16:	2008      	movs	r0, #8
 8004b18:	f7ff fbc2 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f7ff fbbf 	bl	80042a0 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 8004b22:	20be      	movs	r0, #190	; 0xbe
 8004b24:	f7ff fbad 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 8004b28:	2008      	movs	r0, #8
 8004b2a:	f7ff fbb9 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8004b2e:	20ff      	movs	r0, #255	; 0xff
 8004b30:	f7ff fbb6 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7ff fbb3 	bl	80042a0 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 8004b3a:	2036      	movs	r0, #54	; 0x36
 8004b3c:	f7ff fba1 	bl	8004282 <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 8004b40:	2003      	movs	r0, #3
 8004b42:	f7ff fbad 	bl	80042a0 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 8004b46:	20f0      	movs	r0, #240	; 0xf0
 8004b48:	f7ff fb9b 	bl	8004282 <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	f7ff fba7 	bl	80042a0 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 8004b52:	2029      	movs	r0, #41	; 0x29
 8004b54:	f7ff fb95 	bl	8004282 <LCD_Send_Cmd>
}
 8004b58:	bf00      	nop
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <HAL_MspInit+0x4c>)
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ba8 <HAL_MspInit+0x4c>)
 8004b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b70:	6453      	str	r3, [r2, #68]	; 0x44
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <HAL_MspInit+0x4c>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_MspInit+0x4c>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <HAL_MspInit+0x4c>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_MspInit+0x4c>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800

08004bac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <HAL_DAC_MspInit+0x7c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d127      	bne.n	8004c1e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <HAL_DAC_MspInit+0x80>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <HAL_DAC_MspInit+0x80>)
 8004bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_DAC_MspInit+0x80>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <HAL_DAC_MspInit+0x80>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4a0e      	ldr	r2, [pc, #56]	; (8004c2c <HAL_DAC_MspInit+0x80>)
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_DAC_MspInit+0x80>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c06:	2330      	movs	r3, #48	; 0x30
 8004c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c12:	f107 0314 	add.w	r3, r7, #20
 8004c16:	4619      	mov	r1, r3
 8004c18:	4805      	ldr	r0, [pc, #20]	; (8004c30 <HAL_DAC_MspInit+0x84>)
 8004c1a:	f001 f86d 	bl	8005cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004c1e:	bf00      	nop
 8004c20:	3728      	adds	r7, #40	; 0x28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40007400 	.word	0x40007400
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020000 	.word	0x40020000

08004c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_I2C_MspInit+0x84>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d12b      	bne.n	8004cae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <HAL_I2C_MspInit+0x88>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_I2C_MspInit+0x88>)
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	6313      	str	r3, [r2, #48]	; 0x30
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_I2C_MspInit+0x88>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c72:	23c0      	movs	r3, #192	; 0xc0
 8004c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c76:	2312      	movs	r3, #18
 8004c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c82:	2304      	movs	r3, #4
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c86:	f107 0314 	add.w	r3, r7, #20
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <HAL_I2C_MspInit+0x8c>)
 8004c8e:	f001 f833 	bl	8005cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_I2C_MspInit+0x88>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <HAL_I2C_MspInit+0x88>)
 8004c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_I2C_MspInit+0x88>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004cae:	bf00      	nop
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40005400 	.word	0x40005400
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40020400 	.word	0x40020400

08004cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5b      	ldr	r2, [pc, #364]	; (8004e50 <HAL_SPI_MspInit+0x18c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d12c      	bne.n	8004d40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	4b5a      	ldr	r3, [pc, #360]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4a59      	ldr	r2, [pc, #356]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf6:	4b57      	ldr	r3, [pc, #348]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	4a52      	ldr	r2, [pc, #328]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	6313      	str	r3, [r2, #48]	; 0x30
 8004d12:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d1e:	2338      	movs	r3, #56	; 0x38
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d22:	2302      	movs	r3, #2
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d2e:	2305      	movs	r3, #5
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d36:	4619      	mov	r1, r3
 8004d38:	4847      	ldr	r0, [pc, #284]	; (8004e58 <HAL_SPI_MspInit+0x194>)
 8004d3a:	f000 ffdd 	bl	8005cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004d3e:	e083      	b.n	8004e48 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a45      	ldr	r2, [pc, #276]	; (8004e5c <HAL_SPI_MspInit+0x198>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d12d      	bne.n	8004da6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d58:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	4a39      	ldr	r2, [pc, #228]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d70:	f043 0302 	orr.w	r3, r3, #2
 8004d74:	6313      	str	r3, [r2, #48]	; 0x30
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d82:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d90:	2303      	movs	r3, #3
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d94:	2305      	movs	r3, #5
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	482e      	ldr	r0, [pc, #184]	; (8004e58 <HAL_SPI_MspInit+0x194>)
 8004da0:	f000 ffaa 	bl	8005cf8 <HAL_GPIO_Init>
}
 8004da4:	e050      	b.n	8004e48 <HAL_SPI_MspInit+0x184>
  else if(hspi->Instance==SPI3)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a2d      	ldr	r2, [pc, #180]	; (8004e60 <HAL_SPI_MspInit+0x19c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d14b      	bne.n	8004e48 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6313      	str	r3, [r2, #48]	; 0x30
 8004ddc:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004df2:	f043 0304 	orr.w	r3, r3, #4
 8004df6:	6313      	str	r3, [r2, #48]	; 0x30
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <HAL_SPI_MspInit+0x190>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e12:	2303      	movs	r3, #3
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e16:	2306      	movs	r3, #6
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4810      	ldr	r0, [pc, #64]	; (8004e64 <HAL_SPI_MspInit+0x1a0>)
 8004e22:	f000 ff69 	bl	8005cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004e26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e34:	2303      	movs	r3, #3
 8004e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e38:	2306      	movs	r3, #6
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e40:	4619      	mov	r1, r3
 8004e42:	4809      	ldr	r0, [pc, #36]	; (8004e68 <HAL_SPI_MspInit+0x1a4>)
 8004e44:	f000 ff58 	bl	8005cf8 <HAL_GPIO_Init>
}
 8004e48:	bf00      	nop
 8004e4a:	3738      	adds	r7, #56	; 0x38
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40013000 	.word	0x40013000
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40020400 	.word	0x40020400
 8004e5c:	40003800 	.word	0x40003800
 8004e60:	40003c00 	.word	0x40003c00
 8004e64:	40020000 	.word	0x40020000
 8004e68:	40020800 	.word	0x40020800

08004e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_UART_MspInit+0x84>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d12c      	bne.n	8004ee8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004e98:	f043 0310 	orr.w	r3, r3, #16
 8004e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eba:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <HAL_UART_MspInit+0x88>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ec6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ed8:	2307      	movs	r3, #7
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4805      	ldr	r0, [pc, #20]	; (8004ef8 <HAL_UART_MspInit+0x8c>)
 8004ee4:	f000 ff08 	bl	8005cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ee8:	bf00      	nop
 8004eea:	3728      	adds	r7, #40	; 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40011000 	.word	0x40011000
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40020000 	.word	0x40020000

08004efc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004f10:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <HAL_FSMC_MspInit+0x88>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d131      	bne.n	8004f7c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8004f18:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <HAL_FSMC_MspInit+0x88>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <HAL_FSMC_MspInit+0x8c>)
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_FSMC_MspInit+0x8c>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6393      	str	r3, [r2, #56]	; 0x38
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <HAL_FSMC_MspInit+0x8c>)
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004f3a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004f3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f40:	2302      	movs	r3, #2
 8004f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	480d      	ldr	r0, [pc, #52]	; (8004f8c <HAL_FSMC_MspInit+0x90>)
 8004f56:	f000 fecf 	bl	8005cf8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8004f5a:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8004f5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f60:	2302      	movs	r3, #2
 8004f62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4806      	ldr	r0, [pc, #24]	; (8004f90 <HAL_FSMC_MspInit+0x94>)
 8004f76:	f000 febf 	bl	8005cf8 <HAL_GPIO_Init>
 8004f7a:	e000      	b.n	8004f7e <HAL_FSMC_MspInit+0x82>
    return;
 8004f7c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	200008b8 	.word	0x200008b8
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40020c00 	.word	0x40020c00

08004f94 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004f9c:	f7ff ffae 	bl	8004efc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fac:	e7fe      	b.n	8004fac <NMI_Handler+0x4>

08004fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fb2:	e7fe      	b.n	8004fb2 <HardFault_Handler+0x4>

08004fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fb8:	e7fe      	b.n	8004fb8 <MemManage_Handler+0x4>

08004fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fbe:	e7fe      	b.n	8004fbe <BusFault_Handler+0x4>

08004fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fc4:	e7fe      	b.n	8004fc4 <UsageFault_Handler+0x4>

08004fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ff4:	f000 fce6 	bl	80059c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
	return 1;
 8005000:	2301      	movs	r3, #1
}
 8005002:	4618      	mov	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <_kill>:

int _kill(int pid, int sig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005016:	f004 fcb9 	bl	800998c <__errno>
 800501a:	4603      	mov	r3, r0
 800501c:	2216      	movs	r2, #22
 800501e:	601a      	str	r2, [r3, #0]
	return -1;
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_exit>:

void _exit (int status)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005034:	f04f 31ff 	mov.w	r1, #4294967295
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ffe7 	bl	800500c <_kill>
	while (1) {}		/* Make sure we hang here */
 800503e:	e7fe      	b.n	800503e <_exit+0x12>

08005040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	e00a      	b.n	8005068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005052:	f3af 8000 	nop.w
 8005056:	4601      	mov	r1, r0
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	60ba      	str	r2, [r7, #8]
 800505e:	b2ca      	uxtb	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	3301      	adds	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	dbf0      	blt.n	8005052 <_read+0x12>
	}

return len;
 8005070:	687b      	ldr	r3, [r7, #4]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e009      	b.n	80050a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	60ba      	str	r2, [r7, #8]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	3301      	adds	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	dbf1      	blt.n	800508c <_write+0x12>
	}
	return len;
 80050a8:	687b      	ldr	r3, [r7, #4]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <_close>:

int _close(int file)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
	return -1;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050da:	605a      	str	r2, [r3, #4]
	return 0;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <_isatty>:

int _isatty(int file)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
	return 1;
 80050f2:	2301      	movs	r3, #1
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
	return 0;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005124:	4a14      	ldr	r2, [pc, #80]	; (8005178 <_sbrk+0x5c>)
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <_sbrk+0x60>)
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <_sbrk+0x64>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <_sbrk+0x64>)
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <_sbrk+0x68>)
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <_sbrk+0x64>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800514c:	f004 fc1e 	bl	800998c <__errno>
 8005150:	4603      	mov	r3, r0
 8005152:	220c      	movs	r2, #12
 8005154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	e009      	b.n	8005170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <_sbrk+0x64>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <_sbrk+0x64>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	4a05      	ldr	r2, [pc, #20]	; (8005180 <_sbrk+0x64>)
 800516c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20020000 	.word	0x20020000
 800517c:	00000800 	.word	0x00000800
 8005180:	200008bc 	.word	0x200008bc
 8005184:	20000938 	.word	0x20000938

08005188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SystemInit+0x20>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <SystemInit+0x20>)
 8005194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <W25Q_Reset>:
#endif

w25_info_t  w25_info;
uint8_t buf[64] = {0};

void W25Q_Reset (void) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80051b0:	2200      	movs	r2, #0
 80051b2:	2101      	movs	r1, #1
 80051b4:	480b      	ldr	r0, [pc, #44]	; (80051e4 <W25Q_Reset+0x38>)
 80051b6:	f000 ff53 	bl	8006060 <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <W25Q_Reset+0x3c>)
 80051bc:	2266      	movs	r2, #102	; 0x66
 80051be:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <W25Q_Reset+0x3c>)
 80051c2:	2299      	movs	r2, #153	; 0x99
 80051c4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 80051c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051ca:	2202      	movs	r2, #2
 80051cc:	4906      	ldr	r1, [pc, #24]	; (80051e8 <W25Q_Reset+0x3c>)
 80051ce:	4807      	ldr	r0, [pc, #28]	; (80051ec <W25Q_Reset+0x40>)
 80051d0:	f003 f9e3 	bl	800859a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80051d4:	2201      	movs	r2, #1
 80051d6:	2101      	movs	r1, #1
 80051d8:	4802      	ldr	r0, [pc, #8]	; (80051e4 <W25Q_Reset+0x38>)
 80051da:	f000 ff41 	bl	8006060 <HAL_GPIO_WritePin>
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40020400 	.word	0x40020400
 80051e8:	200008e4 	.word	0x200008e4
 80051ec:	2000030c 	.word	0x2000030c

080051f0 <W25Q_Read_ID>:
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
}

uint32_t W25Q_Read_ID(void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <W25Q_Read_ID+0x54>)
 80051f8:	229f      	movs	r2, #159	; 0x9f
 80051fa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80051fc:	2200      	movs	r2, #0
 80051fe:	2101      	movs	r1, #1
 8005200:	4811      	ldr	r0, [pc, #68]	; (8005248 <W25Q_Read_ID+0x58>)
 8005202:	f000 ff2d 	bl	8006060 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8005206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800520a:	2201      	movs	r2, #1
 800520c:	490d      	ldr	r1, [pc, #52]	; (8005244 <W25Q_Read_ID+0x54>)
 800520e:	480f      	ldr	r0, [pc, #60]	; (800524c <W25Q_Read_ID+0x5c>)
 8005210:	f003 f9c3 	bl	800859a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 8005214:	1d39      	adds	r1, r7, #4
 8005216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800521a:	2203      	movs	r2, #3
 800521c:	480b      	ldr	r0, [pc, #44]	; (800524c <W25Q_Read_ID+0x5c>)
 800521e:	f003 faf8 	bl	8008812 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8005222:	2201      	movs	r2, #1
 8005224:	2101      	movs	r1, #1
 8005226:	4808      	ldr	r0, [pc, #32]	; (8005248 <W25Q_Read_ID+0x58>)
 8005228:	f000 ff1a 	bl	8006060 <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800522c:	793b      	ldrb	r3, [r7, #4]
 800522e:	041a      	lsls	r2, r3, #16
 8005230:	797b      	ldrb	r3, [r7, #5]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	4313      	orrs	r3, r2
 8005236:	79ba      	ldrb	r2, [r7, #6]
 8005238:	4313      	orrs	r3, r2
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	200008e4 	.word	0x200008e4
 8005248:	40020400 	.word	0x40020400
 800524c:	2000030c 	.word	0x2000030c

08005250 <W25Q_Init>:

void W25Q_Init(void) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
	unsigned int id = W25Q_Read_ID();
 8005256:	f7ff ffcb 	bl	80051f0 <W25Q_Read_ID>
 800525a:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(100);
 800525c:	2064      	movs	r0, #100	; 0x64
 800525e:	f000 fbd1 	bl	8005a04 <HAL_Delay>
	W25Q_Reset();
 8005262:	f7ff ffa3 	bl	80051ac <W25Q_Reset>
	HAL_Delay(100);
 8005266:	2064      	movs	r0, #100	; 0x64
 8005268:	f000 fbcc 	bl	8005a04 <HAL_Delay>
	id &= 0x0000FFFF;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	b29b      	uxth	r3, r3
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
	w25_info.high_cap = 0;
 8005272:	4b85      	ldr	r3, [pc, #532]	; (8005488 <W25Q_Init+0x238>)
 8005274:	2200      	movs	r2, #0
 8005276:	77da      	strb	r2, [r3, #31]
	switch(id)
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800527e:	3b11      	subs	r3, #17
 8005280:	2b09      	cmp	r3, #9
 8005282:	f200 81e7 	bhi.w	8005654 <W25Q_Init+0x404>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <W25Q_Init+0x3c>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	0800530f 	.word	0x0800530f
 8005290:	08005307 	.word	0x08005307
 8005294:	080052ff 	.word	0x080052ff
 8005298:	080052f7 	.word	0x080052f7
 800529c:	080052ef 	.word	0x080052ef
 80052a0:	080052e7 	.word	0x080052e7
 80052a4:	080052df 	.word	0x080052df
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	080052c5 	.word	0x080052c5
 80052b0:	080052b5 	.word	0x080052b5
	{
	case 0x401A:
		w25_info.high_cap=1;
 80052b4:	4b74      	ldr	r3, [pc, #464]	; (8005488 <W25Q_Init+0x238>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 80052ba:	4b73      	ldr	r3, [pc, #460]	; (8005488 <W25Q_Init+0x238>)
 80052bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052c0:	615a      	str	r2, [r3, #20]
		break;
 80052c2:	e028      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 80052c4:	4b70      	ldr	r3, [pc, #448]	; (8005488 <W25Q_Init+0x238>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 80052ca:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <W25Q_Init+0x238>)
 80052cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d0:	615a      	str	r2, [r3, #20]
		break;
 80052d2:	e020      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 80052d4:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <W25Q_Init+0x238>)
 80052d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052da:	615a      	str	r2, [r3, #20]
		break;
 80052dc:	e01b      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 80052de:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <W25Q_Init+0x238>)
 80052e0:	2280      	movs	r2, #128	; 0x80
 80052e2:	615a      	str	r2, [r3, #20]
		break;
 80052e4:	e017      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 80052e6:	4b68      	ldr	r3, [pc, #416]	; (8005488 <W25Q_Init+0x238>)
 80052e8:	2240      	movs	r2, #64	; 0x40
 80052ea:	615a      	str	r2, [r3, #20]
		break;
 80052ec:	e013      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 80052ee:	4b66      	ldr	r3, [pc, #408]	; (8005488 <W25Q_Init+0x238>)
 80052f0:	2220      	movs	r2, #32
 80052f2:	615a      	str	r2, [r3, #20]
		break;
 80052f4:	e00f      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 80052f6:	4b64      	ldr	r3, [pc, #400]	; (8005488 <W25Q_Init+0x238>)
 80052f8:	2210      	movs	r2, #16
 80052fa:	615a      	str	r2, [r3, #20]
		break;
 80052fc:	e00b      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 80052fe:	4b62      	ldr	r3, [pc, #392]	; (8005488 <W25Q_Init+0x238>)
 8005300:	2208      	movs	r2, #8
 8005302:	615a      	str	r2, [r3, #20]
		break;
 8005304:	e007      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 8005306:	4b60      	ldr	r3, [pc, #384]	; (8005488 <W25Q_Init+0x238>)
 8005308:	2204      	movs	r2, #4
 800530a:	615a      	str	r2, [r3, #20]
		break;
 800530c:	e003      	b.n	8005316 <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 800530e:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <W25Q_Init+0x238>)
 8005310:	2202      	movs	r2, #2
 8005312:	615a      	str	r2, [r3, #20]
		break;
 8005314:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <W25Q_Init+0x238>)
 8005318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531c:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 800531e:	4b5a      	ldr	r3, [pc, #360]	; (8005488 <W25Q_Init+0x238>)
 8005320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005324:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8005326:	4b58      	ldr	r3, [pc, #352]	; (8005488 <W25Q_Init+0x238>)
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	4a56      	ldr	r2, [pc, #344]	; (8005488 <W25Q_Init+0x238>)
 800532e:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8005330:	4b55      	ldr	r3, [pc, #340]	; (8005488 <W25Q_Init+0x238>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a54      	ldr	r2, [pc, #336]	; (8005488 <W25Q_Init+0x238>)
 8005336:	6892      	ldr	r2, [r2, #8]
 8005338:	fb02 f303 	mul.w	r3, r2, r3
 800533c:	4a52      	ldr	r2, [pc, #328]	; (8005488 <W25Q_Init+0x238>)
 800533e:	8812      	ldrh	r2, [r2, #0]
 8005340:	fbb3 f3f2 	udiv	r3, r3, r2
 8005344:	4a50      	ldr	r2, [pc, #320]	; (8005488 <W25Q_Init+0x238>)
 8005346:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8005348:	4b4f      	ldr	r3, [pc, #316]	; (8005488 <W25Q_Init+0x238>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	4a4e      	ldr	r2, [pc, #312]	; (8005488 <W25Q_Init+0x238>)
 8005350:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8005352:	4b4d      	ldr	r3, [pc, #308]	; (8005488 <W25Q_Init+0x238>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4a4c      	ldr	r2, [pc, #304]	; (8005488 <W25Q_Init+0x238>)
 8005358:	6892      	ldr	r2, [r2, #8]
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	0a9b      	lsrs	r3, r3, #10
 8005360:	4a49      	ldr	r2, [pc, #292]	; (8005488 <W25Q_Init+0x238>)
 8005362:	6193      	str	r3, [r2, #24]

#if (INIT_DEBUG == 1)
	char str1[30];
	sprintf(str1,"FLASH ID: 0x%X \r\n",id);
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005368:	4948      	ldr	r1, [pc, #288]	; (800548c <W25Q_Init+0x23c>)
 800536a:	4618      	mov	r0, r3
 800536c:	f005 fa12 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1), 0x1000);
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fa ff2c 	bl	80001d0 <strlen>
 8005378:	4603      	mov	r3, r0
 800537a:	b29a      	uxth	r2, r3
 800537c:	1d39      	adds	r1, r7, #4
 800537e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005382:	4843      	ldr	r0, [pc, #268]	; (8005490 <W25Q_Init+0x240>)
 8005384:	f003 feb9 	bl	80090fa <HAL_UART_Transmit>

	w25_info.high_cap = 0;
 8005388:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <W25Q_Init+0x238>)
 800538a:	2200      	movs	r2, #0
 800538c:	77da      	strb	r2, [r3, #31]

	switch(id)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005394:	3b11      	subs	r3, #17
 8005396:	2b09      	cmp	r3, #9
 8005398:	f200 8090 	bhi.w	80054bc <W25Q_Init+0x26c>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <W25Q_Init+0x154>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	08005475 	.word	0x08005475
 80053a8:	08005463 	.word	0x08005463
 80053ac:	08005451 	.word	0x08005451
 80053b0:	0800543f 	.word	0x0800543f
 80053b4:	0800542d 	.word	0x0800542d
 80053b8:	0800541b 	.word	0x0800541b
 80053bc:	08005409 	.word	0x08005409
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	080053cd 	.word	0x080053cd
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 80053cc:	4b2e      	ldr	r3, [pc, #184]	; (8005488 <W25Q_Init+0x238>)
 80053ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053d2:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q512 \r\n");
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	492f      	ldr	r1, [pc, #188]	; (8005494 <W25Q_Init+0x244>)
 80053d8:	4618      	mov	r0, r3
 80053da:	f005 f9db 	bl	800a794 <siprintf>
		break;
 80053de:	e07f      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4019:
		w25_info.BlockCount=512;
 80053e0:	4b29      	ldr	r3, [pc, #164]	; (8005488 <W25Q_Init+0x238>)
 80053e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e6:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q256 \r\n");
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	492b      	ldr	r1, [pc, #172]	; (8005498 <W25Q_Init+0x248>)
 80053ec:	4618      	mov	r0, r3
 80053ee:	f005 f9d1 	bl	800a794 <siprintf>
		break;
 80053f2:	e075      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4018:
		w25_info.BlockCount=256;
 80053f4:	4b24      	ldr	r3, [pc, #144]	; (8005488 <W25Q_Init+0x238>)
 80053f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053fa:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q128 \r\n");
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	4927      	ldr	r1, [pc, #156]	; (800549c <W25Q_Init+0x24c>)
 8005400:	4618      	mov	r0, r3
 8005402:	f005 f9c7 	bl	800a794 <siprintf>
		break;
 8005406:	e06b      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4017:
		w25_info.BlockCount=128;
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <W25Q_Init+0x238>)
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q64 \r\n");
 800540e:	1d3b      	adds	r3, r7, #4
 8005410:	4923      	ldr	r1, [pc, #140]	; (80054a0 <W25Q_Init+0x250>)
 8005412:	4618      	mov	r0, r3
 8005414:	f005 f9be 	bl	800a794 <siprintf>
		break;
 8005418:	e062      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4016:
		w25_info.BlockCount=64;
 800541a:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <W25Q_Init+0x238>)
 800541c:	2240      	movs	r2, #64	; 0x40
 800541e:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q32 \r\n");
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	4920      	ldr	r1, [pc, #128]	; (80054a4 <W25Q_Init+0x254>)
 8005424:	4618      	mov	r0, r3
 8005426:	f005 f9b5 	bl	800a794 <siprintf>
		break;
 800542a:	e059      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4015:
		w25_info.BlockCount=32;
 800542c:	4b16      	ldr	r3, [pc, #88]	; (8005488 <W25Q_Init+0x238>)
 800542e:	2220      	movs	r2, #32
 8005430:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q16 \r\n");
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	491c      	ldr	r1, [pc, #112]	; (80054a8 <W25Q_Init+0x258>)
 8005436:	4618      	mov	r0, r3
 8005438:	f005 f9ac 	bl	800a794 <siprintf>
		break;
 800543c:	e050      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4014:
		w25_info.BlockCount=16;
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <W25Q_Init+0x238>)
 8005440:	2210      	movs	r2, #16
 8005442:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q80 \r\n");
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	4919      	ldr	r1, [pc, #100]	; (80054ac <W25Q_Init+0x25c>)
 8005448:	4618      	mov	r0, r3
 800544a:	f005 f9a3 	bl	800a794 <siprintf>
		break;
 800544e:	e047      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4013:
		w25_info.BlockCount=8;
 8005450:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <W25Q_Init+0x238>)
 8005452:	2208      	movs	r2, #8
 8005454:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q40 \r\n");
 8005456:	1d3b      	adds	r3, r7, #4
 8005458:	4915      	ldr	r1, [pc, #84]	; (80054b0 <W25Q_Init+0x260>)
 800545a:	4618      	mov	r0, r3
 800545c:	f005 f99a 	bl	800a794 <siprintf>
		break;
 8005460:	e03e      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4012:
		w25_info.BlockCount=4;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <W25Q_Init+0x238>)
 8005464:	2204      	movs	r2, #4
 8005466:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q20 \r\n");
 8005468:	1d3b      	adds	r3, r7, #4
 800546a:	4912      	ldr	r1, [pc, #72]	; (80054b4 <W25Q_Init+0x264>)
 800546c:	4618      	mov	r0, r3
 800546e:	f005 f991 	bl	800a794 <siprintf>
		break;
 8005472:	e035      	b.n	80054e0 <W25Q_Init+0x290>
	case 0x4011:
		w25_info.BlockCount=2;
 8005474:	4b04      	ldr	r3, [pc, #16]	; (8005488 <W25Q_Init+0x238>)
 8005476:	2202      	movs	r2, #2
 8005478:	615a      	str	r2, [r3, #20]
		sprintf(str1,"FLASH CHIP: W25Q10 \r\n");
 800547a:	1d3b      	adds	r3, r7, #4
 800547c:	490e      	ldr	r1, [pc, #56]	; (80054b8 <W25Q_Init+0x268>)
 800547e:	4618      	mov	r0, r3
 8005480:	f005 f988 	bl	800a794 <siprintf>
		break;
 8005484:	e02c      	b.n	80054e0 <W25Q_Init+0x290>
 8005486:	bf00      	nop
 8005488:	200008c0 	.word	0x200008c0
 800548c:	0800f3c0 	.word	0x0800f3c0
 8005490:	20000414 	.word	0x20000414
 8005494:	0800f3d4 	.word	0x0800f3d4
 8005498:	0800f3ec 	.word	0x0800f3ec
 800549c:	0800f404 	.word	0x0800f404
 80054a0:	0800f41c 	.word	0x0800f41c
 80054a4:	0800f434 	.word	0x0800f434
 80054a8:	0800f44c 	.word	0x0800f44c
 80054ac:	0800f464 	.word	0x0800f464
 80054b0:	0800f47c 	.word	0x0800f47c
 80054b4:	0800f494 	.word	0x0800f494
 80054b8:	0800f4ac 	.word	0x0800f4ac
	default:
		sprintf(str1,"FLASH CHIP: UNKNOWN ID \r\n");
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	4967      	ldr	r1, [pc, #412]	; (800565c <W25Q_Init+0x40c>)
 80054c0:	4618      	mov	r0, r3
 80054c2:	f005 f967 	bl	800a794 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80054c6:	1d3b      	adds	r3, r7, #4
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fa fe81 	bl	80001d0 <strlen>
 80054ce:	4603      	mov	r3, r0
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	1d39      	adds	r1, r7, #4
 80054d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054d8:	4861      	ldr	r0, [pc, #388]	; (8005660 <W25Q_Init+0x410>)
 80054da:	f003 fe0e 	bl	80090fa <HAL_UART_Transmit>
		break;
 80054de:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fa fe74 	bl	80001d0 <strlen>
 80054e8:	4603      	mov	r3, r0
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	1d39      	adds	r1, r7, #4
 80054ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f2:	485b      	ldr	r0, [pc, #364]	; (8005660 <W25Q_Init+0x410>)
 80054f4:	f003 fe01 	bl	80090fa <HAL_UART_Transmit>
	w25_info.PageSize=256;
 80054f8:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <W25Q_Init+0x414>)
 80054fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054fe:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8005500:	4b58      	ldr	r3, [pc, #352]	; (8005664 <W25Q_Init+0x414>)
 8005502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005506:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8005508:	4b56      	ldr	r3, [pc, #344]	; (8005664 <W25Q_Init+0x414>)
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4a55      	ldr	r2, [pc, #340]	; (8005664 <W25Q_Init+0x414>)
 8005510:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8005512:	4b54      	ldr	r3, [pc, #336]	; (8005664 <W25Q_Init+0x414>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a53      	ldr	r2, [pc, #332]	; (8005664 <W25Q_Init+0x414>)
 8005518:	6892      	ldr	r2, [r2, #8]
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	4a51      	ldr	r2, [pc, #324]	; (8005664 <W25Q_Init+0x414>)
 8005520:	8812      	ldrh	r2, [r2, #0]
 8005522:	fbb3 f3f2 	udiv	r3, r3, r2
 8005526:	4a4f      	ldr	r2, [pc, #316]	; (8005664 <W25Q_Init+0x414>)
 8005528:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 800552a:	4b4e      	ldr	r3, [pc, #312]	; (8005664 <W25Q_Init+0x414>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	4a4c      	ldr	r2, [pc, #304]	; (8005664 <W25Q_Init+0x414>)
 8005532:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8005534:	4b4b      	ldr	r3, [pc, #300]	; (8005664 <W25Q_Init+0x414>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <W25Q_Init+0x414>)
 800553a:	6892      	ldr	r2, [r2, #8]
 800553c:	fb02 f303 	mul.w	r3, r2, r3
 8005540:	0a9b      	lsrs	r3, r3, #10
 8005542:	4a48      	ldr	r2, [pc, #288]	; (8005664 <W25Q_Init+0x414>)
 8005544:	6193      	str	r3, [r2, #24]
	sprintf(str1,"FLASH PAGE SIZE: %d Bytes \r\n",(unsigned int)w25_info.PageSize);
 8005546:	4b47      	ldr	r3, [pc, #284]	; (8005664 <W25Q_Init+0x414>)
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	4946      	ldr	r1, [pc, #280]	; (8005668 <W25Q_Init+0x418>)
 8005550:	4618      	mov	r0, r3
 8005552:	f005 f91f 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	4618      	mov	r0, r3
 800555a:	f7fa fe39 	bl	80001d0 <strlen>
 800555e:	4603      	mov	r3, r0
 8005560:	b29a      	uxth	r2, r3
 8005562:	1d39      	adds	r1, r7, #4
 8005564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005568:	483d      	ldr	r0, [pc, #244]	; (8005660 <W25Q_Init+0x410>)
 800556a:	f003 fdc6 	bl	80090fa <HAL_UART_Transmit>
	sprintf(str1,"FLASH PAGE COUNT: %u \r\n",(unsigned int)w25_info.PageCount);
 800556e:	4b3d      	ldr	r3, [pc, #244]	; (8005664 <W25Q_Init+0x414>)
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	493d      	ldr	r1, [pc, #244]	; (800566c <W25Q_Init+0x41c>)
 8005576:	4618      	mov	r0, r3
 8005578:	f005 f90c 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7fa fe26 	bl	80001d0 <strlen>
 8005584:	4603      	mov	r3, r0
 8005586:	b29a      	uxth	r2, r3
 8005588:	1d39      	adds	r1, r7, #4
 800558a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800558e:	4834      	ldr	r0, [pc, #208]	; (8005660 <W25Q_Init+0x410>)
 8005590:	f003 fdb3 	bl	80090fa <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR SIZE: %u Bytes \r\n",(unsigned int)w25_info.SectorSize);
 8005594:	4b33      	ldr	r3, [pc, #204]	; (8005664 <W25Q_Init+0x414>)
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	1d3b      	adds	r3, r7, #4
 800559a:	4935      	ldr	r1, [pc, #212]	; (8005670 <W25Q_Init+0x420>)
 800559c:	4618      	mov	r0, r3
 800559e:	f005 f8f9 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fa fe13 	bl	80001d0 <strlen>
 80055aa:	4603      	mov	r3, r0
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	1d39      	adds	r1, r7, #4
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	482a      	ldr	r0, [pc, #168]	; (8005660 <W25Q_Init+0x410>)
 80055b6:	f003 fda0 	bl	80090fa <HAL_UART_Transmit>
	sprintf(str1,"FLASH SECTOR COUNT: %u \r\n",(unsigned int)w25_info.SectorCount);
 80055ba:	4b2a      	ldr	r3, [pc, #168]	; (8005664 <W25Q_Init+0x414>)
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	492c      	ldr	r1, [pc, #176]	; (8005674 <W25Q_Init+0x424>)
 80055c2:	4618      	mov	r0, r3
 80055c4:	f005 f8e6 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fa fe00 	bl	80001d0 <strlen>
 80055d0:	4603      	mov	r3, r0
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	1d39      	adds	r1, r7, #4
 80055d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055da:	4821      	ldr	r0, [pc, #132]	; (8005660 <W25Q_Init+0x410>)
 80055dc:	f003 fd8d 	bl	80090fa <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK SIZE: %u Bytes \r\n",(unsigned int)w25_info.BlockSize);
 80055e0:	4b20      	ldr	r3, [pc, #128]	; (8005664 <W25Q_Init+0x414>)
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	4924      	ldr	r1, [pc, #144]	; (8005678 <W25Q_Init+0x428>)
 80055e8:	4618      	mov	r0, r3
 80055ea:	f005 f8d3 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa fded 	bl	80001d0 <strlen>
 80055f6:	4603      	mov	r3, r0
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	1d39      	adds	r1, r7, #4
 80055fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005600:	4817      	ldr	r0, [pc, #92]	; (8005660 <W25Q_Init+0x410>)
 8005602:	f003 fd7a 	bl	80090fa <HAL_UART_Transmit>
	sprintf(str1,"FLASH BLOCK COUNT: %u \r\n",(unsigned int)w25_info.BlockCount);
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <W25Q_Init+0x414>)
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	491b      	ldr	r1, [pc, #108]	; (800567c <W25Q_Init+0x42c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f005 f8c0 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fa fdda 	bl	80001d0 <strlen>
 800561c:	4603      	mov	r3, r0
 800561e:	b29a      	uxth	r2, r3
 8005620:	1d39      	adds	r1, r7, #4
 8005622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005626:	480e      	ldr	r0, [pc, #56]	; (8005660 <W25Q_Init+0x410>)
 8005628:	f003 fd67 	bl	80090fa <HAL_UART_Transmit>
	sprintf(str1,"FLASH CAPACITY: %u KB \r\n",(unsigned int)w25_info.NumKB);
 800562c:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <W25Q_Init+0x414>)
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	4913      	ldr	r1, [pc, #76]	; (8005680 <W25Q_Init+0x430>)
 8005634:	4618      	mov	r0, r3
 8005636:	f005 f8ad 	bl	800a794 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa fdc7 	bl	80001d0 <strlen>
 8005642:	4603      	mov	r3, r0
 8005644:	b29a      	uxth	r2, r3
 8005646:	1d39      	adds	r1, r7, #4
 8005648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800564c:	4804      	ldr	r0, [pc, #16]	; (8005660 <W25Q_Init+0x410>)
 800564e:	f003 fd54 	bl	80090fa <HAL_UART_Transmit>
 8005652:	e000      	b.n	8005656 <W25Q_Init+0x406>
		return;
 8005654:	bf00      	nop
#endif
}
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	0800f4c4 	.word	0x0800f4c4
 8005660:	20000414 	.word	0x20000414
 8005664:	200008c0 	.word	0x200008c0
 8005668:	0800f4e0 	.word	0x0800f4e0
 800566c:	0800f500 	.word	0x0800f500
 8005670:	0800f518 	.word	0x0800f518
 8005674:	0800f538 	.word	0x0800f538
 8005678:	0800f554 	.word	0x0800f554
 800567c:	0800f574 	.word	0x0800f574
 8005680:	0800f590 	.word	0x0800f590

08005684 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	ed87 0a05 	vstr	s0, [r7, #20]
 800568e:	edc7 0a04 	vstr	s1, [r7, #16]
 8005692:	ed87 1a03 	vstr	s2, [r7, #12]
 8005696:	edc7 1a02 	vstr	s3, [r7, #8]
 800569a:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800569e:	ed97 7a05 	vldr	s14, [r7, #20]
 80056a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80056a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056aa:	edd7 6a01 	vldr	s13, [r7, #4]
 80056ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80056b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056b6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80056ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80056be:	edd7 7a04 	vldr	s15, [r7, #16]
 80056c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80056ce:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80056d2:	eeb0 0a67 	vmov.f32	s0, s15
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <XPT2046_Init>:

void XPT2046_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80056e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056e8:	2201      	movs	r2, #1
 80056ea:	2180      	movs	r1, #128	; 0x80
 80056ec:	4809      	ldr	r0, [pc, #36]	; (8005714 <XPT2046_Init+0x34>)
 80056ee:	f002 ff54 	bl	800859a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 80056f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056f6:	2201      	movs	r2, #1
 80056f8:	2100      	movs	r1, #0
 80056fa:	4806      	ldr	r0, [pc, #24]	; (8005714 <XPT2046_Init+0x34>)
 80056fc:	f002 ff4d 	bl	800859a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005704:	2201      	movs	r2, #1
 8005706:	2100      	movs	r1, #0
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <XPT2046_Init+0x34>)
 800570a:	f002 ff46 	bl	800859a <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000364 	.word	0x20000364

08005718 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8005722:	2001      	movs	r0, #1
 8005724:	f000 f96e 	bl	8005a04 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8005728:	1df9      	adds	r1, r7, #7
 800572a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800572e:	2201      	movs	r2, #1
 8005730:	4814      	ldr	r0, [pc, #80]	; (8005784 <getRaw+0x6c>)
 8005732:	f002 ff32 	bl	800859a <HAL_SPI_Transmit>
	address = 0x00;
 8005736:	2300      	movs	r3, #0
 8005738:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 800573a:	f107 020b 	add.w	r2, r7, #11
 800573e:	1df9      	adds	r1, r7, #7
 8005740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2301      	movs	r3, #1
 8005748:	480e      	ldr	r0, [pc, #56]	; (8005784 <getRaw+0x6c>)
 800574a:	f003 f973 	bl	8008a34 <HAL_SPI_TransmitReceive>
	MSB = data;   
 800574e:	7afb      	ldrb	r3, [r7, #11]
 8005750:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8005752:	2300      	movs	r3, #0
 8005754:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005756:	f107 020b 	add.w	r2, r7, #11
 800575a:	1df9      	adds	r1, r7, #7
 800575c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2301      	movs	r3, #1
 8005764:	4807      	ldr	r0, [pc, #28]	; (8005784 <getRaw+0x6c>)
 8005766:	f003 f965 	bl	8008a34 <HAL_SPI_TransmitReceive>
	LSB = data;
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 800576e:	89fb      	ldrh	r3, [r7, #14]
 8005770:	021a      	lsls	r2, r3, #8
 8005772:	89bb      	ldrh	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	10db      	asrs	r3, r3, #3
 8005778:	b29b      	uxth	r3, r3
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000364 	.word	0x20000364

08005788 <X>:

inline static uint16_t X(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 800578e:	20d0      	movs	r0, #208	; 0xd0
 8005790:	f7ff ffc2 	bl	8005718 <getRaw>
 8005794:	4603      	mov	r3, r0
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80057ec <X+0x64>
 80057a2:	eddf 1a13 	vldr	s3, [pc, #76]	; 80057f0 <X+0x68>
 80057a6:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80057f4 <X+0x6c>
 80057aa:	eddf 0a13 	vldr	s1, [pc, #76]	; 80057f8 <X+0x70>
 80057ae:	eeb0 0a67 	vmov.f32	s0, s15
 80057b2:	f7ff ff67 	bl	8005684 <remap>
 80057b6:	eef0 7a40 	vmov.f32	s15, s0
 80057ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057be:	ee17 3a90 	vmov	r3, s15
 80057c2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80057ca:	3303      	adds	r3, #3
 80057cc:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <X+0x5a>
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	f240 321e 	movw	r2, #798	; 0x31e
 80057da:	4293      	cmp	r3, r2
 80057dc:	d801      	bhi.n	80057e2 <X+0x5a>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	e000      	b.n	80057e4 <X+0x5c>
	else return 0;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	4447c000 	.word	0x4447c000
 80057f0:	00000000 	.word	0x00000000
 80057f4:	457a0000 	.word	0x457a0000
 80057f8:	43480000 	.word	0x43480000

080057fc <Y>:

inline static uint16_t Y(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8005802:	2090      	movs	r0, #144	; 0x90
 8005804:	f7ff ff88 	bl	8005718 <getRaw>
 8005808:	4603      	mov	r3, r0
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8005854 <Y+0x58>
 8005816:	eddf 1a10 	vldr	s3, [pc, #64]	; 8005858 <Y+0x5c>
 800581a:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800585c <Y+0x60>
 800581e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005860 <Y+0x64>
 8005822:	eeb0 0a67 	vmov.f32	s0, s15
 8005826:	f7ff ff2d 	bl	8005684 <remap>
 800582a:	eef0 7a40 	vmov.f32	s15, s0
 800582e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005832:	ee17 3a90 	vmov	r3, s15
 8005836:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <Y+0x4e>
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8005844:	d801      	bhi.n	800584a <Y+0x4e>
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	e000      	b.n	800584c <Y+0x50>
	else return 0;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	43ef8000 	.word	0x43ef8000
 8005858:	00000000 	.word	0x00000000
 800585c:	456d8000 	.word	0x456d8000
 8005860:	43480000 	.word	0x43480000

08005864 <getX>:

uint16_t getX(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <getX+0x30>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8005870:	e007      	b.n	8005882 <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8005872:	f7ff ff89 	bl	8005788 <X>
 8005876:	4603      	mov	r3, r0
 8005878:	80bb      	strh	r3, [r7, #4]
 800587a:	f7ff ff85 	bl	8005788 <X>
 800587e:	4603      	mov	r3, r0
 8005880:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8005882:	88ba      	ldrh	r2, [r7, #4]
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	429a      	cmp	r2, r3
 8005888:	d1f3      	bne.n	8005872 <getX+0xe>
		}
		return x[0];
 800588a:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	0800f5ac 	.word	0x0800f5ac

08005898 <getY>:

uint16_t getY(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <getY+0x30>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80058a4:	e007      	b.n	80058b6 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80058a6:	f7ff ffa9 	bl	80057fc <Y>
 80058aa:	4603      	mov	r3, r0
 80058ac:	80bb      	strh	r3, [r7, #4]
 80058ae:	f7ff ffa5 	bl	80057fc <Y>
 80058b2:	4603      	mov	r3, r0
 80058b4:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80058b6:	88ba      	ldrh	r2, [r7, #4]
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d1f3      	bne.n	80058a6 <getY+0xe>
		}
		return y[0];
 80058be:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	0800f5ac 	.word	0x0800f5ac

080058cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80058cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80058d0:	480d      	ldr	r0, [pc, #52]	; (8005908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80058d2:	490e      	ldr	r1, [pc, #56]	; (800590c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80058d4:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80058d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058d8:	e002      	b.n	80058e0 <LoopCopyDataInit>

080058da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058de:	3304      	adds	r3, #4

080058e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058e4:	d3f9      	bcc.n	80058da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80058e8:	4c0b      	ldr	r4, [pc, #44]	; (8005918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80058ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058ec:	e001      	b.n	80058f2 <LoopFillZerobss>

080058ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058f0:	3204      	adds	r2, #4

080058f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058f4:	d3fb      	bcc.n	80058ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80058f6:	f7ff fc47 	bl	8005188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058fa:	f004 f84d 	bl	8009998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058fe:	f7fc fa55 	bl	8001dac <main>
  bx  lr    
 8005902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800590c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005910:	08021248 	.word	0x08021248
  ldr r2, =_sbss
 8005914:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005918:	20000938 	.word	0x20000938

0800591c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800591c:	e7fe      	b.n	800591c <ADC_IRQHandler>
	...

08005920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <HAL_Init+0x40>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a0d      	ldr	r2, [pc, #52]	; (8005960 <HAL_Init+0x40>)
 800592a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800592e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_Init+0x40>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <HAL_Init+0x40>)
 8005936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800593a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <HAL_Init+0x40>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a07      	ldr	r2, [pc, #28]	; (8005960 <HAL_Init+0x40>)
 8005942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005948:	2003      	movs	r0, #3
 800594a:	f000 f931 	bl	8005bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800594e:	2000      	movs	r0, #0
 8005950:	f000 f808 	bl	8005964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005954:	f7ff f902 	bl	8004b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40023c00 	.word	0x40023c00

08005964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800596c:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <HAL_InitTick+0x54>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_InitTick+0x58>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	4619      	mov	r1, r3
 8005976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800597a:	fbb3 f3f1 	udiv	r3, r3, r1
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	4618      	mov	r0, r3
 8005984:	f000 f93b 	bl	8005bfe <HAL_SYSTICK_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e00e      	b.n	80059b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b0f      	cmp	r3, #15
 8005996:	d80a      	bhi.n	80059ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005998:	2200      	movs	r2, #0
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	f000 f911 	bl	8005bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059a4:	4a06      	ldr	r2, [pc, #24]	; (80059c0 <HAL_InitTick+0x5c>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e000      	b.n	80059b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000054 	.word	0x20000054
 80059bc:	2000005c 	.word	0x2000005c
 80059c0:	20000058 	.word	0x20000058

080059c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_IncTick+0x20>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_IncTick+0x24>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4413      	add	r3, r2
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_IncTick+0x24>)
 80059d6:	6013      	str	r3, [r2, #0]
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000005c 	.word	0x2000005c
 80059e8:	20000924 	.word	0x20000924

080059ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return uwTick;
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <HAL_GetTick+0x14>)
 80059f2:	681b      	ldr	r3, [r3, #0]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000924 	.word	0x20000924

08005a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a0c:	f7ff ffee 	bl	80059ec <HAL_GetTick>
 8005a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d005      	beq.n	8005a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_Delay+0x44>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a2a:	bf00      	nop
 8005a2c:	f7ff ffde 	bl	80059ec <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d8f7      	bhi.n	8005a2c <HAL_Delay+0x28>
  {
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	2000005c 	.word	0x2000005c

08005a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <__NVIC_SetPriorityGrouping+0x44>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a7e:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <__NVIC_SetPriorityGrouping+0x44>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	60d3      	str	r3, [r2, #12]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <__NVIC_GetPriorityGrouping+0x18>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	f003 0307 	and.w	r3, r3, #7
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	e000ed00 	.word	0xe000ed00

08005ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
         );
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00f      	b.n	8005ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <SysTick_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f7ff ff8e 	bl	8005ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <SysTick_Config+0x40>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <SysTick_Config+0x40>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff47 	bl	8005a4c <__NVIC_SetPriorityGrouping>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd8:	f7ff ff5c 	bl	8005a94 <__NVIC_GetPriorityGrouping>
 8005bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff8e 	bl	8005b04 <NVIC_EncodePriority>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff5d 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ffb0 	bl	8005b6c <SysTick_Config>
 8005c0c:	4603      	mov	r3, r0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e014      	b.n	8005c52 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	791b      	ldrb	r3, [r3, #4]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ffb7 	bl	8004bac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	795b      	ldrb	r3, [r3, #5]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_DAC_ConfigChannel+0x18>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e03c      	b.n	8005cec <HAL_DAC_ConfigChannel+0x92>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	22c0      	movs	r2, #192	; 0xc0
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	400a      	ands	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e16b      	b.n	8005fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d14:	2201      	movs	r2, #1
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4013      	ands	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	f040 815a 	bne.w	8005fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d005      	beq.n	8005d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d130      	bne.n	8005dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d80:	2201      	movs	r2, #1
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 0201 	and.w	r2, r3, #1
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d017      	beq.n	8005de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d123      	bne.n	8005e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	08da      	lsrs	r2, r3, #3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3208      	adds	r2, #8
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4013      	ands	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	08da      	lsrs	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3208      	adds	r2, #8
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2203      	movs	r2, #3
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 0203 	and.w	r2, r3, #3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 80b4 	beq.w	8005fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b60      	ldr	r3, [pc, #384]	; (8006004 <HAL_GPIO_Init+0x30c>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	4a5f      	ldr	r2, [pc, #380]	; (8006004 <HAL_GPIO_Init+0x30c>)
 8005e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e8e:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <HAL_GPIO_Init+0x30c>)
 8005e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e9a:	4a5b      	ldr	r2, [pc, #364]	; (8006008 <HAL_GPIO_Init+0x310>)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	089b      	lsrs	r3, r3, #2
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a52      	ldr	r2, [pc, #328]	; (800600c <HAL_GPIO_Init+0x314>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02b      	beq.n	8005f1e <HAL_GPIO_Init+0x226>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a51      	ldr	r2, [pc, #324]	; (8006010 <HAL_GPIO_Init+0x318>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d025      	beq.n	8005f1a <HAL_GPIO_Init+0x222>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a50      	ldr	r2, [pc, #320]	; (8006014 <HAL_GPIO_Init+0x31c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01f      	beq.n	8005f16 <HAL_GPIO_Init+0x21e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a4f      	ldr	r2, [pc, #316]	; (8006018 <HAL_GPIO_Init+0x320>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d019      	beq.n	8005f12 <HAL_GPIO_Init+0x21a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a4e      	ldr	r2, [pc, #312]	; (800601c <HAL_GPIO_Init+0x324>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <HAL_GPIO_Init+0x216>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a4d      	ldr	r2, [pc, #308]	; (8006020 <HAL_GPIO_Init+0x328>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00d      	beq.n	8005f0a <HAL_GPIO_Init+0x212>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a4c      	ldr	r2, [pc, #304]	; (8006024 <HAL_GPIO_Init+0x32c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d007      	beq.n	8005f06 <HAL_GPIO_Init+0x20e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a4b      	ldr	r2, [pc, #300]	; (8006028 <HAL_GPIO_Init+0x330>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d101      	bne.n	8005f02 <HAL_GPIO_Init+0x20a>
 8005efe:	2307      	movs	r3, #7
 8005f00:	e00e      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f02:	2308      	movs	r3, #8
 8005f04:	e00c      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f06:	2306      	movs	r3, #6
 8005f08:	e00a      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	e008      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f0e:	2304      	movs	r3, #4
 8005f10:	e006      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f12:	2303      	movs	r3, #3
 8005f14:	e004      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e002      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_GPIO_Init+0x228>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	f002 0203 	and.w	r2, r2, #3
 8005f26:	0092      	lsls	r2, r2, #2
 8005f28:	4093      	lsls	r3, r2
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f30:	4935      	ldr	r1, [pc, #212]	; (8006008 <HAL_GPIO_Init+0x310>)
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	089b      	lsrs	r3, r3, #2
 8005f36:	3302      	adds	r3, #2
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f3e:	4b3b      	ldr	r3, [pc, #236]	; (800602c <HAL_GPIO_Init+0x334>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	43db      	mvns	r3, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f62:	4a32      	ldr	r2, [pc, #200]	; (800602c <HAL_GPIO_Init+0x334>)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005f68:	4b30      	ldr	r3, [pc, #192]	; (800602c <HAL_GPIO_Init+0x334>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4013      	ands	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f8c:	4a27      	ldr	r2, [pc, #156]	; (800602c <HAL_GPIO_Init+0x334>)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f92:	4b26      	ldr	r3, [pc, #152]	; (800602c <HAL_GPIO_Init+0x334>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fb6:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_GPIO_Init+0x334>)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fbc:	4b1b      	ldr	r3, [pc, #108]	; (800602c <HAL_GPIO_Init+0x334>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fe0:	4a12      	ldr	r2, [pc, #72]	; (800602c <HAL_GPIO_Init+0x334>)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	f67f ae90 	bls.w	8005d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3724      	adds	r7, #36	; 0x24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40023800 	.word	0x40023800
 8006008:	40013800 	.word	0x40013800
 800600c:	40020000 	.word	0x40020000
 8006010:	40020400 	.word	0x40020400
 8006014:	40020800 	.word	0x40020800
 8006018:	40020c00 	.word	0x40020c00
 800601c:	40021000 	.word	0x40021000
 8006020:	40021400 	.word	0x40021400
 8006024:	40021800 	.word	0x40021800
 8006028:	40021c00 	.word	0x40021c00
 800602c:	40013c00 	.word	0x40013c00

08006030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	4013      	ands	r3, r2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e001      	b.n	8006052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
 800606c:	4613      	mov	r3, r2
 800606e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800607c:	e003      	b.n	8006086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e12b      	b.n	80062fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fe fdba 	bl	8004c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060f8:	f002 f99e 	bl	8008438 <HAL_RCC_GetPCLK1Freq>
 80060fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4a81      	ldr	r2, [pc, #516]	; (8006308 <HAL_I2C_Init+0x274>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d807      	bhi.n	8006118 <HAL_I2C_Init+0x84>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a80      	ldr	r2, [pc, #512]	; (800630c <HAL_I2C_Init+0x278>)
 800610c:	4293      	cmp	r3, r2
 800610e:	bf94      	ite	ls
 8006110:	2301      	movls	r3, #1
 8006112:	2300      	movhi	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e006      	b.n	8006126 <HAL_I2C_Init+0x92>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a7d      	ldr	r2, [pc, #500]	; (8006310 <HAL_I2C_Init+0x27c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	bf94      	ite	ls
 8006120:	2301      	movls	r3, #1
 8006122:	2300      	movhi	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e0e7      	b.n	80062fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a78      	ldr	r2, [pc, #480]	; (8006314 <HAL_I2C_Init+0x280>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	0c9b      	lsrs	r3, r3, #18
 8006138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4a6a      	ldr	r2, [pc, #424]	; (8006308 <HAL_I2C_Init+0x274>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d802      	bhi.n	8006168 <HAL_I2C_Init+0xd4>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3301      	adds	r3, #1
 8006166:	e009      	b.n	800617c <HAL_I2C_Init+0xe8>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	4a69      	ldr	r2, [pc, #420]	; (8006318 <HAL_I2C_Init+0x284>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	099b      	lsrs	r3, r3, #6
 800617a:	3301      	adds	r3, #1
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	430b      	orrs	r3, r1
 8006182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800618e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	495c      	ldr	r1, [pc, #368]	; (8006308 <HAL_I2C_Init+0x274>)
 8006198:	428b      	cmp	r3, r1
 800619a:	d819      	bhi.n	80061d0 <HAL_I2C_Init+0x13c>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	1e59      	subs	r1, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061b0:	400b      	ands	r3, r1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_I2C_Init+0x138>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1e59      	subs	r1, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061c4:	3301      	adds	r3, #1
 80061c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ca:	e051      	b.n	8006270 <HAL_I2C_Init+0x1dc>
 80061cc:	2304      	movs	r3, #4
 80061ce:	e04f      	b.n	8006270 <HAL_I2C_Init+0x1dc>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d111      	bne.n	80061fc <HAL_I2C_Init+0x168>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1e58      	subs	r0, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	440b      	add	r3, r1
 80061e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ea:	3301      	adds	r3, #1
 80061ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e012      	b.n	8006222 <HAL_I2C_Init+0x18e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	1e58      	subs	r0, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6859      	ldr	r1, [r3, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	0099      	lsls	r1, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006212:	3301      	adds	r3, #1
 8006214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_Init+0x196>
 8006226:	2301      	movs	r3, #1
 8006228:	e022      	b.n	8006270 <HAL_I2C_Init+0x1dc>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10e      	bne.n	8006250 <HAL_I2C_Init+0x1bc>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1e58      	subs	r0, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6859      	ldr	r1, [r3, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	440b      	add	r3, r1
 8006240:	fbb0 f3f3 	udiv	r3, r0, r3
 8006244:	3301      	adds	r3, #1
 8006246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	e00f      	b.n	8006270 <HAL_I2C_Init+0x1dc>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1e58      	subs	r0, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	0099      	lsls	r1, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	fbb0 f3f3 	udiv	r3, r0, r3
 8006266:	3301      	adds	r3, #1
 8006268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	6809      	ldr	r1, [r1, #0]
 8006274:	4313      	orrs	r3, r2
 8006276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800629e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6911      	ldr	r1, [r2, #16]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	68d2      	ldr	r2, [r2, #12]
 80062aa:	4311      	orrs	r1, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	000186a0 	.word	0x000186a0
 800630c:	001e847f 	.word	0x001e847f
 8006310:	003d08ff 	.word	0x003d08ff
 8006314:	431bde83 	.word	0x431bde83
 8006318:	10624dd3 	.word	0x10624dd3

0800631c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	461a      	mov	r2, r3
 8006328:	460b      	mov	r3, r1
 800632a:	817b      	strh	r3, [r7, #10]
 800632c:	4613      	mov	r3, r2
 800632e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006330:	f7ff fb5c 	bl	80059ec <HAL_GetTick>
 8006334:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b20      	cmp	r3, #32
 8006340:	f040 80e0 	bne.w	8006504 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2319      	movs	r3, #25
 800634a:	2201      	movs	r2, #1
 800634c:	4970      	ldr	r1, [pc, #448]	; (8006510 <HAL_I2C_Master_Transmit+0x1f4>)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 fa24 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800635a:	2302      	movs	r3, #2
 800635c:	e0d3      	b.n	8006506 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_I2C_Master_Transmit+0x50>
 8006368:	2302      	movs	r3, #2
 800636a:	e0cc      	b.n	8006506 <HAL_I2C_Master_Transmit+0x1ea>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b01      	cmp	r3, #1
 8006380:	d007      	beq.n	8006392 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2221      	movs	r2, #33	; 0x21
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2210      	movs	r2, #16
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	893a      	ldrh	r2, [r7, #8]
 80063c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a50      	ldr	r2, [pc, #320]	; (8006514 <HAL_I2C_Master_Transmit+0x1f8>)
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063d4:	8979      	ldrh	r1, [r7, #10]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 ff10 	bl	8007200 <I2C_MasterRequestWrite>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e08d      	b.n	8006506 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006400:	e066      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f001 fa9e 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00d      	beq.n	800642e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b04      	cmp	r3, #4
 8006418:	d107      	bne.n	800642a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e06b      	b.n	8006506 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006456:	3b01      	subs	r3, #1
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d11b      	bne.n	80064a4 <HAL_I2C_Master_Transmit+0x188>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	781a      	ldrb	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	6a39      	ldr	r1, [r7, #32]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f001 fa8e 	bl	80079ca <I2C_WaitOnBTFFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d107      	bne.n	80064cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e01a      	b.n	8006506 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d194      	bne.n	8006402 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	e000      	b.n	8006506 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006504:	2302      	movs	r3, #2
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	00100002 	.word	0x00100002
 8006514:	ffff0000 	.word	0xffff0000

08006518 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	; 0x30
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	461a      	mov	r2, r3
 8006524:	460b      	mov	r3, r1
 8006526:	817b      	strh	r3, [r7, #10]
 8006528:	4613      	mov	r3, r2
 800652a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800652c:	f7ff fa5e 	bl	80059ec <HAL_GetTick>
 8006530:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b20      	cmp	r3, #32
 800653c:	f040 820b 	bne.w	8006956 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	2319      	movs	r3, #25
 8006546:	2201      	movs	r2, #1
 8006548:	497c      	ldr	r1, [pc, #496]	; (800673c <HAL_I2C_Master_Receive+0x224>)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 f926 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
 8006558:	e1fe      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_I2C_Master_Receive+0x50>
 8006564:	2302      	movs	r3, #2
 8006566:	e1f7      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d007      	beq.n	800658e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2222      	movs	r2, #34	; 0x22
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2210      	movs	r2, #16
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	893a      	ldrh	r2, [r7, #8]
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4a5c      	ldr	r2, [pc, #368]	; (8006740 <HAL_I2C_Master_Receive+0x228>)
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065d0:	8979      	ldrh	r1, [r7, #10]
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fe94 	bl	8007304 <I2C_MasterRequestRead>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e1b8      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d113      	bne.n	8006616 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ee:	2300      	movs	r3, #0
 80065f0:	623b      	str	r3, [r7, #32]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e18c      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661a:	2b01      	cmp	r3, #1
 800661c:	d11b      	bne.n	8006656 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e16c      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665a:	2b02      	cmp	r3, #2
 800665c:	d11b      	bne.n	8006696 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800666c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667e:	2300      	movs	r3, #0
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	e14c      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066bc:	e138      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	f200 80f1 	bhi.w	80068aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d123      	bne.n	8006718 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f001 f9b9 	bl	8007a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e139      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006716:	e10b      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671c:	2b02      	cmp	r3, #2
 800671e:	d14e      	bne.n	80067be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	4906      	ldr	r1, [pc, #24]	; (8006744 <HAL_I2C_Master_Receive+0x22c>)
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f001 f836 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e10e      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
 800673a:	bf00      	nop
 800673c:	00100002 	.word	0x00100002
 8006740:	ffff0000 	.word	0xffff0000
 8006744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067bc:	e0b8      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	2200      	movs	r2, #0
 80067c6:	4966      	ldr	r1, [pc, #408]	; (8006960 <HAL_I2C_Master_Receive+0x448>)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 ffe7 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0bf      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	2200      	movs	r2, #0
 8006822:	494f      	ldr	r1, [pc, #316]	; (8006960 <HAL_I2C_Master_Receive+0x448>)
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 ffb9 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e091      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068a8:	e042      	b.n	8006930 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f001 f8cc 	bl	8007a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e04c      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d118      	bne.n	8006930 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f aec2 	bne.w	80066be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	00010004 	.word	0x00010004

08006964 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	817b      	strh	r3, [r7, #10]
 8006976:	460b      	mov	r3, r1
 8006978:	813b      	strh	r3, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800697e:	f7ff f835 	bl	80059ec <HAL_GetTick>
 8006982:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b20      	cmp	r3, #32
 800698e:	f040 80d9 	bne.w	8006b44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	2319      	movs	r3, #25
 8006998:	2201      	movs	r2, #1
 800699a:	496d      	ldr	r1, [pc, #436]	; (8006b50 <HAL_I2C_Mem_Write+0x1ec>)
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fefd 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e0cc      	b.n	8006b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_I2C_Mem_Write+0x56>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e0c5      	b.n	8006b46 <HAL_I2C_Mem_Write+0x1e2>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d007      	beq.n	80069e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2221      	movs	r2, #33	; 0x21
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a4d      	ldr	r2, [pc, #308]	; (8006b54 <HAL_I2C_Mem_Write+0x1f0>)
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a22:	88f8      	ldrh	r0, [r7, #6]
 8006a24:	893a      	ldrh	r2, [r7, #8]
 8006a26:	8979      	ldrh	r1, [r7, #10]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	4603      	mov	r3, r0
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fd34 	bl	80074a0 <I2C_RequestMemoryWrite>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d052      	beq.n	8006ae4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e081      	b.n	8006b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 ff7e 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d107      	bne.n	8006a6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e06b      	b.n	8006b46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d11b      	bne.n	8006ae4 <HAL_I2C_Mem_Write+0x180>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d017      	beq.n	8006ae4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1aa      	bne.n	8006a42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 ff6a 	bl	80079ca <I2C_WaitOnBTFFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00d      	beq.n	8006b18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d107      	bne.n	8006b14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e016      	b.n	8006b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e000      	b.n	8006b46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	00100002 	.word	0x00100002
 8006b54:	ffff0000 	.word	0xffff0000

08006b58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	; 0x30
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b72:	f7fe ff3b 	bl	80059ec <HAL_GetTick>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	f040 8208 	bne.w	8006f96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	2319      	movs	r3, #25
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	497b      	ldr	r1, [pc, #492]	; (8006d7c <HAL_I2C_Mem_Read+0x224>)
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fe03 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e1fb      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_I2C_Mem_Read+0x56>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e1f4      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d007      	beq.n	8006bd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2222      	movs	r2, #34	; 0x22
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2240      	movs	r2, #64	; 0x40
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a5b      	ldr	r2, [pc, #364]	; (8006d80 <HAL_I2C_Mem_Read+0x228>)
 8006c14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c16:	88f8      	ldrh	r0, [r7, #6]
 8006c18:	893a      	ldrh	r2, [r7, #8]
 8006c1a:	8979      	ldrh	r1, [r7, #10]
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	4603      	mov	r3, r0
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fcd0 	bl	80075cc <I2C_RequestMemoryRead>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e1b0      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d113      	bne.n	8006c66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	e184      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d11b      	bne.n	8006ca6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e164      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d11b      	bne.n	8006ce6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	e144      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cfc:	e138      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	f200 80f1 	bhi.w	8006eea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d123      	bne.n	8006d58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fe99 	bl	8007a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e139      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d56:	e10b      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d14e      	bne.n	8006dfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	2200      	movs	r2, #0
 8006d68:	4906      	ldr	r1, [pc, #24]	; (8006d84 <HAL_I2C_Mem_Read+0x22c>)
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fd16 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d008      	beq.n	8006d88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e10e      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
 8006d7a:	bf00      	nop
 8006d7c:	00100002 	.word	0x00100002
 8006d80:	ffff0000 	.word	0xffff0000
 8006d84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dfc:	e0b8      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2200      	movs	r2, #0
 8006e06:	4966      	ldr	r1, [pc, #408]	; (8006fa0 <HAL_I2C_Mem_Read+0x448>)
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fcc7 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0bf      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691a      	ldr	r2, [r3, #16]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	2200      	movs	r2, #0
 8006e62:	494f      	ldr	r1, [pc, #316]	; (8006fa0 <HAL_I2C_Mem_Read+0x448>)
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fc99 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e091      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ee8:	e042      	b.n	8006f70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fdac 	bl	8007a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e04c      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d118      	bne.n	8006f70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f aec2 	bne.w	8006cfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e000      	b.n	8006f98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f96:	2302      	movs	r3, #2
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3728      	adds	r7, #40	; 0x28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	00010004 	.word	0x00010004

08006fa4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006fb4:	f7fe fd1a 	bl	80059ec <HAL_GetTick>
 8006fb8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	f040 8111 	bne.w	80071ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	2319      	movs	r3, #25
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	4988      	ldr	r1, [pc, #544]	; (80071f8 <HAL_I2C_IsDeviceReady+0x254>)
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fbe0 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e104      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_I2C_IsDeviceReady+0x50>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e0fd      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b01      	cmp	r3, #1
 8007008:	d007      	beq.n	800701a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0201 	orr.w	r2, r2, #1
 8007018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2224      	movs	r2, #36	; 0x24
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4a70      	ldr	r2, [pc, #448]	; (80071fc <HAL_I2C_IsDeviceReady+0x258>)
 800703c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800704c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2200      	movs	r2, #0
 8007056:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fb9e 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007074:	d103      	bne.n	800707e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800707c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e0b6      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007082:	897b      	ldrh	r3, [r7, #10]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007090:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007092:	f7fe fcab 	bl	80059ec <HAL_GetTick>
 8007096:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	bf0c      	ite	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	2300      	movne	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80070c6:	e025      	b.n	8007114 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070c8:	f7fe fc90 	bl	80059ec <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d302      	bcc.n	80070de <HAL_I2C_IsDeviceReady+0x13a>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	22a0      	movs	r2, #160	; 0xa0
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	bf0c      	ite	eq
 80070f4:	2301      	moveq	r3, #1
 80070f6:	2300      	movne	r3, #0
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2ba0      	cmp	r3, #160	; 0xa0
 800711e:	d005      	beq.n	800712c <HAL_I2C_IsDeviceReady+0x188>
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <HAL_I2C_IsDeviceReady+0x188>
 8007126:	7dbb      	ldrb	r3, [r7, #22]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0cd      	beq.n	80070c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d129      	bne.n	8007196 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007150:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007152:	2300      	movs	r3, #0
 8007154:	613b      	str	r3, [r7, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2319      	movs	r3, #25
 800716e:	2201      	movs	r2, #1
 8007170:	4921      	ldr	r1, [pc, #132]	; (80071f8 <HAL_I2C_IsDeviceReady+0x254>)
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fb12 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e036      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e02c      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2319      	movs	r3, #25
 80071b6:	2201      	movs	r2, #1
 80071b8:	490f      	ldr	r1, [pc, #60]	; (80071f8 <HAL_I2C_IsDeviceReady+0x254>)
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 faee 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e012      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	f4ff af32 	bcc.w	800703e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3720      	adds	r7, #32
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	00100002 	.word	0x00100002
 80071fc:	ffff0000 	.word	0xffff0000

08007200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	460b      	mov	r3, r1
 800720e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d006      	beq.n	800722a <I2C_MasterRequestWrite+0x2a>
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d003      	beq.n	800722a <I2C_MasterRequestWrite+0x2a>
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007228:	d108      	bne.n	800723c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e00b      	b.n	8007254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	2b12      	cmp	r3, #18
 8007242:	d107      	bne.n	8007254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fa9b 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00d      	beq.n	8007288 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727a:	d103      	bne.n	8007284 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e035      	b.n	80072f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007290:	d108      	bne.n	80072a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007292:	897b      	ldrh	r3, [r7, #10]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072a0:	611a      	str	r2, [r3, #16]
 80072a2:	e01b      	b.n	80072dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072a4:	897b      	ldrh	r3, [r7, #10]
 80072a6:	11db      	asrs	r3, r3, #7
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0306 	and.w	r3, r3, #6
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f063 030f 	orn	r3, r3, #15
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	490e      	ldr	r1, [pc, #56]	; (80072fc <I2C_MasterRequestWrite+0xfc>)
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fac1 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e010      	b.n	80072f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072d2:	897b      	ldrh	r3, [r7, #10]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4907      	ldr	r1, [pc, #28]	; (8007300 <I2C_MasterRequestWrite+0x100>)
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fab1 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	00010008 	.word	0x00010008
 8007300:	00010002 	.word	0x00010002

08007304 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	460b      	mov	r3, r1
 8007312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007328:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d006      	beq.n	800733e <I2C_MasterRequestRead+0x3a>
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d003      	beq.n	800733e <I2C_MasterRequestRead+0x3a>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800733c:	d108      	bne.n	8007350 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e00b      	b.n	8007368 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	2b11      	cmp	r3, #17
 8007356:	d107      	bne.n	8007368 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007366:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fa11 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00d      	beq.n	800739c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738e:	d103      	bne.n	8007398 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007396:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e079      	b.n	8007490 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a4:	d108      	bne.n	80073b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073a6:	897b      	ldrh	r3, [r7, #10]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	611a      	str	r2, [r3, #16]
 80073b6:	e05f      	b.n	8007478 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80073b8:	897b      	ldrh	r3, [r7, #10]
 80073ba:	11db      	asrs	r3, r3, #7
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	f003 0306 	and.w	r3, r3, #6
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f063 030f 	orn	r3, r3, #15
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	4930      	ldr	r1, [pc, #192]	; (8007498 <I2C_MasterRequestRead+0x194>)
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fa37 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e054      	b.n	8007490 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4929      	ldr	r1, [pc, #164]	; (800749c <I2C_MasterRequestRead+0x198>)
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fa27 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e044      	b.n	8007490 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800742a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f9af 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00d      	beq.n	8007460 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007452:	d103      	bne.n	800745c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800745a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e017      	b.n	8007490 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007460:	897b      	ldrh	r3, [r7, #10]
 8007462:	11db      	asrs	r3, r3, #7
 8007464:	b2db      	uxtb	r3, r3
 8007466:	f003 0306 	and.w	r3, r3, #6
 800746a:	b2db      	uxtb	r3, r3
 800746c:	f063 030e 	orn	r3, r3, #14
 8007470:	b2da      	uxtb	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	4907      	ldr	r1, [pc, #28]	; (800749c <I2C_MasterRequestRead+0x198>)
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f9e3 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	00010008 	.word	0x00010008
 800749c:	00010002 	.word	0x00010002

080074a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	461a      	mov	r2, r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	817b      	strh	r3, [r7, #10]
 80074b2:	460b      	mov	r3, r1
 80074b4:	813b      	strh	r3, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f960 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f0:	d103      	bne.n	80074fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e05f      	b.n	80075be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074fe:	897b      	ldrh	r3, [r7, #10]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800750c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	492d      	ldr	r1, [pc, #180]	; (80075c8 <I2C_RequestMemoryWrite+0x128>)
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f998 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e04c      	b.n	80075be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800753a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753c:	6a39      	ldr	r1, [r7, #32]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa02 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	2b04      	cmp	r3, #4
 8007550:	d107      	bne.n	8007562 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e02b      	b.n	80075be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d105      	bne.n	8007578 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800756c:	893b      	ldrh	r3, [r7, #8]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	611a      	str	r2, [r3, #16]
 8007576:	e021      	b.n	80075bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007578:	893b      	ldrh	r3, [r7, #8]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	b2da      	uxtb	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007588:	6a39      	ldr	r1, [r7, #32]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f9dc 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b04      	cmp	r3, #4
 800759c:	d107      	bne.n	80075ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e005      	b.n	80075be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075b2:	893b      	ldrh	r3, [r7, #8]
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	00010002 	.word	0x00010002

080075cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	4603      	mov	r3, r0
 80075dc:	817b      	strh	r3, [r7, #10]
 80075de:	460b      	mov	r3, r1
 80075e0:	813b      	strh	r3, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007604:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	2200      	movs	r2, #0
 800760e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f8c2 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00d      	beq.n	800763a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762c:	d103      	bne.n	8007636 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007634:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e0aa      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800763a:	897b      	ldrh	r3, [r7, #10]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007648:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	6a3a      	ldr	r2, [r7, #32]
 800764e:	4952      	ldr	r1, [pc, #328]	; (8007798 <I2C_RequestMemoryRead+0x1cc>)
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f8fa 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e097      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007678:	6a39      	ldr	r1, [r7, #32]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f964 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b04      	cmp	r3, #4
 800768c:	d107      	bne.n	800769e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e076      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d105      	bne.n	80076b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076a8:	893b      	ldrh	r3, [r7, #8]
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	611a      	str	r2, [r3, #16]
 80076b2:	e021      	b.n	80076f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076b4:	893b      	ldrh	r3, [r7, #8]
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c4:	6a39      	ldr	r1, [r7, #32]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f93e 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00d      	beq.n	80076ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d107      	bne.n	80076ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e050      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076ee:	893b      	ldrh	r3, [r7, #8]
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	6a39      	ldr	r1, [r7, #32]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f923 	bl	8007948 <I2C_WaitOnTXEFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00d      	beq.n	8007724 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	2b04      	cmp	r3, #4
 800770e:	d107      	bne.n	8007720 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800771e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e035      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007732:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	2200      	movs	r2, #0
 800773c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f82b 	bl	800779c <I2C_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00d      	beq.n	8007768 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775a:	d103      	bne.n	8007764 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e013      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007768:	897b      	ldrh	r3, [r7, #10]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	4906      	ldr	r1, [pc, #24]	; (8007798 <I2C_RequestMemoryRead+0x1cc>)
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f863 	bl	800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	00010002 	.word	0x00010002

0800779c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077ac:	e025      	b.n	80077fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d021      	beq.n	80077fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f7fe f919 	bl	80059ec <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d302      	bcc.n	80077cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d116      	bne.n	80077fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f043 0220 	orr.w	r2, r3, #32
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e023      	b.n	8007842 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10d      	bne.n	8007820 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	43da      	mvns	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4013      	ands	r3, r2
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf0c      	ite	eq
 8007816:	2301      	moveq	r3, #1
 8007818:	2300      	movne	r3, #0
 800781a:	b2db      	uxtb	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	e00c      	b.n	800783a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	43da      	mvns	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4013      	ands	r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf0c      	ite	eq
 8007832:	2301      	moveq	r3, #1
 8007834:	2300      	movne	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	429a      	cmp	r2, r3
 800783e:	d0b6      	beq.n	80077ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007858:	e051      	b.n	80078fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007868:	d123      	bne.n	80078b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007878:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007882:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f043 0204 	orr.w	r2, r3, #4
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e046      	b.n	8007940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d021      	beq.n	80078fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ba:	f7fe f897 	bl	80059ec <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d116      	bne.n	80078fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e020      	b.n	8007940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10c      	bne.n	8007922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	43da      	mvns	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4013      	ands	r3, r2
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf14      	ite	ne
 800791a:	2301      	movne	r3, #1
 800791c:	2300      	moveq	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e00b      	b.n	800793a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	43da      	mvns	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4013      	ands	r3, r2
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d18d      	bne.n	800785a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007954:	e02d      	b.n	80079b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f8ce 	bl	8007af8 <I2C_IsAcknowledgeFailed>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e02d      	b.n	80079c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d021      	beq.n	80079b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796e:	f7fe f83d 	bl	80059ec <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	d302      	bcc.n	8007984 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d116      	bne.n	80079b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e007      	b.n	80079c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079bc:	2b80      	cmp	r3, #128	; 0x80
 80079be:	d1ca      	bne.n	8007956 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079d6:	e02d      	b.n	8007a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 f88d 	bl	8007af8 <I2C_IsAcknowledgeFailed>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e02d      	b.n	8007a44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d021      	beq.n	8007a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f0:	f7fd fffc 	bl	80059ec <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d302      	bcc.n	8007a06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d116      	bne.n	8007a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	f043 0220 	orr.w	r2, r3, #32
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e007      	b.n	8007a44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d1ca      	bne.n	80079d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a58:	e042      	b.n	8007ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d119      	bne.n	8007a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0210 	mvn.w	r2, #16
 8007a70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e029      	b.n	8007af0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9c:	f7fd ffa6 	bl	80059ec <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d302      	bcc.n	8007ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d116      	bne.n	8007ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	f043 0220 	orr.w	r2, r3, #32
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e007      	b.n	8007af0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	d1b5      	bne.n	8007a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b0e:	d11b      	bne.n	8007b48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	f043 0204 	orr.w	r2, r3, #4
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e267      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d075      	beq.n	8007c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b76:	4b88      	ldr	r3, [pc, #544]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 030c 	and.w	r3, r3, #12
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d00c      	beq.n	8007b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b82:	4b85      	ldr	r3, [pc, #532]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d112      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b8e:	4b82      	ldr	r3, [pc, #520]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b9a:	d10b      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b9c:	4b7e      	ldr	r3, [pc, #504]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d05b      	beq.n	8007c60 <HAL_RCC_OscConfig+0x108>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d157      	bne.n	8007c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e242      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bbc:	d106      	bne.n	8007bcc <HAL_RCC_OscConfig+0x74>
 8007bbe:	4b76      	ldr	r3, [pc, #472]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a75      	ldr	r2, [pc, #468]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	e01d      	b.n	8007c08 <HAL_RCC_OscConfig+0xb0>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x98>
 8007bd6:	4b70      	ldr	r3, [pc, #448]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a6f      	ldr	r2, [pc, #444]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	4b6d      	ldr	r3, [pc, #436]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6c      	ldr	r2, [pc, #432]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	e00b      	b.n	8007c08 <HAL_RCC_OscConfig+0xb0>
 8007bf0:	4b69      	ldr	r3, [pc, #420]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a68      	ldr	r2, [pc, #416]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	4b66      	ldr	r3, [pc, #408]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a65      	ldr	r2, [pc, #404]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d013      	beq.n	8007c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c10:	f7fd feec 	bl	80059ec <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c18:	f7fd fee8 	bl	80059ec <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b64      	cmp	r3, #100	; 0x64
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e207      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c2a:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f0      	beq.n	8007c18 <HAL_RCC_OscConfig+0xc0>
 8007c36:	e014      	b.n	8007c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c38:	f7fd fed8 	bl	80059ec <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c40:	f7fd fed4 	bl	80059ec <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b64      	cmp	r3, #100	; 0x64
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e1f3      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c52:	4b51      	ldr	r3, [pc, #324]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f0      	bne.n	8007c40 <HAL_RCC_OscConfig+0xe8>
 8007c5e:	e000      	b.n	8007c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d063      	beq.n	8007d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c6e:	4b4a      	ldr	r3, [pc, #296]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 030c 	and.w	r3, r3, #12
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c7a:	4b47      	ldr	r3, [pc, #284]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d11c      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c86:	4b44      	ldr	r3, [pc, #272]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d116      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c92:	4b41      	ldr	r3, [pc, #260]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <HAL_RCC_OscConfig+0x152>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d001      	beq.n	8007caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e1c7      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007caa:	4b3b      	ldr	r3, [pc, #236]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	4937      	ldr	r1, [pc, #220]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cbe:	e03a      	b.n	8007d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d020      	beq.n	8007d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cc8:	4b34      	ldr	r3, [pc, #208]	; (8007d9c <HAL_RCC_OscConfig+0x244>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cce:	f7fd fe8d 	bl	80059ec <HAL_GetTick>
 8007cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cd6:	f7fd fe89 	bl	80059ec <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e1a8      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce8:	4b2b      	ldr	r3, [pc, #172]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0f0      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf4:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4925      	ldr	r1, [pc, #148]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	600b      	str	r3, [r1, #0]
 8007d08:	e015      	b.n	8007d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d0a:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <HAL_RCC_OscConfig+0x244>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d10:	f7fd fe6c 	bl	80059ec <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d18:	f7fd fe68 	bl	80059ec <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e187      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1f0      	bne.n	8007d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d036      	beq.n	8007db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d016      	beq.n	8007d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <HAL_RCC_OscConfig+0x248>)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d50:	f7fd fe4c 	bl	80059ec <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d58:	f7fd fe48 	bl	80059ec <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e167      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d6a:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f0      	beq.n	8007d58 <HAL_RCC_OscConfig+0x200>
 8007d76:	e01b      	b.n	8007db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <HAL_RCC_OscConfig+0x248>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7e:	f7fd fe35 	bl	80059ec <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d84:	e00e      	b.n	8007da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d86:	f7fd fe31 	bl	80059ec <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d907      	bls.n	8007da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e150      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	42470000 	.word	0x42470000
 8007da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007da4:	4b88      	ldr	r3, [pc, #544]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1ea      	bne.n	8007d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8097 	beq.w	8007eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dc2:	4b81      	ldr	r3, [pc, #516]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10f      	bne.n	8007dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	4b7d      	ldr	r3, [pc, #500]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	4a7c      	ldr	r2, [pc, #496]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8007dde:	4b7a      	ldr	r3, [pc, #488]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de6:	60bb      	str	r3, [r7, #8]
 8007de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dea:	2301      	movs	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dee:	4b77      	ldr	r3, [pc, #476]	; (8007fcc <HAL_RCC_OscConfig+0x474>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d118      	bne.n	8007e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dfa:	4b74      	ldr	r3, [pc, #464]	; (8007fcc <HAL_RCC_OscConfig+0x474>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a73      	ldr	r2, [pc, #460]	; (8007fcc <HAL_RCC_OscConfig+0x474>)
 8007e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e06:	f7fd fdf1 	bl	80059ec <HAL_GetTick>
 8007e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e0c:	e008      	b.n	8007e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0e:	f7fd fded 	bl	80059ec <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e10c      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e20:	4b6a      	ldr	r3, [pc, #424]	; (8007fcc <HAL_RCC_OscConfig+0x474>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0f0      	beq.n	8007e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d106      	bne.n	8007e42 <HAL_RCC_OscConfig+0x2ea>
 8007e34:	4b64      	ldr	r3, [pc, #400]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e38:	4a63      	ldr	r2, [pc, #396]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e3a:	f043 0301 	orr.w	r3, r3, #1
 8007e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e40:	e01c      	b.n	8007e7c <HAL_RCC_OscConfig+0x324>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b05      	cmp	r3, #5
 8007e48:	d10c      	bne.n	8007e64 <HAL_RCC_OscConfig+0x30c>
 8007e4a:	4b5f      	ldr	r3, [pc, #380]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4e:	4a5e      	ldr	r2, [pc, #376]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e50:	f043 0304 	orr.w	r3, r3, #4
 8007e54:	6713      	str	r3, [r2, #112]	; 0x70
 8007e56:	4b5c      	ldr	r3, [pc, #368]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5a:	4a5b      	ldr	r2, [pc, #364]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6713      	str	r3, [r2, #112]	; 0x70
 8007e62:	e00b      	b.n	8007e7c <HAL_RCC_OscConfig+0x324>
 8007e64:	4b58      	ldr	r3, [pc, #352]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	4a57      	ldr	r2, [pc, #348]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e6a:	f023 0301 	bic.w	r3, r3, #1
 8007e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e70:	4b55      	ldr	r3, [pc, #340]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e74:	4a54      	ldr	r2, [pc, #336]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007e76:	f023 0304 	bic.w	r3, r3, #4
 8007e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d015      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e84:	f7fd fdb2 	bl	80059ec <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e8a:	e00a      	b.n	8007ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e8c:	f7fd fdae 	bl	80059ec <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d901      	bls.n	8007ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e0cb      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea2:	4b49      	ldr	r3, [pc, #292]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0ee      	beq.n	8007e8c <HAL_RCC_OscConfig+0x334>
 8007eae:	e014      	b.n	8007eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eb0:	f7fd fd9c 	bl	80059ec <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007eb6:	e00a      	b.n	8007ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eb8:	f7fd fd98 	bl	80059ec <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e0b5      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ece:	4b3e      	ldr	r3, [pc, #248]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1ee      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d105      	bne.n	8007eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ee0:	4b39      	ldr	r3, [pc, #228]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	4a38      	ldr	r2, [pc, #224]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80a1 	beq.w	8008038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ef6:	4b34      	ldr	r3, [pc, #208]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 030c 	and.w	r3, r3, #12
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d05c      	beq.n	8007fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d141      	bne.n	8007f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0a:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <HAL_RCC_OscConfig+0x478>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f10:	f7fd fd6c 	bl	80059ec <HAL_GetTick>
 8007f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f18:	f7fd fd68 	bl	80059ec <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e087      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2a:	4b27      	ldr	r3, [pc, #156]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69da      	ldr	r2, [r3, #28]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	085b      	lsrs	r3, r3, #1
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	491b      	ldr	r1, [pc, #108]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f60:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <HAL_RCC_OscConfig+0x478>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f66:	f7fd fd41 	bl	80059ec <HAL_GetTick>
 8007f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f6e:	f7fd fd3d 	bl	80059ec <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e05c      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f80:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <HAL_RCC_OscConfig+0x416>
 8007f8c:	e054      	b.n	8008038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <HAL_RCC_OscConfig+0x478>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f94:	f7fd fd2a 	bl	80059ec <HAL_GetTick>
 8007f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f9c:	f7fd fd26 	bl	80059ec <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e045      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fae:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <HAL_RCC_OscConfig+0x470>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f0      	bne.n	8007f9c <HAL_RCC_OscConfig+0x444>
 8007fba:	e03d      	b.n	8008038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d107      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e038      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	40007000 	.word	0x40007000
 8007fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fd4:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <HAL_RCC_OscConfig+0x4ec>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d028      	beq.n	8008034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d121      	bne.n	8008034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d11a      	bne.n	8008034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008004:	4013      	ands	r3, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800800a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800800c:	4293      	cmp	r3, r2
 800800e:	d111      	bne.n	8008034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	3b01      	subs	r3, #1
 800801e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008020:	429a      	cmp	r2, r3
 8008022:	d107      	bne.n	8008034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008030:	429a      	cmp	r2, r3
 8008032:	d001      	beq.n	8008038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e000      	b.n	800803a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40023800 	.word	0x40023800

08008048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0cc      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800805c:	4b68      	ldr	r3, [pc, #416]	; (8008200 <HAL_RCC_ClockConfig+0x1b8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d90c      	bls.n	8008084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806a:	4b65      	ldr	r3, [pc, #404]	; (8008200 <HAL_RCC_ClockConfig+0x1b8>)
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008072:	4b63      	ldr	r3, [pc, #396]	; (8008200 <HAL_RCC_ClockConfig+0x1b8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d001      	beq.n	8008084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0b8      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d020      	beq.n	80080d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800809c:	4b59      	ldr	r3, [pc, #356]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	4a58      	ldr	r2, [pc, #352]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80080a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080b4:	4b53      	ldr	r3, [pc, #332]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	4a52      	ldr	r2, [pc, #328]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80080ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080c0:	4b50      	ldr	r3, [pc, #320]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	494d      	ldr	r1, [pc, #308]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d044      	beq.n	8008168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d107      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080e6:	4b47      	ldr	r3, [pc, #284]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d119      	bne.n	8008126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e07f      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d003      	beq.n	8008106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008102:	2b03      	cmp	r3, #3
 8008104:	d107      	bne.n	8008116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008106:	4b3f      	ldr	r3, [pc, #252]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e06f      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008116:	4b3b      	ldr	r3, [pc, #236]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e067      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008126:	4b37      	ldr	r3, [pc, #220]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f023 0203 	bic.w	r2, r3, #3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4934      	ldr	r1, [pc, #208]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 8008134:	4313      	orrs	r3, r2
 8008136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008138:	f7fd fc58 	bl	80059ec <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813e:	e00a      	b.n	8008156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008140:	f7fd fc54 	bl	80059ec <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f241 3288 	movw	r2, #5000	; 0x1388
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e04f      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008156:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 020c 	and.w	r2, r3, #12
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	429a      	cmp	r2, r3
 8008166:	d1eb      	bne.n	8008140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008168:	4b25      	ldr	r3, [pc, #148]	; (8008200 <HAL_RCC_ClockConfig+0x1b8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d20c      	bcs.n	8008190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008176:	4b22      	ldr	r3, [pc, #136]	; (8008200 <HAL_RCC_ClockConfig+0x1b8>)
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800817e:	4b20      	ldr	r3, [pc, #128]	; (8008200 <HAL_RCC_ClockConfig+0x1b8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d001      	beq.n	8008190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e032      	b.n	80081f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800819c:	4b19      	ldr	r3, [pc, #100]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	4916      	ldr	r1, [pc, #88]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d009      	beq.n	80081ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	490e      	ldr	r1, [pc, #56]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081ce:	f000 f821 	bl	8008214 <HAL_RCC_GetSysClockFreq>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <HAL_RCC_ClockConfig+0x1bc>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	091b      	lsrs	r3, r3, #4
 80081da:	f003 030f 	and.w	r3, r3, #15
 80081de:	490a      	ldr	r1, [pc, #40]	; (8008208 <HAL_RCC_ClockConfig+0x1c0>)
 80081e0:	5ccb      	ldrb	r3, [r1, r3]
 80081e2:	fa22 f303 	lsr.w	r3, r2, r3
 80081e6:	4a09      	ldr	r2, [pc, #36]	; (800820c <HAL_RCC_ClockConfig+0x1c4>)
 80081e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <HAL_RCC_ClockConfig+0x1c8>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fd fbb8 	bl	8005964 <HAL_InitTick>

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40023c00 	.word	0x40023c00
 8008204:	40023800 	.word	0x40023800
 8008208:	08020d48 	.word	0x08020d48
 800820c:	20000054 	.word	0x20000054
 8008210:	20000058 	.word	0x20000058

08008214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008218:	b094      	sub	sp, #80	; 0x50
 800821a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
 8008220:	2300      	movs	r3, #0
 8008222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008224:	2300      	movs	r3, #0
 8008226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800822c:	4b79      	ldr	r3, [pc, #484]	; (8008414 <HAL_RCC_GetSysClockFreq+0x200>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f003 030c 	and.w	r3, r3, #12
 8008234:	2b08      	cmp	r3, #8
 8008236:	d00d      	beq.n	8008254 <HAL_RCC_GetSysClockFreq+0x40>
 8008238:	2b08      	cmp	r3, #8
 800823a:	f200 80e1 	bhi.w	8008400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_RCC_GetSysClockFreq+0x34>
 8008242:	2b04      	cmp	r3, #4
 8008244:	d003      	beq.n	800824e <HAL_RCC_GetSysClockFreq+0x3a>
 8008246:	e0db      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008248:	4b73      	ldr	r3, [pc, #460]	; (8008418 <HAL_RCC_GetSysClockFreq+0x204>)
 800824a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800824c:	e0db      	b.n	8008406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800824e:	4b73      	ldr	r3, [pc, #460]	; (800841c <HAL_RCC_GetSysClockFreq+0x208>)
 8008250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008252:	e0d8      	b.n	8008406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008254:	4b6f      	ldr	r3, [pc, #444]	; (8008414 <HAL_RCC_GetSysClockFreq+0x200>)
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800825e:	4b6d      	ldr	r3, [pc, #436]	; (8008414 <HAL_RCC_GetSysClockFreq+0x200>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d063      	beq.n	8008332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800826a:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <HAL_RCC_GetSysClockFreq+0x200>)
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	099b      	lsrs	r3, r3, #6
 8008270:	2200      	movs	r2, #0
 8008272:	63bb      	str	r3, [r7, #56]	; 0x38
 8008274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827c:	633b      	str	r3, [r7, #48]	; 0x30
 800827e:	2300      	movs	r3, #0
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
 8008282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008286:	4622      	mov	r2, r4
 8008288:	462b      	mov	r3, r5
 800828a:	f04f 0000 	mov.w	r0, #0
 800828e:	f04f 0100 	mov.w	r1, #0
 8008292:	0159      	lsls	r1, r3, #5
 8008294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008298:	0150      	lsls	r0, r2, #5
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4621      	mov	r1, r4
 80082a0:	1a51      	subs	r1, r2, r1
 80082a2:	6139      	str	r1, [r7, #16]
 80082a4:	4629      	mov	r1, r5
 80082a6:	eb63 0301 	sbc.w	r3, r3, r1
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	f04f 0300 	mov.w	r3, #0
 80082b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082b8:	4659      	mov	r1, fp
 80082ba:	018b      	lsls	r3, r1, #6
 80082bc:	4651      	mov	r1, sl
 80082be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082c2:	4651      	mov	r1, sl
 80082c4:	018a      	lsls	r2, r1, #6
 80082c6:	4651      	mov	r1, sl
 80082c8:	ebb2 0801 	subs.w	r8, r2, r1
 80082cc:	4659      	mov	r1, fp
 80082ce:	eb63 0901 	sbc.w	r9, r3, r1
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082e6:	4690      	mov	r8, r2
 80082e8:	4699      	mov	r9, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	eb18 0303 	adds.w	r3, r8, r3
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	462b      	mov	r3, r5
 80082f4:	eb49 0303 	adc.w	r3, r9, r3
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008306:	4629      	mov	r1, r5
 8008308:	024b      	lsls	r3, r1, #9
 800830a:	4621      	mov	r1, r4
 800830c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008310:	4621      	mov	r1, r4
 8008312:	024a      	lsls	r2, r1, #9
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831a:	2200      	movs	r2, #0
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
 800831e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008324:	f7f8 fcb0 	bl	8000c88 <__aeabi_uldivmod>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4613      	mov	r3, r2
 800832e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008330:	e058      	b.n	80083e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008332:	4b38      	ldr	r3, [pc, #224]	; (8008414 <HAL_RCC_GetSysClockFreq+0x200>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	099b      	lsrs	r3, r3, #6
 8008338:	2200      	movs	r2, #0
 800833a:	4618      	mov	r0, r3
 800833c:	4611      	mov	r1, r2
 800833e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008342:	623b      	str	r3, [r7, #32]
 8008344:	2300      	movs	r3, #0
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
 8008348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800834c:	4642      	mov	r2, r8
 800834e:	464b      	mov	r3, r9
 8008350:	f04f 0000 	mov.w	r0, #0
 8008354:	f04f 0100 	mov.w	r1, #0
 8008358:	0159      	lsls	r1, r3, #5
 800835a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800835e:	0150      	lsls	r0, r2, #5
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4641      	mov	r1, r8
 8008366:	ebb2 0a01 	subs.w	sl, r2, r1
 800836a:	4649      	mov	r1, r9
 800836c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800837c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008384:	ebb2 040a 	subs.w	r4, r2, sl
 8008388:	eb63 050b 	sbc.w	r5, r3, fp
 800838c:	f04f 0200 	mov.w	r2, #0
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	00eb      	lsls	r3, r5, #3
 8008396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800839a:	00e2      	lsls	r2, r4, #3
 800839c:	4614      	mov	r4, r2
 800839e:	461d      	mov	r5, r3
 80083a0:	4643      	mov	r3, r8
 80083a2:	18e3      	adds	r3, r4, r3
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	464b      	mov	r3, r9
 80083a8:	eb45 0303 	adc.w	r3, r5, r3
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80083ba:	4629      	mov	r1, r5
 80083bc:	028b      	lsls	r3, r1, #10
 80083be:	4621      	mov	r1, r4
 80083c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80083c4:	4621      	mov	r1, r4
 80083c6:	028a      	lsls	r2, r1, #10
 80083c8:	4610      	mov	r0, r2
 80083ca:	4619      	mov	r1, r3
 80083cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ce:	2200      	movs	r2, #0
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	61fa      	str	r2, [r7, #28]
 80083d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083d8:	f7f8 fc56 	bl	8000c88 <__aeabi_uldivmod>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4613      	mov	r3, r2
 80083e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80083e4:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <HAL_RCC_GetSysClockFreq+0x200>)
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	3301      	adds	r3, #1
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80083f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80083fe:	e002      	b.n	8008406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008400:	4b05      	ldr	r3, [pc, #20]	; (8008418 <HAL_RCC_GetSysClockFreq+0x204>)
 8008402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008408:	4618      	mov	r0, r3
 800840a:	3750      	adds	r7, #80	; 0x50
 800840c:	46bd      	mov	sp, r7
 800840e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008412:	bf00      	nop
 8008414:	40023800 	.word	0x40023800
 8008418:	00f42400 	.word	0x00f42400
 800841c:	007a1200 	.word	0x007a1200

08008420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008424:	4b03      	ldr	r3, [pc, #12]	; (8008434 <HAL_RCC_GetHCLKFreq+0x14>)
 8008426:	681b      	ldr	r3, [r3, #0]
}
 8008428:	4618      	mov	r0, r3
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000054 	.word	0x20000054

08008438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800843c:	f7ff fff0 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8008440:	4602      	mov	r2, r0
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	0a9b      	lsrs	r3, r3, #10
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	4903      	ldr	r1, [pc, #12]	; (800845c <HAL_RCC_GetPCLK1Freq+0x24>)
 800844e:	5ccb      	ldrb	r3, [r1, r3]
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008454:	4618      	mov	r0, r3
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40023800 	.word	0x40023800
 800845c:	08020d58 	.word	0x08020d58

08008460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008464:	f7ff ffdc 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8008468:	4602      	mov	r2, r0
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	0b5b      	lsrs	r3, r3, #13
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	4903      	ldr	r1, [pc, #12]	; (8008484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008476:	5ccb      	ldrb	r3, [r1, r3]
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40023800 	.word	0x40023800
 8008484:	08020d58 	.word	0x08020d58

08008488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e07b      	b.n	8008592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d108      	bne.n	80084b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084aa:	d009      	beq.n	80084c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	61da      	str	r2, [r3, #28]
 80084b2:	e005      	b.n	80084c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fc fbf2 	bl	8004cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008544:	ea42 0103 	orr.w	r1, r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	f003 0104 	and.w	r1, r3, #4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	f003 0210 	and.w	r2, r3, #16
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b088      	sub	sp, #32
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_SPI_Transmit+0x22>
 80085b8:	2302      	movs	r3, #2
 80085ba:	e126      	b.n	800880a <HAL_SPI_Transmit+0x270>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085c4:	f7fd fa12 	bl	80059ec <HAL_GetTick>
 80085c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d002      	beq.n	80085e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80085da:	2302      	movs	r3, #2
 80085dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085de:	e10b      	b.n	80087f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_SPI_Transmit+0x52>
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085f0:	e102      	b.n	80087f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2203      	movs	r2, #3
 80085f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	88fa      	ldrh	r2, [r7, #6]
 800860a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	88fa      	ldrh	r2, [r7, #6]
 8008610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008638:	d10f      	bne.n	800865a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	d007      	beq.n	8008678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008680:	d14b      	bne.n	800871a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <HAL_SPI_Transmit+0xf6>
 800868a:	8afb      	ldrh	r3, [r7, #22]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d13e      	bne.n	800870e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a0:	1c9a      	adds	r2, r3, #2
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80086b4:	e02b      	b.n	800870e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d112      	bne.n	80086ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	881a      	ldrh	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d4:	1c9a      	adds	r2, r3, #2
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80086e8:	e011      	b.n	800870e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086ea:	f7fd f97f 	bl	80059ec <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d803      	bhi.n	8008702 <HAL_SPI_Transmit+0x168>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d102      	bne.n	8008708 <HAL_SPI_Transmit+0x16e>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800870c:	e074      	b.n	80087f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008712:	b29b      	uxth	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1ce      	bne.n	80086b6 <HAL_SPI_Transmit+0x11c>
 8008718:	e04c      	b.n	80087b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_SPI_Transmit+0x18e>
 8008722:	8afb      	ldrh	r3, [r7, #22]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d140      	bne.n	80087aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	7812      	ldrb	r2, [r2, #0]
 8008734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800874e:	e02c      	b.n	80087aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b02      	cmp	r3, #2
 800875c:	d113      	bne.n	8008786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	7812      	ldrb	r2, [r2, #0]
 800876a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	86da      	strh	r2, [r3, #54]	; 0x36
 8008784:	e011      	b.n	80087aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008786:	f7fd f931 	bl	80059ec <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d803      	bhi.n	800879e <HAL_SPI_Transmit+0x204>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879c:	d102      	bne.n	80087a4 <HAL_SPI_Transmit+0x20a>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087a8:	e026      	b.n	80087f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1cd      	bne.n	8008750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fbcb 	bl	8008f54 <SPI_EndRxTxTransaction>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2220      	movs	r2, #32
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e000      	b.n	80087f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80087f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008808:	7ffb      	ldrb	r3, [r7, #31]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b088      	sub	sp, #32
 8008816:	af02      	add	r7, sp, #8
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800882e:	d112      	bne.n	8008856 <HAL_SPI_Receive+0x44>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10e      	bne.n	8008856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2204      	movs	r2, #4
 800883c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008840:	88fa      	ldrh	r2, [r7, #6]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4613      	mov	r3, r2
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 f8f1 	bl	8008a34 <HAL_SPI_TransmitReceive>
 8008852:	4603      	mov	r3, r0
 8008854:	e0ea      	b.n	8008a2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_SPI_Receive+0x52>
 8008860:	2302      	movs	r3, #2
 8008862:	e0e3      	b.n	8008a2c <HAL_SPI_Receive+0x21a>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800886c:	f7fd f8be 	bl	80059ec <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b01      	cmp	r3, #1
 800887c:	d002      	beq.n	8008884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800887e:	2302      	movs	r3, #2
 8008880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008882:	e0ca      	b.n	8008a1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <HAL_SPI_Receive+0x7e>
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008894:	e0c1      	b.n	8008a1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2204      	movs	r2, #4
 800889a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	88fa      	ldrh	r2, [r7, #6]
 80088b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088dc:	d10f      	bne.n	80088fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	d007      	beq.n	800891c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800891a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d162      	bne.n	80089ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008924:	e02e      	b.n	8008984 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b01      	cmp	r3, #1
 8008932:	d115      	bne.n	8008960 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f103 020c 	add.w	r2, r3, #12
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	7812      	ldrb	r2, [r2, #0]
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800895e:	e011      	b.n	8008984 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008960:	f7fd f844 	bl	80059ec <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d803      	bhi.n	8008978 <HAL_SPI_Receive+0x166>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d102      	bne.n	800897e <HAL_SPI_Receive+0x16c>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008982:	e04a      	b.n	8008a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1cb      	bne.n	8008926 <HAL_SPI_Receive+0x114>
 800898e:	e031      	b.n	80089f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b01      	cmp	r3, #1
 800899c:	d113      	bne.n	80089c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	b292      	uxth	r2, r2
 80089aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b0:	1c9a      	adds	r2, r3, #2
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	3b01      	subs	r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089c4:	e011      	b.n	80089ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089c6:	f7fd f811 	bl	80059ec <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d803      	bhi.n	80089de <HAL_SPI_Receive+0x1cc>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d102      	bne.n	80089e4 <HAL_SPI_Receive+0x1d2>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089e8:	e017      	b.n	8008a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1cd      	bne.n	8008990 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fa45 	bl	8008e88 <SPI_EndRxTransaction>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2220      	movs	r2, #32
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	75fb      	strb	r3, [r7, #23]
 8008a16:	e000      	b.n	8008a1a <HAL_SPI_Receive+0x208>
  }

error :
 8008a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	; 0x30
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a42:	2301      	movs	r3, #1
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_SPI_TransmitReceive+0x26>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e18a      	b.n	8008d70 <HAL_SPI_TransmitReceive+0x33c>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a62:	f7fc ffc3 	bl	80059ec <HAL_GetTick>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a78:	887b      	ldrh	r3, [r7, #2]
 8008a7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d00f      	beq.n	8008aa4 <HAL_SPI_TransmitReceive+0x70>
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a8a:	d107      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <HAL_SPI_TransmitReceive+0x68>
 8008a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d003      	beq.n	8008aa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008aa2:	e15b      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <HAL_SPI_TransmitReceive+0x82>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <HAL_SPI_TransmitReceive+0x82>
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008abc:	e14e      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d003      	beq.n	8008ad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2205      	movs	r2, #5
 8008ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	887a      	ldrh	r2, [r7, #2]
 8008ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	887a      	ldrh	r2, [r7, #2]
 8008ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	887a      	ldrh	r2, [r7, #2]
 8008af4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	887a      	ldrh	r2, [r7, #2]
 8008afa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b12:	2b40      	cmp	r3, #64	; 0x40
 8008b14:	d007      	beq.n	8008b26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b2e:	d178      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x10a>
 8008b38:	8b7b      	ldrh	r3, [r7, #26]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d166      	bne.n	8008c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	881a      	ldrh	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b62:	e053      	b.n	8008c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d11b      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x176>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d016      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x176>
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d113      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	1c9a      	adds	r2, r3, #2
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d119      	bne.n	8008bec <HAL_SPI_TransmitReceive+0x1b8>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d014      	beq.n	8008bec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	b292      	uxth	r2, r2
 8008bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	1c9a      	adds	r2, r3, #2
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008be8:	2301      	movs	r3, #1
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bec:	f7fc fefe 	bl	80059ec <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d807      	bhi.n	8008c0c <HAL_SPI_TransmitReceive+0x1d8>
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d003      	beq.n	8008c0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c0a:	e0a7      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1a6      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x130>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1a1      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x130>
 8008c20:	e07c      	b.n	8008d1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x1fc>
 8008c2a:	8b7b      	ldrh	r3, [r7, #26]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d16b      	bne.n	8008d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c56:	e057      	b.n	8008d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d11c      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x26c>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d017      	beq.n	8008ca0 <HAL_SPI_TransmitReceive+0x26c>
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d114      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	7812      	ldrb	r2, [r2, #0]
 8008c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d119      	bne.n	8008ce2 <HAL_SPI_TransmitReceive+0x2ae>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d014      	beq.n	8008ce2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc2:	b2d2      	uxtb	r2, r2
 8008cc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ce2:	f7fc fe83 	bl	80059ec <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d803      	bhi.n	8008cfa <HAL_SPI_TransmitReceive+0x2c6>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d102      	bne.n	8008d00 <HAL_SPI_TransmitReceive+0x2cc>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d103      	bne.n	8008d08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d06:	e029      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1a2      	bne.n	8008c58 <HAL_SPI_TransmitReceive+0x224>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d19d      	bne.n	8008c58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 f917 	bl	8008f54 <SPI_EndRxTxTransaction>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008d38:	e010      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10b      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d42:	2300      	movs	r3, #0
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	e000      	b.n	8008d5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3730      	adds	r7, #48	; 0x30
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d88:	f7fc fe30 	bl	80059ec <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4413      	add	r3, r2
 8008d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d98:	f7fc fe28 	bl	80059ec <HAL_GetTick>
 8008d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d9e:	4b39      	ldr	r3, [pc, #228]	; (8008e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	015b      	lsls	r3, r3, #5
 8008da4:	0d1b      	lsrs	r3, r3, #20
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	fb02 f303 	mul.w	r3, r2, r3
 8008dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dae:	e054      	b.n	8008e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db6:	d050      	beq.n	8008e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008db8:	f7fc fe18 	bl	80059ec <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d902      	bls.n	8008dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d13d      	bne.n	8008e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de6:	d111      	bne.n	8008e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008df0:	d004      	beq.n	8008dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dfa:	d107      	bne.n	8008e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e14:	d10f      	bne.n	8008e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e017      	b.n	8008e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4013      	ands	r3, r2
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	bf0c      	ite	eq
 8008e6a:	2301      	moveq	r3, #1
 8008e6c:	2300      	movne	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d19b      	bne.n	8008db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000054 	.word	0x20000054

08008e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e9c:	d111      	bne.n	8008ec2 <SPI_EndRxTransaction+0x3a>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea6:	d004      	beq.n	8008eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb0:	d107      	bne.n	8008ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eca:	d12a      	bne.n	8008f22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ed4:	d012      	beq.n	8008efc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2200      	movs	r2, #0
 8008ede:	2180      	movs	r1, #128	; 0x80
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff ff49 	bl	8008d78 <SPI_WaitFlagStateUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d02d      	beq.n	8008f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef0:	f043 0220 	orr.w	r2, r3, #32
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e026      	b.n	8008f4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2200      	movs	r2, #0
 8008f04:	2101      	movs	r1, #1
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff ff36 	bl	8008d78 <SPI_WaitFlagStateUntilTimeout>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01a      	beq.n	8008f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f16:	f043 0220 	orr.w	r2, r3, #32
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e013      	b.n	8008f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff ff23 	bl	8008d78 <SPI_WaitFlagStateUntilTimeout>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d007      	beq.n	8008f48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	f043 0220 	orr.w	r2, r3, #32
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e000      	b.n	8008f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f60:	4b1b      	ldr	r3, [pc, #108]	; (8008fd0 <SPI_EndRxTxTransaction+0x7c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a1b      	ldr	r2, [pc, #108]	; (8008fd4 <SPI_EndRxTxTransaction+0x80>)
 8008f66:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6a:	0d5b      	lsrs	r3, r3, #21
 8008f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f7e:	d112      	bne.n	8008fa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2200      	movs	r2, #0
 8008f88:	2180      	movs	r1, #128	; 0x80
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fef4 	bl	8008d78 <SPI_WaitFlagStateUntilTimeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d016      	beq.n	8008fc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9a:	f043 0220 	orr.w	r2, r3, #32
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e00f      	b.n	8008fc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fbc:	2b80      	cmp	r3, #128	; 0x80
 8008fbe:	d0f2      	beq.n	8008fa6 <SPI_EndRxTxTransaction+0x52>
 8008fc0:	e000      	b.n	8008fc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008fc2:	bf00      	nop
  }

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000054 	.word	0x20000054
 8008fd4:	165e9f81 	.word	0x165e9f81

08008fd8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e034      	b.n	8009058 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7fb ffc6 	bl	8004f94 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3308      	adds	r3, #8
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f000 fbe6 	bl	80097e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	461a      	mov	r2, r3
 8009022:	68b9      	ldr	r1, [r7, #8]
 8009024:	f000 fc30 	bl	8009888 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6858      	ldr	r0, [r3, #4]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	f000 fc65 	bl	8009904 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68fa      	ldr	r2, [r7, #12]
 8009040:	6892      	ldr	r2, [r2, #8]
 8009042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	6892      	ldr	r2, [r2, #8]
 800904e:	f041 0101 	orr.w	r1, r1, #1
 8009052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e03f      	b.n	80090f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fb fef0 	bl	8004e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2224      	movs	r2, #36	; 0x24
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f929 	bl	80092fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	691a      	ldr	r2, [r3, #16]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	695a      	ldr	r2, [r3, #20]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b08a      	sub	sp, #40	; 0x28
 80090fe:	af02      	add	r7, sp, #8
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b20      	cmp	r3, #32
 8009118:	d17c      	bne.n	8009214 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_UART_Transmit+0x2c>
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e075      	b.n	8009216 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_UART_Transmit+0x3e>
 8009134:	2302      	movs	r3, #2
 8009136:	e06e      	b.n	8009216 <HAL_UART_Transmit+0x11c>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2221      	movs	r2, #33	; 0x21
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800914e:	f7fc fc4d 	bl	80059ec <HAL_GetTick>
 8009152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	88fa      	ldrh	r2, [r7, #6]
 8009158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	88fa      	ldrh	r2, [r7, #6]
 800915e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009168:	d108      	bne.n	800917c <HAL_UART_Transmit+0x82>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e003      	b.n	8009184 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800918c:	e02a      	b.n	80091e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2200      	movs	r2, #0
 8009196:	2180      	movs	r1, #128	; 0x80
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f840 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e036      	b.n	8009216 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10b      	bne.n	80091c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	3302      	adds	r3, #2
 80091c2:	61bb      	str	r3, [r7, #24]
 80091c4:	e007      	b.n	80091d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	3301      	adds	r3, #1
 80091d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091da:	b29b      	uxth	r3, r3
 80091dc:	3b01      	subs	r3, #1
 80091de:	b29a      	uxth	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1cf      	bne.n	800918e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2200      	movs	r2, #0
 80091f6:	2140      	movs	r1, #64	; 0x40
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f810 	bl	800921e <UART_WaitOnFlagUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e006      	b.n	8009216 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	e000      	b.n	8009216 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009214:	2302      	movs	r3, #2
  }
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b090      	sub	sp, #64	; 0x40
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922e:	e050      	b.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	d04c      	beq.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0x30>
 800923e:	f7fc fbd5 	bl	80059ec <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800924a:	429a      	cmp	r2, r3
 800924c:	d241      	bcs.n	80092d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	330c      	adds	r3, #12
 8009254:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	330c      	adds	r3, #12
 800926c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800926e:	637a      	str	r2, [r7, #52]	; 0x34
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e5      	bne.n	800924e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3314      	adds	r3, #20
 8009288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	613b      	str	r3, [r7, #16]
   return(result);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3314      	adds	r3, #20
 80092a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a2:	623a      	str	r2, [r7, #32]
 80092a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e5      	bne.n	8009282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e00f      	b.n	80092f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	4013      	ands	r3, r2
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	429a      	cmp	r2, r3
 80092e0:	bf0c      	ite	eq
 80092e2:	2301      	moveq	r3, #1
 80092e4:	2300      	movne	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d09f      	beq.n	8009230 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3740      	adds	r7, #64	; 0x40
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009300:	b0c0      	sub	sp, #256	; 0x100
 8009302:	af00      	add	r7, sp, #0
 8009304:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009318:	68d9      	ldr	r1, [r3, #12]
 800931a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	ea40 0301 	orr.w	r3, r0, r1
 8009324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	431a      	orrs	r2, r3
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	431a      	orrs	r2, r3
 800933c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009354:	f021 010c 	bic.w	r1, r1, #12
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009362:	430b      	orrs	r3, r1
 8009364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009376:	6999      	ldr	r1, [r3, #24]
 8009378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	ea40 0301 	orr.w	r3, r0, r1
 8009382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b8f      	ldr	r3, [pc, #572]	; (80095c8 <UART_SetConfig+0x2cc>)
 800938c:	429a      	cmp	r2, r3
 800938e:	d005      	beq.n	800939c <UART_SetConfig+0xa0>
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b8d      	ldr	r3, [pc, #564]	; (80095cc <UART_SetConfig+0x2d0>)
 8009398:	429a      	cmp	r2, r3
 800939a:	d104      	bne.n	80093a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800939c:	f7ff f860 	bl	8008460 <HAL_RCC_GetPCLK2Freq>
 80093a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093a4:	e003      	b.n	80093ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093a6:	f7ff f847 	bl	8008438 <HAL_RCC_GetPCLK1Freq>
 80093aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093b8:	f040 810c 	bne.w	80095d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093ce:	4622      	mov	r2, r4
 80093d0:	462b      	mov	r3, r5
 80093d2:	1891      	adds	r1, r2, r2
 80093d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80093d6:	415b      	adcs	r3, r3
 80093d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093de:	4621      	mov	r1, r4
 80093e0:	eb12 0801 	adds.w	r8, r2, r1
 80093e4:	4629      	mov	r1, r5
 80093e6:	eb43 0901 	adc.w	r9, r3, r1
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093fe:	4690      	mov	r8, r2
 8009400:	4699      	mov	r9, r3
 8009402:	4623      	mov	r3, r4
 8009404:	eb18 0303 	adds.w	r3, r8, r3
 8009408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800940c:	462b      	mov	r3, r5
 800940e:	eb49 0303 	adc.w	r3, r9, r3
 8009412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009422:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800942a:	460b      	mov	r3, r1
 800942c:	18db      	adds	r3, r3, r3
 800942e:	653b      	str	r3, [r7, #80]	; 0x50
 8009430:	4613      	mov	r3, r2
 8009432:	eb42 0303 	adc.w	r3, r2, r3
 8009436:	657b      	str	r3, [r7, #84]	; 0x54
 8009438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800943c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009440:	f7f7 fc22 	bl	8000c88 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4b61      	ldr	r3, [pc, #388]	; (80095d0 <UART_SetConfig+0x2d4>)
 800944a:	fba3 2302 	umull	r2, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	011c      	lsls	r4, r3, #4
 8009452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009456:	2200      	movs	r2, #0
 8009458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800945c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009464:	4642      	mov	r2, r8
 8009466:	464b      	mov	r3, r9
 8009468:	1891      	adds	r1, r2, r2
 800946a:	64b9      	str	r1, [r7, #72]	; 0x48
 800946c:	415b      	adcs	r3, r3
 800946e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009474:	4641      	mov	r1, r8
 8009476:	eb12 0a01 	adds.w	sl, r2, r1
 800947a:	4649      	mov	r1, r9
 800947c:	eb43 0b01 	adc.w	fp, r3, r1
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800948c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009494:	4692      	mov	sl, r2
 8009496:	469b      	mov	fp, r3
 8009498:	4643      	mov	r3, r8
 800949a:	eb1a 0303 	adds.w	r3, sl, r3
 800949e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094a2:	464b      	mov	r3, r9
 80094a4:	eb4b 0303 	adc.w	r3, fp, r3
 80094a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094c0:	460b      	mov	r3, r1
 80094c2:	18db      	adds	r3, r3, r3
 80094c4:	643b      	str	r3, [r7, #64]	; 0x40
 80094c6:	4613      	mov	r3, r2
 80094c8:	eb42 0303 	adc.w	r3, r2, r3
 80094cc:	647b      	str	r3, [r7, #68]	; 0x44
 80094ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094d6:	f7f7 fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4611      	mov	r1, r2
 80094e0:	4b3b      	ldr	r3, [pc, #236]	; (80095d0 <UART_SetConfig+0x2d4>)
 80094e2:	fba3 2301 	umull	r2, r3, r3, r1
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	2264      	movs	r2, #100	; 0x64
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	1acb      	subs	r3, r1, r3
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094f6:	4b36      	ldr	r3, [pc, #216]	; (80095d0 <UART_SetConfig+0x2d4>)
 80094f8:	fba3 2302 	umull	r2, r3, r3, r2
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009504:	441c      	add	r4, r3
 8009506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800950a:	2200      	movs	r2, #0
 800950c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009510:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009518:	4642      	mov	r2, r8
 800951a:	464b      	mov	r3, r9
 800951c:	1891      	adds	r1, r2, r2
 800951e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009520:	415b      	adcs	r3, r3
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009528:	4641      	mov	r1, r8
 800952a:	1851      	adds	r1, r2, r1
 800952c:	6339      	str	r1, [r7, #48]	; 0x30
 800952e:	4649      	mov	r1, r9
 8009530:	414b      	adcs	r3, r1
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009540:	4659      	mov	r1, fp
 8009542:	00cb      	lsls	r3, r1, #3
 8009544:	4651      	mov	r1, sl
 8009546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800954a:	4651      	mov	r1, sl
 800954c:	00ca      	lsls	r2, r1, #3
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	4603      	mov	r3, r0
 8009554:	4642      	mov	r2, r8
 8009556:	189b      	adds	r3, r3, r2
 8009558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800955c:	464b      	mov	r3, r9
 800955e:	460a      	mov	r2, r1
 8009560:	eb42 0303 	adc.w	r3, r2, r3
 8009564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009574:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800957c:	460b      	mov	r3, r1
 800957e:	18db      	adds	r3, r3, r3
 8009580:	62bb      	str	r3, [r7, #40]	; 0x28
 8009582:	4613      	mov	r3, r2
 8009584:	eb42 0303 	adc.w	r3, r2, r3
 8009588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800958a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800958e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009592:	f7f7 fb79 	bl	8000c88 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <UART_SetConfig+0x2d4>)
 800959c:	fba3 1302 	umull	r1, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	2164      	movs	r1, #100	; 0x64
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	00db      	lsls	r3, r3, #3
 80095ac:	3332      	adds	r3, #50	; 0x32
 80095ae:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <UART_SetConfig+0x2d4>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f003 0207 	and.w	r2, r3, #7
 80095ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4422      	add	r2, r4
 80095c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095c4:	e105      	b.n	80097d2 <UART_SetConfig+0x4d6>
 80095c6:	bf00      	nop
 80095c8:	40011000 	.word	0x40011000
 80095cc:	40011400 	.word	0x40011400
 80095d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095e6:	4642      	mov	r2, r8
 80095e8:	464b      	mov	r3, r9
 80095ea:	1891      	adds	r1, r2, r2
 80095ec:	6239      	str	r1, [r7, #32]
 80095ee:	415b      	adcs	r3, r3
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
 80095f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095f6:	4641      	mov	r1, r8
 80095f8:	1854      	adds	r4, r2, r1
 80095fa:	4649      	mov	r1, r9
 80095fc:	eb43 0501 	adc.w	r5, r3, r1
 8009600:	f04f 0200 	mov.w	r2, #0
 8009604:	f04f 0300 	mov.w	r3, #0
 8009608:	00eb      	lsls	r3, r5, #3
 800960a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800960e:	00e2      	lsls	r2, r4, #3
 8009610:	4614      	mov	r4, r2
 8009612:	461d      	mov	r5, r3
 8009614:	4643      	mov	r3, r8
 8009616:	18e3      	adds	r3, r4, r3
 8009618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800961c:	464b      	mov	r3, r9
 800961e:	eb45 0303 	adc.w	r3, r5, r3
 8009622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009636:	f04f 0200 	mov.w	r2, #0
 800963a:	f04f 0300 	mov.w	r3, #0
 800963e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009642:	4629      	mov	r1, r5
 8009644:	008b      	lsls	r3, r1, #2
 8009646:	4621      	mov	r1, r4
 8009648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800964c:	4621      	mov	r1, r4
 800964e:	008a      	lsls	r2, r1, #2
 8009650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009654:	f7f7 fb18 	bl	8000c88 <__aeabi_uldivmod>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4b60      	ldr	r3, [pc, #384]	; (80097e0 <UART_SetConfig+0x4e4>)
 800965e:	fba3 2302 	umull	r2, r3, r3, r2
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	011c      	lsls	r4, r3, #4
 8009666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966a:	2200      	movs	r2, #0
 800966c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009670:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009678:	4642      	mov	r2, r8
 800967a:	464b      	mov	r3, r9
 800967c:	1891      	adds	r1, r2, r2
 800967e:	61b9      	str	r1, [r7, #24]
 8009680:	415b      	adcs	r3, r3
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009688:	4641      	mov	r1, r8
 800968a:	1851      	adds	r1, r2, r1
 800968c:	6139      	str	r1, [r7, #16]
 800968e:	4649      	mov	r1, r9
 8009690:	414b      	adcs	r3, r1
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80096a0:	4659      	mov	r1, fp
 80096a2:	00cb      	lsls	r3, r1, #3
 80096a4:	4651      	mov	r1, sl
 80096a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096aa:	4651      	mov	r1, sl
 80096ac:	00ca      	lsls	r2, r1, #3
 80096ae:	4610      	mov	r0, r2
 80096b0:	4619      	mov	r1, r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	4642      	mov	r2, r8
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096bc:	464b      	mov	r3, r9
 80096be:	460a      	mov	r2, r1
 80096c0:	eb42 0303 	adc.w	r3, r2, r3
 80096c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80096d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	f04f 0300 	mov.w	r3, #0
 80096dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096e0:	4649      	mov	r1, r9
 80096e2:	008b      	lsls	r3, r1, #2
 80096e4:	4641      	mov	r1, r8
 80096e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096ea:	4641      	mov	r1, r8
 80096ec:	008a      	lsls	r2, r1, #2
 80096ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096f2:	f7f7 fac9 	bl	8000c88 <__aeabi_uldivmod>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4b39      	ldr	r3, [pc, #228]	; (80097e0 <UART_SetConfig+0x4e4>)
 80096fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009700:	095b      	lsrs	r3, r3, #5
 8009702:	2164      	movs	r1, #100	; 0x64
 8009704:	fb01 f303 	mul.w	r3, r1, r3
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	3332      	adds	r3, #50	; 0x32
 800970e:	4a34      	ldr	r2, [pc, #208]	; (80097e0 <UART_SetConfig+0x4e4>)
 8009710:	fba2 2303 	umull	r2, r3, r2, r3
 8009714:	095b      	lsrs	r3, r3, #5
 8009716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800971a:	441c      	add	r4, r3
 800971c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009720:	2200      	movs	r2, #0
 8009722:	673b      	str	r3, [r7, #112]	; 0x70
 8009724:	677a      	str	r2, [r7, #116]	; 0x74
 8009726:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800972a:	4642      	mov	r2, r8
 800972c:	464b      	mov	r3, r9
 800972e:	1891      	adds	r1, r2, r2
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	415b      	adcs	r3, r3
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800973a:	4641      	mov	r1, r8
 800973c:	1851      	adds	r1, r2, r1
 800973e:	6039      	str	r1, [r7, #0]
 8009740:	4649      	mov	r1, r9
 8009742:	414b      	adcs	r3, r1
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	f04f 0300 	mov.w	r3, #0
 800974e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009752:	4659      	mov	r1, fp
 8009754:	00cb      	lsls	r3, r1, #3
 8009756:	4651      	mov	r1, sl
 8009758:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800975c:	4651      	mov	r1, sl
 800975e:	00ca      	lsls	r2, r1, #3
 8009760:	4610      	mov	r0, r2
 8009762:	4619      	mov	r1, r3
 8009764:	4603      	mov	r3, r0
 8009766:	4642      	mov	r2, r8
 8009768:	189b      	adds	r3, r3, r2
 800976a:	66bb      	str	r3, [r7, #104]	; 0x68
 800976c:	464b      	mov	r3, r9
 800976e:	460a      	mov	r2, r1
 8009770:	eb42 0303 	adc.w	r3, r2, r3
 8009774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	663b      	str	r3, [r7, #96]	; 0x60
 8009780:	667a      	str	r2, [r7, #100]	; 0x64
 8009782:	f04f 0200 	mov.w	r2, #0
 8009786:	f04f 0300 	mov.w	r3, #0
 800978a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800978e:	4649      	mov	r1, r9
 8009790:	008b      	lsls	r3, r1, #2
 8009792:	4641      	mov	r1, r8
 8009794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009798:	4641      	mov	r1, r8
 800979a:	008a      	lsls	r2, r1, #2
 800979c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80097a0:	f7f7 fa72 	bl	8000c88 <__aeabi_uldivmod>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <UART_SetConfig+0x4e4>)
 80097aa:	fba3 1302 	umull	r1, r3, r3, r2
 80097ae:	095b      	lsrs	r3, r3, #5
 80097b0:	2164      	movs	r1, #100	; 0x64
 80097b2:	fb01 f303 	mul.w	r3, r1, r3
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	3332      	adds	r3, #50	; 0x32
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <UART_SetConfig+0x4e4>)
 80097be:	fba2 2303 	umull	r2, r3, r2, r3
 80097c2:	095b      	lsrs	r3, r3, #5
 80097c4:	f003 020f 	and.w	r2, r3, #15
 80097c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4422      	add	r2, r4
 80097d0:	609a      	str	r2, [r3, #8]
}
 80097d2:	bf00      	nop
 80097d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097d8:	46bd      	mov	sp, r7
 80097da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097de:	bf00      	nop
 80097e0:	51eb851f 	.word	0x51eb851f

080097e4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4b20      	ldr	r3, [pc, #128]	; (8009884 <FSMC_NORSRAM_Init+0xa0>)
 8009802:	4013      	ands	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800980e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009814:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800981a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009820:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8009826:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800982c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009832:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009838:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800983e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009844:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800984a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009850:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4313      	orrs	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b08      	cmp	r3, #8
 800985e:	d103      	bne.n	8009868 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009866:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68f9      	ldr	r1, [r7, #12]
 8009870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	fff00080 	.word	0xfff00080

08009888 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80098aa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80098b6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80098be:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80098c6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80098d0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	3b02      	subs	r3, #2
 80098d8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80098da:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80098e0:	4313      	orrs	r3, r2
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6979      	ldr	r1, [r7, #20]
 80098f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
	...

08009904 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800991c:	d122      	bne.n	8009964 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009926:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800992c:	4013      	ands	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800993a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009942:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800994a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009950:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4313      	orrs	r3, r2
 8009956:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6979      	ldr	r1, [r7, #20]
 800995e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009962:	e005      	b.n	8009970 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800996c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	cff00000 	.word	0xcff00000

08009984 <atoi>:
 8009984:	220a      	movs	r2, #10
 8009986:	2100      	movs	r1, #0
 8009988:	f001 bdd2 	b.w	800b530 <strtol>

0800998c <__errno>:
 800998c:	4b01      	ldr	r3, [pc, #4]	; (8009994 <__errno+0x8>)
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000060 	.word	0x20000060

08009998 <__libc_init_array>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	4d0d      	ldr	r5, [pc, #52]	; (80099d0 <__libc_init_array+0x38>)
 800999c:	4c0d      	ldr	r4, [pc, #52]	; (80099d4 <__libc_init_array+0x3c>)
 800999e:	1b64      	subs	r4, r4, r5
 80099a0:	10a4      	asrs	r4, r4, #2
 80099a2:	2600      	movs	r6, #0
 80099a4:	42a6      	cmp	r6, r4
 80099a6:	d109      	bne.n	80099bc <__libc_init_array+0x24>
 80099a8:	4d0b      	ldr	r5, [pc, #44]	; (80099d8 <__libc_init_array+0x40>)
 80099aa:	4c0c      	ldr	r4, [pc, #48]	; (80099dc <__libc_init_array+0x44>)
 80099ac:	f005 fc7a 	bl	800f2a4 <_init>
 80099b0:	1b64      	subs	r4, r4, r5
 80099b2:	10a4      	asrs	r4, r4, #2
 80099b4:	2600      	movs	r6, #0
 80099b6:	42a6      	cmp	r6, r4
 80099b8:	d105      	bne.n	80099c6 <__libc_init_array+0x2e>
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c0:	4798      	blx	r3
 80099c2:	3601      	adds	r6, #1
 80099c4:	e7ee      	b.n	80099a4 <__libc_init_array+0xc>
 80099c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ca:	4798      	blx	r3
 80099cc:	3601      	adds	r6, #1
 80099ce:	e7f2      	b.n	80099b6 <__libc_init_array+0x1e>
 80099d0:	08021240 	.word	0x08021240
 80099d4:	08021240 	.word	0x08021240
 80099d8:	08021240 	.word	0x08021240
 80099dc:	08021244 	.word	0x08021244

080099e0 <memcmp>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	3901      	subs	r1, #1
 80099e4:	4402      	add	r2, r0
 80099e6:	4290      	cmp	r0, r2
 80099e8:	d101      	bne.n	80099ee <memcmp+0xe>
 80099ea:	2000      	movs	r0, #0
 80099ec:	e005      	b.n	80099fa <memcmp+0x1a>
 80099ee:	7803      	ldrb	r3, [r0, #0]
 80099f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	d001      	beq.n	80099fc <memcmp+0x1c>
 80099f8:	1b18      	subs	r0, r3, r4
 80099fa:	bd10      	pop	{r4, pc}
 80099fc:	3001      	adds	r0, #1
 80099fe:	e7f2      	b.n	80099e6 <memcmp+0x6>

08009a00 <memcpy>:
 8009a00:	440a      	add	r2, r1
 8009a02:	4291      	cmp	r1, r2
 8009a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a08:	d100      	bne.n	8009a0c <memcpy+0xc>
 8009a0a:	4770      	bx	lr
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a16:	4291      	cmp	r1, r2
 8009a18:	d1f9      	bne.n	8009a0e <memcpy+0xe>
 8009a1a:	bd10      	pop	{r4, pc}

08009a1c <memset>:
 8009a1c:	4402      	add	r2, r0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d100      	bne.n	8009a26 <memset+0xa>
 8009a24:	4770      	bx	lr
 8009a26:	f803 1b01 	strb.w	r1, [r3], #1
 8009a2a:	e7f9      	b.n	8009a20 <memset+0x4>

08009a2c <__cvt>:
 8009a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	ec55 4b10 	vmov	r4, r5, d0
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	460e      	mov	r6, r1
 8009a38:	4619      	mov	r1, r3
 8009a3a:	462b      	mov	r3, r5
 8009a3c:	bfbb      	ittet	lt
 8009a3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a42:	461d      	movlt	r5, r3
 8009a44:	2300      	movge	r3, #0
 8009a46:	232d      	movlt	r3, #45	; 0x2d
 8009a48:	700b      	strb	r3, [r1, #0]
 8009a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a50:	4691      	mov	r9, r2
 8009a52:	f023 0820 	bic.w	r8, r3, #32
 8009a56:	bfbc      	itt	lt
 8009a58:	4622      	movlt	r2, r4
 8009a5a:	4614      	movlt	r4, r2
 8009a5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a60:	d005      	beq.n	8009a6e <__cvt+0x42>
 8009a62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a66:	d100      	bne.n	8009a6a <__cvt+0x3e>
 8009a68:	3601      	adds	r6, #1
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	e000      	b.n	8009a70 <__cvt+0x44>
 8009a6e:	2103      	movs	r1, #3
 8009a70:	ab03      	add	r3, sp, #12
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	ab02      	add	r3, sp, #8
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	ec45 4b10 	vmov	d0, r4, r5
 8009a7c:	4653      	mov	r3, sl
 8009a7e:	4632      	mov	r2, r6
 8009a80:	f001 fdee 	bl	800b660 <_dtoa_r>
 8009a84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a88:	4607      	mov	r7, r0
 8009a8a:	d102      	bne.n	8009a92 <__cvt+0x66>
 8009a8c:	f019 0f01 	tst.w	r9, #1
 8009a90:	d022      	beq.n	8009ad8 <__cvt+0xac>
 8009a92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a96:	eb07 0906 	add.w	r9, r7, r6
 8009a9a:	d110      	bne.n	8009abe <__cvt+0x92>
 8009a9c:	783b      	ldrb	r3, [r7, #0]
 8009a9e:	2b30      	cmp	r3, #48	; 0x30
 8009aa0:	d10a      	bne.n	8009ab8 <__cvt+0x8c>
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7f7 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aae:	b918      	cbnz	r0, 8009ab8 <__cvt+0x8c>
 8009ab0:	f1c6 0601 	rsb	r6, r6, #1
 8009ab4:	f8ca 6000 	str.w	r6, [sl]
 8009ab8:	f8da 3000 	ldr.w	r3, [sl]
 8009abc:	4499      	add	r9, r3
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f7f6 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aca:	b108      	cbz	r0, 8009ad0 <__cvt+0xa4>
 8009acc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ad0:	2230      	movs	r2, #48	; 0x30
 8009ad2:	9b03      	ldr	r3, [sp, #12]
 8009ad4:	454b      	cmp	r3, r9
 8009ad6:	d307      	bcc.n	8009ae8 <__cvt+0xbc>
 8009ad8:	9b03      	ldr	r3, [sp, #12]
 8009ada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009adc:	1bdb      	subs	r3, r3, r7
 8009ade:	4638      	mov	r0, r7
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	b004      	add	sp, #16
 8009ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae8:	1c59      	adds	r1, r3, #1
 8009aea:	9103      	str	r1, [sp, #12]
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e7f0      	b.n	8009ad2 <__cvt+0xa6>

08009af0 <__exponent>:
 8009af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009af2:	4603      	mov	r3, r0
 8009af4:	2900      	cmp	r1, #0
 8009af6:	bfb8      	it	lt
 8009af8:	4249      	neglt	r1, r1
 8009afa:	f803 2b02 	strb.w	r2, [r3], #2
 8009afe:	bfb4      	ite	lt
 8009b00:	222d      	movlt	r2, #45	; 0x2d
 8009b02:	222b      	movge	r2, #43	; 0x2b
 8009b04:	2909      	cmp	r1, #9
 8009b06:	7042      	strb	r2, [r0, #1]
 8009b08:	dd2a      	ble.n	8009b60 <__exponent+0x70>
 8009b0a:	f10d 0407 	add.w	r4, sp, #7
 8009b0e:	46a4      	mov	ip, r4
 8009b10:	270a      	movs	r7, #10
 8009b12:	46a6      	mov	lr, r4
 8009b14:	460a      	mov	r2, r1
 8009b16:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b1a:	fb07 1516 	mls	r5, r7, r6, r1
 8009b1e:	3530      	adds	r5, #48	; 0x30
 8009b20:	2a63      	cmp	r2, #99	; 0x63
 8009b22:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	dcf1      	bgt.n	8009b12 <__exponent+0x22>
 8009b2e:	3130      	adds	r1, #48	; 0x30
 8009b30:	f1ae 0502 	sub.w	r5, lr, #2
 8009b34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b38:	1c44      	adds	r4, r0, #1
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4561      	cmp	r1, ip
 8009b3e:	d30a      	bcc.n	8009b56 <__exponent+0x66>
 8009b40:	f10d 0209 	add.w	r2, sp, #9
 8009b44:	eba2 020e 	sub.w	r2, r2, lr
 8009b48:	4565      	cmp	r5, ip
 8009b4a:	bf88      	it	hi
 8009b4c:	2200      	movhi	r2, #0
 8009b4e:	4413      	add	r3, r2
 8009b50:	1a18      	subs	r0, r3, r0
 8009b52:	b003      	add	sp, #12
 8009b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b5e:	e7ed      	b.n	8009b3c <__exponent+0x4c>
 8009b60:	2330      	movs	r3, #48	; 0x30
 8009b62:	3130      	adds	r1, #48	; 0x30
 8009b64:	7083      	strb	r3, [r0, #2]
 8009b66:	70c1      	strb	r1, [r0, #3]
 8009b68:	1d03      	adds	r3, r0, #4
 8009b6a:	e7f1      	b.n	8009b50 <__exponent+0x60>

08009b6c <_printf_float>:
 8009b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b70:	ed2d 8b02 	vpush	{d8}
 8009b74:	b08d      	sub	sp, #52	; 0x34
 8009b76:	460c      	mov	r4, r1
 8009b78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	461f      	mov	r7, r3
 8009b80:	4605      	mov	r5, r0
 8009b82:	f002 fecb 	bl	800c91c <_localeconv_r>
 8009b86:	f8d0 a000 	ldr.w	sl, [r0]
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	f7f6 fb20 	bl	80001d0 <strlen>
 8009b90:	2300      	movs	r3, #0
 8009b92:	930a      	str	r3, [sp, #40]	; 0x28
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	9305      	str	r3, [sp, #20]
 8009b98:	f8d8 3000 	ldr.w	r3, [r8]
 8009b9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	f023 0307 	bic.w	r3, r3, #7
 8009ba6:	f103 0208 	add.w	r2, r3, #8
 8009baa:	f8c8 2000 	str.w	r2, [r8]
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bbe:	9307      	str	r3, [sp, #28]
 8009bc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bc4:	ee08 0a10 	vmov	s16, r0
 8009bc8:	4b9f      	ldr	r3, [pc, #636]	; (8009e48 <_printf_float+0x2dc>)
 8009bca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bce:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd2:	f7f6 ffab 	bl	8000b2c <__aeabi_dcmpun>
 8009bd6:	bb88      	cbnz	r0, 8009c3c <_printf_float+0xd0>
 8009bd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bdc:	4b9a      	ldr	r3, [pc, #616]	; (8009e48 <_printf_float+0x2dc>)
 8009bde:	f04f 32ff 	mov.w	r2, #4294967295
 8009be2:	f7f6 ff85 	bl	8000af0 <__aeabi_dcmple>
 8009be6:	bb48      	cbnz	r0, 8009c3c <_printf_float+0xd0>
 8009be8:	2200      	movs	r2, #0
 8009bea:	2300      	movs	r3, #0
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f7f6 ff74 	bl	8000adc <__aeabi_dcmplt>
 8009bf4:	b110      	cbz	r0, 8009bfc <_printf_float+0x90>
 8009bf6:	232d      	movs	r3, #45	; 0x2d
 8009bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bfc:	4b93      	ldr	r3, [pc, #588]	; (8009e4c <_printf_float+0x2e0>)
 8009bfe:	4894      	ldr	r0, [pc, #592]	; (8009e50 <_printf_float+0x2e4>)
 8009c00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c04:	bf94      	ite	ls
 8009c06:	4698      	movls	r8, r3
 8009c08:	4680      	movhi	r8, r0
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	f023 0204 	bic.w	r2, r3, #4
 8009c14:	6022      	str	r2, [r4, #0]
 8009c16:	f04f 0900 	mov.w	r9, #0
 8009c1a:	9700      	str	r7, [sp, #0]
 8009c1c:	4633      	mov	r3, r6
 8009c1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c20:	4621      	mov	r1, r4
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 f9d8 	bl	8009fd8 <_printf_common>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	f040 8090 	bne.w	8009d4e <_printf_float+0x1e2>
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c32:	b00d      	add	sp, #52	; 0x34
 8009c34:	ecbd 8b02 	vpop	{d8}
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	464b      	mov	r3, r9
 8009c40:	4640      	mov	r0, r8
 8009c42:	4649      	mov	r1, r9
 8009c44:	f7f6 ff72 	bl	8000b2c <__aeabi_dcmpun>
 8009c48:	b140      	cbz	r0, 8009c5c <_printf_float+0xf0>
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bfbc      	itt	lt
 8009c50:	232d      	movlt	r3, #45	; 0x2d
 8009c52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c56:	487f      	ldr	r0, [pc, #508]	; (8009e54 <_printf_float+0x2e8>)
 8009c58:	4b7f      	ldr	r3, [pc, #508]	; (8009e58 <_printf_float+0x2ec>)
 8009c5a:	e7d1      	b.n	8009c00 <_printf_float+0x94>
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c62:	9206      	str	r2, [sp, #24]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	d13f      	bne.n	8009ce8 <_printf_float+0x17c>
 8009c68:	2306      	movs	r3, #6
 8009c6a:	6063      	str	r3, [r4, #4]
 8009c6c:	9b05      	ldr	r3, [sp, #20]
 8009c6e:	6861      	ldr	r1, [r4, #4]
 8009c70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c74:	2300      	movs	r3, #0
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	ab0a      	add	r3, sp, #40	; 0x28
 8009c7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c7e:	ab09      	add	r3, sp, #36	; 0x24
 8009c80:	ec49 8b10 	vmov	d0, r8, r9
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	6022      	str	r2, [r4, #0]
 8009c88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7ff fecd 	bl	8009a2c <__cvt>
 8009c92:	9b06      	ldr	r3, [sp, #24]
 8009c94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c96:	2b47      	cmp	r3, #71	; 0x47
 8009c98:	4680      	mov	r8, r0
 8009c9a:	d108      	bne.n	8009cae <_printf_float+0x142>
 8009c9c:	1cc8      	adds	r0, r1, #3
 8009c9e:	db02      	blt.n	8009ca6 <_printf_float+0x13a>
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	4299      	cmp	r1, r3
 8009ca4:	dd41      	ble.n	8009d2a <_printf_float+0x1be>
 8009ca6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009caa:	fa5f fb8b 	uxtb.w	fp, fp
 8009cae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cb2:	d820      	bhi.n	8009cf6 <_printf_float+0x18a>
 8009cb4:	3901      	subs	r1, #1
 8009cb6:	465a      	mov	r2, fp
 8009cb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cbc:	9109      	str	r1, [sp, #36]	; 0x24
 8009cbe:	f7ff ff17 	bl	8009af0 <__exponent>
 8009cc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc4:	1813      	adds	r3, r2, r0
 8009cc6:	2a01      	cmp	r2, #1
 8009cc8:	4681      	mov	r9, r0
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	dc02      	bgt.n	8009cd4 <_printf_float+0x168>
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	07d2      	lsls	r2, r2, #31
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_float+0x16c>
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d09c      	beq.n	8009c1a <_printf_float+0xae>
 8009ce0:	232d      	movs	r3, #45	; 0x2d
 8009ce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce6:	e798      	b.n	8009c1a <_printf_float+0xae>
 8009ce8:	9a06      	ldr	r2, [sp, #24]
 8009cea:	2a47      	cmp	r2, #71	; 0x47
 8009cec:	d1be      	bne.n	8009c6c <_printf_float+0x100>
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1bc      	bne.n	8009c6c <_printf_float+0x100>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e7b9      	b.n	8009c6a <_printf_float+0xfe>
 8009cf6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009cfa:	d118      	bne.n	8009d2e <_printf_float+0x1c2>
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	dd0b      	ble.n	8009d1a <_printf_float+0x1ae>
 8009d02:	6121      	str	r1, [r4, #16]
 8009d04:	b913      	cbnz	r3, 8009d0c <_printf_float+0x1a0>
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	07d0      	lsls	r0, r2, #31
 8009d0a:	d502      	bpl.n	8009d12 <_printf_float+0x1a6>
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	440b      	add	r3, r1
 8009d10:	6123      	str	r3, [r4, #16]
 8009d12:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d14:	f04f 0900 	mov.w	r9, #0
 8009d18:	e7de      	b.n	8009cd8 <_printf_float+0x16c>
 8009d1a:	b913      	cbnz	r3, 8009d22 <_printf_float+0x1b6>
 8009d1c:	6822      	ldr	r2, [r4, #0]
 8009d1e:	07d2      	lsls	r2, r2, #31
 8009d20:	d501      	bpl.n	8009d26 <_printf_float+0x1ba>
 8009d22:	3302      	adds	r3, #2
 8009d24:	e7f4      	b.n	8009d10 <_printf_float+0x1a4>
 8009d26:	2301      	movs	r3, #1
 8009d28:	e7f2      	b.n	8009d10 <_printf_float+0x1a4>
 8009d2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d30:	4299      	cmp	r1, r3
 8009d32:	db05      	blt.n	8009d40 <_printf_float+0x1d4>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	6121      	str	r1, [r4, #16]
 8009d38:	07d8      	lsls	r0, r3, #31
 8009d3a:	d5ea      	bpl.n	8009d12 <_printf_float+0x1a6>
 8009d3c:	1c4b      	adds	r3, r1, #1
 8009d3e:	e7e7      	b.n	8009d10 <_printf_float+0x1a4>
 8009d40:	2900      	cmp	r1, #0
 8009d42:	bfd4      	ite	le
 8009d44:	f1c1 0202 	rsble	r2, r1, #2
 8009d48:	2201      	movgt	r2, #1
 8009d4a:	4413      	add	r3, r2
 8009d4c:	e7e0      	b.n	8009d10 <_printf_float+0x1a4>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	055a      	lsls	r2, r3, #21
 8009d52:	d407      	bmi.n	8009d64 <_printf_float+0x1f8>
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	4642      	mov	r2, r8
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d12c      	bne.n	8009dbc <_printf_float+0x250>
 8009d62:	e764      	b.n	8009c2e <_printf_float+0xc2>
 8009d64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d68:	f240 80e0 	bls.w	8009f2c <_printf_float+0x3c0>
 8009d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	f7f6 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d034      	beq.n	8009de6 <_printf_float+0x27a>
 8009d7c:	4a37      	ldr	r2, [pc, #220]	; (8009e5c <_printf_float+0x2f0>)
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f af51 	beq.w	8009c2e <_printf_float+0xc2>
 8009d8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d90:	429a      	cmp	r2, r3
 8009d92:	db02      	blt.n	8009d9a <_printf_float+0x22e>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07d8      	lsls	r0, r3, #31
 8009d98:	d510      	bpl.n	8009dbc <_printf_float+0x250>
 8009d9a:	ee18 3a10 	vmov	r3, s16
 8009d9e:	4652      	mov	r2, sl
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f af41 	beq.w	8009c2e <_printf_float+0xc2>
 8009dac:	f04f 0800 	mov.w	r8, #0
 8009db0:	f104 091a 	add.w	r9, r4, #26
 8009db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db6:	3b01      	subs	r3, #1
 8009db8:	4543      	cmp	r3, r8
 8009dba:	dc09      	bgt.n	8009dd0 <_printf_float+0x264>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	079b      	lsls	r3, r3, #30
 8009dc0:	f100 8105 	bmi.w	8009fce <_printf_float+0x462>
 8009dc4:	68e0      	ldr	r0, [r4, #12]
 8009dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc8:	4298      	cmp	r0, r3
 8009dca:	bfb8      	it	lt
 8009dcc:	4618      	movlt	r0, r3
 8009dce:	e730      	b.n	8009c32 <_printf_float+0xc6>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	464a      	mov	r2, r9
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b8      	blx	r7
 8009dda:	3001      	adds	r0, #1
 8009ddc:	f43f af27 	beq.w	8009c2e <_printf_float+0xc2>
 8009de0:	f108 0801 	add.w	r8, r8, #1
 8009de4:	e7e6      	b.n	8009db4 <_printf_float+0x248>
 8009de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dc39      	bgt.n	8009e60 <_printf_float+0x2f4>
 8009dec:	4a1b      	ldr	r2, [pc, #108]	; (8009e5c <_printf_float+0x2f0>)
 8009dee:	2301      	movs	r3, #1
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	f43f af19 	beq.w	8009c2e <_printf_float+0xc2>
 8009dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e00:	4313      	orrs	r3, r2
 8009e02:	d102      	bne.n	8009e0a <_printf_float+0x29e>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	07d9      	lsls	r1, r3, #31
 8009e08:	d5d8      	bpl.n	8009dbc <_printf_float+0x250>
 8009e0a:	ee18 3a10 	vmov	r3, s16
 8009e0e:	4652      	mov	r2, sl
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	47b8      	blx	r7
 8009e16:	3001      	adds	r0, #1
 8009e18:	f43f af09 	beq.w	8009c2e <_printf_float+0xc2>
 8009e1c:	f04f 0900 	mov.w	r9, #0
 8009e20:	f104 0a1a 	add.w	sl, r4, #26
 8009e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e26:	425b      	negs	r3, r3
 8009e28:	454b      	cmp	r3, r9
 8009e2a:	dc01      	bgt.n	8009e30 <_printf_float+0x2c4>
 8009e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2e:	e792      	b.n	8009d56 <_printf_float+0x1ea>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4652      	mov	r2, sl
 8009e34:	4631      	mov	r1, r6
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b8      	blx	r7
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	f43f aef7 	beq.w	8009c2e <_printf_float+0xc2>
 8009e40:	f109 0901 	add.w	r9, r9, #1
 8009e44:	e7ee      	b.n	8009e24 <_printf_float+0x2b8>
 8009e46:	bf00      	nop
 8009e48:	7fefffff 	.word	0x7fefffff
 8009e4c:	08020d64 	.word	0x08020d64
 8009e50:	08020d68 	.word	0x08020d68
 8009e54:	08020d70 	.word	0x08020d70
 8009e58:	08020d6c 	.word	0x08020d6c
 8009e5c:	08020d74 	.word	0x08020d74
 8009e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e64:	429a      	cmp	r2, r3
 8009e66:	bfa8      	it	ge
 8009e68:	461a      	movge	r2, r3
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	4691      	mov	r9, r2
 8009e6e:	dc37      	bgt.n	8009ee0 <_printf_float+0x374>
 8009e70:	f04f 0b00 	mov.w	fp, #0
 8009e74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e78:	f104 021a 	add.w	r2, r4, #26
 8009e7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	eba3 0309 	sub.w	r3, r3, r9
 8009e84:	455b      	cmp	r3, fp
 8009e86:	dc33      	bgt.n	8009ef0 <_printf_float+0x384>
 8009e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	db3b      	blt.n	8009f08 <_printf_float+0x39c>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	07da      	lsls	r2, r3, #31
 8009e94:	d438      	bmi.n	8009f08 <_printf_float+0x39c>
 8009e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e98:	9a05      	ldr	r2, [sp, #20]
 8009e9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e9c:	1a9a      	subs	r2, r3, r2
 8009e9e:	eba3 0901 	sub.w	r9, r3, r1
 8009ea2:	4591      	cmp	r9, r2
 8009ea4:	bfa8      	it	ge
 8009ea6:	4691      	movge	r9, r2
 8009ea8:	f1b9 0f00 	cmp.w	r9, #0
 8009eac:	dc35      	bgt.n	8009f1a <_printf_float+0x3ae>
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eb6:	f104 0a1a 	add.w	sl, r4, #26
 8009eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	eba3 0309 	sub.w	r3, r3, r9
 8009ec4:	4543      	cmp	r3, r8
 8009ec6:	f77f af79 	ble.w	8009dbc <_printf_float+0x250>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	4652      	mov	r2, sl
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	f43f aeaa 	beq.w	8009c2e <_printf_float+0xc2>
 8009eda:	f108 0801 	add.w	r8, r8, #1
 8009ede:	e7ec      	b.n	8009eba <_printf_float+0x34e>
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	d1c0      	bne.n	8009e70 <_printf_float+0x304>
 8009eee:	e69e      	b.n	8009c2e <_printf_float+0xc2>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	9205      	str	r2, [sp, #20]
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f ae97 	beq.w	8009c2e <_printf_float+0xc2>
 8009f00:	9a05      	ldr	r2, [sp, #20]
 8009f02:	f10b 0b01 	add.w	fp, fp, #1
 8009f06:	e7b9      	b.n	8009e7c <_printf_float+0x310>
 8009f08:	ee18 3a10 	vmov	r3, s16
 8009f0c:	4652      	mov	r2, sl
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	d1be      	bne.n	8009e96 <_printf_float+0x32a>
 8009f18:	e689      	b.n	8009c2e <_printf_float+0xc2>
 8009f1a:	9a05      	ldr	r2, [sp, #20]
 8009f1c:	464b      	mov	r3, r9
 8009f1e:	4442      	add	r2, r8
 8009f20:	4631      	mov	r1, r6
 8009f22:	4628      	mov	r0, r5
 8009f24:	47b8      	blx	r7
 8009f26:	3001      	adds	r0, #1
 8009f28:	d1c1      	bne.n	8009eae <_printf_float+0x342>
 8009f2a:	e680      	b.n	8009c2e <_printf_float+0xc2>
 8009f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f2e:	2a01      	cmp	r2, #1
 8009f30:	dc01      	bgt.n	8009f36 <_printf_float+0x3ca>
 8009f32:	07db      	lsls	r3, r3, #31
 8009f34:	d538      	bpl.n	8009fa8 <_printf_float+0x43c>
 8009f36:	2301      	movs	r3, #1
 8009f38:	4642      	mov	r2, r8
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b8      	blx	r7
 8009f40:	3001      	adds	r0, #1
 8009f42:	f43f ae74 	beq.w	8009c2e <_printf_float+0xc2>
 8009f46:	ee18 3a10 	vmov	r3, s16
 8009f4a:	4652      	mov	r2, sl
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	47b8      	blx	r7
 8009f52:	3001      	adds	r0, #1
 8009f54:	f43f ae6b 	beq.w	8009c2e <_printf_float+0xc2>
 8009f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f7f6 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f64:	b9d8      	cbnz	r0, 8009f9e <_printf_float+0x432>
 8009f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f68:	f108 0201 	add.w	r2, r8, #1
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	4631      	mov	r1, r6
 8009f70:	4628      	mov	r0, r5
 8009f72:	47b8      	blx	r7
 8009f74:	3001      	adds	r0, #1
 8009f76:	d10e      	bne.n	8009f96 <_printf_float+0x42a>
 8009f78:	e659      	b.n	8009c2e <_printf_float+0xc2>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4652      	mov	r2, sl
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	f43f ae52 	beq.w	8009c2e <_printf_float+0xc2>
 8009f8a:	f108 0801 	add.w	r8, r8, #1
 8009f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f90:	3b01      	subs	r3, #1
 8009f92:	4543      	cmp	r3, r8
 8009f94:	dcf1      	bgt.n	8009f7a <_printf_float+0x40e>
 8009f96:	464b      	mov	r3, r9
 8009f98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f9c:	e6dc      	b.n	8009d58 <_printf_float+0x1ec>
 8009f9e:	f04f 0800 	mov.w	r8, #0
 8009fa2:	f104 0a1a 	add.w	sl, r4, #26
 8009fa6:	e7f2      	b.n	8009f8e <_printf_float+0x422>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4642      	mov	r2, r8
 8009fac:	e7df      	b.n	8009f6e <_printf_float+0x402>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	464a      	mov	r2, r9
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	47b8      	blx	r7
 8009fb8:	3001      	adds	r0, #1
 8009fba:	f43f ae38 	beq.w	8009c2e <_printf_float+0xc2>
 8009fbe:	f108 0801 	add.w	r8, r8, #1
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fc6:	1a5b      	subs	r3, r3, r1
 8009fc8:	4543      	cmp	r3, r8
 8009fca:	dcf0      	bgt.n	8009fae <_printf_float+0x442>
 8009fcc:	e6fa      	b.n	8009dc4 <_printf_float+0x258>
 8009fce:	f04f 0800 	mov.w	r8, #0
 8009fd2:	f104 0919 	add.w	r9, r4, #25
 8009fd6:	e7f4      	b.n	8009fc2 <_printf_float+0x456>

08009fd8 <_printf_common>:
 8009fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fdc:	4616      	mov	r6, r2
 8009fde:	4699      	mov	r9, r3
 8009fe0:	688a      	ldr	r2, [r1, #8]
 8009fe2:	690b      	ldr	r3, [r1, #16]
 8009fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	bfb8      	it	lt
 8009fec:	4613      	movlt	r3, r2
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	b10a      	cbz	r2, 8009ffe <_printf_common+0x26>
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	6033      	str	r3, [r6, #0]
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	0699      	lsls	r1, r3, #26
 800a002:	bf42      	ittt	mi
 800a004:	6833      	ldrmi	r3, [r6, #0]
 800a006:	3302      	addmi	r3, #2
 800a008:	6033      	strmi	r3, [r6, #0]
 800a00a:	6825      	ldr	r5, [r4, #0]
 800a00c:	f015 0506 	ands.w	r5, r5, #6
 800a010:	d106      	bne.n	800a020 <_printf_common+0x48>
 800a012:	f104 0a19 	add.w	sl, r4, #25
 800a016:	68e3      	ldr	r3, [r4, #12]
 800a018:	6832      	ldr	r2, [r6, #0]
 800a01a:	1a9b      	subs	r3, r3, r2
 800a01c:	42ab      	cmp	r3, r5
 800a01e:	dc26      	bgt.n	800a06e <_printf_common+0x96>
 800a020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a024:	1e13      	subs	r3, r2, #0
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	bf18      	it	ne
 800a02a:	2301      	movne	r3, #1
 800a02c:	0692      	lsls	r2, r2, #26
 800a02e:	d42b      	bmi.n	800a088 <_printf_common+0xb0>
 800a030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a034:	4649      	mov	r1, r9
 800a036:	4638      	mov	r0, r7
 800a038:	47c0      	blx	r8
 800a03a:	3001      	adds	r0, #1
 800a03c:	d01e      	beq.n	800a07c <_printf_common+0xa4>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	68e5      	ldr	r5, [r4, #12]
 800a042:	6832      	ldr	r2, [r6, #0]
 800a044:	f003 0306 	and.w	r3, r3, #6
 800a048:	2b04      	cmp	r3, #4
 800a04a:	bf08      	it	eq
 800a04c:	1aad      	subeq	r5, r5, r2
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	6922      	ldr	r2, [r4, #16]
 800a052:	bf0c      	ite	eq
 800a054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a058:	2500      	movne	r5, #0
 800a05a:	4293      	cmp	r3, r2
 800a05c:	bfc4      	itt	gt
 800a05e:	1a9b      	subgt	r3, r3, r2
 800a060:	18ed      	addgt	r5, r5, r3
 800a062:	2600      	movs	r6, #0
 800a064:	341a      	adds	r4, #26
 800a066:	42b5      	cmp	r5, r6
 800a068:	d11a      	bne.n	800a0a0 <_printf_common+0xc8>
 800a06a:	2000      	movs	r0, #0
 800a06c:	e008      	b.n	800a080 <_printf_common+0xa8>
 800a06e:	2301      	movs	r3, #1
 800a070:	4652      	mov	r2, sl
 800a072:	4649      	mov	r1, r9
 800a074:	4638      	mov	r0, r7
 800a076:	47c0      	blx	r8
 800a078:	3001      	adds	r0, #1
 800a07a:	d103      	bne.n	800a084 <_printf_common+0xac>
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295
 800a080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a084:	3501      	adds	r5, #1
 800a086:	e7c6      	b.n	800a016 <_printf_common+0x3e>
 800a088:	18e1      	adds	r1, r4, r3
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	2030      	movs	r0, #48	; 0x30
 800a08e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a092:	4422      	add	r2, r4
 800a094:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a09c:	3302      	adds	r3, #2
 800a09e:	e7c7      	b.n	800a030 <_printf_common+0x58>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	47c0      	blx	r8
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	d0e6      	beq.n	800a07c <_printf_common+0xa4>
 800a0ae:	3601      	adds	r6, #1
 800a0b0:	e7d9      	b.n	800a066 <_printf_common+0x8e>
	...

0800a0b4 <_printf_i>:
 800a0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	7e0f      	ldrb	r7, [r1, #24]
 800a0ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0bc:	2f78      	cmp	r7, #120	; 0x78
 800a0be:	4691      	mov	r9, r2
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	469a      	mov	sl, r3
 800a0c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ca:	d807      	bhi.n	800a0dc <_printf_i+0x28>
 800a0cc:	2f62      	cmp	r7, #98	; 0x62
 800a0ce:	d80a      	bhi.n	800a0e6 <_printf_i+0x32>
 800a0d0:	2f00      	cmp	r7, #0
 800a0d2:	f000 80d8 	beq.w	800a286 <_printf_i+0x1d2>
 800a0d6:	2f58      	cmp	r7, #88	; 0x58
 800a0d8:	f000 80a3 	beq.w	800a222 <_printf_i+0x16e>
 800a0dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0e4:	e03a      	b.n	800a15c <_printf_i+0xa8>
 800a0e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ea:	2b15      	cmp	r3, #21
 800a0ec:	d8f6      	bhi.n	800a0dc <_printf_i+0x28>
 800a0ee:	a101      	add	r1, pc, #4	; (adr r1, 800a0f4 <_printf_i+0x40>)
 800a0f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0f4:	0800a14d 	.word	0x0800a14d
 800a0f8:	0800a161 	.word	0x0800a161
 800a0fc:	0800a0dd 	.word	0x0800a0dd
 800a100:	0800a0dd 	.word	0x0800a0dd
 800a104:	0800a0dd 	.word	0x0800a0dd
 800a108:	0800a0dd 	.word	0x0800a0dd
 800a10c:	0800a161 	.word	0x0800a161
 800a110:	0800a0dd 	.word	0x0800a0dd
 800a114:	0800a0dd 	.word	0x0800a0dd
 800a118:	0800a0dd 	.word	0x0800a0dd
 800a11c:	0800a0dd 	.word	0x0800a0dd
 800a120:	0800a26d 	.word	0x0800a26d
 800a124:	0800a191 	.word	0x0800a191
 800a128:	0800a24f 	.word	0x0800a24f
 800a12c:	0800a0dd 	.word	0x0800a0dd
 800a130:	0800a0dd 	.word	0x0800a0dd
 800a134:	0800a28f 	.word	0x0800a28f
 800a138:	0800a0dd 	.word	0x0800a0dd
 800a13c:	0800a191 	.word	0x0800a191
 800a140:	0800a0dd 	.word	0x0800a0dd
 800a144:	0800a0dd 	.word	0x0800a0dd
 800a148:	0800a257 	.word	0x0800a257
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	1d1a      	adds	r2, r3, #4
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	602a      	str	r2, [r5, #0]
 800a154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a15c:	2301      	movs	r3, #1
 800a15e:	e0a3      	b.n	800a2a8 <_printf_i+0x1f4>
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	6829      	ldr	r1, [r5, #0]
 800a164:	0606      	lsls	r6, r0, #24
 800a166:	f101 0304 	add.w	r3, r1, #4
 800a16a:	d50a      	bpl.n	800a182 <_printf_i+0xce>
 800a16c:	680e      	ldr	r6, [r1, #0]
 800a16e:	602b      	str	r3, [r5, #0]
 800a170:	2e00      	cmp	r6, #0
 800a172:	da03      	bge.n	800a17c <_printf_i+0xc8>
 800a174:	232d      	movs	r3, #45	; 0x2d
 800a176:	4276      	negs	r6, r6
 800a178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17c:	485e      	ldr	r0, [pc, #376]	; (800a2f8 <_printf_i+0x244>)
 800a17e:	230a      	movs	r3, #10
 800a180:	e019      	b.n	800a1b6 <_printf_i+0x102>
 800a182:	680e      	ldr	r6, [r1, #0]
 800a184:	602b      	str	r3, [r5, #0]
 800a186:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a18a:	bf18      	it	ne
 800a18c:	b236      	sxthne	r6, r6
 800a18e:	e7ef      	b.n	800a170 <_printf_i+0xbc>
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	6820      	ldr	r0, [r4, #0]
 800a194:	1d19      	adds	r1, r3, #4
 800a196:	6029      	str	r1, [r5, #0]
 800a198:	0601      	lsls	r1, r0, #24
 800a19a:	d501      	bpl.n	800a1a0 <_printf_i+0xec>
 800a19c:	681e      	ldr	r6, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <_printf_i+0xf2>
 800a1a0:	0646      	lsls	r6, r0, #25
 800a1a2:	d5fb      	bpl.n	800a19c <_printf_i+0xe8>
 800a1a4:	881e      	ldrh	r6, [r3, #0]
 800a1a6:	4854      	ldr	r0, [pc, #336]	; (800a2f8 <_printf_i+0x244>)
 800a1a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a1aa:	bf0c      	ite	eq
 800a1ac:	2308      	moveq	r3, #8
 800a1ae:	230a      	movne	r3, #10
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1b6:	6865      	ldr	r5, [r4, #4]
 800a1b8:	60a5      	str	r5, [r4, #8]
 800a1ba:	2d00      	cmp	r5, #0
 800a1bc:	bfa2      	ittt	ge
 800a1be:	6821      	ldrge	r1, [r4, #0]
 800a1c0:	f021 0104 	bicge.w	r1, r1, #4
 800a1c4:	6021      	strge	r1, [r4, #0]
 800a1c6:	b90e      	cbnz	r6, 800a1cc <_printf_i+0x118>
 800a1c8:	2d00      	cmp	r5, #0
 800a1ca:	d04d      	beq.n	800a268 <_printf_i+0x1b4>
 800a1cc:	4615      	mov	r5, r2
 800a1ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1d2:	fb03 6711 	mls	r7, r3, r1, r6
 800a1d6:	5dc7      	ldrb	r7, [r0, r7]
 800a1d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1dc:	4637      	mov	r7, r6
 800a1de:	42bb      	cmp	r3, r7
 800a1e0:	460e      	mov	r6, r1
 800a1e2:	d9f4      	bls.n	800a1ce <_printf_i+0x11a>
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d10b      	bne.n	800a200 <_printf_i+0x14c>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	07de      	lsls	r6, r3, #31
 800a1ec:	d508      	bpl.n	800a200 <_printf_i+0x14c>
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	6861      	ldr	r1, [r4, #4]
 800a1f2:	4299      	cmp	r1, r3
 800a1f4:	bfde      	ittt	le
 800a1f6:	2330      	movle	r3, #48	; 0x30
 800a1f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a200:	1b52      	subs	r2, r2, r5
 800a202:	6122      	str	r2, [r4, #16]
 800a204:	f8cd a000 	str.w	sl, [sp]
 800a208:	464b      	mov	r3, r9
 800a20a:	aa03      	add	r2, sp, #12
 800a20c:	4621      	mov	r1, r4
 800a20e:	4640      	mov	r0, r8
 800a210:	f7ff fee2 	bl	8009fd8 <_printf_common>
 800a214:	3001      	adds	r0, #1
 800a216:	d14c      	bne.n	800a2b2 <_printf_i+0x1fe>
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	b004      	add	sp, #16
 800a21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a222:	4835      	ldr	r0, [pc, #212]	; (800a2f8 <_printf_i+0x244>)
 800a224:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a228:	6829      	ldr	r1, [r5, #0]
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a230:	6029      	str	r1, [r5, #0]
 800a232:	061d      	lsls	r5, r3, #24
 800a234:	d514      	bpl.n	800a260 <_printf_i+0x1ac>
 800a236:	07df      	lsls	r7, r3, #31
 800a238:	bf44      	itt	mi
 800a23a:	f043 0320 	orrmi.w	r3, r3, #32
 800a23e:	6023      	strmi	r3, [r4, #0]
 800a240:	b91e      	cbnz	r6, 800a24a <_printf_i+0x196>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	f023 0320 	bic.w	r3, r3, #32
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	2310      	movs	r3, #16
 800a24c:	e7b0      	b.n	800a1b0 <_printf_i+0xfc>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	f043 0320 	orr.w	r3, r3, #32
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	2378      	movs	r3, #120	; 0x78
 800a258:	4828      	ldr	r0, [pc, #160]	; (800a2fc <_printf_i+0x248>)
 800a25a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a25e:	e7e3      	b.n	800a228 <_printf_i+0x174>
 800a260:	0659      	lsls	r1, r3, #25
 800a262:	bf48      	it	mi
 800a264:	b2b6      	uxthmi	r6, r6
 800a266:	e7e6      	b.n	800a236 <_printf_i+0x182>
 800a268:	4615      	mov	r5, r2
 800a26a:	e7bb      	b.n	800a1e4 <_printf_i+0x130>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	6826      	ldr	r6, [r4, #0]
 800a270:	6961      	ldr	r1, [r4, #20]
 800a272:	1d18      	adds	r0, r3, #4
 800a274:	6028      	str	r0, [r5, #0]
 800a276:	0635      	lsls	r5, r6, #24
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	d501      	bpl.n	800a280 <_printf_i+0x1cc>
 800a27c:	6019      	str	r1, [r3, #0]
 800a27e:	e002      	b.n	800a286 <_printf_i+0x1d2>
 800a280:	0670      	lsls	r0, r6, #25
 800a282:	d5fb      	bpl.n	800a27c <_printf_i+0x1c8>
 800a284:	8019      	strh	r1, [r3, #0]
 800a286:	2300      	movs	r3, #0
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	4615      	mov	r5, r2
 800a28c:	e7ba      	b.n	800a204 <_printf_i+0x150>
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	1d1a      	adds	r2, r3, #4
 800a292:	602a      	str	r2, [r5, #0]
 800a294:	681d      	ldr	r5, [r3, #0]
 800a296:	6862      	ldr	r2, [r4, #4]
 800a298:	2100      	movs	r1, #0
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7f5 ffa0 	bl	80001e0 <memchr>
 800a2a0:	b108      	cbz	r0, 800a2a6 <_printf_i+0x1f2>
 800a2a2:	1b40      	subs	r0, r0, r5
 800a2a4:	6060      	str	r0, [r4, #4]
 800a2a6:	6863      	ldr	r3, [r4, #4]
 800a2a8:	6123      	str	r3, [r4, #16]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b0:	e7a8      	b.n	800a204 <_printf_i+0x150>
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	462a      	mov	r2, r5
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	47d0      	blx	sl
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d0ab      	beq.n	800a218 <_printf_i+0x164>
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	079b      	lsls	r3, r3, #30
 800a2c4:	d413      	bmi.n	800a2ee <_printf_i+0x23a>
 800a2c6:	68e0      	ldr	r0, [r4, #12]
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	4298      	cmp	r0, r3
 800a2cc:	bfb8      	it	lt
 800a2ce:	4618      	movlt	r0, r3
 800a2d0:	e7a4      	b.n	800a21c <_printf_i+0x168>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4640      	mov	r0, r8
 800a2da:	47d0      	blx	sl
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d09b      	beq.n	800a218 <_printf_i+0x164>
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	68e3      	ldr	r3, [r4, #12]
 800a2e4:	9903      	ldr	r1, [sp, #12]
 800a2e6:	1a5b      	subs	r3, r3, r1
 800a2e8:	42ab      	cmp	r3, r5
 800a2ea:	dcf2      	bgt.n	800a2d2 <_printf_i+0x21e>
 800a2ec:	e7eb      	b.n	800a2c6 <_printf_i+0x212>
 800a2ee:	2500      	movs	r5, #0
 800a2f0:	f104 0619 	add.w	r6, r4, #25
 800a2f4:	e7f5      	b.n	800a2e2 <_printf_i+0x22e>
 800a2f6:	bf00      	nop
 800a2f8:	08020d76 	.word	0x08020d76
 800a2fc:	08020d87 	.word	0x08020d87

0800a300 <_scanf_float>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	b087      	sub	sp, #28
 800a306:	4617      	mov	r7, r2
 800a308:	9303      	str	r3, [sp, #12]
 800a30a:	688b      	ldr	r3, [r1, #8]
 800a30c:	1e5a      	subs	r2, r3, #1
 800a30e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a312:	bf83      	ittte	hi
 800a314:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a318:	195b      	addhi	r3, r3, r5
 800a31a:	9302      	strhi	r3, [sp, #8]
 800a31c:	2300      	movls	r3, #0
 800a31e:	bf86      	itte	hi
 800a320:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a324:	608b      	strhi	r3, [r1, #8]
 800a326:	9302      	strls	r3, [sp, #8]
 800a328:	680b      	ldr	r3, [r1, #0]
 800a32a:	468b      	mov	fp, r1
 800a32c:	2500      	movs	r5, #0
 800a32e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a332:	f84b 3b1c 	str.w	r3, [fp], #28
 800a336:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a33a:	4680      	mov	r8, r0
 800a33c:	460c      	mov	r4, r1
 800a33e:	465e      	mov	r6, fp
 800a340:	46aa      	mov	sl, r5
 800a342:	46a9      	mov	r9, r5
 800a344:	9501      	str	r5, [sp, #4]
 800a346:	68a2      	ldr	r2, [r4, #8]
 800a348:	b152      	cbz	r2, 800a360 <_scanf_float+0x60>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	2b4e      	cmp	r3, #78	; 0x4e
 800a350:	d864      	bhi.n	800a41c <_scanf_float+0x11c>
 800a352:	2b40      	cmp	r3, #64	; 0x40
 800a354:	d83c      	bhi.n	800a3d0 <_scanf_float+0xd0>
 800a356:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a35a:	b2c8      	uxtb	r0, r1
 800a35c:	280e      	cmp	r0, #14
 800a35e:	d93a      	bls.n	800a3d6 <_scanf_float+0xd6>
 800a360:	f1b9 0f00 	cmp.w	r9, #0
 800a364:	d003      	beq.n	800a36e <_scanf_float+0x6e>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a372:	f1ba 0f01 	cmp.w	sl, #1
 800a376:	f200 8113 	bhi.w	800a5a0 <_scanf_float+0x2a0>
 800a37a:	455e      	cmp	r6, fp
 800a37c:	f200 8105 	bhi.w	800a58a <_scanf_float+0x28a>
 800a380:	2501      	movs	r5, #1
 800a382:	4628      	mov	r0, r5
 800a384:	b007      	add	sp, #28
 800a386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a38e:	2a0d      	cmp	r2, #13
 800a390:	d8e6      	bhi.n	800a360 <_scanf_float+0x60>
 800a392:	a101      	add	r1, pc, #4	; (adr r1, 800a398 <_scanf_float+0x98>)
 800a394:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a398:	0800a4d7 	.word	0x0800a4d7
 800a39c:	0800a361 	.word	0x0800a361
 800a3a0:	0800a361 	.word	0x0800a361
 800a3a4:	0800a361 	.word	0x0800a361
 800a3a8:	0800a537 	.word	0x0800a537
 800a3ac:	0800a50f 	.word	0x0800a50f
 800a3b0:	0800a361 	.word	0x0800a361
 800a3b4:	0800a361 	.word	0x0800a361
 800a3b8:	0800a4e5 	.word	0x0800a4e5
 800a3bc:	0800a361 	.word	0x0800a361
 800a3c0:	0800a361 	.word	0x0800a361
 800a3c4:	0800a361 	.word	0x0800a361
 800a3c8:	0800a361 	.word	0x0800a361
 800a3cc:	0800a49d 	.word	0x0800a49d
 800a3d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a3d4:	e7db      	b.n	800a38e <_scanf_float+0x8e>
 800a3d6:	290e      	cmp	r1, #14
 800a3d8:	d8c2      	bhi.n	800a360 <_scanf_float+0x60>
 800a3da:	a001      	add	r0, pc, #4	; (adr r0, 800a3e0 <_scanf_float+0xe0>)
 800a3dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a3e0:	0800a48f 	.word	0x0800a48f
 800a3e4:	0800a361 	.word	0x0800a361
 800a3e8:	0800a48f 	.word	0x0800a48f
 800a3ec:	0800a523 	.word	0x0800a523
 800a3f0:	0800a361 	.word	0x0800a361
 800a3f4:	0800a43d 	.word	0x0800a43d
 800a3f8:	0800a479 	.word	0x0800a479
 800a3fc:	0800a479 	.word	0x0800a479
 800a400:	0800a479 	.word	0x0800a479
 800a404:	0800a479 	.word	0x0800a479
 800a408:	0800a479 	.word	0x0800a479
 800a40c:	0800a479 	.word	0x0800a479
 800a410:	0800a479 	.word	0x0800a479
 800a414:	0800a479 	.word	0x0800a479
 800a418:	0800a479 	.word	0x0800a479
 800a41c:	2b6e      	cmp	r3, #110	; 0x6e
 800a41e:	d809      	bhi.n	800a434 <_scanf_float+0x134>
 800a420:	2b60      	cmp	r3, #96	; 0x60
 800a422:	d8b2      	bhi.n	800a38a <_scanf_float+0x8a>
 800a424:	2b54      	cmp	r3, #84	; 0x54
 800a426:	d077      	beq.n	800a518 <_scanf_float+0x218>
 800a428:	2b59      	cmp	r3, #89	; 0x59
 800a42a:	d199      	bne.n	800a360 <_scanf_float+0x60>
 800a42c:	2d07      	cmp	r5, #7
 800a42e:	d197      	bne.n	800a360 <_scanf_float+0x60>
 800a430:	2508      	movs	r5, #8
 800a432:	e029      	b.n	800a488 <_scanf_float+0x188>
 800a434:	2b74      	cmp	r3, #116	; 0x74
 800a436:	d06f      	beq.n	800a518 <_scanf_float+0x218>
 800a438:	2b79      	cmp	r3, #121	; 0x79
 800a43a:	e7f6      	b.n	800a42a <_scanf_float+0x12a>
 800a43c:	6821      	ldr	r1, [r4, #0]
 800a43e:	05c8      	lsls	r0, r1, #23
 800a440:	d51a      	bpl.n	800a478 <_scanf_float+0x178>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a448:	6021      	str	r1, [r4, #0]
 800a44a:	f109 0901 	add.w	r9, r9, #1
 800a44e:	b11b      	cbz	r3, 800a458 <_scanf_float+0x158>
 800a450:	3b01      	subs	r3, #1
 800a452:	3201      	adds	r2, #1
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	60a2      	str	r2, [r4, #8]
 800a458:	68a3      	ldr	r3, [r4, #8]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	3301      	adds	r3, #1
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3b01      	subs	r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	f340 8084 	ble.w	800a578 <_scanf_float+0x278>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	603b      	str	r3, [r7, #0]
 800a476:	e766      	b.n	800a346 <_scanf_float+0x46>
 800a478:	eb1a 0f05 	cmn.w	sl, r5
 800a47c:	f47f af70 	bne.w	800a360 <_scanf_float+0x60>
 800a480:	6822      	ldr	r2, [r4, #0]
 800a482:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a486:	6022      	str	r2, [r4, #0]
 800a488:	f806 3b01 	strb.w	r3, [r6], #1
 800a48c:	e7e4      	b.n	800a458 <_scanf_float+0x158>
 800a48e:	6822      	ldr	r2, [r4, #0]
 800a490:	0610      	lsls	r0, r2, #24
 800a492:	f57f af65 	bpl.w	800a360 <_scanf_float+0x60>
 800a496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a49a:	e7f4      	b.n	800a486 <_scanf_float+0x186>
 800a49c:	f1ba 0f00 	cmp.w	sl, #0
 800a4a0:	d10e      	bne.n	800a4c0 <_scanf_float+0x1c0>
 800a4a2:	f1b9 0f00 	cmp.w	r9, #0
 800a4a6:	d10e      	bne.n	800a4c6 <_scanf_float+0x1c6>
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a4ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a4b2:	d108      	bne.n	800a4c6 <_scanf_float+0x1c6>
 800a4b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4b8:	6022      	str	r2, [r4, #0]
 800a4ba:	f04f 0a01 	mov.w	sl, #1
 800a4be:	e7e3      	b.n	800a488 <_scanf_float+0x188>
 800a4c0:	f1ba 0f02 	cmp.w	sl, #2
 800a4c4:	d055      	beq.n	800a572 <_scanf_float+0x272>
 800a4c6:	2d01      	cmp	r5, #1
 800a4c8:	d002      	beq.n	800a4d0 <_scanf_float+0x1d0>
 800a4ca:	2d04      	cmp	r5, #4
 800a4cc:	f47f af48 	bne.w	800a360 <_scanf_float+0x60>
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	b2ed      	uxtb	r5, r5
 800a4d4:	e7d8      	b.n	800a488 <_scanf_float+0x188>
 800a4d6:	f1ba 0f01 	cmp.w	sl, #1
 800a4da:	f47f af41 	bne.w	800a360 <_scanf_float+0x60>
 800a4de:	f04f 0a02 	mov.w	sl, #2
 800a4e2:	e7d1      	b.n	800a488 <_scanf_float+0x188>
 800a4e4:	b97d      	cbnz	r5, 800a506 <_scanf_float+0x206>
 800a4e6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ea:	f47f af3c 	bne.w	800a366 <_scanf_float+0x66>
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a4f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a4f8:	f47f af39 	bne.w	800a36e <_scanf_float+0x6e>
 800a4fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	2501      	movs	r5, #1
 800a504:	e7c0      	b.n	800a488 <_scanf_float+0x188>
 800a506:	2d03      	cmp	r5, #3
 800a508:	d0e2      	beq.n	800a4d0 <_scanf_float+0x1d0>
 800a50a:	2d05      	cmp	r5, #5
 800a50c:	e7de      	b.n	800a4cc <_scanf_float+0x1cc>
 800a50e:	2d02      	cmp	r5, #2
 800a510:	f47f af26 	bne.w	800a360 <_scanf_float+0x60>
 800a514:	2503      	movs	r5, #3
 800a516:	e7b7      	b.n	800a488 <_scanf_float+0x188>
 800a518:	2d06      	cmp	r5, #6
 800a51a:	f47f af21 	bne.w	800a360 <_scanf_float+0x60>
 800a51e:	2507      	movs	r5, #7
 800a520:	e7b2      	b.n	800a488 <_scanf_float+0x188>
 800a522:	6822      	ldr	r2, [r4, #0]
 800a524:	0591      	lsls	r1, r2, #22
 800a526:	f57f af1b 	bpl.w	800a360 <_scanf_float+0x60>
 800a52a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a52e:	6022      	str	r2, [r4, #0]
 800a530:	f8cd 9004 	str.w	r9, [sp, #4]
 800a534:	e7a8      	b.n	800a488 <_scanf_float+0x188>
 800a536:	6822      	ldr	r2, [r4, #0]
 800a538:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a53c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a540:	d006      	beq.n	800a550 <_scanf_float+0x250>
 800a542:	0550      	lsls	r0, r2, #21
 800a544:	f57f af0c 	bpl.w	800a360 <_scanf_float+0x60>
 800a548:	f1b9 0f00 	cmp.w	r9, #0
 800a54c:	f43f af0f 	beq.w	800a36e <_scanf_float+0x6e>
 800a550:	0591      	lsls	r1, r2, #22
 800a552:	bf58      	it	pl
 800a554:	9901      	ldrpl	r1, [sp, #4]
 800a556:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a55a:	bf58      	it	pl
 800a55c:	eba9 0101 	subpl.w	r1, r9, r1
 800a560:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a564:	bf58      	it	pl
 800a566:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a56a:	6022      	str	r2, [r4, #0]
 800a56c:	f04f 0900 	mov.w	r9, #0
 800a570:	e78a      	b.n	800a488 <_scanf_float+0x188>
 800a572:	f04f 0a03 	mov.w	sl, #3
 800a576:	e787      	b.n	800a488 <_scanf_float+0x188>
 800a578:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a57c:	4639      	mov	r1, r7
 800a57e:	4640      	mov	r0, r8
 800a580:	4798      	blx	r3
 800a582:	2800      	cmp	r0, #0
 800a584:	f43f aedf 	beq.w	800a346 <_scanf_float+0x46>
 800a588:	e6ea      	b.n	800a360 <_scanf_float+0x60>
 800a58a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a58e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a592:	463a      	mov	r2, r7
 800a594:	4640      	mov	r0, r8
 800a596:	4798      	blx	r3
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	6123      	str	r3, [r4, #16]
 800a59e:	e6ec      	b.n	800a37a <_scanf_float+0x7a>
 800a5a0:	1e6b      	subs	r3, r5, #1
 800a5a2:	2b06      	cmp	r3, #6
 800a5a4:	d825      	bhi.n	800a5f2 <_scanf_float+0x2f2>
 800a5a6:	2d02      	cmp	r5, #2
 800a5a8:	d836      	bhi.n	800a618 <_scanf_float+0x318>
 800a5aa:	455e      	cmp	r6, fp
 800a5ac:	f67f aee8 	bls.w	800a380 <_scanf_float+0x80>
 800a5b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5b8:	463a      	mov	r2, r7
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4798      	blx	r3
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	6123      	str	r3, [r4, #16]
 800a5c4:	e7f1      	b.n	800a5aa <_scanf_float+0x2aa>
 800a5c6:	9802      	ldr	r0, [sp, #8]
 800a5c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a5d0:	9002      	str	r0, [sp, #8]
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4798      	blx	r3
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5e2:	fa5f fa8a 	uxtb.w	sl, sl
 800a5e6:	f1ba 0f02 	cmp.w	sl, #2
 800a5ea:	d1ec      	bne.n	800a5c6 <_scanf_float+0x2c6>
 800a5ec:	3d03      	subs	r5, #3
 800a5ee:	b2ed      	uxtb	r5, r5
 800a5f0:	1b76      	subs	r6, r6, r5
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	05da      	lsls	r2, r3, #23
 800a5f6:	d52f      	bpl.n	800a658 <_scanf_float+0x358>
 800a5f8:	055b      	lsls	r3, r3, #21
 800a5fa:	d510      	bpl.n	800a61e <_scanf_float+0x31e>
 800a5fc:	455e      	cmp	r6, fp
 800a5fe:	f67f aebf 	bls.w	800a380 <_scanf_float+0x80>
 800a602:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a60a:	463a      	mov	r2, r7
 800a60c:	4640      	mov	r0, r8
 800a60e:	4798      	blx	r3
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	3b01      	subs	r3, #1
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	e7f1      	b.n	800a5fc <_scanf_float+0x2fc>
 800a618:	46aa      	mov	sl, r5
 800a61a:	9602      	str	r6, [sp, #8]
 800a61c:	e7df      	b.n	800a5de <_scanf_float+0x2de>
 800a61e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	2965      	cmp	r1, #101	; 0x65
 800a626:	f103 33ff 	add.w	r3, r3, #4294967295
 800a62a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	d00c      	beq.n	800a64c <_scanf_float+0x34c>
 800a632:	2945      	cmp	r1, #69	; 0x45
 800a634:	d00a      	beq.n	800a64c <_scanf_float+0x34c>
 800a636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a63a:	463a      	mov	r2, r7
 800a63c:	4640      	mov	r0, r8
 800a63e:	4798      	blx	r3
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a646:	3b01      	subs	r3, #1
 800a648:	1eb5      	subs	r5, r6, #2
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a650:	463a      	mov	r2, r7
 800a652:	4640      	mov	r0, r8
 800a654:	4798      	blx	r3
 800a656:	462e      	mov	r6, r5
 800a658:	6825      	ldr	r5, [r4, #0]
 800a65a:	f015 0510 	ands.w	r5, r5, #16
 800a65e:	d159      	bne.n	800a714 <_scanf_float+0x414>
 800a660:	7035      	strb	r5, [r6, #0]
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a66c:	d11b      	bne.n	800a6a6 <_scanf_float+0x3a6>
 800a66e:	9b01      	ldr	r3, [sp, #4]
 800a670:	454b      	cmp	r3, r9
 800a672:	eba3 0209 	sub.w	r2, r3, r9
 800a676:	d123      	bne.n	800a6c0 <_scanf_float+0x3c0>
 800a678:	2200      	movs	r2, #0
 800a67a:	4659      	mov	r1, fp
 800a67c:	4640      	mov	r0, r8
 800a67e:	f000 fecd 	bl	800b41c <_strtod_r>
 800a682:	6822      	ldr	r2, [r4, #0]
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	f012 0f02 	tst.w	r2, #2
 800a68a:	ec57 6b10 	vmov	r6, r7, d0
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	d021      	beq.n	800a6d6 <_scanf_float+0x3d6>
 800a692:	9903      	ldr	r1, [sp, #12]
 800a694:	1d1a      	adds	r2, r3, #4
 800a696:	600a      	str	r2, [r1, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	e9c3 6700 	strd	r6, r7, [r3]
 800a69e:	68e3      	ldr	r3, [r4, #12]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	60e3      	str	r3, [r4, #12]
 800a6a4:	e66d      	b.n	800a382 <_scanf_float+0x82>
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0e5      	beq.n	800a678 <_scanf_float+0x378>
 800a6ac:	9905      	ldr	r1, [sp, #20]
 800a6ae:	230a      	movs	r3, #10
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	3101      	adds	r1, #1
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	f000 ff39 	bl	800b52c <_strtol_r>
 800a6ba:	9b04      	ldr	r3, [sp, #16]
 800a6bc:	9e05      	ldr	r6, [sp, #20]
 800a6be:	1ac2      	subs	r2, r0, r3
 800a6c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a6c4:	429e      	cmp	r6, r3
 800a6c6:	bf28      	it	cs
 800a6c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a6cc:	4912      	ldr	r1, [pc, #72]	; (800a718 <_scanf_float+0x418>)
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 f860 	bl	800a794 <siprintf>
 800a6d4:	e7d0      	b.n	800a678 <_scanf_float+0x378>
 800a6d6:	9903      	ldr	r1, [sp, #12]
 800a6d8:	f012 0f04 	tst.w	r2, #4
 800a6dc:	f103 0204 	add.w	r2, r3, #4
 800a6e0:	600a      	str	r2, [r1, #0]
 800a6e2:	d1d9      	bne.n	800a698 <_scanf_float+0x398>
 800a6e4:	f8d3 8000 	ldr.w	r8, [r3]
 800a6e8:	ee10 2a10 	vmov	r2, s0
 800a6ec:	ee10 0a10 	vmov	r0, s0
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 fa1a 	bl	8000b2c <__aeabi_dcmpun>
 800a6f8:	b128      	cbz	r0, 800a706 <_scanf_float+0x406>
 800a6fa:	4808      	ldr	r0, [pc, #32]	; (800a71c <_scanf_float+0x41c>)
 800a6fc:	f000 f810 	bl	800a720 <nanf>
 800a700:	ed88 0a00 	vstr	s0, [r8]
 800a704:	e7cb      	b.n	800a69e <_scanf_float+0x39e>
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f6 fa6d 	bl	8000be8 <__aeabi_d2f>
 800a70e:	f8c8 0000 	str.w	r0, [r8]
 800a712:	e7c4      	b.n	800a69e <_scanf_float+0x39e>
 800a714:	2500      	movs	r5, #0
 800a716:	e634      	b.n	800a382 <_scanf_float+0x82>
 800a718:	08020d98 	.word	0x08020d98
 800a71c:	080211a0 	.word	0x080211a0

0800a720 <nanf>:
 800a720:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a728 <nanf+0x8>
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	7fc00000 	.word	0x7fc00000

0800a72c <sniprintf>:
 800a72c:	b40c      	push	{r2, r3}
 800a72e:	b530      	push	{r4, r5, lr}
 800a730:	4b17      	ldr	r3, [pc, #92]	; (800a790 <sniprintf+0x64>)
 800a732:	1e0c      	subs	r4, r1, #0
 800a734:	681d      	ldr	r5, [r3, #0]
 800a736:	b09d      	sub	sp, #116	; 0x74
 800a738:	da08      	bge.n	800a74c <sniprintf+0x20>
 800a73a:	238b      	movs	r3, #139	; 0x8b
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	f04f 30ff 	mov.w	r0, #4294967295
 800a742:	b01d      	add	sp, #116	; 0x74
 800a744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a748:	b002      	add	sp, #8
 800a74a:	4770      	bx	lr
 800a74c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a750:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a754:	bf14      	ite	ne
 800a756:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a75a:	4623      	moveq	r3, r4
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	9307      	str	r3, [sp, #28]
 800a760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a764:	9002      	str	r0, [sp, #8]
 800a766:	9006      	str	r0, [sp, #24]
 800a768:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a76c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a76e:	ab21      	add	r3, sp, #132	; 0x84
 800a770:	a902      	add	r1, sp, #8
 800a772:	4628      	mov	r0, r5
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	f002 ff03 	bl	800d580 <_svfiprintf_r>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	bfbc      	itt	lt
 800a77e:	238b      	movlt	r3, #139	; 0x8b
 800a780:	602b      	strlt	r3, [r5, #0]
 800a782:	2c00      	cmp	r4, #0
 800a784:	d0dd      	beq.n	800a742 <sniprintf+0x16>
 800a786:	9b02      	ldr	r3, [sp, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	e7d9      	b.n	800a742 <sniprintf+0x16>
 800a78e:	bf00      	nop
 800a790:	20000060 	.word	0x20000060

0800a794 <siprintf>:
 800a794:	b40e      	push	{r1, r2, r3}
 800a796:	b500      	push	{lr}
 800a798:	b09c      	sub	sp, #112	; 0x70
 800a79a:	ab1d      	add	r3, sp, #116	; 0x74
 800a79c:	9002      	str	r0, [sp, #8]
 800a79e:	9006      	str	r0, [sp, #24]
 800a7a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7a4:	4809      	ldr	r0, [pc, #36]	; (800a7cc <siprintf+0x38>)
 800a7a6:	9107      	str	r1, [sp, #28]
 800a7a8:	9104      	str	r1, [sp, #16]
 800a7aa:	4909      	ldr	r1, [pc, #36]	; (800a7d0 <siprintf+0x3c>)
 800a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b0:	9105      	str	r1, [sp, #20]
 800a7b2:	6800      	ldr	r0, [r0, #0]
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	a902      	add	r1, sp, #8
 800a7b8:	f002 fee2 	bl	800d580 <_svfiprintf_r>
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	b01c      	add	sp, #112	; 0x70
 800a7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7c8:	b003      	add	sp, #12
 800a7ca:	4770      	bx	lr
 800a7cc:	20000060 	.word	0x20000060
 800a7d0:	ffff0208 	.word	0xffff0208

0800a7d4 <sulp>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	460d      	mov	r5, r1
 800a7da:	ec45 4b10 	vmov	d0, r4, r5
 800a7de:	4616      	mov	r6, r2
 800a7e0:	f002 fc2c 	bl	800d03c <__ulp>
 800a7e4:	ec51 0b10 	vmov	r0, r1, d0
 800a7e8:	b17e      	cbz	r6, 800a80a <sulp+0x36>
 800a7ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	dd09      	ble.n	800a80a <sulp+0x36>
 800a7f6:	051b      	lsls	r3, r3, #20
 800a7f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a802:	4622      	mov	r2, r4
 800a804:	462b      	mov	r3, r5
 800a806:	f7f5 fef7 	bl	80005f8 <__aeabi_dmul>
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	0000      	movs	r0, r0
	...

0800a810 <_strtod_l>:
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	ed2d 8b02 	vpush	{d8}
 800a818:	b09d      	sub	sp, #116	; 0x74
 800a81a:	461f      	mov	r7, r3
 800a81c:	2300      	movs	r3, #0
 800a81e:	9318      	str	r3, [sp, #96]	; 0x60
 800a820:	4ba2      	ldr	r3, [pc, #648]	; (800aaac <_strtod_l+0x29c>)
 800a822:	9213      	str	r2, [sp, #76]	; 0x4c
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	9305      	str	r3, [sp, #20]
 800a828:	4604      	mov	r4, r0
 800a82a:	4618      	mov	r0, r3
 800a82c:	4688      	mov	r8, r1
 800a82e:	f7f5 fccf 	bl	80001d0 <strlen>
 800a832:	f04f 0a00 	mov.w	sl, #0
 800a836:	4605      	mov	r5, r0
 800a838:	f04f 0b00 	mov.w	fp, #0
 800a83c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	2a2b      	cmp	r2, #43	; 0x2b
 800a846:	d04e      	beq.n	800a8e6 <_strtod_l+0xd6>
 800a848:	d83b      	bhi.n	800a8c2 <_strtod_l+0xb2>
 800a84a:	2a0d      	cmp	r2, #13
 800a84c:	d834      	bhi.n	800a8b8 <_strtod_l+0xa8>
 800a84e:	2a08      	cmp	r2, #8
 800a850:	d834      	bhi.n	800a8bc <_strtod_l+0xac>
 800a852:	2a00      	cmp	r2, #0
 800a854:	d03e      	beq.n	800a8d4 <_strtod_l+0xc4>
 800a856:	2300      	movs	r3, #0
 800a858:	930a      	str	r3, [sp, #40]	; 0x28
 800a85a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a85c:	7833      	ldrb	r3, [r6, #0]
 800a85e:	2b30      	cmp	r3, #48	; 0x30
 800a860:	f040 80b0 	bne.w	800a9c4 <_strtod_l+0x1b4>
 800a864:	7873      	ldrb	r3, [r6, #1]
 800a866:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a86a:	2b58      	cmp	r3, #88	; 0x58
 800a86c:	d168      	bne.n	800a940 <_strtod_l+0x130>
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	ab18      	add	r3, sp, #96	; 0x60
 800a874:	9702      	str	r7, [sp, #8]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	4a8d      	ldr	r2, [pc, #564]	; (800aab0 <_strtod_l+0x2a0>)
 800a87a:	ab19      	add	r3, sp, #100	; 0x64
 800a87c:	a917      	add	r1, sp, #92	; 0x5c
 800a87e:	4620      	mov	r0, r4
 800a880:	f001 fd44 	bl	800c30c <__gethex>
 800a884:	f010 0707 	ands.w	r7, r0, #7
 800a888:	4605      	mov	r5, r0
 800a88a:	d005      	beq.n	800a898 <_strtod_l+0x88>
 800a88c:	2f06      	cmp	r7, #6
 800a88e:	d12c      	bne.n	800a8ea <_strtod_l+0xda>
 800a890:	3601      	adds	r6, #1
 800a892:	2300      	movs	r3, #0
 800a894:	9617      	str	r6, [sp, #92]	; 0x5c
 800a896:	930a      	str	r3, [sp, #40]	; 0x28
 800a898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f040 8590 	bne.w	800b3c0 <_strtod_l+0xbb0>
 800a8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a2:	b1eb      	cbz	r3, 800a8e0 <_strtod_l+0xd0>
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a8aa:	ec43 2b10 	vmov	d0, r2, r3
 800a8ae:	b01d      	add	sp, #116	; 0x74
 800a8b0:	ecbd 8b02 	vpop	{d8}
 800a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b8:	2a20      	cmp	r2, #32
 800a8ba:	d1cc      	bne.n	800a856 <_strtod_l+0x46>
 800a8bc:	3301      	adds	r3, #1
 800a8be:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8c0:	e7be      	b.n	800a840 <_strtod_l+0x30>
 800a8c2:	2a2d      	cmp	r2, #45	; 0x2d
 800a8c4:	d1c7      	bne.n	800a856 <_strtod_l+0x46>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	920a      	str	r2, [sp, #40]	; 0x28
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8ce:	785b      	ldrb	r3, [r3, #1]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1c2      	bne.n	800a85a <_strtod_l+0x4a>
 800a8d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f040 856e 	bne.w	800b3bc <_strtod_l+0xbac>
 800a8e0:	4652      	mov	r2, sl
 800a8e2:	465b      	mov	r3, fp
 800a8e4:	e7e1      	b.n	800a8aa <_strtod_l+0x9a>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	e7ee      	b.n	800a8c8 <_strtod_l+0xb8>
 800a8ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8ec:	b13a      	cbz	r2, 800a8fe <_strtod_l+0xee>
 800a8ee:	2135      	movs	r1, #53	; 0x35
 800a8f0:	a81a      	add	r0, sp, #104	; 0x68
 800a8f2:	f002 fcae 	bl	800d252 <__copybits>
 800a8f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f002 f86d 	bl	800c9d8 <_Bfree>
 800a8fe:	3f01      	subs	r7, #1
 800a900:	2f04      	cmp	r7, #4
 800a902:	d806      	bhi.n	800a912 <_strtod_l+0x102>
 800a904:	e8df f007 	tbb	[pc, r7]
 800a908:	1714030a 	.word	0x1714030a
 800a90c:	0a          	.byte	0x0a
 800a90d:	00          	.byte	0x00
 800a90e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a912:	0728      	lsls	r0, r5, #28
 800a914:	d5c0      	bpl.n	800a898 <_strtod_l+0x88>
 800a916:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a91a:	e7bd      	b.n	800a898 <_strtod_l+0x88>
 800a91c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a920:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a92a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a92e:	e7f0      	b.n	800a912 <_strtod_l+0x102>
 800a930:	f8df b180 	ldr.w	fp, [pc, #384]	; 800aab4 <_strtod_l+0x2a4>
 800a934:	e7ed      	b.n	800a912 <_strtod_l+0x102>
 800a936:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a93a:	f04f 3aff 	mov.w	sl, #4294967295
 800a93e:	e7e8      	b.n	800a912 <_strtod_l+0x102>
 800a940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	9217      	str	r2, [sp, #92]	; 0x5c
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b30      	cmp	r3, #48	; 0x30
 800a94a:	d0f9      	beq.n	800a940 <_strtod_l+0x130>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0a3      	beq.n	800a898 <_strtod_l+0x88>
 800a950:	2301      	movs	r3, #1
 800a952:	f04f 0900 	mov.w	r9, #0
 800a956:	9304      	str	r3, [sp, #16]
 800a958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a95a:	9308      	str	r3, [sp, #32]
 800a95c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a960:	464f      	mov	r7, r9
 800a962:	220a      	movs	r2, #10
 800a964:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a966:	7806      	ldrb	r6, [r0, #0]
 800a968:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a96c:	b2d9      	uxtb	r1, r3
 800a96e:	2909      	cmp	r1, #9
 800a970:	d92a      	bls.n	800a9c8 <_strtod_l+0x1b8>
 800a972:	9905      	ldr	r1, [sp, #20]
 800a974:	462a      	mov	r2, r5
 800a976:	f002 ff1b 	bl	800d7b0 <strncmp>
 800a97a:	b398      	cbz	r0, 800a9e4 <_strtod_l+0x1d4>
 800a97c:	2000      	movs	r0, #0
 800a97e:	4632      	mov	r2, r6
 800a980:	463d      	mov	r5, r7
 800a982:	9005      	str	r0, [sp, #20]
 800a984:	4603      	mov	r3, r0
 800a986:	2a65      	cmp	r2, #101	; 0x65
 800a988:	d001      	beq.n	800a98e <_strtod_l+0x17e>
 800a98a:	2a45      	cmp	r2, #69	; 0x45
 800a98c:	d118      	bne.n	800a9c0 <_strtod_l+0x1b0>
 800a98e:	b91d      	cbnz	r5, 800a998 <_strtod_l+0x188>
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	4302      	orrs	r2, r0
 800a994:	d09e      	beq.n	800a8d4 <_strtod_l+0xc4>
 800a996:	2500      	movs	r5, #0
 800a998:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a99c:	f108 0201 	add.w	r2, r8, #1
 800a9a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a9a6:	2a2b      	cmp	r2, #43	; 0x2b
 800a9a8:	d075      	beq.n	800aa96 <_strtod_l+0x286>
 800a9aa:	2a2d      	cmp	r2, #45	; 0x2d
 800a9ac:	d07b      	beq.n	800aaa6 <_strtod_l+0x296>
 800a9ae:	f04f 0c00 	mov.w	ip, #0
 800a9b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a9b6:	2909      	cmp	r1, #9
 800a9b8:	f240 8082 	bls.w	800aac0 <_strtod_l+0x2b0>
 800a9bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a9c0:	2600      	movs	r6, #0
 800a9c2:	e09d      	b.n	800ab00 <_strtod_l+0x2f0>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e7c4      	b.n	800a952 <_strtod_l+0x142>
 800a9c8:	2f08      	cmp	r7, #8
 800a9ca:	bfd8      	it	le
 800a9cc:	9907      	ldrle	r1, [sp, #28]
 800a9ce:	f100 0001 	add.w	r0, r0, #1
 800a9d2:	bfda      	itte	le
 800a9d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9d8:	9307      	strle	r3, [sp, #28]
 800a9da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a9de:	3701      	adds	r7, #1
 800a9e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a9e2:	e7bf      	b.n	800a964 <_strtod_l+0x154>
 800a9e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9e6:	195a      	adds	r2, r3, r5
 800a9e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9ea:	5d5a      	ldrb	r2, [r3, r5]
 800a9ec:	2f00      	cmp	r7, #0
 800a9ee:	d037      	beq.n	800aa60 <_strtod_l+0x250>
 800a9f0:	9005      	str	r0, [sp, #20]
 800a9f2:	463d      	mov	r5, r7
 800a9f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a9f8:	2b09      	cmp	r3, #9
 800a9fa:	d912      	bls.n	800aa22 <_strtod_l+0x212>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e7c2      	b.n	800a986 <_strtod_l+0x176>
 800aa00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa06:	785a      	ldrb	r2, [r3, #1]
 800aa08:	3001      	adds	r0, #1
 800aa0a:	2a30      	cmp	r2, #48	; 0x30
 800aa0c:	d0f8      	beq.n	800aa00 <_strtod_l+0x1f0>
 800aa0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa12:	2b08      	cmp	r3, #8
 800aa14:	f200 84d9 	bhi.w	800b3ca <_strtod_l+0xbba>
 800aa18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa1a:	9005      	str	r0, [sp, #20]
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	9308      	str	r3, [sp, #32]
 800aa20:	4605      	mov	r5, r0
 800aa22:	3a30      	subs	r2, #48	; 0x30
 800aa24:	f100 0301 	add.w	r3, r0, #1
 800aa28:	d014      	beq.n	800aa54 <_strtod_l+0x244>
 800aa2a:	9905      	ldr	r1, [sp, #20]
 800aa2c:	4419      	add	r1, r3
 800aa2e:	9105      	str	r1, [sp, #20]
 800aa30:	462b      	mov	r3, r5
 800aa32:	eb00 0e05 	add.w	lr, r0, r5
 800aa36:	210a      	movs	r1, #10
 800aa38:	4573      	cmp	r3, lr
 800aa3a:	d113      	bne.n	800aa64 <_strtod_l+0x254>
 800aa3c:	182b      	adds	r3, r5, r0
 800aa3e:	2b08      	cmp	r3, #8
 800aa40:	f105 0501 	add.w	r5, r5, #1
 800aa44:	4405      	add	r5, r0
 800aa46:	dc1c      	bgt.n	800aa82 <_strtod_l+0x272>
 800aa48:	9907      	ldr	r1, [sp, #28]
 800aa4a:	230a      	movs	r3, #10
 800aa4c:	fb03 2301 	mla	r3, r3, r1, r2
 800aa50:	9307      	str	r3, [sp, #28]
 800aa52:	2300      	movs	r3, #0
 800aa54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa56:	1c51      	adds	r1, r2, #1
 800aa58:	9117      	str	r1, [sp, #92]	; 0x5c
 800aa5a:	7852      	ldrb	r2, [r2, #1]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	e7c9      	b.n	800a9f4 <_strtod_l+0x1e4>
 800aa60:	4638      	mov	r0, r7
 800aa62:	e7d2      	b.n	800aa0a <_strtod_l+0x1fa>
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	dc04      	bgt.n	800aa72 <_strtod_l+0x262>
 800aa68:	9e07      	ldr	r6, [sp, #28]
 800aa6a:	434e      	muls	r6, r1
 800aa6c:	9607      	str	r6, [sp, #28]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	e7e2      	b.n	800aa38 <_strtod_l+0x228>
 800aa72:	f103 0c01 	add.w	ip, r3, #1
 800aa76:	f1bc 0f10 	cmp.w	ip, #16
 800aa7a:	bfd8      	it	le
 800aa7c:	fb01 f909 	mulle.w	r9, r1, r9
 800aa80:	e7f5      	b.n	800aa6e <_strtod_l+0x25e>
 800aa82:	2d10      	cmp	r5, #16
 800aa84:	bfdc      	itt	le
 800aa86:	230a      	movle	r3, #10
 800aa88:	fb03 2909 	mlale	r9, r3, r9, r2
 800aa8c:	e7e1      	b.n	800aa52 <_strtod_l+0x242>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9305      	str	r3, [sp, #20]
 800aa92:	2301      	movs	r3, #1
 800aa94:	e77c      	b.n	800a990 <_strtod_l+0x180>
 800aa96:	f04f 0c00 	mov.w	ip, #0
 800aa9a:	f108 0202 	add.w	r2, r8, #2
 800aa9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800aaa0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aaa4:	e785      	b.n	800a9b2 <_strtod_l+0x1a2>
 800aaa6:	f04f 0c01 	mov.w	ip, #1
 800aaaa:	e7f6      	b.n	800aa9a <_strtod_l+0x28a>
 800aaac:	08020fe8 	.word	0x08020fe8
 800aab0:	08020da0 	.word	0x08020da0
 800aab4:	7ff00000 	.word	0x7ff00000
 800aab8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aaba:	1c51      	adds	r1, r2, #1
 800aabc:	9117      	str	r1, [sp, #92]	; 0x5c
 800aabe:	7852      	ldrb	r2, [r2, #1]
 800aac0:	2a30      	cmp	r2, #48	; 0x30
 800aac2:	d0f9      	beq.n	800aab8 <_strtod_l+0x2a8>
 800aac4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aac8:	2908      	cmp	r1, #8
 800aaca:	f63f af79 	bhi.w	800a9c0 <_strtod_l+0x1b0>
 800aace:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aad2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aad4:	9206      	str	r2, [sp, #24]
 800aad6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aad8:	1c51      	adds	r1, r2, #1
 800aada:	9117      	str	r1, [sp, #92]	; 0x5c
 800aadc:	7852      	ldrb	r2, [r2, #1]
 800aade:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aae2:	2e09      	cmp	r6, #9
 800aae4:	d937      	bls.n	800ab56 <_strtod_l+0x346>
 800aae6:	9e06      	ldr	r6, [sp, #24]
 800aae8:	1b89      	subs	r1, r1, r6
 800aaea:	2908      	cmp	r1, #8
 800aaec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aaf0:	dc02      	bgt.n	800aaf8 <_strtod_l+0x2e8>
 800aaf2:	4576      	cmp	r6, lr
 800aaf4:	bfa8      	it	ge
 800aaf6:	4676      	movge	r6, lr
 800aaf8:	f1bc 0f00 	cmp.w	ip, #0
 800aafc:	d000      	beq.n	800ab00 <_strtod_l+0x2f0>
 800aafe:	4276      	negs	r6, r6
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	d14d      	bne.n	800aba0 <_strtod_l+0x390>
 800ab04:	9904      	ldr	r1, [sp, #16]
 800ab06:	4301      	orrs	r1, r0
 800ab08:	f47f aec6 	bne.w	800a898 <_strtod_l+0x88>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f47f aee1 	bne.w	800a8d4 <_strtod_l+0xc4>
 800ab12:	2a69      	cmp	r2, #105	; 0x69
 800ab14:	d027      	beq.n	800ab66 <_strtod_l+0x356>
 800ab16:	dc24      	bgt.n	800ab62 <_strtod_l+0x352>
 800ab18:	2a49      	cmp	r2, #73	; 0x49
 800ab1a:	d024      	beq.n	800ab66 <_strtod_l+0x356>
 800ab1c:	2a4e      	cmp	r2, #78	; 0x4e
 800ab1e:	f47f aed9 	bne.w	800a8d4 <_strtod_l+0xc4>
 800ab22:	499f      	ldr	r1, [pc, #636]	; (800ada0 <_strtod_l+0x590>)
 800ab24:	a817      	add	r0, sp, #92	; 0x5c
 800ab26:	f001 fe49 	bl	800c7bc <__match>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f43f aed2 	beq.w	800a8d4 <_strtod_l+0xc4>
 800ab30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b28      	cmp	r3, #40	; 0x28
 800ab36:	d12d      	bne.n	800ab94 <_strtod_l+0x384>
 800ab38:	499a      	ldr	r1, [pc, #616]	; (800ada4 <_strtod_l+0x594>)
 800ab3a:	aa1a      	add	r2, sp, #104	; 0x68
 800ab3c:	a817      	add	r0, sp, #92	; 0x5c
 800ab3e:	f001 fe51 	bl	800c7e4 <__hexnan>
 800ab42:	2805      	cmp	r0, #5
 800ab44:	d126      	bne.n	800ab94 <_strtod_l+0x384>
 800ab46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ab4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ab50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ab54:	e6a0      	b.n	800a898 <_strtod_l+0x88>
 800ab56:	210a      	movs	r1, #10
 800ab58:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ab5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ab60:	e7b9      	b.n	800aad6 <_strtod_l+0x2c6>
 800ab62:	2a6e      	cmp	r2, #110	; 0x6e
 800ab64:	e7db      	b.n	800ab1e <_strtod_l+0x30e>
 800ab66:	4990      	ldr	r1, [pc, #576]	; (800ada8 <_strtod_l+0x598>)
 800ab68:	a817      	add	r0, sp, #92	; 0x5c
 800ab6a:	f001 fe27 	bl	800c7bc <__match>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f43f aeb0 	beq.w	800a8d4 <_strtod_l+0xc4>
 800ab74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab76:	498d      	ldr	r1, [pc, #564]	; (800adac <_strtod_l+0x59c>)
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	a817      	add	r0, sp, #92	; 0x5c
 800ab7c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab7e:	f001 fe1d 	bl	800c7bc <__match>
 800ab82:	b910      	cbnz	r0, 800ab8a <_strtod_l+0x37a>
 800ab84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab86:	3301      	adds	r3, #1
 800ab88:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800adbc <_strtod_l+0x5ac>
 800ab8e:	f04f 0a00 	mov.w	sl, #0
 800ab92:	e681      	b.n	800a898 <_strtod_l+0x88>
 800ab94:	4886      	ldr	r0, [pc, #536]	; (800adb0 <_strtod_l+0x5a0>)
 800ab96:	f002 fdf3 	bl	800d780 <nan>
 800ab9a:	ec5b ab10 	vmov	sl, fp, d0
 800ab9e:	e67b      	b.n	800a898 <_strtod_l+0x88>
 800aba0:	9b05      	ldr	r3, [sp, #20]
 800aba2:	9807      	ldr	r0, [sp, #28]
 800aba4:	1af3      	subs	r3, r6, r3
 800aba6:	2f00      	cmp	r7, #0
 800aba8:	bf08      	it	eq
 800abaa:	462f      	moveq	r7, r5
 800abac:	2d10      	cmp	r5, #16
 800abae:	9306      	str	r3, [sp, #24]
 800abb0:	46a8      	mov	r8, r5
 800abb2:	bfa8      	it	ge
 800abb4:	f04f 0810 	movge.w	r8, #16
 800abb8:	f7f5 fca4 	bl	8000504 <__aeabi_ui2d>
 800abbc:	2d09      	cmp	r5, #9
 800abbe:	4682      	mov	sl, r0
 800abc0:	468b      	mov	fp, r1
 800abc2:	dd13      	ble.n	800abec <_strtod_l+0x3dc>
 800abc4:	4b7b      	ldr	r3, [pc, #492]	; (800adb4 <_strtod_l+0x5a4>)
 800abc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800abca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	4682      	mov	sl, r0
 800abd4:	4648      	mov	r0, r9
 800abd6:	468b      	mov	fp, r1
 800abd8:	f7f5 fc94 	bl	8000504 <__aeabi_ui2d>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4650      	mov	r0, sl
 800abe2:	4659      	mov	r1, fp
 800abe4:	f7f5 fb52 	bl	800028c <__adddf3>
 800abe8:	4682      	mov	sl, r0
 800abea:	468b      	mov	fp, r1
 800abec:	2d0f      	cmp	r5, #15
 800abee:	dc38      	bgt.n	800ac62 <_strtod_l+0x452>
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f43f ae50 	beq.w	800a898 <_strtod_l+0x88>
 800abf8:	dd24      	ble.n	800ac44 <_strtod_l+0x434>
 800abfa:	2b16      	cmp	r3, #22
 800abfc:	dc0b      	bgt.n	800ac16 <_strtod_l+0x406>
 800abfe:	496d      	ldr	r1, [pc, #436]	; (800adb4 <_strtod_l+0x5a4>)
 800ac00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac08:	4652      	mov	r2, sl
 800ac0a:	465b      	mov	r3, fp
 800ac0c:	f7f5 fcf4 	bl	80005f8 <__aeabi_dmul>
 800ac10:	4682      	mov	sl, r0
 800ac12:	468b      	mov	fp, r1
 800ac14:	e640      	b.n	800a898 <_strtod_l+0x88>
 800ac16:	9a06      	ldr	r2, [sp, #24]
 800ac18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	db20      	blt.n	800ac62 <_strtod_l+0x452>
 800ac20:	4c64      	ldr	r4, [pc, #400]	; (800adb4 <_strtod_l+0x5a4>)
 800ac22:	f1c5 050f 	rsb	r5, r5, #15
 800ac26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac2a:	4652      	mov	r2, sl
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac32:	f7f5 fce1 	bl	80005f8 <__aeabi_dmul>
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	1b5d      	subs	r5, r3, r5
 800ac3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac42:	e7e3      	b.n	800ac0c <_strtod_l+0x3fc>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	3316      	adds	r3, #22
 800ac48:	db0b      	blt.n	800ac62 <_strtod_l+0x452>
 800ac4a:	9b05      	ldr	r3, [sp, #20]
 800ac4c:	1b9e      	subs	r6, r3, r6
 800ac4e:	4b59      	ldr	r3, [pc, #356]	; (800adb4 <_strtod_l+0x5a4>)
 800ac50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ac54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac58:	4650      	mov	r0, sl
 800ac5a:	4659      	mov	r1, fp
 800ac5c:	f7f5 fdf6 	bl	800084c <__aeabi_ddiv>
 800ac60:	e7d6      	b.n	800ac10 <_strtod_l+0x400>
 800ac62:	9b06      	ldr	r3, [sp, #24]
 800ac64:	eba5 0808 	sub.w	r8, r5, r8
 800ac68:	4498      	add	r8, r3
 800ac6a:	f1b8 0f00 	cmp.w	r8, #0
 800ac6e:	dd74      	ble.n	800ad5a <_strtod_l+0x54a>
 800ac70:	f018 030f 	ands.w	r3, r8, #15
 800ac74:	d00a      	beq.n	800ac8c <_strtod_l+0x47c>
 800ac76:	494f      	ldr	r1, [pc, #316]	; (800adb4 <_strtod_l+0x5a4>)
 800ac78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	465b      	mov	r3, fp
 800ac80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac84:	f7f5 fcb8 	bl	80005f8 <__aeabi_dmul>
 800ac88:	4682      	mov	sl, r0
 800ac8a:	468b      	mov	fp, r1
 800ac8c:	f038 080f 	bics.w	r8, r8, #15
 800ac90:	d04f      	beq.n	800ad32 <_strtod_l+0x522>
 800ac92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ac96:	dd22      	ble.n	800acde <_strtod_l+0x4ce>
 800ac98:	2500      	movs	r5, #0
 800ac9a:	462e      	mov	r6, r5
 800ac9c:	9507      	str	r5, [sp, #28]
 800ac9e:	9505      	str	r5, [sp, #20]
 800aca0:	2322      	movs	r3, #34	; 0x22
 800aca2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800adbc <_strtod_l+0x5ac>
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	f04f 0a00 	mov.w	sl, #0
 800acac:	9b07      	ldr	r3, [sp, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f43f adf2 	beq.w	800a898 <_strtod_l+0x88>
 800acb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acb6:	4620      	mov	r0, r4
 800acb8:	f001 fe8e 	bl	800c9d8 <_Bfree>
 800acbc:	9905      	ldr	r1, [sp, #20]
 800acbe:	4620      	mov	r0, r4
 800acc0:	f001 fe8a 	bl	800c9d8 <_Bfree>
 800acc4:	4631      	mov	r1, r6
 800acc6:	4620      	mov	r0, r4
 800acc8:	f001 fe86 	bl	800c9d8 <_Bfree>
 800accc:	9907      	ldr	r1, [sp, #28]
 800acce:	4620      	mov	r0, r4
 800acd0:	f001 fe82 	bl	800c9d8 <_Bfree>
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 fe7e 	bl	800c9d8 <_Bfree>
 800acdc:	e5dc      	b.n	800a898 <_strtod_l+0x88>
 800acde:	4b36      	ldr	r3, [pc, #216]	; (800adb8 <_strtod_l+0x5a8>)
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	2300      	movs	r3, #0
 800ace4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ace8:	4650      	mov	r0, sl
 800acea:	4659      	mov	r1, fp
 800acec:	4699      	mov	r9, r3
 800acee:	f1b8 0f01 	cmp.w	r8, #1
 800acf2:	dc21      	bgt.n	800ad38 <_strtod_l+0x528>
 800acf4:	b10b      	cbz	r3, 800acfa <_strtod_l+0x4ea>
 800acf6:	4682      	mov	sl, r0
 800acf8:	468b      	mov	fp, r1
 800acfa:	4b2f      	ldr	r3, [pc, #188]	; (800adb8 <_strtod_l+0x5a8>)
 800acfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ad00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ad04:	4652      	mov	r2, sl
 800ad06:	465b      	mov	r3, fp
 800ad08:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ad0c:	f7f5 fc74 	bl	80005f8 <__aeabi_dmul>
 800ad10:	4b2a      	ldr	r3, [pc, #168]	; (800adbc <_strtod_l+0x5ac>)
 800ad12:	460a      	mov	r2, r1
 800ad14:	400b      	ands	r3, r1
 800ad16:	492a      	ldr	r1, [pc, #168]	; (800adc0 <_strtod_l+0x5b0>)
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	d8bc      	bhi.n	800ac98 <_strtod_l+0x488>
 800ad1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad22:	428b      	cmp	r3, r1
 800ad24:	bf86      	itte	hi
 800ad26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800adc4 <_strtod_l+0x5b4>
 800ad2a:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ad32:	2300      	movs	r3, #0
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	e084      	b.n	800ae42 <_strtod_l+0x632>
 800ad38:	f018 0f01 	tst.w	r8, #1
 800ad3c:	d005      	beq.n	800ad4a <_strtod_l+0x53a>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	f7f5 fc58 	bl	80005f8 <__aeabi_dmul>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	9a04      	ldr	r2, [sp, #16]
 800ad4c:	3208      	adds	r2, #8
 800ad4e:	f109 0901 	add.w	r9, r9, #1
 800ad52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad56:	9204      	str	r2, [sp, #16]
 800ad58:	e7c9      	b.n	800acee <_strtod_l+0x4de>
 800ad5a:	d0ea      	beq.n	800ad32 <_strtod_l+0x522>
 800ad5c:	f1c8 0800 	rsb	r8, r8, #0
 800ad60:	f018 020f 	ands.w	r2, r8, #15
 800ad64:	d00a      	beq.n	800ad7c <_strtod_l+0x56c>
 800ad66:	4b13      	ldr	r3, [pc, #76]	; (800adb4 <_strtod_l+0x5a4>)
 800ad68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	4659      	mov	r1, fp
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	f7f5 fd6a 	bl	800084c <__aeabi_ddiv>
 800ad78:	4682      	mov	sl, r0
 800ad7a:	468b      	mov	fp, r1
 800ad7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ad80:	d0d7      	beq.n	800ad32 <_strtod_l+0x522>
 800ad82:	f1b8 0f1f 	cmp.w	r8, #31
 800ad86:	dd1f      	ble.n	800adc8 <_strtod_l+0x5b8>
 800ad88:	2500      	movs	r5, #0
 800ad8a:	462e      	mov	r6, r5
 800ad8c:	9507      	str	r5, [sp, #28]
 800ad8e:	9505      	str	r5, [sp, #20]
 800ad90:	2322      	movs	r3, #34	; 0x22
 800ad92:	f04f 0a00 	mov.w	sl, #0
 800ad96:	f04f 0b00 	mov.w	fp, #0
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	e786      	b.n	800acac <_strtod_l+0x49c>
 800ad9e:	bf00      	nop
 800ada0:	08020d71 	.word	0x08020d71
 800ada4:	08020db4 	.word	0x08020db4
 800ada8:	08020d69 	.word	0x08020d69
 800adac:	08020ef4 	.word	0x08020ef4
 800adb0:	080211a0 	.word	0x080211a0
 800adb4:	08021080 	.word	0x08021080
 800adb8:	08021058 	.word	0x08021058
 800adbc:	7ff00000 	.word	0x7ff00000
 800adc0:	7ca00000 	.word	0x7ca00000
 800adc4:	7fefffff 	.word	0x7fefffff
 800adc8:	f018 0310 	ands.w	r3, r8, #16
 800adcc:	bf18      	it	ne
 800adce:	236a      	movne	r3, #106	; 0x6a
 800add0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b180 <_strtod_l+0x970>
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	4650      	mov	r0, sl
 800add8:	4659      	mov	r1, fp
 800adda:	2300      	movs	r3, #0
 800addc:	f018 0f01 	tst.w	r8, #1
 800ade0:	d004      	beq.n	800adec <_strtod_l+0x5dc>
 800ade2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ade6:	f7f5 fc07 	bl	80005f8 <__aeabi_dmul>
 800adea:	2301      	movs	r3, #1
 800adec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800adf0:	f109 0908 	add.w	r9, r9, #8
 800adf4:	d1f2      	bne.n	800addc <_strtod_l+0x5cc>
 800adf6:	b10b      	cbz	r3, 800adfc <_strtod_l+0x5ec>
 800adf8:	4682      	mov	sl, r0
 800adfa:	468b      	mov	fp, r1
 800adfc:	9b04      	ldr	r3, [sp, #16]
 800adfe:	b1c3      	cbz	r3, 800ae32 <_strtod_l+0x622>
 800ae00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	dd11      	ble.n	800ae32 <_strtod_l+0x622>
 800ae0e:	2b1f      	cmp	r3, #31
 800ae10:	f340 8124 	ble.w	800b05c <_strtod_l+0x84c>
 800ae14:	2b34      	cmp	r3, #52	; 0x34
 800ae16:	bfde      	ittt	le
 800ae18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ae1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ae20:	fa03 f202 	lslle.w	r2, r3, r2
 800ae24:	f04f 0a00 	mov.w	sl, #0
 800ae28:	bfcc      	ite	gt
 800ae2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae2e:	ea02 0b01 	andle.w	fp, r2, r1
 800ae32:	2200      	movs	r2, #0
 800ae34:	2300      	movs	r3, #0
 800ae36:	4650      	mov	r0, sl
 800ae38:	4659      	mov	r1, fp
 800ae3a:	f7f5 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d1a2      	bne.n	800ad88 <_strtod_l+0x578>
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	9908      	ldr	r1, [sp, #32]
 800ae48:	462b      	mov	r3, r5
 800ae4a:	463a      	mov	r2, r7
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f001 fe2b 	bl	800caa8 <__s2b>
 800ae52:	9007      	str	r0, [sp, #28]
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f43f af1f 	beq.w	800ac98 <_strtod_l+0x488>
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	1b9e      	subs	r6, r3, r6
 800ae5e:	9b06      	ldr	r3, [sp, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bfb4      	ite	lt
 800ae64:	4633      	movlt	r3, r6
 800ae66:	2300      	movge	r3, #0
 800ae68:	930c      	str	r3, [sp, #48]	; 0x30
 800ae6a:	9b06      	ldr	r3, [sp, #24]
 800ae6c:	2500      	movs	r5, #0
 800ae6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ae72:	9312      	str	r3, [sp, #72]	; 0x48
 800ae74:	462e      	mov	r6, r5
 800ae76:	9b07      	ldr	r3, [sp, #28]
 800ae78:	4620      	mov	r0, r4
 800ae7a:	6859      	ldr	r1, [r3, #4]
 800ae7c:	f001 fd6c 	bl	800c958 <_Balloc>
 800ae80:	9005      	str	r0, [sp, #20]
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f43f af0c 	beq.w	800aca0 <_strtod_l+0x490>
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	691a      	ldr	r2, [r3, #16]
 800ae8c:	3202      	adds	r2, #2
 800ae8e:	f103 010c 	add.w	r1, r3, #12
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	300c      	adds	r0, #12
 800ae96:	f7fe fdb3 	bl	8009a00 <memcpy>
 800ae9a:	ec4b ab10 	vmov	d0, sl, fp
 800ae9e:	aa1a      	add	r2, sp, #104	; 0x68
 800aea0:	a919      	add	r1, sp, #100	; 0x64
 800aea2:	4620      	mov	r0, r4
 800aea4:	f002 f946 	bl	800d134 <__d2b>
 800aea8:	ec4b ab18 	vmov	d8, sl, fp
 800aeac:	9018      	str	r0, [sp, #96]	; 0x60
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f aef6 	beq.w	800aca0 <_strtod_l+0x490>
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f001 fe90 	bl	800cbdc <__i2b>
 800aebc:	4606      	mov	r6, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f aeee 	beq.w	800aca0 <_strtod_l+0x490>
 800aec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aec6:	9904      	ldr	r1, [sp, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfab      	itete	ge
 800aecc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800aece:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800aed0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aed2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800aed6:	bfac      	ite	ge
 800aed8:	eb03 0902 	addge.w	r9, r3, r2
 800aedc:	1ad7      	sublt	r7, r2, r3
 800aede:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aee0:	eba3 0801 	sub.w	r8, r3, r1
 800aee4:	4490      	add	r8, r2
 800aee6:	4ba1      	ldr	r3, [pc, #644]	; (800b16c <_strtod_l+0x95c>)
 800aee8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aeec:	4598      	cmp	r8, r3
 800aeee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aef2:	f280 80c7 	bge.w	800b084 <_strtod_l+0x874>
 800aef6:	eba3 0308 	sub.w	r3, r3, r8
 800aefa:	2b1f      	cmp	r3, #31
 800aefc:	eba2 0203 	sub.w	r2, r2, r3
 800af00:	f04f 0101 	mov.w	r1, #1
 800af04:	f300 80b1 	bgt.w	800b06a <_strtod_l+0x85a>
 800af08:	fa01 f303 	lsl.w	r3, r1, r3
 800af0c:	930d      	str	r3, [sp, #52]	; 0x34
 800af0e:	2300      	movs	r3, #0
 800af10:	9308      	str	r3, [sp, #32]
 800af12:	eb09 0802 	add.w	r8, r9, r2
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	45c1      	cmp	r9, r8
 800af1a:	4417      	add	r7, r2
 800af1c:	441f      	add	r7, r3
 800af1e:	464b      	mov	r3, r9
 800af20:	bfa8      	it	ge
 800af22:	4643      	movge	r3, r8
 800af24:	42bb      	cmp	r3, r7
 800af26:	bfa8      	it	ge
 800af28:	463b      	movge	r3, r7
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bfc2      	ittt	gt
 800af2e:	eba8 0803 	subgt.w	r8, r8, r3
 800af32:	1aff      	subgt	r7, r7, r3
 800af34:	eba9 0903 	subgt.w	r9, r9, r3
 800af38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	dd17      	ble.n	800af6e <_strtod_l+0x75e>
 800af3e:	4631      	mov	r1, r6
 800af40:	461a      	mov	r2, r3
 800af42:	4620      	mov	r0, r4
 800af44:	f001 ff0a 	bl	800cd5c <__pow5mult>
 800af48:	4606      	mov	r6, r0
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f43f aea8 	beq.w	800aca0 <_strtod_l+0x490>
 800af50:	4601      	mov	r1, r0
 800af52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af54:	4620      	mov	r0, r4
 800af56:	f001 fe57 	bl	800cc08 <__multiply>
 800af5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f43f ae9f 	beq.w	800aca0 <_strtod_l+0x490>
 800af62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af64:	4620      	mov	r0, r4
 800af66:	f001 fd37 	bl	800c9d8 <_Bfree>
 800af6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6c:	9318      	str	r3, [sp, #96]	; 0x60
 800af6e:	f1b8 0f00 	cmp.w	r8, #0
 800af72:	f300 808c 	bgt.w	800b08e <_strtod_l+0x87e>
 800af76:	9b06      	ldr	r3, [sp, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	dd08      	ble.n	800af8e <_strtod_l+0x77e>
 800af7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af7e:	9905      	ldr	r1, [sp, #20]
 800af80:	4620      	mov	r0, r4
 800af82:	f001 feeb 	bl	800cd5c <__pow5mult>
 800af86:	9005      	str	r0, [sp, #20]
 800af88:	2800      	cmp	r0, #0
 800af8a:	f43f ae89 	beq.w	800aca0 <_strtod_l+0x490>
 800af8e:	2f00      	cmp	r7, #0
 800af90:	dd08      	ble.n	800afa4 <_strtod_l+0x794>
 800af92:	9905      	ldr	r1, [sp, #20]
 800af94:	463a      	mov	r2, r7
 800af96:	4620      	mov	r0, r4
 800af98:	f001 ff3a 	bl	800ce10 <__lshift>
 800af9c:	9005      	str	r0, [sp, #20]
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f43f ae7e 	beq.w	800aca0 <_strtod_l+0x490>
 800afa4:	f1b9 0f00 	cmp.w	r9, #0
 800afa8:	dd08      	ble.n	800afbc <_strtod_l+0x7ac>
 800afaa:	4631      	mov	r1, r6
 800afac:	464a      	mov	r2, r9
 800afae:	4620      	mov	r0, r4
 800afb0:	f001 ff2e 	bl	800ce10 <__lshift>
 800afb4:	4606      	mov	r6, r0
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f43f ae72 	beq.w	800aca0 <_strtod_l+0x490>
 800afbc:	9a05      	ldr	r2, [sp, #20]
 800afbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afc0:	4620      	mov	r0, r4
 800afc2:	f001 ffb1 	bl	800cf28 <__mdiff>
 800afc6:	4605      	mov	r5, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	f43f ae69 	beq.w	800aca0 <_strtod_l+0x490>
 800afce:	68c3      	ldr	r3, [r0, #12]
 800afd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800afd2:	2300      	movs	r3, #0
 800afd4:	60c3      	str	r3, [r0, #12]
 800afd6:	4631      	mov	r1, r6
 800afd8:	f001 ff8a 	bl	800cef0 <__mcmp>
 800afdc:	2800      	cmp	r0, #0
 800afde:	da60      	bge.n	800b0a2 <_strtod_l+0x892>
 800afe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe2:	ea53 030a 	orrs.w	r3, r3, sl
 800afe6:	f040 8082 	bne.w	800b0ee <_strtod_l+0x8de>
 800afea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d17d      	bne.n	800b0ee <_strtod_l+0x8de>
 800aff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aff6:	0d1b      	lsrs	r3, r3, #20
 800aff8:	051b      	lsls	r3, r3, #20
 800affa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800affe:	d976      	bls.n	800b0ee <_strtod_l+0x8de>
 800b000:	696b      	ldr	r3, [r5, #20]
 800b002:	b913      	cbnz	r3, 800b00a <_strtod_l+0x7fa>
 800b004:	692b      	ldr	r3, [r5, #16]
 800b006:	2b01      	cmp	r3, #1
 800b008:	dd71      	ble.n	800b0ee <_strtod_l+0x8de>
 800b00a:	4629      	mov	r1, r5
 800b00c:	2201      	movs	r2, #1
 800b00e:	4620      	mov	r0, r4
 800b010:	f001 fefe 	bl	800ce10 <__lshift>
 800b014:	4631      	mov	r1, r6
 800b016:	4605      	mov	r5, r0
 800b018:	f001 ff6a 	bl	800cef0 <__mcmp>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	dd66      	ble.n	800b0ee <_strtod_l+0x8de>
 800b020:	9904      	ldr	r1, [sp, #16]
 800b022:	4a53      	ldr	r2, [pc, #332]	; (800b170 <_strtod_l+0x960>)
 800b024:	465b      	mov	r3, fp
 800b026:	2900      	cmp	r1, #0
 800b028:	f000 8081 	beq.w	800b12e <_strtod_l+0x91e>
 800b02c:	ea02 010b 	and.w	r1, r2, fp
 800b030:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b034:	dc7b      	bgt.n	800b12e <_strtod_l+0x91e>
 800b036:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b03a:	f77f aea9 	ble.w	800ad90 <_strtod_l+0x580>
 800b03e:	4b4d      	ldr	r3, [pc, #308]	; (800b174 <_strtod_l+0x964>)
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	2200      	movs	r2, #0
 800b046:	f7f5 fad7 	bl	80005f8 <__aeabi_dmul>
 800b04a:	460b      	mov	r3, r1
 800b04c:	4303      	orrs	r3, r0
 800b04e:	bf08      	it	eq
 800b050:	2322      	moveq	r3, #34	; 0x22
 800b052:	4682      	mov	sl, r0
 800b054:	468b      	mov	fp, r1
 800b056:	bf08      	it	eq
 800b058:	6023      	streq	r3, [r4, #0]
 800b05a:	e62b      	b.n	800acb4 <_strtod_l+0x4a4>
 800b05c:	f04f 32ff 	mov.w	r2, #4294967295
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	ea03 0a0a 	and.w	sl, r3, sl
 800b068:	e6e3      	b.n	800ae32 <_strtod_l+0x622>
 800b06a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b06e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b072:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b076:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b07a:	fa01 f308 	lsl.w	r3, r1, r8
 800b07e:	9308      	str	r3, [sp, #32]
 800b080:	910d      	str	r1, [sp, #52]	; 0x34
 800b082:	e746      	b.n	800af12 <_strtod_l+0x702>
 800b084:	2300      	movs	r3, #0
 800b086:	9308      	str	r3, [sp, #32]
 800b088:	2301      	movs	r3, #1
 800b08a:	930d      	str	r3, [sp, #52]	; 0x34
 800b08c:	e741      	b.n	800af12 <_strtod_l+0x702>
 800b08e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b090:	4642      	mov	r2, r8
 800b092:	4620      	mov	r0, r4
 800b094:	f001 febc 	bl	800ce10 <__lshift>
 800b098:	9018      	str	r0, [sp, #96]	; 0x60
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f47f af6b 	bne.w	800af76 <_strtod_l+0x766>
 800b0a0:	e5fe      	b.n	800aca0 <_strtod_l+0x490>
 800b0a2:	465f      	mov	r7, fp
 800b0a4:	d16e      	bne.n	800b184 <_strtod_l+0x974>
 800b0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0ac:	b342      	cbz	r2, 800b100 <_strtod_l+0x8f0>
 800b0ae:	4a32      	ldr	r2, [pc, #200]	; (800b178 <_strtod_l+0x968>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d128      	bne.n	800b106 <_strtod_l+0x8f6>
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	4651      	mov	r1, sl
 800b0b8:	b1eb      	cbz	r3, 800b0f6 <_strtod_l+0x8e6>
 800b0ba:	4b2d      	ldr	r3, [pc, #180]	; (800b170 <_strtod_l+0x960>)
 800b0bc:	403b      	ands	r3, r7
 800b0be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c6:	d819      	bhi.n	800b0fc <_strtod_l+0x8ec>
 800b0c8:	0d1b      	lsrs	r3, r3, #20
 800b0ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d2:	4299      	cmp	r1, r3
 800b0d4:	d117      	bne.n	800b106 <_strtod_l+0x8f6>
 800b0d6:	4b29      	ldr	r3, [pc, #164]	; (800b17c <_strtod_l+0x96c>)
 800b0d8:	429f      	cmp	r7, r3
 800b0da:	d102      	bne.n	800b0e2 <_strtod_l+0x8d2>
 800b0dc:	3101      	adds	r1, #1
 800b0de:	f43f addf 	beq.w	800aca0 <_strtod_l+0x490>
 800b0e2:	4b23      	ldr	r3, [pc, #140]	; (800b170 <_strtod_l+0x960>)
 800b0e4:	403b      	ands	r3, r7
 800b0e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b0ea:	f04f 0a00 	mov.w	sl, #0
 800b0ee:	9b04      	ldr	r3, [sp, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1a4      	bne.n	800b03e <_strtod_l+0x82e>
 800b0f4:	e5de      	b.n	800acb4 <_strtod_l+0x4a4>
 800b0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fa:	e7ea      	b.n	800b0d2 <_strtod_l+0x8c2>
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	e7e8      	b.n	800b0d2 <_strtod_l+0x8c2>
 800b100:	ea53 030a 	orrs.w	r3, r3, sl
 800b104:	d08c      	beq.n	800b020 <_strtod_l+0x810>
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	b1db      	cbz	r3, 800b142 <_strtod_l+0x932>
 800b10a:	423b      	tst	r3, r7
 800b10c:	d0ef      	beq.n	800b0ee <_strtod_l+0x8de>
 800b10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b110:	9a04      	ldr	r2, [sp, #16]
 800b112:	4650      	mov	r0, sl
 800b114:	4659      	mov	r1, fp
 800b116:	b1c3      	cbz	r3, 800b14a <_strtod_l+0x93a>
 800b118:	f7ff fb5c 	bl	800a7d4 <sulp>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	ec51 0b18 	vmov	r0, r1, d8
 800b124:	f7f5 f8b2 	bl	800028c <__adddf3>
 800b128:	4682      	mov	sl, r0
 800b12a:	468b      	mov	fp, r1
 800b12c:	e7df      	b.n	800b0ee <_strtod_l+0x8de>
 800b12e:	4013      	ands	r3, r2
 800b130:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b134:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b138:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b13c:	f04f 3aff 	mov.w	sl, #4294967295
 800b140:	e7d5      	b.n	800b0ee <_strtod_l+0x8de>
 800b142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b144:	ea13 0f0a 	tst.w	r3, sl
 800b148:	e7e0      	b.n	800b10c <_strtod_l+0x8fc>
 800b14a:	f7ff fb43 	bl	800a7d4 <sulp>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	ec51 0b18 	vmov	r0, r1, d8
 800b156:	f7f5 f897 	bl	8000288 <__aeabi_dsub>
 800b15a:	2200      	movs	r2, #0
 800b15c:	2300      	movs	r3, #0
 800b15e:	4682      	mov	sl, r0
 800b160:	468b      	mov	fp, r1
 800b162:	f7f5 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0c1      	beq.n	800b0ee <_strtod_l+0x8de>
 800b16a:	e611      	b.n	800ad90 <_strtod_l+0x580>
 800b16c:	fffffc02 	.word	0xfffffc02
 800b170:	7ff00000 	.word	0x7ff00000
 800b174:	39500000 	.word	0x39500000
 800b178:	000fffff 	.word	0x000fffff
 800b17c:	7fefffff 	.word	0x7fefffff
 800b180:	08020dc8 	.word	0x08020dc8
 800b184:	4631      	mov	r1, r6
 800b186:	4628      	mov	r0, r5
 800b188:	f002 f830 	bl	800d1ec <__ratio>
 800b18c:	ec59 8b10 	vmov	r8, r9, d0
 800b190:	ee10 0a10 	vmov	r0, s0
 800b194:	2200      	movs	r2, #0
 800b196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7f5 fca8 	bl	8000af0 <__aeabi_dcmple>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d07a      	beq.n	800b29a <_strtod_l+0xa8a>
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d04a      	beq.n	800b240 <_strtod_l+0xa30>
 800b1aa:	4b95      	ldr	r3, [pc, #596]	; (800b400 <_strtod_l+0xbf0>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b400 <_strtod_l+0xbf0>
 800b1b6:	f04f 0800 	mov.w	r8, #0
 800b1ba:	4b92      	ldr	r3, [pc, #584]	; (800b404 <_strtod_l+0xbf4>)
 800b1bc:	403b      	ands	r3, r7
 800b1be:	930d      	str	r3, [sp, #52]	; 0x34
 800b1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1c2:	4b91      	ldr	r3, [pc, #580]	; (800b408 <_strtod_l+0xbf8>)
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	f040 80b0 	bne.w	800b32a <_strtod_l+0xb1a>
 800b1ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b1d2:	ec4b ab10 	vmov	d0, sl, fp
 800b1d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1da:	f001 ff2f 	bl	800d03c <__ulp>
 800b1de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1e2:	ec53 2b10 	vmov	r2, r3, d0
 800b1e6:	f7f5 fa07 	bl	80005f8 <__aeabi_dmul>
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	465b      	mov	r3, fp
 800b1ee:	f7f5 f84d 	bl	800028c <__adddf3>
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4983      	ldr	r1, [pc, #524]	; (800b404 <_strtod_l+0xbf4>)
 800b1f6:	4a85      	ldr	r2, [pc, #532]	; (800b40c <_strtod_l+0xbfc>)
 800b1f8:	4019      	ands	r1, r3
 800b1fa:	4291      	cmp	r1, r2
 800b1fc:	4682      	mov	sl, r0
 800b1fe:	d960      	bls.n	800b2c2 <_strtod_l+0xab2>
 800b200:	ee18 3a90 	vmov	r3, s17
 800b204:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b208:	4293      	cmp	r3, r2
 800b20a:	d104      	bne.n	800b216 <_strtod_l+0xa06>
 800b20c:	ee18 3a10 	vmov	r3, s16
 800b210:	3301      	adds	r3, #1
 800b212:	f43f ad45 	beq.w	800aca0 <_strtod_l+0x490>
 800b216:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b418 <_strtod_l+0xc08>
 800b21a:	f04f 3aff 	mov.w	sl, #4294967295
 800b21e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b220:	4620      	mov	r0, r4
 800b222:	f001 fbd9 	bl	800c9d8 <_Bfree>
 800b226:	9905      	ldr	r1, [sp, #20]
 800b228:	4620      	mov	r0, r4
 800b22a:	f001 fbd5 	bl	800c9d8 <_Bfree>
 800b22e:	4631      	mov	r1, r6
 800b230:	4620      	mov	r0, r4
 800b232:	f001 fbd1 	bl	800c9d8 <_Bfree>
 800b236:	4629      	mov	r1, r5
 800b238:	4620      	mov	r0, r4
 800b23a:	f001 fbcd 	bl	800c9d8 <_Bfree>
 800b23e:	e61a      	b.n	800ae76 <_strtod_l+0x666>
 800b240:	f1ba 0f00 	cmp.w	sl, #0
 800b244:	d11b      	bne.n	800b27e <_strtod_l+0xa6e>
 800b246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b24a:	b9f3      	cbnz	r3, 800b28a <_strtod_l+0xa7a>
 800b24c:	4b6c      	ldr	r3, [pc, #432]	; (800b400 <_strtod_l+0xbf0>)
 800b24e:	2200      	movs	r2, #0
 800b250:	4640      	mov	r0, r8
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 fc42 	bl	8000adc <__aeabi_dcmplt>
 800b258:	b9d0      	cbnz	r0, 800b290 <_strtod_l+0xa80>
 800b25a:	4640      	mov	r0, r8
 800b25c:	4649      	mov	r1, r9
 800b25e:	4b6c      	ldr	r3, [pc, #432]	; (800b410 <_strtod_l+0xc00>)
 800b260:	2200      	movs	r2, #0
 800b262:	f7f5 f9c9 	bl	80005f8 <__aeabi_dmul>
 800b266:	4680      	mov	r8, r0
 800b268:	4689      	mov	r9, r1
 800b26a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b26e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b272:	9315      	str	r3, [sp, #84]	; 0x54
 800b274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b27c:	e79d      	b.n	800b1ba <_strtod_l+0x9aa>
 800b27e:	f1ba 0f01 	cmp.w	sl, #1
 800b282:	d102      	bne.n	800b28a <_strtod_l+0xa7a>
 800b284:	2f00      	cmp	r7, #0
 800b286:	f43f ad83 	beq.w	800ad90 <_strtod_l+0x580>
 800b28a:	4b62      	ldr	r3, [pc, #392]	; (800b414 <_strtod_l+0xc04>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	e78e      	b.n	800b1ae <_strtod_l+0x99e>
 800b290:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b410 <_strtod_l+0xc00>
 800b294:	f04f 0800 	mov.w	r8, #0
 800b298:	e7e7      	b.n	800b26a <_strtod_l+0xa5a>
 800b29a:	4b5d      	ldr	r3, [pc, #372]	; (800b410 <_strtod_l+0xc00>)
 800b29c:	4640      	mov	r0, r8
 800b29e:	4649      	mov	r1, r9
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f7f5 f9a9 	bl	80005f8 <__aeabi_dmul>
 800b2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a8:	4680      	mov	r8, r0
 800b2aa:	4689      	mov	r9, r1
 800b2ac:	b933      	cbnz	r3, 800b2bc <_strtod_l+0xaac>
 800b2ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2b2:	900e      	str	r0, [sp, #56]	; 0x38
 800b2b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b2ba:	e7dd      	b.n	800b278 <_strtod_l+0xa68>
 800b2bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b2c0:	e7f9      	b.n	800b2b6 <_strtod_l+0xaa6>
 800b2c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1a8      	bne.n	800b21e <_strtod_l+0xa0e>
 800b2cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2d2:	0d1b      	lsrs	r3, r3, #20
 800b2d4:	051b      	lsls	r3, r3, #20
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d1a1      	bne.n	800b21e <_strtod_l+0xa0e>
 800b2da:	4640      	mov	r0, r8
 800b2dc:	4649      	mov	r1, r9
 800b2de:	f7f5 fceb 	bl	8000cb8 <__aeabi_d2lz>
 800b2e2:	f7f5 f95b 	bl	800059c <__aeabi_l2d>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f4 ffcb 	bl	8000288 <__aeabi_dsub>
 800b2f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2f8:	ea43 030a 	orr.w	r3, r3, sl
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	4680      	mov	r8, r0
 800b300:	4689      	mov	r9, r1
 800b302:	d055      	beq.n	800b3b0 <_strtod_l+0xba0>
 800b304:	a336      	add	r3, pc, #216	; (adr r3, 800b3e0 <_strtod_l+0xbd0>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f7f5 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f47f acd0 	bne.w	800acb4 <_strtod_l+0x4a4>
 800b314:	a334      	add	r3, pc, #208	; (adr r3, 800b3e8 <_strtod_l+0xbd8>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f5 fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 800b322:	2800      	cmp	r0, #0
 800b324:	f43f af7b 	beq.w	800b21e <_strtod_l+0xa0e>
 800b328:	e4c4      	b.n	800acb4 <_strtod_l+0x4a4>
 800b32a:	9b04      	ldr	r3, [sp, #16]
 800b32c:	b333      	cbz	r3, 800b37c <_strtod_l+0xb6c>
 800b32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b330:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b334:	d822      	bhi.n	800b37c <_strtod_l+0xb6c>
 800b336:	a32e      	add	r3, pc, #184	; (adr r3, 800b3f0 <_strtod_l+0xbe0>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	4640      	mov	r0, r8
 800b33e:	4649      	mov	r1, r9
 800b340:	f7f5 fbd6 	bl	8000af0 <__aeabi_dcmple>
 800b344:	b1a0      	cbz	r0, 800b370 <_strtod_l+0xb60>
 800b346:	4649      	mov	r1, r9
 800b348:	4640      	mov	r0, r8
 800b34a:	f7f5 fc2d 	bl	8000ba8 <__aeabi_d2uiz>
 800b34e:	2801      	cmp	r0, #1
 800b350:	bf38      	it	cc
 800b352:	2001      	movcc	r0, #1
 800b354:	f7f5 f8d6 	bl	8000504 <__aeabi_ui2d>
 800b358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b35a:	4680      	mov	r8, r0
 800b35c:	4689      	mov	r9, r1
 800b35e:	bb23      	cbnz	r3, 800b3aa <_strtod_l+0xb9a>
 800b360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b364:	9010      	str	r0, [sp, #64]	; 0x40
 800b366:	9311      	str	r3, [sp, #68]	; 0x44
 800b368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b36c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b374:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b378:	1a9b      	subs	r3, r3, r2
 800b37a:	9309      	str	r3, [sp, #36]	; 0x24
 800b37c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b380:	eeb0 0a48 	vmov.f32	s0, s16
 800b384:	eef0 0a68 	vmov.f32	s1, s17
 800b388:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b38c:	f001 fe56 	bl	800d03c <__ulp>
 800b390:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b394:	ec53 2b10 	vmov	r2, r3, d0
 800b398:	f7f5 f92e 	bl	80005f8 <__aeabi_dmul>
 800b39c:	ec53 2b18 	vmov	r2, r3, d8
 800b3a0:	f7f4 ff74 	bl	800028c <__adddf3>
 800b3a4:	4682      	mov	sl, r0
 800b3a6:	468b      	mov	fp, r1
 800b3a8:	e78d      	b.n	800b2c6 <_strtod_l+0xab6>
 800b3aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b3ae:	e7db      	b.n	800b368 <_strtod_l+0xb58>
 800b3b0:	a311      	add	r3, pc, #68	; (adr r3, 800b3f8 <_strtod_l+0xbe8>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f5 fb91 	bl	8000adc <__aeabi_dcmplt>
 800b3ba:	e7b2      	b.n	800b322 <_strtod_l+0xb12>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	f7ff ba6b 	b.w	800a8a0 <_strtod_l+0x90>
 800b3ca:	2a65      	cmp	r2, #101	; 0x65
 800b3cc:	f43f ab5f 	beq.w	800aa8e <_strtod_l+0x27e>
 800b3d0:	2a45      	cmp	r2, #69	; 0x45
 800b3d2:	f43f ab5c 	beq.w	800aa8e <_strtod_l+0x27e>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	f7ff bb94 	b.w	800ab04 <_strtod_l+0x2f4>
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	94a03595 	.word	0x94a03595
 800b3e4:	3fdfffff 	.word	0x3fdfffff
 800b3e8:	35afe535 	.word	0x35afe535
 800b3ec:	3fe00000 	.word	0x3fe00000
 800b3f0:	ffc00000 	.word	0xffc00000
 800b3f4:	41dfffff 	.word	0x41dfffff
 800b3f8:	94a03595 	.word	0x94a03595
 800b3fc:	3fcfffff 	.word	0x3fcfffff
 800b400:	3ff00000 	.word	0x3ff00000
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	7fe00000 	.word	0x7fe00000
 800b40c:	7c9fffff 	.word	0x7c9fffff
 800b410:	3fe00000 	.word	0x3fe00000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	7fefffff 	.word	0x7fefffff

0800b41c <_strtod_r>:
 800b41c:	4b01      	ldr	r3, [pc, #4]	; (800b424 <_strtod_r+0x8>)
 800b41e:	f7ff b9f7 	b.w	800a810 <_strtod_l>
 800b422:	bf00      	nop
 800b424:	200000c8 	.word	0x200000c8

0800b428 <_strtol_l.constprop.0>:
 800b428:	2b01      	cmp	r3, #1
 800b42a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42e:	d001      	beq.n	800b434 <_strtol_l.constprop.0+0xc>
 800b430:	2b24      	cmp	r3, #36	; 0x24
 800b432:	d906      	bls.n	800b442 <_strtol_l.constprop.0+0x1a>
 800b434:	f7fe faaa 	bl	800998c <__errno>
 800b438:	2316      	movs	r3, #22
 800b43a:	6003      	str	r3, [r0, #0]
 800b43c:	2000      	movs	r0, #0
 800b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b442:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b528 <_strtol_l.constprop.0+0x100>
 800b446:	460d      	mov	r5, r1
 800b448:	462e      	mov	r6, r5
 800b44a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b44e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b452:	f017 0708 	ands.w	r7, r7, #8
 800b456:	d1f7      	bne.n	800b448 <_strtol_l.constprop.0+0x20>
 800b458:	2c2d      	cmp	r4, #45	; 0x2d
 800b45a:	d132      	bne.n	800b4c2 <_strtol_l.constprop.0+0x9a>
 800b45c:	782c      	ldrb	r4, [r5, #0]
 800b45e:	2701      	movs	r7, #1
 800b460:	1cb5      	adds	r5, r6, #2
 800b462:	2b00      	cmp	r3, #0
 800b464:	d05b      	beq.n	800b51e <_strtol_l.constprop.0+0xf6>
 800b466:	2b10      	cmp	r3, #16
 800b468:	d109      	bne.n	800b47e <_strtol_l.constprop.0+0x56>
 800b46a:	2c30      	cmp	r4, #48	; 0x30
 800b46c:	d107      	bne.n	800b47e <_strtol_l.constprop.0+0x56>
 800b46e:	782c      	ldrb	r4, [r5, #0]
 800b470:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b474:	2c58      	cmp	r4, #88	; 0x58
 800b476:	d14d      	bne.n	800b514 <_strtol_l.constprop.0+0xec>
 800b478:	786c      	ldrb	r4, [r5, #1]
 800b47a:	2310      	movs	r3, #16
 800b47c:	3502      	adds	r5, #2
 800b47e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b482:	f108 38ff 	add.w	r8, r8, #4294967295
 800b486:	f04f 0c00 	mov.w	ip, #0
 800b48a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b48e:	4666      	mov	r6, ip
 800b490:	fb03 8a19 	mls	sl, r3, r9, r8
 800b494:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b498:	f1be 0f09 	cmp.w	lr, #9
 800b49c:	d816      	bhi.n	800b4cc <_strtol_l.constprop.0+0xa4>
 800b49e:	4674      	mov	r4, lr
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	dd24      	ble.n	800b4ee <_strtol_l.constprop.0+0xc6>
 800b4a4:	f1bc 0f00 	cmp.w	ip, #0
 800b4a8:	db1e      	blt.n	800b4e8 <_strtol_l.constprop.0+0xc0>
 800b4aa:	45b1      	cmp	r9, r6
 800b4ac:	d31c      	bcc.n	800b4e8 <_strtol_l.constprop.0+0xc0>
 800b4ae:	d101      	bne.n	800b4b4 <_strtol_l.constprop.0+0x8c>
 800b4b0:	45a2      	cmp	sl, r4
 800b4b2:	db19      	blt.n	800b4e8 <_strtol_l.constprop.0+0xc0>
 800b4b4:	fb06 4603 	mla	r6, r6, r3, r4
 800b4b8:	f04f 0c01 	mov.w	ip, #1
 800b4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4c0:	e7e8      	b.n	800b494 <_strtol_l.constprop.0+0x6c>
 800b4c2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4c4:	bf04      	itt	eq
 800b4c6:	782c      	ldrbeq	r4, [r5, #0]
 800b4c8:	1cb5      	addeq	r5, r6, #2
 800b4ca:	e7ca      	b.n	800b462 <_strtol_l.constprop.0+0x3a>
 800b4cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b4d0:	f1be 0f19 	cmp.w	lr, #25
 800b4d4:	d801      	bhi.n	800b4da <_strtol_l.constprop.0+0xb2>
 800b4d6:	3c37      	subs	r4, #55	; 0x37
 800b4d8:	e7e2      	b.n	800b4a0 <_strtol_l.constprop.0+0x78>
 800b4da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b4de:	f1be 0f19 	cmp.w	lr, #25
 800b4e2:	d804      	bhi.n	800b4ee <_strtol_l.constprop.0+0xc6>
 800b4e4:	3c57      	subs	r4, #87	; 0x57
 800b4e6:	e7db      	b.n	800b4a0 <_strtol_l.constprop.0+0x78>
 800b4e8:	f04f 3cff 	mov.w	ip, #4294967295
 800b4ec:	e7e6      	b.n	800b4bc <_strtol_l.constprop.0+0x94>
 800b4ee:	f1bc 0f00 	cmp.w	ip, #0
 800b4f2:	da05      	bge.n	800b500 <_strtol_l.constprop.0+0xd8>
 800b4f4:	2322      	movs	r3, #34	; 0x22
 800b4f6:	6003      	str	r3, [r0, #0]
 800b4f8:	4646      	mov	r6, r8
 800b4fa:	b942      	cbnz	r2, 800b50e <_strtol_l.constprop.0+0xe6>
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	e79e      	b.n	800b43e <_strtol_l.constprop.0+0x16>
 800b500:	b107      	cbz	r7, 800b504 <_strtol_l.constprop.0+0xdc>
 800b502:	4276      	negs	r6, r6
 800b504:	2a00      	cmp	r2, #0
 800b506:	d0f9      	beq.n	800b4fc <_strtol_l.constprop.0+0xd4>
 800b508:	f1bc 0f00 	cmp.w	ip, #0
 800b50c:	d000      	beq.n	800b510 <_strtol_l.constprop.0+0xe8>
 800b50e:	1e69      	subs	r1, r5, #1
 800b510:	6011      	str	r1, [r2, #0]
 800b512:	e7f3      	b.n	800b4fc <_strtol_l.constprop.0+0xd4>
 800b514:	2430      	movs	r4, #48	; 0x30
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1b1      	bne.n	800b47e <_strtol_l.constprop.0+0x56>
 800b51a:	2308      	movs	r3, #8
 800b51c:	e7af      	b.n	800b47e <_strtol_l.constprop.0+0x56>
 800b51e:	2c30      	cmp	r4, #48	; 0x30
 800b520:	d0a5      	beq.n	800b46e <_strtol_l.constprop.0+0x46>
 800b522:	230a      	movs	r3, #10
 800b524:	e7ab      	b.n	800b47e <_strtol_l.constprop.0+0x56>
 800b526:	bf00      	nop
 800b528:	08020df1 	.word	0x08020df1

0800b52c <_strtol_r>:
 800b52c:	f7ff bf7c 	b.w	800b428 <_strtol_l.constprop.0>

0800b530 <strtol>:
 800b530:	4613      	mov	r3, r2
 800b532:	460a      	mov	r2, r1
 800b534:	4601      	mov	r1, r0
 800b536:	4802      	ldr	r0, [pc, #8]	; (800b540 <strtol+0x10>)
 800b538:	6800      	ldr	r0, [r0, #0]
 800b53a:	f7ff bf75 	b.w	800b428 <_strtol_l.constprop.0>
 800b53e:	bf00      	nop
 800b540:	20000060 	.word	0x20000060

0800b544 <quorem>:
 800b544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b548:	6903      	ldr	r3, [r0, #16]
 800b54a:	690c      	ldr	r4, [r1, #16]
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	4607      	mov	r7, r0
 800b550:	f2c0 8081 	blt.w	800b656 <quorem+0x112>
 800b554:	3c01      	subs	r4, #1
 800b556:	f101 0814 	add.w	r8, r1, #20
 800b55a:	f100 0514 	add.w	r5, r0, #20
 800b55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b568:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b56c:	3301      	adds	r3, #1
 800b56e:	429a      	cmp	r2, r3
 800b570:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b574:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b578:	fbb2 f6f3 	udiv	r6, r2, r3
 800b57c:	d331      	bcc.n	800b5e2 <quorem+0x9e>
 800b57e:	f04f 0e00 	mov.w	lr, #0
 800b582:	4640      	mov	r0, r8
 800b584:	46ac      	mov	ip, r5
 800b586:	46f2      	mov	sl, lr
 800b588:	f850 2b04 	ldr.w	r2, [r0], #4
 800b58c:	b293      	uxth	r3, r2
 800b58e:	fb06 e303 	mla	r3, r6, r3, lr
 800b592:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b596:	b29b      	uxth	r3, r3
 800b598:	ebaa 0303 	sub.w	r3, sl, r3
 800b59c:	f8dc a000 	ldr.w	sl, [ip]
 800b5a0:	0c12      	lsrs	r2, r2, #16
 800b5a2:	fa13 f38a 	uxtah	r3, r3, sl
 800b5a6:	fb06 e202 	mla	r2, r6, r2, lr
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5b2:	b292      	uxth	r2, r2
 800b5b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800b5c0:	4581      	cmp	r9, r0
 800b5c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5c6:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5ce:	d2db      	bcs.n	800b588 <quorem+0x44>
 800b5d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5d4:	b92b      	cbnz	r3, 800b5e2 <quorem+0x9e>
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	429d      	cmp	r5, r3
 800b5dc:	461a      	mov	r2, r3
 800b5de:	d32e      	bcc.n	800b63e <quorem+0xfa>
 800b5e0:	613c      	str	r4, [r7, #16]
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f001 fc84 	bl	800cef0 <__mcmp>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	db24      	blt.n	800b636 <quorem+0xf2>
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f04f 0c00 	mov.w	ip, #0
 800b5f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b5fc:	b293      	uxth	r3, r2
 800b5fe:	ebac 0303 	sub.w	r3, ip, r3
 800b602:	0c12      	lsrs	r2, r2, #16
 800b604:	fa13 f38e 	uxtah	r3, r3, lr
 800b608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b60c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b610:	b29b      	uxth	r3, r3
 800b612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b616:	45c1      	cmp	r9, r8
 800b618:	f840 3b04 	str.w	r3, [r0], #4
 800b61c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b620:	d2e8      	bcs.n	800b5f4 <quorem+0xb0>
 800b622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b62a:	b922      	cbnz	r2, 800b636 <quorem+0xf2>
 800b62c:	3b04      	subs	r3, #4
 800b62e:	429d      	cmp	r5, r3
 800b630:	461a      	mov	r2, r3
 800b632:	d30a      	bcc.n	800b64a <quorem+0x106>
 800b634:	613c      	str	r4, [r7, #16]
 800b636:	4630      	mov	r0, r6
 800b638:	b003      	add	sp, #12
 800b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	6812      	ldr	r2, [r2, #0]
 800b640:	3b04      	subs	r3, #4
 800b642:	2a00      	cmp	r2, #0
 800b644:	d1cc      	bne.n	800b5e0 <quorem+0x9c>
 800b646:	3c01      	subs	r4, #1
 800b648:	e7c7      	b.n	800b5da <quorem+0x96>
 800b64a:	6812      	ldr	r2, [r2, #0]
 800b64c:	3b04      	subs	r3, #4
 800b64e:	2a00      	cmp	r2, #0
 800b650:	d1f0      	bne.n	800b634 <quorem+0xf0>
 800b652:	3c01      	subs	r4, #1
 800b654:	e7eb      	b.n	800b62e <quorem+0xea>
 800b656:	2000      	movs	r0, #0
 800b658:	e7ee      	b.n	800b638 <quorem+0xf4>
 800b65a:	0000      	movs	r0, r0
 800b65c:	0000      	movs	r0, r0
	...

0800b660 <_dtoa_r>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	ed2d 8b04 	vpush	{d8-d9}
 800b668:	ec57 6b10 	vmov	r6, r7, d0
 800b66c:	b093      	sub	sp, #76	; 0x4c
 800b66e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b670:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b674:	9106      	str	r1, [sp, #24]
 800b676:	ee10 aa10 	vmov	sl, s0
 800b67a:	4604      	mov	r4, r0
 800b67c:	9209      	str	r2, [sp, #36]	; 0x24
 800b67e:	930c      	str	r3, [sp, #48]	; 0x30
 800b680:	46bb      	mov	fp, r7
 800b682:	b975      	cbnz	r5, 800b6a2 <_dtoa_r+0x42>
 800b684:	2010      	movs	r0, #16
 800b686:	f001 f94d 	bl	800c924 <malloc>
 800b68a:	4602      	mov	r2, r0
 800b68c:	6260      	str	r0, [r4, #36]	; 0x24
 800b68e:	b920      	cbnz	r0, 800b69a <_dtoa_r+0x3a>
 800b690:	4ba7      	ldr	r3, [pc, #668]	; (800b930 <_dtoa_r+0x2d0>)
 800b692:	21ea      	movs	r1, #234	; 0xea
 800b694:	48a7      	ldr	r0, [pc, #668]	; (800b934 <_dtoa_r+0x2d4>)
 800b696:	f002 f8ad 	bl	800d7f4 <__assert_func>
 800b69a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b69e:	6005      	str	r5, [r0, #0]
 800b6a0:	60c5      	str	r5, [r0, #12]
 800b6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a4:	6819      	ldr	r1, [r3, #0]
 800b6a6:	b151      	cbz	r1, 800b6be <_dtoa_r+0x5e>
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	604a      	str	r2, [r1, #4]
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4093      	lsls	r3, r2
 800b6b0:	608b      	str	r3, [r1, #8]
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f001 f990 	bl	800c9d8 <_Bfree>
 800b6b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	1e3b      	subs	r3, r7, #0
 800b6c0:	bfaa      	itet	ge
 800b6c2:	2300      	movge	r3, #0
 800b6c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b6c8:	f8c8 3000 	strge.w	r3, [r8]
 800b6cc:	4b9a      	ldr	r3, [pc, #616]	; (800b938 <_dtoa_r+0x2d8>)
 800b6ce:	bfbc      	itt	lt
 800b6d0:	2201      	movlt	r2, #1
 800b6d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b6d6:	ea33 030b 	bics.w	r3, r3, fp
 800b6da:	d11b      	bne.n	800b714 <_dtoa_r+0xb4>
 800b6dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6e8:	4333      	orrs	r3, r6
 800b6ea:	f000 8592 	beq.w	800c212 <_dtoa_r+0xbb2>
 800b6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6f0:	b963      	cbnz	r3, 800b70c <_dtoa_r+0xac>
 800b6f2:	4b92      	ldr	r3, [pc, #584]	; (800b93c <_dtoa_r+0x2dc>)
 800b6f4:	e022      	b.n	800b73c <_dtoa_r+0xdc>
 800b6f6:	4b92      	ldr	r3, [pc, #584]	; (800b940 <_dtoa_r+0x2e0>)
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6fe:	6013      	str	r3, [r2, #0]
 800b700:	9801      	ldr	r0, [sp, #4]
 800b702:	b013      	add	sp, #76	; 0x4c
 800b704:	ecbd 8b04 	vpop	{d8-d9}
 800b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70c:	4b8b      	ldr	r3, [pc, #556]	; (800b93c <_dtoa_r+0x2dc>)
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	3303      	adds	r3, #3
 800b712:	e7f3      	b.n	800b6fc <_dtoa_r+0x9c>
 800b714:	2200      	movs	r2, #0
 800b716:	2300      	movs	r3, #0
 800b718:	4650      	mov	r0, sl
 800b71a:	4659      	mov	r1, fp
 800b71c:	f7f5 f9d4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b720:	ec4b ab19 	vmov	d9, sl, fp
 800b724:	4680      	mov	r8, r0
 800b726:	b158      	cbz	r0, 800b740 <_dtoa_r+0xe0>
 800b728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b72a:	2301      	movs	r3, #1
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 856b 	beq.w	800c20c <_dtoa_r+0xbac>
 800b736:	4883      	ldr	r0, [pc, #524]	; (800b944 <_dtoa_r+0x2e4>)
 800b738:	6018      	str	r0, [r3, #0]
 800b73a:	1e43      	subs	r3, r0, #1
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	e7df      	b.n	800b700 <_dtoa_r+0xa0>
 800b740:	ec4b ab10 	vmov	d0, sl, fp
 800b744:	aa10      	add	r2, sp, #64	; 0x40
 800b746:	a911      	add	r1, sp, #68	; 0x44
 800b748:	4620      	mov	r0, r4
 800b74a:	f001 fcf3 	bl	800d134 <__d2b>
 800b74e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b752:	ee08 0a10 	vmov	s16, r0
 800b756:	2d00      	cmp	r5, #0
 800b758:	f000 8084 	beq.w	800b864 <_dtoa_r+0x204>
 800b75c:	ee19 3a90 	vmov	r3, s19
 800b760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b764:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b768:	4656      	mov	r6, sl
 800b76a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b76e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b772:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b776:	4b74      	ldr	r3, [pc, #464]	; (800b948 <_dtoa_r+0x2e8>)
 800b778:	2200      	movs	r2, #0
 800b77a:	4630      	mov	r0, r6
 800b77c:	4639      	mov	r1, r7
 800b77e:	f7f4 fd83 	bl	8000288 <__aeabi_dsub>
 800b782:	a365      	add	r3, pc, #404	; (adr r3, 800b918 <_dtoa_r+0x2b8>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f7f4 ff36 	bl	80005f8 <__aeabi_dmul>
 800b78c:	a364      	add	r3, pc, #400	; (adr r3, 800b920 <_dtoa_r+0x2c0>)
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	f7f4 fd7b 	bl	800028c <__adddf3>
 800b796:	4606      	mov	r6, r0
 800b798:	4628      	mov	r0, r5
 800b79a:	460f      	mov	r7, r1
 800b79c:	f7f4 fec2 	bl	8000524 <__aeabi_i2d>
 800b7a0:	a361      	add	r3, pc, #388	; (adr r3, 800b928 <_dtoa_r+0x2c8>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 ff27 	bl	80005f8 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 fd6b 	bl	800028c <__adddf3>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	460f      	mov	r7, r1
 800b7ba:	f7f5 f9cd 	bl	8000b58 <__aeabi_d2iz>
 800b7be:	2200      	movs	r2, #0
 800b7c0:	9000      	str	r0, [sp, #0]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	f7f5 f988 	bl	8000adc <__aeabi_dcmplt>
 800b7cc:	b150      	cbz	r0, 800b7e4 <_dtoa_r+0x184>
 800b7ce:	9800      	ldr	r0, [sp, #0]
 800b7d0:	f7f4 fea8 	bl	8000524 <__aeabi_i2d>
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	f7f5 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7dc:	b910      	cbnz	r0, 800b7e4 <_dtoa_r+0x184>
 800b7de:	9b00      	ldr	r3, [sp, #0]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	9b00      	ldr	r3, [sp, #0]
 800b7e6:	2b16      	cmp	r3, #22
 800b7e8:	d85a      	bhi.n	800b8a0 <_dtoa_r+0x240>
 800b7ea:	9a00      	ldr	r2, [sp, #0]
 800b7ec:	4b57      	ldr	r3, [pc, #348]	; (800b94c <_dtoa_r+0x2ec>)
 800b7ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	ec51 0b19 	vmov	r0, r1, d9
 800b7fa:	f7f5 f96f 	bl	8000adc <__aeabi_dcmplt>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d050      	beq.n	800b8a4 <_dtoa_r+0x244>
 800b802:	9b00      	ldr	r3, [sp, #0]
 800b804:	3b01      	subs	r3, #1
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	2300      	movs	r3, #0
 800b80a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b80e:	1b5d      	subs	r5, r3, r5
 800b810:	1e6b      	subs	r3, r5, #1
 800b812:	9305      	str	r3, [sp, #20]
 800b814:	bf45      	ittet	mi
 800b816:	f1c5 0301 	rsbmi	r3, r5, #1
 800b81a:	9304      	strmi	r3, [sp, #16]
 800b81c:	2300      	movpl	r3, #0
 800b81e:	2300      	movmi	r3, #0
 800b820:	bf4c      	ite	mi
 800b822:	9305      	strmi	r3, [sp, #20]
 800b824:	9304      	strpl	r3, [sp, #16]
 800b826:	9b00      	ldr	r3, [sp, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	db3d      	blt.n	800b8a8 <_dtoa_r+0x248>
 800b82c:	9b05      	ldr	r3, [sp, #20]
 800b82e:	9a00      	ldr	r2, [sp, #0]
 800b830:	920a      	str	r2, [sp, #40]	; 0x28
 800b832:	4413      	add	r3, r2
 800b834:	9305      	str	r3, [sp, #20]
 800b836:	2300      	movs	r3, #0
 800b838:	9307      	str	r3, [sp, #28]
 800b83a:	9b06      	ldr	r3, [sp, #24]
 800b83c:	2b09      	cmp	r3, #9
 800b83e:	f200 8089 	bhi.w	800b954 <_dtoa_r+0x2f4>
 800b842:	2b05      	cmp	r3, #5
 800b844:	bfc4      	itt	gt
 800b846:	3b04      	subgt	r3, #4
 800b848:	9306      	strgt	r3, [sp, #24]
 800b84a:	9b06      	ldr	r3, [sp, #24]
 800b84c:	f1a3 0302 	sub.w	r3, r3, #2
 800b850:	bfcc      	ite	gt
 800b852:	2500      	movgt	r5, #0
 800b854:	2501      	movle	r5, #1
 800b856:	2b03      	cmp	r3, #3
 800b858:	f200 8087 	bhi.w	800b96a <_dtoa_r+0x30a>
 800b85c:	e8df f003 	tbb	[pc, r3]
 800b860:	59383a2d 	.word	0x59383a2d
 800b864:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b868:	441d      	add	r5, r3
 800b86a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b86e:	2b20      	cmp	r3, #32
 800b870:	bfc1      	itttt	gt
 800b872:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b876:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b87a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b87e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b882:	bfda      	itte	le
 800b884:	f1c3 0320 	rsble	r3, r3, #32
 800b888:	fa06 f003 	lslle.w	r0, r6, r3
 800b88c:	4318      	orrgt	r0, r3
 800b88e:	f7f4 fe39 	bl	8000504 <__aeabi_ui2d>
 800b892:	2301      	movs	r3, #1
 800b894:	4606      	mov	r6, r0
 800b896:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b89a:	3d01      	subs	r5, #1
 800b89c:	930e      	str	r3, [sp, #56]	; 0x38
 800b89e:	e76a      	b.n	800b776 <_dtoa_r+0x116>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e7b2      	b.n	800b80a <_dtoa_r+0x1aa>
 800b8a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8a6:	e7b1      	b.n	800b80c <_dtoa_r+0x1ac>
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	9a00      	ldr	r2, [sp, #0]
 800b8ac:	1a9b      	subs	r3, r3, r2
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	4253      	negs	r3, r2
 800b8b2:	9307      	str	r3, [sp, #28]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b8:	e7bf      	b.n	800b83a <_dtoa_r+0x1da>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9308      	str	r3, [sp, #32]
 800b8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	dc55      	bgt.n	800b970 <_dtoa_r+0x310>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ce:	e00c      	b.n	800b8ea <_dtoa_r+0x28a>
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e7f3      	b.n	800b8bc <_dtoa_r+0x25c>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8d8:	9308      	str	r3, [sp, #32]
 800b8da:	9b00      	ldr	r3, [sp, #0]
 800b8dc:	4413      	add	r3, r2
 800b8de:	9302      	str	r3, [sp, #8]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	bfb8      	it	lt
 800b8e8:	2301      	movlt	r3, #1
 800b8ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	6042      	str	r2, [r0, #4]
 800b8f0:	2204      	movs	r2, #4
 800b8f2:	f102 0614 	add.w	r6, r2, #20
 800b8f6:	429e      	cmp	r6, r3
 800b8f8:	6841      	ldr	r1, [r0, #4]
 800b8fa:	d93d      	bls.n	800b978 <_dtoa_r+0x318>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f001 f82b 	bl	800c958 <_Balloc>
 800b902:	9001      	str	r0, [sp, #4]
 800b904:	2800      	cmp	r0, #0
 800b906:	d13b      	bne.n	800b980 <_dtoa_r+0x320>
 800b908:	4b11      	ldr	r3, [pc, #68]	; (800b950 <_dtoa_r+0x2f0>)
 800b90a:	4602      	mov	r2, r0
 800b90c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b910:	e6c0      	b.n	800b694 <_dtoa_r+0x34>
 800b912:	2301      	movs	r3, #1
 800b914:	e7df      	b.n	800b8d6 <_dtoa_r+0x276>
 800b916:	bf00      	nop
 800b918:	636f4361 	.word	0x636f4361
 800b91c:	3fd287a7 	.word	0x3fd287a7
 800b920:	8b60c8b3 	.word	0x8b60c8b3
 800b924:	3fc68a28 	.word	0x3fc68a28
 800b928:	509f79fb 	.word	0x509f79fb
 800b92c:	3fd34413 	.word	0x3fd34413
 800b930:	08020efe 	.word	0x08020efe
 800b934:	08020f15 	.word	0x08020f15
 800b938:	7ff00000 	.word	0x7ff00000
 800b93c:	08020efa 	.word	0x08020efa
 800b940:	08020ef1 	.word	0x08020ef1
 800b944:	08020d75 	.word	0x08020d75
 800b948:	3ff80000 	.word	0x3ff80000
 800b94c:	08021080 	.word	0x08021080
 800b950:	08020f70 	.word	0x08020f70
 800b954:	2501      	movs	r5, #1
 800b956:	2300      	movs	r3, #0
 800b958:	9306      	str	r3, [sp, #24]
 800b95a:	9508      	str	r5, [sp, #32]
 800b95c:	f04f 33ff 	mov.w	r3, #4294967295
 800b960:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b964:	2200      	movs	r2, #0
 800b966:	2312      	movs	r3, #18
 800b968:	e7b0      	b.n	800b8cc <_dtoa_r+0x26c>
 800b96a:	2301      	movs	r3, #1
 800b96c:	9308      	str	r3, [sp, #32]
 800b96e:	e7f5      	b.n	800b95c <_dtoa_r+0x2fc>
 800b970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b972:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b976:	e7b8      	b.n	800b8ea <_dtoa_r+0x28a>
 800b978:	3101      	adds	r1, #1
 800b97a:	6041      	str	r1, [r0, #4]
 800b97c:	0052      	lsls	r2, r2, #1
 800b97e:	e7b8      	b.n	800b8f2 <_dtoa_r+0x292>
 800b980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b982:	9a01      	ldr	r2, [sp, #4]
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	9b03      	ldr	r3, [sp, #12]
 800b988:	2b0e      	cmp	r3, #14
 800b98a:	f200 809d 	bhi.w	800bac8 <_dtoa_r+0x468>
 800b98e:	2d00      	cmp	r5, #0
 800b990:	f000 809a 	beq.w	800bac8 <_dtoa_r+0x468>
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd32      	ble.n	800ba00 <_dtoa_r+0x3a0>
 800b99a:	4ab7      	ldr	r2, [pc, #732]	; (800bc78 <_dtoa_r+0x618>)
 800b99c:	f003 030f 	and.w	r3, r3, #15
 800b9a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9a8:	9b00      	ldr	r3, [sp, #0]
 800b9aa:	05d8      	lsls	r0, r3, #23
 800b9ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b9b0:	d516      	bpl.n	800b9e0 <_dtoa_r+0x380>
 800b9b2:	4bb2      	ldr	r3, [pc, #712]	; (800bc7c <_dtoa_r+0x61c>)
 800b9b4:	ec51 0b19 	vmov	r0, r1, d9
 800b9b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9bc:	f7f4 ff46 	bl	800084c <__aeabi_ddiv>
 800b9c0:	f007 070f 	and.w	r7, r7, #15
 800b9c4:	4682      	mov	sl, r0
 800b9c6:	468b      	mov	fp, r1
 800b9c8:	2503      	movs	r5, #3
 800b9ca:	4eac      	ldr	r6, [pc, #688]	; (800bc7c <_dtoa_r+0x61c>)
 800b9cc:	b957      	cbnz	r7, 800b9e4 <_dtoa_r+0x384>
 800b9ce:	4642      	mov	r2, r8
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	4650      	mov	r0, sl
 800b9d4:	4659      	mov	r1, fp
 800b9d6:	f7f4 ff39 	bl	800084c <__aeabi_ddiv>
 800b9da:	4682      	mov	sl, r0
 800b9dc:	468b      	mov	fp, r1
 800b9de:	e028      	b.n	800ba32 <_dtoa_r+0x3d2>
 800b9e0:	2502      	movs	r5, #2
 800b9e2:	e7f2      	b.n	800b9ca <_dtoa_r+0x36a>
 800b9e4:	07f9      	lsls	r1, r7, #31
 800b9e6:	d508      	bpl.n	800b9fa <_dtoa_r+0x39a>
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9f0:	f7f4 fe02 	bl	80005f8 <__aeabi_dmul>
 800b9f4:	3501      	adds	r5, #1
 800b9f6:	4680      	mov	r8, r0
 800b9f8:	4689      	mov	r9, r1
 800b9fa:	107f      	asrs	r7, r7, #1
 800b9fc:	3608      	adds	r6, #8
 800b9fe:	e7e5      	b.n	800b9cc <_dtoa_r+0x36c>
 800ba00:	f000 809b 	beq.w	800bb3a <_dtoa_r+0x4da>
 800ba04:	9b00      	ldr	r3, [sp, #0]
 800ba06:	4f9d      	ldr	r7, [pc, #628]	; (800bc7c <_dtoa_r+0x61c>)
 800ba08:	425e      	negs	r6, r3
 800ba0a:	4b9b      	ldr	r3, [pc, #620]	; (800bc78 <_dtoa_r+0x618>)
 800ba0c:	f006 020f 	and.w	r2, r6, #15
 800ba10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	ec51 0b19 	vmov	r0, r1, d9
 800ba1c:	f7f4 fdec 	bl	80005f8 <__aeabi_dmul>
 800ba20:	1136      	asrs	r6, r6, #4
 800ba22:	4682      	mov	sl, r0
 800ba24:	468b      	mov	fp, r1
 800ba26:	2300      	movs	r3, #0
 800ba28:	2502      	movs	r5, #2
 800ba2a:	2e00      	cmp	r6, #0
 800ba2c:	d17a      	bne.n	800bb24 <_dtoa_r+0x4c4>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1d3      	bne.n	800b9da <_dtoa_r+0x37a>
 800ba32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 8082 	beq.w	800bb3e <_dtoa_r+0x4de>
 800ba3a:	4b91      	ldr	r3, [pc, #580]	; (800bc80 <_dtoa_r+0x620>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4650      	mov	r0, sl
 800ba40:	4659      	mov	r1, fp
 800ba42:	f7f5 f84b 	bl	8000adc <__aeabi_dcmplt>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d079      	beq.n	800bb3e <_dtoa_r+0x4de>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d076      	beq.n	800bb3e <_dtoa_r+0x4de>
 800ba50:	9b02      	ldr	r3, [sp, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dd36      	ble.n	800bac4 <_dtoa_r+0x464>
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	4650      	mov	r0, sl
 800ba5a:	4659      	mov	r1, fp
 800ba5c:	1e5f      	subs	r7, r3, #1
 800ba5e:	2200      	movs	r2, #0
 800ba60:	4b88      	ldr	r3, [pc, #544]	; (800bc84 <_dtoa_r+0x624>)
 800ba62:	f7f4 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ba66:	9e02      	ldr	r6, [sp, #8]
 800ba68:	4682      	mov	sl, r0
 800ba6a:	468b      	mov	fp, r1
 800ba6c:	3501      	adds	r5, #1
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f7f4 fd58 	bl	8000524 <__aeabi_i2d>
 800ba74:	4652      	mov	r2, sl
 800ba76:	465b      	mov	r3, fp
 800ba78:	f7f4 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ba7c:	4b82      	ldr	r3, [pc, #520]	; (800bc88 <_dtoa_r+0x628>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f7f4 fc04 	bl	800028c <__adddf3>
 800ba84:	46d0      	mov	r8, sl
 800ba86:	46d9      	mov	r9, fp
 800ba88:	4682      	mov	sl, r0
 800ba8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	d158      	bne.n	800bb44 <_dtoa_r+0x4e4>
 800ba92:	4b7e      	ldr	r3, [pc, #504]	; (800bc8c <_dtoa_r+0x62c>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f4 fbf5 	bl	8000288 <__aeabi_dsub>
 800ba9e:	4652      	mov	r2, sl
 800baa0:	465b      	mov	r3, fp
 800baa2:	4680      	mov	r8, r0
 800baa4:	4689      	mov	r9, r1
 800baa6:	f7f5 f837 	bl	8000b18 <__aeabi_dcmpgt>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f040 8295 	bne.w	800bfda <_dtoa_r+0x97a>
 800bab0:	4652      	mov	r2, sl
 800bab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bab6:	4640      	mov	r0, r8
 800bab8:	4649      	mov	r1, r9
 800baba:	f7f5 f80f 	bl	8000adc <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	f040 8289 	bne.w	800bfd6 <_dtoa_r+0x976>
 800bac4:	ec5b ab19 	vmov	sl, fp, d9
 800bac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f2c0 8148 	blt.w	800bd60 <_dtoa_r+0x700>
 800bad0:	9a00      	ldr	r2, [sp, #0]
 800bad2:	2a0e      	cmp	r2, #14
 800bad4:	f300 8144 	bgt.w	800bd60 <_dtoa_r+0x700>
 800bad8:	4b67      	ldr	r3, [pc, #412]	; (800bc78 <_dtoa_r+0x618>)
 800bada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bade:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f280 80d5 	bge.w	800bc94 <_dtoa_r+0x634>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f300 80d1 	bgt.w	800bc94 <_dtoa_r+0x634>
 800baf2:	f040 826f 	bne.w	800bfd4 <_dtoa_r+0x974>
 800baf6:	4b65      	ldr	r3, [pc, #404]	; (800bc8c <_dtoa_r+0x62c>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	4640      	mov	r0, r8
 800bafc:	4649      	mov	r1, r9
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	4652      	mov	r2, sl
 800bb04:	465b      	mov	r3, fp
 800bb06:	f7f4 fffd 	bl	8000b04 <__aeabi_dcmpge>
 800bb0a:	9e03      	ldr	r6, [sp, #12]
 800bb0c:	4637      	mov	r7, r6
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f040 8245 	bne.w	800bf9e <_dtoa_r+0x93e>
 800bb14:	9d01      	ldr	r5, [sp, #4]
 800bb16:	2331      	movs	r3, #49	; 0x31
 800bb18:	f805 3b01 	strb.w	r3, [r5], #1
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	e240      	b.n	800bfa6 <_dtoa_r+0x946>
 800bb24:	07f2      	lsls	r2, r6, #31
 800bb26:	d505      	bpl.n	800bb34 <_dtoa_r+0x4d4>
 800bb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb2c:	f7f4 fd64 	bl	80005f8 <__aeabi_dmul>
 800bb30:	3501      	adds	r5, #1
 800bb32:	2301      	movs	r3, #1
 800bb34:	1076      	asrs	r6, r6, #1
 800bb36:	3708      	adds	r7, #8
 800bb38:	e777      	b.n	800ba2a <_dtoa_r+0x3ca>
 800bb3a:	2502      	movs	r5, #2
 800bb3c:	e779      	b.n	800ba32 <_dtoa_r+0x3d2>
 800bb3e:	9f00      	ldr	r7, [sp, #0]
 800bb40:	9e03      	ldr	r6, [sp, #12]
 800bb42:	e794      	b.n	800ba6e <_dtoa_r+0x40e>
 800bb44:	9901      	ldr	r1, [sp, #4]
 800bb46:	4b4c      	ldr	r3, [pc, #304]	; (800bc78 <_dtoa_r+0x618>)
 800bb48:	4431      	add	r1, r6
 800bb4a:	910d      	str	r1, [sp, #52]	; 0x34
 800bb4c:	9908      	ldr	r1, [sp, #32]
 800bb4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb56:	2900      	cmp	r1, #0
 800bb58:	d043      	beq.n	800bbe2 <_dtoa_r+0x582>
 800bb5a:	494d      	ldr	r1, [pc, #308]	; (800bc90 <_dtoa_r+0x630>)
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f7f4 fe75 	bl	800084c <__aeabi_ddiv>
 800bb62:	4652      	mov	r2, sl
 800bb64:	465b      	mov	r3, fp
 800bb66:	f7f4 fb8f 	bl	8000288 <__aeabi_dsub>
 800bb6a:	9d01      	ldr	r5, [sp, #4]
 800bb6c:	4682      	mov	sl, r0
 800bb6e:	468b      	mov	fp, r1
 800bb70:	4649      	mov	r1, r9
 800bb72:	4640      	mov	r0, r8
 800bb74:	f7f4 fff0 	bl	8000b58 <__aeabi_d2iz>
 800bb78:	4606      	mov	r6, r0
 800bb7a:	f7f4 fcd3 	bl	8000524 <__aeabi_i2d>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f7f4 fb7f 	bl	8000288 <__aeabi_dsub>
 800bb8a:	3630      	adds	r6, #48	; 0x30
 800bb8c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb90:	4652      	mov	r2, sl
 800bb92:	465b      	mov	r3, fp
 800bb94:	4680      	mov	r8, r0
 800bb96:	4689      	mov	r9, r1
 800bb98:	f7f4 ffa0 	bl	8000adc <__aeabi_dcmplt>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d163      	bne.n	800bc68 <_dtoa_r+0x608>
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	4936      	ldr	r1, [pc, #216]	; (800bc80 <_dtoa_r+0x620>)
 800bba6:	2000      	movs	r0, #0
 800bba8:	f7f4 fb6e 	bl	8000288 <__aeabi_dsub>
 800bbac:	4652      	mov	r2, sl
 800bbae:	465b      	mov	r3, fp
 800bbb0:	f7f4 ff94 	bl	8000adc <__aeabi_dcmplt>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	f040 80b5 	bne.w	800bd24 <_dtoa_r+0x6c4>
 800bbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbbc:	429d      	cmp	r5, r3
 800bbbe:	d081      	beq.n	800bac4 <_dtoa_r+0x464>
 800bbc0:	4b30      	ldr	r3, [pc, #192]	; (800bc84 <_dtoa_r+0x624>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	4650      	mov	r0, sl
 800bbc6:	4659      	mov	r1, fp
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	4b2d      	ldr	r3, [pc, #180]	; (800bc84 <_dtoa_r+0x624>)
 800bbce:	4682      	mov	sl, r0
 800bbd0:	468b      	mov	fp, r1
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f7f4 fd0e 	bl	80005f8 <__aeabi_dmul>
 800bbdc:	4680      	mov	r8, r0
 800bbde:	4689      	mov	r9, r1
 800bbe0:	e7c6      	b.n	800bb70 <_dtoa_r+0x510>
 800bbe2:	4650      	mov	r0, sl
 800bbe4:	4659      	mov	r1, fp
 800bbe6:	f7f4 fd07 	bl	80005f8 <__aeabi_dmul>
 800bbea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbec:	9d01      	ldr	r5, [sp, #4]
 800bbee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	468b      	mov	fp, r1
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	f7f4 ffae 	bl	8000b58 <__aeabi_d2iz>
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	f7f4 fc91 	bl	8000524 <__aeabi_i2d>
 800bc02:	3630      	adds	r6, #48	; 0x30
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4640      	mov	r0, r8
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	f7f4 fb3c 	bl	8000288 <__aeabi_dsub>
 800bc10:	f805 6b01 	strb.w	r6, [r5], #1
 800bc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc16:	429d      	cmp	r5, r3
 800bc18:	4680      	mov	r8, r0
 800bc1a:	4689      	mov	r9, r1
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	d124      	bne.n	800bc6c <_dtoa_r+0x60c>
 800bc22:	4b1b      	ldr	r3, [pc, #108]	; (800bc90 <_dtoa_r+0x630>)
 800bc24:	4650      	mov	r0, sl
 800bc26:	4659      	mov	r1, fp
 800bc28:	f7f4 fb30 	bl	800028c <__adddf3>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 ff70 	bl	8000b18 <__aeabi_dcmpgt>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d173      	bne.n	800bd24 <_dtoa_r+0x6c4>
 800bc3c:	4652      	mov	r2, sl
 800bc3e:	465b      	mov	r3, fp
 800bc40:	4913      	ldr	r1, [pc, #76]	; (800bc90 <_dtoa_r+0x630>)
 800bc42:	2000      	movs	r0, #0
 800bc44:	f7f4 fb20 	bl	8000288 <__aeabi_dsub>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	4649      	mov	r1, r9
 800bc50:	f7f4 ff44 	bl	8000adc <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f43f af35 	beq.w	800bac4 <_dtoa_r+0x464>
 800bc5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc5c:	1e6b      	subs	r3, r5, #1
 800bc5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc64:	2b30      	cmp	r3, #48	; 0x30
 800bc66:	d0f8      	beq.n	800bc5a <_dtoa_r+0x5fa>
 800bc68:	9700      	str	r7, [sp, #0]
 800bc6a:	e049      	b.n	800bd00 <_dtoa_r+0x6a0>
 800bc6c:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <_dtoa_r+0x624>)
 800bc6e:	f7f4 fcc3 	bl	80005f8 <__aeabi_dmul>
 800bc72:	4680      	mov	r8, r0
 800bc74:	4689      	mov	r9, r1
 800bc76:	e7bd      	b.n	800bbf4 <_dtoa_r+0x594>
 800bc78:	08021080 	.word	0x08021080
 800bc7c:	08021058 	.word	0x08021058
 800bc80:	3ff00000 	.word	0x3ff00000
 800bc84:	40240000 	.word	0x40240000
 800bc88:	401c0000 	.word	0x401c0000
 800bc8c:	40140000 	.word	0x40140000
 800bc90:	3fe00000 	.word	0x3fe00000
 800bc94:	9d01      	ldr	r5, [sp, #4]
 800bc96:	4656      	mov	r6, sl
 800bc98:	465f      	mov	r7, fp
 800bc9a:	4642      	mov	r2, r8
 800bc9c:	464b      	mov	r3, r9
 800bc9e:	4630      	mov	r0, r6
 800bca0:	4639      	mov	r1, r7
 800bca2:	f7f4 fdd3 	bl	800084c <__aeabi_ddiv>
 800bca6:	f7f4 ff57 	bl	8000b58 <__aeabi_d2iz>
 800bcaa:	4682      	mov	sl, r0
 800bcac:	f7f4 fc3a 	bl	8000524 <__aeabi_i2d>
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bcc4:	f7f4 fae0 	bl	8000288 <__aeabi_dsub>
 800bcc8:	f805 6b01 	strb.w	r6, [r5], #1
 800bccc:	9e01      	ldr	r6, [sp, #4]
 800bcce:	9f03      	ldr	r7, [sp, #12]
 800bcd0:	1bae      	subs	r6, r5, r6
 800bcd2:	42b7      	cmp	r7, r6
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	d135      	bne.n	800bd46 <_dtoa_r+0x6e6>
 800bcda:	f7f4 fad7 	bl	800028c <__adddf3>
 800bcde:	4642      	mov	r2, r8
 800bce0:	464b      	mov	r3, r9
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	f7f4 ff17 	bl	8000b18 <__aeabi_dcmpgt>
 800bcea:	b9d0      	cbnz	r0, 800bd22 <_dtoa_r+0x6c2>
 800bcec:	4642      	mov	r2, r8
 800bcee:	464b      	mov	r3, r9
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f7f4 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf8:	b110      	cbz	r0, 800bd00 <_dtoa_r+0x6a0>
 800bcfa:	f01a 0f01 	tst.w	sl, #1
 800bcfe:	d110      	bne.n	800bd22 <_dtoa_r+0x6c2>
 800bd00:	4620      	mov	r0, r4
 800bd02:	ee18 1a10 	vmov	r1, s16
 800bd06:	f000 fe67 	bl	800c9d8 <_Bfree>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9800      	ldr	r0, [sp, #0]
 800bd0e:	702b      	strb	r3, [r5, #0]
 800bd10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd12:	3001      	adds	r0, #1
 800bd14:	6018      	str	r0, [r3, #0]
 800bd16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f43f acf1 	beq.w	800b700 <_dtoa_r+0xa0>
 800bd1e:	601d      	str	r5, [r3, #0]
 800bd20:	e4ee      	b.n	800b700 <_dtoa_r+0xa0>
 800bd22:	9f00      	ldr	r7, [sp, #0]
 800bd24:	462b      	mov	r3, r5
 800bd26:	461d      	mov	r5, r3
 800bd28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd2c:	2a39      	cmp	r2, #57	; 0x39
 800bd2e:	d106      	bne.n	800bd3e <_dtoa_r+0x6de>
 800bd30:	9a01      	ldr	r2, [sp, #4]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d1f7      	bne.n	800bd26 <_dtoa_r+0x6c6>
 800bd36:	9901      	ldr	r1, [sp, #4]
 800bd38:	2230      	movs	r2, #48	; 0x30
 800bd3a:	3701      	adds	r7, #1
 800bd3c:	700a      	strb	r2, [r1, #0]
 800bd3e:	781a      	ldrb	r2, [r3, #0]
 800bd40:	3201      	adds	r2, #1
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	e790      	b.n	800bc68 <_dtoa_r+0x608>
 800bd46:	4ba6      	ldr	r3, [pc, #664]	; (800bfe0 <_dtoa_r+0x980>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f7f4 fc55 	bl	80005f8 <__aeabi_dmul>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
 800bd52:	4606      	mov	r6, r0
 800bd54:	460f      	mov	r7, r1
 800bd56:	f7f4 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d09d      	beq.n	800bc9a <_dtoa_r+0x63a>
 800bd5e:	e7cf      	b.n	800bd00 <_dtoa_r+0x6a0>
 800bd60:	9a08      	ldr	r2, [sp, #32]
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	f000 80d7 	beq.w	800bf16 <_dtoa_r+0x8b6>
 800bd68:	9a06      	ldr	r2, [sp, #24]
 800bd6a:	2a01      	cmp	r2, #1
 800bd6c:	f300 80ba 	bgt.w	800bee4 <_dtoa_r+0x884>
 800bd70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	f000 80b2 	beq.w	800bedc <_dtoa_r+0x87c>
 800bd78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd7c:	9e07      	ldr	r6, [sp, #28]
 800bd7e:	9d04      	ldr	r5, [sp, #16]
 800bd80:	9a04      	ldr	r2, [sp, #16]
 800bd82:	441a      	add	r2, r3
 800bd84:	9204      	str	r2, [sp, #16]
 800bd86:	9a05      	ldr	r2, [sp, #20]
 800bd88:	2101      	movs	r1, #1
 800bd8a:	441a      	add	r2, r3
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	9205      	str	r2, [sp, #20]
 800bd90:	f000 ff24 	bl	800cbdc <__i2b>
 800bd94:	4607      	mov	r7, r0
 800bd96:	2d00      	cmp	r5, #0
 800bd98:	dd0c      	ble.n	800bdb4 <_dtoa_r+0x754>
 800bd9a:	9b05      	ldr	r3, [sp, #20]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	dd09      	ble.n	800bdb4 <_dtoa_r+0x754>
 800bda0:	42ab      	cmp	r3, r5
 800bda2:	9a04      	ldr	r2, [sp, #16]
 800bda4:	bfa8      	it	ge
 800bda6:	462b      	movge	r3, r5
 800bda8:	1ad2      	subs	r2, r2, r3
 800bdaa:	9204      	str	r2, [sp, #16]
 800bdac:	9a05      	ldr	r2, [sp, #20]
 800bdae:	1aed      	subs	r5, r5, r3
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	9b07      	ldr	r3, [sp, #28]
 800bdb6:	b31b      	cbz	r3, 800be00 <_dtoa_r+0x7a0>
 800bdb8:	9b08      	ldr	r3, [sp, #32]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 80af 	beq.w	800bf1e <_dtoa_r+0x8be>
 800bdc0:	2e00      	cmp	r6, #0
 800bdc2:	dd13      	ble.n	800bdec <_dtoa_r+0x78c>
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 ffc7 	bl	800cd5c <__pow5mult>
 800bdce:	ee18 2a10 	vmov	r2, s16
 800bdd2:	4601      	mov	r1, r0
 800bdd4:	4607      	mov	r7, r0
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f000 ff16 	bl	800cc08 <__multiply>
 800bddc:	ee18 1a10 	vmov	r1, s16
 800bde0:	4680      	mov	r8, r0
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 fdf8 	bl	800c9d8 <_Bfree>
 800bde8:	ee08 8a10 	vmov	s16, r8
 800bdec:	9b07      	ldr	r3, [sp, #28]
 800bdee:	1b9a      	subs	r2, r3, r6
 800bdf0:	d006      	beq.n	800be00 <_dtoa_r+0x7a0>
 800bdf2:	ee18 1a10 	vmov	r1, s16
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 ffb0 	bl	800cd5c <__pow5mult>
 800bdfc:	ee08 0a10 	vmov	s16, r0
 800be00:	2101      	movs	r1, #1
 800be02:	4620      	mov	r0, r4
 800be04:	f000 feea 	bl	800cbdc <__i2b>
 800be08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	4606      	mov	r6, r0
 800be0e:	f340 8088 	ble.w	800bf22 <_dtoa_r+0x8c2>
 800be12:	461a      	mov	r2, r3
 800be14:	4601      	mov	r1, r0
 800be16:	4620      	mov	r0, r4
 800be18:	f000 ffa0 	bl	800cd5c <__pow5mult>
 800be1c:	9b06      	ldr	r3, [sp, #24]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	4606      	mov	r6, r0
 800be22:	f340 8081 	ble.w	800bf28 <_dtoa_r+0x8c8>
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	6933      	ldr	r3, [r6, #16]
 800be2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be30:	6918      	ldr	r0, [r3, #16]
 800be32:	f000 fe83 	bl	800cb3c <__hi0bits>
 800be36:	f1c0 0020 	rsb	r0, r0, #32
 800be3a:	9b05      	ldr	r3, [sp, #20]
 800be3c:	4418      	add	r0, r3
 800be3e:	f010 001f 	ands.w	r0, r0, #31
 800be42:	f000 8092 	beq.w	800bf6a <_dtoa_r+0x90a>
 800be46:	f1c0 0320 	rsb	r3, r0, #32
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	f340 808a 	ble.w	800bf64 <_dtoa_r+0x904>
 800be50:	f1c0 001c 	rsb	r0, r0, #28
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	4403      	add	r3, r0
 800be58:	9304      	str	r3, [sp, #16]
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	4403      	add	r3, r0
 800be5e:	4405      	add	r5, r0
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	9b04      	ldr	r3, [sp, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dd07      	ble.n	800be78 <_dtoa_r+0x818>
 800be68:	ee18 1a10 	vmov	r1, s16
 800be6c:	461a      	mov	r2, r3
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 ffce 	bl	800ce10 <__lshift>
 800be74:	ee08 0a10 	vmov	s16, r0
 800be78:	9b05      	ldr	r3, [sp, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dd05      	ble.n	800be8a <_dtoa_r+0x82a>
 800be7e:	4631      	mov	r1, r6
 800be80:	461a      	mov	r2, r3
 800be82:	4620      	mov	r0, r4
 800be84:	f000 ffc4 	bl	800ce10 <__lshift>
 800be88:	4606      	mov	r6, r0
 800be8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d06e      	beq.n	800bf6e <_dtoa_r+0x90e>
 800be90:	ee18 0a10 	vmov	r0, s16
 800be94:	4631      	mov	r1, r6
 800be96:	f001 f82b 	bl	800cef0 <__mcmp>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	da67      	bge.n	800bf6e <_dtoa_r+0x90e>
 800be9e:	9b00      	ldr	r3, [sp, #0]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	ee18 1a10 	vmov	r1, s16
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	220a      	movs	r2, #10
 800beaa:	2300      	movs	r3, #0
 800beac:	4620      	mov	r0, r4
 800beae:	f000 fdb5 	bl	800ca1c <__multadd>
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	ee08 0a10 	vmov	s16, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 81b1 	beq.w	800c220 <_dtoa_r+0xbc0>
 800bebe:	2300      	movs	r3, #0
 800bec0:	4639      	mov	r1, r7
 800bec2:	220a      	movs	r2, #10
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 fda9 	bl	800ca1c <__multadd>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	4607      	mov	r7, r0
 800bed0:	f300 808e 	bgt.w	800bff0 <_dtoa_r+0x990>
 800bed4:	9b06      	ldr	r3, [sp, #24]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	dc51      	bgt.n	800bf7e <_dtoa_r+0x91e>
 800beda:	e089      	b.n	800bff0 <_dtoa_r+0x990>
 800bedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bee2:	e74b      	b.n	800bd7c <_dtoa_r+0x71c>
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	1e5e      	subs	r6, r3, #1
 800bee8:	9b07      	ldr	r3, [sp, #28]
 800beea:	42b3      	cmp	r3, r6
 800beec:	bfbf      	itttt	lt
 800beee:	9b07      	ldrlt	r3, [sp, #28]
 800bef0:	9607      	strlt	r6, [sp, #28]
 800bef2:	1af2      	sublt	r2, r6, r3
 800bef4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bef6:	bfb6      	itet	lt
 800bef8:	189b      	addlt	r3, r3, r2
 800befa:	1b9e      	subge	r6, r3, r6
 800befc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	bfb8      	it	lt
 800bf02:	2600      	movlt	r6, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bfb7      	itett	lt
 800bf08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bf0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf10:	1a9d      	sublt	r5, r3, r2
 800bf12:	2300      	movlt	r3, #0
 800bf14:	e734      	b.n	800bd80 <_dtoa_r+0x720>
 800bf16:	9e07      	ldr	r6, [sp, #28]
 800bf18:	9d04      	ldr	r5, [sp, #16]
 800bf1a:	9f08      	ldr	r7, [sp, #32]
 800bf1c:	e73b      	b.n	800bd96 <_dtoa_r+0x736>
 800bf1e:	9a07      	ldr	r2, [sp, #28]
 800bf20:	e767      	b.n	800bdf2 <_dtoa_r+0x792>
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	dc18      	bgt.n	800bf5a <_dtoa_r+0x8fa>
 800bf28:	f1ba 0f00 	cmp.w	sl, #0
 800bf2c:	d115      	bne.n	800bf5a <_dtoa_r+0x8fa>
 800bf2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf32:	b993      	cbnz	r3, 800bf5a <_dtoa_r+0x8fa>
 800bf34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf38:	0d1b      	lsrs	r3, r3, #20
 800bf3a:	051b      	lsls	r3, r3, #20
 800bf3c:	b183      	cbz	r3, 800bf60 <_dtoa_r+0x900>
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	3301      	adds	r3, #1
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	3301      	adds	r3, #1
 800bf48:	9305      	str	r3, [sp, #20]
 800bf4a:	f04f 0801 	mov.w	r8, #1
 800bf4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f47f af6a 	bne.w	800be2a <_dtoa_r+0x7ca>
 800bf56:	2001      	movs	r0, #1
 800bf58:	e76f      	b.n	800be3a <_dtoa_r+0x7da>
 800bf5a:	f04f 0800 	mov.w	r8, #0
 800bf5e:	e7f6      	b.n	800bf4e <_dtoa_r+0x8ee>
 800bf60:	4698      	mov	r8, r3
 800bf62:	e7f4      	b.n	800bf4e <_dtoa_r+0x8ee>
 800bf64:	f43f af7d 	beq.w	800be62 <_dtoa_r+0x802>
 800bf68:	4618      	mov	r0, r3
 800bf6a:	301c      	adds	r0, #28
 800bf6c:	e772      	b.n	800be54 <_dtoa_r+0x7f4>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	dc37      	bgt.n	800bfe4 <_dtoa_r+0x984>
 800bf74:	9b06      	ldr	r3, [sp, #24]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	dd34      	ble.n	800bfe4 <_dtoa_r+0x984>
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	9302      	str	r3, [sp, #8]
 800bf7e:	9b02      	ldr	r3, [sp, #8]
 800bf80:	b96b      	cbnz	r3, 800bf9e <_dtoa_r+0x93e>
 800bf82:	4631      	mov	r1, r6
 800bf84:	2205      	movs	r2, #5
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fd48 	bl	800ca1c <__multadd>
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	4606      	mov	r6, r0
 800bf90:	ee18 0a10 	vmov	r0, s16
 800bf94:	f000 ffac 	bl	800cef0 <__mcmp>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	f73f adbb 	bgt.w	800bb14 <_dtoa_r+0x4b4>
 800bf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa0:	9d01      	ldr	r5, [sp, #4]
 800bfa2:	43db      	mvns	r3, r3
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	f04f 0800 	mov.w	r8, #0
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fd13 	bl	800c9d8 <_Bfree>
 800bfb2:	2f00      	cmp	r7, #0
 800bfb4:	f43f aea4 	beq.w	800bd00 <_dtoa_r+0x6a0>
 800bfb8:	f1b8 0f00 	cmp.w	r8, #0
 800bfbc:	d005      	beq.n	800bfca <_dtoa_r+0x96a>
 800bfbe:	45b8      	cmp	r8, r7
 800bfc0:	d003      	beq.n	800bfca <_dtoa_r+0x96a>
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 fd07 	bl	800c9d8 <_Bfree>
 800bfca:	4639      	mov	r1, r7
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 fd03 	bl	800c9d8 <_Bfree>
 800bfd2:	e695      	b.n	800bd00 <_dtoa_r+0x6a0>
 800bfd4:	2600      	movs	r6, #0
 800bfd6:	4637      	mov	r7, r6
 800bfd8:	e7e1      	b.n	800bf9e <_dtoa_r+0x93e>
 800bfda:	9700      	str	r7, [sp, #0]
 800bfdc:	4637      	mov	r7, r6
 800bfde:	e599      	b.n	800bb14 <_dtoa_r+0x4b4>
 800bfe0:	40240000 	.word	0x40240000
 800bfe4:	9b08      	ldr	r3, [sp, #32]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f000 80ca 	beq.w	800c180 <_dtoa_r+0xb20>
 800bfec:	9b03      	ldr	r3, [sp, #12]
 800bfee:	9302      	str	r3, [sp, #8]
 800bff0:	2d00      	cmp	r5, #0
 800bff2:	dd05      	ble.n	800c000 <_dtoa_r+0x9a0>
 800bff4:	4639      	mov	r1, r7
 800bff6:	462a      	mov	r2, r5
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 ff09 	bl	800ce10 <__lshift>
 800bffe:	4607      	mov	r7, r0
 800c000:	f1b8 0f00 	cmp.w	r8, #0
 800c004:	d05b      	beq.n	800c0be <_dtoa_r+0xa5e>
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fca5 	bl	800c958 <_Balloc>
 800c00e:	4605      	mov	r5, r0
 800c010:	b928      	cbnz	r0, 800c01e <_dtoa_r+0x9be>
 800c012:	4b87      	ldr	r3, [pc, #540]	; (800c230 <_dtoa_r+0xbd0>)
 800c014:	4602      	mov	r2, r0
 800c016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c01a:	f7ff bb3b 	b.w	800b694 <_dtoa_r+0x34>
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	3202      	adds	r2, #2
 800c022:	0092      	lsls	r2, r2, #2
 800c024:	f107 010c 	add.w	r1, r7, #12
 800c028:	300c      	adds	r0, #12
 800c02a:	f7fd fce9 	bl	8009a00 <memcpy>
 800c02e:	2201      	movs	r2, #1
 800c030:	4629      	mov	r1, r5
 800c032:	4620      	mov	r0, r4
 800c034:	f000 feec 	bl	800ce10 <__lshift>
 800c038:	9b01      	ldr	r3, [sp, #4]
 800c03a:	f103 0901 	add.w	r9, r3, #1
 800c03e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c042:	4413      	add	r3, r2
 800c044:	9305      	str	r3, [sp, #20]
 800c046:	f00a 0301 	and.w	r3, sl, #1
 800c04a:	46b8      	mov	r8, r7
 800c04c:	9304      	str	r3, [sp, #16]
 800c04e:	4607      	mov	r7, r0
 800c050:	4631      	mov	r1, r6
 800c052:	ee18 0a10 	vmov	r0, s16
 800c056:	f7ff fa75 	bl	800b544 <quorem>
 800c05a:	4641      	mov	r1, r8
 800c05c:	9002      	str	r0, [sp, #8]
 800c05e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c062:	ee18 0a10 	vmov	r0, s16
 800c066:	f000 ff43 	bl	800cef0 <__mcmp>
 800c06a:	463a      	mov	r2, r7
 800c06c:	9003      	str	r0, [sp, #12]
 800c06e:	4631      	mov	r1, r6
 800c070:	4620      	mov	r0, r4
 800c072:	f000 ff59 	bl	800cf28 <__mdiff>
 800c076:	68c2      	ldr	r2, [r0, #12]
 800c078:	f109 3bff 	add.w	fp, r9, #4294967295
 800c07c:	4605      	mov	r5, r0
 800c07e:	bb02      	cbnz	r2, 800c0c2 <_dtoa_r+0xa62>
 800c080:	4601      	mov	r1, r0
 800c082:	ee18 0a10 	vmov	r0, s16
 800c086:	f000 ff33 	bl	800cef0 <__mcmp>
 800c08a:	4602      	mov	r2, r0
 800c08c:	4629      	mov	r1, r5
 800c08e:	4620      	mov	r0, r4
 800c090:	9207      	str	r2, [sp, #28]
 800c092:	f000 fca1 	bl	800c9d8 <_Bfree>
 800c096:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c09a:	ea43 0102 	orr.w	r1, r3, r2
 800c09e:	9b04      	ldr	r3, [sp, #16]
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	464d      	mov	r5, r9
 800c0a4:	d10f      	bne.n	800c0c6 <_dtoa_r+0xa66>
 800c0a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0aa:	d02a      	beq.n	800c102 <_dtoa_r+0xaa2>
 800c0ac:	9b03      	ldr	r3, [sp, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd02      	ble.n	800c0b8 <_dtoa_r+0xa58>
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c0b8:	f88b a000 	strb.w	sl, [fp]
 800c0bc:	e775      	b.n	800bfaa <_dtoa_r+0x94a>
 800c0be:	4638      	mov	r0, r7
 800c0c0:	e7ba      	b.n	800c038 <_dtoa_r+0x9d8>
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	e7e2      	b.n	800c08c <_dtoa_r+0xa2c>
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	db04      	blt.n	800c0d6 <_dtoa_r+0xa76>
 800c0cc:	9906      	ldr	r1, [sp, #24]
 800c0ce:	430b      	orrs	r3, r1
 800c0d0:	9904      	ldr	r1, [sp, #16]
 800c0d2:	430b      	orrs	r3, r1
 800c0d4:	d122      	bne.n	800c11c <_dtoa_r+0xabc>
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	ddee      	ble.n	800c0b8 <_dtoa_r+0xa58>
 800c0da:	ee18 1a10 	vmov	r1, s16
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fe95 	bl	800ce10 <__lshift>
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	ee08 0a10 	vmov	s16, r0
 800c0ec:	f000 ff00 	bl	800cef0 <__mcmp>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	dc03      	bgt.n	800c0fc <_dtoa_r+0xa9c>
 800c0f4:	d1e0      	bne.n	800c0b8 <_dtoa_r+0xa58>
 800c0f6:	f01a 0f01 	tst.w	sl, #1
 800c0fa:	d0dd      	beq.n	800c0b8 <_dtoa_r+0xa58>
 800c0fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c100:	d1d7      	bne.n	800c0b2 <_dtoa_r+0xa52>
 800c102:	2339      	movs	r3, #57	; 0x39
 800c104:	f88b 3000 	strb.w	r3, [fp]
 800c108:	462b      	mov	r3, r5
 800c10a:	461d      	mov	r5, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c112:	2a39      	cmp	r2, #57	; 0x39
 800c114:	d071      	beq.n	800c1fa <_dtoa_r+0xb9a>
 800c116:	3201      	adds	r2, #1
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	e746      	b.n	800bfaa <_dtoa_r+0x94a>
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	dd07      	ble.n	800c130 <_dtoa_r+0xad0>
 800c120:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c124:	d0ed      	beq.n	800c102 <_dtoa_r+0xaa2>
 800c126:	f10a 0301 	add.w	r3, sl, #1
 800c12a:	f88b 3000 	strb.w	r3, [fp]
 800c12e:	e73c      	b.n	800bfaa <_dtoa_r+0x94a>
 800c130:	9b05      	ldr	r3, [sp, #20]
 800c132:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c136:	4599      	cmp	r9, r3
 800c138:	d047      	beq.n	800c1ca <_dtoa_r+0xb6a>
 800c13a:	ee18 1a10 	vmov	r1, s16
 800c13e:	2300      	movs	r3, #0
 800c140:	220a      	movs	r2, #10
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fc6a 	bl	800ca1c <__multadd>
 800c148:	45b8      	cmp	r8, r7
 800c14a:	ee08 0a10 	vmov	s16, r0
 800c14e:	f04f 0300 	mov.w	r3, #0
 800c152:	f04f 020a 	mov.w	r2, #10
 800c156:	4641      	mov	r1, r8
 800c158:	4620      	mov	r0, r4
 800c15a:	d106      	bne.n	800c16a <_dtoa_r+0xb0a>
 800c15c:	f000 fc5e 	bl	800ca1c <__multadd>
 800c160:	4680      	mov	r8, r0
 800c162:	4607      	mov	r7, r0
 800c164:	f109 0901 	add.w	r9, r9, #1
 800c168:	e772      	b.n	800c050 <_dtoa_r+0x9f0>
 800c16a:	f000 fc57 	bl	800ca1c <__multadd>
 800c16e:	4639      	mov	r1, r7
 800c170:	4680      	mov	r8, r0
 800c172:	2300      	movs	r3, #0
 800c174:	220a      	movs	r2, #10
 800c176:	4620      	mov	r0, r4
 800c178:	f000 fc50 	bl	800ca1c <__multadd>
 800c17c:	4607      	mov	r7, r0
 800c17e:	e7f1      	b.n	800c164 <_dtoa_r+0xb04>
 800c180:	9b03      	ldr	r3, [sp, #12]
 800c182:	9302      	str	r3, [sp, #8]
 800c184:	9d01      	ldr	r5, [sp, #4]
 800c186:	ee18 0a10 	vmov	r0, s16
 800c18a:	4631      	mov	r1, r6
 800c18c:	f7ff f9da 	bl	800b544 <quorem>
 800c190:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	f805 ab01 	strb.w	sl, [r5], #1
 800c19a:	1aea      	subs	r2, r5, r3
 800c19c:	9b02      	ldr	r3, [sp, #8]
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	dd09      	ble.n	800c1b6 <_dtoa_r+0xb56>
 800c1a2:	ee18 1a10 	vmov	r1, s16
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	220a      	movs	r2, #10
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 fc36 	bl	800ca1c <__multadd>
 800c1b0:	ee08 0a10 	vmov	s16, r0
 800c1b4:	e7e7      	b.n	800c186 <_dtoa_r+0xb26>
 800c1b6:	9b02      	ldr	r3, [sp, #8]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bfc8      	it	gt
 800c1bc:	461d      	movgt	r5, r3
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	bfd8      	it	le
 800c1c2:	2501      	movle	r5, #1
 800c1c4:	441d      	add	r5, r3
 800c1c6:	f04f 0800 	mov.w	r8, #0
 800c1ca:	ee18 1a10 	vmov	r1, s16
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 fe1d 	bl	800ce10 <__lshift>
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	ee08 0a10 	vmov	s16, r0
 800c1dc:	f000 fe88 	bl	800cef0 <__mcmp>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	dc91      	bgt.n	800c108 <_dtoa_r+0xaa8>
 800c1e4:	d102      	bne.n	800c1ec <_dtoa_r+0xb8c>
 800c1e6:	f01a 0f01 	tst.w	sl, #1
 800c1ea:	d18d      	bne.n	800c108 <_dtoa_r+0xaa8>
 800c1ec:	462b      	mov	r3, r5
 800c1ee:	461d      	mov	r5, r3
 800c1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1f4:	2a30      	cmp	r2, #48	; 0x30
 800c1f6:	d0fa      	beq.n	800c1ee <_dtoa_r+0xb8e>
 800c1f8:	e6d7      	b.n	800bfaa <_dtoa_r+0x94a>
 800c1fa:	9a01      	ldr	r2, [sp, #4]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d184      	bne.n	800c10a <_dtoa_r+0xaaa>
 800c200:	9b00      	ldr	r3, [sp, #0]
 800c202:	3301      	adds	r3, #1
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	2331      	movs	r3, #49	; 0x31
 800c208:	7013      	strb	r3, [r2, #0]
 800c20a:	e6ce      	b.n	800bfaa <_dtoa_r+0x94a>
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <_dtoa_r+0xbd4>)
 800c20e:	f7ff ba95 	b.w	800b73c <_dtoa_r+0xdc>
 800c212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c214:	2b00      	cmp	r3, #0
 800c216:	f47f aa6e 	bne.w	800b6f6 <_dtoa_r+0x96>
 800c21a:	4b07      	ldr	r3, [pc, #28]	; (800c238 <_dtoa_r+0xbd8>)
 800c21c:	f7ff ba8e 	b.w	800b73c <_dtoa_r+0xdc>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	dcae      	bgt.n	800c184 <_dtoa_r+0xb24>
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	f73f aea8 	bgt.w	800bf7e <_dtoa_r+0x91e>
 800c22e:	e7a9      	b.n	800c184 <_dtoa_r+0xb24>
 800c230:	08020f70 	.word	0x08020f70
 800c234:	08020d74 	.word	0x08020d74
 800c238:	08020ef1 	.word	0x08020ef1

0800c23c <rshift>:
 800c23c:	6903      	ldr	r3, [r0, #16]
 800c23e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c246:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c24a:	f100 0414 	add.w	r4, r0, #20
 800c24e:	dd45      	ble.n	800c2dc <rshift+0xa0>
 800c250:	f011 011f 	ands.w	r1, r1, #31
 800c254:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c258:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c25c:	d10c      	bne.n	800c278 <rshift+0x3c>
 800c25e:	f100 0710 	add.w	r7, r0, #16
 800c262:	4629      	mov	r1, r5
 800c264:	42b1      	cmp	r1, r6
 800c266:	d334      	bcc.n	800c2d2 <rshift+0x96>
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	1eea      	subs	r2, r5, #3
 800c26e:	4296      	cmp	r6, r2
 800c270:	bf38      	it	cc
 800c272:	2300      	movcc	r3, #0
 800c274:	4423      	add	r3, r4
 800c276:	e015      	b.n	800c2a4 <rshift+0x68>
 800c278:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c27c:	f1c1 0820 	rsb	r8, r1, #32
 800c280:	40cf      	lsrs	r7, r1
 800c282:	f105 0e04 	add.w	lr, r5, #4
 800c286:	46a1      	mov	r9, r4
 800c288:	4576      	cmp	r6, lr
 800c28a:	46f4      	mov	ip, lr
 800c28c:	d815      	bhi.n	800c2ba <rshift+0x7e>
 800c28e:	1a9a      	subs	r2, r3, r2
 800c290:	0092      	lsls	r2, r2, #2
 800c292:	3a04      	subs	r2, #4
 800c294:	3501      	adds	r5, #1
 800c296:	42ae      	cmp	r6, r5
 800c298:	bf38      	it	cc
 800c29a:	2200      	movcc	r2, #0
 800c29c:	18a3      	adds	r3, r4, r2
 800c29e:	50a7      	str	r7, [r4, r2]
 800c2a0:	b107      	cbz	r7, 800c2a4 <rshift+0x68>
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	1b1a      	subs	r2, r3, r4
 800c2a6:	42a3      	cmp	r3, r4
 800c2a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2ac:	bf08      	it	eq
 800c2ae:	2300      	moveq	r3, #0
 800c2b0:	6102      	str	r2, [r0, #16]
 800c2b2:	bf08      	it	eq
 800c2b4:	6143      	streq	r3, [r0, #20]
 800c2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2ba:	f8dc c000 	ldr.w	ip, [ip]
 800c2be:	fa0c fc08 	lsl.w	ip, ip, r8
 800c2c2:	ea4c 0707 	orr.w	r7, ip, r7
 800c2c6:	f849 7b04 	str.w	r7, [r9], #4
 800c2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2ce:	40cf      	lsrs	r7, r1
 800c2d0:	e7da      	b.n	800c288 <rshift+0x4c>
 800c2d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c2d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2da:	e7c3      	b.n	800c264 <rshift+0x28>
 800c2dc:	4623      	mov	r3, r4
 800c2de:	e7e1      	b.n	800c2a4 <rshift+0x68>

0800c2e0 <__hexdig_fun>:
 800c2e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c2e4:	2b09      	cmp	r3, #9
 800c2e6:	d802      	bhi.n	800c2ee <__hexdig_fun+0xe>
 800c2e8:	3820      	subs	r0, #32
 800c2ea:	b2c0      	uxtb	r0, r0
 800c2ec:	4770      	bx	lr
 800c2ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c2f2:	2b05      	cmp	r3, #5
 800c2f4:	d801      	bhi.n	800c2fa <__hexdig_fun+0x1a>
 800c2f6:	3847      	subs	r0, #71	; 0x47
 800c2f8:	e7f7      	b.n	800c2ea <__hexdig_fun+0xa>
 800c2fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c2fe:	2b05      	cmp	r3, #5
 800c300:	d801      	bhi.n	800c306 <__hexdig_fun+0x26>
 800c302:	3827      	subs	r0, #39	; 0x27
 800c304:	e7f1      	b.n	800c2ea <__hexdig_fun+0xa>
 800c306:	2000      	movs	r0, #0
 800c308:	4770      	bx	lr
	...

0800c30c <__gethex>:
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	ed2d 8b02 	vpush	{d8}
 800c314:	b089      	sub	sp, #36	; 0x24
 800c316:	ee08 0a10 	vmov	s16, r0
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	4bb4      	ldr	r3, [pc, #720]	; (800c5f0 <__gethex+0x2e4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	4618      	mov	r0, r3
 800c324:	468b      	mov	fp, r1
 800c326:	4690      	mov	r8, r2
 800c328:	f7f3 ff52 	bl	80001d0 <strlen>
 800c32c:	9b01      	ldr	r3, [sp, #4]
 800c32e:	f8db 2000 	ldr.w	r2, [fp]
 800c332:	4403      	add	r3, r0
 800c334:	4682      	mov	sl, r0
 800c336:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c33a:	9305      	str	r3, [sp, #20]
 800c33c:	1c93      	adds	r3, r2, #2
 800c33e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c342:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c346:	32fe      	adds	r2, #254	; 0xfe
 800c348:	18d1      	adds	r1, r2, r3
 800c34a:	461f      	mov	r7, r3
 800c34c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c350:	9100      	str	r1, [sp, #0]
 800c352:	2830      	cmp	r0, #48	; 0x30
 800c354:	d0f8      	beq.n	800c348 <__gethex+0x3c>
 800c356:	f7ff ffc3 	bl	800c2e0 <__hexdig_fun>
 800c35a:	4604      	mov	r4, r0
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d13a      	bne.n	800c3d6 <__gethex+0xca>
 800c360:	9901      	ldr	r1, [sp, #4]
 800c362:	4652      	mov	r2, sl
 800c364:	4638      	mov	r0, r7
 800c366:	f001 fa23 	bl	800d7b0 <strncmp>
 800c36a:	4605      	mov	r5, r0
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d168      	bne.n	800c442 <__gethex+0x136>
 800c370:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c374:	eb07 060a 	add.w	r6, r7, sl
 800c378:	f7ff ffb2 	bl	800c2e0 <__hexdig_fun>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d062      	beq.n	800c446 <__gethex+0x13a>
 800c380:	4633      	mov	r3, r6
 800c382:	7818      	ldrb	r0, [r3, #0]
 800c384:	2830      	cmp	r0, #48	; 0x30
 800c386:	461f      	mov	r7, r3
 800c388:	f103 0301 	add.w	r3, r3, #1
 800c38c:	d0f9      	beq.n	800c382 <__gethex+0x76>
 800c38e:	f7ff ffa7 	bl	800c2e0 <__hexdig_fun>
 800c392:	2301      	movs	r3, #1
 800c394:	fab0 f480 	clz	r4, r0
 800c398:	0964      	lsrs	r4, r4, #5
 800c39a:	4635      	mov	r5, r6
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	463a      	mov	r2, r7
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	7830      	ldrb	r0, [r6, #0]
 800c3a6:	f7ff ff9b 	bl	800c2e0 <__hexdig_fun>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d1f8      	bne.n	800c3a0 <__gethex+0x94>
 800c3ae:	9901      	ldr	r1, [sp, #4]
 800c3b0:	4652      	mov	r2, sl
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	f001 f9fc 	bl	800d7b0 <strncmp>
 800c3b8:	b980      	cbnz	r0, 800c3dc <__gethex+0xd0>
 800c3ba:	b94d      	cbnz	r5, 800c3d0 <__gethex+0xc4>
 800c3bc:	eb06 050a 	add.w	r5, r6, sl
 800c3c0:	462a      	mov	r2, r5
 800c3c2:	4616      	mov	r6, r2
 800c3c4:	3201      	adds	r2, #1
 800c3c6:	7830      	ldrb	r0, [r6, #0]
 800c3c8:	f7ff ff8a 	bl	800c2e0 <__hexdig_fun>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d1f8      	bne.n	800c3c2 <__gethex+0xb6>
 800c3d0:	1bad      	subs	r5, r5, r6
 800c3d2:	00ad      	lsls	r5, r5, #2
 800c3d4:	e004      	b.n	800c3e0 <__gethex+0xd4>
 800c3d6:	2400      	movs	r4, #0
 800c3d8:	4625      	mov	r5, r4
 800c3da:	e7e0      	b.n	800c39e <__gethex+0x92>
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	d1f7      	bne.n	800c3d0 <__gethex+0xc4>
 800c3e0:	7833      	ldrb	r3, [r6, #0]
 800c3e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3e6:	2b50      	cmp	r3, #80	; 0x50
 800c3e8:	d13b      	bne.n	800c462 <__gethex+0x156>
 800c3ea:	7873      	ldrb	r3, [r6, #1]
 800c3ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c3ee:	d02c      	beq.n	800c44a <__gethex+0x13e>
 800c3f0:	2b2d      	cmp	r3, #45	; 0x2d
 800c3f2:	d02e      	beq.n	800c452 <__gethex+0x146>
 800c3f4:	1c71      	adds	r1, r6, #1
 800c3f6:	f04f 0900 	mov.w	r9, #0
 800c3fa:	7808      	ldrb	r0, [r1, #0]
 800c3fc:	f7ff ff70 	bl	800c2e0 <__hexdig_fun>
 800c400:	1e43      	subs	r3, r0, #1
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b18      	cmp	r3, #24
 800c406:	d82c      	bhi.n	800c462 <__gethex+0x156>
 800c408:	f1a0 0210 	sub.w	r2, r0, #16
 800c40c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c410:	f7ff ff66 	bl	800c2e0 <__hexdig_fun>
 800c414:	1e43      	subs	r3, r0, #1
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b18      	cmp	r3, #24
 800c41a:	d91d      	bls.n	800c458 <__gethex+0x14c>
 800c41c:	f1b9 0f00 	cmp.w	r9, #0
 800c420:	d000      	beq.n	800c424 <__gethex+0x118>
 800c422:	4252      	negs	r2, r2
 800c424:	4415      	add	r5, r2
 800c426:	f8cb 1000 	str.w	r1, [fp]
 800c42a:	b1e4      	cbz	r4, 800c466 <__gethex+0x15a>
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	bf14      	ite	ne
 800c432:	2700      	movne	r7, #0
 800c434:	2706      	moveq	r7, #6
 800c436:	4638      	mov	r0, r7
 800c438:	b009      	add	sp, #36	; 0x24
 800c43a:	ecbd 8b02 	vpop	{d8}
 800c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c442:	463e      	mov	r6, r7
 800c444:	4625      	mov	r5, r4
 800c446:	2401      	movs	r4, #1
 800c448:	e7ca      	b.n	800c3e0 <__gethex+0xd4>
 800c44a:	f04f 0900 	mov.w	r9, #0
 800c44e:	1cb1      	adds	r1, r6, #2
 800c450:	e7d3      	b.n	800c3fa <__gethex+0xee>
 800c452:	f04f 0901 	mov.w	r9, #1
 800c456:	e7fa      	b.n	800c44e <__gethex+0x142>
 800c458:	230a      	movs	r3, #10
 800c45a:	fb03 0202 	mla	r2, r3, r2, r0
 800c45e:	3a10      	subs	r2, #16
 800c460:	e7d4      	b.n	800c40c <__gethex+0x100>
 800c462:	4631      	mov	r1, r6
 800c464:	e7df      	b.n	800c426 <__gethex+0x11a>
 800c466:	1bf3      	subs	r3, r6, r7
 800c468:	3b01      	subs	r3, #1
 800c46a:	4621      	mov	r1, r4
 800c46c:	2b07      	cmp	r3, #7
 800c46e:	dc0b      	bgt.n	800c488 <__gethex+0x17c>
 800c470:	ee18 0a10 	vmov	r0, s16
 800c474:	f000 fa70 	bl	800c958 <_Balloc>
 800c478:	4604      	mov	r4, r0
 800c47a:	b940      	cbnz	r0, 800c48e <__gethex+0x182>
 800c47c:	4b5d      	ldr	r3, [pc, #372]	; (800c5f4 <__gethex+0x2e8>)
 800c47e:	4602      	mov	r2, r0
 800c480:	21de      	movs	r1, #222	; 0xde
 800c482:	485d      	ldr	r0, [pc, #372]	; (800c5f8 <__gethex+0x2ec>)
 800c484:	f001 f9b6 	bl	800d7f4 <__assert_func>
 800c488:	3101      	adds	r1, #1
 800c48a:	105b      	asrs	r3, r3, #1
 800c48c:	e7ee      	b.n	800c46c <__gethex+0x160>
 800c48e:	f100 0914 	add.w	r9, r0, #20
 800c492:	f04f 0b00 	mov.w	fp, #0
 800c496:	f1ca 0301 	rsb	r3, sl, #1
 800c49a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c49e:	f8cd b000 	str.w	fp, [sp]
 800c4a2:	9306      	str	r3, [sp, #24]
 800c4a4:	42b7      	cmp	r7, r6
 800c4a6:	d340      	bcc.n	800c52a <__gethex+0x21e>
 800c4a8:	9802      	ldr	r0, [sp, #8]
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	f840 3b04 	str.w	r3, [r0], #4
 800c4b0:	eba0 0009 	sub.w	r0, r0, r9
 800c4b4:	1080      	asrs	r0, r0, #2
 800c4b6:	0146      	lsls	r6, r0, #5
 800c4b8:	6120      	str	r0, [r4, #16]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fb3e 	bl	800cb3c <__hi0bits>
 800c4c0:	1a30      	subs	r0, r6, r0
 800c4c2:	f8d8 6000 	ldr.w	r6, [r8]
 800c4c6:	42b0      	cmp	r0, r6
 800c4c8:	dd63      	ble.n	800c592 <__gethex+0x286>
 800c4ca:	1b87      	subs	r7, r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f000 fee2 	bl	800d298 <__any_on>
 800c4d4:	4682      	mov	sl, r0
 800c4d6:	b1a8      	cbz	r0, 800c504 <__gethex+0x1f8>
 800c4d8:	1e7b      	subs	r3, r7, #1
 800c4da:	1159      	asrs	r1, r3, #5
 800c4dc:	f003 021f 	and.w	r2, r3, #31
 800c4e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c4e4:	f04f 0a01 	mov.w	sl, #1
 800c4e8:	fa0a f202 	lsl.w	r2, sl, r2
 800c4ec:	420a      	tst	r2, r1
 800c4ee:	d009      	beq.n	800c504 <__gethex+0x1f8>
 800c4f0:	4553      	cmp	r3, sl
 800c4f2:	dd05      	ble.n	800c500 <__gethex+0x1f4>
 800c4f4:	1eb9      	subs	r1, r7, #2
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fece 	bl	800d298 <__any_on>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d145      	bne.n	800c58c <__gethex+0x280>
 800c500:	f04f 0a02 	mov.w	sl, #2
 800c504:	4639      	mov	r1, r7
 800c506:	4620      	mov	r0, r4
 800c508:	f7ff fe98 	bl	800c23c <rshift>
 800c50c:	443d      	add	r5, r7
 800c50e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c512:	42ab      	cmp	r3, r5
 800c514:	da4c      	bge.n	800c5b0 <__gethex+0x2a4>
 800c516:	ee18 0a10 	vmov	r0, s16
 800c51a:	4621      	mov	r1, r4
 800c51c:	f000 fa5c 	bl	800c9d8 <_Bfree>
 800c520:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c522:	2300      	movs	r3, #0
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	27a3      	movs	r7, #163	; 0xa3
 800c528:	e785      	b.n	800c436 <__gethex+0x12a>
 800c52a:	1e73      	subs	r3, r6, #1
 800c52c:	9a05      	ldr	r2, [sp, #20]
 800c52e:	9303      	str	r3, [sp, #12]
 800c530:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c534:	4293      	cmp	r3, r2
 800c536:	d019      	beq.n	800c56c <__gethex+0x260>
 800c538:	f1bb 0f20 	cmp.w	fp, #32
 800c53c:	d107      	bne.n	800c54e <__gethex+0x242>
 800c53e:	9b02      	ldr	r3, [sp, #8]
 800c540:	9a00      	ldr	r2, [sp, #0]
 800c542:	f843 2b04 	str.w	r2, [r3], #4
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	2300      	movs	r3, #0
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	469b      	mov	fp, r3
 800c54e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c552:	f7ff fec5 	bl	800c2e0 <__hexdig_fun>
 800c556:	9b00      	ldr	r3, [sp, #0]
 800c558:	f000 000f 	and.w	r0, r0, #15
 800c55c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c560:	4303      	orrs	r3, r0
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	f10b 0b04 	add.w	fp, fp, #4
 800c568:	9b03      	ldr	r3, [sp, #12]
 800c56a:	e00d      	b.n	800c588 <__gethex+0x27c>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	9a06      	ldr	r2, [sp, #24]
 800c570:	4413      	add	r3, r2
 800c572:	42bb      	cmp	r3, r7
 800c574:	d3e0      	bcc.n	800c538 <__gethex+0x22c>
 800c576:	4618      	mov	r0, r3
 800c578:	9901      	ldr	r1, [sp, #4]
 800c57a:	9307      	str	r3, [sp, #28]
 800c57c:	4652      	mov	r2, sl
 800c57e:	f001 f917 	bl	800d7b0 <strncmp>
 800c582:	9b07      	ldr	r3, [sp, #28]
 800c584:	2800      	cmp	r0, #0
 800c586:	d1d7      	bne.n	800c538 <__gethex+0x22c>
 800c588:	461e      	mov	r6, r3
 800c58a:	e78b      	b.n	800c4a4 <__gethex+0x198>
 800c58c:	f04f 0a03 	mov.w	sl, #3
 800c590:	e7b8      	b.n	800c504 <__gethex+0x1f8>
 800c592:	da0a      	bge.n	800c5aa <__gethex+0x29e>
 800c594:	1a37      	subs	r7, r6, r0
 800c596:	4621      	mov	r1, r4
 800c598:	ee18 0a10 	vmov	r0, s16
 800c59c:	463a      	mov	r2, r7
 800c59e:	f000 fc37 	bl	800ce10 <__lshift>
 800c5a2:	1bed      	subs	r5, r5, r7
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	f100 0914 	add.w	r9, r0, #20
 800c5aa:	f04f 0a00 	mov.w	sl, #0
 800c5ae:	e7ae      	b.n	800c50e <__gethex+0x202>
 800c5b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c5b4:	42a8      	cmp	r0, r5
 800c5b6:	dd72      	ble.n	800c69e <__gethex+0x392>
 800c5b8:	1b45      	subs	r5, r0, r5
 800c5ba:	42ae      	cmp	r6, r5
 800c5bc:	dc36      	bgt.n	800c62c <__gethex+0x320>
 800c5be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d02a      	beq.n	800c61c <__gethex+0x310>
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d02c      	beq.n	800c624 <__gethex+0x318>
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d11c      	bne.n	800c608 <__gethex+0x2fc>
 800c5ce:	42ae      	cmp	r6, r5
 800c5d0:	d11a      	bne.n	800c608 <__gethex+0x2fc>
 800c5d2:	2e01      	cmp	r6, #1
 800c5d4:	d112      	bne.n	800c5fc <__gethex+0x2f0>
 800c5d6:	9a04      	ldr	r2, [sp, #16]
 800c5d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5dc:	6013      	str	r3, [r2, #0]
 800c5de:	2301      	movs	r3, #1
 800c5e0:	6123      	str	r3, [r4, #16]
 800c5e2:	f8c9 3000 	str.w	r3, [r9]
 800c5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5e8:	2762      	movs	r7, #98	; 0x62
 800c5ea:	601c      	str	r4, [r3, #0]
 800c5ec:	e723      	b.n	800c436 <__gethex+0x12a>
 800c5ee:	bf00      	nop
 800c5f0:	08020fe8 	.word	0x08020fe8
 800c5f4:	08020f70 	.word	0x08020f70
 800c5f8:	08020f81 	.word	0x08020f81
 800c5fc:	1e71      	subs	r1, r6, #1
 800c5fe:	4620      	mov	r0, r4
 800c600:	f000 fe4a 	bl	800d298 <__any_on>
 800c604:	2800      	cmp	r0, #0
 800c606:	d1e6      	bne.n	800c5d6 <__gethex+0x2ca>
 800c608:	ee18 0a10 	vmov	r0, s16
 800c60c:	4621      	mov	r1, r4
 800c60e:	f000 f9e3 	bl	800c9d8 <_Bfree>
 800c612:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c614:	2300      	movs	r3, #0
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	2750      	movs	r7, #80	; 0x50
 800c61a:	e70c      	b.n	800c436 <__gethex+0x12a>
 800c61c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1f2      	bne.n	800c608 <__gethex+0x2fc>
 800c622:	e7d8      	b.n	800c5d6 <__gethex+0x2ca>
 800c624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1d5      	bne.n	800c5d6 <__gethex+0x2ca>
 800c62a:	e7ed      	b.n	800c608 <__gethex+0x2fc>
 800c62c:	1e6f      	subs	r7, r5, #1
 800c62e:	f1ba 0f00 	cmp.w	sl, #0
 800c632:	d131      	bne.n	800c698 <__gethex+0x38c>
 800c634:	b127      	cbz	r7, 800c640 <__gethex+0x334>
 800c636:	4639      	mov	r1, r7
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 fe2d 	bl	800d298 <__any_on>
 800c63e:	4682      	mov	sl, r0
 800c640:	117b      	asrs	r3, r7, #5
 800c642:	2101      	movs	r1, #1
 800c644:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c648:	f007 071f 	and.w	r7, r7, #31
 800c64c:	fa01 f707 	lsl.w	r7, r1, r7
 800c650:	421f      	tst	r7, r3
 800c652:	4629      	mov	r1, r5
 800c654:	4620      	mov	r0, r4
 800c656:	bf18      	it	ne
 800c658:	f04a 0a02 	orrne.w	sl, sl, #2
 800c65c:	1b76      	subs	r6, r6, r5
 800c65e:	f7ff fded 	bl	800c23c <rshift>
 800c662:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c666:	2702      	movs	r7, #2
 800c668:	f1ba 0f00 	cmp.w	sl, #0
 800c66c:	d048      	beq.n	800c700 <__gethex+0x3f4>
 800c66e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c672:	2b02      	cmp	r3, #2
 800c674:	d015      	beq.n	800c6a2 <__gethex+0x396>
 800c676:	2b03      	cmp	r3, #3
 800c678:	d017      	beq.n	800c6aa <__gethex+0x39e>
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d109      	bne.n	800c692 <__gethex+0x386>
 800c67e:	f01a 0f02 	tst.w	sl, #2
 800c682:	d006      	beq.n	800c692 <__gethex+0x386>
 800c684:	f8d9 0000 	ldr.w	r0, [r9]
 800c688:	ea4a 0a00 	orr.w	sl, sl, r0
 800c68c:	f01a 0f01 	tst.w	sl, #1
 800c690:	d10e      	bne.n	800c6b0 <__gethex+0x3a4>
 800c692:	f047 0710 	orr.w	r7, r7, #16
 800c696:	e033      	b.n	800c700 <__gethex+0x3f4>
 800c698:	f04f 0a01 	mov.w	sl, #1
 800c69c:	e7d0      	b.n	800c640 <__gethex+0x334>
 800c69e:	2701      	movs	r7, #1
 800c6a0:	e7e2      	b.n	800c668 <__gethex+0x35c>
 800c6a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6a4:	f1c3 0301 	rsb	r3, r3, #1
 800c6a8:	9315      	str	r3, [sp, #84]	; 0x54
 800c6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0f0      	beq.n	800c692 <__gethex+0x386>
 800c6b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6b4:	f104 0314 	add.w	r3, r4, #20
 800c6b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6c0:	f04f 0c00 	mov.w	ip, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6ce:	d01c      	beq.n	800c70a <__gethex+0x3fe>
 800c6d0:	3201      	adds	r2, #1
 800c6d2:	6002      	str	r2, [r0, #0]
 800c6d4:	2f02      	cmp	r7, #2
 800c6d6:	f104 0314 	add.w	r3, r4, #20
 800c6da:	d13f      	bne.n	800c75c <__gethex+0x450>
 800c6dc:	f8d8 2000 	ldr.w	r2, [r8]
 800c6e0:	3a01      	subs	r2, #1
 800c6e2:	42b2      	cmp	r2, r6
 800c6e4:	d10a      	bne.n	800c6fc <__gethex+0x3f0>
 800c6e6:	1171      	asrs	r1, r6, #5
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6ee:	f006 061f 	and.w	r6, r6, #31
 800c6f2:	fa02 f606 	lsl.w	r6, r2, r6
 800c6f6:	421e      	tst	r6, r3
 800c6f8:	bf18      	it	ne
 800c6fa:	4617      	movne	r7, r2
 800c6fc:	f047 0720 	orr.w	r7, r7, #32
 800c700:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c702:	601c      	str	r4, [r3, #0]
 800c704:	9b04      	ldr	r3, [sp, #16]
 800c706:	601d      	str	r5, [r3, #0]
 800c708:	e695      	b.n	800c436 <__gethex+0x12a>
 800c70a:	4299      	cmp	r1, r3
 800c70c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c710:	d8d8      	bhi.n	800c6c4 <__gethex+0x3b8>
 800c712:	68a3      	ldr	r3, [r4, #8]
 800c714:	459b      	cmp	fp, r3
 800c716:	db19      	blt.n	800c74c <__gethex+0x440>
 800c718:	6861      	ldr	r1, [r4, #4]
 800c71a:	ee18 0a10 	vmov	r0, s16
 800c71e:	3101      	adds	r1, #1
 800c720:	f000 f91a 	bl	800c958 <_Balloc>
 800c724:	4681      	mov	r9, r0
 800c726:	b918      	cbnz	r0, 800c730 <__gethex+0x424>
 800c728:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <__gethex+0x488>)
 800c72a:	4602      	mov	r2, r0
 800c72c:	2184      	movs	r1, #132	; 0x84
 800c72e:	e6a8      	b.n	800c482 <__gethex+0x176>
 800c730:	6922      	ldr	r2, [r4, #16]
 800c732:	3202      	adds	r2, #2
 800c734:	f104 010c 	add.w	r1, r4, #12
 800c738:	0092      	lsls	r2, r2, #2
 800c73a:	300c      	adds	r0, #12
 800c73c:	f7fd f960 	bl	8009a00 <memcpy>
 800c740:	4621      	mov	r1, r4
 800c742:	ee18 0a10 	vmov	r0, s16
 800c746:	f000 f947 	bl	800c9d8 <_Bfree>
 800c74a:	464c      	mov	r4, r9
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c754:	6122      	str	r2, [r4, #16]
 800c756:	2201      	movs	r2, #1
 800c758:	615a      	str	r2, [r3, #20]
 800c75a:	e7bb      	b.n	800c6d4 <__gethex+0x3c8>
 800c75c:	6922      	ldr	r2, [r4, #16]
 800c75e:	455a      	cmp	r2, fp
 800c760:	dd0b      	ble.n	800c77a <__gethex+0x46e>
 800c762:	2101      	movs	r1, #1
 800c764:	4620      	mov	r0, r4
 800c766:	f7ff fd69 	bl	800c23c <rshift>
 800c76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c76e:	3501      	adds	r5, #1
 800c770:	42ab      	cmp	r3, r5
 800c772:	f6ff aed0 	blt.w	800c516 <__gethex+0x20a>
 800c776:	2701      	movs	r7, #1
 800c778:	e7c0      	b.n	800c6fc <__gethex+0x3f0>
 800c77a:	f016 061f 	ands.w	r6, r6, #31
 800c77e:	d0fa      	beq.n	800c776 <__gethex+0x46a>
 800c780:	4453      	add	r3, sl
 800c782:	f1c6 0620 	rsb	r6, r6, #32
 800c786:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c78a:	f000 f9d7 	bl	800cb3c <__hi0bits>
 800c78e:	42b0      	cmp	r0, r6
 800c790:	dbe7      	blt.n	800c762 <__gethex+0x456>
 800c792:	e7f0      	b.n	800c776 <__gethex+0x46a>
 800c794:	08020f70 	.word	0x08020f70

0800c798 <L_shift>:
 800c798:	f1c2 0208 	rsb	r2, r2, #8
 800c79c:	0092      	lsls	r2, r2, #2
 800c79e:	b570      	push	{r4, r5, r6, lr}
 800c7a0:	f1c2 0620 	rsb	r6, r2, #32
 800c7a4:	6843      	ldr	r3, [r0, #4]
 800c7a6:	6804      	ldr	r4, [r0, #0]
 800c7a8:	fa03 f506 	lsl.w	r5, r3, r6
 800c7ac:	432c      	orrs	r4, r5
 800c7ae:	40d3      	lsrs	r3, r2
 800c7b0:	6004      	str	r4, [r0, #0]
 800c7b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7b6:	4288      	cmp	r0, r1
 800c7b8:	d3f4      	bcc.n	800c7a4 <L_shift+0xc>
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}

0800c7bc <__match>:
 800c7bc:	b530      	push	{r4, r5, lr}
 800c7be:	6803      	ldr	r3, [r0, #0]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7c6:	b914      	cbnz	r4, 800c7ce <__match+0x12>
 800c7c8:	6003      	str	r3, [r0, #0]
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	bd30      	pop	{r4, r5, pc}
 800c7ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7d6:	2d19      	cmp	r5, #25
 800c7d8:	bf98      	it	ls
 800c7da:	3220      	addls	r2, #32
 800c7dc:	42a2      	cmp	r2, r4
 800c7de:	d0f0      	beq.n	800c7c2 <__match+0x6>
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e7f3      	b.n	800c7cc <__match+0x10>

0800c7e4 <__hexnan>:
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	680b      	ldr	r3, [r1, #0]
 800c7ea:	115e      	asrs	r6, r3, #5
 800c7ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7f0:	f013 031f 	ands.w	r3, r3, #31
 800c7f4:	b087      	sub	sp, #28
 800c7f6:	bf18      	it	ne
 800c7f8:	3604      	addne	r6, #4
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	1f37      	subs	r7, r6, #4
 800c7fe:	4690      	mov	r8, r2
 800c800:	6802      	ldr	r2, [r0, #0]
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	4682      	mov	sl, r0
 800c806:	f846 5c04 	str.w	r5, [r6, #-4]
 800c80a:	46b9      	mov	r9, r7
 800c80c:	463c      	mov	r4, r7
 800c80e:	9502      	str	r5, [sp, #8]
 800c810:	46ab      	mov	fp, r5
 800c812:	7851      	ldrb	r1, [r2, #1]
 800c814:	1c53      	adds	r3, r2, #1
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	b341      	cbz	r1, 800c86c <__hexnan+0x88>
 800c81a:	4608      	mov	r0, r1
 800c81c:	9205      	str	r2, [sp, #20]
 800c81e:	9104      	str	r1, [sp, #16]
 800c820:	f7ff fd5e 	bl	800c2e0 <__hexdig_fun>
 800c824:	2800      	cmp	r0, #0
 800c826:	d14f      	bne.n	800c8c8 <__hexnan+0xe4>
 800c828:	9904      	ldr	r1, [sp, #16]
 800c82a:	9a05      	ldr	r2, [sp, #20]
 800c82c:	2920      	cmp	r1, #32
 800c82e:	d818      	bhi.n	800c862 <__hexnan+0x7e>
 800c830:	9b02      	ldr	r3, [sp, #8]
 800c832:	459b      	cmp	fp, r3
 800c834:	dd13      	ble.n	800c85e <__hexnan+0x7a>
 800c836:	454c      	cmp	r4, r9
 800c838:	d206      	bcs.n	800c848 <__hexnan+0x64>
 800c83a:	2d07      	cmp	r5, #7
 800c83c:	dc04      	bgt.n	800c848 <__hexnan+0x64>
 800c83e:	462a      	mov	r2, r5
 800c840:	4649      	mov	r1, r9
 800c842:	4620      	mov	r0, r4
 800c844:	f7ff ffa8 	bl	800c798 <L_shift>
 800c848:	4544      	cmp	r4, r8
 800c84a:	d950      	bls.n	800c8ee <__hexnan+0x10a>
 800c84c:	2300      	movs	r3, #0
 800c84e:	f1a4 0904 	sub.w	r9, r4, #4
 800c852:	f844 3c04 	str.w	r3, [r4, #-4]
 800c856:	f8cd b008 	str.w	fp, [sp, #8]
 800c85a:	464c      	mov	r4, r9
 800c85c:	461d      	mov	r5, r3
 800c85e:	9a03      	ldr	r2, [sp, #12]
 800c860:	e7d7      	b.n	800c812 <__hexnan+0x2e>
 800c862:	2929      	cmp	r1, #41	; 0x29
 800c864:	d156      	bne.n	800c914 <__hexnan+0x130>
 800c866:	3202      	adds	r2, #2
 800c868:	f8ca 2000 	str.w	r2, [sl]
 800c86c:	f1bb 0f00 	cmp.w	fp, #0
 800c870:	d050      	beq.n	800c914 <__hexnan+0x130>
 800c872:	454c      	cmp	r4, r9
 800c874:	d206      	bcs.n	800c884 <__hexnan+0xa0>
 800c876:	2d07      	cmp	r5, #7
 800c878:	dc04      	bgt.n	800c884 <__hexnan+0xa0>
 800c87a:	462a      	mov	r2, r5
 800c87c:	4649      	mov	r1, r9
 800c87e:	4620      	mov	r0, r4
 800c880:	f7ff ff8a 	bl	800c798 <L_shift>
 800c884:	4544      	cmp	r4, r8
 800c886:	d934      	bls.n	800c8f2 <__hexnan+0x10e>
 800c888:	f1a8 0204 	sub.w	r2, r8, #4
 800c88c:	4623      	mov	r3, r4
 800c88e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c892:	f842 1f04 	str.w	r1, [r2, #4]!
 800c896:	429f      	cmp	r7, r3
 800c898:	d2f9      	bcs.n	800c88e <__hexnan+0xaa>
 800c89a:	1b3b      	subs	r3, r7, r4
 800c89c:	f023 0303 	bic.w	r3, r3, #3
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	3401      	adds	r4, #1
 800c8a4:	3e03      	subs	r6, #3
 800c8a6:	42b4      	cmp	r4, r6
 800c8a8:	bf88      	it	hi
 800c8aa:	2304      	movhi	r3, #4
 800c8ac:	4443      	add	r3, r8
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f843 2b04 	str.w	r2, [r3], #4
 800c8b4:	429f      	cmp	r7, r3
 800c8b6:	d2fb      	bcs.n	800c8b0 <__hexnan+0xcc>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	b91b      	cbnz	r3, 800c8c4 <__hexnan+0xe0>
 800c8bc:	4547      	cmp	r7, r8
 800c8be:	d127      	bne.n	800c910 <__hexnan+0x12c>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	2005      	movs	r0, #5
 800c8c6:	e026      	b.n	800c916 <__hexnan+0x132>
 800c8c8:	3501      	adds	r5, #1
 800c8ca:	2d08      	cmp	r5, #8
 800c8cc:	f10b 0b01 	add.w	fp, fp, #1
 800c8d0:	dd06      	ble.n	800c8e0 <__hexnan+0xfc>
 800c8d2:	4544      	cmp	r4, r8
 800c8d4:	d9c3      	bls.n	800c85e <__hexnan+0x7a>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8dc:	2501      	movs	r5, #1
 800c8de:	3c04      	subs	r4, #4
 800c8e0:	6822      	ldr	r2, [r4, #0]
 800c8e2:	f000 000f 	and.w	r0, r0, #15
 800c8e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c8ea:	6022      	str	r2, [r4, #0]
 800c8ec:	e7b7      	b.n	800c85e <__hexnan+0x7a>
 800c8ee:	2508      	movs	r5, #8
 800c8f0:	e7b5      	b.n	800c85e <__hexnan+0x7a>
 800c8f2:	9b01      	ldr	r3, [sp, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d0df      	beq.n	800c8b8 <__hexnan+0xd4>
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fc:	f1c3 0320 	rsb	r3, r3, #32
 800c900:	fa22 f303 	lsr.w	r3, r2, r3
 800c904:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c908:	401a      	ands	r2, r3
 800c90a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c90e:	e7d3      	b.n	800c8b8 <__hexnan+0xd4>
 800c910:	3f04      	subs	r7, #4
 800c912:	e7d1      	b.n	800c8b8 <__hexnan+0xd4>
 800c914:	2004      	movs	r0, #4
 800c916:	b007      	add	sp, #28
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c91c <_localeconv_r>:
 800c91c:	4800      	ldr	r0, [pc, #0]	; (800c920 <_localeconv_r+0x4>)
 800c91e:	4770      	bx	lr
 800c920:	200001b8 	.word	0x200001b8

0800c924 <malloc>:
 800c924:	4b02      	ldr	r3, [pc, #8]	; (800c930 <malloc+0xc>)
 800c926:	4601      	mov	r1, r0
 800c928:	6818      	ldr	r0, [r3, #0]
 800c92a:	f000 bd59 	b.w	800d3e0 <_malloc_r>
 800c92e:	bf00      	nop
 800c930:	20000060 	.word	0x20000060

0800c934 <__ascii_mbtowc>:
 800c934:	b082      	sub	sp, #8
 800c936:	b901      	cbnz	r1, 800c93a <__ascii_mbtowc+0x6>
 800c938:	a901      	add	r1, sp, #4
 800c93a:	b142      	cbz	r2, 800c94e <__ascii_mbtowc+0x1a>
 800c93c:	b14b      	cbz	r3, 800c952 <__ascii_mbtowc+0x1e>
 800c93e:	7813      	ldrb	r3, [r2, #0]
 800c940:	600b      	str	r3, [r1, #0]
 800c942:	7812      	ldrb	r2, [r2, #0]
 800c944:	1e10      	subs	r0, r2, #0
 800c946:	bf18      	it	ne
 800c948:	2001      	movne	r0, #1
 800c94a:	b002      	add	sp, #8
 800c94c:	4770      	bx	lr
 800c94e:	4610      	mov	r0, r2
 800c950:	e7fb      	b.n	800c94a <__ascii_mbtowc+0x16>
 800c952:	f06f 0001 	mvn.w	r0, #1
 800c956:	e7f8      	b.n	800c94a <__ascii_mbtowc+0x16>

0800c958 <_Balloc>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c95c:	4604      	mov	r4, r0
 800c95e:	460d      	mov	r5, r1
 800c960:	b976      	cbnz	r6, 800c980 <_Balloc+0x28>
 800c962:	2010      	movs	r0, #16
 800c964:	f7ff ffde 	bl	800c924 <malloc>
 800c968:	4602      	mov	r2, r0
 800c96a:	6260      	str	r0, [r4, #36]	; 0x24
 800c96c:	b920      	cbnz	r0, 800c978 <_Balloc+0x20>
 800c96e:	4b18      	ldr	r3, [pc, #96]	; (800c9d0 <_Balloc+0x78>)
 800c970:	4818      	ldr	r0, [pc, #96]	; (800c9d4 <_Balloc+0x7c>)
 800c972:	2166      	movs	r1, #102	; 0x66
 800c974:	f000 ff3e 	bl	800d7f4 <__assert_func>
 800c978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c97c:	6006      	str	r6, [r0, #0]
 800c97e:	60c6      	str	r6, [r0, #12]
 800c980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c982:	68f3      	ldr	r3, [r6, #12]
 800c984:	b183      	cbz	r3, 800c9a8 <_Balloc+0x50>
 800c986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c98e:	b9b8      	cbnz	r0, 800c9c0 <_Balloc+0x68>
 800c990:	2101      	movs	r1, #1
 800c992:	fa01 f605 	lsl.w	r6, r1, r5
 800c996:	1d72      	adds	r2, r6, #5
 800c998:	0092      	lsls	r2, r2, #2
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fc9d 	bl	800d2da <_calloc_r>
 800c9a0:	b160      	cbz	r0, 800c9bc <_Balloc+0x64>
 800c9a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9a6:	e00e      	b.n	800c9c6 <_Balloc+0x6e>
 800c9a8:	2221      	movs	r2, #33	; 0x21
 800c9aa:	2104      	movs	r1, #4
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 fc94 	bl	800d2da <_calloc_r>
 800c9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b4:	60f0      	str	r0, [r6, #12]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e4      	bne.n	800c986 <_Balloc+0x2e>
 800c9bc:	2000      	movs	r0, #0
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	6802      	ldr	r2, [r0, #0]
 800c9c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9cc:	e7f7      	b.n	800c9be <_Balloc+0x66>
 800c9ce:	bf00      	nop
 800c9d0:	08020efe 	.word	0x08020efe
 800c9d4:	08020ffc 	.word	0x08020ffc

0800c9d8 <_Bfree>:
 800c9d8:	b570      	push	{r4, r5, r6, lr}
 800c9da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9dc:	4605      	mov	r5, r0
 800c9de:	460c      	mov	r4, r1
 800c9e0:	b976      	cbnz	r6, 800ca00 <_Bfree+0x28>
 800c9e2:	2010      	movs	r0, #16
 800c9e4:	f7ff ff9e 	bl	800c924 <malloc>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	6268      	str	r0, [r5, #36]	; 0x24
 800c9ec:	b920      	cbnz	r0, 800c9f8 <_Bfree+0x20>
 800c9ee:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <_Bfree+0x3c>)
 800c9f0:	4809      	ldr	r0, [pc, #36]	; (800ca18 <_Bfree+0x40>)
 800c9f2:	218a      	movs	r1, #138	; 0x8a
 800c9f4:	f000 fefe 	bl	800d7f4 <__assert_func>
 800c9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9fc:	6006      	str	r6, [r0, #0]
 800c9fe:	60c6      	str	r6, [r0, #12]
 800ca00:	b13c      	cbz	r4, 800ca12 <_Bfree+0x3a>
 800ca02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca04:	6862      	ldr	r2, [r4, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca0c:	6021      	str	r1, [r4, #0]
 800ca0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	08020efe 	.word	0x08020efe
 800ca18:	08020ffc 	.word	0x08020ffc

0800ca1c <__multadd>:
 800ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca20:	690d      	ldr	r5, [r1, #16]
 800ca22:	4607      	mov	r7, r0
 800ca24:	460c      	mov	r4, r1
 800ca26:	461e      	mov	r6, r3
 800ca28:	f101 0c14 	add.w	ip, r1, #20
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca32:	b299      	uxth	r1, r3
 800ca34:	fb02 6101 	mla	r1, r2, r1, r6
 800ca38:	0c1e      	lsrs	r6, r3, #16
 800ca3a:	0c0b      	lsrs	r3, r1, #16
 800ca3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca40:	b289      	uxth	r1, r1
 800ca42:	3001      	adds	r0, #1
 800ca44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca48:	4285      	cmp	r5, r0
 800ca4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca52:	dcec      	bgt.n	800ca2e <__multadd+0x12>
 800ca54:	b30e      	cbz	r6, 800ca9a <__multadd+0x7e>
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	dc19      	bgt.n	800ca90 <__multadd+0x74>
 800ca5c:	6861      	ldr	r1, [r4, #4]
 800ca5e:	4638      	mov	r0, r7
 800ca60:	3101      	adds	r1, #1
 800ca62:	f7ff ff79 	bl	800c958 <_Balloc>
 800ca66:	4680      	mov	r8, r0
 800ca68:	b928      	cbnz	r0, 800ca76 <__multadd+0x5a>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	4b0c      	ldr	r3, [pc, #48]	; (800caa0 <__multadd+0x84>)
 800ca6e:	480d      	ldr	r0, [pc, #52]	; (800caa4 <__multadd+0x88>)
 800ca70:	21b5      	movs	r1, #181	; 0xb5
 800ca72:	f000 febf 	bl	800d7f4 <__assert_func>
 800ca76:	6922      	ldr	r2, [r4, #16]
 800ca78:	3202      	adds	r2, #2
 800ca7a:	f104 010c 	add.w	r1, r4, #12
 800ca7e:	0092      	lsls	r2, r2, #2
 800ca80:	300c      	adds	r0, #12
 800ca82:	f7fc ffbd 	bl	8009a00 <memcpy>
 800ca86:	4621      	mov	r1, r4
 800ca88:	4638      	mov	r0, r7
 800ca8a:	f7ff ffa5 	bl	800c9d8 <_Bfree>
 800ca8e:	4644      	mov	r4, r8
 800ca90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca94:	3501      	adds	r5, #1
 800ca96:	615e      	str	r6, [r3, #20]
 800ca98:	6125      	str	r5, [r4, #16]
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa0:	08020f70 	.word	0x08020f70
 800caa4:	08020ffc 	.word	0x08020ffc

0800caa8 <__s2b>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	460c      	mov	r4, r1
 800caae:	4615      	mov	r5, r2
 800cab0:	461f      	mov	r7, r3
 800cab2:	2209      	movs	r2, #9
 800cab4:	3308      	adds	r3, #8
 800cab6:	4606      	mov	r6, r0
 800cab8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cabc:	2100      	movs	r1, #0
 800cabe:	2201      	movs	r2, #1
 800cac0:	429a      	cmp	r2, r3
 800cac2:	db09      	blt.n	800cad8 <__s2b+0x30>
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7ff ff47 	bl	800c958 <_Balloc>
 800caca:	b940      	cbnz	r0, 800cade <__s2b+0x36>
 800cacc:	4602      	mov	r2, r0
 800cace:	4b19      	ldr	r3, [pc, #100]	; (800cb34 <__s2b+0x8c>)
 800cad0:	4819      	ldr	r0, [pc, #100]	; (800cb38 <__s2b+0x90>)
 800cad2:	21ce      	movs	r1, #206	; 0xce
 800cad4:	f000 fe8e 	bl	800d7f4 <__assert_func>
 800cad8:	0052      	lsls	r2, r2, #1
 800cada:	3101      	adds	r1, #1
 800cadc:	e7f0      	b.n	800cac0 <__s2b+0x18>
 800cade:	9b08      	ldr	r3, [sp, #32]
 800cae0:	6143      	str	r3, [r0, #20]
 800cae2:	2d09      	cmp	r5, #9
 800cae4:	f04f 0301 	mov.w	r3, #1
 800cae8:	6103      	str	r3, [r0, #16]
 800caea:	dd16      	ble.n	800cb1a <__s2b+0x72>
 800caec:	f104 0909 	add.w	r9, r4, #9
 800caf0:	46c8      	mov	r8, r9
 800caf2:	442c      	add	r4, r5
 800caf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800caf8:	4601      	mov	r1, r0
 800cafa:	3b30      	subs	r3, #48	; 0x30
 800cafc:	220a      	movs	r2, #10
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7ff ff8c 	bl	800ca1c <__multadd>
 800cb04:	45a0      	cmp	r8, r4
 800cb06:	d1f5      	bne.n	800caf4 <__s2b+0x4c>
 800cb08:	f1a5 0408 	sub.w	r4, r5, #8
 800cb0c:	444c      	add	r4, r9
 800cb0e:	1b2d      	subs	r5, r5, r4
 800cb10:	1963      	adds	r3, r4, r5
 800cb12:	42bb      	cmp	r3, r7
 800cb14:	db04      	blt.n	800cb20 <__s2b+0x78>
 800cb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb1a:	340a      	adds	r4, #10
 800cb1c:	2509      	movs	r5, #9
 800cb1e:	e7f6      	b.n	800cb0e <__s2b+0x66>
 800cb20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb24:	4601      	mov	r1, r0
 800cb26:	3b30      	subs	r3, #48	; 0x30
 800cb28:	220a      	movs	r2, #10
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff ff76 	bl	800ca1c <__multadd>
 800cb30:	e7ee      	b.n	800cb10 <__s2b+0x68>
 800cb32:	bf00      	nop
 800cb34:	08020f70 	.word	0x08020f70
 800cb38:	08020ffc 	.word	0x08020ffc

0800cb3c <__hi0bits>:
 800cb3c:	0c03      	lsrs	r3, r0, #16
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	b9d3      	cbnz	r3, 800cb78 <__hi0bits+0x3c>
 800cb42:	0400      	lsls	r0, r0, #16
 800cb44:	2310      	movs	r3, #16
 800cb46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb4a:	bf04      	itt	eq
 800cb4c:	0200      	lsleq	r0, r0, #8
 800cb4e:	3308      	addeq	r3, #8
 800cb50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb54:	bf04      	itt	eq
 800cb56:	0100      	lsleq	r0, r0, #4
 800cb58:	3304      	addeq	r3, #4
 800cb5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb5e:	bf04      	itt	eq
 800cb60:	0080      	lsleq	r0, r0, #2
 800cb62:	3302      	addeq	r3, #2
 800cb64:	2800      	cmp	r0, #0
 800cb66:	db05      	blt.n	800cb74 <__hi0bits+0x38>
 800cb68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb6c:	f103 0301 	add.w	r3, r3, #1
 800cb70:	bf08      	it	eq
 800cb72:	2320      	moveq	r3, #32
 800cb74:	4618      	mov	r0, r3
 800cb76:	4770      	bx	lr
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e7e4      	b.n	800cb46 <__hi0bits+0xa>

0800cb7c <__lo0bits>:
 800cb7c:	6803      	ldr	r3, [r0, #0]
 800cb7e:	f013 0207 	ands.w	r2, r3, #7
 800cb82:	4601      	mov	r1, r0
 800cb84:	d00b      	beq.n	800cb9e <__lo0bits+0x22>
 800cb86:	07da      	lsls	r2, r3, #31
 800cb88:	d423      	bmi.n	800cbd2 <__lo0bits+0x56>
 800cb8a:	0798      	lsls	r0, r3, #30
 800cb8c:	bf49      	itett	mi
 800cb8e:	085b      	lsrmi	r3, r3, #1
 800cb90:	089b      	lsrpl	r3, r3, #2
 800cb92:	2001      	movmi	r0, #1
 800cb94:	600b      	strmi	r3, [r1, #0]
 800cb96:	bf5c      	itt	pl
 800cb98:	600b      	strpl	r3, [r1, #0]
 800cb9a:	2002      	movpl	r0, #2
 800cb9c:	4770      	bx	lr
 800cb9e:	b298      	uxth	r0, r3
 800cba0:	b9a8      	cbnz	r0, 800cbce <__lo0bits+0x52>
 800cba2:	0c1b      	lsrs	r3, r3, #16
 800cba4:	2010      	movs	r0, #16
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	b90a      	cbnz	r2, 800cbae <__lo0bits+0x32>
 800cbaa:	3008      	adds	r0, #8
 800cbac:	0a1b      	lsrs	r3, r3, #8
 800cbae:	071a      	lsls	r2, r3, #28
 800cbb0:	bf04      	itt	eq
 800cbb2:	091b      	lsreq	r3, r3, #4
 800cbb4:	3004      	addeq	r0, #4
 800cbb6:	079a      	lsls	r2, r3, #30
 800cbb8:	bf04      	itt	eq
 800cbba:	089b      	lsreq	r3, r3, #2
 800cbbc:	3002      	addeq	r0, #2
 800cbbe:	07da      	lsls	r2, r3, #31
 800cbc0:	d403      	bmi.n	800cbca <__lo0bits+0x4e>
 800cbc2:	085b      	lsrs	r3, r3, #1
 800cbc4:	f100 0001 	add.w	r0, r0, #1
 800cbc8:	d005      	beq.n	800cbd6 <__lo0bits+0x5a>
 800cbca:	600b      	str	r3, [r1, #0]
 800cbcc:	4770      	bx	lr
 800cbce:	4610      	mov	r0, r2
 800cbd0:	e7e9      	b.n	800cba6 <__lo0bits+0x2a>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	4770      	bx	lr
 800cbd6:	2020      	movs	r0, #32
 800cbd8:	4770      	bx	lr
	...

0800cbdc <__i2b>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	460c      	mov	r4, r1
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	f7ff feb9 	bl	800c958 <_Balloc>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	b928      	cbnz	r0, 800cbf6 <__i2b+0x1a>
 800cbea:	4b05      	ldr	r3, [pc, #20]	; (800cc00 <__i2b+0x24>)
 800cbec:	4805      	ldr	r0, [pc, #20]	; (800cc04 <__i2b+0x28>)
 800cbee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbf2:	f000 fdff 	bl	800d7f4 <__assert_func>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	6144      	str	r4, [r0, #20]
 800cbfa:	6103      	str	r3, [r0, #16]
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	bf00      	nop
 800cc00:	08020f70 	.word	0x08020f70
 800cc04:	08020ffc 	.word	0x08020ffc

0800cc08 <__multiply>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	4691      	mov	r9, r2
 800cc0e:	690a      	ldr	r2, [r1, #16]
 800cc10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	bfb8      	it	lt
 800cc18:	460b      	movlt	r3, r1
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	bfbc      	itt	lt
 800cc1e:	464c      	movlt	r4, r9
 800cc20:	4699      	movlt	r9, r3
 800cc22:	6927      	ldr	r7, [r4, #16]
 800cc24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc28:	68a3      	ldr	r3, [r4, #8]
 800cc2a:	6861      	ldr	r1, [r4, #4]
 800cc2c:	eb07 060a 	add.w	r6, r7, sl
 800cc30:	42b3      	cmp	r3, r6
 800cc32:	b085      	sub	sp, #20
 800cc34:	bfb8      	it	lt
 800cc36:	3101      	addlt	r1, #1
 800cc38:	f7ff fe8e 	bl	800c958 <_Balloc>
 800cc3c:	b930      	cbnz	r0, 800cc4c <__multiply+0x44>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	4b44      	ldr	r3, [pc, #272]	; (800cd54 <__multiply+0x14c>)
 800cc42:	4845      	ldr	r0, [pc, #276]	; (800cd58 <__multiply+0x150>)
 800cc44:	f240 115d 	movw	r1, #349	; 0x15d
 800cc48:	f000 fdd4 	bl	800d7f4 <__assert_func>
 800cc4c:	f100 0514 	add.w	r5, r0, #20
 800cc50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc54:	462b      	mov	r3, r5
 800cc56:	2200      	movs	r2, #0
 800cc58:	4543      	cmp	r3, r8
 800cc5a:	d321      	bcc.n	800cca0 <__multiply+0x98>
 800cc5c:	f104 0314 	add.w	r3, r4, #20
 800cc60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc64:	f109 0314 	add.w	r3, r9, #20
 800cc68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc6c:	9202      	str	r2, [sp, #8]
 800cc6e:	1b3a      	subs	r2, r7, r4
 800cc70:	3a15      	subs	r2, #21
 800cc72:	f022 0203 	bic.w	r2, r2, #3
 800cc76:	3204      	adds	r2, #4
 800cc78:	f104 0115 	add.w	r1, r4, #21
 800cc7c:	428f      	cmp	r7, r1
 800cc7e:	bf38      	it	cc
 800cc80:	2204      	movcc	r2, #4
 800cc82:	9201      	str	r2, [sp, #4]
 800cc84:	9a02      	ldr	r2, [sp, #8]
 800cc86:	9303      	str	r3, [sp, #12]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d80c      	bhi.n	800cca6 <__multiply+0x9e>
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	dd03      	ble.n	800cc98 <__multiply+0x90>
 800cc90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d05a      	beq.n	800cd4e <__multiply+0x146>
 800cc98:	6106      	str	r6, [r0, #16]
 800cc9a:	b005      	add	sp, #20
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	f843 2b04 	str.w	r2, [r3], #4
 800cca4:	e7d8      	b.n	800cc58 <__multiply+0x50>
 800cca6:	f8b3 a000 	ldrh.w	sl, [r3]
 800ccaa:	f1ba 0f00 	cmp.w	sl, #0
 800ccae:	d024      	beq.n	800ccfa <__multiply+0xf2>
 800ccb0:	f104 0e14 	add.w	lr, r4, #20
 800ccb4:	46a9      	mov	r9, r5
 800ccb6:	f04f 0c00 	mov.w	ip, #0
 800ccba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ccbe:	f8d9 1000 	ldr.w	r1, [r9]
 800ccc2:	fa1f fb82 	uxth.w	fp, r2
 800ccc6:	b289      	uxth	r1, r1
 800ccc8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cccc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ccd0:	f8d9 2000 	ldr.w	r2, [r9]
 800ccd4:	4461      	add	r1, ip
 800ccd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccda:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cce2:	b289      	uxth	r1, r1
 800cce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cce8:	4577      	cmp	r7, lr
 800ccea:	f849 1b04 	str.w	r1, [r9], #4
 800ccee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccf2:	d8e2      	bhi.n	800ccba <__multiply+0xb2>
 800ccf4:	9a01      	ldr	r2, [sp, #4]
 800ccf6:	f845 c002 	str.w	ip, [r5, r2]
 800ccfa:	9a03      	ldr	r2, [sp, #12]
 800ccfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd00:	3304      	adds	r3, #4
 800cd02:	f1b9 0f00 	cmp.w	r9, #0
 800cd06:	d020      	beq.n	800cd4a <__multiply+0x142>
 800cd08:	6829      	ldr	r1, [r5, #0]
 800cd0a:	f104 0c14 	add.w	ip, r4, #20
 800cd0e:	46ae      	mov	lr, r5
 800cd10:	f04f 0a00 	mov.w	sl, #0
 800cd14:	f8bc b000 	ldrh.w	fp, [ip]
 800cd18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd1c:	fb09 220b 	mla	r2, r9, fp, r2
 800cd20:	4492      	add	sl, r2
 800cd22:	b289      	uxth	r1, r1
 800cd24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cd28:	f84e 1b04 	str.w	r1, [lr], #4
 800cd2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd30:	f8be 1000 	ldrh.w	r1, [lr]
 800cd34:	0c12      	lsrs	r2, r2, #16
 800cd36:	fb09 1102 	mla	r1, r9, r2, r1
 800cd3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cd3e:	4567      	cmp	r7, ip
 800cd40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd44:	d8e6      	bhi.n	800cd14 <__multiply+0x10c>
 800cd46:	9a01      	ldr	r2, [sp, #4]
 800cd48:	50a9      	str	r1, [r5, r2]
 800cd4a:	3504      	adds	r5, #4
 800cd4c:	e79a      	b.n	800cc84 <__multiply+0x7c>
 800cd4e:	3e01      	subs	r6, #1
 800cd50:	e79c      	b.n	800cc8c <__multiply+0x84>
 800cd52:	bf00      	nop
 800cd54:	08020f70 	.word	0x08020f70
 800cd58:	08020ffc 	.word	0x08020ffc

0800cd5c <__pow5mult>:
 800cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd60:	4615      	mov	r5, r2
 800cd62:	f012 0203 	ands.w	r2, r2, #3
 800cd66:	4606      	mov	r6, r0
 800cd68:	460f      	mov	r7, r1
 800cd6a:	d007      	beq.n	800cd7c <__pow5mult+0x20>
 800cd6c:	4c25      	ldr	r4, [pc, #148]	; (800ce04 <__pow5mult+0xa8>)
 800cd6e:	3a01      	subs	r2, #1
 800cd70:	2300      	movs	r3, #0
 800cd72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd76:	f7ff fe51 	bl	800ca1c <__multadd>
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	10ad      	asrs	r5, r5, #2
 800cd7e:	d03d      	beq.n	800cdfc <__pow5mult+0xa0>
 800cd80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd82:	b97c      	cbnz	r4, 800cda4 <__pow5mult+0x48>
 800cd84:	2010      	movs	r0, #16
 800cd86:	f7ff fdcd 	bl	800c924 <malloc>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	6270      	str	r0, [r6, #36]	; 0x24
 800cd8e:	b928      	cbnz	r0, 800cd9c <__pow5mult+0x40>
 800cd90:	4b1d      	ldr	r3, [pc, #116]	; (800ce08 <__pow5mult+0xac>)
 800cd92:	481e      	ldr	r0, [pc, #120]	; (800ce0c <__pow5mult+0xb0>)
 800cd94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd98:	f000 fd2c 	bl	800d7f4 <__assert_func>
 800cd9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cda0:	6004      	str	r4, [r0, #0]
 800cda2:	60c4      	str	r4, [r0, #12]
 800cda4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cda8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdac:	b94c      	cbnz	r4, 800cdc2 <__pow5mult+0x66>
 800cdae:	f240 2171 	movw	r1, #625	; 0x271
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f7ff ff12 	bl	800cbdc <__i2b>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	f04f 0900 	mov.w	r9, #0
 800cdc6:	07eb      	lsls	r3, r5, #31
 800cdc8:	d50a      	bpl.n	800cde0 <__pow5mult+0x84>
 800cdca:	4639      	mov	r1, r7
 800cdcc:	4622      	mov	r2, r4
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ff1a 	bl	800cc08 <__multiply>
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	4680      	mov	r8, r0
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f7ff fdfd 	bl	800c9d8 <_Bfree>
 800cdde:	4647      	mov	r7, r8
 800cde0:	106d      	asrs	r5, r5, #1
 800cde2:	d00b      	beq.n	800cdfc <__pow5mult+0xa0>
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	b938      	cbnz	r0, 800cdf8 <__pow5mult+0x9c>
 800cde8:	4622      	mov	r2, r4
 800cdea:	4621      	mov	r1, r4
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7ff ff0b 	bl	800cc08 <__multiply>
 800cdf2:	6020      	str	r0, [r4, #0]
 800cdf4:	f8c0 9000 	str.w	r9, [r0]
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	e7e4      	b.n	800cdc6 <__pow5mult+0x6a>
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce02:	bf00      	nop
 800ce04:	08021148 	.word	0x08021148
 800ce08:	08020efe 	.word	0x08020efe
 800ce0c:	08020ffc 	.word	0x08020ffc

0800ce10 <__lshift>:
 800ce10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce14:	460c      	mov	r4, r1
 800ce16:	6849      	ldr	r1, [r1, #4]
 800ce18:	6923      	ldr	r3, [r4, #16]
 800ce1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	4607      	mov	r7, r0
 800ce22:	4691      	mov	r9, r2
 800ce24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce28:	f108 0601 	add.w	r6, r8, #1
 800ce2c:	42b3      	cmp	r3, r6
 800ce2e:	db0b      	blt.n	800ce48 <__lshift+0x38>
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7ff fd91 	bl	800c958 <_Balloc>
 800ce36:	4605      	mov	r5, r0
 800ce38:	b948      	cbnz	r0, 800ce4e <__lshift+0x3e>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	4b2a      	ldr	r3, [pc, #168]	; (800cee8 <__lshift+0xd8>)
 800ce3e:	482b      	ldr	r0, [pc, #172]	; (800ceec <__lshift+0xdc>)
 800ce40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce44:	f000 fcd6 	bl	800d7f4 <__assert_func>
 800ce48:	3101      	adds	r1, #1
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	e7ee      	b.n	800ce2c <__lshift+0x1c>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f100 0114 	add.w	r1, r0, #20
 800ce54:	f100 0210 	add.w	r2, r0, #16
 800ce58:	4618      	mov	r0, r3
 800ce5a:	4553      	cmp	r3, sl
 800ce5c:	db37      	blt.n	800cece <__lshift+0xbe>
 800ce5e:	6920      	ldr	r0, [r4, #16]
 800ce60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce64:	f104 0314 	add.w	r3, r4, #20
 800ce68:	f019 091f 	ands.w	r9, r9, #31
 800ce6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce74:	d02f      	beq.n	800ced6 <__lshift+0xc6>
 800ce76:	f1c9 0e20 	rsb	lr, r9, #32
 800ce7a:	468a      	mov	sl, r1
 800ce7c:	f04f 0c00 	mov.w	ip, #0
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	fa02 f209 	lsl.w	r2, r2, r9
 800ce86:	ea42 020c 	orr.w	r2, r2, ip
 800ce8a:	f84a 2b04 	str.w	r2, [sl], #4
 800ce8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce92:	4298      	cmp	r0, r3
 800ce94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ce98:	d8f2      	bhi.n	800ce80 <__lshift+0x70>
 800ce9a:	1b03      	subs	r3, r0, r4
 800ce9c:	3b15      	subs	r3, #21
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	3304      	adds	r3, #4
 800cea4:	f104 0215 	add.w	r2, r4, #21
 800cea8:	4290      	cmp	r0, r2
 800ceaa:	bf38      	it	cc
 800ceac:	2304      	movcc	r3, #4
 800ceae:	f841 c003 	str.w	ip, [r1, r3]
 800ceb2:	f1bc 0f00 	cmp.w	ip, #0
 800ceb6:	d001      	beq.n	800cebc <__lshift+0xac>
 800ceb8:	f108 0602 	add.w	r6, r8, #2
 800cebc:	3e01      	subs	r6, #1
 800cebe:	4638      	mov	r0, r7
 800cec0:	612e      	str	r6, [r5, #16]
 800cec2:	4621      	mov	r1, r4
 800cec4:	f7ff fd88 	bl	800c9d8 <_Bfree>
 800cec8:	4628      	mov	r0, r5
 800ceca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cece:	f842 0f04 	str.w	r0, [r2, #4]!
 800ced2:	3301      	adds	r3, #1
 800ced4:	e7c1      	b.n	800ce5a <__lshift+0x4a>
 800ced6:	3904      	subs	r1, #4
 800ced8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cedc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cee0:	4298      	cmp	r0, r3
 800cee2:	d8f9      	bhi.n	800ced8 <__lshift+0xc8>
 800cee4:	e7ea      	b.n	800cebc <__lshift+0xac>
 800cee6:	bf00      	nop
 800cee8:	08020f70 	.word	0x08020f70
 800ceec:	08020ffc 	.word	0x08020ffc

0800cef0 <__mcmp>:
 800cef0:	b530      	push	{r4, r5, lr}
 800cef2:	6902      	ldr	r2, [r0, #16]
 800cef4:	690c      	ldr	r4, [r1, #16]
 800cef6:	1b12      	subs	r2, r2, r4
 800cef8:	d10e      	bne.n	800cf18 <__mcmp+0x28>
 800cefa:	f100 0314 	add.w	r3, r0, #20
 800cefe:	3114      	adds	r1, #20
 800cf00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf10:	42a5      	cmp	r5, r4
 800cf12:	d003      	beq.n	800cf1c <__mcmp+0x2c>
 800cf14:	d305      	bcc.n	800cf22 <__mcmp+0x32>
 800cf16:	2201      	movs	r2, #1
 800cf18:	4610      	mov	r0, r2
 800cf1a:	bd30      	pop	{r4, r5, pc}
 800cf1c:	4283      	cmp	r3, r0
 800cf1e:	d3f3      	bcc.n	800cf08 <__mcmp+0x18>
 800cf20:	e7fa      	b.n	800cf18 <__mcmp+0x28>
 800cf22:	f04f 32ff 	mov.w	r2, #4294967295
 800cf26:	e7f7      	b.n	800cf18 <__mcmp+0x28>

0800cf28 <__mdiff>:
 800cf28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	4606      	mov	r6, r0
 800cf30:	4611      	mov	r1, r2
 800cf32:	4620      	mov	r0, r4
 800cf34:	4690      	mov	r8, r2
 800cf36:	f7ff ffdb 	bl	800cef0 <__mcmp>
 800cf3a:	1e05      	subs	r5, r0, #0
 800cf3c:	d110      	bne.n	800cf60 <__mdiff+0x38>
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7ff fd09 	bl	800c958 <_Balloc>
 800cf46:	b930      	cbnz	r0, 800cf56 <__mdiff+0x2e>
 800cf48:	4b3a      	ldr	r3, [pc, #232]	; (800d034 <__mdiff+0x10c>)
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	f240 2132 	movw	r1, #562	; 0x232
 800cf50:	4839      	ldr	r0, [pc, #228]	; (800d038 <__mdiff+0x110>)
 800cf52:	f000 fc4f 	bl	800d7f4 <__assert_func>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf60:	bfa4      	itt	ge
 800cf62:	4643      	movge	r3, r8
 800cf64:	46a0      	movge	r8, r4
 800cf66:	4630      	mov	r0, r6
 800cf68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf6c:	bfa6      	itte	ge
 800cf6e:	461c      	movge	r4, r3
 800cf70:	2500      	movge	r5, #0
 800cf72:	2501      	movlt	r5, #1
 800cf74:	f7ff fcf0 	bl	800c958 <_Balloc>
 800cf78:	b920      	cbnz	r0, 800cf84 <__mdiff+0x5c>
 800cf7a:	4b2e      	ldr	r3, [pc, #184]	; (800d034 <__mdiff+0x10c>)
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf82:	e7e5      	b.n	800cf50 <__mdiff+0x28>
 800cf84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf88:	6926      	ldr	r6, [r4, #16]
 800cf8a:	60c5      	str	r5, [r0, #12]
 800cf8c:	f104 0914 	add.w	r9, r4, #20
 800cf90:	f108 0514 	add.w	r5, r8, #20
 800cf94:	f100 0e14 	add.w	lr, r0, #20
 800cf98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cfa0:	f108 0210 	add.w	r2, r8, #16
 800cfa4:	46f2      	mov	sl, lr
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cfb0:	fa1f f883 	uxth.w	r8, r3
 800cfb4:	fa11 f18b 	uxtah	r1, r1, fp
 800cfb8:	0c1b      	lsrs	r3, r3, #16
 800cfba:	eba1 0808 	sub.w	r8, r1, r8
 800cfbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cfc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cfc6:	fa1f f888 	uxth.w	r8, r8
 800cfca:	1419      	asrs	r1, r3, #16
 800cfcc:	454e      	cmp	r6, r9
 800cfce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cfd2:	f84a 3b04 	str.w	r3, [sl], #4
 800cfd6:	d8e7      	bhi.n	800cfa8 <__mdiff+0x80>
 800cfd8:	1b33      	subs	r3, r6, r4
 800cfda:	3b15      	subs	r3, #21
 800cfdc:	f023 0303 	bic.w	r3, r3, #3
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	3415      	adds	r4, #21
 800cfe4:	42a6      	cmp	r6, r4
 800cfe6:	bf38      	it	cc
 800cfe8:	2304      	movcc	r3, #4
 800cfea:	441d      	add	r5, r3
 800cfec:	4473      	add	r3, lr
 800cfee:	469e      	mov	lr, r3
 800cff0:	462e      	mov	r6, r5
 800cff2:	4566      	cmp	r6, ip
 800cff4:	d30e      	bcc.n	800d014 <__mdiff+0xec>
 800cff6:	f10c 0203 	add.w	r2, ip, #3
 800cffa:	1b52      	subs	r2, r2, r5
 800cffc:	f022 0203 	bic.w	r2, r2, #3
 800d000:	3d03      	subs	r5, #3
 800d002:	45ac      	cmp	ip, r5
 800d004:	bf38      	it	cc
 800d006:	2200      	movcc	r2, #0
 800d008:	441a      	add	r2, r3
 800d00a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d00e:	b17b      	cbz	r3, 800d030 <__mdiff+0x108>
 800d010:	6107      	str	r7, [r0, #16]
 800d012:	e7a3      	b.n	800cf5c <__mdiff+0x34>
 800d014:	f856 8b04 	ldr.w	r8, [r6], #4
 800d018:	fa11 f288 	uxtah	r2, r1, r8
 800d01c:	1414      	asrs	r4, r2, #16
 800d01e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d022:	b292      	uxth	r2, r2
 800d024:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d028:	f84e 2b04 	str.w	r2, [lr], #4
 800d02c:	1421      	asrs	r1, r4, #16
 800d02e:	e7e0      	b.n	800cff2 <__mdiff+0xca>
 800d030:	3f01      	subs	r7, #1
 800d032:	e7ea      	b.n	800d00a <__mdiff+0xe2>
 800d034:	08020f70 	.word	0x08020f70
 800d038:	08020ffc 	.word	0x08020ffc

0800d03c <__ulp>:
 800d03c:	b082      	sub	sp, #8
 800d03e:	ed8d 0b00 	vstr	d0, [sp]
 800d042:	9b01      	ldr	r3, [sp, #4]
 800d044:	4912      	ldr	r1, [pc, #72]	; (800d090 <__ulp+0x54>)
 800d046:	4019      	ands	r1, r3
 800d048:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d04c:	2900      	cmp	r1, #0
 800d04e:	dd05      	ble.n	800d05c <__ulp+0x20>
 800d050:	2200      	movs	r2, #0
 800d052:	460b      	mov	r3, r1
 800d054:	ec43 2b10 	vmov	d0, r2, r3
 800d058:	b002      	add	sp, #8
 800d05a:	4770      	bx	lr
 800d05c:	4249      	negs	r1, r1
 800d05e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d062:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d066:	f04f 0200 	mov.w	r2, #0
 800d06a:	f04f 0300 	mov.w	r3, #0
 800d06e:	da04      	bge.n	800d07a <__ulp+0x3e>
 800d070:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d074:	fa41 f300 	asr.w	r3, r1, r0
 800d078:	e7ec      	b.n	800d054 <__ulp+0x18>
 800d07a:	f1a0 0114 	sub.w	r1, r0, #20
 800d07e:	291e      	cmp	r1, #30
 800d080:	bfda      	itte	le
 800d082:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d086:	fa20 f101 	lsrle.w	r1, r0, r1
 800d08a:	2101      	movgt	r1, #1
 800d08c:	460a      	mov	r2, r1
 800d08e:	e7e1      	b.n	800d054 <__ulp+0x18>
 800d090:	7ff00000 	.word	0x7ff00000

0800d094 <__b2d>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	6905      	ldr	r5, [r0, #16]
 800d098:	f100 0714 	add.w	r7, r0, #20
 800d09c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d0a0:	1f2e      	subs	r6, r5, #4
 800d0a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff fd48 	bl	800cb3c <__hi0bits>
 800d0ac:	f1c0 0320 	rsb	r3, r0, #32
 800d0b0:	280a      	cmp	r0, #10
 800d0b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d130 <__b2d+0x9c>
 800d0b6:	600b      	str	r3, [r1, #0]
 800d0b8:	dc14      	bgt.n	800d0e4 <__b2d+0x50>
 800d0ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800d0be:	fa24 f10e 	lsr.w	r1, r4, lr
 800d0c2:	42b7      	cmp	r7, r6
 800d0c4:	ea41 030c 	orr.w	r3, r1, ip
 800d0c8:	bf34      	ite	cc
 800d0ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d0ce:	2100      	movcs	r1, #0
 800d0d0:	3015      	adds	r0, #21
 800d0d2:	fa04 f000 	lsl.w	r0, r4, r0
 800d0d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d0da:	ea40 0201 	orr.w	r2, r0, r1
 800d0de:	ec43 2b10 	vmov	d0, r2, r3
 800d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e4:	42b7      	cmp	r7, r6
 800d0e6:	bf3a      	itte	cc
 800d0e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d0ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800d0f0:	2100      	movcs	r1, #0
 800d0f2:	380b      	subs	r0, #11
 800d0f4:	d017      	beq.n	800d126 <__b2d+0x92>
 800d0f6:	f1c0 0c20 	rsb	ip, r0, #32
 800d0fa:	fa04 f500 	lsl.w	r5, r4, r0
 800d0fe:	42be      	cmp	r6, r7
 800d100:	fa21 f40c 	lsr.w	r4, r1, ip
 800d104:	ea45 0504 	orr.w	r5, r5, r4
 800d108:	bf8c      	ite	hi
 800d10a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d10e:	2400      	movls	r4, #0
 800d110:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d114:	fa01 f000 	lsl.w	r0, r1, r0
 800d118:	fa24 f40c 	lsr.w	r4, r4, ip
 800d11c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d120:	ea40 0204 	orr.w	r2, r0, r4
 800d124:	e7db      	b.n	800d0de <__b2d+0x4a>
 800d126:	ea44 030c 	orr.w	r3, r4, ip
 800d12a:	460a      	mov	r2, r1
 800d12c:	e7d7      	b.n	800d0de <__b2d+0x4a>
 800d12e:	bf00      	nop
 800d130:	3ff00000 	.word	0x3ff00000

0800d134 <__d2b>:
 800d134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d138:	4689      	mov	r9, r1
 800d13a:	2101      	movs	r1, #1
 800d13c:	ec57 6b10 	vmov	r6, r7, d0
 800d140:	4690      	mov	r8, r2
 800d142:	f7ff fc09 	bl	800c958 <_Balloc>
 800d146:	4604      	mov	r4, r0
 800d148:	b930      	cbnz	r0, 800d158 <__d2b+0x24>
 800d14a:	4602      	mov	r2, r0
 800d14c:	4b25      	ldr	r3, [pc, #148]	; (800d1e4 <__d2b+0xb0>)
 800d14e:	4826      	ldr	r0, [pc, #152]	; (800d1e8 <__d2b+0xb4>)
 800d150:	f240 310a 	movw	r1, #778	; 0x30a
 800d154:	f000 fb4e 	bl	800d7f4 <__assert_func>
 800d158:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d15c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d160:	bb35      	cbnz	r5, 800d1b0 <__d2b+0x7c>
 800d162:	2e00      	cmp	r6, #0
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	d028      	beq.n	800d1ba <__d2b+0x86>
 800d168:	4668      	mov	r0, sp
 800d16a:	9600      	str	r6, [sp, #0]
 800d16c:	f7ff fd06 	bl	800cb7c <__lo0bits>
 800d170:	9900      	ldr	r1, [sp, #0]
 800d172:	b300      	cbz	r0, 800d1b6 <__d2b+0x82>
 800d174:	9a01      	ldr	r2, [sp, #4]
 800d176:	f1c0 0320 	rsb	r3, r0, #32
 800d17a:	fa02 f303 	lsl.w	r3, r2, r3
 800d17e:	430b      	orrs	r3, r1
 800d180:	40c2      	lsrs	r2, r0
 800d182:	6163      	str	r3, [r4, #20]
 800d184:	9201      	str	r2, [sp, #4]
 800d186:	9b01      	ldr	r3, [sp, #4]
 800d188:	61a3      	str	r3, [r4, #24]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	bf14      	ite	ne
 800d18e:	2202      	movne	r2, #2
 800d190:	2201      	moveq	r2, #1
 800d192:	6122      	str	r2, [r4, #16]
 800d194:	b1d5      	cbz	r5, 800d1cc <__d2b+0x98>
 800d196:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d19a:	4405      	add	r5, r0
 800d19c:	f8c9 5000 	str.w	r5, [r9]
 800d1a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1a4:	f8c8 0000 	str.w	r0, [r8]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	b003      	add	sp, #12
 800d1ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1b4:	e7d5      	b.n	800d162 <__d2b+0x2e>
 800d1b6:	6161      	str	r1, [r4, #20]
 800d1b8:	e7e5      	b.n	800d186 <__d2b+0x52>
 800d1ba:	a801      	add	r0, sp, #4
 800d1bc:	f7ff fcde 	bl	800cb7c <__lo0bits>
 800d1c0:	9b01      	ldr	r3, [sp, #4]
 800d1c2:	6163      	str	r3, [r4, #20]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	6122      	str	r2, [r4, #16]
 800d1c8:	3020      	adds	r0, #32
 800d1ca:	e7e3      	b.n	800d194 <__d2b+0x60>
 800d1cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d1d4:	f8c9 0000 	str.w	r0, [r9]
 800d1d8:	6918      	ldr	r0, [r3, #16]
 800d1da:	f7ff fcaf 	bl	800cb3c <__hi0bits>
 800d1de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1e2:	e7df      	b.n	800d1a4 <__d2b+0x70>
 800d1e4:	08020f70 	.word	0x08020f70
 800d1e8:	08020ffc 	.word	0x08020ffc

0800d1ec <__ratio>:
 800d1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	4688      	mov	r8, r1
 800d1f2:	4669      	mov	r1, sp
 800d1f4:	4681      	mov	r9, r0
 800d1f6:	f7ff ff4d 	bl	800d094 <__b2d>
 800d1fa:	a901      	add	r1, sp, #4
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	ec55 4b10 	vmov	r4, r5, d0
 800d202:	f7ff ff47 	bl	800d094 <__b2d>
 800d206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d20a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d20e:	eba3 0c02 	sub.w	ip, r3, r2
 800d212:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d216:	1a9b      	subs	r3, r3, r2
 800d218:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d21c:	ec51 0b10 	vmov	r0, r1, d0
 800d220:	2b00      	cmp	r3, #0
 800d222:	bfd6      	itet	le
 800d224:	460a      	movle	r2, r1
 800d226:	462a      	movgt	r2, r5
 800d228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d22c:	468b      	mov	fp, r1
 800d22e:	462f      	mov	r7, r5
 800d230:	bfd4      	ite	le
 800d232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d236:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d23a:	4620      	mov	r0, r4
 800d23c:	ee10 2a10 	vmov	r2, s0
 800d240:	465b      	mov	r3, fp
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fb02 	bl	800084c <__aeabi_ddiv>
 800d248:	ec41 0b10 	vmov	d0, r0, r1
 800d24c:	b003      	add	sp, #12
 800d24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d252 <__copybits>:
 800d252:	3901      	subs	r1, #1
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	1149      	asrs	r1, r1, #5
 800d258:	6914      	ldr	r4, [r2, #16]
 800d25a:	3101      	adds	r1, #1
 800d25c:	f102 0314 	add.w	r3, r2, #20
 800d260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d268:	1f05      	subs	r5, r0, #4
 800d26a:	42a3      	cmp	r3, r4
 800d26c:	d30c      	bcc.n	800d288 <__copybits+0x36>
 800d26e:	1aa3      	subs	r3, r4, r2
 800d270:	3b11      	subs	r3, #17
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	3211      	adds	r2, #17
 800d278:	42a2      	cmp	r2, r4
 800d27a:	bf88      	it	hi
 800d27c:	2300      	movhi	r3, #0
 800d27e:	4418      	add	r0, r3
 800d280:	2300      	movs	r3, #0
 800d282:	4288      	cmp	r0, r1
 800d284:	d305      	bcc.n	800d292 <__copybits+0x40>
 800d286:	bd70      	pop	{r4, r5, r6, pc}
 800d288:	f853 6b04 	ldr.w	r6, [r3], #4
 800d28c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d290:	e7eb      	b.n	800d26a <__copybits+0x18>
 800d292:	f840 3b04 	str.w	r3, [r0], #4
 800d296:	e7f4      	b.n	800d282 <__copybits+0x30>

0800d298 <__any_on>:
 800d298:	f100 0214 	add.w	r2, r0, #20
 800d29c:	6900      	ldr	r0, [r0, #16]
 800d29e:	114b      	asrs	r3, r1, #5
 800d2a0:	4298      	cmp	r0, r3
 800d2a2:	b510      	push	{r4, lr}
 800d2a4:	db11      	blt.n	800d2ca <__any_on+0x32>
 800d2a6:	dd0a      	ble.n	800d2be <__any_on+0x26>
 800d2a8:	f011 011f 	ands.w	r1, r1, #31
 800d2ac:	d007      	beq.n	800d2be <__any_on+0x26>
 800d2ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2b2:	fa24 f001 	lsr.w	r0, r4, r1
 800d2b6:	fa00 f101 	lsl.w	r1, r0, r1
 800d2ba:	428c      	cmp	r4, r1
 800d2bc:	d10b      	bne.n	800d2d6 <__any_on+0x3e>
 800d2be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d803      	bhi.n	800d2ce <__any_on+0x36>
 800d2c6:	2000      	movs	r0, #0
 800d2c8:	bd10      	pop	{r4, pc}
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	e7f7      	b.n	800d2be <__any_on+0x26>
 800d2ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2d2:	2900      	cmp	r1, #0
 800d2d4:	d0f5      	beq.n	800d2c2 <__any_on+0x2a>
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	e7f6      	b.n	800d2c8 <__any_on+0x30>

0800d2da <_calloc_r>:
 800d2da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2dc:	fba1 2402 	umull	r2, r4, r1, r2
 800d2e0:	b94c      	cbnz	r4, 800d2f6 <_calloc_r+0x1c>
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	9201      	str	r2, [sp, #4]
 800d2e6:	f000 f87b 	bl	800d3e0 <_malloc_r>
 800d2ea:	9a01      	ldr	r2, [sp, #4]
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	b930      	cbnz	r0, 800d2fe <_calloc_r+0x24>
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	b003      	add	sp, #12
 800d2f4:	bd30      	pop	{r4, r5, pc}
 800d2f6:	220c      	movs	r2, #12
 800d2f8:	6002      	str	r2, [r0, #0]
 800d2fa:	2500      	movs	r5, #0
 800d2fc:	e7f8      	b.n	800d2f0 <_calloc_r+0x16>
 800d2fe:	4621      	mov	r1, r4
 800d300:	f7fc fb8c 	bl	8009a1c <memset>
 800d304:	e7f4      	b.n	800d2f0 <_calloc_r+0x16>
	...

0800d308 <_free_r>:
 800d308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d30a:	2900      	cmp	r1, #0
 800d30c:	d044      	beq.n	800d398 <_free_r+0x90>
 800d30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d312:	9001      	str	r0, [sp, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	f1a1 0404 	sub.w	r4, r1, #4
 800d31a:	bfb8      	it	lt
 800d31c:	18e4      	addlt	r4, r4, r3
 800d31e:	f000 fab3 	bl	800d888 <__malloc_lock>
 800d322:	4a1e      	ldr	r2, [pc, #120]	; (800d39c <_free_r+0x94>)
 800d324:	9801      	ldr	r0, [sp, #4]
 800d326:	6813      	ldr	r3, [r2, #0]
 800d328:	b933      	cbnz	r3, 800d338 <_free_r+0x30>
 800d32a:	6063      	str	r3, [r4, #4]
 800d32c:	6014      	str	r4, [r2, #0]
 800d32e:	b003      	add	sp, #12
 800d330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d334:	f000 baae 	b.w	800d894 <__malloc_unlock>
 800d338:	42a3      	cmp	r3, r4
 800d33a:	d908      	bls.n	800d34e <_free_r+0x46>
 800d33c:	6825      	ldr	r5, [r4, #0]
 800d33e:	1961      	adds	r1, r4, r5
 800d340:	428b      	cmp	r3, r1
 800d342:	bf01      	itttt	eq
 800d344:	6819      	ldreq	r1, [r3, #0]
 800d346:	685b      	ldreq	r3, [r3, #4]
 800d348:	1949      	addeq	r1, r1, r5
 800d34a:	6021      	streq	r1, [r4, #0]
 800d34c:	e7ed      	b.n	800d32a <_free_r+0x22>
 800d34e:	461a      	mov	r2, r3
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	b10b      	cbz	r3, 800d358 <_free_r+0x50>
 800d354:	42a3      	cmp	r3, r4
 800d356:	d9fa      	bls.n	800d34e <_free_r+0x46>
 800d358:	6811      	ldr	r1, [r2, #0]
 800d35a:	1855      	adds	r5, r2, r1
 800d35c:	42a5      	cmp	r5, r4
 800d35e:	d10b      	bne.n	800d378 <_free_r+0x70>
 800d360:	6824      	ldr	r4, [r4, #0]
 800d362:	4421      	add	r1, r4
 800d364:	1854      	adds	r4, r2, r1
 800d366:	42a3      	cmp	r3, r4
 800d368:	6011      	str	r1, [r2, #0]
 800d36a:	d1e0      	bne.n	800d32e <_free_r+0x26>
 800d36c:	681c      	ldr	r4, [r3, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	6053      	str	r3, [r2, #4]
 800d372:	4421      	add	r1, r4
 800d374:	6011      	str	r1, [r2, #0]
 800d376:	e7da      	b.n	800d32e <_free_r+0x26>
 800d378:	d902      	bls.n	800d380 <_free_r+0x78>
 800d37a:	230c      	movs	r3, #12
 800d37c:	6003      	str	r3, [r0, #0]
 800d37e:	e7d6      	b.n	800d32e <_free_r+0x26>
 800d380:	6825      	ldr	r5, [r4, #0]
 800d382:	1961      	adds	r1, r4, r5
 800d384:	428b      	cmp	r3, r1
 800d386:	bf04      	itt	eq
 800d388:	6819      	ldreq	r1, [r3, #0]
 800d38a:	685b      	ldreq	r3, [r3, #4]
 800d38c:	6063      	str	r3, [r4, #4]
 800d38e:	bf04      	itt	eq
 800d390:	1949      	addeq	r1, r1, r5
 800d392:	6021      	streq	r1, [r4, #0]
 800d394:	6054      	str	r4, [r2, #4]
 800d396:	e7ca      	b.n	800d32e <_free_r+0x26>
 800d398:	b003      	add	sp, #12
 800d39a:	bd30      	pop	{r4, r5, pc}
 800d39c:	20000928 	.word	0x20000928

0800d3a0 <sbrk_aligned>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4e0e      	ldr	r6, [pc, #56]	; (800d3dc <sbrk_aligned+0x3c>)
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	6831      	ldr	r1, [r6, #0]
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	b911      	cbnz	r1, 800d3b2 <sbrk_aligned+0x12>
 800d3ac:	f000 f9f0 	bl	800d790 <_sbrk_r>
 800d3b0:	6030      	str	r0, [r6, #0]
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f000 f9eb 	bl	800d790 <_sbrk_r>
 800d3ba:	1c43      	adds	r3, r0, #1
 800d3bc:	d00a      	beq.n	800d3d4 <sbrk_aligned+0x34>
 800d3be:	1cc4      	adds	r4, r0, #3
 800d3c0:	f024 0403 	bic.w	r4, r4, #3
 800d3c4:	42a0      	cmp	r0, r4
 800d3c6:	d007      	beq.n	800d3d8 <sbrk_aligned+0x38>
 800d3c8:	1a21      	subs	r1, r4, r0
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f000 f9e0 	bl	800d790 <_sbrk_r>
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	d101      	bne.n	800d3d8 <sbrk_aligned+0x38>
 800d3d4:	f04f 34ff 	mov.w	r4, #4294967295
 800d3d8:	4620      	mov	r0, r4
 800d3da:	bd70      	pop	{r4, r5, r6, pc}
 800d3dc:	2000092c 	.word	0x2000092c

0800d3e0 <_malloc_r>:
 800d3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e4:	1ccd      	adds	r5, r1, #3
 800d3e6:	f025 0503 	bic.w	r5, r5, #3
 800d3ea:	3508      	adds	r5, #8
 800d3ec:	2d0c      	cmp	r5, #12
 800d3ee:	bf38      	it	cc
 800d3f0:	250c      	movcc	r5, #12
 800d3f2:	2d00      	cmp	r5, #0
 800d3f4:	4607      	mov	r7, r0
 800d3f6:	db01      	blt.n	800d3fc <_malloc_r+0x1c>
 800d3f8:	42a9      	cmp	r1, r5
 800d3fa:	d905      	bls.n	800d408 <_malloc_r+0x28>
 800d3fc:	230c      	movs	r3, #12
 800d3fe:	603b      	str	r3, [r7, #0]
 800d400:	2600      	movs	r6, #0
 800d402:	4630      	mov	r0, r6
 800d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d408:	4e2e      	ldr	r6, [pc, #184]	; (800d4c4 <_malloc_r+0xe4>)
 800d40a:	f000 fa3d 	bl	800d888 <__malloc_lock>
 800d40e:	6833      	ldr	r3, [r6, #0]
 800d410:	461c      	mov	r4, r3
 800d412:	bb34      	cbnz	r4, 800d462 <_malloc_r+0x82>
 800d414:	4629      	mov	r1, r5
 800d416:	4638      	mov	r0, r7
 800d418:	f7ff ffc2 	bl	800d3a0 <sbrk_aligned>
 800d41c:	1c43      	adds	r3, r0, #1
 800d41e:	4604      	mov	r4, r0
 800d420:	d14d      	bne.n	800d4be <_malloc_r+0xde>
 800d422:	6834      	ldr	r4, [r6, #0]
 800d424:	4626      	mov	r6, r4
 800d426:	2e00      	cmp	r6, #0
 800d428:	d140      	bne.n	800d4ac <_malloc_r+0xcc>
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	4631      	mov	r1, r6
 800d42e:	4638      	mov	r0, r7
 800d430:	eb04 0803 	add.w	r8, r4, r3
 800d434:	f000 f9ac 	bl	800d790 <_sbrk_r>
 800d438:	4580      	cmp	r8, r0
 800d43a:	d13a      	bne.n	800d4b2 <_malloc_r+0xd2>
 800d43c:	6821      	ldr	r1, [r4, #0]
 800d43e:	3503      	adds	r5, #3
 800d440:	1a6d      	subs	r5, r5, r1
 800d442:	f025 0503 	bic.w	r5, r5, #3
 800d446:	3508      	adds	r5, #8
 800d448:	2d0c      	cmp	r5, #12
 800d44a:	bf38      	it	cc
 800d44c:	250c      	movcc	r5, #12
 800d44e:	4629      	mov	r1, r5
 800d450:	4638      	mov	r0, r7
 800d452:	f7ff ffa5 	bl	800d3a0 <sbrk_aligned>
 800d456:	3001      	adds	r0, #1
 800d458:	d02b      	beq.n	800d4b2 <_malloc_r+0xd2>
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	442b      	add	r3, r5
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	e00e      	b.n	800d480 <_malloc_r+0xa0>
 800d462:	6822      	ldr	r2, [r4, #0]
 800d464:	1b52      	subs	r2, r2, r5
 800d466:	d41e      	bmi.n	800d4a6 <_malloc_r+0xc6>
 800d468:	2a0b      	cmp	r2, #11
 800d46a:	d916      	bls.n	800d49a <_malloc_r+0xba>
 800d46c:	1961      	adds	r1, r4, r5
 800d46e:	42a3      	cmp	r3, r4
 800d470:	6025      	str	r5, [r4, #0]
 800d472:	bf18      	it	ne
 800d474:	6059      	strne	r1, [r3, #4]
 800d476:	6863      	ldr	r3, [r4, #4]
 800d478:	bf08      	it	eq
 800d47a:	6031      	streq	r1, [r6, #0]
 800d47c:	5162      	str	r2, [r4, r5]
 800d47e:	604b      	str	r3, [r1, #4]
 800d480:	4638      	mov	r0, r7
 800d482:	f104 060b 	add.w	r6, r4, #11
 800d486:	f000 fa05 	bl	800d894 <__malloc_unlock>
 800d48a:	f026 0607 	bic.w	r6, r6, #7
 800d48e:	1d23      	adds	r3, r4, #4
 800d490:	1af2      	subs	r2, r6, r3
 800d492:	d0b6      	beq.n	800d402 <_malloc_r+0x22>
 800d494:	1b9b      	subs	r3, r3, r6
 800d496:	50a3      	str	r3, [r4, r2]
 800d498:	e7b3      	b.n	800d402 <_malloc_r+0x22>
 800d49a:	6862      	ldr	r2, [r4, #4]
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	bf0c      	ite	eq
 800d4a0:	6032      	streq	r2, [r6, #0]
 800d4a2:	605a      	strne	r2, [r3, #4]
 800d4a4:	e7ec      	b.n	800d480 <_malloc_r+0xa0>
 800d4a6:	4623      	mov	r3, r4
 800d4a8:	6864      	ldr	r4, [r4, #4]
 800d4aa:	e7b2      	b.n	800d412 <_malloc_r+0x32>
 800d4ac:	4634      	mov	r4, r6
 800d4ae:	6876      	ldr	r6, [r6, #4]
 800d4b0:	e7b9      	b.n	800d426 <_malloc_r+0x46>
 800d4b2:	230c      	movs	r3, #12
 800d4b4:	603b      	str	r3, [r7, #0]
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	f000 f9ec 	bl	800d894 <__malloc_unlock>
 800d4bc:	e7a1      	b.n	800d402 <_malloc_r+0x22>
 800d4be:	6025      	str	r5, [r4, #0]
 800d4c0:	e7de      	b.n	800d480 <_malloc_r+0xa0>
 800d4c2:	bf00      	nop
 800d4c4:	20000928 	.word	0x20000928

0800d4c8 <__ssputs_r>:
 800d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4cc:	688e      	ldr	r6, [r1, #8]
 800d4ce:	429e      	cmp	r6, r3
 800d4d0:	4682      	mov	sl, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	4690      	mov	r8, r2
 800d4d6:	461f      	mov	r7, r3
 800d4d8:	d838      	bhi.n	800d54c <__ssputs_r+0x84>
 800d4da:	898a      	ldrh	r2, [r1, #12]
 800d4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4e0:	d032      	beq.n	800d548 <__ssputs_r+0x80>
 800d4e2:	6825      	ldr	r5, [r4, #0]
 800d4e4:	6909      	ldr	r1, [r1, #16]
 800d4e6:	eba5 0901 	sub.w	r9, r5, r1
 800d4ea:	6965      	ldr	r5, [r4, #20]
 800d4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	444b      	add	r3, r9
 800d4f8:	106d      	asrs	r5, r5, #1
 800d4fa:	429d      	cmp	r5, r3
 800d4fc:	bf38      	it	cc
 800d4fe:	461d      	movcc	r5, r3
 800d500:	0553      	lsls	r3, r2, #21
 800d502:	d531      	bpl.n	800d568 <__ssputs_r+0xa0>
 800d504:	4629      	mov	r1, r5
 800d506:	f7ff ff6b 	bl	800d3e0 <_malloc_r>
 800d50a:	4606      	mov	r6, r0
 800d50c:	b950      	cbnz	r0, 800d524 <__ssputs_r+0x5c>
 800d50e:	230c      	movs	r3, #12
 800d510:	f8ca 3000 	str.w	r3, [sl]
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d524:	6921      	ldr	r1, [r4, #16]
 800d526:	464a      	mov	r2, r9
 800d528:	f7fc fa6a 	bl	8009a00 <memcpy>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	6126      	str	r6, [r4, #16]
 800d53a:	6165      	str	r5, [r4, #20]
 800d53c:	444e      	add	r6, r9
 800d53e:	eba5 0509 	sub.w	r5, r5, r9
 800d542:	6026      	str	r6, [r4, #0]
 800d544:	60a5      	str	r5, [r4, #8]
 800d546:	463e      	mov	r6, r7
 800d548:	42be      	cmp	r6, r7
 800d54a:	d900      	bls.n	800d54e <__ssputs_r+0x86>
 800d54c:	463e      	mov	r6, r7
 800d54e:	6820      	ldr	r0, [r4, #0]
 800d550:	4632      	mov	r2, r6
 800d552:	4641      	mov	r1, r8
 800d554:	f000 f97e 	bl	800d854 <memmove>
 800d558:	68a3      	ldr	r3, [r4, #8]
 800d55a:	1b9b      	subs	r3, r3, r6
 800d55c:	60a3      	str	r3, [r4, #8]
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	4433      	add	r3, r6
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	2000      	movs	r0, #0
 800d566:	e7db      	b.n	800d520 <__ssputs_r+0x58>
 800d568:	462a      	mov	r2, r5
 800d56a:	f000 f999 	bl	800d8a0 <_realloc_r>
 800d56e:	4606      	mov	r6, r0
 800d570:	2800      	cmp	r0, #0
 800d572:	d1e1      	bne.n	800d538 <__ssputs_r+0x70>
 800d574:	6921      	ldr	r1, [r4, #16]
 800d576:	4650      	mov	r0, sl
 800d578:	f7ff fec6 	bl	800d308 <_free_r>
 800d57c:	e7c7      	b.n	800d50e <__ssputs_r+0x46>
	...

0800d580 <_svfiprintf_r>:
 800d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d584:	4698      	mov	r8, r3
 800d586:	898b      	ldrh	r3, [r1, #12]
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	b09d      	sub	sp, #116	; 0x74
 800d58c:	4607      	mov	r7, r0
 800d58e:	460d      	mov	r5, r1
 800d590:	4614      	mov	r4, r2
 800d592:	d50e      	bpl.n	800d5b2 <_svfiprintf_r+0x32>
 800d594:	690b      	ldr	r3, [r1, #16]
 800d596:	b963      	cbnz	r3, 800d5b2 <_svfiprintf_r+0x32>
 800d598:	2140      	movs	r1, #64	; 0x40
 800d59a:	f7ff ff21 	bl	800d3e0 <_malloc_r>
 800d59e:	6028      	str	r0, [r5, #0]
 800d5a0:	6128      	str	r0, [r5, #16]
 800d5a2:	b920      	cbnz	r0, 800d5ae <_svfiprintf_r+0x2e>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	603b      	str	r3, [r7, #0]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	e0d1      	b.n	800d752 <_svfiprintf_r+0x1d2>
 800d5ae:	2340      	movs	r3, #64	; 0x40
 800d5b0:	616b      	str	r3, [r5, #20]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b6:	2320      	movs	r3, #32
 800d5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5c0:	2330      	movs	r3, #48	; 0x30
 800d5c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d76c <_svfiprintf_r+0x1ec>
 800d5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ca:	f04f 0901 	mov.w	r9, #1
 800d5ce:	4623      	mov	r3, r4
 800d5d0:	469a      	mov	sl, r3
 800d5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5d6:	b10a      	cbz	r2, 800d5dc <_svfiprintf_r+0x5c>
 800d5d8:	2a25      	cmp	r2, #37	; 0x25
 800d5da:	d1f9      	bne.n	800d5d0 <_svfiprintf_r+0x50>
 800d5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5e0:	d00b      	beq.n	800d5fa <_svfiprintf_r+0x7a>
 800d5e2:	465b      	mov	r3, fp
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f7ff ff6d 	bl	800d4c8 <__ssputs_r>
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	f000 80aa 	beq.w	800d748 <_svfiprintf_r+0x1c8>
 800d5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5f6:	445a      	add	r2, fp
 800d5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 80a2 	beq.w	800d748 <_svfiprintf_r+0x1c8>
 800d604:	2300      	movs	r3, #0
 800d606:	f04f 32ff 	mov.w	r2, #4294967295
 800d60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d60e:	f10a 0a01 	add.w	sl, sl, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	9307      	str	r3, [sp, #28]
 800d616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d61a:	931a      	str	r3, [sp, #104]	; 0x68
 800d61c:	4654      	mov	r4, sl
 800d61e:	2205      	movs	r2, #5
 800d620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d624:	4851      	ldr	r0, [pc, #324]	; (800d76c <_svfiprintf_r+0x1ec>)
 800d626:	f7f2 fddb 	bl	80001e0 <memchr>
 800d62a:	9a04      	ldr	r2, [sp, #16]
 800d62c:	b9d8      	cbnz	r0, 800d666 <_svfiprintf_r+0xe6>
 800d62e:	06d0      	lsls	r0, r2, #27
 800d630:	bf44      	itt	mi
 800d632:	2320      	movmi	r3, #32
 800d634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d638:	0711      	lsls	r1, r2, #28
 800d63a:	bf44      	itt	mi
 800d63c:	232b      	movmi	r3, #43	; 0x2b
 800d63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b2a      	cmp	r3, #42	; 0x2a
 800d648:	d015      	beq.n	800d676 <_svfiprintf_r+0xf6>
 800d64a:	9a07      	ldr	r2, [sp, #28]
 800d64c:	4654      	mov	r4, sl
 800d64e:	2000      	movs	r0, #0
 800d650:	f04f 0c0a 	mov.w	ip, #10
 800d654:	4621      	mov	r1, r4
 800d656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d65a:	3b30      	subs	r3, #48	; 0x30
 800d65c:	2b09      	cmp	r3, #9
 800d65e:	d94e      	bls.n	800d6fe <_svfiprintf_r+0x17e>
 800d660:	b1b0      	cbz	r0, 800d690 <_svfiprintf_r+0x110>
 800d662:	9207      	str	r2, [sp, #28]
 800d664:	e014      	b.n	800d690 <_svfiprintf_r+0x110>
 800d666:	eba0 0308 	sub.w	r3, r0, r8
 800d66a:	fa09 f303 	lsl.w	r3, r9, r3
 800d66e:	4313      	orrs	r3, r2
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	46a2      	mov	sl, r4
 800d674:	e7d2      	b.n	800d61c <_svfiprintf_r+0x9c>
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	1d19      	adds	r1, r3, #4
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	9103      	str	r1, [sp, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	bfbb      	ittet	lt
 800d682:	425b      	neglt	r3, r3
 800d684:	f042 0202 	orrlt.w	r2, r2, #2
 800d688:	9307      	strge	r3, [sp, #28]
 800d68a:	9307      	strlt	r3, [sp, #28]
 800d68c:	bfb8      	it	lt
 800d68e:	9204      	strlt	r2, [sp, #16]
 800d690:	7823      	ldrb	r3, [r4, #0]
 800d692:	2b2e      	cmp	r3, #46	; 0x2e
 800d694:	d10c      	bne.n	800d6b0 <_svfiprintf_r+0x130>
 800d696:	7863      	ldrb	r3, [r4, #1]
 800d698:	2b2a      	cmp	r3, #42	; 0x2a
 800d69a:	d135      	bne.n	800d708 <_svfiprintf_r+0x188>
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	1d1a      	adds	r2, r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	9203      	str	r2, [sp, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfb8      	it	lt
 800d6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ac:	3402      	adds	r4, #2
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d77c <_svfiprintf_r+0x1fc>
 800d6b4:	7821      	ldrb	r1, [r4, #0]
 800d6b6:	2203      	movs	r2, #3
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	f7f2 fd91 	bl	80001e0 <memchr>
 800d6be:	b140      	cbz	r0, 800d6d2 <_svfiprintf_r+0x152>
 800d6c0:	2340      	movs	r3, #64	; 0x40
 800d6c2:	eba0 000a 	sub.w	r0, r0, sl
 800d6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	4303      	orrs	r3, r0
 800d6ce:	3401      	adds	r4, #1
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d6:	4826      	ldr	r0, [pc, #152]	; (800d770 <_svfiprintf_r+0x1f0>)
 800d6d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6dc:	2206      	movs	r2, #6
 800d6de:	f7f2 fd7f 	bl	80001e0 <memchr>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d038      	beq.n	800d758 <_svfiprintf_r+0x1d8>
 800d6e6:	4b23      	ldr	r3, [pc, #140]	; (800d774 <_svfiprintf_r+0x1f4>)
 800d6e8:	bb1b      	cbnz	r3, 800d732 <_svfiprintf_r+0x1b2>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	3307      	adds	r3, #7
 800d6ee:	f023 0307 	bic.w	r3, r3, #7
 800d6f2:	3308      	adds	r3, #8
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f8:	4433      	add	r3, r6
 800d6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d6fc:	e767      	b.n	800d5ce <_svfiprintf_r+0x4e>
 800d6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d702:	460c      	mov	r4, r1
 800d704:	2001      	movs	r0, #1
 800d706:	e7a5      	b.n	800d654 <_svfiprintf_r+0xd4>
 800d708:	2300      	movs	r3, #0
 800d70a:	3401      	adds	r4, #1
 800d70c:	9305      	str	r3, [sp, #20]
 800d70e:	4619      	mov	r1, r3
 800d710:	f04f 0c0a 	mov.w	ip, #10
 800d714:	4620      	mov	r0, r4
 800d716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d71a:	3a30      	subs	r2, #48	; 0x30
 800d71c:	2a09      	cmp	r2, #9
 800d71e:	d903      	bls.n	800d728 <_svfiprintf_r+0x1a8>
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0c5      	beq.n	800d6b0 <_svfiprintf_r+0x130>
 800d724:	9105      	str	r1, [sp, #20]
 800d726:	e7c3      	b.n	800d6b0 <_svfiprintf_r+0x130>
 800d728:	fb0c 2101 	mla	r1, ip, r1, r2
 800d72c:	4604      	mov	r4, r0
 800d72e:	2301      	movs	r3, #1
 800d730:	e7f0      	b.n	800d714 <_svfiprintf_r+0x194>
 800d732:	ab03      	add	r3, sp, #12
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	462a      	mov	r2, r5
 800d738:	4b0f      	ldr	r3, [pc, #60]	; (800d778 <_svfiprintf_r+0x1f8>)
 800d73a:	a904      	add	r1, sp, #16
 800d73c:	4638      	mov	r0, r7
 800d73e:	f7fc fa15 	bl	8009b6c <_printf_float>
 800d742:	1c42      	adds	r2, r0, #1
 800d744:	4606      	mov	r6, r0
 800d746:	d1d6      	bne.n	800d6f6 <_svfiprintf_r+0x176>
 800d748:	89ab      	ldrh	r3, [r5, #12]
 800d74a:	065b      	lsls	r3, r3, #25
 800d74c:	f53f af2c 	bmi.w	800d5a8 <_svfiprintf_r+0x28>
 800d750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d752:	b01d      	add	sp, #116	; 0x74
 800d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d758:	ab03      	add	r3, sp, #12
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	462a      	mov	r2, r5
 800d75e:	4b06      	ldr	r3, [pc, #24]	; (800d778 <_svfiprintf_r+0x1f8>)
 800d760:	a904      	add	r1, sp, #16
 800d762:	4638      	mov	r0, r7
 800d764:	f7fc fca6 	bl	800a0b4 <_printf_i>
 800d768:	e7eb      	b.n	800d742 <_svfiprintf_r+0x1c2>
 800d76a:	bf00      	nop
 800d76c:	08021154 	.word	0x08021154
 800d770:	0802115e 	.word	0x0802115e
 800d774:	08009b6d 	.word	0x08009b6d
 800d778:	0800d4c9 	.word	0x0800d4c9
 800d77c:	0802115a 	.word	0x0802115a

0800d780 <nan>:
 800d780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d788 <nan+0x8>
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	00000000 	.word	0x00000000
 800d78c:	7ff80000 	.word	0x7ff80000

0800d790 <_sbrk_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d06      	ldr	r5, [pc, #24]	; (800d7ac <_sbrk_r+0x1c>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	f7f7 fcbe 	bl	800511c <_sbrk>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_sbrk_r+0x1a>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_sbrk_r+0x1a>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	20000930 	.word	0x20000930

0800d7b0 <strncmp>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	b17a      	cbz	r2, 800d7d4 <strncmp+0x24>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	3901      	subs	r1, #1
 800d7b8:	1884      	adds	r4, r0, r2
 800d7ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d7be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d7c2:	4290      	cmp	r0, r2
 800d7c4:	d101      	bne.n	800d7ca <strncmp+0x1a>
 800d7c6:	42a3      	cmp	r3, r4
 800d7c8:	d101      	bne.n	800d7ce <strncmp+0x1e>
 800d7ca:	1a80      	subs	r0, r0, r2
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d1f3      	bne.n	800d7ba <strncmp+0xa>
 800d7d2:	e7fa      	b.n	800d7ca <strncmp+0x1a>
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	e7f9      	b.n	800d7cc <strncmp+0x1c>

0800d7d8 <__ascii_wctomb>:
 800d7d8:	b149      	cbz	r1, 800d7ee <__ascii_wctomb+0x16>
 800d7da:	2aff      	cmp	r2, #255	; 0xff
 800d7dc:	bf85      	ittet	hi
 800d7de:	238a      	movhi	r3, #138	; 0x8a
 800d7e0:	6003      	strhi	r3, [r0, #0]
 800d7e2:	700a      	strbls	r2, [r1, #0]
 800d7e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d7e8:	bf98      	it	ls
 800d7ea:	2001      	movls	r0, #1
 800d7ec:	4770      	bx	lr
 800d7ee:	4608      	mov	r0, r1
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <__assert_func>:
 800d7f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7f6:	4614      	mov	r4, r2
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4b09      	ldr	r3, [pc, #36]	; (800d820 <__assert_func+0x2c>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4605      	mov	r5, r0
 800d800:	68d8      	ldr	r0, [r3, #12]
 800d802:	b14c      	cbz	r4, 800d818 <__assert_func+0x24>
 800d804:	4b07      	ldr	r3, [pc, #28]	; (800d824 <__assert_func+0x30>)
 800d806:	9100      	str	r1, [sp, #0]
 800d808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d80c:	4906      	ldr	r1, [pc, #24]	; (800d828 <__assert_func+0x34>)
 800d80e:	462b      	mov	r3, r5
 800d810:	f000 f80e 	bl	800d830 <fiprintf>
 800d814:	f000 fa8c 	bl	800dd30 <abort>
 800d818:	4b04      	ldr	r3, [pc, #16]	; (800d82c <__assert_func+0x38>)
 800d81a:	461c      	mov	r4, r3
 800d81c:	e7f3      	b.n	800d806 <__assert_func+0x12>
 800d81e:	bf00      	nop
 800d820:	20000060 	.word	0x20000060
 800d824:	08021165 	.word	0x08021165
 800d828:	08021172 	.word	0x08021172
 800d82c:	080211a0 	.word	0x080211a0

0800d830 <fiprintf>:
 800d830:	b40e      	push	{r1, r2, r3}
 800d832:	b503      	push	{r0, r1, lr}
 800d834:	4601      	mov	r1, r0
 800d836:	ab03      	add	r3, sp, #12
 800d838:	4805      	ldr	r0, [pc, #20]	; (800d850 <fiprintf+0x20>)
 800d83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83e:	6800      	ldr	r0, [r0, #0]
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	f000 f885 	bl	800d950 <_vfiprintf_r>
 800d846:	b002      	add	sp, #8
 800d848:	f85d eb04 	ldr.w	lr, [sp], #4
 800d84c:	b003      	add	sp, #12
 800d84e:	4770      	bx	lr
 800d850:	20000060 	.word	0x20000060

0800d854 <memmove>:
 800d854:	4288      	cmp	r0, r1
 800d856:	b510      	push	{r4, lr}
 800d858:	eb01 0402 	add.w	r4, r1, r2
 800d85c:	d902      	bls.n	800d864 <memmove+0x10>
 800d85e:	4284      	cmp	r4, r0
 800d860:	4623      	mov	r3, r4
 800d862:	d807      	bhi.n	800d874 <memmove+0x20>
 800d864:	1e43      	subs	r3, r0, #1
 800d866:	42a1      	cmp	r1, r4
 800d868:	d008      	beq.n	800d87c <memmove+0x28>
 800d86a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d86e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d872:	e7f8      	b.n	800d866 <memmove+0x12>
 800d874:	4402      	add	r2, r0
 800d876:	4601      	mov	r1, r0
 800d878:	428a      	cmp	r2, r1
 800d87a:	d100      	bne.n	800d87e <memmove+0x2a>
 800d87c:	bd10      	pop	{r4, pc}
 800d87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d886:	e7f7      	b.n	800d878 <memmove+0x24>

0800d888 <__malloc_lock>:
 800d888:	4801      	ldr	r0, [pc, #4]	; (800d890 <__malloc_lock+0x8>)
 800d88a:	f000 bc11 	b.w	800e0b0 <__retarget_lock_acquire_recursive>
 800d88e:	bf00      	nop
 800d890:	20000934 	.word	0x20000934

0800d894 <__malloc_unlock>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__malloc_unlock+0x8>)
 800d896:	f000 bc0c 	b.w	800e0b2 <__retarget_lock_release_recursive>
 800d89a:	bf00      	nop
 800d89c:	20000934 	.word	0x20000934

0800d8a0 <_realloc_r>:
 800d8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a4:	4680      	mov	r8, r0
 800d8a6:	4614      	mov	r4, r2
 800d8a8:	460e      	mov	r6, r1
 800d8aa:	b921      	cbnz	r1, 800d8b6 <_realloc_r+0x16>
 800d8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	f7ff bd95 	b.w	800d3e0 <_malloc_r>
 800d8b6:	b92a      	cbnz	r2, 800d8c4 <_realloc_r+0x24>
 800d8b8:	f7ff fd26 	bl	800d308 <_free_r>
 800d8bc:	4625      	mov	r5, r4
 800d8be:	4628      	mov	r0, r5
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c4:	f000 fc5c 	bl	800e180 <_malloc_usable_size_r>
 800d8c8:	4284      	cmp	r4, r0
 800d8ca:	4607      	mov	r7, r0
 800d8cc:	d802      	bhi.n	800d8d4 <_realloc_r+0x34>
 800d8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8d2:	d812      	bhi.n	800d8fa <_realloc_r+0x5a>
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	f7ff fd82 	bl	800d3e0 <_malloc_r>
 800d8dc:	4605      	mov	r5, r0
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d0ed      	beq.n	800d8be <_realloc_r+0x1e>
 800d8e2:	42bc      	cmp	r4, r7
 800d8e4:	4622      	mov	r2, r4
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	bf28      	it	cs
 800d8ea:	463a      	movcs	r2, r7
 800d8ec:	f7fc f888 	bl	8009a00 <memcpy>
 800d8f0:	4631      	mov	r1, r6
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	f7ff fd08 	bl	800d308 <_free_r>
 800d8f8:	e7e1      	b.n	800d8be <_realloc_r+0x1e>
 800d8fa:	4635      	mov	r5, r6
 800d8fc:	e7df      	b.n	800d8be <_realloc_r+0x1e>

0800d8fe <__sfputc_r>:
 800d8fe:	6893      	ldr	r3, [r2, #8]
 800d900:	3b01      	subs	r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	b410      	push	{r4}
 800d906:	6093      	str	r3, [r2, #8]
 800d908:	da08      	bge.n	800d91c <__sfputc_r+0x1e>
 800d90a:	6994      	ldr	r4, [r2, #24]
 800d90c:	42a3      	cmp	r3, r4
 800d90e:	db01      	blt.n	800d914 <__sfputc_r+0x16>
 800d910:	290a      	cmp	r1, #10
 800d912:	d103      	bne.n	800d91c <__sfputc_r+0x1e>
 800d914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d918:	f000 b94a 	b.w	800dbb0 <__swbuf_r>
 800d91c:	6813      	ldr	r3, [r2, #0]
 800d91e:	1c58      	adds	r0, r3, #1
 800d920:	6010      	str	r0, [r2, #0]
 800d922:	7019      	strb	r1, [r3, #0]
 800d924:	4608      	mov	r0, r1
 800d926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <__sfputs_r>:
 800d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92e:	4606      	mov	r6, r0
 800d930:	460f      	mov	r7, r1
 800d932:	4614      	mov	r4, r2
 800d934:	18d5      	adds	r5, r2, r3
 800d936:	42ac      	cmp	r4, r5
 800d938:	d101      	bne.n	800d93e <__sfputs_r+0x12>
 800d93a:	2000      	movs	r0, #0
 800d93c:	e007      	b.n	800d94e <__sfputs_r+0x22>
 800d93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d942:	463a      	mov	r2, r7
 800d944:	4630      	mov	r0, r6
 800d946:	f7ff ffda 	bl	800d8fe <__sfputc_r>
 800d94a:	1c43      	adds	r3, r0, #1
 800d94c:	d1f3      	bne.n	800d936 <__sfputs_r+0xa>
 800d94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d950 <_vfiprintf_r>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	460d      	mov	r5, r1
 800d956:	b09d      	sub	sp, #116	; 0x74
 800d958:	4614      	mov	r4, r2
 800d95a:	4698      	mov	r8, r3
 800d95c:	4606      	mov	r6, r0
 800d95e:	b118      	cbz	r0, 800d968 <_vfiprintf_r+0x18>
 800d960:	6983      	ldr	r3, [r0, #24]
 800d962:	b90b      	cbnz	r3, 800d968 <_vfiprintf_r+0x18>
 800d964:	f000 fb06 	bl	800df74 <__sinit>
 800d968:	4b89      	ldr	r3, [pc, #548]	; (800db90 <_vfiprintf_r+0x240>)
 800d96a:	429d      	cmp	r5, r3
 800d96c:	d11b      	bne.n	800d9a6 <_vfiprintf_r+0x56>
 800d96e:	6875      	ldr	r5, [r6, #4]
 800d970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d972:	07d9      	lsls	r1, r3, #31
 800d974:	d405      	bmi.n	800d982 <_vfiprintf_r+0x32>
 800d976:	89ab      	ldrh	r3, [r5, #12]
 800d978:	059a      	lsls	r2, r3, #22
 800d97a:	d402      	bmi.n	800d982 <_vfiprintf_r+0x32>
 800d97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d97e:	f000 fb97 	bl	800e0b0 <__retarget_lock_acquire_recursive>
 800d982:	89ab      	ldrh	r3, [r5, #12]
 800d984:	071b      	lsls	r3, r3, #28
 800d986:	d501      	bpl.n	800d98c <_vfiprintf_r+0x3c>
 800d988:	692b      	ldr	r3, [r5, #16]
 800d98a:	b9eb      	cbnz	r3, 800d9c8 <_vfiprintf_r+0x78>
 800d98c:	4629      	mov	r1, r5
 800d98e:	4630      	mov	r0, r6
 800d990:	f000 f960 	bl	800dc54 <__swsetup_r>
 800d994:	b1c0      	cbz	r0, 800d9c8 <_vfiprintf_r+0x78>
 800d996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d998:	07dc      	lsls	r4, r3, #31
 800d99a:	d50e      	bpl.n	800d9ba <_vfiprintf_r+0x6a>
 800d99c:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a0:	b01d      	add	sp, #116	; 0x74
 800d9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a6:	4b7b      	ldr	r3, [pc, #492]	; (800db94 <_vfiprintf_r+0x244>)
 800d9a8:	429d      	cmp	r5, r3
 800d9aa:	d101      	bne.n	800d9b0 <_vfiprintf_r+0x60>
 800d9ac:	68b5      	ldr	r5, [r6, #8]
 800d9ae:	e7df      	b.n	800d970 <_vfiprintf_r+0x20>
 800d9b0:	4b79      	ldr	r3, [pc, #484]	; (800db98 <_vfiprintf_r+0x248>)
 800d9b2:	429d      	cmp	r5, r3
 800d9b4:	bf08      	it	eq
 800d9b6:	68f5      	ldreq	r5, [r6, #12]
 800d9b8:	e7da      	b.n	800d970 <_vfiprintf_r+0x20>
 800d9ba:	89ab      	ldrh	r3, [r5, #12]
 800d9bc:	0598      	lsls	r0, r3, #22
 800d9be:	d4ed      	bmi.n	800d99c <_vfiprintf_r+0x4c>
 800d9c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9c2:	f000 fb76 	bl	800e0b2 <__retarget_lock_release_recursive>
 800d9c6:	e7e9      	b.n	800d99c <_vfiprintf_r+0x4c>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d9cc:	2320      	movs	r3, #32
 800d9ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9d6:	2330      	movs	r3, #48	; 0x30
 800d9d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800db9c <_vfiprintf_r+0x24c>
 800d9dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9e0:	f04f 0901 	mov.w	r9, #1
 800d9e4:	4623      	mov	r3, r4
 800d9e6:	469a      	mov	sl, r3
 800d9e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ec:	b10a      	cbz	r2, 800d9f2 <_vfiprintf_r+0xa2>
 800d9ee:	2a25      	cmp	r2, #37	; 0x25
 800d9f0:	d1f9      	bne.n	800d9e6 <_vfiprintf_r+0x96>
 800d9f2:	ebba 0b04 	subs.w	fp, sl, r4
 800d9f6:	d00b      	beq.n	800da10 <_vfiprintf_r+0xc0>
 800d9f8:	465b      	mov	r3, fp
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4630      	mov	r0, r6
 800da00:	f7ff ff94 	bl	800d92c <__sfputs_r>
 800da04:	3001      	adds	r0, #1
 800da06:	f000 80aa 	beq.w	800db5e <_vfiprintf_r+0x20e>
 800da0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da0c:	445a      	add	r2, fp
 800da0e:	9209      	str	r2, [sp, #36]	; 0x24
 800da10:	f89a 3000 	ldrb.w	r3, [sl]
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 80a2 	beq.w	800db5e <_vfiprintf_r+0x20e>
 800da1a:	2300      	movs	r3, #0
 800da1c:	f04f 32ff 	mov.w	r2, #4294967295
 800da20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da24:	f10a 0a01 	add.w	sl, sl, #1
 800da28:	9304      	str	r3, [sp, #16]
 800da2a:	9307      	str	r3, [sp, #28]
 800da2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da30:	931a      	str	r3, [sp, #104]	; 0x68
 800da32:	4654      	mov	r4, sl
 800da34:	2205      	movs	r2, #5
 800da36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da3a:	4858      	ldr	r0, [pc, #352]	; (800db9c <_vfiprintf_r+0x24c>)
 800da3c:	f7f2 fbd0 	bl	80001e0 <memchr>
 800da40:	9a04      	ldr	r2, [sp, #16]
 800da42:	b9d8      	cbnz	r0, 800da7c <_vfiprintf_r+0x12c>
 800da44:	06d1      	lsls	r1, r2, #27
 800da46:	bf44      	itt	mi
 800da48:	2320      	movmi	r3, #32
 800da4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da4e:	0713      	lsls	r3, r2, #28
 800da50:	bf44      	itt	mi
 800da52:	232b      	movmi	r3, #43	; 0x2b
 800da54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da58:	f89a 3000 	ldrb.w	r3, [sl]
 800da5c:	2b2a      	cmp	r3, #42	; 0x2a
 800da5e:	d015      	beq.n	800da8c <_vfiprintf_r+0x13c>
 800da60:	9a07      	ldr	r2, [sp, #28]
 800da62:	4654      	mov	r4, sl
 800da64:	2000      	movs	r0, #0
 800da66:	f04f 0c0a 	mov.w	ip, #10
 800da6a:	4621      	mov	r1, r4
 800da6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da70:	3b30      	subs	r3, #48	; 0x30
 800da72:	2b09      	cmp	r3, #9
 800da74:	d94e      	bls.n	800db14 <_vfiprintf_r+0x1c4>
 800da76:	b1b0      	cbz	r0, 800daa6 <_vfiprintf_r+0x156>
 800da78:	9207      	str	r2, [sp, #28]
 800da7a:	e014      	b.n	800daa6 <_vfiprintf_r+0x156>
 800da7c:	eba0 0308 	sub.w	r3, r0, r8
 800da80:	fa09 f303 	lsl.w	r3, r9, r3
 800da84:	4313      	orrs	r3, r2
 800da86:	9304      	str	r3, [sp, #16]
 800da88:	46a2      	mov	sl, r4
 800da8a:	e7d2      	b.n	800da32 <_vfiprintf_r+0xe2>
 800da8c:	9b03      	ldr	r3, [sp, #12]
 800da8e:	1d19      	adds	r1, r3, #4
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	9103      	str	r1, [sp, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	bfbb      	ittet	lt
 800da98:	425b      	neglt	r3, r3
 800da9a:	f042 0202 	orrlt.w	r2, r2, #2
 800da9e:	9307      	strge	r3, [sp, #28]
 800daa0:	9307      	strlt	r3, [sp, #28]
 800daa2:	bfb8      	it	lt
 800daa4:	9204      	strlt	r2, [sp, #16]
 800daa6:	7823      	ldrb	r3, [r4, #0]
 800daa8:	2b2e      	cmp	r3, #46	; 0x2e
 800daaa:	d10c      	bne.n	800dac6 <_vfiprintf_r+0x176>
 800daac:	7863      	ldrb	r3, [r4, #1]
 800daae:	2b2a      	cmp	r3, #42	; 0x2a
 800dab0:	d135      	bne.n	800db1e <_vfiprintf_r+0x1ce>
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	1d1a      	adds	r2, r3, #4
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	9203      	str	r2, [sp, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bfb8      	it	lt
 800dabe:	f04f 33ff 	movlt.w	r3, #4294967295
 800dac2:	3402      	adds	r4, #2
 800dac4:	9305      	str	r3, [sp, #20]
 800dac6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dbac <_vfiprintf_r+0x25c>
 800daca:	7821      	ldrb	r1, [r4, #0]
 800dacc:	2203      	movs	r2, #3
 800dace:	4650      	mov	r0, sl
 800dad0:	f7f2 fb86 	bl	80001e0 <memchr>
 800dad4:	b140      	cbz	r0, 800dae8 <_vfiprintf_r+0x198>
 800dad6:	2340      	movs	r3, #64	; 0x40
 800dad8:	eba0 000a 	sub.w	r0, r0, sl
 800dadc:	fa03 f000 	lsl.w	r0, r3, r0
 800dae0:	9b04      	ldr	r3, [sp, #16]
 800dae2:	4303      	orrs	r3, r0
 800dae4:	3401      	adds	r4, #1
 800dae6:	9304      	str	r3, [sp, #16]
 800dae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daec:	482c      	ldr	r0, [pc, #176]	; (800dba0 <_vfiprintf_r+0x250>)
 800daee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daf2:	2206      	movs	r2, #6
 800daf4:	f7f2 fb74 	bl	80001e0 <memchr>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d03f      	beq.n	800db7c <_vfiprintf_r+0x22c>
 800dafc:	4b29      	ldr	r3, [pc, #164]	; (800dba4 <_vfiprintf_r+0x254>)
 800dafe:	bb1b      	cbnz	r3, 800db48 <_vfiprintf_r+0x1f8>
 800db00:	9b03      	ldr	r3, [sp, #12]
 800db02:	3307      	adds	r3, #7
 800db04:	f023 0307 	bic.w	r3, r3, #7
 800db08:	3308      	adds	r3, #8
 800db0a:	9303      	str	r3, [sp, #12]
 800db0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db0e:	443b      	add	r3, r7
 800db10:	9309      	str	r3, [sp, #36]	; 0x24
 800db12:	e767      	b.n	800d9e4 <_vfiprintf_r+0x94>
 800db14:	fb0c 3202 	mla	r2, ip, r2, r3
 800db18:	460c      	mov	r4, r1
 800db1a:	2001      	movs	r0, #1
 800db1c:	e7a5      	b.n	800da6a <_vfiprintf_r+0x11a>
 800db1e:	2300      	movs	r3, #0
 800db20:	3401      	adds	r4, #1
 800db22:	9305      	str	r3, [sp, #20]
 800db24:	4619      	mov	r1, r3
 800db26:	f04f 0c0a 	mov.w	ip, #10
 800db2a:	4620      	mov	r0, r4
 800db2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db30:	3a30      	subs	r2, #48	; 0x30
 800db32:	2a09      	cmp	r2, #9
 800db34:	d903      	bls.n	800db3e <_vfiprintf_r+0x1ee>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0c5      	beq.n	800dac6 <_vfiprintf_r+0x176>
 800db3a:	9105      	str	r1, [sp, #20]
 800db3c:	e7c3      	b.n	800dac6 <_vfiprintf_r+0x176>
 800db3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800db42:	4604      	mov	r4, r0
 800db44:	2301      	movs	r3, #1
 800db46:	e7f0      	b.n	800db2a <_vfiprintf_r+0x1da>
 800db48:	ab03      	add	r3, sp, #12
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	462a      	mov	r2, r5
 800db4e:	4b16      	ldr	r3, [pc, #88]	; (800dba8 <_vfiprintf_r+0x258>)
 800db50:	a904      	add	r1, sp, #16
 800db52:	4630      	mov	r0, r6
 800db54:	f7fc f80a 	bl	8009b6c <_printf_float>
 800db58:	4607      	mov	r7, r0
 800db5a:	1c78      	adds	r0, r7, #1
 800db5c:	d1d6      	bne.n	800db0c <_vfiprintf_r+0x1bc>
 800db5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db60:	07d9      	lsls	r1, r3, #31
 800db62:	d405      	bmi.n	800db70 <_vfiprintf_r+0x220>
 800db64:	89ab      	ldrh	r3, [r5, #12]
 800db66:	059a      	lsls	r2, r3, #22
 800db68:	d402      	bmi.n	800db70 <_vfiprintf_r+0x220>
 800db6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db6c:	f000 faa1 	bl	800e0b2 <__retarget_lock_release_recursive>
 800db70:	89ab      	ldrh	r3, [r5, #12]
 800db72:	065b      	lsls	r3, r3, #25
 800db74:	f53f af12 	bmi.w	800d99c <_vfiprintf_r+0x4c>
 800db78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db7a:	e711      	b.n	800d9a0 <_vfiprintf_r+0x50>
 800db7c:	ab03      	add	r3, sp, #12
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	462a      	mov	r2, r5
 800db82:	4b09      	ldr	r3, [pc, #36]	; (800dba8 <_vfiprintf_r+0x258>)
 800db84:	a904      	add	r1, sp, #16
 800db86:	4630      	mov	r0, r6
 800db88:	f7fc fa94 	bl	800a0b4 <_printf_i>
 800db8c:	e7e4      	b.n	800db58 <_vfiprintf_r+0x208>
 800db8e:	bf00      	nop
 800db90:	080211c4 	.word	0x080211c4
 800db94:	080211e4 	.word	0x080211e4
 800db98:	080211a4 	.word	0x080211a4
 800db9c:	08021154 	.word	0x08021154
 800dba0:	0802115e 	.word	0x0802115e
 800dba4:	08009b6d 	.word	0x08009b6d
 800dba8:	0800d92d 	.word	0x0800d92d
 800dbac:	0802115a 	.word	0x0802115a

0800dbb0 <__swbuf_r>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	460e      	mov	r6, r1
 800dbb4:	4614      	mov	r4, r2
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b118      	cbz	r0, 800dbc2 <__swbuf_r+0x12>
 800dbba:	6983      	ldr	r3, [r0, #24]
 800dbbc:	b90b      	cbnz	r3, 800dbc2 <__swbuf_r+0x12>
 800dbbe:	f000 f9d9 	bl	800df74 <__sinit>
 800dbc2:	4b21      	ldr	r3, [pc, #132]	; (800dc48 <__swbuf_r+0x98>)
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	d12b      	bne.n	800dc20 <__swbuf_r+0x70>
 800dbc8:	686c      	ldr	r4, [r5, #4]
 800dbca:	69a3      	ldr	r3, [r4, #24]
 800dbcc:	60a3      	str	r3, [r4, #8]
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	071a      	lsls	r2, r3, #28
 800dbd2:	d52f      	bpl.n	800dc34 <__swbuf_r+0x84>
 800dbd4:	6923      	ldr	r3, [r4, #16]
 800dbd6:	b36b      	cbz	r3, 800dc34 <__swbuf_r+0x84>
 800dbd8:	6923      	ldr	r3, [r4, #16]
 800dbda:	6820      	ldr	r0, [r4, #0]
 800dbdc:	1ac0      	subs	r0, r0, r3
 800dbde:	6963      	ldr	r3, [r4, #20]
 800dbe0:	b2f6      	uxtb	r6, r6
 800dbe2:	4283      	cmp	r3, r0
 800dbe4:	4637      	mov	r7, r6
 800dbe6:	dc04      	bgt.n	800dbf2 <__swbuf_r+0x42>
 800dbe8:	4621      	mov	r1, r4
 800dbea:	4628      	mov	r0, r5
 800dbec:	f000 f92e 	bl	800de4c <_fflush_r>
 800dbf0:	bb30      	cbnz	r0, 800dc40 <__swbuf_r+0x90>
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	60a3      	str	r3, [r4, #8]
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	1c5a      	adds	r2, r3, #1
 800dbfc:	6022      	str	r2, [r4, #0]
 800dbfe:	701e      	strb	r6, [r3, #0]
 800dc00:	6963      	ldr	r3, [r4, #20]
 800dc02:	3001      	adds	r0, #1
 800dc04:	4283      	cmp	r3, r0
 800dc06:	d004      	beq.n	800dc12 <__swbuf_r+0x62>
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	07db      	lsls	r3, r3, #31
 800dc0c:	d506      	bpl.n	800dc1c <__swbuf_r+0x6c>
 800dc0e:	2e0a      	cmp	r6, #10
 800dc10:	d104      	bne.n	800dc1c <__swbuf_r+0x6c>
 800dc12:	4621      	mov	r1, r4
 800dc14:	4628      	mov	r0, r5
 800dc16:	f000 f919 	bl	800de4c <_fflush_r>
 800dc1a:	b988      	cbnz	r0, 800dc40 <__swbuf_r+0x90>
 800dc1c:	4638      	mov	r0, r7
 800dc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc20:	4b0a      	ldr	r3, [pc, #40]	; (800dc4c <__swbuf_r+0x9c>)
 800dc22:	429c      	cmp	r4, r3
 800dc24:	d101      	bne.n	800dc2a <__swbuf_r+0x7a>
 800dc26:	68ac      	ldr	r4, [r5, #8]
 800dc28:	e7cf      	b.n	800dbca <__swbuf_r+0x1a>
 800dc2a:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <__swbuf_r+0xa0>)
 800dc2c:	429c      	cmp	r4, r3
 800dc2e:	bf08      	it	eq
 800dc30:	68ec      	ldreq	r4, [r5, #12]
 800dc32:	e7ca      	b.n	800dbca <__swbuf_r+0x1a>
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f000 f80c 	bl	800dc54 <__swsetup_r>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0cb      	beq.n	800dbd8 <__swbuf_r+0x28>
 800dc40:	f04f 37ff 	mov.w	r7, #4294967295
 800dc44:	e7ea      	b.n	800dc1c <__swbuf_r+0x6c>
 800dc46:	bf00      	nop
 800dc48:	080211c4 	.word	0x080211c4
 800dc4c:	080211e4 	.word	0x080211e4
 800dc50:	080211a4 	.word	0x080211a4

0800dc54 <__swsetup_r>:
 800dc54:	4b32      	ldr	r3, [pc, #200]	; (800dd20 <__swsetup_r+0xcc>)
 800dc56:	b570      	push	{r4, r5, r6, lr}
 800dc58:	681d      	ldr	r5, [r3, #0]
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	b125      	cbz	r5, 800dc6a <__swsetup_r+0x16>
 800dc60:	69ab      	ldr	r3, [r5, #24]
 800dc62:	b913      	cbnz	r3, 800dc6a <__swsetup_r+0x16>
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 f985 	bl	800df74 <__sinit>
 800dc6a:	4b2e      	ldr	r3, [pc, #184]	; (800dd24 <__swsetup_r+0xd0>)
 800dc6c:	429c      	cmp	r4, r3
 800dc6e:	d10f      	bne.n	800dc90 <__swsetup_r+0x3c>
 800dc70:	686c      	ldr	r4, [r5, #4]
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc78:	0719      	lsls	r1, r3, #28
 800dc7a:	d42c      	bmi.n	800dcd6 <__swsetup_r+0x82>
 800dc7c:	06dd      	lsls	r5, r3, #27
 800dc7e:	d411      	bmi.n	800dca4 <__swsetup_r+0x50>
 800dc80:	2309      	movs	r3, #9
 800dc82:	6033      	str	r3, [r6, #0]
 800dc84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc88:	81a3      	strh	r3, [r4, #12]
 800dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8e:	e03e      	b.n	800dd0e <__swsetup_r+0xba>
 800dc90:	4b25      	ldr	r3, [pc, #148]	; (800dd28 <__swsetup_r+0xd4>)
 800dc92:	429c      	cmp	r4, r3
 800dc94:	d101      	bne.n	800dc9a <__swsetup_r+0x46>
 800dc96:	68ac      	ldr	r4, [r5, #8]
 800dc98:	e7eb      	b.n	800dc72 <__swsetup_r+0x1e>
 800dc9a:	4b24      	ldr	r3, [pc, #144]	; (800dd2c <__swsetup_r+0xd8>)
 800dc9c:	429c      	cmp	r4, r3
 800dc9e:	bf08      	it	eq
 800dca0:	68ec      	ldreq	r4, [r5, #12]
 800dca2:	e7e6      	b.n	800dc72 <__swsetup_r+0x1e>
 800dca4:	0758      	lsls	r0, r3, #29
 800dca6:	d512      	bpl.n	800dcce <__swsetup_r+0x7a>
 800dca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcaa:	b141      	cbz	r1, 800dcbe <__swsetup_r+0x6a>
 800dcac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcb0:	4299      	cmp	r1, r3
 800dcb2:	d002      	beq.n	800dcba <__swsetup_r+0x66>
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f7ff fb27 	bl	800d308 <_free_r>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	6363      	str	r3, [r4, #52]	; 0x34
 800dcbe:	89a3      	ldrh	r3, [r4, #12]
 800dcc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcc4:	81a3      	strh	r3, [r4, #12]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	6063      	str	r3, [r4, #4]
 800dcca:	6923      	ldr	r3, [r4, #16]
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	89a3      	ldrh	r3, [r4, #12]
 800dcd0:	f043 0308 	orr.w	r3, r3, #8
 800dcd4:	81a3      	strh	r3, [r4, #12]
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	b94b      	cbnz	r3, 800dcee <__swsetup_r+0x9a>
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dce4:	d003      	beq.n	800dcee <__swsetup_r+0x9a>
 800dce6:	4621      	mov	r1, r4
 800dce8:	4630      	mov	r0, r6
 800dcea:	f000 fa09 	bl	800e100 <__smakebuf_r>
 800dcee:	89a0      	ldrh	r0, [r4, #12]
 800dcf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcf4:	f010 0301 	ands.w	r3, r0, #1
 800dcf8:	d00a      	beq.n	800dd10 <__swsetup_r+0xbc>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60a3      	str	r3, [r4, #8]
 800dcfe:	6963      	ldr	r3, [r4, #20]
 800dd00:	425b      	negs	r3, r3
 800dd02:	61a3      	str	r3, [r4, #24]
 800dd04:	6923      	ldr	r3, [r4, #16]
 800dd06:	b943      	cbnz	r3, 800dd1a <__swsetup_r+0xc6>
 800dd08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd0c:	d1ba      	bne.n	800dc84 <__swsetup_r+0x30>
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	0781      	lsls	r1, r0, #30
 800dd12:	bf58      	it	pl
 800dd14:	6963      	ldrpl	r3, [r4, #20]
 800dd16:	60a3      	str	r3, [r4, #8]
 800dd18:	e7f4      	b.n	800dd04 <__swsetup_r+0xb0>
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	e7f7      	b.n	800dd0e <__swsetup_r+0xba>
 800dd1e:	bf00      	nop
 800dd20:	20000060 	.word	0x20000060
 800dd24:	080211c4 	.word	0x080211c4
 800dd28:	080211e4 	.word	0x080211e4
 800dd2c:	080211a4 	.word	0x080211a4

0800dd30 <abort>:
 800dd30:	b508      	push	{r3, lr}
 800dd32:	2006      	movs	r0, #6
 800dd34:	f000 fa54 	bl	800e1e0 <raise>
 800dd38:	2001      	movs	r0, #1
 800dd3a:	f7f7 f977 	bl	800502c <_exit>
	...

0800dd40 <__sflush_r>:
 800dd40:	898a      	ldrh	r2, [r1, #12]
 800dd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd46:	4605      	mov	r5, r0
 800dd48:	0710      	lsls	r0, r2, #28
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	d458      	bmi.n	800de00 <__sflush_r+0xc0>
 800dd4e:	684b      	ldr	r3, [r1, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	dc05      	bgt.n	800dd60 <__sflush_r+0x20>
 800dd54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dc02      	bgt.n	800dd60 <__sflush_r+0x20>
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd62:	2e00      	cmp	r6, #0
 800dd64:	d0f9      	beq.n	800dd5a <__sflush_r+0x1a>
 800dd66:	2300      	movs	r3, #0
 800dd68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd6c:	682f      	ldr	r7, [r5, #0]
 800dd6e:	602b      	str	r3, [r5, #0]
 800dd70:	d032      	beq.n	800ddd8 <__sflush_r+0x98>
 800dd72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	075a      	lsls	r2, r3, #29
 800dd78:	d505      	bpl.n	800dd86 <__sflush_r+0x46>
 800dd7a:	6863      	ldr	r3, [r4, #4]
 800dd7c:	1ac0      	subs	r0, r0, r3
 800dd7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd80:	b10b      	cbz	r3, 800dd86 <__sflush_r+0x46>
 800dd82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd84:	1ac0      	subs	r0, r0, r3
 800dd86:	2300      	movs	r3, #0
 800dd88:	4602      	mov	r2, r0
 800dd8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd8c:	6a21      	ldr	r1, [r4, #32]
 800dd8e:	4628      	mov	r0, r5
 800dd90:	47b0      	blx	r6
 800dd92:	1c43      	adds	r3, r0, #1
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	d106      	bne.n	800dda6 <__sflush_r+0x66>
 800dd98:	6829      	ldr	r1, [r5, #0]
 800dd9a:	291d      	cmp	r1, #29
 800dd9c:	d82c      	bhi.n	800ddf8 <__sflush_r+0xb8>
 800dd9e:	4a2a      	ldr	r2, [pc, #168]	; (800de48 <__sflush_r+0x108>)
 800dda0:	40ca      	lsrs	r2, r1
 800dda2:	07d6      	lsls	r6, r2, #31
 800dda4:	d528      	bpl.n	800ddf8 <__sflush_r+0xb8>
 800dda6:	2200      	movs	r2, #0
 800dda8:	6062      	str	r2, [r4, #4]
 800ddaa:	04d9      	lsls	r1, r3, #19
 800ddac:	6922      	ldr	r2, [r4, #16]
 800ddae:	6022      	str	r2, [r4, #0]
 800ddb0:	d504      	bpl.n	800ddbc <__sflush_r+0x7c>
 800ddb2:	1c42      	adds	r2, r0, #1
 800ddb4:	d101      	bne.n	800ddba <__sflush_r+0x7a>
 800ddb6:	682b      	ldr	r3, [r5, #0]
 800ddb8:	b903      	cbnz	r3, 800ddbc <__sflush_r+0x7c>
 800ddba:	6560      	str	r0, [r4, #84]	; 0x54
 800ddbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddbe:	602f      	str	r7, [r5, #0]
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	d0ca      	beq.n	800dd5a <__sflush_r+0x1a>
 800ddc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddc8:	4299      	cmp	r1, r3
 800ddca:	d002      	beq.n	800ddd2 <__sflush_r+0x92>
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f7ff fa9b 	bl	800d308 <_free_r>
 800ddd2:	2000      	movs	r0, #0
 800ddd4:	6360      	str	r0, [r4, #52]	; 0x34
 800ddd6:	e7c1      	b.n	800dd5c <__sflush_r+0x1c>
 800ddd8:	6a21      	ldr	r1, [r4, #32]
 800ddda:	2301      	movs	r3, #1
 800dddc:	4628      	mov	r0, r5
 800ddde:	47b0      	blx	r6
 800dde0:	1c41      	adds	r1, r0, #1
 800dde2:	d1c7      	bne.n	800dd74 <__sflush_r+0x34>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d0c4      	beq.n	800dd74 <__sflush_r+0x34>
 800ddea:	2b1d      	cmp	r3, #29
 800ddec:	d001      	beq.n	800ddf2 <__sflush_r+0xb2>
 800ddee:	2b16      	cmp	r3, #22
 800ddf0:	d101      	bne.n	800ddf6 <__sflush_r+0xb6>
 800ddf2:	602f      	str	r7, [r5, #0]
 800ddf4:	e7b1      	b.n	800dd5a <__sflush_r+0x1a>
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddfc:	81a3      	strh	r3, [r4, #12]
 800ddfe:	e7ad      	b.n	800dd5c <__sflush_r+0x1c>
 800de00:	690f      	ldr	r7, [r1, #16]
 800de02:	2f00      	cmp	r7, #0
 800de04:	d0a9      	beq.n	800dd5a <__sflush_r+0x1a>
 800de06:	0793      	lsls	r3, r2, #30
 800de08:	680e      	ldr	r6, [r1, #0]
 800de0a:	bf08      	it	eq
 800de0c:	694b      	ldreq	r3, [r1, #20]
 800de0e:	600f      	str	r7, [r1, #0]
 800de10:	bf18      	it	ne
 800de12:	2300      	movne	r3, #0
 800de14:	eba6 0807 	sub.w	r8, r6, r7
 800de18:	608b      	str	r3, [r1, #8]
 800de1a:	f1b8 0f00 	cmp.w	r8, #0
 800de1e:	dd9c      	ble.n	800dd5a <__sflush_r+0x1a>
 800de20:	6a21      	ldr	r1, [r4, #32]
 800de22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de24:	4643      	mov	r3, r8
 800de26:	463a      	mov	r2, r7
 800de28:	4628      	mov	r0, r5
 800de2a:	47b0      	blx	r6
 800de2c:	2800      	cmp	r0, #0
 800de2e:	dc06      	bgt.n	800de3e <__sflush_r+0xfe>
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de36:	81a3      	strh	r3, [r4, #12]
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	e78e      	b.n	800dd5c <__sflush_r+0x1c>
 800de3e:	4407      	add	r7, r0
 800de40:	eba8 0800 	sub.w	r8, r8, r0
 800de44:	e7e9      	b.n	800de1a <__sflush_r+0xda>
 800de46:	bf00      	nop
 800de48:	20400001 	.word	0x20400001

0800de4c <_fflush_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	690b      	ldr	r3, [r1, #16]
 800de50:	4605      	mov	r5, r0
 800de52:	460c      	mov	r4, r1
 800de54:	b913      	cbnz	r3, 800de5c <_fflush_r+0x10>
 800de56:	2500      	movs	r5, #0
 800de58:	4628      	mov	r0, r5
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	b118      	cbz	r0, 800de66 <_fflush_r+0x1a>
 800de5e:	6983      	ldr	r3, [r0, #24]
 800de60:	b90b      	cbnz	r3, 800de66 <_fflush_r+0x1a>
 800de62:	f000 f887 	bl	800df74 <__sinit>
 800de66:	4b14      	ldr	r3, [pc, #80]	; (800deb8 <_fflush_r+0x6c>)
 800de68:	429c      	cmp	r4, r3
 800de6a:	d11b      	bne.n	800dea4 <_fflush_r+0x58>
 800de6c:	686c      	ldr	r4, [r5, #4]
 800de6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d0ef      	beq.n	800de56 <_fflush_r+0xa>
 800de76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de78:	07d0      	lsls	r0, r2, #31
 800de7a:	d404      	bmi.n	800de86 <_fflush_r+0x3a>
 800de7c:	0599      	lsls	r1, r3, #22
 800de7e:	d402      	bmi.n	800de86 <_fflush_r+0x3a>
 800de80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de82:	f000 f915 	bl	800e0b0 <__retarget_lock_acquire_recursive>
 800de86:	4628      	mov	r0, r5
 800de88:	4621      	mov	r1, r4
 800de8a:	f7ff ff59 	bl	800dd40 <__sflush_r>
 800de8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de90:	07da      	lsls	r2, r3, #31
 800de92:	4605      	mov	r5, r0
 800de94:	d4e0      	bmi.n	800de58 <_fflush_r+0xc>
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	059b      	lsls	r3, r3, #22
 800de9a:	d4dd      	bmi.n	800de58 <_fflush_r+0xc>
 800de9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de9e:	f000 f908 	bl	800e0b2 <__retarget_lock_release_recursive>
 800dea2:	e7d9      	b.n	800de58 <_fflush_r+0xc>
 800dea4:	4b05      	ldr	r3, [pc, #20]	; (800debc <_fflush_r+0x70>)
 800dea6:	429c      	cmp	r4, r3
 800dea8:	d101      	bne.n	800deae <_fflush_r+0x62>
 800deaa:	68ac      	ldr	r4, [r5, #8]
 800deac:	e7df      	b.n	800de6e <_fflush_r+0x22>
 800deae:	4b04      	ldr	r3, [pc, #16]	; (800dec0 <_fflush_r+0x74>)
 800deb0:	429c      	cmp	r4, r3
 800deb2:	bf08      	it	eq
 800deb4:	68ec      	ldreq	r4, [r5, #12]
 800deb6:	e7da      	b.n	800de6e <_fflush_r+0x22>
 800deb8:	080211c4 	.word	0x080211c4
 800debc:	080211e4 	.word	0x080211e4
 800dec0:	080211a4 	.word	0x080211a4

0800dec4 <std>:
 800dec4:	2300      	movs	r3, #0
 800dec6:	b510      	push	{r4, lr}
 800dec8:	4604      	mov	r4, r0
 800deca:	e9c0 3300 	strd	r3, r3, [r0]
 800dece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ded2:	6083      	str	r3, [r0, #8]
 800ded4:	8181      	strh	r1, [r0, #12]
 800ded6:	6643      	str	r3, [r0, #100]	; 0x64
 800ded8:	81c2      	strh	r2, [r0, #14]
 800deda:	6183      	str	r3, [r0, #24]
 800dedc:	4619      	mov	r1, r3
 800dede:	2208      	movs	r2, #8
 800dee0:	305c      	adds	r0, #92	; 0x5c
 800dee2:	f7fb fd9b 	bl	8009a1c <memset>
 800dee6:	4b05      	ldr	r3, [pc, #20]	; (800defc <std+0x38>)
 800dee8:	6263      	str	r3, [r4, #36]	; 0x24
 800deea:	4b05      	ldr	r3, [pc, #20]	; (800df00 <std+0x3c>)
 800deec:	62a3      	str	r3, [r4, #40]	; 0x28
 800deee:	4b05      	ldr	r3, [pc, #20]	; (800df04 <std+0x40>)
 800def0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <std+0x44>)
 800def4:	6224      	str	r4, [r4, #32]
 800def6:	6323      	str	r3, [r4, #48]	; 0x30
 800def8:	bd10      	pop	{r4, pc}
 800defa:	bf00      	nop
 800defc:	0800e219 	.word	0x0800e219
 800df00:	0800e23b 	.word	0x0800e23b
 800df04:	0800e273 	.word	0x0800e273
 800df08:	0800e297 	.word	0x0800e297

0800df0c <_cleanup_r>:
 800df0c:	4901      	ldr	r1, [pc, #4]	; (800df14 <_cleanup_r+0x8>)
 800df0e:	f000 b8af 	b.w	800e070 <_fwalk_reent>
 800df12:	bf00      	nop
 800df14:	0800de4d 	.word	0x0800de4d

0800df18 <__sfmoreglue>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	2268      	movs	r2, #104	; 0x68
 800df1c:	1e4d      	subs	r5, r1, #1
 800df1e:	4355      	muls	r5, r2
 800df20:	460e      	mov	r6, r1
 800df22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df26:	f7ff fa5b 	bl	800d3e0 <_malloc_r>
 800df2a:	4604      	mov	r4, r0
 800df2c:	b140      	cbz	r0, 800df40 <__sfmoreglue+0x28>
 800df2e:	2100      	movs	r1, #0
 800df30:	e9c0 1600 	strd	r1, r6, [r0]
 800df34:	300c      	adds	r0, #12
 800df36:	60a0      	str	r0, [r4, #8]
 800df38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df3c:	f7fb fd6e 	bl	8009a1c <memset>
 800df40:	4620      	mov	r0, r4
 800df42:	bd70      	pop	{r4, r5, r6, pc}

0800df44 <__sfp_lock_acquire>:
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__sfp_lock_acquire+0x8>)
 800df46:	f000 b8b3 	b.w	800e0b0 <__retarget_lock_acquire_recursive>
 800df4a:	bf00      	nop
 800df4c:	20000935 	.word	0x20000935

0800df50 <__sfp_lock_release>:
 800df50:	4801      	ldr	r0, [pc, #4]	; (800df58 <__sfp_lock_release+0x8>)
 800df52:	f000 b8ae 	b.w	800e0b2 <__retarget_lock_release_recursive>
 800df56:	bf00      	nop
 800df58:	20000935 	.word	0x20000935

0800df5c <__sinit_lock_acquire>:
 800df5c:	4801      	ldr	r0, [pc, #4]	; (800df64 <__sinit_lock_acquire+0x8>)
 800df5e:	f000 b8a7 	b.w	800e0b0 <__retarget_lock_acquire_recursive>
 800df62:	bf00      	nop
 800df64:	20000936 	.word	0x20000936

0800df68 <__sinit_lock_release>:
 800df68:	4801      	ldr	r0, [pc, #4]	; (800df70 <__sinit_lock_release+0x8>)
 800df6a:	f000 b8a2 	b.w	800e0b2 <__retarget_lock_release_recursive>
 800df6e:	bf00      	nop
 800df70:	20000936 	.word	0x20000936

0800df74 <__sinit>:
 800df74:	b510      	push	{r4, lr}
 800df76:	4604      	mov	r4, r0
 800df78:	f7ff fff0 	bl	800df5c <__sinit_lock_acquire>
 800df7c:	69a3      	ldr	r3, [r4, #24]
 800df7e:	b11b      	cbz	r3, 800df88 <__sinit+0x14>
 800df80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df84:	f7ff bff0 	b.w	800df68 <__sinit_lock_release>
 800df88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df8c:	6523      	str	r3, [r4, #80]	; 0x50
 800df8e:	4b13      	ldr	r3, [pc, #76]	; (800dfdc <__sinit+0x68>)
 800df90:	4a13      	ldr	r2, [pc, #76]	; (800dfe0 <__sinit+0x6c>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	62a2      	str	r2, [r4, #40]	; 0x28
 800df96:	42a3      	cmp	r3, r4
 800df98:	bf04      	itt	eq
 800df9a:	2301      	moveq	r3, #1
 800df9c:	61a3      	streq	r3, [r4, #24]
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f000 f820 	bl	800dfe4 <__sfp>
 800dfa4:	6060      	str	r0, [r4, #4]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 f81c 	bl	800dfe4 <__sfp>
 800dfac:	60a0      	str	r0, [r4, #8]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 f818 	bl	800dfe4 <__sfp>
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	60e0      	str	r0, [r4, #12]
 800dfb8:	2104      	movs	r1, #4
 800dfba:	6860      	ldr	r0, [r4, #4]
 800dfbc:	f7ff ff82 	bl	800dec4 <std>
 800dfc0:	68a0      	ldr	r0, [r4, #8]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	2109      	movs	r1, #9
 800dfc6:	f7ff ff7d 	bl	800dec4 <std>
 800dfca:	68e0      	ldr	r0, [r4, #12]
 800dfcc:	2202      	movs	r2, #2
 800dfce:	2112      	movs	r1, #18
 800dfd0:	f7ff ff78 	bl	800dec4 <std>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	61a3      	str	r3, [r4, #24]
 800dfd8:	e7d2      	b.n	800df80 <__sinit+0xc>
 800dfda:	bf00      	nop
 800dfdc:	08020d60 	.word	0x08020d60
 800dfe0:	0800df0d 	.word	0x0800df0d

0800dfe4 <__sfp>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	f7ff ffac 	bl	800df44 <__sfp_lock_acquire>
 800dfec:	4b1e      	ldr	r3, [pc, #120]	; (800e068 <__sfp+0x84>)
 800dfee:	681e      	ldr	r6, [r3, #0]
 800dff0:	69b3      	ldr	r3, [r6, #24]
 800dff2:	b913      	cbnz	r3, 800dffa <__sfp+0x16>
 800dff4:	4630      	mov	r0, r6
 800dff6:	f7ff ffbd 	bl	800df74 <__sinit>
 800dffa:	3648      	adds	r6, #72	; 0x48
 800dffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e000:	3b01      	subs	r3, #1
 800e002:	d503      	bpl.n	800e00c <__sfp+0x28>
 800e004:	6833      	ldr	r3, [r6, #0]
 800e006:	b30b      	cbz	r3, 800e04c <__sfp+0x68>
 800e008:	6836      	ldr	r6, [r6, #0]
 800e00a:	e7f7      	b.n	800dffc <__sfp+0x18>
 800e00c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e010:	b9d5      	cbnz	r5, 800e048 <__sfp+0x64>
 800e012:	4b16      	ldr	r3, [pc, #88]	; (800e06c <__sfp+0x88>)
 800e014:	60e3      	str	r3, [r4, #12]
 800e016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e01a:	6665      	str	r5, [r4, #100]	; 0x64
 800e01c:	f000 f847 	bl	800e0ae <__retarget_lock_init_recursive>
 800e020:	f7ff ff96 	bl	800df50 <__sfp_lock_release>
 800e024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e02c:	6025      	str	r5, [r4, #0]
 800e02e:	61a5      	str	r5, [r4, #24]
 800e030:	2208      	movs	r2, #8
 800e032:	4629      	mov	r1, r5
 800e034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e038:	f7fb fcf0 	bl	8009a1c <memset>
 800e03c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e044:	4620      	mov	r0, r4
 800e046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e048:	3468      	adds	r4, #104	; 0x68
 800e04a:	e7d9      	b.n	800e000 <__sfp+0x1c>
 800e04c:	2104      	movs	r1, #4
 800e04e:	4638      	mov	r0, r7
 800e050:	f7ff ff62 	bl	800df18 <__sfmoreglue>
 800e054:	4604      	mov	r4, r0
 800e056:	6030      	str	r0, [r6, #0]
 800e058:	2800      	cmp	r0, #0
 800e05a:	d1d5      	bne.n	800e008 <__sfp+0x24>
 800e05c:	f7ff ff78 	bl	800df50 <__sfp_lock_release>
 800e060:	230c      	movs	r3, #12
 800e062:	603b      	str	r3, [r7, #0]
 800e064:	e7ee      	b.n	800e044 <__sfp+0x60>
 800e066:	bf00      	nop
 800e068:	08020d60 	.word	0x08020d60
 800e06c:	ffff0001 	.word	0xffff0001

0800e070 <_fwalk_reent>:
 800e070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e074:	4606      	mov	r6, r0
 800e076:	4688      	mov	r8, r1
 800e078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e07c:	2700      	movs	r7, #0
 800e07e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e082:	f1b9 0901 	subs.w	r9, r9, #1
 800e086:	d505      	bpl.n	800e094 <_fwalk_reent+0x24>
 800e088:	6824      	ldr	r4, [r4, #0]
 800e08a:	2c00      	cmp	r4, #0
 800e08c:	d1f7      	bne.n	800e07e <_fwalk_reent+0xe>
 800e08e:	4638      	mov	r0, r7
 800e090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e094:	89ab      	ldrh	r3, [r5, #12]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d907      	bls.n	800e0aa <_fwalk_reent+0x3a>
 800e09a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	d003      	beq.n	800e0aa <_fwalk_reent+0x3a>
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	47c0      	blx	r8
 800e0a8:	4307      	orrs	r7, r0
 800e0aa:	3568      	adds	r5, #104	; 0x68
 800e0ac:	e7e9      	b.n	800e082 <_fwalk_reent+0x12>

0800e0ae <__retarget_lock_init_recursive>:
 800e0ae:	4770      	bx	lr

0800e0b0 <__retarget_lock_acquire_recursive>:
 800e0b0:	4770      	bx	lr

0800e0b2 <__retarget_lock_release_recursive>:
 800e0b2:	4770      	bx	lr

0800e0b4 <__swhatbuf_r>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	460e      	mov	r6, r1
 800e0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	b096      	sub	sp, #88	; 0x58
 800e0c0:	4614      	mov	r4, r2
 800e0c2:	461d      	mov	r5, r3
 800e0c4:	da08      	bge.n	800e0d8 <__swhatbuf_r+0x24>
 800e0c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	602a      	str	r2, [r5, #0]
 800e0ce:	061a      	lsls	r2, r3, #24
 800e0d0:	d410      	bmi.n	800e0f4 <__swhatbuf_r+0x40>
 800e0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0d6:	e00e      	b.n	800e0f6 <__swhatbuf_r+0x42>
 800e0d8:	466a      	mov	r2, sp
 800e0da:	f000 f903 	bl	800e2e4 <_fstat_r>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	dbf1      	blt.n	800e0c6 <__swhatbuf_r+0x12>
 800e0e2:	9a01      	ldr	r2, [sp, #4]
 800e0e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0ec:	425a      	negs	r2, r3
 800e0ee:	415a      	adcs	r2, r3
 800e0f0:	602a      	str	r2, [r5, #0]
 800e0f2:	e7ee      	b.n	800e0d2 <__swhatbuf_r+0x1e>
 800e0f4:	2340      	movs	r3, #64	; 0x40
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	b016      	add	sp, #88	; 0x58
 800e0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e100 <__smakebuf_r>:
 800e100:	898b      	ldrh	r3, [r1, #12]
 800e102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e104:	079d      	lsls	r5, r3, #30
 800e106:	4606      	mov	r6, r0
 800e108:	460c      	mov	r4, r1
 800e10a:	d507      	bpl.n	800e11c <__smakebuf_r+0x1c>
 800e10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	6123      	str	r3, [r4, #16]
 800e114:	2301      	movs	r3, #1
 800e116:	6163      	str	r3, [r4, #20]
 800e118:	b002      	add	sp, #8
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	ab01      	add	r3, sp, #4
 800e11e:	466a      	mov	r2, sp
 800e120:	f7ff ffc8 	bl	800e0b4 <__swhatbuf_r>
 800e124:	9900      	ldr	r1, [sp, #0]
 800e126:	4605      	mov	r5, r0
 800e128:	4630      	mov	r0, r6
 800e12a:	f7ff f959 	bl	800d3e0 <_malloc_r>
 800e12e:	b948      	cbnz	r0, 800e144 <__smakebuf_r+0x44>
 800e130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e134:	059a      	lsls	r2, r3, #22
 800e136:	d4ef      	bmi.n	800e118 <__smakebuf_r+0x18>
 800e138:	f023 0303 	bic.w	r3, r3, #3
 800e13c:	f043 0302 	orr.w	r3, r3, #2
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	e7e3      	b.n	800e10c <__smakebuf_r+0xc>
 800e144:	4b0d      	ldr	r3, [pc, #52]	; (800e17c <__smakebuf_r+0x7c>)
 800e146:	62b3      	str	r3, [r6, #40]	; 0x28
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	6020      	str	r0, [r4, #0]
 800e14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	9b00      	ldr	r3, [sp, #0]
 800e154:	6163      	str	r3, [r4, #20]
 800e156:	9b01      	ldr	r3, [sp, #4]
 800e158:	6120      	str	r0, [r4, #16]
 800e15a:	b15b      	cbz	r3, 800e174 <__smakebuf_r+0x74>
 800e15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e160:	4630      	mov	r0, r6
 800e162:	f000 f8d1 	bl	800e308 <_isatty_r>
 800e166:	b128      	cbz	r0, 800e174 <__smakebuf_r+0x74>
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	f023 0303 	bic.w	r3, r3, #3
 800e16e:	f043 0301 	orr.w	r3, r3, #1
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	89a0      	ldrh	r0, [r4, #12]
 800e176:	4305      	orrs	r5, r0
 800e178:	81a5      	strh	r5, [r4, #12]
 800e17a:	e7cd      	b.n	800e118 <__smakebuf_r+0x18>
 800e17c:	0800df0d 	.word	0x0800df0d

0800e180 <_malloc_usable_size_r>:
 800e180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e184:	1f18      	subs	r0, r3, #4
 800e186:	2b00      	cmp	r3, #0
 800e188:	bfbc      	itt	lt
 800e18a:	580b      	ldrlt	r3, [r1, r0]
 800e18c:	18c0      	addlt	r0, r0, r3
 800e18e:	4770      	bx	lr

0800e190 <_raise_r>:
 800e190:	291f      	cmp	r1, #31
 800e192:	b538      	push	{r3, r4, r5, lr}
 800e194:	4604      	mov	r4, r0
 800e196:	460d      	mov	r5, r1
 800e198:	d904      	bls.n	800e1a4 <_raise_r+0x14>
 800e19a:	2316      	movs	r3, #22
 800e19c:	6003      	str	r3, [r0, #0]
 800e19e:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1a6:	b112      	cbz	r2, 800e1ae <_raise_r+0x1e>
 800e1a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1ac:	b94b      	cbnz	r3, 800e1c2 <_raise_r+0x32>
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 f830 	bl	800e214 <_getpid_r>
 800e1b4:	462a      	mov	r2, r5
 800e1b6:	4601      	mov	r1, r0
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1be:	f000 b817 	b.w	800e1f0 <_kill_r>
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d00a      	beq.n	800e1dc <_raise_r+0x4c>
 800e1c6:	1c59      	adds	r1, r3, #1
 800e1c8:	d103      	bne.n	800e1d2 <_raise_r+0x42>
 800e1ca:	2316      	movs	r3, #22
 800e1cc:	6003      	str	r3, [r0, #0]
 800e1ce:	2001      	movs	r0, #1
 800e1d0:	e7e7      	b.n	800e1a2 <_raise_r+0x12>
 800e1d2:	2400      	movs	r4, #0
 800e1d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1d8:	4628      	mov	r0, r5
 800e1da:	4798      	blx	r3
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e7e0      	b.n	800e1a2 <_raise_r+0x12>

0800e1e0 <raise>:
 800e1e0:	4b02      	ldr	r3, [pc, #8]	; (800e1ec <raise+0xc>)
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	6818      	ldr	r0, [r3, #0]
 800e1e6:	f7ff bfd3 	b.w	800e190 <_raise_r>
 800e1ea:	bf00      	nop
 800e1ec:	20000060 	.word	0x20000060

0800e1f0 <_kill_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4d07      	ldr	r5, [pc, #28]	; (800e210 <_kill_r+0x20>)
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	4608      	mov	r0, r1
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	602b      	str	r3, [r5, #0]
 800e1fe:	f7f6 ff05 	bl	800500c <_kill>
 800e202:	1c43      	adds	r3, r0, #1
 800e204:	d102      	bne.n	800e20c <_kill_r+0x1c>
 800e206:	682b      	ldr	r3, [r5, #0]
 800e208:	b103      	cbz	r3, 800e20c <_kill_r+0x1c>
 800e20a:	6023      	str	r3, [r4, #0]
 800e20c:	bd38      	pop	{r3, r4, r5, pc}
 800e20e:	bf00      	nop
 800e210:	20000930 	.word	0x20000930

0800e214 <_getpid_r>:
 800e214:	f7f6 bef2 	b.w	8004ffc <_getpid>

0800e218 <__sread>:
 800e218:	b510      	push	{r4, lr}
 800e21a:	460c      	mov	r4, r1
 800e21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e220:	f000 f894 	bl	800e34c <_read_r>
 800e224:	2800      	cmp	r0, #0
 800e226:	bfab      	itete	ge
 800e228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e22a:	89a3      	ldrhlt	r3, [r4, #12]
 800e22c:	181b      	addge	r3, r3, r0
 800e22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e232:	bfac      	ite	ge
 800e234:	6563      	strge	r3, [r4, #84]	; 0x54
 800e236:	81a3      	strhlt	r3, [r4, #12]
 800e238:	bd10      	pop	{r4, pc}

0800e23a <__swrite>:
 800e23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23e:	461f      	mov	r7, r3
 800e240:	898b      	ldrh	r3, [r1, #12]
 800e242:	05db      	lsls	r3, r3, #23
 800e244:	4605      	mov	r5, r0
 800e246:	460c      	mov	r4, r1
 800e248:	4616      	mov	r6, r2
 800e24a:	d505      	bpl.n	800e258 <__swrite+0x1e>
 800e24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e250:	2302      	movs	r3, #2
 800e252:	2200      	movs	r2, #0
 800e254:	f000 f868 	bl	800e328 <_lseek_r>
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e262:	81a3      	strh	r3, [r4, #12]
 800e264:	4632      	mov	r2, r6
 800e266:	463b      	mov	r3, r7
 800e268:	4628      	mov	r0, r5
 800e26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e26e:	f000 b817 	b.w	800e2a0 <_write_r>

0800e272 <__sseek>:
 800e272:	b510      	push	{r4, lr}
 800e274:	460c      	mov	r4, r1
 800e276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e27a:	f000 f855 	bl	800e328 <_lseek_r>
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	bf15      	itete	ne
 800e284:	6560      	strne	r0, [r4, #84]	; 0x54
 800e286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e28e:	81a3      	strheq	r3, [r4, #12]
 800e290:	bf18      	it	ne
 800e292:	81a3      	strhne	r3, [r4, #12]
 800e294:	bd10      	pop	{r4, pc}

0800e296 <__sclose>:
 800e296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e29a:	f000 b813 	b.w	800e2c4 <_close_r>
	...

0800e2a0 <_write_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	4d07      	ldr	r5, [pc, #28]	; (800e2c0 <_write_r+0x20>)
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	4608      	mov	r0, r1
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	602a      	str	r2, [r5, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f7f6 fee3 	bl	800507a <_write>
 800e2b4:	1c43      	adds	r3, r0, #1
 800e2b6:	d102      	bne.n	800e2be <_write_r+0x1e>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	b103      	cbz	r3, 800e2be <_write_r+0x1e>
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	20000930 	.word	0x20000930

0800e2c4 <_close_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d06      	ldr	r5, [pc, #24]	; (800e2e0 <_close_r+0x1c>)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	602b      	str	r3, [r5, #0]
 800e2d0:	f7f6 feef 	bl	80050b2 <_close>
 800e2d4:	1c43      	adds	r3, r0, #1
 800e2d6:	d102      	bne.n	800e2de <_close_r+0x1a>
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	b103      	cbz	r3, 800e2de <_close_r+0x1a>
 800e2dc:	6023      	str	r3, [r4, #0]
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	20000930 	.word	0x20000930

0800e2e4 <_fstat_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d07      	ldr	r5, [pc, #28]	; (800e304 <_fstat_r+0x20>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	602b      	str	r3, [r5, #0]
 800e2f2:	f7f6 feea 	bl	80050ca <_fstat>
 800e2f6:	1c43      	adds	r3, r0, #1
 800e2f8:	d102      	bne.n	800e300 <_fstat_r+0x1c>
 800e2fa:	682b      	ldr	r3, [r5, #0]
 800e2fc:	b103      	cbz	r3, 800e300 <_fstat_r+0x1c>
 800e2fe:	6023      	str	r3, [r4, #0]
 800e300:	bd38      	pop	{r3, r4, r5, pc}
 800e302:	bf00      	nop
 800e304:	20000930 	.word	0x20000930

0800e308 <_isatty_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	4d06      	ldr	r5, [pc, #24]	; (800e324 <_isatty_r+0x1c>)
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	602b      	str	r3, [r5, #0]
 800e314:	f7f6 fee9 	bl	80050ea <_isatty>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d102      	bne.n	800e322 <_isatty_r+0x1a>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	b103      	cbz	r3, 800e322 <_isatty_r+0x1a>
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	bd38      	pop	{r3, r4, r5, pc}
 800e324:	20000930 	.word	0x20000930

0800e328 <_lseek_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4d07      	ldr	r5, [pc, #28]	; (800e348 <_lseek_r+0x20>)
 800e32c:	4604      	mov	r4, r0
 800e32e:	4608      	mov	r0, r1
 800e330:	4611      	mov	r1, r2
 800e332:	2200      	movs	r2, #0
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f7f6 fee2 	bl	8005100 <_lseek>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_lseek_r+0x1e>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_lseek_r+0x1e>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	20000930 	.word	0x20000930

0800e34c <_read_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d07      	ldr	r5, [pc, #28]	; (800e36c <_read_r+0x20>)
 800e350:	4604      	mov	r4, r0
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	2200      	movs	r2, #0
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f6 fe70 	bl	8005040 <_read>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_read_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_read_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	20000930 	.word	0x20000930

0800e370 <floor>:
 800e370:	ec51 0b10 	vmov	r0, r1, d0
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e37c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e380:	2e13      	cmp	r6, #19
 800e382:	ee10 5a10 	vmov	r5, s0
 800e386:	ee10 8a10 	vmov	r8, s0
 800e38a:	460c      	mov	r4, r1
 800e38c:	dc32      	bgt.n	800e3f4 <floor+0x84>
 800e38e:	2e00      	cmp	r6, #0
 800e390:	da14      	bge.n	800e3bc <floor+0x4c>
 800e392:	a333      	add	r3, pc, #204	; (adr r3, 800e460 <floor+0xf0>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff78 	bl	800028c <__adddf3>
 800e39c:	2200      	movs	r2, #0
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f7f2 fbba 	bl	8000b18 <__aeabi_dcmpgt>
 800e3a4:	b138      	cbz	r0, 800e3b6 <floor+0x46>
 800e3a6:	2c00      	cmp	r4, #0
 800e3a8:	da57      	bge.n	800e45a <floor+0xea>
 800e3aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e3ae:	431d      	orrs	r5, r3
 800e3b0:	d001      	beq.n	800e3b6 <floor+0x46>
 800e3b2:	4c2d      	ldr	r4, [pc, #180]	; (800e468 <floor+0xf8>)
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	e025      	b.n	800e408 <floor+0x98>
 800e3bc:	4f2b      	ldr	r7, [pc, #172]	; (800e46c <floor+0xfc>)
 800e3be:	4137      	asrs	r7, r6
 800e3c0:	ea01 0307 	and.w	r3, r1, r7
 800e3c4:	4303      	orrs	r3, r0
 800e3c6:	d01f      	beq.n	800e408 <floor+0x98>
 800e3c8:	a325      	add	r3, pc, #148	; (adr r3, 800e460 <floor+0xf0>)
 800e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ce:	f7f1 ff5d 	bl	800028c <__adddf3>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	f7f2 fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	d0eb      	beq.n	800e3b6 <floor+0x46>
 800e3de:	2c00      	cmp	r4, #0
 800e3e0:	bfbe      	ittt	lt
 800e3e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e3e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800e3ea:	19a4      	addlt	r4, r4, r6
 800e3ec:	ea24 0407 	bic.w	r4, r4, r7
 800e3f0:	2500      	movs	r5, #0
 800e3f2:	e7e0      	b.n	800e3b6 <floor+0x46>
 800e3f4:	2e33      	cmp	r6, #51	; 0x33
 800e3f6:	dd0b      	ble.n	800e410 <floor+0xa0>
 800e3f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e3fc:	d104      	bne.n	800e408 <floor+0x98>
 800e3fe:	ee10 2a10 	vmov	r2, s0
 800e402:	460b      	mov	r3, r1
 800e404:	f7f1 ff42 	bl	800028c <__adddf3>
 800e408:	ec41 0b10 	vmov	d0, r0, r1
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e410:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e414:	f04f 33ff 	mov.w	r3, #4294967295
 800e418:	fa23 f707 	lsr.w	r7, r3, r7
 800e41c:	4207      	tst	r7, r0
 800e41e:	d0f3      	beq.n	800e408 <floor+0x98>
 800e420:	a30f      	add	r3, pc, #60	; (adr r3, 800e460 <floor+0xf0>)
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f7f1 ff31 	bl	800028c <__adddf3>
 800e42a:	2200      	movs	r2, #0
 800e42c:	2300      	movs	r3, #0
 800e42e:	f7f2 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 800e432:	2800      	cmp	r0, #0
 800e434:	d0bf      	beq.n	800e3b6 <floor+0x46>
 800e436:	2c00      	cmp	r4, #0
 800e438:	da02      	bge.n	800e440 <floor+0xd0>
 800e43a:	2e14      	cmp	r6, #20
 800e43c:	d103      	bne.n	800e446 <floor+0xd6>
 800e43e:	3401      	adds	r4, #1
 800e440:	ea25 0507 	bic.w	r5, r5, r7
 800e444:	e7b7      	b.n	800e3b6 <floor+0x46>
 800e446:	2301      	movs	r3, #1
 800e448:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e44c:	fa03 f606 	lsl.w	r6, r3, r6
 800e450:	4435      	add	r5, r6
 800e452:	4545      	cmp	r5, r8
 800e454:	bf38      	it	cc
 800e456:	18e4      	addcc	r4, r4, r3
 800e458:	e7f2      	b.n	800e440 <floor+0xd0>
 800e45a:	2500      	movs	r5, #0
 800e45c:	462c      	mov	r4, r5
 800e45e:	e7aa      	b.n	800e3b6 <floor+0x46>
 800e460:	8800759c 	.word	0x8800759c
 800e464:	7e37e43c 	.word	0x7e37e43c
 800e468:	bff00000 	.word	0xbff00000
 800e46c:	000fffff 	.word	0x000fffff

0800e470 <pow>:
 800e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e472:	ed2d 8b02 	vpush	{d8}
 800e476:	eeb0 8a40 	vmov.f32	s16, s0
 800e47a:	eef0 8a60 	vmov.f32	s17, s1
 800e47e:	ec55 4b11 	vmov	r4, r5, d1
 800e482:	f000 f865 	bl	800e550 <__ieee754_pow>
 800e486:	4622      	mov	r2, r4
 800e488:	462b      	mov	r3, r5
 800e48a:	4620      	mov	r0, r4
 800e48c:	4629      	mov	r1, r5
 800e48e:	ec57 6b10 	vmov	r6, r7, d0
 800e492:	f7f2 fb4b 	bl	8000b2c <__aeabi_dcmpun>
 800e496:	2800      	cmp	r0, #0
 800e498:	d13b      	bne.n	800e512 <pow+0xa2>
 800e49a:	ec51 0b18 	vmov	r0, r1, d8
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f7f2 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4a6:	b1b8      	cbz	r0, 800e4d8 <pow+0x68>
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f7f2 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d146      	bne.n	800e546 <pow+0xd6>
 800e4b8:	ec45 4b10 	vmov	d0, r4, r5
 800e4bc:	f000 fe61 	bl	800f182 <finite>
 800e4c0:	b338      	cbz	r0, 800e512 <pow+0xa2>
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	f7f2 fb07 	bl	8000adc <__aeabi_dcmplt>
 800e4ce:	b300      	cbz	r0, 800e512 <pow+0xa2>
 800e4d0:	f7fb fa5c 	bl	800998c <__errno>
 800e4d4:	2322      	movs	r3, #34	; 0x22
 800e4d6:	e01b      	b.n	800e510 <pow+0xa0>
 800e4d8:	ec47 6b10 	vmov	d0, r6, r7
 800e4dc:	f000 fe51 	bl	800f182 <finite>
 800e4e0:	b9e0      	cbnz	r0, 800e51c <pow+0xac>
 800e4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800e4e6:	eef0 0a68 	vmov.f32	s1, s17
 800e4ea:	f000 fe4a 	bl	800f182 <finite>
 800e4ee:	b1a8      	cbz	r0, 800e51c <pow+0xac>
 800e4f0:	ec45 4b10 	vmov	d0, r4, r5
 800e4f4:	f000 fe45 	bl	800f182 <finite>
 800e4f8:	b180      	cbz	r0, 800e51c <pow+0xac>
 800e4fa:	4632      	mov	r2, r6
 800e4fc:	463b      	mov	r3, r7
 800e4fe:	4630      	mov	r0, r6
 800e500:	4639      	mov	r1, r7
 800e502:	f7f2 fb13 	bl	8000b2c <__aeabi_dcmpun>
 800e506:	2800      	cmp	r0, #0
 800e508:	d0e2      	beq.n	800e4d0 <pow+0x60>
 800e50a:	f7fb fa3f 	bl	800998c <__errno>
 800e50e:	2321      	movs	r3, #33	; 0x21
 800e510:	6003      	str	r3, [r0, #0]
 800e512:	ecbd 8b02 	vpop	{d8}
 800e516:	ec47 6b10 	vmov	d0, r6, r7
 800e51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e51c:	2200      	movs	r2, #0
 800e51e:	2300      	movs	r3, #0
 800e520:	4630      	mov	r0, r6
 800e522:	4639      	mov	r1, r7
 800e524:	f7f2 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d0f2      	beq.n	800e512 <pow+0xa2>
 800e52c:	eeb0 0a48 	vmov.f32	s0, s16
 800e530:	eef0 0a68 	vmov.f32	s1, s17
 800e534:	f000 fe25 	bl	800f182 <finite>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d0ea      	beq.n	800e512 <pow+0xa2>
 800e53c:	ec45 4b10 	vmov	d0, r4, r5
 800e540:	f000 fe1f 	bl	800f182 <finite>
 800e544:	e7c3      	b.n	800e4ce <pow+0x5e>
 800e546:	4f01      	ldr	r7, [pc, #4]	; (800e54c <pow+0xdc>)
 800e548:	2600      	movs	r6, #0
 800e54a:	e7e2      	b.n	800e512 <pow+0xa2>
 800e54c:	3ff00000 	.word	0x3ff00000

0800e550 <__ieee754_pow>:
 800e550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e554:	ed2d 8b06 	vpush	{d8-d10}
 800e558:	b089      	sub	sp, #36	; 0x24
 800e55a:	ed8d 1b00 	vstr	d1, [sp]
 800e55e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e562:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e566:	ea58 0102 	orrs.w	r1, r8, r2
 800e56a:	ec57 6b10 	vmov	r6, r7, d0
 800e56e:	d115      	bne.n	800e59c <__ieee754_pow+0x4c>
 800e570:	19b3      	adds	r3, r6, r6
 800e572:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e576:	4152      	adcs	r2, r2
 800e578:	4299      	cmp	r1, r3
 800e57a:	4b89      	ldr	r3, [pc, #548]	; (800e7a0 <__ieee754_pow+0x250>)
 800e57c:	4193      	sbcs	r3, r2
 800e57e:	f080 84d2 	bcs.w	800ef26 <__ieee754_pow+0x9d6>
 800e582:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e586:	4630      	mov	r0, r6
 800e588:	4639      	mov	r1, r7
 800e58a:	f7f1 fe7f 	bl	800028c <__adddf3>
 800e58e:	ec41 0b10 	vmov	d0, r0, r1
 800e592:	b009      	add	sp, #36	; 0x24
 800e594:	ecbd 8b06 	vpop	{d8-d10}
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	4b81      	ldr	r3, [pc, #516]	; (800e7a4 <__ieee754_pow+0x254>)
 800e59e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e5a2:	429c      	cmp	r4, r3
 800e5a4:	ee10 aa10 	vmov	sl, s0
 800e5a8:	463d      	mov	r5, r7
 800e5aa:	dc06      	bgt.n	800e5ba <__ieee754_pow+0x6a>
 800e5ac:	d101      	bne.n	800e5b2 <__ieee754_pow+0x62>
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	d1e7      	bne.n	800e582 <__ieee754_pow+0x32>
 800e5b2:	4598      	cmp	r8, r3
 800e5b4:	dc01      	bgt.n	800e5ba <__ieee754_pow+0x6a>
 800e5b6:	d10f      	bne.n	800e5d8 <__ieee754_pow+0x88>
 800e5b8:	b172      	cbz	r2, 800e5d8 <__ieee754_pow+0x88>
 800e5ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e5be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e5c2:	ea55 050a 	orrs.w	r5, r5, sl
 800e5c6:	d1dc      	bne.n	800e582 <__ieee754_pow+0x32>
 800e5c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5cc:	18db      	adds	r3, r3, r3
 800e5ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e5d2:	4152      	adcs	r2, r2
 800e5d4:	429d      	cmp	r5, r3
 800e5d6:	e7d0      	b.n	800e57a <__ieee754_pow+0x2a>
 800e5d8:	2d00      	cmp	r5, #0
 800e5da:	da3b      	bge.n	800e654 <__ieee754_pow+0x104>
 800e5dc:	4b72      	ldr	r3, [pc, #456]	; (800e7a8 <__ieee754_pow+0x258>)
 800e5de:	4598      	cmp	r8, r3
 800e5e0:	dc51      	bgt.n	800e686 <__ieee754_pow+0x136>
 800e5e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e5e6:	4598      	cmp	r8, r3
 800e5e8:	f340 84ac 	ble.w	800ef44 <__ieee754_pow+0x9f4>
 800e5ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e5f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e5f4:	2b14      	cmp	r3, #20
 800e5f6:	dd0f      	ble.n	800e618 <__ieee754_pow+0xc8>
 800e5f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e5fc:	fa22 f103 	lsr.w	r1, r2, r3
 800e600:	fa01 f303 	lsl.w	r3, r1, r3
 800e604:	4293      	cmp	r3, r2
 800e606:	f040 849d 	bne.w	800ef44 <__ieee754_pow+0x9f4>
 800e60a:	f001 0101 	and.w	r1, r1, #1
 800e60e:	f1c1 0302 	rsb	r3, r1, #2
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	b182      	cbz	r2, 800e638 <__ieee754_pow+0xe8>
 800e616:	e05f      	b.n	800e6d8 <__ieee754_pow+0x188>
 800e618:	2a00      	cmp	r2, #0
 800e61a:	d15b      	bne.n	800e6d4 <__ieee754_pow+0x184>
 800e61c:	f1c3 0314 	rsb	r3, r3, #20
 800e620:	fa48 f103 	asr.w	r1, r8, r3
 800e624:	fa01 f303 	lsl.w	r3, r1, r3
 800e628:	4543      	cmp	r3, r8
 800e62a:	f040 8488 	bne.w	800ef3e <__ieee754_pow+0x9ee>
 800e62e:	f001 0101 	and.w	r1, r1, #1
 800e632:	f1c1 0302 	rsb	r3, r1, #2
 800e636:	9304      	str	r3, [sp, #16]
 800e638:	4b5c      	ldr	r3, [pc, #368]	; (800e7ac <__ieee754_pow+0x25c>)
 800e63a:	4598      	cmp	r8, r3
 800e63c:	d132      	bne.n	800e6a4 <__ieee754_pow+0x154>
 800e63e:	f1b9 0f00 	cmp.w	r9, #0
 800e642:	f280 8478 	bge.w	800ef36 <__ieee754_pow+0x9e6>
 800e646:	4959      	ldr	r1, [pc, #356]	; (800e7ac <__ieee754_pow+0x25c>)
 800e648:	4632      	mov	r2, r6
 800e64a:	463b      	mov	r3, r7
 800e64c:	2000      	movs	r0, #0
 800e64e:	f7f2 f8fd 	bl	800084c <__aeabi_ddiv>
 800e652:	e79c      	b.n	800e58e <__ieee754_pow+0x3e>
 800e654:	2300      	movs	r3, #0
 800e656:	9304      	str	r3, [sp, #16]
 800e658:	2a00      	cmp	r2, #0
 800e65a:	d13d      	bne.n	800e6d8 <__ieee754_pow+0x188>
 800e65c:	4b51      	ldr	r3, [pc, #324]	; (800e7a4 <__ieee754_pow+0x254>)
 800e65e:	4598      	cmp	r8, r3
 800e660:	d1ea      	bne.n	800e638 <__ieee754_pow+0xe8>
 800e662:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e666:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e66a:	ea53 030a 	orrs.w	r3, r3, sl
 800e66e:	f000 845a 	beq.w	800ef26 <__ieee754_pow+0x9d6>
 800e672:	4b4f      	ldr	r3, [pc, #316]	; (800e7b0 <__ieee754_pow+0x260>)
 800e674:	429c      	cmp	r4, r3
 800e676:	dd08      	ble.n	800e68a <__ieee754_pow+0x13a>
 800e678:	f1b9 0f00 	cmp.w	r9, #0
 800e67c:	f2c0 8457 	blt.w	800ef2e <__ieee754_pow+0x9de>
 800e680:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e684:	e783      	b.n	800e58e <__ieee754_pow+0x3e>
 800e686:	2302      	movs	r3, #2
 800e688:	e7e5      	b.n	800e656 <__ieee754_pow+0x106>
 800e68a:	f1b9 0f00 	cmp.w	r9, #0
 800e68e:	f04f 0000 	mov.w	r0, #0
 800e692:	f04f 0100 	mov.w	r1, #0
 800e696:	f6bf af7a 	bge.w	800e58e <__ieee754_pow+0x3e>
 800e69a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e69e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e6a2:	e774      	b.n	800e58e <__ieee754_pow+0x3e>
 800e6a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e6a8:	d106      	bne.n	800e6b8 <__ieee754_pow+0x168>
 800e6aa:	4632      	mov	r2, r6
 800e6ac:	463b      	mov	r3, r7
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	4639      	mov	r1, r7
 800e6b2:	f7f1 ffa1 	bl	80005f8 <__aeabi_dmul>
 800e6b6:	e76a      	b.n	800e58e <__ieee754_pow+0x3e>
 800e6b8:	4b3e      	ldr	r3, [pc, #248]	; (800e7b4 <__ieee754_pow+0x264>)
 800e6ba:	4599      	cmp	r9, r3
 800e6bc:	d10c      	bne.n	800e6d8 <__ieee754_pow+0x188>
 800e6be:	2d00      	cmp	r5, #0
 800e6c0:	db0a      	blt.n	800e6d8 <__ieee754_pow+0x188>
 800e6c2:	ec47 6b10 	vmov	d0, r6, r7
 800e6c6:	b009      	add	sp, #36	; 0x24
 800e6c8:	ecbd 8b06 	vpop	{d8-d10}
 800e6cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d0:	f000 bc6c 	b.w	800efac <__ieee754_sqrt>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	9304      	str	r3, [sp, #16]
 800e6d8:	ec47 6b10 	vmov	d0, r6, r7
 800e6dc:	f000 fd48 	bl	800f170 <fabs>
 800e6e0:	ec51 0b10 	vmov	r0, r1, d0
 800e6e4:	f1ba 0f00 	cmp.w	sl, #0
 800e6e8:	d129      	bne.n	800e73e <__ieee754_pow+0x1ee>
 800e6ea:	b124      	cbz	r4, 800e6f6 <__ieee754_pow+0x1a6>
 800e6ec:	4b2f      	ldr	r3, [pc, #188]	; (800e7ac <__ieee754_pow+0x25c>)
 800e6ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d123      	bne.n	800e73e <__ieee754_pow+0x1ee>
 800e6f6:	f1b9 0f00 	cmp.w	r9, #0
 800e6fa:	da05      	bge.n	800e708 <__ieee754_pow+0x1b8>
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	2000      	movs	r0, #0
 800e702:	492a      	ldr	r1, [pc, #168]	; (800e7ac <__ieee754_pow+0x25c>)
 800e704:	f7f2 f8a2 	bl	800084c <__aeabi_ddiv>
 800e708:	2d00      	cmp	r5, #0
 800e70a:	f6bf af40 	bge.w	800e58e <__ieee754_pow+0x3e>
 800e70e:	9b04      	ldr	r3, [sp, #16]
 800e710:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e714:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e718:	4323      	orrs	r3, r4
 800e71a:	d108      	bne.n	800e72e <__ieee754_pow+0x1de>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	4610      	mov	r0, r2
 800e722:	4619      	mov	r1, r3
 800e724:	f7f1 fdb0 	bl	8000288 <__aeabi_dsub>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	e78f      	b.n	800e64e <__ieee754_pow+0xfe>
 800e72e:	9b04      	ldr	r3, [sp, #16]
 800e730:	2b01      	cmp	r3, #1
 800e732:	f47f af2c 	bne.w	800e58e <__ieee754_pow+0x3e>
 800e736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e73a:	4619      	mov	r1, r3
 800e73c:	e727      	b.n	800e58e <__ieee754_pow+0x3e>
 800e73e:	0feb      	lsrs	r3, r5, #31
 800e740:	3b01      	subs	r3, #1
 800e742:	9306      	str	r3, [sp, #24]
 800e744:	9a06      	ldr	r2, [sp, #24]
 800e746:	9b04      	ldr	r3, [sp, #16]
 800e748:	4313      	orrs	r3, r2
 800e74a:	d102      	bne.n	800e752 <__ieee754_pow+0x202>
 800e74c:	4632      	mov	r2, r6
 800e74e:	463b      	mov	r3, r7
 800e750:	e7e6      	b.n	800e720 <__ieee754_pow+0x1d0>
 800e752:	4b19      	ldr	r3, [pc, #100]	; (800e7b8 <__ieee754_pow+0x268>)
 800e754:	4598      	cmp	r8, r3
 800e756:	f340 80fb 	ble.w	800e950 <__ieee754_pow+0x400>
 800e75a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e75e:	4598      	cmp	r8, r3
 800e760:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <__ieee754_pow+0x260>)
 800e762:	dd0c      	ble.n	800e77e <__ieee754_pow+0x22e>
 800e764:	429c      	cmp	r4, r3
 800e766:	dc0f      	bgt.n	800e788 <__ieee754_pow+0x238>
 800e768:	f1b9 0f00 	cmp.w	r9, #0
 800e76c:	da0f      	bge.n	800e78e <__ieee754_pow+0x23e>
 800e76e:	2000      	movs	r0, #0
 800e770:	b009      	add	sp, #36	; 0x24
 800e772:	ecbd 8b06 	vpop	{d8-d10}
 800e776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77a:	f000 bcf0 	b.w	800f15e <__math_oflow>
 800e77e:	429c      	cmp	r4, r3
 800e780:	dbf2      	blt.n	800e768 <__ieee754_pow+0x218>
 800e782:	4b0a      	ldr	r3, [pc, #40]	; (800e7ac <__ieee754_pow+0x25c>)
 800e784:	429c      	cmp	r4, r3
 800e786:	dd19      	ble.n	800e7bc <__ieee754_pow+0x26c>
 800e788:	f1b9 0f00 	cmp.w	r9, #0
 800e78c:	dcef      	bgt.n	800e76e <__ieee754_pow+0x21e>
 800e78e:	2000      	movs	r0, #0
 800e790:	b009      	add	sp, #36	; 0x24
 800e792:	ecbd 8b06 	vpop	{d8-d10}
 800e796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	f000 bcd7 	b.w	800f14c <__math_uflow>
 800e79e:	bf00      	nop
 800e7a0:	fff00000 	.word	0xfff00000
 800e7a4:	7ff00000 	.word	0x7ff00000
 800e7a8:	433fffff 	.word	0x433fffff
 800e7ac:	3ff00000 	.word	0x3ff00000
 800e7b0:	3fefffff 	.word	0x3fefffff
 800e7b4:	3fe00000 	.word	0x3fe00000
 800e7b8:	41e00000 	.word	0x41e00000
 800e7bc:	4b60      	ldr	r3, [pc, #384]	; (800e940 <__ieee754_pow+0x3f0>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f7f1 fd62 	bl	8000288 <__aeabi_dsub>
 800e7c4:	a354      	add	r3, pc, #336	; (adr r3, 800e918 <__ieee754_pow+0x3c8>)
 800e7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	460d      	mov	r5, r1
 800e7ce:	f7f1 ff13 	bl	80005f8 <__aeabi_dmul>
 800e7d2:	a353      	add	r3, pc, #332	; (adr r3, 800e920 <__ieee754_pow+0x3d0>)
 800e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d8:	4606      	mov	r6, r0
 800e7da:	460f      	mov	r7, r1
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7f1 ff0a 	bl	80005f8 <__aeabi_dmul>
 800e7e4:	4b57      	ldr	r3, [pc, #348]	; (800e944 <__ieee754_pow+0x3f4>)
 800e7e6:	4682      	mov	sl, r0
 800e7e8:	468b      	mov	fp, r1
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	f7f1 ff02 	bl	80005f8 <__aeabi_dmul>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	a14b      	add	r1, pc, #300	; (adr r1, 800e928 <__ieee754_pow+0x3d8>)
 800e7fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7fe:	f7f1 fd43 	bl	8000288 <__aeabi_dsub>
 800e802:	4622      	mov	r2, r4
 800e804:	462b      	mov	r3, r5
 800e806:	f7f1 fef7 	bl	80005f8 <__aeabi_dmul>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	2000      	movs	r0, #0
 800e810:	494d      	ldr	r1, [pc, #308]	; (800e948 <__ieee754_pow+0x3f8>)
 800e812:	f7f1 fd39 	bl	8000288 <__aeabi_dsub>
 800e816:	4622      	mov	r2, r4
 800e818:	4680      	mov	r8, r0
 800e81a:	4689      	mov	r9, r1
 800e81c:	462b      	mov	r3, r5
 800e81e:	4620      	mov	r0, r4
 800e820:	4629      	mov	r1, r5
 800e822:	f7f1 fee9 	bl	80005f8 <__aeabi_dmul>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	f7f1 fee3 	bl	80005f8 <__aeabi_dmul>
 800e832:	a33f      	add	r3, pc, #252	; (adr r3, 800e930 <__ieee754_pow+0x3e0>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 fede 	bl	80005f8 <__aeabi_dmul>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4650      	mov	r0, sl
 800e842:	4659      	mov	r1, fp
 800e844:	f7f1 fd20 	bl	8000288 <__aeabi_dsub>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4680      	mov	r8, r0
 800e84e:	4689      	mov	r9, r1
 800e850:	4630      	mov	r0, r6
 800e852:	4639      	mov	r1, r7
 800e854:	f7f1 fd1a 	bl	800028c <__adddf3>
 800e858:	2000      	movs	r0, #0
 800e85a:	4632      	mov	r2, r6
 800e85c:	463b      	mov	r3, r7
 800e85e:	4604      	mov	r4, r0
 800e860:	460d      	mov	r5, r1
 800e862:	f7f1 fd11 	bl	8000288 <__aeabi_dsub>
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	4640      	mov	r0, r8
 800e86c:	4649      	mov	r1, r9
 800e86e:	f7f1 fd0b 	bl	8000288 <__aeabi_dsub>
 800e872:	9b04      	ldr	r3, [sp, #16]
 800e874:	9a06      	ldr	r2, [sp, #24]
 800e876:	3b01      	subs	r3, #1
 800e878:	4313      	orrs	r3, r2
 800e87a:	4682      	mov	sl, r0
 800e87c:	468b      	mov	fp, r1
 800e87e:	f040 81e7 	bne.w	800ec50 <__ieee754_pow+0x700>
 800e882:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e938 <__ieee754_pow+0x3e8>
 800e886:	eeb0 8a47 	vmov.f32	s16, s14
 800e88a:	eef0 8a67 	vmov.f32	s17, s15
 800e88e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e892:	2600      	movs	r6, #0
 800e894:	4632      	mov	r2, r6
 800e896:	463b      	mov	r3, r7
 800e898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e89c:	f7f1 fcf4 	bl	8000288 <__aeabi_dsub>
 800e8a0:	4622      	mov	r2, r4
 800e8a2:	462b      	mov	r3, r5
 800e8a4:	f7f1 fea8 	bl	80005f8 <__aeabi_dmul>
 800e8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	4689      	mov	r9, r1
 800e8b0:	4650      	mov	r0, sl
 800e8b2:	4659      	mov	r1, fp
 800e8b4:	f7f1 fea0 	bl	80005f8 <__aeabi_dmul>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4640      	mov	r0, r8
 800e8be:	4649      	mov	r1, r9
 800e8c0:	f7f1 fce4 	bl	800028c <__adddf3>
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	463b      	mov	r3, r7
 800e8c8:	4680      	mov	r8, r0
 800e8ca:	4689      	mov	r9, r1
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	f7f1 fe92 	bl	80005f8 <__aeabi_dmul>
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	4602      	mov	r2, r0
 800e8dc:	4649      	mov	r1, r9
 800e8de:	4640      	mov	r0, r8
 800e8e0:	f7f1 fcd4 	bl	800028c <__adddf3>
 800e8e4:	4b19      	ldr	r3, [pc, #100]	; (800e94c <__ieee754_pow+0x3fc>)
 800e8e6:	4299      	cmp	r1, r3
 800e8e8:	ec45 4b19 	vmov	d9, r4, r5
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	460f      	mov	r7, r1
 800e8f0:	468b      	mov	fp, r1
 800e8f2:	f340 82f1 	ble.w	800eed8 <__ieee754_pow+0x988>
 800e8f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e8fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e8fe:	4303      	orrs	r3, r0
 800e900:	f000 81e4 	beq.w	800eccc <__ieee754_pow+0x77c>
 800e904:	ec51 0b18 	vmov	r0, r1, d8
 800e908:	2200      	movs	r2, #0
 800e90a:	2300      	movs	r3, #0
 800e90c:	f7f2 f8e6 	bl	8000adc <__aeabi_dcmplt>
 800e910:	3800      	subs	r0, #0
 800e912:	bf18      	it	ne
 800e914:	2001      	movne	r0, #1
 800e916:	e72b      	b.n	800e770 <__ieee754_pow+0x220>
 800e918:	60000000 	.word	0x60000000
 800e91c:	3ff71547 	.word	0x3ff71547
 800e920:	f85ddf44 	.word	0xf85ddf44
 800e924:	3e54ae0b 	.word	0x3e54ae0b
 800e928:	55555555 	.word	0x55555555
 800e92c:	3fd55555 	.word	0x3fd55555
 800e930:	652b82fe 	.word	0x652b82fe
 800e934:	3ff71547 	.word	0x3ff71547
 800e938:	00000000 	.word	0x00000000
 800e93c:	bff00000 	.word	0xbff00000
 800e940:	3ff00000 	.word	0x3ff00000
 800e944:	3fd00000 	.word	0x3fd00000
 800e948:	3fe00000 	.word	0x3fe00000
 800e94c:	408fffff 	.word	0x408fffff
 800e950:	4bd5      	ldr	r3, [pc, #852]	; (800eca8 <__ieee754_pow+0x758>)
 800e952:	402b      	ands	r3, r5
 800e954:	2200      	movs	r2, #0
 800e956:	b92b      	cbnz	r3, 800e964 <__ieee754_pow+0x414>
 800e958:	4bd4      	ldr	r3, [pc, #848]	; (800ecac <__ieee754_pow+0x75c>)
 800e95a:	f7f1 fe4d 	bl	80005f8 <__aeabi_dmul>
 800e95e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e962:	460c      	mov	r4, r1
 800e964:	1523      	asrs	r3, r4, #20
 800e966:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e96a:	4413      	add	r3, r2
 800e96c:	9305      	str	r3, [sp, #20]
 800e96e:	4bd0      	ldr	r3, [pc, #832]	; (800ecb0 <__ieee754_pow+0x760>)
 800e970:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e974:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e978:	429c      	cmp	r4, r3
 800e97a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e97e:	dd08      	ble.n	800e992 <__ieee754_pow+0x442>
 800e980:	4bcc      	ldr	r3, [pc, #816]	; (800ecb4 <__ieee754_pow+0x764>)
 800e982:	429c      	cmp	r4, r3
 800e984:	f340 8162 	ble.w	800ec4c <__ieee754_pow+0x6fc>
 800e988:	9b05      	ldr	r3, [sp, #20]
 800e98a:	3301      	adds	r3, #1
 800e98c:	9305      	str	r3, [sp, #20]
 800e98e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e992:	2400      	movs	r4, #0
 800e994:	00e3      	lsls	r3, r4, #3
 800e996:	9307      	str	r3, [sp, #28]
 800e998:	4bc7      	ldr	r3, [pc, #796]	; (800ecb8 <__ieee754_pow+0x768>)
 800e99a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e99e:	ed93 7b00 	vldr	d7, [r3]
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	ec53 2b17 	vmov	r2, r3, d7
 800e9a8:	eeb0 9a47 	vmov.f32	s18, s14
 800e9ac:	eef0 9a67 	vmov.f32	s19, s15
 800e9b0:	4682      	mov	sl, r0
 800e9b2:	f7f1 fc69 	bl	8000288 <__aeabi_dsub>
 800e9b6:	4652      	mov	r2, sl
 800e9b8:	4606      	mov	r6, r0
 800e9ba:	460f      	mov	r7, r1
 800e9bc:	462b      	mov	r3, r5
 800e9be:	ec51 0b19 	vmov	r0, r1, d9
 800e9c2:	f7f1 fc63 	bl	800028c <__adddf3>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	49bb      	ldr	r1, [pc, #748]	; (800ecbc <__ieee754_pow+0x76c>)
 800e9ce:	f7f1 ff3d 	bl	800084c <__aeabi_ddiv>
 800e9d2:	ec41 0b1a 	vmov	d10, r0, r1
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	4630      	mov	r0, r6
 800e9dc:	4639      	mov	r1, r7
 800e9de:	f7f1 fe0b 	bl	80005f8 <__aeabi_dmul>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9e8:	9302      	str	r3, [sp, #8]
 800e9ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e9ee:	46ab      	mov	fp, r5
 800e9f0:	106d      	asrs	r5, r5, #1
 800e9f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e9f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e9fa:	ec41 0b18 	vmov	d8, r0, r1
 800e9fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ea02:	2200      	movs	r2, #0
 800ea04:	4640      	mov	r0, r8
 800ea06:	4649      	mov	r1, r9
 800ea08:	4614      	mov	r4, r2
 800ea0a:	461d      	mov	r5, r3
 800ea0c:	f7f1 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4630      	mov	r0, r6
 800ea16:	4639      	mov	r1, r7
 800ea18:	f7f1 fc36 	bl	8000288 <__aeabi_dsub>
 800ea1c:	ec53 2b19 	vmov	r2, r3, d9
 800ea20:	4606      	mov	r6, r0
 800ea22:	460f      	mov	r7, r1
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	f7f1 fc2e 	bl	8000288 <__aeabi_dsub>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	4650      	mov	r0, sl
 800ea32:	4659      	mov	r1, fp
 800ea34:	f7f1 fc28 	bl	8000288 <__aeabi_dsub>
 800ea38:	4642      	mov	r2, r8
 800ea3a:	464b      	mov	r3, r9
 800ea3c:	f7f1 fddc 	bl	80005f8 <__aeabi_dmul>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	4630      	mov	r0, r6
 800ea46:	4639      	mov	r1, r7
 800ea48:	f7f1 fc1e 	bl	8000288 <__aeabi_dsub>
 800ea4c:	ec53 2b1a 	vmov	r2, r3, d10
 800ea50:	f7f1 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ea54:	ec53 2b18 	vmov	r2, r3, d8
 800ea58:	ec41 0b19 	vmov	d9, r0, r1
 800ea5c:	ec51 0b18 	vmov	r0, r1, d8
 800ea60:	f7f1 fdca 	bl	80005f8 <__aeabi_dmul>
 800ea64:	a37c      	add	r3, pc, #496	; (adr r3, 800ec58 <__ieee754_pow+0x708>)
 800ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	460d      	mov	r5, r1
 800ea6e:	f7f1 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ea72:	a37b      	add	r3, pc, #492	; (adr r3, 800ec60 <__ieee754_pow+0x710>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fc08 	bl	800028c <__adddf3>
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	462b      	mov	r3, r5
 800ea80:	f7f1 fdba 	bl	80005f8 <__aeabi_dmul>
 800ea84:	a378      	add	r3, pc, #480	; (adr r3, 800ec68 <__ieee754_pow+0x718>)
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f7f1 fbff 	bl	800028c <__adddf3>
 800ea8e:	4622      	mov	r2, r4
 800ea90:	462b      	mov	r3, r5
 800ea92:	f7f1 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ea96:	a376      	add	r3, pc, #472	; (adr r3, 800ec70 <__ieee754_pow+0x720>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	f7f1 fbf6 	bl	800028c <__adddf3>
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	f7f1 fda8 	bl	80005f8 <__aeabi_dmul>
 800eaa8:	a373      	add	r3, pc, #460	; (adr r3, 800ec78 <__ieee754_pow+0x728>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	f7f1 fbed 	bl	800028c <__adddf3>
 800eab2:	4622      	mov	r2, r4
 800eab4:	462b      	mov	r3, r5
 800eab6:	f7f1 fd9f 	bl	80005f8 <__aeabi_dmul>
 800eaba:	a371      	add	r3, pc, #452	; (adr r3, 800ec80 <__ieee754_pow+0x730>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	f7f1 fbe4 	bl	800028c <__adddf3>
 800eac4:	4622      	mov	r2, r4
 800eac6:	4606      	mov	r6, r0
 800eac8:	460f      	mov	r7, r1
 800eaca:	462b      	mov	r3, r5
 800eacc:	4620      	mov	r0, r4
 800eace:	4629      	mov	r1, r5
 800ead0:	f7f1 fd92 	bl	80005f8 <__aeabi_dmul>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	4630      	mov	r0, r6
 800eada:	4639      	mov	r1, r7
 800eadc:	f7f1 fd8c 	bl	80005f8 <__aeabi_dmul>
 800eae0:	4642      	mov	r2, r8
 800eae2:	4604      	mov	r4, r0
 800eae4:	460d      	mov	r5, r1
 800eae6:	464b      	mov	r3, r9
 800eae8:	ec51 0b18 	vmov	r0, r1, d8
 800eaec:	f7f1 fbce 	bl	800028c <__adddf3>
 800eaf0:	ec53 2b19 	vmov	r2, r3, d9
 800eaf4:	f7f1 fd80 	bl	80005f8 <__aeabi_dmul>
 800eaf8:	4622      	mov	r2, r4
 800eafa:	462b      	mov	r3, r5
 800eafc:	f7f1 fbc6 	bl	800028c <__adddf3>
 800eb00:	4642      	mov	r2, r8
 800eb02:	4682      	mov	sl, r0
 800eb04:	468b      	mov	fp, r1
 800eb06:	464b      	mov	r3, r9
 800eb08:	4640      	mov	r0, r8
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	f7f1 fd74 	bl	80005f8 <__aeabi_dmul>
 800eb10:	4b6b      	ldr	r3, [pc, #428]	; (800ecc0 <__ieee754_pow+0x770>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	f7f1 fbb8 	bl	800028c <__adddf3>
 800eb1c:	4652      	mov	r2, sl
 800eb1e:	465b      	mov	r3, fp
 800eb20:	f7f1 fbb4 	bl	800028c <__adddf3>
 800eb24:	2000      	movs	r0, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	460d      	mov	r5, r1
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	4640      	mov	r0, r8
 800eb30:	4649      	mov	r1, r9
 800eb32:	f7f1 fd61 	bl	80005f8 <__aeabi_dmul>
 800eb36:	4b62      	ldr	r3, [pc, #392]	; (800ecc0 <__ieee754_pow+0x770>)
 800eb38:	4680      	mov	r8, r0
 800eb3a:	4689      	mov	r9, r1
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	4620      	mov	r0, r4
 800eb40:	4629      	mov	r1, r5
 800eb42:	f7f1 fba1 	bl	8000288 <__aeabi_dsub>
 800eb46:	4632      	mov	r2, r6
 800eb48:	463b      	mov	r3, r7
 800eb4a:	f7f1 fb9d 	bl	8000288 <__aeabi_dsub>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	460b      	mov	r3, r1
 800eb52:	4650      	mov	r0, sl
 800eb54:	4659      	mov	r1, fp
 800eb56:	f7f1 fb97 	bl	8000288 <__aeabi_dsub>
 800eb5a:	ec53 2b18 	vmov	r2, r3, d8
 800eb5e:	f7f1 fd4b 	bl	80005f8 <__aeabi_dmul>
 800eb62:	4622      	mov	r2, r4
 800eb64:	4606      	mov	r6, r0
 800eb66:	460f      	mov	r7, r1
 800eb68:	462b      	mov	r3, r5
 800eb6a:	ec51 0b19 	vmov	r0, r1, d9
 800eb6e:	f7f1 fd43 	bl	80005f8 <__aeabi_dmul>
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	4630      	mov	r0, r6
 800eb78:	4639      	mov	r1, r7
 800eb7a:	f7f1 fb87 	bl	800028c <__adddf3>
 800eb7e:	4606      	mov	r6, r0
 800eb80:	460f      	mov	r7, r1
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	4640      	mov	r0, r8
 800eb88:	4649      	mov	r1, r9
 800eb8a:	f7f1 fb7f 	bl	800028c <__adddf3>
 800eb8e:	a33e      	add	r3, pc, #248	; (adr r3, 800ec88 <__ieee754_pow+0x738>)
 800eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb94:	2000      	movs	r0, #0
 800eb96:	4604      	mov	r4, r0
 800eb98:	460d      	mov	r5, r1
 800eb9a:	f7f1 fd2d 	bl	80005f8 <__aeabi_dmul>
 800eb9e:	4642      	mov	r2, r8
 800eba0:	ec41 0b18 	vmov	d8, r0, r1
 800eba4:	464b      	mov	r3, r9
 800eba6:	4620      	mov	r0, r4
 800eba8:	4629      	mov	r1, r5
 800ebaa:	f7f1 fb6d 	bl	8000288 <__aeabi_dsub>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	f7f1 fb67 	bl	8000288 <__aeabi_dsub>
 800ebba:	a335      	add	r3, pc, #212	; (adr r3, 800ec90 <__ieee754_pow+0x740>)
 800ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc0:	f7f1 fd1a 	bl	80005f8 <__aeabi_dmul>
 800ebc4:	a334      	add	r3, pc, #208	; (adr r3, 800ec98 <__ieee754_pow+0x748>)
 800ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebca:	4606      	mov	r6, r0
 800ebcc:	460f      	mov	r7, r1
 800ebce:	4620      	mov	r0, r4
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4630      	mov	r0, r6
 800ebdc:	4639      	mov	r1, r7
 800ebde:	f7f1 fb55 	bl	800028c <__adddf3>
 800ebe2:	9a07      	ldr	r2, [sp, #28]
 800ebe4:	4b37      	ldr	r3, [pc, #220]	; (800ecc4 <__ieee754_pow+0x774>)
 800ebe6:	4413      	add	r3, r2
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	f7f1 fb4e 	bl	800028c <__adddf3>
 800ebf0:	4682      	mov	sl, r0
 800ebf2:	9805      	ldr	r0, [sp, #20]
 800ebf4:	468b      	mov	fp, r1
 800ebf6:	f7f1 fc95 	bl	8000524 <__aeabi_i2d>
 800ebfa:	9a07      	ldr	r2, [sp, #28]
 800ebfc:	4b32      	ldr	r3, [pc, #200]	; (800ecc8 <__ieee754_pow+0x778>)
 800ebfe:	4413      	add	r3, r2
 800ec00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec04:	4606      	mov	r6, r0
 800ec06:	460f      	mov	r7, r1
 800ec08:	4652      	mov	r2, sl
 800ec0a:	465b      	mov	r3, fp
 800ec0c:	ec51 0b18 	vmov	r0, r1, d8
 800ec10:	f7f1 fb3c 	bl	800028c <__adddf3>
 800ec14:	4642      	mov	r2, r8
 800ec16:	464b      	mov	r3, r9
 800ec18:	f7f1 fb38 	bl	800028c <__adddf3>
 800ec1c:	4632      	mov	r2, r6
 800ec1e:	463b      	mov	r3, r7
 800ec20:	f7f1 fb34 	bl	800028c <__adddf3>
 800ec24:	2000      	movs	r0, #0
 800ec26:	4632      	mov	r2, r6
 800ec28:	463b      	mov	r3, r7
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	f7f1 fb2b 	bl	8000288 <__aeabi_dsub>
 800ec32:	4642      	mov	r2, r8
 800ec34:	464b      	mov	r3, r9
 800ec36:	f7f1 fb27 	bl	8000288 <__aeabi_dsub>
 800ec3a:	ec53 2b18 	vmov	r2, r3, d8
 800ec3e:	f7f1 fb23 	bl	8000288 <__aeabi_dsub>
 800ec42:	4602      	mov	r2, r0
 800ec44:	460b      	mov	r3, r1
 800ec46:	4650      	mov	r0, sl
 800ec48:	4659      	mov	r1, fp
 800ec4a:	e610      	b.n	800e86e <__ieee754_pow+0x31e>
 800ec4c:	2401      	movs	r4, #1
 800ec4e:	e6a1      	b.n	800e994 <__ieee754_pow+0x444>
 800ec50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800eca0 <__ieee754_pow+0x750>
 800ec54:	e617      	b.n	800e886 <__ieee754_pow+0x336>
 800ec56:	bf00      	nop
 800ec58:	4a454eef 	.word	0x4a454eef
 800ec5c:	3fca7e28 	.word	0x3fca7e28
 800ec60:	93c9db65 	.word	0x93c9db65
 800ec64:	3fcd864a 	.word	0x3fcd864a
 800ec68:	a91d4101 	.word	0xa91d4101
 800ec6c:	3fd17460 	.word	0x3fd17460
 800ec70:	518f264d 	.word	0x518f264d
 800ec74:	3fd55555 	.word	0x3fd55555
 800ec78:	db6fabff 	.word	0xdb6fabff
 800ec7c:	3fdb6db6 	.word	0x3fdb6db6
 800ec80:	33333303 	.word	0x33333303
 800ec84:	3fe33333 	.word	0x3fe33333
 800ec88:	e0000000 	.word	0xe0000000
 800ec8c:	3feec709 	.word	0x3feec709
 800ec90:	dc3a03fd 	.word	0xdc3a03fd
 800ec94:	3feec709 	.word	0x3feec709
 800ec98:	145b01f5 	.word	0x145b01f5
 800ec9c:	be3e2fe0 	.word	0xbe3e2fe0
 800eca0:	00000000 	.word	0x00000000
 800eca4:	3ff00000 	.word	0x3ff00000
 800eca8:	7ff00000 	.word	0x7ff00000
 800ecac:	43400000 	.word	0x43400000
 800ecb0:	0003988e 	.word	0x0003988e
 800ecb4:	000bb679 	.word	0x000bb679
 800ecb8:	08021208 	.word	0x08021208
 800ecbc:	3ff00000 	.word	0x3ff00000
 800ecc0:	40080000 	.word	0x40080000
 800ecc4:	08021228 	.word	0x08021228
 800ecc8:	08021218 	.word	0x08021218
 800eccc:	a3b5      	add	r3, pc, #724	; (adr r3, 800efa4 <__ieee754_pow+0xa54>)
 800ecce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	f7f1 fad9 	bl	800028c <__adddf3>
 800ecda:	4622      	mov	r2, r4
 800ecdc:	ec41 0b1a 	vmov	d10, r0, r1
 800ece0:	462b      	mov	r3, r5
 800ece2:	4630      	mov	r0, r6
 800ece4:	4639      	mov	r1, r7
 800ece6:	f7f1 facf 	bl	8000288 <__aeabi_dsub>
 800ecea:	4602      	mov	r2, r0
 800ecec:	460b      	mov	r3, r1
 800ecee:	ec51 0b1a 	vmov	r0, r1, d10
 800ecf2:	f7f1 ff11 	bl	8000b18 <__aeabi_dcmpgt>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	f47f ae04 	bne.w	800e904 <__ieee754_pow+0x3b4>
 800ecfc:	4aa4      	ldr	r2, [pc, #656]	; (800ef90 <__ieee754_pow+0xa40>)
 800ecfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed02:	4293      	cmp	r3, r2
 800ed04:	f340 8108 	ble.w	800ef18 <__ieee754_pow+0x9c8>
 800ed08:	151b      	asrs	r3, r3, #20
 800ed0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ed0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ed12:	fa4a f303 	asr.w	r3, sl, r3
 800ed16:	445b      	add	r3, fp
 800ed18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ed1c:	4e9d      	ldr	r6, [pc, #628]	; (800ef94 <__ieee754_pow+0xa44>)
 800ed1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ed22:	4116      	asrs	r6, r2
 800ed24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ed28:	2000      	movs	r0, #0
 800ed2a:	ea23 0106 	bic.w	r1, r3, r6
 800ed2e:	f1c2 0214 	rsb	r2, r2, #20
 800ed32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ed36:	fa4a fa02 	asr.w	sl, sl, r2
 800ed3a:	f1bb 0f00 	cmp.w	fp, #0
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	bfb8      	it	lt
 800ed48:	f1ca 0a00 	rsblt	sl, sl, #0
 800ed4c:	f7f1 fa9c 	bl	8000288 <__aeabi_dsub>
 800ed50:	ec41 0b19 	vmov	d9, r0, r1
 800ed54:	4642      	mov	r2, r8
 800ed56:	464b      	mov	r3, r9
 800ed58:	ec51 0b19 	vmov	r0, r1, d9
 800ed5c:	f7f1 fa96 	bl	800028c <__adddf3>
 800ed60:	a37b      	add	r3, pc, #492	; (adr r3, 800ef50 <__ieee754_pow+0xa00>)
 800ed62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed66:	2000      	movs	r0, #0
 800ed68:	4604      	mov	r4, r0
 800ed6a:	460d      	mov	r5, r1
 800ed6c:	f7f1 fc44 	bl	80005f8 <__aeabi_dmul>
 800ed70:	ec53 2b19 	vmov	r2, r3, d9
 800ed74:	4606      	mov	r6, r0
 800ed76:	460f      	mov	r7, r1
 800ed78:	4620      	mov	r0, r4
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	f7f1 fa84 	bl	8000288 <__aeabi_dsub>
 800ed80:	4602      	mov	r2, r0
 800ed82:	460b      	mov	r3, r1
 800ed84:	4640      	mov	r0, r8
 800ed86:	4649      	mov	r1, r9
 800ed88:	f7f1 fa7e 	bl	8000288 <__aeabi_dsub>
 800ed8c:	a372      	add	r3, pc, #456	; (adr r3, 800ef58 <__ieee754_pow+0xa08>)
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	f7f1 fc31 	bl	80005f8 <__aeabi_dmul>
 800ed96:	a372      	add	r3, pc, #456	; (adr r3, 800ef60 <__ieee754_pow+0xa10>)
 800ed98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9c:	4680      	mov	r8, r0
 800ed9e:	4689      	mov	r9, r1
 800eda0:	4620      	mov	r0, r4
 800eda2:	4629      	mov	r1, r5
 800eda4:	f7f1 fc28 	bl	80005f8 <__aeabi_dmul>
 800eda8:	4602      	mov	r2, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	4640      	mov	r0, r8
 800edae:	4649      	mov	r1, r9
 800edb0:	f7f1 fa6c 	bl	800028c <__adddf3>
 800edb4:	4604      	mov	r4, r0
 800edb6:	460d      	mov	r5, r1
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4630      	mov	r0, r6
 800edbe:	4639      	mov	r1, r7
 800edc0:	f7f1 fa64 	bl	800028c <__adddf3>
 800edc4:	4632      	mov	r2, r6
 800edc6:	463b      	mov	r3, r7
 800edc8:	4680      	mov	r8, r0
 800edca:	4689      	mov	r9, r1
 800edcc:	f7f1 fa5c 	bl	8000288 <__aeabi_dsub>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	f7f1 fa56 	bl	8000288 <__aeabi_dsub>
 800eddc:	4642      	mov	r2, r8
 800edde:	4606      	mov	r6, r0
 800ede0:	460f      	mov	r7, r1
 800ede2:	464b      	mov	r3, r9
 800ede4:	4640      	mov	r0, r8
 800ede6:	4649      	mov	r1, r9
 800ede8:	f7f1 fc06 	bl	80005f8 <__aeabi_dmul>
 800edec:	a35e      	add	r3, pc, #376	; (adr r3, 800ef68 <__ieee754_pow+0xa18>)
 800edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf2:	4604      	mov	r4, r0
 800edf4:	460d      	mov	r5, r1
 800edf6:	f7f1 fbff 	bl	80005f8 <__aeabi_dmul>
 800edfa:	a35d      	add	r3, pc, #372	; (adr r3, 800ef70 <__ieee754_pow+0xa20>)
 800edfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee00:	f7f1 fa42 	bl	8000288 <__aeabi_dsub>
 800ee04:	4622      	mov	r2, r4
 800ee06:	462b      	mov	r3, r5
 800ee08:	f7f1 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ee0c:	a35a      	add	r3, pc, #360	; (adr r3, 800ef78 <__ieee754_pow+0xa28>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	f7f1 fa3b 	bl	800028c <__adddf3>
 800ee16:	4622      	mov	r2, r4
 800ee18:	462b      	mov	r3, r5
 800ee1a:	f7f1 fbed 	bl	80005f8 <__aeabi_dmul>
 800ee1e:	a358      	add	r3, pc, #352	; (adr r3, 800ef80 <__ieee754_pow+0xa30>)
 800ee20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee24:	f7f1 fa30 	bl	8000288 <__aeabi_dsub>
 800ee28:	4622      	mov	r2, r4
 800ee2a:	462b      	mov	r3, r5
 800ee2c:	f7f1 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ee30:	a355      	add	r3, pc, #340	; (adr r3, 800ef88 <__ieee754_pow+0xa38>)
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	f7f1 fa29 	bl	800028c <__adddf3>
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	f7f1 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4640      	mov	r0, r8
 800ee48:	4649      	mov	r1, r9
 800ee4a:	f7f1 fa1d 	bl	8000288 <__aeabi_dsub>
 800ee4e:	4604      	mov	r4, r0
 800ee50:	460d      	mov	r5, r1
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4640      	mov	r0, r8
 800ee58:	4649      	mov	r1, r9
 800ee5a:	f7f1 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ee5e:	2200      	movs	r2, #0
 800ee60:	ec41 0b19 	vmov	d9, r0, r1
 800ee64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	f7f1 fa0c 	bl	8000288 <__aeabi_dsub>
 800ee70:	4602      	mov	r2, r0
 800ee72:	460b      	mov	r3, r1
 800ee74:	ec51 0b19 	vmov	r0, r1, d9
 800ee78:	f7f1 fce8 	bl	800084c <__aeabi_ddiv>
 800ee7c:	4632      	mov	r2, r6
 800ee7e:	4604      	mov	r4, r0
 800ee80:	460d      	mov	r5, r1
 800ee82:	463b      	mov	r3, r7
 800ee84:	4640      	mov	r0, r8
 800ee86:	4649      	mov	r1, r9
 800ee88:	f7f1 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	463b      	mov	r3, r7
 800ee90:	f7f1 f9fc 	bl	800028c <__adddf3>
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	4620      	mov	r0, r4
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	f7f1 f9f4 	bl	8000288 <__aeabi_dsub>
 800eea0:	4642      	mov	r2, r8
 800eea2:	464b      	mov	r3, r9
 800eea4:	f7f1 f9f0 	bl	8000288 <__aeabi_dsub>
 800eea8:	460b      	mov	r3, r1
 800eeaa:	4602      	mov	r2, r0
 800eeac:	493a      	ldr	r1, [pc, #232]	; (800ef98 <__ieee754_pow+0xa48>)
 800eeae:	2000      	movs	r0, #0
 800eeb0:	f7f1 f9ea 	bl	8000288 <__aeabi_dsub>
 800eeb4:	ec41 0b10 	vmov	d0, r0, r1
 800eeb8:	ee10 3a90 	vmov	r3, s1
 800eebc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eec4:	da2b      	bge.n	800ef1e <__ieee754_pow+0x9ce>
 800eec6:	4650      	mov	r0, sl
 800eec8:	f000 f966 	bl	800f198 <scalbn>
 800eecc:	ec51 0b10 	vmov	r0, r1, d0
 800eed0:	ec53 2b18 	vmov	r2, r3, d8
 800eed4:	f7ff bbed 	b.w	800e6b2 <__ieee754_pow+0x162>
 800eed8:	4b30      	ldr	r3, [pc, #192]	; (800ef9c <__ieee754_pow+0xa4c>)
 800eeda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800eede:	429e      	cmp	r6, r3
 800eee0:	f77f af0c 	ble.w	800ecfc <__ieee754_pow+0x7ac>
 800eee4:	4b2e      	ldr	r3, [pc, #184]	; (800efa0 <__ieee754_pow+0xa50>)
 800eee6:	440b      	add	r3, r1
 800eee8:	4303      	orrs	r3, r0
 800eeea:	d009      	beq.n	800ef00 <__ieee754_pow+0x9b0>
 800eeec:	ec51 0b18 	vmov	r0, r1, d8
 800eef0:	2200      	movs	r2, #0
 800eef2:	2300      	movs	r3, #0
 800eef4:	f7f1 fdf2 	bl	8000adc <__aeabi_dcmplt>
 800eef8:	3800      	subs	r0, #0
 800eefa:	bf18      	it	ne
 800eefc:	2001      	movne	r0, #1
 800eefe:	e447      	b.n	800e790 <__ieee754_pow+0x240>
 800ef00:	4622      	mov	r2, r4
 800ef02:	462b      	mov	r3, r5
 800ef04:	f7f1 f9c0 	bl	8000288 <__aeabi_dsub>
 800ef08:	4642      	mov	r2, r8
 800ef0a:	464b      	mov	r3, r9
 800ef0c:	f7f1 fdfa 	bl	8000b04 <__aeabi_dcmpge>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	f43f aef3 	beq.w	800ecfc <__ieee754_pow+0x7ac>
 800ef16:	e7e9      	b.n	800eeec <__ieee754_pow+0x99c>
 800ef18:	f04f 0a00 	mov.w	sl, #0
 800ef1c:	e71a      	b.n	800ed54 <__ieee754_pow+0x804>
 800ef1e:	ec51 0b10 	vmov	r0, r1, d0
 800ef22:	4619      	mov	r1, r3
 800ef24:	e7d4      	b.n	800eed0 <__ieee754_pow+0x980>
 800ef26:	491c      	ldr	r1, [pc, #112]	; (800ef98 <__ieee754_pow+0xa48>)
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f7ff bb30 	b.w	800e58e <__ieee754_pow+0x3e>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	2100      	movs	r1, #0
 800ef32:	f7ff bb2c 	b.w	800e58e <__ieee754_pow+0x3e>
 800ef36:	4630      	mov	r0, r6
 800ef38:	4639      	mov	r1, r7
 800ef3a:	f7ff bb28 	b.w	800e58e <__ieee754_pow+0x3e>
 800ef3e:	9204      	str	r2, [sp, #16]
 800ef40:	f7ff bb7a 	b.w	800e638 <__ieee754_pow+0xe8>
 800ef44:	2300      	movs	r3, #0
 800ef46:	f7ff bb64 	b.w	800e612 <__ieee754_pow+0xc2>
 800ef4a:	bf00      	nop
 800ef4c:	f3af 8000 	nop.w
 800ef50:	00000000 	.word	0x00000000
 800ef54:	3fe62e43 	.word	0x3fe62e43
 800ef58:	fefa39ef 	.word	0xfefa39ef
 800ef5c:	3fe62e42 	.word	0x3fe62e42
 800ef60:	0ca86c39 	.word	0x0ca86c39
 800ef64:	be205c61 	.word	0xbe205c61
 800ef68:	72bea4d0 	.word	0x72bea4d0
 800ef6c:	3e663769 	.word	0x3e663769
 800ef70:	c5d26bf1 	.word	0xc5d26bf1
 800ef74:	3ebbbd41 	.word	0x3ebbbd41
 800ef78:	af25de2c 	.word	0xaf25de2c
 800ef7c:	3f11566a 	.word	0x3f11566a
 800ef80:	16bebd93 	.word	0x16bebd93
 800ef84:	3f66c16c 	.word	0x3f66c16c
 800ef88:	5555553e 	.word	0x5555553e
 800ef8c:	3fc55555 	.word	0x3fc55555
 800ef90:	3fe00000 	.word	0x3fe00000
 800ef94:	000fffff 	.word	0x000fffff
 800ef98:	3ff00000 	.word	0x3ff00000
 800ef9c:	4090cbff 	.word	0x4090cbff
 800efa0:	3f6f3400 	.word	0x3f6f3400
 800efa4:	652b82fe 	.word	0x652b82fe
 800efa8:	3c971547 	.word	0x3c971547

0800efac <__ieee754_sqrt>:
 800efac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb0:	ec55 4b10 	vmov	r4, r5, d0
 800efb4:	4e55      	ldr	r6, [pc, #340]	; (800f10c <__ieee754_sqrt+0x160>)
 800efb6:	43ae      	bics	r6, r5
 800efb8:	ee10 0a10 	vmov	r0, s0
 800efbc:	ee10 3a10 	vmov	r3, s0
 800efc0:	462a      	mov	r2, r5
 800efc2:	4629      	mov	r1, r5
 800efc4:	d110      	bne.n	800efe8 <__ieee754_sqrt+0x3c>
 800efc6:	ee10 2a10 	vmov	r2, s0
 800efca:	462b      	mov	r3, r5
 800efcc:	f7f1 fb14 	bl	80005f8 <__aeabi_dmul>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4620      	mov	r0, r4
 800efd6:	4629      	mov	r1, r5
 800efd8:	f7f1 f958 	bl	800028c <__adddf3>
 800efdc:	4604      	mov	r4, r0
 800efde:	460d      	mov	r5, r1
 800efe0:	ec45 4b10 	vmov	d0, r4, r5
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	2d00      	cmp	r5, #0
 800efea:	dc10      	bgt.n	800f00e <__ieee754_sqrt+0x62>
 800efec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eff0:	4330      	orrs	r0, r6
 800eff2:	d0f5      	beq.n	800efe0 <__ieee754_sqrt+0x34>
 800eff4:	b15d      	cbz	r5, 800f00e <__ieee754_sqrt+0x62>
 800eff6:	ee10 2a10 	vmov	r2, s0
 800effa:	462b      	mov	r3, r5
 800effc:	ee10 0a10 	vmov	r0, s0
 800f000:	f7f1 f942 	bl	8000288 <__aeabi_dsub>
 800f004:	4602      	mov	r2, r0
 800f006:	460b      	mov	r3, r1
 800f008:	f7f1 fc20 	bl	800084c <__aeabi_ddiv>
 800f00c:	e7e6      	b.n	800efdc <__ieee754_sqrt+0x30>
 800f00e:	1512      	asrs	r2, r2, #20
 800f010:	d074      	beq.n	800f0fc <__ieee754_sqrt+0x150>
 800f012:	07d4      	lsls	r4, r2, #31
 800f014:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f018:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f01c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f020:	bf5e      	ittt	pl
 800f022:	0fda      	lsrpl	r2, r3, #31
 800f024:	005b      	lslpl	r3, r3, #1
 800f026:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f02a:	2400      	movs	r4, #0
 800f02c:	0fda      	lsrs	r2, r3, #31
 800f02e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f032:	107f      	asrs	r7, r7, #1
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	2516      	movs	r5, #22
 800f038:	4620      	mov	r0, r4
 800f03a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f03e:	1886      	adds	r6, r0, r2
 800f040:	428e      	cmp	r6, r1
 800f042:	bfde      	ittt	le
 800f044:	1b89      	suble	r1, r1, r6
 800f046:	18b0      	addle	r0, r6, r2
 800f048:	18a4      	addle	r4, r4, r2
 800f04a:	0049      	lsls	r1, r1, #1
 800f04c:	3d01      	subs	r5, #1
 800f04e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f052:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f056:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f05a:	d1f0      	bne.n	800f03e <__ieee754_sqrt+0x92>
 800f05c:	462a      	mov	r2, r5
 800f05e:	f04f 0e20 	mov.w	lr, #32
 800f062:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f066:	4281      	cmp	r1, r0
 800f068:	eb06 0c05 	add.w	ip, r6, r5
 800f06c:	dc02      	bgt.n	800f074 <__ieee754_sqrt+0xc8>
 800f06e:	d113      	bne.n	800f098 <__ieee754_sqrt+0xec>
 800f070:	459c      	cmp	ip, r3
 800f072:	d811      	bhi.n	800f098 <__ieee754_sqrt+0xec>
 800f074:	f1bc 0f00 	cmp.w	ip, #0
 800f078:	eb0c 0506 	add.w	r5, ip, r6
 800f07c:	da43      	bge.n	800f106 <__ieee754_sqrt+0x15a>
 800f07e:	2d00      	cmp	r5, #0
 800f080:	db41      	blt.n	800f106 <__ieee754_sqrt+0x15a>
 800f082:	f100 0801 	add.w	r8, r0, #1
 800f086:	1a09      	subs	r1, r1, r0
 800f088:	459c      	cmp	ip, r3
 800f08a:	bf88      	it	hi
 800f08c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f090:	eba3 030c 	sub.w	r3, r3, ip
 800f094:	4432      	add	r2, r6
 800f096:	4640      	mov	r0, r8
 800f098:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f09c:	f1be 0e01 	subs.w	lr, lr, #1
 800f0a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f0a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f0ac:	d1db      	bne.n	800f066 <__ieee754_sqrt+0xba>
 800f0ae:	430b      	orrs	r3, r1
 800f0b0:	d006      	beq.n	800f0c0 <__ieee754_sqrt+0x114>
 800f0b2:	1c50      	adds	r0, r2, #1
 800f0b4:	bf13      	iteet	ne
 800f0b6:	3201      	addne	r2, #1
 800f0b8:	3401      	addeq	r4, #1
 800f0ba:	4672      	moveq	r2, lr
 800f0bc:	f022 0201 	bicne.w	r2, r2, #1
 800f0c0:	1063      	asrs	r3, r4, #1
 800f0c2:	0852      	lsrs	r2, r2, #1
 800f0c4:	07e1      	lsls	r1, r4, #31
 800f0c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f0ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f0ce:	bf48      	it	mi
 800f0d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f0d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f0d8:	4614      	mov	r4, r2
 800f0da:	e781      	b.n	800efe0 <__ieee754_sqrt+0x34>
 800f0dc:	0ad9      	lsrs	r1, r3, #11
 800f0de:	3815      	subs	r0, #21
 800f0e0:	055b      	lsls	r3, r3, #21
 800f0e2:	2900      	cmp	r1, #0
 800f0e4:	d0fa      	beq.n	800f0dc <__ieee754_sqrt+0x130>
 800f0e6:	02cd      	lsls	r5, r1, #11
 800f0e8:	d50a      	bpl.n	800f100 <__ieee754_sqrt+0x154>
 800f0ea:	f1c2 0420 	rsb	r4, r2, #32
 800f0ee:	fa23 f404 	lsr.w	r4, r3, r4
 800f0f2:	1e55      	subs	r5, r2, #1
 800f0f4:	4093      	lsls	r3, r2
 800f0f6:	4321      	orrs	r1, r4
 800f0f8:	1b42      	subs	r2, r0, r5
 800f0fa:	e78a      	b.n	800f012 <__ieee754_sqrt+0x66>
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	e7f0      	b.n	800f0e2 <__ieee754_sqrt+0x136>
 800f100:	0049      	lsls	r1, r1, #1
 800f102:	3201      	adds	r2, #1
 800f104:	e7ef      	b.n	800f0e6 <__ieee754_sqrt+0x13a>
 800f106:	4680      	mov	r8, r0
 800f108:	e7bd      	b.n	800f086 <__ieee754_sqrt+0xda>
 800f10a:	bf00      	nop
 800f10c:	7ff00000 	.word	0x7ff00000

0800f110 <with_errno>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	4604      	mov	r4, r0
 800f114:	460d      	mov	r5, r1
 800f116:	4616      	mov	r6, r2
 800f118:	f7fa fc38 	bl	800998c <__errno>
 800f11c:	4629      	mov	r1, r5
 800f11e:	6006      	str	r6, [r0, #0]
 800f120:	4620      	mov	r0, r4
 800f122:	bd70      	pop	{r4, r5, r6, pc}

0800f124 <xflow>:
 800f124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f126:	4614      	mov	r4, r2
 800f128:	461d      	mov	r5, r3
 800f12a:	b108      	cbz	r0, 800f130 <xflow+0xc>
 800f12c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f130:	e9cd 2300 	strd	r2, r3, [sp]
 800f134:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f138:	4620      	mov	r0, r4
 800f13a:	4629      	mov	r1, r5
 800f13c:	f7f1 fa5c 	bl	80005f8 <__aeabi_dmul>
 800f140:	2222      	movs	r2, #34	; 0x22
 800f142:	b003      	add	sp, #12
 800f144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f148:	f7ff bfe2 	b.w	800f110 <with_errno>

0800f14c <__math_uflow>:
 800f14c:	b508      	push	{r3, lr}
 800f14e:	2200      	movs	r2, #0
 800f150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f154:	f7ff ffe6 	bl	800f124 <xflow>
 800f158:	ec41 0b10 	vmov	d0, r0, r1
 800f15c:	bd08      	pop	{r3, pc}

0800f15e <__math_oflow>:
 800f15e:	b508      	push	{r3, lr}
 800f160:	2200      	movs	r2, #0
 800f162:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f166:	f7ff ffdd 	bl	800f124 <xflow>
 800f16a:	ec41 0b10 	vmov	d0, r0, r1
 800f16e:	bd08      	pop	{r3, pc}

0800f170 <fabs>:
 800f170:	ec51 0b10 	vmov	r0, r1, d0
 800f174:	ee10 2a10 	vmov	r2, s0
 800f178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f17c:	ec43 2b10 	vmov	d0, r2, r3
 800f180:	4770      	bx	lr

0800f182 <finite>:
 800f182:	b082      	sub	sp, #8
 800f184:	ed8d 0b00 	vstr	d0, [sp]
 800f188:	9801      	ldr	r0, [sp, #4]
 800f18a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f18e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f192:	0fc0      	lsrs	r0, r0, #31
 800f194:	b002      	add	sp, #8
 800f196:	4770      	bx	lr

0800f198 <scalbn>:
 800f198:	b570      	push	{r4, r5, r6, lr}
 800f19a:	ec55 4b10 	vmov	r4, r5, d0
 800f19e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	462b      	mov	r3, r5
 800f1a6:	b99a      	cbnz	r2, 800f1d0 <scalbn+0x38>
 800f1a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f1ac:	4323      	orrs	r3, r4
 800f1ae:	d036      	beq.n	800f21e <scalbn+0x86>
 800f1b0:	4b39      	ldr	r3, [pc, #228]	; (800f298 <scalbn+0x100>)
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	ee10 0a10 	vmov	r0, s0
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f7f1 fa1d 	bl	80005f8 <__aeabi_dmul>
 800f1be:	4b37      	ldr	r3, [pc, #220]	; (800f29c <scalbn+0x104>)
 800f1c0:	429e      	cmp	r6, r3
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	460d      	mov	r5, r1
 800f1c6:	da10      	bge.n	800f1ea <scalbn+0x52>
 800f1c8:	a32b      	add	r3, pc, #172	; (adr r3, 800f278 <scalbn+0xe0>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	e03a      	b.n	800f246 <scalbn+0xae>
 800f1d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f1d4:	428a      	cmp	r2, r1
 800f1d6:	d10c      	bne.n	800f1f2 <scalbn+0x5a>
 800f1d8:	ee10 2a10 	vmov	r2, s0
 800f1dc:	4620      	mov	r0, r4
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7f1 f854 	bl	800028c <__adddf3>
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	460d      	mov	r5, r1
 800f1e8:	e019      	b.n	800f21e <scalbn+0x86>
 800f1ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	3a36      	subs	r2, #54	; 0x36
 800f1f2:	4432      	add	r2, r6
 800f1f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1f8:	428a      	cmp	r2, r1
 800f1fa:	dd08      	ble.n	800f20e <scalbn+0x76>
 800f1fc:	2d00      	cmp	r5, #0
 800f1fe:	a120      	add	r1, pc, #128	; (adr r1, 800f280 <scalbn+0xe8>)
 800f200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f204:	da1c      	bge.n	800f240 <scalbn+0xa8>
 800f206:	a120      	add	r1, pc, #128	; (adr r1, 800f288 <scalbn+0xf0>)
 800f208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f20c:	e018      	b.n	800f240 <scalbn+0xa8>
 800f20e:	2a00      	cmp	r2, #0
 800f210:	dd08      	ble.n	800f224 <scalbn+0x8c>
 800f212:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f21a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f21e:	ec45 4b10 	vmov	d0, r4, r5
 800f222:	bd70      	pop	{r4, r5, r6, pc}
 800f224:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f228:	da19      	bge.n	800f25e <scalbn+0xc6>
 800f22a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f22e:	429e      	cmp	r6, r3
 800f230:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f234:	dd0a      	ble.n	800f24c <scalbn+0xb4>
 800f236:	a112      	add	r1, pc, #72	; (adr r1, 800f280 <scalbn+0xe8>)
 800f238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1e2      	bne.n	800f206 <scalbn+0x6e>
 800f240:	a30f      	add	r3, pc, #60	; (adr r3, 800f280 <scalbn+0xe8>)
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	f7f1 f9d7 	bl	80005f8 <__aeabi_dmul>
 800f24a:	e7cb      	b.n	800f1e4 <scalbn+0x4c>
 800f24c:	a10a      	add	r1, pc, #40	; (adr r1, 800f278 <scalbn+0xe0>)
 800f24e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0b8      	beq.n	800f1c8 <scalbn+0x30>
 800f256:	a10e      	add	r1, pc, #56	; (adr r1, 800f290 <scalbn+0xf8>)
 800f258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f25c:	e7b4      	b.n	800f1c8 <scalbn+0x30>
 800f25e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f262:	3236      	adds	r2, #54	; 0x36
 800f264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f26c:	4620      	mov	r0, r4
 800f26e:	4b0c      	ldr	r3, [pc, #48]	; (800f2a0 <scalbn+0x108>)
 800f270:	2200      	movs	r2, #0
 800f272:	e7e8      	b.n	800f246 <scalbn+0xae>
 800f274:	f3af 8000 	nop.w
 800f278:	c2f8f359 	.word	0xc2f8f359
 800f27c:	01a56e1f 	.word	0x01a56e1f
 800f280:	8800759c 	.word	0x8800759c
 800f284:	7e37e43c 	.word	0x7e37e43c
 800f288:	8800759c 	.word	0x8800759c
 800f28c:	fe37e43c 	.word	0xfe37e43c
 800f290:	c2f8f359 	.word	0xc2f8f359
 800f294:	81a56e1f 	.word	0x81a56e1f
 800f298:	43500000 	.word	0x43500000
 800f29c:	ffff3cb0 	.word	0xffff3cb0
 800f2a0:	3c900000 	.word	0x3c900000

0800f2a4 <_init>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr

0800f2b0 <_fini>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	bf00      	nop
 800f2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2b6:	bc08      	pop	{r3}
 800f2b8:	469e      	mov	lr, r3
 800f2ba:	4770      	bx	lr
